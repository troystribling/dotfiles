"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = __importDefault(require("../store"));
const code_manager_1 = require("../code-manager");
class HydrogenProvider {
    constructor(emitter) {
        this._emitter = emitter;
    }
    onDidChangeKernel(callback) {
        this._emitter.on("did-change-kernel", (kernel) => {
            if (kernel) {
                return callback(kernel.getPluginWrapper());
            }
            return callback(null);
        });
    }
    getActiveKernel() {
        if (!store_1.default.kernel) {
            const grammar = store_1.default.editor ? store_1.default.editor.getGrammar().name : "";
            throw new Error(`No running kernel for grammar \`${grammar}\` found`);
        }
        return store_1.default.kernel.getPluginWrapper();
    }
    getCellRange(editor) {
        if (!store_1.default.editor) {
            return null;
        }
        return code_manager_1.getCurrentCell(store_1.default.editor);
    }
}
exports.default = HydrogenProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHlkcm9nZW4tcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvcGx1Z2luLWFwaS9oeWRyb2dlbi1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLHFEQUE2QjtBQUU3QixrREFBaUQ7QUFhakQsTUFBcUIsZ0JBQWdCO0lBRW5DLFlBQVksT0FBcUQ7UUFDL0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQU1ELGlCQUFpQixDQUFDLFFBQXNDO1FBQ3RELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUNkLG1CQUFtQixFQUNuQixDQUFDLE1BQWlDLEVBQUUsRUFBRTtZQUNwQyxJQUFJLE1BQU0sRUFBRTtnQkFDVixPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO2FBQzVDO1lBRUQsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBTUQsZUFBZTtRQUNiLElBQUksQ0FBQyxlQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pCLE1BQU0sT0FBTyxHQUFHLGVBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLGVBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDbkUsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsT0FBTyxVQUFVLENBQUMsQ0FBQztTQUN2RTtRQUVELE9BQU8sZUFBSyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFPRCxZQUFZLENBQUMsTUFBcUM7UUFDaEQsSUFBSSxDQUFDLGVBQUssQ0FBQyxNQUFNLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUNELE9BQU8sNkJBQWMsQ0FBQyxlQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUlGO0FBbERELG1DQWtEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRFZGl0b3IsIFJhbmdlLCBFbWl0dGVyIH0gZnJvbSBcImF0b21cIjtcclxuaW1wb3J0IHN0b3JlIGZyb20gXCIuLi9zdG9yZVwiO1xyXG5pbXBvcnQgdHlwZSBLZXJuZWwgZnJvbSBcIi4uL2tlcm5lbFwiO1xyXG5pbXBvcnQgeyBnZXRDdXJyZW50Q2VsbCB9IGZyb20gXCIuLi9jb2RlLW1hbmFnZXJcIjtcclxuLyoqXHJcbiAqIEB2ZXJzaW9uIDEuMC4wIFRoZSBQbHVnaW4gQVBJIGFsbG93cyB5b3UgdG8gbWFrZSBIeWRyb2dlbiBhd2Vzb21lLiBZb3Ugd2lsbFxyXG4gKiAgIGJlIGFibGUgdG8gaW50ZXJhY3Qgd2l0aCB0aGlzIGNsYXNzIGluIHlvdXIgSHlkcm9nZW4gUGx1Z2luIHVzaW5nIEF0b20nc1xyXG4gKiAgIFtTZXJ2aWNlIEFQSV0oaHR0cDovL2Jsb2cuYXRvbS5pby8yMDE1LzAzLzI1L25ldy1zZXJ2aWNlcy1BUEkuaHRtbCkuXHJcbiAqXHJcbiAqICAgVGFrZSBhIGxvb2sgYXQgb3VyIFtFeGFtcGxlXHJcbiAqICAgUGx1Z2luXShodHRwczovL2dpdGh1Yi5jb20vbGdlaWdlci9oeWRyb2dlbi1leGFtcGxlLXBsdWdpbikgYW5kIHRoZSBbQXRvbVxyXG4gKiAgIEZsaWdodCBNYW51YWxdKGh0dHA6Ly9mbGlnaHQtbWFudWFsLmF0b20uaW8vaGFja2luZy1hdG9tLykgZm9yIGxlYXJuaW5nIGhvd1xyXG4gKiAgIHRvIGludGVyYWN0IHdpdGggSHlkcm9nZW4gaW4geW91ciBvd24gcGx1Z2luLlxyXG4gKiBAY2xhc3MgSHlkcm9nZW5Qcm92aWRlclxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEh5ZHJvZ2VuUHJvdmlkZXIge1xyXG4gIHByaXZhdGUgX2VtaXR0ZXI6IEVtaXR0ZXI8e30sIHsgXCJkaWQtY2hhbmdlLWtlcm5lbFwiOiBLZXJuZWwgfT4gfCB1bmRlZmluZWQ7XHJcbiAgY29uc3RydWN0b3IoZW1pdHRlcjogRW1pdHRlcjx7fSwgeyBcImRpZC1jaGFuZ2Uta2VybmVsXCI6IEtlcm5lbCB9Pikge1xyXG4gICAgdGhpcy5fZW1pdHRlciA9IGVtaXR0ZXI7XHJcbiAgfVxyXG5cclxuICAvKlxyXG4gICAqIENhbGxzIHlvdXIgY2FsbGJhY2sgd2hlbiB0aGUga2VybmVsIGhhcyBjaGFuZ2VkLlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IENhbGxiYWNrXHJcbiAgICovXHJcbiAgb25EaWRDaGFuZ2VLZXJuZWwoY2FsbGJhY2s6ICguLi5hcmdzOiBBcnJheTxhbnk+KSA9PiBhbnkpIHtcclxuICAgIHRoaXMuX2VtaXR0ZXIub24oXHJcbiAgICAgIFwiZGlkLWNoYW5nZS1rZXJuZWxcIixcclxuICAgICAgKGtlcm5lbDogS2VybmVsIHwgbnVsbCB8IHVuZGVmaW5lZCkgPT4ge1xyXG4gICAgICAgIGlmIChrZXJuZWwpIHtcclxuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhrZXJuZWwuZ2V0UGx1Z2luV3JhcHBlcigpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcclxuICAgICAgfVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogR2V0IHRoZSBgSHlkcm9nZW5LZXJuZWxgIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHRleHQgZWRpdG9yLlxyXG4gICAqIEByZXR1cm4ge0NsYXNzfSBgSHlkcm9nZW5LZXJuZWxgXHJcbiAgICovXHJcbiAgZ2V0QWN0aXZlS2VybmVsKCkge1xyXG4gICAgaWYgKCFzdG9yZS5rZXJuZWwpIHtcclxuICAgICAgY29uc3QgZ3JhbW1hciA9IHN0b3JlLmVkaXRvciA/IHN0b3JlLmVkaXRvci5nZXRHcmFtbWFyKCkubmFtZSA6IFwiXCI7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcnVubmluZyBrZXJuZWwgZm9yIGdyYW1tYXIgXFxgJHtncmFtbWFyfVxcYCBmb3VuZGApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdG9yZS5rZXJuZWwuZ2V0UGx1Z2luV3JhcHBlcigpO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAgKiBHZXQgdGhlIGBSYW5nZWAgdGhhdCB3aWxsIHJ1biBpZiBgaHlkcm9nZW46cnVuLWNlbGxgIGlzIGNhbGxlZC5cclxuICAgKiBgbnVsbGAgaXMgcmV0dXJuZWQgaWYgbm8gYWN0aXZlIHRleHQgZWRpdG9yLlxyXG4gICAqIEByZXR1cm4ge0NsYXNzfSBgUmFuZ2VgXHJcbiAgICovXHJcbiAgZ2V0Q2VsbFJhbmdlKGVkaXRvcjogVGV4dEVkaXRvciB8IG51bGwgfCB1bmRlZmluZWQpIHtcclxuICAgIGlmICghc3RvcmUuZWRpdG9yKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdldEN1cnJlbnRDZWxsKHN0b3JlLmVkaXRvcik7XHJcbiAgfVxyXG4gIC8qXHJcbiAgICotLS0tLS0tLVxyXG4gICAqL1xyXG59XHJcbiJdfQ==