"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertMarkdownToOutput = exports.clearResults = exports.clearResult = exports.importResult = exports.createResult = void 0;
const result_view_1 = __importDefault(require("./components/result-view"));
const output_area_1 = __importDefault(require("./panes/output-area"));
const watches_1 = __importDefault(require("./panes/watches"));
const utils_1 = require("./utils");
function createResult({ editor, kernel, markers, }, { code, row, cellType, }) {
    if (!editor || !kernel || !markers) {
        return;
    }
    if (atom.workspace.getActivePaneItem() instanceof watches_1.default) {
        kernel.watchesStore.run();
        return;
    }
    const globalOutputStore = atom.config.get("Hydrogen.outputAreaDefault") ||
        atom.workspace.getPaneItems().find((item) => item instanceof output_area_1.default)
        ? kernel.outputStore
        : null;
    if (globalOutputStore) {
        utils_1.openOrShowDock(utils_1.OUTPUT_AREA_URI);
    }
    const { outputStore } = new result_view_1.default(markers, kernel, editor, row, !globalOutputStore || cellType == "markdown");
    if (code.search(/\S/) != -1) {
        switch (cellType) {
            case "markdown":
                if (globalOutputStore) {
                    globalOutputStore.appendOutput(convertMarkdownToOutput(code));
                }
                else {
                    outputStore.appendOutput(convertMarkdownToOutput(code));
                }
                outputStore.appendOutput({
                    data: "ok",
                    stream: "status",
                });
                break;
            case "codecell":
                kernel.execute(code, (result) => {
                    outputStore.appendOutput(result);
                    if (globalOutputStore) {
                        globalOutputStore.appendOutput(result);
                    }
                });
                break;
        }
    }
    else {
        outputStore.appendOutput({
            data: "ok",
            stream: "status",
        });
    }
}
exports.createResult = createResult;
function importResult({ editor, markers, }, { outputs, row, }) {
    if (!editor || !markers) {
        return;
    }
    const { outputStore } = new result_view_1.default(markers, null, editor, row, true);
    for (const output of outputs) {
        outputStore.appendOutput(output);
    }
}
exports.importResult = importResult;
function clearResult({ editor, markers, }) {
    if (!editor || !markers) {
        return;
    }
    const [startRow, endRow] = editor.getLastSelection().getBufferRowRange();
    for (let row = startRow; row <= endRow; row++) {
        markers.clearOnRow(row);
    }
}
exports.clearResult = clearResult;
function clearResults({ kernel, markers, }) {
    if (markers) {
        markers.clear();
    }
    if (!kernel) {
        return;
    }
    kernel.outputStore.clear();
}
exports.clearResults = clearResults;
function convertMarkdownToOutput(markdownString) {
    return {
        output_type: "display_data",
        data: {
            "text/markdown": markdownString,
        },
        metadata: {},
    };
}
exports.convertMarkdownToOutput = convertMarkdownToOutput;
//# sourceMappingURL=data:application/json;base64,