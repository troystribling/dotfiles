"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutocompleteWatchEditor = void 0;
const atom_1 = require("atom");
class AutocompleteWatchEditor {
    constructor() {
        this.addAutocompleteToEditor = (editor, labels) => {
            return new atom_1.Disposable();
        };
        this.isEnabeled = false;
    }
    consume(store, watchEditor) {
        this.disposables = new atom_1.CompositeDisposable();
        this.addAutocompleteToEditor = watchEditor;
        for (const kernel of store.runningKernels) {
            const watchesStoreDisposable = new atom_1.CompositeDisposable();
            kernel.watchesStore.autocompleteDisposables = watchesStoreDisposable;
            this.disposables.add(watchesStoreDisposable);
            for (const watch of kernel.watchesStore.watches) {
                this.addAutocompleteToWatch(kernel.watchesStore, watch);
            }
        }
        this.isEnabeled = true;
        const disposable = new atom_1.Disposable(() => this.disable(store));
        store.subscriptions.add(disposable);
        return disposable;
    }
    disable(store) {
        this.addAutocompleteToEditor = (editor, labels) => {
            return new atom_1.Disposable();
        };
        for (const kernel of store.runningKernels) {
            for (const watch of kernel.watchesStore.watches) {
                watch.autocompleteDisposable = null;
            }
            kernel.watchesStore.autocompleteDisposables = null;
        }
        this.disposables.dispose();
        this.isEnabeled = false;
    }
    addAutocompleteToWatch(watchesStore, watch) {
        const disposable = this.addAutocompleteToEditor(watch.editor, [
            "default",
            "workspace-center",
            "symbol-provider",
        ]);
        if (disposable) {
            watch.autocompleteDisposable = disposable;
            if (watchesStore.autocompleteDisposables) {
                watchesStore.autocompleteDisposables.add(disposable);
            }
        }
    }
    removeAutocompleteFromWatch(watchesStore, watch) {
        const disposable = watch.autocompleteDisposable;
        if (disposable) {
            if (watchesStore.autocompleteDisposables) {
                watchesStore.autocompleteDisposables.remove(disposable);
            }
            disposable.dispose();
            watch.autocompleteDisposable = null;
        }
    }
    dispose(disposable) {
        this.disposables.remove(disposable);
        disposable.dispose();
    }
    register(disposable) {
        this.disposables.add(disposable);
    }
}
exports.AutocompleteWatchEditor = AutocompleteWatchEditor;
const autocompleteConsumer = new AutocompleteWatchEditor();
exports.default = autocompleteConsumer;
//# sourceMappingURL=data:application/json;base64,