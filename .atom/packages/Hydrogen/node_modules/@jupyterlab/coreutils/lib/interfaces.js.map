{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../coreutils/src/interfaces.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n\n/**\n * A generic interface for change emitter payloads.\n */\nexport\ninterface IChangedArgs<T> {\n  /**\n   * The name of the changed attribute.\n   */\n  name: string;\n\n  /**\n   * The old value of the changed attribute.\n   */\n  oldValue: T;\n\n  /**\n   * The new value of the changed attribute.\n   */\n  newValue: T;\n}\n\n\n/**\n * The description of a general purpose data connector.\n */\nexport\ninterface IDataConnector<T, U = T> {\n  /**\n   * Retrieve a saved bundle from the data connector.\n   *\n   * @param id - The identifier used to retrieve a data bundle.\n   *\n   * @returns A promise that bears a data payload if available.\n   *\n   * #### Notes\n   * The promise returned by this method may be rejected if an error\n   * occurs in  retrieving the data. Non-existence of an `id` will\n   * succeed with `undefined`.\n   */\n  fetch(id: string): Promise<T | undefined>;\n\n  /**\n   * Remove a value from the data connector.\n   *\n   * @param id - The identifier for the data being removed.\n   *\n   * @returns A promise that is rejected if remove fails and succeeds otherwise.\n   */\n  remove(id: string): Promise<void>;\n\n  /**\n   * Save a value in the data connector.\n   *\n   * @param id - The identifier for the data being saved.\n   *\n   * @param value - The data being saved.\n   *\n   * @returns A promise that is rejected if saving fails and succeeds otherwise.\n   */\n  save(id: string, value: U): Promise<void>;\n}\n"]}