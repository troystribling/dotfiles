{"version":3,"file":"markdowncodeblocks.js","sourceRoot":"","sources":["../../../../coreutils/src/markdowncodeblocks.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n/**\n * The namespace for code block functions which help\n * in extract code from markdown text\n */\nexport\nnamespace MarkdownCodeBlocks {\n  export\n  const CODE_BLOCK_MARKER = \"```\";\n  const markdownExtensions: string[] = [\n    '.markdown',\n    '.mdown',\n    '.mkdn',\n    '.md',\n    '.mkd',\n    '.mdwn',\n    '.mdtxt',\n    '.mdtext',\n    '.text',\n    '.txt',\n    '.Rmd'\n  ];\n\n  export\n  class MarkdownCodeBlock {\n    startLine: number;\n    endLine: number;\n    code: string;\n    constructor(startLine: number) {\n      this.startLine = startLine;\n      this.code = \"\";\n      this.endLine = -1;\n    }\n  }\n\n  /**\n  * Check whether the given file extension is a markdown extension\n  * @param extension - A file extension\n  *\n  * @returns true/false depending on whether this is a supported markdown extension\n  */\n  export\n  function isMarkdown(extension: string): boolean {\n    return markdownExtensions.indexOf(extension) > -1\n  }\n\n  /**\n  * Construct all code snippets from current text\n  * (this could be potentially optimized if we can cache and detect differences)\n  * @param text - A string to parse codeblocks from\n  *\n  * @returns An array of MarkdownCodeBlocks.\n  */\n  export\n  function findMarkdownCodeBlocks(text: string): MarkdownCodeBlock[] {\n    if (!text || text == '') {\n      return [];\n    }\n\n    const lines = text.split(\"\\n\");\n    const codeBlocks: MarkdownCodeBlock[] = [];\n    var currentBlock = null;\n    for (var lineIndex = 0; lineIndex < lines.length; lineIndex++) {\n      const line = lines[lineIndex];\n      const lineContainsMarker = line.indexOf(CODE_BLOCK_MARKER) === 0;\n      const constructingBlock = currentBlock != null;\n      // Skip this line if it is not part of any code block and doesn't contain a marker.\n      if (!lineContainsMarker && !constructingBlock) {\n        continue;\n      }\n\n      // Check if we are already constructing a code block.\n      if (!constructingBlock) {\n        // Start constructing a new code block.\n        currentBlock = new MarkdownCodeBlock(lineIndex);\n\n        // Check whether this is a single line code block of the form ```a = 10```.\n        const firstIndex = line.indexOf(CODE_BLOCK_MARKER);\n        const lastIndex = line.lastIndexOf(CODE_BLOCK_MARKER);\n        const isSingleLine = firstIndex !== lastIndex;\n        if (isSingleLine) {\n          currentBlock.code = line.substring(firstIndex + CODE_BLOCK_MARKER.length, lastIndex);\n          currentBlock.endLine = lineIndex;\n          codeBlocks.push(currentBlock);\n          currentBlock = null;\n        }\n      } else if (currentBlock) {\n        if (lineContainsMarker) {\n          // End of block, finish it up.\n          currentBlock.endLine = lineIndex - 1;\n          codeBlocks.push(currentBlock);\n          currentBlock = null;\n        } else {\n          // Append the current line.\n          currentBlock.code += line + '\\n';\n        }\n      }\n    }\n    return codeBlocks;\n  }\n\n}\n"]}