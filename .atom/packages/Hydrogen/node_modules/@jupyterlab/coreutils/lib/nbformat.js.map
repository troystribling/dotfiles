{"version":3,"file":"nbformat.js","sourceRoot":"","sources":["../../../../coreutils/src/nbformat.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,6BAA6B;AAC7B,oEAAoE;AACpE,sFAAsF;AAEtF,iDAE6B;AAG7B;;GAEG;AACH,IACU,QAAQ,CAigBjB;AAlgBD,WACU,QAAQ;IAChB;;OAEG;IAEG,sBAAa,GAAW,CAAC,CAAC;IAEhC;;OAEG;IAEG,sBAAa,GAAW,CAAC,CAAC;IA8EhC;;;;;;;;OAQG;IACH,2BAC2B,IAAY,EAAE,KAAmC;QAC1E,wDAAwD;QACxD,IAAM,QAAQ,GAAG,6BAA6B,CAAC;QAC/C,IAAM,UAAU,GAAG,IAAI,KAAK,kBAAkB,IAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEtE,IAAI,QAAQ,GAAG,UAAC,CAAM;YACpB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,iBAAiB,CAAC;QACjE,CAAC,CAAC;QAEF,kEAAkE;QAClE,oBAAoB;QACpB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzB,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,IAAI,OAAK,GAAG,IAAI,CAAC;YAChB,KAAkB,CAAC,OAAO,CAAC,UAAA,CAAC;gBAC3B,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjB,OAAK,GAAG,KAAK,CAAC;gBAChB,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,OAAK,CAAC;QACf,CAAC;QAED,uDAAuD;QACvD,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,CAAC,UAAU,CAAC;QACrB,CAAC;QAED,mDAAmD;QACnD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,0DAA0D;QAC1D,MAAM,CAAC,mBAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IApCQ,0BAAiB,oBAoCzB,CAAA;IA+JD;;OAEG;IACH,eACe,IAAW;QACxB,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC;IAClC,CAAC;IAFQ,cAAK,QAEb,CAAA;IAED;;OAEG;IACH,oBACoB,IAAW;QAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,UAAU,CAAC;IACvC,CAAC;IAFQ,mBAAU,aAElB,CAAA;IAED;;OAEG;IACH,gBACgB,IAAW;QACzB,MAAM,CAAC,IAAI,CAAC,SAAS,KAAK,MAAM,CAAC;IACnC,CAAC;IAFQ,eAAM,SAEd,CAAA;IAwJD;;OAEG;IACH,yBACyB,MAAe;QACtC,MAAM,CAAC,MAAM,CAAC,WAAW,KAAK,gBAAgB,CAAC;IACjD,CAAC;IAFQ,wBAAe,kBAEvB,CAAA;IAED;;OAEG;IACH,uBACuB,MAAe;QACpC,MAAM,CAAC,MAAM,CAAC,WAAW,KAAK,cAAc,CAAC;IAC/C,CAAC;IAFQ,sBAAa,gBAErB,CAAA;IAED;;OAEG;IACH,yBACyB,MAAe;QACtC,MAAM,CAAC,MAAM,CAAC,WAAW,KAAK,qBAAqB,CAAC;IACtD,CAAC;IAFQ,wBAAe,kBAEvB,CAAA;IAED;;OAEG;IACH,kBACkB,MAAe;QAC/B,MAAM,CAAC,MAAM,CAAC,WAAW,KAAK,QAAQ,CAAC;IACzC,CAAC;IAFQ,iBAAQ,WAEhB,CAAA;IAED;;OAEG;IACH,iBACiB,MAAe;QAC9B,MAAM,CAAC,MAAM,CAAC,WAAW,KAAK,OAAO,CAAC;IACxC,CAAC;IAFQ,gBAAO,UAEf,CAAA;AAOH,CAAC,EAjgBS,QAAQ,GAAR,gBAAQ,KAAR,gBAAQ,QAigBjB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// Notebook format interfaces\n// https://nbformat.readthedocs.io/en/latest/format_description.html\n// https://github.com/jupyter/nbformat/blob/master/nbformat/v4/nbformat.v4.schema.json\n\nimport {\n  JSONObject, JSONExt\n} from '@phosphor/coreutils';\n\n\n/**\n * A namespace for nbformat interfaces.\n */\nexport\nnamespace nbformat {\n  /**\n   * The major version of the notebook format.\n   */\n  export\n  const MAJOR_VERSION: number = 4;\n\n  /**\n   * The minor version of the notebook format.\n   */\n  export\n  const MINOR_VERSION: number = 2;\n\n  /**\n   * The kernelspec metadata.\n   */\n  export\n  interface IKernelspecMetadata extends JSONObject {\n    name: string;\n    display_name: string;\n  }\n\n  /**\n   * The language info metatda\n   */\n  export\n  interface ILanguageInfoMetadata extends  JSONObject {\n    name: string;\n    codemirror_mode?: string | JSONObject;\n    file_extension?: string;\n    mimetype?: string;\n    pygments_lexer?: string;\n  }\n\n  /**\n   * The default metadata for the notebook.\n   */\n  export\n  interface INotebookMetadata extends JSONObject {\n    kernelspec: IKernelspecMetadata;\n    language_info: ILanguageInfoMetadata;\n    orig_nbformat: number;\n  }\n\n  /**\n   * The notebook content.\n   */\n  export\n  interface INotebookContent extends JSONObject {\n    metadata: INotebookMetadata;\n    nbformat_minor: number;\n    nbformat: number;\n    cells: ICell[];\n  }\n\n  /**\n   * A multiline string.\n   */\n  export\n  type MultilineString = string | string[];\n\n  /**\n   * A mime-type keyed dictionary of data.\n   */\n  export\n  interface IMimeBundle extends JSONObject {\n    [key: string]: MultilineString | JSONObject;\n  }\n\n  /**\n   * Media attachments (e.g. inline images).\n   */\n  export\n  interface IAttachments {\n    [key: string]: IMimeBundle;\n  }\n\n  /**\n   * The code cell's prompt number. Will be null if the cell has not been run.\n   */\n  export\n  type ExecutionCount = number | null;\n\n  /**\n   * Cell output metadata.\n   */\n  export\n  type OutputMetadata = JSONObject;\n\n  /**\n   * Validate a mime type/value pair.\n   *\n   * @param type - The mimetype name.\n   *\n   * @param value - The value associated with the type.\n   *\n   * @returns Whether the type/value pair are valid.\n   */\n  export\n  function validateMimeValue(type: string, value: MultilineString | JSONObject): boolean {\n    // Check if \"application/json\" or \"application/foo+json\"\n    const jsonTest = /^application\\/(.*?)+\\+json$/;\n    const isJSONType = type === 'application/json' || jsonTest.test(type);\n\n    let isString = (x: any) => {\n      return Object.prototype.toString.call(x) === '[object String]';\n    };\n\n    // If it is an array, make sure if is not a JSON type and it is an\n    // array of strings.\n    if (Array.isArray(value)) {\n      if (isJSONType) {\n        return false;\n      }\n      let valid = true;\n      (value as string[]).forEach(v => {\n        if (!isString(v)) {\n          valid = false;\n        }\n      });\n      return valid;\n    }\n\n    // If it is a string, make sure we are not a JSON type.\n    if (isString(value)) {\n      return !isJSONType;\n    }\n\n    // It is not a string, make sure it is a JSON type.\n    if (!isJSONType) {\n      return false;\n    }\n\n    // It is a JSON type, make sure it is a valid JSON object.\n    return JSONExt.isObject(value);\n  }\n\n  /**\n   * A type which describes the type of cell.\n   */\n  export\n  type CellType = 'code' | 'markdown' | 'raw';\n\n  /**\n   * Cell-level metadata.\n   */\n  export\n  interface IBaseCellMetadata extends JSONObject {\n    /**\n     * Whether the cell is trusted.\n     *\n     * #### Notes\n     * This is not strictly part of the nbformat spec, but it is added by\n     * the contents manager.\n     *\n     * See https://jupyter-notebook.readthedocs.io/en/latest/security.html.\n     */\n    trusted: boolean;\n\n    /**\n     * The cell's name. If present, must be a non-empty string.\n     */\n    name: string;\n\n    /**\n     * The cell's tags. Tags must be unique, and must not contain commas.\n     */\n    tags: string[];\n  }\n\n  /**\n   * The base cell interface.\n   */\n  export\n  interface IBaseCell extends JSONObject {\n    /**\n     * String identifying the type of cell.\n     */\n    cell_type: string;\n\n    /**\n     * Contents of the cell, represented as an array of lines.\n     */\n    source: MultilineString;\n\n    /**\n     * Cell-level metadata.\n     */\n    metadata: Partial<ICellMetadata>;\n  }\n\n  /**\n   * Metadata for the raw cell.\n   */\n  export\n  interface IRawCellMetadata extends IBaseCellMetadata {\n    /**\n     * Raw cell metadata format for nbconvert.\n     */\n    format: string;\n  }\n\n  /**\n   * A raw cell.\n   */\n  export\n  interface IRawCell extends IBaseCell {\n    /**\n     * String identifying the type of cell.\n     */\n    cell_type: 'raw';\n\n    /**\n     * Cell-level metadata.\n     */\n    metadata: Partial<IRawCellMetadata>;\n\n    /**\n     * Cell attachments.\n     */\n    attachments?: IAttachments;\n  }\n\n  /**\n   * A markdown cell.\n   */\n  export\n  interface IMarkdownCell extends IBaseCell {\n    /**\n     * String identifying the type of cell.\n     */\n    cell_type: 'markdown';\n\n    /**\n     * Cell attachments.\n     */\n    attachments?: IAttachments;\n  }\n\n  /**\n   * Metadata for a code cell.\n   */\n  export\n  interface ICodeCellMetadata extends IBaseCellMetadata {\n    /**\n     * Whether the cell is collapsed/expanded.\n     */\n    collapsed: boolean;\n\n    /**\n     * Whether the cell's output is scrolled, unscrolled, or autoscrolled.\n     */\n    scrolled: boolean | 'auto';\n  }\n\n  /**\n   * A code cell.\n   */\n  export\n  interface ICodeCell extends IBaseCell {\n    /**\n     * String identifying the type of cell.\n     */\n    cell_type: 'code';\n\n    /**\n     * Cell-level metadata.\n     */\n    metadata: Partial<ICodeCellMetadata>;\n\n    /**\n     * Execution, display, or stream outputs.\n     */\n    outputs: IOutput[];\n\n    /**\n     * The code cell's prompt number. Will be null if the cell has not been run.\n     */\n    execution_count: ExecutionCount;\n  }\n\n  /**\n   * An unrecognized cell.\n   */\n  export\n  interface IUnrecognizedCell extends IBaseCell { }\n\n\n  /**\n   * A cell union type.\n   */\n  export\n  type ICell = IRawCell | IMarkdownCell | ICodeCell | IUnrecognizedCell;\n\n  /**\n   * Test whether a cell is a raw cell.\n   */\n  export\n  function isRaw(cell: ICell): cell is IRawCell {\n    return cell.cell_type === 'raw';\n  }\n\n  /**\n   * Test whether a cell is a markdown cell.\n   */\n  export\n  function isMarkdown(cell: ICell): cell is IMarkdownCell {\n    return cell.cell_type === 'markdown';\n  }\n\n  /**\n   * Test whether a cell is a code cell.\n   */\n  export\n  function isCode(cell: ICell): cell is ICodeCell {\n    return cell.cell_type === 'code';\n  }\n\n  /**\n   * A union metadata type.\n   */\n  export\n  type ICellMetadata = IBaseCellMetadata | IRawCellMetadata | ICodeCellMetadata;\n\n  /**\n   * The valid output types.\n   */\n  export\n  type OutputType = 'execute_result' | 'display_data' | 'stream' | 'error' | 'update_display_data';\n\n  /**\n   * The base output type.\n   */\n  export\n  interface IBaseOutput extends JSONObject {\n    /**\n     * Type of cell output.\n     */\n    output_type: string;\n  }\n\n  /**\n   * Result of executing a code cell.\n   */\n  export\n  interface IExecuteResult extends IBaseOutput {\n    /**\n     * Type of cell output.\n     */\n    output_type: 'execute_result';\n\n    /**\n     * A result's prompt number.\n     */\n    execution_count: ExecutionCount;\n\n    /**\n     * A mime-type keyed dictionary of data.\n     */\n    data: IMimeBundle;\n\n    /**\n     * Cell output metadata.\n     */\n    metadata: OutputMetadata;\n  }\n\n  /**\n   * Data displayed as a result of code cell execution.\n   */\n  export\n  interface IDisplayData extends IBaseOutput {\n    /**\n     * Type of cell output.\n     */\n    output_type: 'display_data';\n\n    /**\n     * A mime-type keyed dictionary of data.\n     */\n    data: IMimeBundle;\n\n    /**\n     * Cell output metadata.\n     */\n    metadata: OutputMetadata;\n  }\n\n  /**\n   * Data displayed as an update to existing display data.\n   */\n  export\n  interface IDisplayUpdate extends IBaseOutput {\n    /**\n     * Type of cell output.\n     */\n    output_type: 'update_display_data';\n\n    /**\n     * A mime-type keyed dictionary of data.\n     */\n    data: IMimeBundle;\n\n    /**\n     * Cell output metadata.\n     */\n    metadata: OutputMetadata;\n  }\n\n  /**\n   * Stream output from a code cell.\n   */\n  export\n  interface IStream extends IBaseOutput {\n    /**\n     * Type of cell output.\n     */\n    output_type: 'stream';\n\n    /**\n     * The name of the stream.\n     */\n    name: StreamType;\n\n    /**\n     * The stream's text output.\n     */\n    text: MultilineString;\n  }\n\n  /**\n   * An alias for a stream type.\n   */\n  export\n  type StreamType = 'stdout' | 'stderr';\n\n  /**\n   * Output of an error that occurred during code cell execution.\n   */\n  export\n  interface IError extends IBaseOutput {\n    /**\n     * Type of cell output.\n     */\n    output_type: 'error';\n\n    /**\n     * The name of the error.\n     */\n    ename: string;\n\n    /**\n     * The value, or message, of the error.\n     */\n    evalue: string;\n\n    /**\n     * The error's traceback.\n     */\n    traceback: string[];\n  }\n\n  /**\n   * Unrecognized output.\n   */\n  export\n  interface IUnrecognizedOutput extends IBaseOutput { }\n\n  /**\n   * Test whether an output is an execute result.\n   */\n  export\n  function isExecuteResult(output: IOutput): output is IExecuteResult {\n    return output.output_type === 'execute_result';\n  }\n\n  /**\n   * Test whether an output is from display data.\n   */\n  export\n  function isDisplayData(output: IOutput): output is IDisplayData {\n    return output.output_type === 'display_data';\n  }\n\n  /**\n   * Test whether an output is from updated display data.\n   */\n  export\n  function isDisplayUpdate(output: IOutput): output is IDisplayUpdate {\n    return output.output_type === 'update_display_data';\n  }\n\n  /**\n   * Test whether an output is from a stream.\n   */\n  export\n  function isStream(output: IOutput): output is IStream {\n    return output.output_type === 'stream';\n  }\n\n  /**\n   * Test whether an output is from a stream.\n   */\n  export\n  function isError(output: IOutput): output is IError {\n    return output.output_type === 'error';\n  }\n\n  /**\n   * An output union type.\n   */\n  export\n  type IOutput = IUnrecognizedOutput | IExecuteResult | IDisplayData | IStream | IError;\n}\n"]}