{"version":3,"file":"pageconfig.js","sourceRoot":"","sources":["../../../../coreutils/src/pageconfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  JSONExt\n} from '@phosphor/coreutils';\n\nimport * as minimist\n  from 'minimist';\n\nimport {\n  URLExt\n} from './url';\n\n\n/**\n * Declare stubs for the node variables.\n */\ndeclare var process: any;\ndeclare var require: any;\n\n\n/**\n * The namespace for Page Config functions.\n */\nexport\nnamespace PageConfig {\n  /**\n   * Get global configuration data for the Jupyter application.\n   *\n   * @param name - The name of the configuration option.\n   *\n   * @returns The config value or an empty string if not found.\n   *\n   * #### Notes\n   * All values are treated as strings.\n   * For browser based applications, it is assumed that the page HTML\n   * includes a script tag with the id `jupyter-config-data` containing the\n   * configuration as valid JSON.\n   * For node applications, it is assumed that the process was launched\n   * with a `--jupyter-config-data` option pointing to a JSON settings\n   * file.\n   */\n  export\n  function getOption(name: string): string {\n    if (configData) {\n      return configData[name] || '';\n    }\n    configData = Object.create(null);\n    let found = false;\n\n    // Use script tag if available.\n    if (typeof document !== 'undefined') {\n      const el = document.getElementById('jupyter-config-data');\n\n      if (el) {\n        configData = JSON.parse(el.textContent || '') as {\n          [key: string]: string\n        };\n        found = true;\n      }\n    }\n    // Otherwise use CLI if given.\n    if (!found && typeof process !== 'undefined') {\n      try {\n        const cli = minimist(process.argv.slice(2));\n        if ('jupyter-config-data' in cli) {\n          const path: any = require('path');\n          const fullPath = path.resolve(cli['jupyter-config-data']);\n\n          /* tslint:disable */\n          // Force Webpack to ignore this require.\n          configData = eval('require')(fullPath) as { [key: string]: string };\n          /* tslint:enable */\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    }\n\n    if (!JSONExt.isObject(configData)) {\n      configData = Object.create(null);\n    } else {\n      for (let key in configData) {\n        // Quote characters are escaped, unescape them.\n        configData[key] = String(configData[key]).split('&#39;').join('\"');\n      }\n    }\n    return configData![name] || '';\n  }\n\n  /**\n   * Set global configuration data for the Jupyter application.\n   *\n   * @param name - The name of the configuration option.\n   * @param value - The value to set the option to.\n   *\n   * @returns The last config value or an empty string if it doesn't exist.\n   */\n  export\n  function setOption(name: string, value: string): string {\n    const last = getOption(name);\n\n    configData![name] = value;\n    return last;\n  }\n\n  /**\n   * Get the base url for a Jupyter application.\n   */\n  export\n  function getBaseUrl(): string {\n    let baseUrl = getOption('baseUrl');\n    if (!baseUrl || baseUrl === '/') {\n      baseUrl = (typeof location === 'undefined' ?\n                 'http://localhost:8888/' : location.origin + '/');\n    }\n    return URLExt.parse(baseUrl).toString();\n  }\n\n  /**\n   * Get the base websocket URLExt for a Jupyter application.\n   */\n  export\n  function getWsUrl(baseUrl?: string): string {\n    let wsUrl = getOption('wsUrl');\n    if (!wsUrl) {\n      baseUrl = baseUrl || getBaseUrl();\n      if (baseUrl.indexOf('http') !== 0) {\n        if (typeof location !== 'undefined') {\n          baseUrl = URLExt.join(location.origin, baseUrl);\n        } else {\n          baseUrl = URLExt.join('http://localhost:8888/', baseUrl);\n        }\n      }\n      wsUrl = 'ws' + baseUrl.slice(4);\n    }\n    return URLExt.parse(wsUrl).toString();\n  }\n\n  /**\n   * Private page config data for the Jupyter application.\n   */\n  let configData: { [key: string]: string } | null = null;\n}\n"]}