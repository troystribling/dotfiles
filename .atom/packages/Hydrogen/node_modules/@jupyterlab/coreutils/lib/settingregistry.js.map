{"version":3,"file":"settingregistry.js","sourceRoot":"","sources":["../../../../coreutils/src/settingregistry.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport * as Ajv from 'ajv';\n\nimport {\n  find\n} from '@phosphor/algorithm';\n\nimport {\n  JSONExt, JSONObject, JSONValue, Token\n} from '@phosphor/coreutils';\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  IDataConnector\n} from './interfaces';\n\n\n/**\n * The key in the schema for setting editor icon class hints.\n */\nexport\nconst ICON_CLASS_KEY ='jupyter.lab.setting-icon-class';\n\n/**\n * The key in the schema for setting editor icon label hints.\n */\nexport\nconst ICON_LABEL_KEY = 'jupyter.lab.setting-icon-label';\n\n/**\n * An alias for the JSON deep copy function.\n */\nconst copy = JSONExt.deepCopy;\n\n\n/**\n * An implementation of a schema validator.\n */\nexport\ninterface ISchemaValidator {\n  /**\n   * Add a schema to the validator.\n   *\n   * @param plugin - The plugin ID.\n   *\n   * @param schema - The schema being added.\n   *\n   * @return A list of errors if the schema fails to validate or `null` if there\n   * are no errors.\n   *\n   * #### Notes\n   * It is safe to call this function multiple times with the same plugin name.\n   */\n  addSchema(plugin: string, schema: ISettingRegistry.ISchema): ISchemaValidator.IError[] | null;\n\n  /**\n   * Validate a plugin's schema and user data; populate the `composite` data.\n   *\n   * @param plugin - The plugin being validated. Its `composite` data will be\n   * populated by reference.\n   *\n   * @return A list of errors if either the schema or data fail to validate or\n   * `null` if there are no errors.\n   */\n  validateData(plugin: ISettingRegistry.IPlugin): ISchemaValidator.IError[] | null;\n}\n\n\n/**\n * A namespace for schema validator interfaces.\n */\nexport\nnamespace ISchemaValidator {\n  /**\n   * A schema validation error definition.\n   */\n  export\n  interface IError {\n    /**\n     * The path in the data where the error occurred.\n     */\n    dataPath: string;\n\n    /**\n     * The keyword whose validation failed.\n     */\n    keyword: string;\n\n    /**\n     * The error message.\n     */\n    message: string;\n\n    /**\n     * The path in the schema where the error occurred.\n     */\n    schemaPath: string;\n  }\n}\n\n\n/* tslint:disable */\n/**\n * The setting registry token.\n */\nexport\nconst ISettingRegistry = new Token<ISettingRegistry>('@jupyterlab/coreutils:ISettingRegistry');\n/* tslint:enable */\n\n\n/**\n * A namespace for setting registry interfaces.\n */\nexport\nnamespace ISettingRegistry {\n  /**\n   * The settings for a specific plugin.\n   */\n  export\n  interface IPlugin extends JSONObject {\n    /**\n     * The name of the plugin.\n     */\n    id: string;\n\n    /**\n     * The collection of values for a specified setting.\n     */\n    data: ISettingBundle;\n\n    /**\n     * The JSON schema for the plugin.\n     */\n    schema: ISchema;\n  }\n\n  /**\n   * A schema type that is a minimal subset of the formal JSON Schema along with\n   * optional JupyterLab rendering hints.\n   */\n  export\n  interface ISchema extends JSONObject {\n    /**\n     * The JupyterLab icon class hint for a plugin can be overridden by user\n     * settings. It can also be root level and therefore \"private\".\n     */\n    'jupyter.lab.setting-icon-class'?: string;\n\n    /**\n     * The JupyterLab icon label hint for a plugin can be overridden by user\n     * settings. It can also be root level and therefore \"private\".\n     */\n    'jupyter.lab.setting-icon-label'?: string;\n\n    /**\n     * The default value, if any.\n     */\n    default?: any;\n\n    /**\n     * The schema description.\n     */\n    description?: string;\n\n    /**\n     * The schema's child properties.\n     */\n    properties?: {\n      /**\n       * The JupyterLab icon class hint for a plugin can be overridden by user\n       * settings. It can also be root level and therefore \"private\".\n       */\n      'jupyter.lab.setting-icon-class'?: ISchema;\n\n      /**\n       * The JupyterLab icon label hint for a plugin can be overridden by user\n       * settings. It can also be root level and therefore \"private\".\n       */\n      'jupyter.lab.setting-icon-label'?: ISchema;\n\n      /**\n       * Arbitrary setting keys can be added.\n       */\n      [key: string]: ISchema;\n    };\n\n    /**\n     * The title of the schema.\n     */\n    title?: string;\n\n    /**\n     * The type or types of the data.\n     */\n    type?: string | string[];\n  }\n\n  /**\n   * The setting values for a plugin.\n   */\n  export\n  interface ISettingBundle extends JSONObject {\n    /**\n     * A composite of the user setting values and the plugin schema defaults.\n     *\n     * #### Notes\n     * The `composite` values will always be a superset of the `user` values.\n     */\n    composite: JSONObject;\n\n    /**\n     * The user setting values.\n     */\n    user: JSONObject;\n  }\n\n  /**\n   * An interface for manipulating the settings of a specific plugin.\n   */\n  export\n  interface ISettings extends IDisposable {\n    /**\n     * A signal that emits when the plugin's settings have changed.\n     */\n    readonly changed: ISignal<this, void>;\n\n    /**\n     * Get the composite of user settings and extension defaults.\n     */\n    readonly composite: JSONObject;\n\n    /*\n     * The plugin name.\n     */\n    readonly plugin: string;\n\n    /**\n     * Get the plugin settings schema.\n     */\n    readonly schema: ISettingRegistry.ISchema;\n\n    /**\n     * Get the user settings.\n     */\n    readonly user: JSONObject;\n\n    /**\n     * Return the defaults in a commented JSON format.\n     */\n    annotatedDefaults(): string;\n\n    /**\n     * Calculate the default value of a setting by iterating through the schema.\n     *\n     * @param key - The name of the setting whose default value is calculated.\n     *\n     * @returns A calculated default JSON value for a specific setting.\n     */\n    default(key: string): JSONValue | undefined;\n\n    /**\n     * Get an individual setting.\n     *\n     * @param key - The name of the setting being retrieved.\n     *\n     * @returns The setting value.\n     */\n    get(key: string): { composite: JSONValue, user: JSONValue };\n\n    /**\n     * Remove a single setting.\n     *\n     * @param key - The name of the setting being removed.\n     *\n     * @returns A promise that resolves when the setting is removed.\n     *\n     * #### Notes\n     * This function is asynchronous because it writes to the setting registry.\n     */\n    remove(key: string): Promise<void>;\n\n    /**\n     * Save all of the plugin's user settings at once.\n     */\n    save(user: JSONObject): Promise<void>;\n\n    /**\n     * Set a single setting.\n     *\n     * @param key - The name of the setting being set.\n     *\n     * @param value - The value of the setting.\n     *\n     * @returns A promise that resolves when the setting has been saved.\n     *\n     * #### Notes\n     * This function is asynchronous because it writes to the setting registry.\n     */\n    set(key: string, value: JSONValue): Promise<void>;\n  }\n}\n\n\n/**\n * An implementation of a setting registry.\n */\nexport\ninterface ISettingRegistry extends SettingRegistry {}\n\n\n/**\n * The default implementation of a schema validator.\n */\nexport\nclass DefaultSchemaValidator implements ISchemaValidator {\n  /**\n   * Instantiate a schema validator.\n   */\n  constructor() {\n    this._composer.addSchema(Private.SCHEMA, 'main');\n    this._validator.addSchema(Private.SCHEMA, 'main');\n  }\n\n  /**\n   * Add a schema to the validator.\n   *\n   * @param plugin - The plugin ID.\n   *\n   * @param schema - The schema being added.\n   *\n   * @return A list of errors if the schema fails to validate or `null` if there\n   * are no errors.\n   *\n   * #### Notes\n   * It is safe to call this function multiple times with the same plugin name.\n   */\n  addSchema(plugin: string, schema: ISettingRegistry.ISchema): ISchemaValidator.IError[] | null {\n    const composer = this._composer;\n    const validator = this._validator;\n    const validate = validator.getSchema('main');\n\n    // Validate against the main schema.\n    if (!(validate(schema) as boolean)) {\n      return validate.errors as ISchemaValidator.IError[];\n    }\n\n    // Validate against the JSON schema meta-schema.\n    if (!(validator.validateSchema(schema) as boolean)) {\n      return validator.errors as ISchemaValidator.IError[];\n    }\n\n    // Remove if schema already exists.\n    composer.removeSchema(plugin);\n    validator.removeSchema(plugin);\n\n    // Add schema to the validator and composer.\n    composer.addSchema(schema, plugin);\n    validator.addSchema(schema, plugin);\n\n    return null;\n\n  }\n\n  /**\n   * Validate a plugin's schema and user data; populate the `composite` data.\n   *\n   * @param plugin - The plugin being validated. Its `composite` data will be\n   * populated by reference.\n   *\n   * @return A list of errors if either the schema or data fail to validate or\n   * `null` if there are no errors.\n   */\n  validateData(plugin: ISettingRegistry.IPlugin): ISchemaValidator.IError[] | null {\n    const validate = this._validator.getSchema(plugin.id);\n    const compose = this._composer.getSchema(plugin.id);\n\n    if (!validate || !compose) {\n      const errors = this.addSchema(plugin.id, plugin.schema);\n\n      if (errors) {\n        return errors;\n      }\n    }\n\n    if (!validate(plugin.data.user)) {\n      return validate.errors as ISchemaValidator.IError[];\n    }\n\n    // Copy the user data before validating (and merging defaults).\n    plugin.data.composite = copy(plugin.data.user);\n\n    if (!compose(plugin.data.composite)) {\n      return compose.errors as ISchemaValidator.IError[];\n    }\n\n    return null;\n  }\n\n  private _composer = new Ajv({ useDefaults: true });\n  private _validator = new Ajv();\n}\n\n\n/**\n * The default concrete implementation of a setting registry.\n */\nexport\nclass SettingRegistry {\n  /**\n   * Create a new setting registry.\n   */\n  constructor(options: SettingRegistry.IOptions) {\n    this._connector = options.connector;\n    this._validator = options.validator || new DefaultSchemaValidator();\n  }\n\n  /**\n   * The schema of the setting registry.\n   */\n  readonly schema = Private.SCHEMA;\n\n  /**\n   * A signal that emits the name of a plugin when its settings change.\n   */\n  get pluginChanged(): ISignal<this, string> {\n    return this._pluginChanged;\n  }\n\n  /**\n   * Returns a list of plugin settings held in the registry.\n   */\n  get plugins(): ISettingRegistry.IPlugin[] {\n    const plugins = this._plugins;\n\n    return Object.keys(plugins)\n      .map(p => copy(plugins[p]) as ISettingRegistry.IPlugin);\n  }\n\n  /**\n   * Get an individual setting.\n   *\n   * @param plugin - The name of the plugin whose settings are being retrieved.\n   *\n   * @param key - The name of the setting being retrieved.\n   *\n   * @returns A promise that resolves when the setting is retrieved.\n   */\n  get(plugin: string, key: string): Promise<{ composite: JSONValue, user: JSONValue }> {\n    const plugins = this._plugins;\n\n    if (plugin in plugins) {\n      const { composite, user } = plugins[plugin].data;\n      const result = {\n        composite: key in composite ? copy(composite[key]) : void 0,\n        user: key in user ? copy(user[key]) : void 0\n      };\n\n      return Promise.resolve(result);\n    }\n\n    return this.load(plugin).then(() => this.get(plugin, key));\n  }\n\n  /**\n   * Load a plugin's settings into the setting registry.\n   *\n   * @param plugin - The name of the plugin whose settings are being loaded.\n   *\n   * @returns A promise that resolves with a plugin settings object or rejects\n   * if the plugin is not found.\n   */\n  load(plugin: string): Promise<ISettingRegistry.ISettings> {\n    const plugins = this._plugins;\n    const registry = this;\n\n    // If the plugin exists, resolve.\n    if (plugin in plugins) {\n      const settings = new Settings({ plugin: plugins[plugin], registry });\n\n      return Promise.resolve(settings);\n    }\n\n    // If the plugin needs to be loaded from the data connector, fetch.\n    return this.reload(plugin);\n  }\n\n  /**\n   * Reload a plugin's settings into the registry even if they already exist.\n   *\n   * @param plugin - The name of the plugin whose settings are being reloaded.\n   *\n   * @returns A promise that resolves with a plugin settings object or rejects\n   * with a list of `ISchemaValidator.IError` objects if it fails.\n   */\n  reload(plugin: string): Promise<ISettingRegistry.ISettings> {\n    const connector = this._connector;\n    const plugins = this._plugins;\n\n    // If the plugin needs to be loaded from the connector, fetch.\n    return connector.fetch(plugin).then(data => {\n      // Validate the response from the connector; populate `composite` field.\n      try {\n        this._validate(data);\n      } catch (errors) {\n        const output = [`Validating ${plugin} failed:`];\n        (errors as ISchemaValidator.IError[]).forEach((error, index) => {\n          const { dataPath, schemaPath, keyword, message } = error;\n\n          output.push(`${index} - schema @ ${schemaPath}, data @ ${dataPath}`);\n          output.push(`\\t${keyword} ${message}`);\n        });\n        console.error(output.join('\\n'));\n\n        throw new Error(`Failed validating ${plugin}`);\n      }\n\n      // Emit that a plugin has changed.\n      this._pluginChanged.emit(plugin);\n\n      return new Settings({\n        plugin: copy(plugins[plugin]) as ISettingRegistry.IPlugin,\n        registry: this\n      });\n    });\n  }\n\n  /**\n   * Remove a single setting in the registry.\n   *\n   * @param plugin - The name of the plugin whose setting is being removed.\n   *\n   * @param key - The name of the setting being removed.\n   *\n   * @returns A promise that resolves when the setting is removed.\n   */\n  remove(plugin: string, key: string): Promise<void> {\n    const plugins = this._plugins;\n\n    if (!(plugin in plugins)) {\n      return Promise.resolve(void 0);\n    }\n\n    delete plugins[plugin].data.user[key];\n\n    return this._save(plugin);\n  }\n\n  /**\n   * Set a single setting in the registry.\n   *\n   * @param plugin - The name of the plugin whose setting is being set.\n   *\n   * @param key - The name of the setting being set.\n   *\n   * @param value - The value of the setting being set.\n   *\n   * @returns A promise that resolves when the setting has been saved.\n   *\n   */\n  set(plugin: string, key: string, value: JSONValue): Promise<void> {\n    const plugins = this._plugins;\n\n    if (!(plugin in plugins)) {\n      return this.load(plugin).then(() => this.set(plugin, key, value));\n    }\n\n    plugins[plugin].data.user[key] = value;\n\n    return this._save(plugin);\n  }\n\n  /**\n   * Upload a plugin's settings.\n   *\n   * @param raw - The raw plugin settings being uploaded.\n   *\n   * @returns A promise that resolves when the settings have been saved.\n   *\n   * #### Notes\n   * Only the `user` data will be saved.\n   */\n  upload(raw: ISettingRegistry.IPlugin): Promise<void> {\n    const plugins = this._plugins;\n    const plugin = raw.id;\n    let errors: ISchemaValidator.IError[] | null = null;\n\n    // Validate the user data and create the composite data.\n    raw.data.user = raw.data.user || { };\n    delete raw.data.composite;\n    errors = this._validator.validateData(raw);\n    if (errors) {\n      return Promise.reject(errors);\n    }\n\n    // Set the local copy.\n    plugins[plugin] = raw;\n\n    return this._save(plugin);\n  }\n\n  /**\n   * Save a plugin in the registry.\n   */\n  private _save(plugin: string): Promise<void> {\n    const plugins = this._plugins;\n\n    if (!(plugin in plugins)) {\n      return Promise.reject(`${plugin} does not exist in setting registry.`);\n    }\n\n    this._validate(plugins[plugin]);\n\n    return this._connector.save(plugin, plugins[plugin].data.user)\n      .then(() => { this._pluginChanged.emit(plugin); });\n  }\n\n  /**\n   * Validate a plugin's data and schema, compose the `composite` data.\n   */\n  private _validate(plugin: ISettingRegistry.IPlugin): void {\n    let errors: ISchemaValidator.IError[] | null = null;\n\n    // Add the schema to the registry.\n    errors = this._validator.addSchema(plugin.id, plugin.schema);\n    if (errors) {\n      throw errors;\n    }\n\n    // Validate the user data and create the composite data.\n    plugin.data.user = plugin.data.user || { };\n    delete plugin.data.composite;\n    errors = this._validator.validateData(plugin);\n    if (errors) {\n      throw errors;\n    }\n\n    // Set the local copy.\n    this._plugins[plugin.id] = plugin;\n  }\n\n  private _connector: IDataConnector<ISettingRegistry.IPlugin, JSONObject>;\n  private _pluginChanged = new Signal<this, string>(this);\n  private _plugins: { [name: string]: ISettingRegistry.IPlugin } = Object.create(null);\n  private _validator: ISchemaValidator;\n}\n\n\n/**\n * A manager for a specific plugin's settings.\n */\nexport\nclass Settings implements ISettingRegistry.ISettings {\n  /**\n   * Instantiate a new plugin settings manager.\n   */\n  constructor(options: Settings.IOptions) {\n    const { plugin } = options;\n\n    this.plugin = plugin.id;\n    this.registry = options.registry;\n\n    this._composite = plugin.data.composite || { };\n    this._schema = plugin.schema || { type: 'object' };\n    this._user = plugin.data.user || { };\n\n    this.registry.pluginChanged.connect(this._onPluginChanged, this);\n  }\n\n  /**\n   * A signal that emits when the plugin's settings have changed.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * Get the composite of user settings and extension defaults.\n   */\n  get composite(): JSONObject {\n    return this._composite;\n  }\n\n  /**\n   * Test whether the plugin settings manager disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Get the plugin settings schema.\n   */\n  get schema(): ISettingRegistry.ISchema {\n    return this._schema;\n  }\n\n  /**\n   * Get the user settings.\n   */\n  get user(): JSONObject {\n    return this._user;\n  }\n\n  /*\n   * The plugin name.\n   */\n  readonly plugin: string;\n\n  /**\n   * The system registry instance used by the settings manager.\n   */\n  readonly registry: SettingRegistry;\n\n  /**\n   * Return the defaults in a commented JSON format.\n   */\n  annotatedDefaults(): string {\n    return Private.annotatedDefaults(this._schema, this.plugin);\n  }\n\n  /**\n   * Calculate the default value of a setting by iterating through the schema.\n   *\n   * @param key - The name of the setting whose default value is calculated.\n   *\n   * @returns A calculated default JSON value for a specific setting.\n   */\n  default(key: string): JSONValue | undefined {\n    return Private.reifyDefault(this.schema, key);\n  }\n\n  /**\n   * Dispose of the plugin settings resources.\n   */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n\n    this._isDisposed = true;\n    Signal.clearData(this);\n  }\n\n  /**\n   * Get an individual setting.\n   *\n   * @param key - The name of the setting being retrieved.\n   *\n   * @returns The setting value.\n   *\n   * #### Notes\n   * This method returns synchronously because it uses a cached copy of the\n   * plugin settings that is synchronized with the registry.\n   */\n  get(key: string): { composite: JSONValue, user: JSONValue } {\n    const { composite, user } = this;\n\n    return {\n      composite: key in composite ? copy(composite[key]) : void 0,\n      user: key in user ? copy(user[key]) : void 0\n    };\n  }\n\n  /**\n   * Remove a single setting.\n   *\n   * @param key - The name of the setting being removed.\n   *\n   * @returns A promise that resolves when the setting is removed.\n   *\n   * #### Notes\n   * This function is asynchronous because it writes to the setting registry.\n   */\n  remove(key: string): Promise<void> {\n    return this.registry.remove(this.plugin, key);\n  }\n\n  /**\n   * Save all of the plugin's user settings at once.\n   */\n  save(user: JSONObject): Promise<void> {\n    return this.registry.upload({\n      id: this.plugin,\n      data: { composite: this._composite, user },\n      schema: this._schema\n    });\n  }\n\n  /**\n   * Set a single setting.\n   *\n   * @param key - The name of the setting being set.\n   *\n   * @param value - The value of the setting.\n   *\n   * @returns A promise that resolves when the setting has been saved.\n   *\n   * #### Notes\n   * This function is asynchronous because it writes to the setting registry.\n   */\n  set(key: string, value: JSONValue): Promise<void> {\n    return this.registry.set(this.plugin, key, value);\n  }\n\n  /**\n   * Handle plugin changes in the setting registry.\n   */\n  private _onPluginChanged(sender: any, plugin: string): void {\n    if (plugin === this.plugin) {\n      const found = find(this.registry.plugins, p => p.id === plugin);\n\n      if (!found) {\n        return;\n      }\n\n      const { composite, user } = found.data;\n      const schema = found.schema;\n\n      this._composite = composite || { };\n      this._schema = schema || { type: 'object' };\n      this._user = user || { };\n      this._changed.emit(void 0);\n    }\n  }\n\n  private _changed = new Signal<this, void>(this);\n  private _composite: JSONObject = Object.create(null);\n  private _isDisposed = false;\n  private _schema: ISettingRegistry.ISchema = Object.create(null);\n  private _user: JSONObject = Object.create(null);\n}\n\n\n/**\n * A namespace for `SettingRegistry` statics.\n */\nexport\nnamespace SettingRegistry {\n  /**\n   * The instantiation options for a setting registry\n   */\n  export\n  interface IOptions {\n    /**\n     * The data connector used by the setting registry.\n     */\n    connector: IDataConnector<ISettingRegistry.IPlugin, JSONObject>;\n\n    /**\n     * The validator used to enforce the settings JSON schema.\n     */\n    validator?: ISchemaValidator;\n  }\n}\n\n\n/**\n * A namespace for `Settings` statics.\n */\nexport\nnamespace Settings {\n  /**\n   * The instantiation options for a `Settings` object.\n   */\n  export\n  interface IOptions {\n    /**\n     * The setting values for a plugin.\n     */\n    plugin: ISettingRegistry.IPlugin;\n\n    /**\n     * The system registry instance used by the settings manager.\n     */\n    registry: SettingRegistry;\n  }\n}\n\n\n/**\n * A namespace for private module data.\n */\nexport\nnamespace Private {\n  /* tslint:disable */\n  /**\n   * The schema for settings.\n   */\n  export\n  const SCHEMA: ISettingRegistry.ISchema = {\n    \"$schema\": \"http://json-schema.org/draft-06/schema\",\n    \"title\": \"Jupyter Settings/Preferences Schema\",\n    \"description\": \"Jupyter settings/preferences schema v0.1.0\",\n    \"type\": \"object\",\n    \"additionalProperties\": true,\n    \"properties\": {\n      [ICON_CLASS_KEY]: { \"type\": \"string\", \"default\": \"jp-FileIcon\" },\n      [ICON_LABEL_KEY]: { \"type\": \"string\", \"default\": \"Plugin\" }\n    }\n  };\n  /* tslint:enable */\n\n  /**\n   * Replacement text for schema properties missing a `description` field.\n   */\n  const nondescript = '[missing schema description]';\n\n  /**\n   * Replacement text for schema properties missing a `default` field.\n   */\n  const undefaulted = '[missing schema default]';\n\n  /**\n   * Replacement text for schema properties missing a `title` field.\n   */\n  const untitled = '[missing schema title]';\n\n  /**\n   * Returns an annotated (JSON with comments) version of a schema's defaults.\n   */\n  export\n  function annotatedDefaults(schema: ISettingRegistry.ISchema, plugin: string): string {\n    const { description, properties, title } = schema;\n    const keys = Object.keys(properties).sort((a, b) => a.localeCompare(b));\n\n    return [\n      '{',\n      prefix(`${title || untitled}`),\n      prefix(plugin),\n      prefix(description || nondescript),\n      prefix(line((description || nondescript).length)),\n      '',\n      keys.map(key => docstring(schema, key)).join('\\n\\n'),\n      '}'\n    ].join('\\n');\n  }\n\n  /**\n   * Returns a documentation string for a specific schema property.\n   */\n  function docstring(schema: ISettingRegistry.ISchema, key: string): string {\n    const { description, title } = schema.properties[key];\n    const reified = reifyDefault(schema, key);\n    const defaults = reified === undefined ? prefix(`\"${key}\": ${undefaulted}`)\n      : prefix(`\"${key}\": ${JSON.stringify(reified, null, 2)}`, '  ');\n\n    return [\n      prefix(`${title || untitled}`),\n      prefix(description || nondescript),\n      defaults\n    ].join('\\n');\n  }\n\n  /**\n   * Returns a line of a specified length.\n   */\n  function line(length: number, ch = '*'): string {\n    return (new Array(length + 1)).join(ch);\n  }\n\n  /**\n   * Returns a documentation string with a comment prefix added on every line.\n   */\n  function prefix(source: string, pre = '  \\/\\/ '): string {\n    return pre + source.split('\\n').join(`\\n${pre}`);\n  }\n\n  /**\n   * Create a fully extrapolated default value for a root key in a schema.\n   */\n  export\n  function reifyDefault(schema: ISettingRegistry.ISchema, root?: string): JSONValue | undefined {\n    // If the property is at the root level, traverse its schema.\n    schema = (root ? schema.properties[root] : schema) || { };\n\n    // If the property has no default or is a primitive, return.\n    if (!('default' in schema) || schema.type !== 'object') {\n      return schema.default;\n    }\n\n    // Make a copy of the default value to populate.\n    const result = JSONExt.deepCopy(schema.default);\n\n    // Iterate through and populate each child property.\n    for (let property in schema.properties || { }) {\n      result[property] = reifyDefault(schema.properties[property]);\n    }\n\n    return result;\n  }\n}\n"]}