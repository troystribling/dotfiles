{"version":3,"file":"url.js","sourceRoot":"","sources":["../../../../coreutils/src/url.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAM3D,oCACkB;AAElB;;GAEG;AACH,IACU,MAAM,CAgJf;AAjJD,WACU,MAAM;IACd;;;;;;OAMG;IACH,eACe,GAAW;QACxB,EAAE,CAAC,CAAC,OAAO,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC;YACpC,IAAI,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACpC,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC;YACb,MAAM,CAAC,CAAC,CAAC;QACX,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAPQ,YAAK,QAOb,CAAA;IAED;;;;;;OAMG;IACH;QACc,eAAkB;aAAlB,UAAkB,EAAlB,qBAAkB,EAAlB,IAAkB;YAAlB,0BAAkB;;QAC9B,yBAAyB;QACzB,sDAAsD;QACtD,uEAAuE;QACvE,IAAI,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE5C,gDAAgD;QAChD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAEjC,6BAA6B;QAC7B,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QAEzC,kDAAkD;QAClD,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;QAE3C,iCAAiC;QACjC,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;QAEtC,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAnBQ,WAAI,OAmBZ,CAAA;IAED;;;;;;;;;;OAUG;IACH,qBACqB,GAAW;QAC9B,MAAM,CAAC,IAAI,eAAI,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;IACzD,CAAC;IAFQ,kBAAW,cAEnB,CAAA;IAED;;;;;;;;;OASG;IACH,6BAC6B,KAAiB;QAC5C,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG;YACrC,OAAA,kBAAkB,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAAtE,CAAsE,CACvE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACd,CAAC;IAJQ,0BAAmB,sBAI3B,CAAA;IAED;;OAEG;IACH,iBACiB,GAAW;QAC1B,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1B,KAAK,QAAQ,CAAC,IAAI,CAAC;YACnB,KAAK,EAAE;gBACL,MAAM,CAAC,IAAI,CAAC;YACd;gBACE,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IARQ,cAAO,UAQf,CAAA;AAoDH,CAAC,EAhJS,MAAM,GAAN,cAAM,KAAN,cAAM,QAgJf","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  JSONObject\n} from '@phosphor/coreutils';\n\nimport * as urlparse\n from 'url-parse';\n\n/**\n * The namespace for URL-related functions.\n */\nexport\nnamespace URLExt {\n  /**\n   * Parse a url into a URL object.\n   *\n   * @param urlString - The URL string to parse.\n   *\n   * @returns A URL object.\n   */\n  export\n  function parse(url: string): IUrl {\n    if (typeof document !== 'undefined') {\n      let a = document.createElement('a');\n      a.href = url;\n      return a;\n    }\n    return urlparse(url);\n  }\n\n  /**\n   * Join a sequence of url components and normalizes as in node `path.join`.\n   *\n   * @param parts - The url components.\n   *\n   * @returns the joined url.\n   */\n  export\n  function join(...parts: string[]): string {\n    // Adapted from url-join.\n    // Copyright (c) 2016 JosÃ© F. Romaniello, MIT License.\n    // https://github.com/jfromaniello/url-join/blob/v1.1.0/lib/url-join.js\n    let str = [].slice.call(parts, 0).join('/');\n\n    // make sure protocol is followed by two slashes\n    str = str.replace(/:\\//g, '://');\n\n    // remove consecutive slashes\n    str = str.replace(/([^:\\s])\\/+/g, '$1/');\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    str = str.replace(/(\\?.+)\\?/g, '$1&');\n\n    return str;\n  }\n\n  /**\n   * Encode the components of a multi-segment url.\n   *\n   * @param url - The url to encode.\n   *\n   * @returns the encoded url.\n   *\n   * #### Notes\n   * Preserves the `'/'` separators.\n   * Should not include the base url, since all parts are escaped.\n   */\n  export\n  function encodeParts(url: string): string {\n    return join(...url.split('/').map(encodeURIComponent));\n  }\n\n  /**\n   * Return a serialized object string suitable for a query.\n   *\n   * @param object - The source object.\n   *\n   * @returns an encoded url query.\n   *\n   * #### Notes\n   * From [stackoverflow](http://stackoverflow.com/a/30707423).\n   */\n  export\n  function objectToQueryString(value: JSONObject): string {\n    return '?' + Object.keys(value).map(key =>\n      encodeURIComponent(key) + '=' + encodeURIComponent(String(value[key]))\n    ).join('&');\n  }\n\n  /**\n   * Test whether the url is a local url.\n   */\n  export\n  function isLocal(url: string): boolean {\n    switch (parse(url).host) {\n    case location.host:\n    case '':\n      return true;\n    default:\n      return false;\n    }\n  }\n\n  /**\n   * The interface for a URL object\n   */\n  export interface IUrl {\n    /**\n     * The full URL string that was parsed with both the protocol and host\n     * components converted to lower-case.\n     */\n    href?: string;\n\n    /**\n     * Identifies the URL's lower-cased protocol scheme.\n     */\n    protocol?: string;\n\n    /**\n     * The full lower-cased host portion of the URL, including the port if\n     * specified.\n     */\n    host?: string;\n\n    /**\n     * The lower-cased host name portion of the host component without the\n     * port included.\n     */\n    hostname?: string;\n\n    /**\n     * The numeric port portion of the host component.\n     */\n    port?: string;\n\n    /**\n     * The entire path section of the URL.\n     */\n    pathname?: string;\n\n    /**\n     * The \"fragment\" portion of the URL including the leading ASCII hash\n     * `(#)` character\n     */\n    hash?: string;\n\n\n    /**\n     * The search element, including leading question mark (`'?'`), if any,\n     * of the URL.\n     */\n    search?: string;\n  }\n}\n"]}