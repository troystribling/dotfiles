"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var coreutils_1 = require("@phosphor/coreutils");
var messaging_1 = require("@phosphor/messaging");
var observablemap_1 = require("./observablemap");
/**
 * A concrete Observable map for JSON data.
 */
var ObservableJSON = /** @class */ (function (_super) {
    __extends(ObservableJSON, _super);
    /**
     * Construct a new observable JSON object.
     */
    function ObservableJSON(options) {
        if (options === void 0) { options = {}; }
        return _super.call(this, {
            itemCmp: coreutils_1.JSONExt.deepEqual,
            values: options.values
        }) || this;
    }
    /**
     * Serialize the model to JSON.
     */
    ObservableJSON.prototype.toJSON = function () {
        var out = Object.create(null);
        var keys = this.keys();
        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
            var key = keys_1[_i];
            var value = this.get(key);
            if (value !== undefined) {
                out[key] = coreutils_1.JSONExt.deepCopy(value);
            }
        }
        return out;
    };
    return ObservableJSON;
}(observablemap_1.ObservableMap));
exports.ObservableJSON = ObservableJSON;
/**
 * The namespace for ObservableJSON static data.
 */
(function (ObservableJSON) {
    /**
     * An observable JSON change message.
     */
    var ChangeMessage = /** @class */ (function (_super) {
        __extends(ChangeMessage, _super);
        /**
         * Create a new metadata changed message.
         */
        function ChangeMessage(args) {
            var _this = _super.call(this, 'jsonvalue-changed') || this;
            _this.args = args;
            return _this;
        }
        return ChangeMessage;
    }(messaging_1.Message));
    ObservableJSON.ChangeMessage = ChangeMessage;
})(ObservableJSON = exports.ObservableJSON || (exports.ObservableJSON = {}));
exports.ObservableJSON = ObservableJSON;
