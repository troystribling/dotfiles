{"version":3,"file":"observablejson.js","sourceRoot":"","sources":["../../../../observables/src/observablejson.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;;;AAE3D,iDAE6B;AAE7B,iDAE6B;AAE7B,iDAEyB;AA4BzB;;GAEG;AACH;IAC6B,kCAAwB;IACnD;;OAEG;IACH,wBAAY,OAAqC;QAArC,wBAAA,EAAA,YAAqC;eAC/C,kBAAM;YACJ,OAAO,EAAE,mBAAO,CAAC,SAAS;YAC1B,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,+BAAM,GAAN;QACE,IAAM,GAAG,GAAe,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QAEzB,GAAG,CAAC,CAAY,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;YAAf,IAAI,GAAG,aAAA;YACV,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE5B,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBACxB,GAAG,CAAC,GAAG,CAAC,GAAG,mBAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrC,CAAC;SACF;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IACH,qBAAC;AAAD,CAAC,AA5BD,CAC6B,6BAAa,GA2BzC;AA3BK,wCAAc;AA8BpB;;GAEG;AACH,WACU,cAAc;IAYtB;;OAEG;IACH;QAC4B,iCAAO;QACjC;;WAEG;QACH,uBAAY,IAAkC;YAA9C,YACE,kBAAM,mBAAmB,CAAC,SAE3B;YADC,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;QACnB,CAAC;QAMH,oBAAC;IAAD,CAAC,AAdD,CAC4B,mBAAO,GAalC;IAbK,4BAAa,gBAalB,CAAA;AACH,CAAC,EA9BS,cAAc,GAAd,sBAAc,KAAd,sBAAc,QA8BvB;AAhEK,wCAAc","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  JSONExt, JSONObject, JSONValue\n} from '@phosphor/coreutils';\n\nimport {\n  Message\n} from '@phosphor/messaging';\n\nimport {\n  IObservableMap, ObservableMap\n} from './observablemap';\n\n\n/**\n * An observable JSON value.\n */\nexport\ninterface IObservableJSON extends IObservableMap<JSONValue> {\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): JSONObject;\n}\n\n\n/**\n * The namespace for IObservableJSON related interfaces.\n */\nexport\nnamespace IObservableJSON {\n  /**\n   * A type alias for observable JSON changed args.\n   */\n  export\n  type IChangedArgs = IObservableMap.IChangedArgs<JSONValue>;\n}\n\n\n/**\n * A concrete Observable map for JSON data.\n */\nexport\nclass ObservableJSON extends ObservableMap<JSONValue> {\n  /**\n   * Construct a new observable JSON object.\n   */\n  constructor(options: ObservableJSON.IOptions = {}) {\n    super({\n      itemCmp: JSONExt.deepEqual,\n      values: options.values\n    });\n  }\n\n  /**\n   * Serialize the model to JSON.\n   */\n  toJSON(): JSONObject {\n    const out: JSONObject = Object.create(null);\n    const keys = this.keys();\n\n    for (let key of keys) {\n      const value = this.get(key);\n\n      if (value !== undefined) {\n        out[key] = JSONExt.deepCopy(value);\n      }\n    }\n    return out;\n  }\n}\n\n\n/**\n * The namespace for ObservableJSON static data.\n */\nexport\nnamespace ObservableJSON {\n  /**\n   * The options use to initialize an observable JSON object.\n   */\n  export\n  interface IOptions {\n    /**\n     * The optional intitial value for the object.\n     */\n    values?: JSONObject;\n  }\n\n  /**\n   * An observable JSON change message.\n   */\n  export\n  class ChangeMessage extends Message {\n    /**\n     * Create a new metadata changed message.\n     */\n    constructor(args: IObservableJSON.IChangedArgs) {\n      super('jsonvalue-changed');\n      this.args = args;\n    }\n\n    /**\n     * The arguments of the change.\n     */\n    readonly args: IObservableJSON.IChangedArgs;\n  }\n}\n"]}