{"version":3,"file":"observablelist.js","sourceRoot":"","sources":["../../../../observables/src/observablelist.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ArrayExt, ArrayIterator, IIterator, IterableOrArrayLike, each, toArray\n} from '@phosphor/algorithm';\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\n\n/**\n * A list which can be observed for changes.\n */\nexport\ninterface IObservableList<T> extends IDisposable {\n  /**\n   * A signal emitted when the list has changed.\n   */\n  readonly changed: ISignal<this, IObservableList.IChangedArgs<T>>;\n\n  /**\n   * The type of this object.\n   */\n  readonly type: 'List';\n\n  /**\n   * The length of the list.\n   *\n   * #### Notes\n   * This is a read-only property.\n   */\n  length: number;\n\n  /**\n   * Create an iterator over the values in the list.\n   *\n   * @returns A new iterator starting at the front of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * No changes.\n   */\n  iter(): IIterator<T>;\n\n  /**\n   * Remove all values from the list.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * All current iterators are invalidated.\n   */\n  clear(): void;\n\n  /**\n   * Get the value at the specified index.\n   *\n   * @param index - The positive integer index of interest.\n   *\n   * @returns The value at the specified index.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral or out of range.\n   */\n  get(index: number): T | undefined;\n\n  /**\n   * Insert a value into the list at a specific index.\n   *\n   * @param index - The index at which to insert the value.\n   *\n   * @param value - The value to set at the specified index.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * No changes.\n   *\n   * #### Notes\n   * The `index` will be clamped to the bounds of the list.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   */\n  insert(index: number, value: T): void;\n\n  /**\n   * Insert a set of items into the list at the specified index.\n   *\n   * @param index - The index at which to insert the values.\n   *\n   * @param values - The values to insert at the specified index.\n   *\n   * #### Complexity.\n   * Linear.\n   *\n   * #### Iterator Validity\n   * No changes.\n   *\n   * #### Notes\n   * The `index` will be clamped to the bounds of the list.\n   *\n   * #### Undefined Behavior.\n   * An `index` which is non-integral.\n   */\n  insertAll(index: number, values: IterableOrArrayLike<T>): void;\n\n  /**\n   * Move a value from one index to another.\n   *\n   * @parm fromIndex - The index of the element to move.\n   *\n   * @param toIndex - The index to move the element to.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n   * and beyond are invalidated.\n   *\n   * #### Undefined Behavior\n   * A `fromIndex` or a `toIndex` which is non-integral.\n   */\n  move(fromIndex: number, toIndex: number): void;\n\n  /**\n   * Add a value to the back of the list.\n   *\n   * @param value - The value to add to the back of the list.\n   *\n   * @returns The new length of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * No changes.\n   */\n  push(value: T): number;\n\n  /**\n   * Push a set of values to the back of the list.\n   *\n   * @param values - An iterable or array-like set of values to add.\n   *\n   * @returns The new length of the list.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * No changes.\n   */\n  pushAll(values: IterableOrArrayLike<T>): number;\n\n  /**\n   * Remove and return the value at a specific index.\n   *\n   * @param index - The index of the value of interest.\n   *\n   * @returns The value at the specified index, or `undefined` if the\n   *   index is out of range.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * Iterators pointing at the removed value and beyond are invalidated.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   */\n  remove(index: number): T | undefined;\n\n  /**\n   * Remove a range of items from the list.\n   *\n   * @param startIndex - The start index of the range to remove (inclusive).\n   *\n   * @param endIndex - The end index of the range to remove (exclusive).\n   *\n   * @returns The new length of the list.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * Iterators pointing to the first removed value and beyond are invalid.\n   *\n   * #### Undefined Behavior\n   * A `startIndex` or `endIndex` which is non-integral.\n   */\n  removeRange(startIndex: number, endIndex: number): number;\n\n  /**\n   * Remove the first occurrence of a value from the list.\n   *\n   * @param value - The value of interest.\n   *\n   * @returns The index of the removed value, or `-1` if the value\n   *   is not contained in the list.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * Iterators pointing at the removed value and beyond are invalidated.\n   */\n  removeValue(value: T): number;\n\n  /**\n   * Set the value at the specified index.\n   *\n   * @param index - The positive integer index of interest.\n   *\n   * @param value - The value to set at the specified index.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * No changes.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral or out of range.\n   */\n  set(index: number, value: T): void;\n}\n\n\n/**\n * The namespace for IObservableList related interfaces.\n */\nexport\nnamespace IObservableList {\n  /**\n   * The change types which occur on an observable list.\n   */\n  export\n  type ChangeType =\n    /**\n     * Item(s) were added to the list.\n     */\n    'add' |\n\n    /**\n     * An item was moved within the list.\n     */\n    'move' |\n\n    /**\n     * Item(s) were removed from the list.\n     */\n    'remove' |\n\n    /**\n     * An item was set in the list.\n     */\n    'set';\n\n  /**\n   * The changed args object which is emitted by an observable list.\n   */\n  export\n  interface IChangedArgs<T> {\n    /**\n     * The type of change undergone by the vector.\n     */\n    type: ChangeType;\n\n    /**\n     * The new index associated with the change.\n     */\n    newIndex: number;\n\n    /**\n     * The new values associated with the change.\n     *\n     * #### Notes\n     * The values will be contiguous starting at the `newIndex`.\n     */\n    newValues: T[];\n\n    /**\n     * The old index associated with the change.\n     */\n    oldIndex: number;\n\n    /**\n     * The old values associated with the change.\n     *\n     * #### Notes\n     * The values will be contiguous starting at the `oldIndex`.\n     */\n    oldValues: T[];\n  }\n}\n\n\n/**\n * A concrete implementation of [[IObservableList]].\n */\nexport\nclass ObservableList<T> implements IObservableList<T> {\n  /**\n   * Construct a new observable map.\n   */\n  constructor(options: ObservableList.IOptions<T> = {}) {\n    if (options.values !== void 0) {\n      each(options.values, value => { this._array.push(value); });\n    }\n    this._itemCmp = options.itemCmp || Private.itemCmp;\n  }\n\n  /**\n   * The type of this object.\n   */\n  get type(): 'List' {\n    return 'List';\n  }\n\n  /**\n   * A signal emitted when the list has changed.\n   */\n  get changed(): ISignal<this, IObservableList.IChangedArgs<T>> {\n    return this._changed;\n  }\n\n  /**\n   * The length of the list.\n   */\n  get length(): number {\n    return this._array.length;\n  }\n\n  /**\n   * Test whether the list has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the list.\n   */\n  dispose(): void {\n    if (this._isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n    this.clear();\n  }\n\n\n  /**\n   * Create an iterator over the values in the list.\n   *\n   * @returns A new iterator starting at the front of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * No changes.\n   */\n  iter(): IIterator<T> {\n    return new ArrayIterator(this._array);\n  }\n\n  /**\n   * Get the value at the specified index.\n   *\n   * @param index - The positive integer index of interest.\n   *\n   * @returns The value at the specified index.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral or out of range.\n   */\n  get(index: number): T | undefined {\n    return this._array[index];\n  }\n\n  /**\n   * Set the value at the specified index.\n   *\n   * @param index - The positive integer index of interest.\n   *\n   * @param value - The value to set at the specified index.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * No changes.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral or out of range.\n   */\n  set(index: number, value: T): void {\n    let oldValue = this._array[index];\n    if (value === undefined) {\n      throw new Error('Cannot set an undefined item');\n    }\n    // Bail if the value does not change.\n    let itemCmp = this._itemCmp;\n    if (itemCmp(oldValue, value)) {\n      return;\n    }\n    this._array[index] = value;\n    this._changed.emit({\n      type: 'set',\n      oldIndex: index,\n      newIndex: index,\n      oldValues: [oldValue],\n      newValues: [value]\n    });\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * @returns The new length of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * No changes.\n   */\n  push(value: T): number {\n    let num = this._array.push(value);\n    this._changed.emit({\n      type: 'add',\n      oldIndex: -1,\n      newIndex: this.length - 1,\n      oldValues: [],\n      newValues: [value]\n    });\n    return num;\n  }\n\n  /**\n   * Insert a value into the list at a specific index.\n   *\n   * @param index - The index at which to insert the value.\n   *\n   * @param value - The value to set at the specified index.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * No changes.\n   *\n   * #### Notes\n   * The `index` will be clamped to the bounds of the list.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   */\n  insert(index: number, value: T): void {\n    ArrayExt.insert(this._array, index, value);\n    this._changed.emit({\n      type: 'add',\n      oldIndex: -1,\n      newIndex: index,\n      oldValues: [],\n      newValues: [value]\n    });\n  }\n\n  /**\n   * Remove the first occurrence of a value from the list.\n   *\n   * @param value - The value of interest.\n   *\n   * @returns The index of the removed value, or `-1` if the value\n   *   is not contained in the list.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * Iterators pointing at the removed value and beyond are invalidated.\n   */\n  removeValue(value: T): number {\n    let itemCmp = this._itemCmp;\n    let index = ArrayExt.findFirstIndex(this._array, item => {\n      return itemCmp(item, value);\n    });\n    this.remove(index);\n    return index;\n  }\n\n  /**\n   * Remove and return the value at a specific index.\n   *\n   * @param index - The index of the value of interest.\n   *\n   * @returns The value at the specified index, or `undefined` if the\n   *   index is out of range.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * Iterators pointing at the removed value and beyond are invalidated.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   */\n  remove(index: number): T | undefined {\n    let value = ArrayExt.removeAt(this._array, index);\n    if (value === undefined) {\n      return;\n    }\n    this._changed.emit({\n      type: 'remove',\n      oldIndex: index,\n      newIndex: -1,\n      newValues: [],\n      oldValues: [value]\n    });\n    return value;\n  }\n\n  /**\n   * Remove all values from the list.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * All current iterators are invalidated.\n   */\n  clear(): void {\n    let copy = this._array.slice();\n    this._array.length = 0;\n    this._changed.emit({\n      type: 'remove',\n      oldIndex: 0,\n      newIndex: 0,\n      newValues: [],\n      oldValues: copy\n    });\n  }\n\n  /**\n   * Move a value from one index to another.\n   *\n   * @parm fromIndex - The index of the element to move.\n   *\n   * @param toIndex - The index to move the element to.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Iterator Validity\n   * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n   * and beyond are invalidated.\n   *\n   * #### Undefined Behavior\n   * A `fromIndex` or a `toIndex` which is non-integral.\n   */\n  move(fromIndex: number, toIndex: number): void {\n    if (this.length <= 1 || fromIndex === toIndex) {\n      return;\n    }\n    let values = [this._array[fromIndex]];\n    ArrayExt.move(this._array, fromIndex, toIndex);\n    this._changed.emit({\n      type: 'move',\n      oldIndex: fromIndex,\n      newIndex: toIndex,\n      oldValues: values,\n      newValues: values\n    });\n  }\n\n  /**\n   * Push a set of values to the back of the list.\n   *\n   * @param values - An iterable or array-like set of values to add.\n   *\n   * @returns The new length of the list.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * No changes.\n   */\n  pushAll(values: IterableOrArrayLike<T>): number {\n    let newIndex = this.length;\n    each(values, value => {\n      this._array.push(value);\n    });\n    this._changed.emit({\n      type: 'add',\n      oldIndex: -1,\n      newIndex,\n      oldValues: [],\n      newValues: toArray(values)\n    });\n    return this.length;\n  }\n\n  /**\n   * Insert a set of items into the list at the specified index.\n   *\n   * @param index - The index at which to insert the values.\n   *\n   * @param values - The values to insert at the specified index.\n   *\n   * #### Complexity.\n   * Linear.\n   *\n   * #### Iterator Validity\n   * No changes.\n   *\n   * #### Notes\n   * The `index` will be clamped to the bounds of the list.\n   *\n   * #### Undefined Behavior.\n   * An `index` which is non-integral.\n   */\n  insertAll(index: number, values: IterableOrArrayLike<T>): void {\n    let newIndex = index;\n    each(values, value => {\n      ArrayExt.insert(this._array, index++, value);\n    });\n    this._changed.emit({\n      type: 'add',\n      oldIndex: -1,\n      newIndex,\n      oldValues: [],\n      newValues: toArray(values)\n    });\n  }\n\n  /**\n   * Remove a range of items from the list.\n   *\n   * @param startIndex - The start index of the range to remove (inclusive).\n   *\n   * @param endIndex - The end index of the range to remove (exclusive).\n   *\n   * @returns The new length of the list.\n   *\n   * #### Complexity\n   * Linear.\n   *\n   * #### Iterator Validity\n   * Iterators pointing to the first removed value and beyond are invalid.\n   *\n   * #### Undefined Behavior\n   * A `startIndex` or `endIndex` which is non-integral.\n   */\n  removeRange(startIndex: number, endIndex: number): number {\n    let oldValues = this._array.slice(startIndex, endIndex);\n    for (let i = startIndex; i < endIndex; i++) {\n      ArrayExt.removeAt(this._array, startIndex);\n    }\n    this._changed.emit({\n      type: 'remove',\n      oldIndex: startIndex,\n      newIndex: -1,\n      oldValues,\n      newValues: []\n    });\n    return this.length;\n  }\n\n  private _array: Array<T> = [];\n  private _isDisposed = false;\n  private _itemCmp: (first: T, second: T) => boolean;\n  private _changed = new Signal<this, IObservableList.IChangedArgs<T>>(this);\n}\n\n\n/**\n * The namespace for `ObservableList` class statics.\n */\nexport\nnamespace ObservableList {\n  /**\n   * The options used to initialize an observable map.\n   */\n  export\n  interface IOptions<T> {\n    /**\n     * An optional intial set of values.\n     */\n    values?: IterableOrArrayLike<T>;\n\n    /**\n     * The item comparison function for change detection on `set`.\n     *\n     * If not given, strict `===` equality will be used.\n     */\n    itemCmp?: (first: T, second: T) => boolean;\n  }\n}\n\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  /**\n   * The default strict equality item cmp.\n   */\n  export\n  function itemCmp(first: any, second: any): boolean {\n    return first === second;\n  }\n}\n"]}