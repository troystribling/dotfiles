"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
var signaling_1 = require("@phosphor/signaling");
/**
 * A concrete implementation of [[IObservableString]]
 */
var ObservableString = /** @class */ (function () {
    /**
     * Construct a new observable string.
     */
    function ObservableString(initialText) {
        if (initialText === void 0) { initialText = ''; }
        this._text = '';
        this._isDisposed = false;
        this._changed = new signaling_1.Signal(this);
        this._text = initialText;
    }
    Object.defineProperty(ObservableString.prototype, "type", {
        /**
         * The type of the Observable.
         */
        get: function () {
            return 'String';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ObservableString.prototype, "changed", {
        /**
         * A signal emitted when the string has changed.
         */
        get: function () {
            return this._changed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ObservableString.prototype, "text", {
        /**
         * Get the value of the string.
         */
        get: function () {
            return this._text;
        },
        /**
         * Set the value of the string.
         */
        set: function (value) {
            if (value.length === this._text.length && value === this._text) {
                return;
            }
            this._text = value;
            this._changed.emit({
                type: 'set',
                start: 0,
                end: value.length,
                value: value
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Insert a substring.
     *
     * @param index - The starting index.
     *
     * @param text - The substring to insert.
     */
    ObservableString.prototype.insert = function (index, text) {
        this._text = this._text.slice(0, index) +
            text +
            this._text.slice(index);
        this._changed.emit({
            type: 'insert',
            start: index,
            end: index + text.length,
            value: text
        });
    };
    /**
     * Remove a substring.
     *
     * @param start - The starting index.
     *
     * @param end - The ending index.
     */
    ObservableString.prototype.remove = function (start, end) {
        var oldValue = this._text.slice(start, end);
        this._text = this._text.slice(0, start) +
            this._text.slice(end);
        this._changed.emit({
            type: 'remove',
            start: start,
            end: end,
            value: oldValue
        });
    };
    /**
     * Set the ObservableString to an empty string.
     */
    ObservableString.prototype.clear = function () {
        this.text = '';
    };
    Object.defineProperty(ObservableString.prototype, "isDisposed", {
        /**
         * Test whether the string has been disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources held by the string.
     */
    ObservableString.prototype.dispose = function () {
        if (this._isDisposed) {
            return;
        }
        this._isDisposed = true;
        signaling_1.Signal.clearData(this);
        this.clear();
    };
    return ObservableString;
}());
exports.ObservableString = ObservableString;
