{"version":3,"file":"undoablelist.js","sourceRoot":"","sources":["../../../../observables/src/undoablelist.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  JSONValue\n} from '@phosphor/coreutils';\n\nimport {\n  each\n} from '@phosphor/algorithm';\n\nimport {\n  IObservableList, ObservableList\n} from './observablelist';\n\n\n/**\n * An object which knows how to serialize and\n * deserialize the type T.\n */\nexport\ninterface ISerializer<T> {\n  /**\n   * Convert the object to JSON.\n   */\n  toJSON(value: T): JSONValue;\n\n  /**\n   * Deserialize the object from JSON.\n   */\n  fromJSON(value: JSONValue): T;\n}\n\n\n/**\n * An observable list that supports undo/redo.\n */\nexport\ninterface IObservableUndoableList<T> extends IObservableList<T> {\n  /**\n   * Whether the object can redo changes.\n   */\n  readonly canRedo: boolean;\n\n  /**\n   * Whether the object can undo changes.\n   */\n  readonly canUndo: boolean;\n\n  /**\n   * Begin a compound operation.\n   *\n   * @param isUndoAble - Whether the operation is undoable.\n   *   The default is `false`.\n   */\n  beginCompoundOperation(isUndoAble?: boolean): void;\n\n  /**\n   * End a compound operation.\n   */\n  endCompoundOperation(): void;\n\n  /**\n   * Undo an operation.\n   */\n  undo(): void;\n\n  /**\n   * Redo an operation.\n   */\n  redo(): void;\n\n  /**\n   * Clear the change stack.\n   */\n  clearUndo(): void;\n}\n\n\n/**\n * A concrete implementation of an observable undoable list.\n */\nexport\nclass ObservableUndoableList<T> extends ObservableList<T> implements IObservableUndoableList<T> {\n  /**\n   * Construct a new undoable observable list.\n   */\n  constructor(serializer: ISerializer<T>) {\n    super();\n    this._serializer = serializer;\n    this.changed.connect(this._onListChanged, this);\n  }\n\n  /**\n   * Whether the object can redo changes.\n   */\n  get canRedo(): boolean {\n    return this._index < this._stack.length - 1;\n  }\n\n  /**\n   * Whether the object can undo changes.\n   */\n  get canUndo(): boolean {\n    return this._index >= 0;\n  }\n\n  /**\n   * Begin a compound operation.\n   *\n   * @param isUndoAble - Whether the operation is undoable.\n   *   The default is `true`.\n   */\n  beginCompoundOperation(isUndoAble?: boolean): void {\n    this._inCompound = true;\n    this._isUndoable = (isUndoAble !== false);\n    this._madeCompoundChange = false;\n  }\n\n  /**\n   * End a compound operation.\n   */\n  endCompoundOperation(): void {\n    this._inCompound = false;\n    this._isUndoable = true;\n    if (this._madeCompoundChange) {\n      this._index++;\n    }\n  }\n\n  /**\n   * Undo an operation.\n   */\n  undo(): void {\n    if (!this.canUndo) {\n      return;\n    }\n    let changes = this._stack[this._index];\n    this._isUndoable = false;\n    for (let change of changes.reverse()) {\n      this._undoChange(change);\n    }\n    this._isUndoable = true;\n    this._index--;\n  }\n\n  /**\n   * Redo an operation.\n   */\n  redo(): void {\n    if (!this.canRedo) {\n      return;\n    }\n    this._index++;\n    let changes = this._stack[this._index];\n    this._isUndoable = false;\n    for (let change of changes) {\n      this._redoChange(change);\n    }\n    this._isUndoable = true;\n  }\n\n  /**\n   * Clear the change stack.\n   */\n  clearUndo(): void {\n    this._index = -1;\n    this._stack = [];\n  }\n\n  /**\n   * Handle a change in the list.\n   */\n  private _onListChanged(list: IObservableList<T>, change: IObservableList.IChangedArgs<T>): void {\n    if (this.isDisposed || !this._isUndoable) {\n      return;\n    }\n    // Clear everything after this position if necessary.\n    if (!this._inCompound || !this._madeCompoundChange) {\n      this._stack = this._stack.slice(0, this._index + 1);\n    }\n    // Copy the change.\n    let evt = this._copyChange(change);\n    // Put the change in the stack.\n    if (this._stack[this._index + 1]) {\n      this._stack[this._index + 1].push(evt);\n    } else {\n      this._stack.push([evt]);\n    }\n    // If not in a compound operation, increase index.\n    if (!this._inCompound) {\n      this._index++;\n    } else {\n      this._madeCompoundChange = true;\n    }\n  }\n\n  /**\n   * Undo a change event.\n   */\n  private _undoChange(change: IObservableList.IChangedArgs<JSONValue>): void {\n    let index = 0;\n    let serializer = this._serializer;\n    switch (change.type) {\n    case 'add':\n      each(change.newValues, () => {\n        this.remove(change.newIndex);\n      });\n      break;\n    case 'set':\n      index = change.oldIndex;\n      each(change.oldValues, value => {\n        this.set(index++, serializer.fromJSON(value));\n      });\n      break;\n    case 'remove':\n      index = change.oldIndex;\n      each(change.oldValues, value => {\n        this.insert(index++, serializer.fromJSON(value));\n      });\n      break;\n    case 'move':\n      this.move(change.newIndex, change.oldIndex);\n      break;\n    default:\n      return;\n    }\n  }\n\n  /**\n   * Redo a change event.\n   */\n  private _redoChange(change: IObservableList.IChangedArgs<JSONValue>): void {\n    let index = 0;\n    let serializer = this._serializer;\n    switch (change.type) {\n    case 'add':\n      index = change.newIndex;\n      each(change.newValues, value => {\n        this.insert(index++, serializer.fromJSON(value));\n      });\n      break;\n    case 'set':\n      index = change.newIndex;\n      each(change.newValues, value => {\n        this.set(change.newIndex++, serializer.fromJSON(value));\n      });\n      break;\n    case 'remove':\n      each(change.oldValues, () => {\n        this.remove(change.oldIndex);\n      });\n      break;\n    case 'move':\n      this.move(change.oldIndex, change.newIndex);\n      break;\n    default:\n      return;\n    }\n  }\n\n  /**\n   * Copy a change as JSON.\n   */\n  private _copyChange(change: IObservableList.IChangedArgs<T>): IObservableList.IChangedArgs<JSONValue> {\n    let oldValues: JSONValue[] = [];\n    each(change.oldValues, value => {\n      oldValues.push(this._serializer.toJSON(value));\n    });\n    let newValues: JSONValue[] = [];\n    each(change.newValues, value => {\n      newValues.push(this._serializer.toJSON(value));\n    });\n    return {\n      type: change.type,\n      oldIndex: change.oldIndex,\n      newIndex: change.newIndex,\n      oldValues,\n      newValues\n    };\n  }\n\n  private _inCompound = false;\n  private _isUndoable = true;\n  private _madeCompoundChange = false;\n  private _index = -1;\n  private _stack: IObservableList.IChangedArgs<JSONValue>[][] = [];\n  private _serializer: ISerializer<T>;\n}\n\n/**\n * Namespace for ObservableUndoableList utilities.\n */\nexport\nnamespace ObservableUndoableList {\n  /**\n   * A default, identity serializer.\n   */\n  export\n  class IdentitySerializer<T extends JSONValue> implements ISerializer<T> {\n    /**\n     * Identity serialize.\n     */\n    toJSON(value: T): JSONValue {\n      return value;\n    }\n\n    /**\n     * Identity deserialize.\n     */\n    fromJSON(value: JSONValue): T {\n      return value as T;\n    }\n  }\n}\n"]}