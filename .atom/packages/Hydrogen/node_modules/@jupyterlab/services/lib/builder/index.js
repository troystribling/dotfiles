"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
var coreutils_1 = require("@jupyterlab/coreutils");
var serverconnection_1 = require("../serverconnection");
/**
 * The url for the lab build service.
 */
var BUILD_SETTINGS_URL = 'lab/api/build';
/**
 * The static namespace for `BuildManager`.
 */
var BuildManager = /** @class */ (function () {
    /**
     * Create a new setting manager.
     */
    function BuildManager(options) {
        if (options === void 0) { options = {}; }
        this.serverSettings = options.serverSettings ||
            serverconnection_1.ServerConnection.makeSettings();
    }
    Object.defineProperty(BuildManager.prototype, "isAvailable", {
        /**
         * Test whether the build service is available.
         */
        get: function () {
            return coreutils_1.PageConfig.getOption('buildAvailable').toLowerCase() === 'true';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BuildManager.prototype, "shouldCheck", {
        /**
         * Test whether to check build status automatically.
         */
        get: function () {
            return coreutils_1.PageConfig.getOption('buildCheck').toLowerCase() === 'true';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get whether the application should be built.
     */
    BuildManager.prototype.getStatus = function () {
        var base = this.serverSettings.baseUrl;
        var url = coreutils_1.URLExt.join(base, BUILD_SETTINGS_URL);
        var request = { method: 'GET', url: url };
        var serverSettings = this.serverSettings;
        var promise = serverconnection_1.ServerConnection.makeRequest(request, serverSettings);
        return promise.then(function (response) {
            var status = response.xhr.status;
            if (status !== 200) {
                throw serverconnection_1.ServerConnection.makeError(response);
            }
            var data = response.data;
            if (typeof data.status !== 'string') {
                throw serverconnection_1.ServerConnection.makeError(response, 'Invalid data');
            }
            if (typeof data.message !== 'string') {
                throw serverconnection_1.ServerConnection.makeError(response, 'Invalid data');
            }
            return data;
        }).catch(function (reason) { throw serverconnection_1.ServerConnection.makeError(reason); });
    };
    /**
     * Build the application.
     */
    BuildManager.prototype.build = function () {
        var base = this.serverSettings.baseUrl;
        var url = coreutils_1.URLExt.join(base, BUILD_SETTINGS_URL);
        var request = { method: 'POST', url: url, contentType: 'application/json' };
        var serverSettings = this.serverSettings;
        var promise = serverconnection_1.ServerConnection.makeRequest(request, serverSettings);
        return promise.then(function (response) {
            var status = response.xhr.status;
            if (status !== 200) {
                throw serverconnection_1.ServerConnection.makeError(response);
            }
        }).catch(function (reason) {
            var message = 'Build failed, please run `jupyter lab build` on the server for full output';
            if (reason.xhr.status === 400) {
                message = 'Build aborted';
            }
            throw serverconnection_1.ServerConnection.makeError(reason, message);
        });
    };
    /**
     * Cancel an active build.
     */
    BuildManager.prototype.cancel = function () {
        var base = this.serverSettings.baseUrl;
        var url = coreutils_1.URLExt.join(base, BUILD_SETTINGS_URL);
        var request = { method: 'DELETE', url: url };
        var serverSettings = this.serverSettings;
        var promise = serverconnection_1.ServerConnection.makeRequest(request, serverSettings);
        return promise.then(function (response) {
            var status = response.xhr.status;
            if (status !== 204) {
                throw serverconnection_1.ServerConnection.makeError(response);
            }
        }).catch(function (reason) { throw serverconnection_1.ServerConnection.makeError(reason); });
    };
    return BuildManager;
}());
exports.BuildManager = BuildManager;
