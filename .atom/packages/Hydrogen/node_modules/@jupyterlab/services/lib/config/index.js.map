{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../services/src/config/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  URLExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  JSONObject, JSONValue\n} from '@phosphor/coreutils';\n\nimport {\n  ServerConnection\n} from '..';\n\n\n/**\n * The url for the config service.\n */\nlet SERVICE_CONFIG_URL = 'api/config';\n\n\n/**\n * A Configurable data section.\n */\nexport\ninterface IConfigSection {\n  /**\n   * The data for this section.\n   */\n  readonly data: JSONObject;\n\n  /**\n   * Modify the stored config values.\n   *\n   * #### Notes\n   * Updates the local data immediately, sends the change to the server,\n   * and updates the local data with the response, and fullfils the promise\n   * with that data.\n   */\n  update(newdata: JSONObject): Promise<JSONObject>;\n\n  /**\n   * The server settings for the section.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n}\n\n\n/**\n * The namespace for ConfigSection statics.\n */\nexport\nnamespace ConfigSection {\n  /**\n   * Create a config section.\n   *\n   * @returns A Promise that is fulfilled with the config section is loaded.\n   */\n  export\n  function create(options: ConfigSection.IOptions): Promise<IConfigSection> {\n    let section = new DefaultConfigSection(options);\n    return section.load().then(() => {\n      return section;\n    });\n  }\n\n  /**\n   * The options used to create a config section.\n   */\n  export\n  interface IOptions {\n    /**\n     * The section name.\n     */\n    name: string;\n\n    /**\n     * The optional server settings.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n\n\n/**\n * Implementation of the Configurable data section.\n */\nclass DefaultConfigSection implements IConfigSection {\n  /**\n   * Construct a new config section.\n   */\n  constructor(options: ConfigSection.IOptions) {\n    let settings = this.serverSettings = (\n      options.serverSettings || ServerConnection.makeSettings()\n    );\n    this._url = URLExt.join(settings.baseUrl, SERVICE_CONFIG_URL,\n                            encodeURIComponent(options.name));\n  }\n\n  /**\n   * The server settings for the section.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Get the data for this section.\n   */\n  get data(): JSONObject {\n    return this._data;\n  }\n\n  /**\n   * Load the initial data for this section.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   */\n  load(): Promise<void> {\n    let request = {\n      url: this._url,\n      method: 'GET'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 200) {\n         throw ServerConnection.makeError(response);\n      }\n      this._data = response.data as JSONObject;\n    });\n  }\n\n  /**\n   * Modify the stored config values.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   *\n   * Updates the local data immediately, sends the change to the server,\n   * and updates the local data with the response, and fulfils the promise\n   * with that data.\n   */\n  update(newdata: JSONObject): Promise<JSONObject> {\n    this._data = {...this._data, ...newdata};\n    let request = {\n      url: this._url,\n      method: 'PATCH',\n      data: JSON.stringify(newdata),\n      contentType: 'application/json'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 200) {\n       throw ServerConnection.makeError(response);\n      }\n      this._data = response.data as JSONObject;\n      return this._data;\n    });\n  }\n\n  private _url = 'unknown';\n  private _data: JSONObject;\n}\n\n\n/**\n * Configurable object with defaults.\n */\nexport\nclass ConfigWithDefaults {\n  /**\n   * Create a new config with defaults.\n   */\n  constructor(options: ConfigWithDefaults.IOptions) {\n    this._section = options.section;\n    this._defaults = options.defaults || {};\n    this._className = options.className || '';\n  }\n\n  /**\n   * Get data from the config section or fall back to defaults.\n   */\n  get(key: string): JSONValue {\n    let data = this._classData();\n    return key in data ? data[key] : this._defaults[key];\n  }\n\n  /**\n   * Set a config value.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/config).\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   *\n   * Sends the update to the server, and changes our local copy of the data\n   * immediately.\n   */\n  set(key: string, value: JSONValue): Promise<JSONValue> {\n     let d: JSONObject = {};\n     d[key] = value;\n     if (this._className) {\n      let d2: JSONObject = {};\n      d2[this._className] = d;\n      return this._section.update(d2);\n    } else {\n      return this._section.update(d);\n    }\n  }\n\n  /**\n   * Get data from the Section with our classname, if available.\n   *\n   * #### Notes\n   * If we have no classname, get all of the data in the Section\n   */\n  private _classData(): JSONObject {\n    let data = this._section.data;\n    if (this._className && this._className in data) {\n      return data[this._className] as JSONObject;\n    }\n    return data;\n  }\n\n  private _section: IConfigSection;\n  private _defaults: JSONObject;\n  private _className = '';\n}\n\n\n/**\n * A namespace for ConfigWithDefaults statics.\n */\nexport\nnamespace ConfigWithDefaults {\n  /**\n   * The options used to initialize a ConfigWithDefaults object.\n   */\n  export\n  interface IOptions {\n    /**\n     * The configuration section.\n     */\n    section: IConfigSection;\n\n    /**\n     * The default values.\n     */\n    defaults?: JSONObject;\n\n    /**\n     * The optional classname namespace.\n     */\n    className?: string;\n  }\n}\n"]}