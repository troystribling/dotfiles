{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../services/src/contents/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  URLExt, PathExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  ModelDB\n} from '@jupyterlab/observables';\n\nimport {\n  JSONObject\n} from '@phosphor/coreutils';\n\nimport {\n  each\n} from '@phosphor/algorithm';\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  ServerConnection\n} from '..';\n\nimport * as validate\n  from './validate';\n\n\n/**\n * The url for the default drive service.\n */\nconst SERVICE_DRIVE_URL = 'api/contents';\n\n/**\n * The url for the file access.\n */\nconst FILES_URL = 'files';\n\n\n/**\n * A namespace for contents interfaces.\n */\nexport\nnamespace Contents {\n  /**\n   * A contents model.\n   */\n  export\n  interface IModel {\n    /**\n     * Name of the contents file.\n     *\n     * #### Notes\n     *  Equivalent to the last part of the `path` field.\n     */\n    readonly name: string;\n\n    /**\n     * The full file path.\n     *\n     * #### Notes\n     * It will *not* start with `/`, and it will be `/`-delimited.\n     */\n    readonly path: string;\n\n    /**\n     * The type of file.\n     */\n    readonly type: ContentType;\n\n    /**\n     * Whether the requester has permission to edit the file.\n     */\n    readonly writable: boolean;\n\n    /**\n     * File creation timestamp.\n     */\n    readonly created: string;\n\n    /**\n     * Last modified timestamp.\n     */\n    readonly last_modified: string;\n\n    /**\n     * Specify the mime-type of file contents.\n     *\n     * #### Notes\n     * Only non-`null` when `content` is present and `type` is `\"file\"`.\n     */\n    readonly mimetype: string;\n\n    /**\n     * The optional file content.\n     */\n    readonly content: any;\n\n    /**\n     * The format of the file `content`.\n     *\n     * #### Notes\n     * Only relevant for type: 'file'\n     */\n    readonly format: FileFormat;\n  }\n\n  /**\n   * Validates an IModel, thowing an error if it does not pass.\n   */\n  export\n  function validateContentsModel(contents: IModel): void {\n    validate.validateContentsModel(contents);\n  }\n\n  /**\n   * A contents file type.\n   */\n  export\n  type ContentType = 'notebook' | 'file' | 'directory';\n\n\n  /**\n   * A contents file format.\n   */\n  export\n  type FileFormat = 'json' | 'text' | 'base64';\n\n  /**\n   * The options used to fetch a file.\n   */\n  export\n  interface IFetchOptions {\n    /**\n     * The override file type for the request.\n     */\n    type?: ContentType;\n\n    /**\n     * The override file format for the request.\n     */\n    format?: FileFormat;\n\n    /**\n     * Whether to include the file content.\n     *\n     * The default is `true`.\n     */\n    content?: boolean;\n  }\n\n  /**\n   * The options used to create a file.\n   */\n  export\n  interface ICreateOptions {\n    /**\n     * The directory in which to create the file.\n     */\n     path?: string;\n\n     /**\n      * The optional file extension for the new file (e.g. `\".txt\"`).\n      *\n      * #### Notes\n      * This ignored if `type` is `'notebook'`.\n      */\n    ext?: string;\n\n    /**\n     * The file type.\n     */\n    type?: ContentType;\n  }\n\n  /**\n   * Checkpoint model.\n   */\n  export\n  interface ICheckpointModel {\n    /**\n     * The unique identifier for the checkpoint.\n     */\n    readonly id: string;\n\n    /**\n     * Last modified timestamp.\n     */\n    readonly last_modified: string;\n  }\n\n  /**\n   * Validates an ICheckpointModel, thowing an error if it does not pass.\n   */\n  export\n  function validateCheckpointModel(checkpoint: ICheckpointModel): void {\n    validate.validateCheckpointModel(checkpoint);\n  }\n\n  /**\n   * The change args for a file change.\n   */\n  export\n  interface IChangedArgs {\n    /**\n     * The type of change.\n     */\n    type: 'new' | 'delete' | 'rename' | 'save';\n\n    /**\n     * The new contents.\n     */\n    oldValue: Partial<IModel> | null;\n\n    /**\n     * The old contents.\n     */\n    newValue: Partial<IModel> | null;\n  }\n\n  /**\n   * The interface for a contents manager.\n   */\n  export\n  interface IManager extends IDisposable {\n    /**\n     * A signal emitted when a file operation takes place.\n     */\n    fileChanged: ISignal<IManager, IChangedArgs>;\n\n    /**\n     * Add an `IDrive` to the manager.\n     */\n    addDrive(drive: IDrive): void;\n\n    /**\n     * Given a path, get a ModelDB.IFactory from the\n     * relevant backend. Returns `null` if the backend\n     * does not provide one.\n     */\n    getModelDBFactory(path: string): ModelDB.IFactory | null;\n\n    /**\n     * Get a file or directory.\n     *\n     * @param path: The path to the file.\n     *\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    get(path: string, options?: IFetchOptions): Promise<IModel>;\n\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param A promise which resolves with the absolute POSIX\n     *   file path on the server.\n     */\n    getDownloadUrl(path: string): Promise<string>;\n\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the\n     *    file is created.\n     */\n    newUntitled(options?: ICreateOptions): Promise<IModel>;\n\n    /**\n     * Delete a file.\n     *\n     * @param path - The path to the file.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     */\n    delete(path: string): Promise<void>;\n\n    /**\n     * Rename a file or directory.\n     *\n     * @param path - The original file path.\n     *\n     * @param newPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file content model when the\n     *   file is renamed.\n     */\n    rename(path: string, newPath: string): Promise<IModel>;\n\n    /**\n     * Save a file.\n     *\n     * @param path - The desired file path.\n     *\n     * @param options - Optional overrrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the\n     *   file is saved.\n     */\n    save(path: string, options?: Partial<IModel>): Promise<IModel>;\n\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param path - The original file path.\n     *\n     * @param toDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new content model when the\n     *  file is copied.\n     */\n    copy(path: string, toDir: string): Promise<IModel>;\n\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    createCheckpoint(path: string): Promise<ICheckpointModel>;\n\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    listCheckpoints(path: string): Promise<ICheckpointModel[]>;\n\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param path - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    restoreCheckpoint(path: string, checkpointID: string): Promise<void>;\n\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param path - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    deleteCheckpoint(path: string, checkpointID: string): Promise<void>;\n  }\n\n  /**\n   * The interface for a network drive that can be mounted\n   * in the contents manager.\n   */\n  export\n  interface IDrive extends IDisposable {\n    /**\n     * The name of the drive, which is used at the leading\n     * component of file paths.\n     */\n    readonly name: string;\n\n    /**\n     * The server settings of the manager.\n     */\n    readonly serverSettings: ServerConnection.ISettings;\n\n    /**\n     * An optional ModelDB.IFactory instance for the\n     * drive.\n     */\n    readonly modelDBFactory?: ModelDB.IFactory;\n\n    /**\n     * A signal emitted when a file operation takes place.\n     */\n    fileChanged: ISignal<IDrive, IChangedArgs>;\n\n    /**\n     * Get a file or directory.\n     *\n     * @param localPath: The path to the file.\n     *\n     * @param options: The options used to fetch the file.\n     *\n     * @returns A promise which resolves with the file content.\n     */\n    get(localPath: string, options?: IFetchOptions): Promise<IModel>;\n\n    /**\n     * Get an encoded download url given a file path.\n     *\n     * @param A promise which resolves with the absolute POSIX\n     *   file path on the server.\n     */\n    getDownloadUrl(localPath: string): Promise<string>;\n\n    /**\n     * Create a new untitled file or directory in the specified directory path.\n     *\n     * @param options: The options used to create the file.\n     *\n     * @returns A promise which resolves with the created file content when the\n     *    file is created.\n     */\n    newUntitled(options?: ICreateOptions): Promise<IModel>;\n\n    /**\n     * Delete a file.\n     *\n     * @param localPath - The path to the file.\n     *\n     * @returns A promise which resolves when the file is deleted.\n     */\n    delete(localPath: string): Promise<void>;\n\n    /**\n     * Rename a file or directory.\n     *\n     * @param oldLocalPath - The original file path.\n     *\n     * @param newLocalPath - The new file path.\n     *\n     * @returns A promise which resolves with the new file content model when the\n     *   file is renamed.\n     */\n    rename(oldLocalPath: string, newLocalPath: string): Promise<IModel>;\n\n    /**\n     * Save a file.\n     *\n     * @param localPath - The desired file path.\n     *\n     * @param options - Optional overrrides to the model.\n     *\n     * @returns A promise which resolves with the file content model when the\n     *   file is saved.\n     */\n    save(localPath: string, options?: Partial<IModel>): Promise<IModel>;\n\n    /**\n     * Copy a file into a given directory.\n     *\n     * @param localPath - The original file path.\n     *\n     * @param toLocalDir - The destination directory path.\n     *\n     * @returns A promise which resolves with the new content model when the\n     *  file is copied.\n     */\n    copy(localPath: string, toLocalDir: string): Promise<IModel>;\n\n    /**\n     * Create a checkpoint for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @returns A promise which resolves with the new checkpoint model when the\n     *   checkpoint is created.\n     */\n    createCheckpoint(localPath: string): Promise<ICheckpointModel>;\n\n    /**\n     * List available checkpoints for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @returns A promise which resolves with a list of checkpoint models for\n     *    the file.\n     */\n    listCheckpoints(localPath: string): Promise<ICheckpointModel[]>;\n\n    /**\n     * Restore a file to a known checkpoint state.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to restore.\n     *\n     * @returns A promise which resolves when the checkpoint is restored.\n     */\n    restoreCheckpoint(localPath: string, checkpointID: string): Promise<void>;\n\n    /**\n     * Delete a checkpoint for a file.\n     *\n     * @param localPath - The path of the file.\n     *\n     * @param checkpointID - The id of the checkpoint to delete.\n     *\n     * @returns A promise which resolves when the checkpoint is deleted.\n     */\n    deleteCheckpoint(localPath: string, checkpointID: string): Promise<void>;\n  }\n}\n\n\n/**\n * A contents manager that passes file operations to the server.\n * Multiple servers implementing the `IDrive` interface can be\n * attached to the contents manager, so that the same session can\n * perform file operations on multiple backends.\n *\n * This includes checkpointing with the normal file operations.\n */\nexport\nclass ContentsManager implements Contents.IManager {\n  /**\n   * Construct a new contents manager object.\n   *\n   * @param options - The options used to initialize the object.\n   */\n  constructor(options: ContentsManager.IOptions = {}) {\n    this._defaultDrive = options.defaultDrive || new Drive();\n    this._defaultDrive.fileChanged.connect(this._onFileChanged, this);\n  }\n\n  /**\n   * A signal emitted when a file operation takes place.\n   */\n  get fileChanged(): ISignal<this, Contents.IChangedArgs> {\n    return this._fileChanged;\n  }\n\n  /**\n   * Test whether the manager has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n  }\n\n  /**\n   * Add an `IDrive` to the manager.\n   */\n  addDrive(drive: Contents.IDrive): void {\n    this._additionalDrives.set(drive.name, drive);\n    drive.fileChanged.connect(this._onFileChanged, this);\n  }\n\n  /**\n   * Given a path, get a ModelDB.IFactory from the\n   * relevant backend. Returns `null` if the backend\n   * does not provide one.\n   */\n  getModelDBFactory(path: string): ModelDB.IFactory | null {\n    let [drive, ] = this._driveForPath(path);\n    return drive && drive.modelDBFactory || null;\n  }\n\n  /**\n   * Get a file or directory.\n   *\n   * @param path: The path to the file.\n   *\n   * @param options: The options used to fetch the file.\n   *\n   * @returns A promise which resolves with the file content.\n   */\n  get(path: string, options?: Contents.IFetchOptions): Promise<Contents.IModel> {\n    let [drive, localPath] = this._driveForPath(path);\n    if (!drive) {\n      return Promise.reject(`No valid drive for path: ${path}`);\n    }\n    return drive.get(localPath, options).then(contentsModel => {\n      let listing: Contents.IModel[] = [];\n      if (contentsModel.type === 'directory' && contentsModel.content) {\n        each(contentsModel.content, (item: Contents.IModel) => {\n          listing.push({\n            ...item,\n            path: this._toGlobalPath(drive, item.path)\n          } as Contents.IModel);\n        });\n        return {\n          ...contentsModel,\n          path: this._toGlobalPath(drive, localPath),\n          content: listing\n        } as Contents.IModel;\n      } else {\n        return {\n          ...contentsModel,\n          path: this._toGlobalPath(drive, localPath)\n        } as Contents.IModel;\n      }\n    });\n  }\n\n  /**\n   * Get an encoded download url given a file path.\n   *\n   * @param path - An absolute POSIX file path on the server.\n   *\n   * #### Notes\n   * It is expected that the path contains no relative paths.\n   */\n  getDownloadUrl(path: string): Promise<string> {\n    let [drive, localPath] = this._driveForPath(path);\n    return drive.getDownloadUrl(localPath);\n  }\n\n  /**\n   * Create a new untitled file or directory in the specified directory path.\n   *\n   * @param options: The options used to create the file.\n   *\n   * @returns A promise which resolves with the created file content when the\n   *    file is created.\n   */\n  newUntitled(options: Contents.ICreateOptions = {}): Promise<Contents.IModel> {\n    if (options.path) {\n      let globalPath = Private.normalize(options.path);\n      let [drive, localPath] = this._driveForPath(globalPath);\n      if (!drive) {\n        return Promise.reject(`No valid drive for path: ${globalPath}`);\n      }\n      return drive.newUntitled({ ...options, path: localPath }).then( contentsModel => {\n        return {\n          ...contentsModel,\n          path: PathExt.join(globalPath, contentsModel.name)\n        } as Contents.IModel;\n      });\n    } else {\n      return this._defaultDrive.newUntitled(options);\n    }\n  }\n\n  /**\n   * Delete a file.\n   *\n   * @param path - The path to the file.\n   *\n   * @returns A promise which resolves when the file is deleted.\n   */\n  delete(path: string): Promise<void> {\n    let [drive, localPath] = this._driveForPath(path);\n    return drive.delete(localPath);\n  }\n\n  /**\n   * Rename a file or directory.\n   *\n   * @param path - The original file path.\n   *\n   * @param newPath - The new file path.\n   *\n   * @returns A promise which resolves with the new file contents model when\n   *   the file is renamed.\n   */\n  rename(path: string, newPath: string): Promise<Contents.IModel> {\n    let [drive1, path1] = this._driveForPath(path);\n    let [drive2, path2] = this._driveForPath(newPath);\n    if (drive1 !== drive2) {\n      throw Error('ContentsManager: renaming files must occur within a Drive');\n    }\n    return drive1.rename(path1, path2).then(contentsModel => {\n      return {\n        ...contentsModel,\n        path: this._toGlobalPath(drive1, path2)\n      } as Contents.IModel;\n    });\n  }\n\n  /**\n   * Save a file.\n   *\n   * @param path - The desired file path.\n   *\n   * @param options - Optional overrides to the model.\n   *\n   * @returns A promise which resolves with the file content model when the\n   *   file is saved.\n   *\n   * #### Notes\n   * Ensure that `model.content` is populated for the file.\n   */\n  save(path: string, options: Partial<Contents.IModel> = {}): Promise<Contents.IModel> {\n    let [drive, localPath] = this._driveForPath(path);\n    return drive.save(localPath, { ...options, path: localPath }).then(contentsModel => {\n      return { ...contentsModel, path: Private.normalize(path) } as Contents.IModel;\n    });\n  }\n\n  /**\n   * Copy a file into a given directory.\n   *\n   * @param path - The original file path.\n   *\n   * @param toDir - The destination directory path.\n   *\n   * @returns A promise which resolves with the new contents model when the\n   *  file is copied.\n   *\n   * #### Notes\n   * The server will select the name of the copied file.\n   */\n  copy(fromFile: string, toDir: string): Promise<Contents.IModel> {\n    let [drive1, path1] = this._driveForPath(fromFile);\n    let [drive2, path2] = this._driveForPath(toDir);\n    if (drive1 === drive2) {\n      return drive1.copy(path1, path2).then(contentsModel => {\n        return {\n          ...contentsModel,\n          path: this._toGlobalPath(drive1, contentsModel.path)\n        } as Contents.IModel;\n      });\n    } else {\n      throw Error('Copying files between drives is not currently implemented');\n    }\n  }\n\n  /**\n   * Create a checkpoint for a file.\n   *\n   * @param path - The path of the file.\n   *\n   * @returns A promise which resolves with the new checkpoint model when the\n   *   checkpoint is created.\n   */\n  createCheckpoint(path: string): Promise<Contents.ICheckpointModel> {\n    let [drive, localPath] = this._driveForPath(path);\n    return drive.createCheckpoint(localPath);\n  }\n\n  /**\n   * List available checkpoints for a file.\n   *\n   * @param path - The path of the file.\n   *\n   * @returns A promise which resolves with a list of checkpoint models for\n   *    the file.\n   */\n  listCheckpoints(path: string): Promise<Contents.ICheckpointModel[]> {\n    let [drive, localPath] = this._driveForPath(path);\n    return drive.listCheckpoints(localPath);\n  }\n\n  /**\n   * Restore a file to a known checkpoint state.\n   *\n   * @param path - The path of the file.\n   *\n   * @param checkpointID - The id of the checkpoint to restore.\n   *\n   * @returns A promise which resolves when the checkpoint is restored.\n   */\n  restoreCheckpoint(path: string, checkpointID: string): Promise<void> {\n    let [drive, localPath] = this._driveForPath(path);\n    return drive.restoreCheckpoint(localPath, checkpointID);\n  }\n\n  /**\n   * Delete a checkpoint for a file.\n   *\n   * @param path - The path of the file.\n   *\n   * @param checkpointID - The id of the checkpoint to delete.\n   *\n   * @returns A promise which resolves when the checkpoint is deleted.\n   */\n  deleteCheckpoint(path: string, checkpointID: string): Promise<void> {\n    let [drive, localPath] = this._driveForPath(path);\n    return drive.deleteCheckpoint(localPath, checkpointID);\n  }\n\n  /**\n   * Given a drive and a local path, construct a fully qualified\n   * path. The inverse of `_driveForPath`.\n   *\n   * @param drive: an `IDrive`.\n   *\n   * @param localPath: the local path on the drive.\n   *\n   * @returns the fully qualified path.\n   */\n  private _toGlobalPath(drive: Contents.IDrive, localPath: string): string {\n    if (drive === this._defaultDrive) {\n      return PathExt.removeSlash(localPath);\n    } else {\n      return drive.name + ':' + PathExt.removeSlash(localPath);\n    }\n  }\n\n  /**\n   * Given a path, get the `IDrive to which it refers,\n   * where the path satisfies the pattern\n   * `'driveName:path/to/file'`. If there is no `driveName`\n   * prepended to the path, it returns the default drive.\n   *\n   * @param path: a path to a file.\n   *\n   * @returns A tuple containing an `IDrive` object for the path,\n   * and a local path for that drive.\n   */\n  private _driveForPath(path: string): [Contents.IDrive, string] {\n    // Split the path at ':'\n    let parts = path.split(':')\n    if (parts.length === 1) {\n      return [this._defaultDrive, path]\n    } else {\n      let drive = this._additionalDrives.get(parts[0]);\n      if (!drive) {\n        throw Error('ContentsManager: cannot find requested drive');\n      }\n      return [drive, Private.normalize(parts[1])];\n    }\n  }\n\n  /**\n   * Respond to fileChanged signals from the drives attached to\n   * the manager. This prepends the drive name to the path if necessary,\n   * and then forwards the signal.\n   */\n  private _onFileChanged(sender: Contents.IDrive, args: Contents.IChangedArgs) {\n    if (sender === this._defaultDrive) {\n      this._fileChanged.emit(args);\n    } else {\n      let newValue: Partial<Contents.IModel> | null = null;\n      let oldValue: Partial<Contents.IModel> | null = null;\n      if (args.newValue && args.newValue.path) {\n        newValue = {\n          ...args.newValue,\n          path: this._toGlobalPath(sender, args.newValue.path)\n        };\n      }\n      if (args.oldValue && args.oldValue.path) {\n        oldValue = {\n          ...args.oldValue,\n          path: this._toGlobalPath(sender, args.oldValue.path)\n        };\n      }\n      this._fileChanged.emit({\n        type: args.type,\n        newValue,\n        oldValue\n      });\n    }\n  }\n\n  private _isDisposed = false;\n  private _additionalDrives = new Map<string, Contents.IDrive>();\n  private _defaultDrive: Contents.IDrive;\n  private _fileChanged = new Signal<this, Contents.IChangedArgs>(this);\n}\n\n\n/**\n * A default implementation for an `IDrive`, talking to the\n * server using the Jupyter REST API.\n */\nexport\nclass Drive implements Contents.IDrive {\n  /**\n   * Construct a new contents manager object.\n   *\n   * @param options - The options used to initialize the object.\n   */\n  constructor(options: Drive.IOptions = {}) {\n    this.name = options.name || 'Default';\n    this._apiEndpoint = options.apiEndpoint || SERVICE_DRIVE_URL;\n    this.serverSettings = options.serverSettings || ServerConnection.makeSettings();\n  }\n\n  /**\n   * The name of the drive, which is used at the leading\n   * component of file paths.\n   */\n  readonly name: string;\n\n  /**\n   * A signal emitted when a file operation takes place.\n   */\n  get fileChanged(): ISignal<this, Contents.IChangedArgs> {\n    return this._fileChanged;\n  }\n\n  /**\n   * The server settings of the manager.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Test whether the manager has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources held by the manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    Signal.clearData(this);\n  }\n\n  /**\n   * Get a file or directory.\n   *\n   * @param localPath: The path to the file.\n   *\n   * @param options: The options used to fetch the file.\n   *\n   * @returns A promise which resolves with the file content.\n   *\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n   */\n  get(localPath: string, options?: Contents.IFetchOptions): Promise<Contents.IModel> {\n    let url = this._getUrl(localPath);\n    if (options) {\n      // The notebook type cannot take an format option.\n      if (options.type === 'notebook') {\n        delete options['format'];\n      }\n      let content = options.content ? '1' : '0';\n      let params: JSONObject = { ...options, content };\n      url += URLExt.objectToQueryString(params);\n    }\n\n    let request = {\n      url,\n      method: 'GET',\n      cache: false\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 200) {\n        throw ServerConnection.makeError(response);\n      }\n      try {\n         validate.validateContentsModel(response.data);\n       } catch (error) {\n         throw ServerConnection.makeError(response, error.message);\n       }\n      return response.data;\n    });\n  }\n\n  /**\n   * Get an encoded download url given a file path.\n   *\n   * @param localPath - An absolute POSIX file path on the server.\n   *\n   * #### Notes\n   * It is expected that the path contains no relative paths.\n   */\n  getDownloadUrl(localPath: string): Promise<string> {\n    let baseUrl = this.serverSettings.baseUrl;\n    return Promise.resolve(URLExt.join(baseUrl, FILES_URL,\n                           URLExt.encodeParts(localPath)));\n  }\n\n  /**\n   * Create a new untitled file or directory in the specified directory path.\n   *\n   * @param options: The options used to create the file.\n   *\n   * @returns A promise which resolves with the created file content when the\n   *    file is created.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n   */\n  newUntitled(options: Contents.ICreateOptions = {}): Promise<Contents.IModel> {\n    let data = '{}';\n    if (options) {\n      if (options.ext) {\n        options.ext = Private.normalizeExtension(options.ext);\n      }\n      data = JSON.stringify(options);\n    }\n    let request = {\n      url: this._getUrl(options.path || ''),\n      method: 'POST',\n      data,\n      contentType: 'application/json'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 201) {\n        throw ServerConnection.makeError(response);\n      }\n      let data = response.data as Contents.IModel;\n      try {\n        validate.validateContentsModel(data);\n      } catch (error) {\n        throw ServerConnection.makeError(response, error.message);\n      }\n      this._fileChanged.emit({\n        type: 'new',\n        oldValue: null,\n        newValue: data\n      });\n      return data;\n    });\n  }\n\n  /**\n   * Delete a file.\n   *\n   * @param localPath - The path to the file.\n   *\n   * @returns A promise which resolves when the file is deleted.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n   */\n  delete(localPath: string): Promise<void> {\n    let request = {\n      url: this._getUrl(localPath),\n      method: 'DELETE'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 204) {\n        throw ServerConnection.makeError(response);\n      }\n      this._fileChanged.emit({\n        type: 'delete',\n        oldValue: { path: localPath },\n        newValue: null\n      });\n    }, error => {\n        // Translate certain errors to more specific ones.\n        // TODO: update IPEP27 to specify errors more precisely, so\n        // that error types can be detected here with certainty.\n        if (error.xhr.status === 400) {\n          let err = JSON.parse(error.xhr.response);\n          if (err.message) {\n            error.message = err.message;\n          }\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  /**\n   * Rename a file or directory.\n   *\n   * @param oldLocalPath - The original file path.\n   *\n   * @param newLocalPath - The new file path.\n   *\n   * @returns A promise which resolves with the new file contents model when\n   *   the file is renamed.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n   */\n  rename(oldLocalPath: string, newLocalPath: string): Promise<Contents.IModel> {\n    let request = {\n      url: this._getUrl(oldLocalPath),\n      method: 'PATCH',\n      data: JSON.stringify({ path: newLocalPath })\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 200) {\n        throw ServerConnection.makeError(response);\n      }\n      let data = response.data as Contents.IModel;\n      try {\n        validate.validateContentsModel(data);\n      } catch (error) {\n        throw ServerConnection.makeError(response, error.message);\n      }\n      this._fileChanged.emit({\n        type: 'rename',\n        oldValue: { path: oldLocalPath },\n        newValue: data\n      });\n      return data;\n    });\n  }\n\n  /**\n   * Save a file.\n   *\n   * @param localPath - The desired file path.\n   *\n   * @param options - Optional overrides to the model.\n   *\n   * @returns A promise which resolves with the file content model when the\n   *   file is saved.\n   *\n   * #### Notes\n   * Ensure that `model.content` is populated for the file.\n   *\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n   */\n  save(localPath: string, options: Partial<Contents.IModel> = {}): Promise<Contents.IModel> {\n    let request = {\n      url: this._getUrl(localPath),\n      method: 'PUT',\n      cache: false,\n      data: JSON.stringify(options),\n      contentType: 'application/json'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      // will return 200 for an existing file and 201 for a new file\n      if (response.xhr.status !== 200 && response.xhr.status !== 201) {\n        throw ServerConnection.makeError(response);\n      }\n      let data = response.data as Contents.IModel;\n      try {\n        validate.validateContentsModel(data);\n      } catch (error) {\n        throw ServerConnection.makeError(response, error.message);\n      }\n      this._fileChanged.emit({\n        type: 'save',\n        oldValue: null,\n        newValue: data\n      });\n      return data;\n    });\n  }\n\n  /**\n   * Copy a file into a given directory.\n   *\n   * @param localPath - The original file path.\n   *\n   * @param toDir - The destination directory path.\n   *\n   * @returns A promise which resolves with the new contents model when the\n   *  file is copied.\n   *\n   * #### Notes\n   * The server will select the name of the copied file.\n   *\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n   */\n  copy(fromFile: string, toDir: string): Promise<Contents.IModel> {\n    let request = {\n      url: this._getUrl(toDir),\n      method: 'POST',\n      data: JSON.stringify({ copy_from: fromFile }),\n      contentType: 'application/json'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 201) {\n        throw ServerConnection.makeError(response);\n      }\n      let data = response.data as Contents.IModel;\n      try {\n        validate.validateContentsModel(data);\n      } catch (error) {\n        throw ServerConnection.makeError(response, error.message);\n      }\n      this._fileChanged.emit({\n        type: 'new',\n        oldValue: null,\n        newValue: data\n      });\n      return data;\n    });\n  }\n\n  /**\n   * Create a checkpoint for a file.\n   *\n   * @param localPath - The path of the file.\n   *\n   * @returns A promise which resolves with the new checkpoint model when the\n   *   checkpoint is created.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n   */\n  createCheckpoint(localPath: string): Promise<Contents.ICheckpointModel> {\n    let request = {\n      url: this._getUrl(localPath, 'checkpoints'),\n      method: 'POST'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 201) {\n        throw ServerConnection.makeError(response);\n      }\n      let data = response.data as Contents.ICheckpointModel;\n      try {\n        validate.validateCheckpointModel(data);\n      } catch (error) {\n        throw ServerConnection.makeError(response, error.message);\n      }\n      return data;\n    });\n  }\n\n  /**\n   * List available checkpoints for a file.\n   *\n   * @param localPath - The path of the file.\n   *\n   * @returns A promise which resolves with a list of checkpoint models for\n   *    the file.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents) and validates the response model.\n   */\n  listCheckpoints(localPath: string): Promise<Contents.ICheckpointModel[]> {\n    let request = {\n      url: this._getUrl(localPath, 'checkpoints'),\n      method: 'GET',\n      cache: false\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 200) {\n        throw ServerConnection.makeError(response);\n      }\n      if (!Array.isArray(response.data)) {\n        throw ServerConnection.makeError(response, 'Invalid Checkpoint list');\n      }\n      for (let i = 0; i < response.data.length; i++) {\n        try {\n          validate.validateCheckpointModel(response.data[i]);\n        } catch (error) {\n          throw ServerConnection.makeError(response, error.message);\n        }\n      }\n      return response.data;\n    });\n  }\n\n  /**\n   * Restore a file to a known checkpoint state.\n   *\n   * @param localPath - The path of the file.\n   *\n   * @param checkpointID - The id of the checkpoint to restore.\n   *\n   * @returns A promise which resolves when the checkpoint is restored.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n   */\n  restoreCheckpoint(localPath: string, checkpointID: string): Promise<void> {\n    let request = {\n      url: this._getUrl(localPath, 'checkpoints', checkpointID),\n      method: 'POST'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 204) {\n        throw ServerConnection.makeError(response);\n      }\n    });\n\n  }\n\n  /**\n   * Delete a checkpoint for a file.\n   *\n   * @param localPath - The path of the file.\n   *\n   * @param checkpointID - The id of the checkpoint to delete.\n   *\n   * @returns A promise which resolves when the checkpoint is deleted.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n   */\n  deleteCheckpoint(localPath: string, checkpointID: string): Promise<void> {\n    let request = {\n      url: this._getUrl(localPath, 'checkpoints', checkpointID),\n      method: 'DELETE'\n    };\n    return ServerConnection.makeRequest(request, this.serverSettings).then(response => {\n      if (response.xhr.status !== 204) {\n        throw ServerConnection.makeError(response);\n      }\n    });\n  }\n\n  /**\n   * Get a REST url for a file given a path.\n   */\n  private _getUrl(...args: string[]): string {\n    let parts = args.map(path => URLExt.encodeParts(path));\n    let baseUrl = this.serverSettings.baseUrl;\n    return URLExt.join(baseUrl, this._apiEndpoint, ...parts);\n  }\n\n  private _apiEndpoint: string;\n  private _isDisposed = false;\n  private _fileChanged = new Signal<this, Contents.IChangedArgs>(this);\n}\n\n\n/**\n * A namespace for ContentsManager statics.\n */\nexport\nnamespace ContentsManager {\n  /**\n   * The options used to intialize a contents manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The default drive backend for the contents manager.\n     */\n    defaultDrive?: Contents.IDrive;\n  }\n}\n\n/**\n * A namespace for Drive statics.\n */\nexport\nnamespace Drive {\n  /**\n   * The options used to intialize a `Drive`.\n   */\n  export\n  interface IOptions {\n    /**\n     * The name for the `Drive`, which is used in file\n     * paths to disambiguate it from other drives.\n     */\n    name?: string;\n\n    /**\n     * The server settings for the server.\n     */\n    serverSettings?: ServerConnection.ISettings;\n\n    /**\n     * A REST endpoint for drive requests.\n     * If not given, defaults to the Jupyter\n     * REST API given by [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/contents).\n     */\n    apiEndpoint?: string;\n  }\n}\n\n\n/**\n * A namespace for module private data.\n */\nnamespace Private {\n  /**\n   * Normalize a file extension to be of the type `'.foo'`.\n   *\n   * Adds a leading dot if not present and converts to lower case.\n   */\n  export\n  function normalizeExtension(extension: string): string {\n    if (extension.length > 0 && extension.indexOf('.') !== 0) {\n      extension = `.${extension}`;\n    }\n    return extension;\n  }\n\n  /**\n   * Normalize a global path. Reduces '..' and '.' parts, and removes\n   * leading slashes from the local part of the path, while retaining\n   * the drive name if it exists.\n   */\n  export\n  function normalize(path: string): string {\n    const parts = path.split(':');\n\n    if (parts.length === 1) {\n      return PathExt.normalize(path);\n    }\n\n    if (parts.length === 2) {\n      return parts[0] + ':' + PathExt.normalize(parts[1]);\n    }\n\n    throw new Error('Malformed path: ' + path);\n  }\n}\n"]}