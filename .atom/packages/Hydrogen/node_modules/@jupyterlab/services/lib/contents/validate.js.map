{"version":3,"file":"validate.js","sourceRoot":"","sources":["../../../../../services/src/contents/validate.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAO3D;;;GAGG;AACH,0BAA0B,MAAW,EAAE,IAAY,EAAE,QAAiB;IACpE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,KAAK,CAAC,uBAAqB,IAAI,MAAG,CAAC,CAAC;IAC5C,CAAC;IACD,EAAE,CAAC,CAAC,QAAQ,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;QACxB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnB,KAAK,OAAO;gBACV,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC7B,KAAK,CAAC;YACR,KAAK,QAAQ;gBACX,KAAK,GAAG,OAAO,KAAK,KAAK,WAAW,CAAC;gBACrC,KAAK,CAAC;YACR;gBACE,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC;QACpC,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,eAAa,IAAI,0BAAqB,QAAU,CAAC,CAAC;QACpE,CAAC;IACH,CAAC;AACH,CAAC;AAED;;GAEG;AACH,+BAC+B,KAAsB;IACnD,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC7C,gBAAgB,CAAC,KAAK,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;IACnD,gBAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC9C,gBAAgB,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;IAC7C,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC9C,CAAC;AAVD,sDAUC;AAGD;;GAEG;AACH,iCACiC,KAAgC;IAC/D,gBAAgB,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;IACxC,gBAAgB,CAAC,KAAK,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC;AACrD,CAAC;AAJD,0DAIC","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  Contents\n} from './index';\n\n\n/**\n * Validate a property as being on an object, and optionally\n * of a given type.\n */\nfunction validateProperty(object: any, name: string, typeName?: string): void {\n  if (!object.hasOwnProperty(name)) {\n    throw Error(`Missing property '${name}'`);\n  }\n  if (typeName !== void 0) {\n    let valid = true;\n    let value = object[name];\n    switch (typeName) {\n    case 'array':\n      valid = Array.isArray(value);\n      break;\n    case 'object':\n      valid = typeof value !== 'undefined';\n      break;\n    default:\n      valid = typeof value === typeName;\n    }\n    if (!valid) {\n      throw new Error(`Property '${name}' is not of type '${typeName}`);\n    }\n  }\n}\n\n/**\n * Validate an `Contents.IModel` object.\n */\nexport\nfunction validateContentsModel(model: Contents.IModel): void {\n  validateProperty(model, 'name', 'string');\n  validateProperty(model, 'path', 'string');\n  validateProperty(model, 'type', 'string');\n  validateProperty(model, 'created', 'string');\n  validateProperty(model, 'last_modified', 'string');\n  validateProperty(model, 'mimetype', 'object');\n  validateProperty(model, 'content', 'object');\n  validateProperty(model, 'format', 'object');\n}\n\n\n/**\n * Validate an `Contents.ICheckpointModel` object.\n */\nexport\nfunction validateCheckpointModel(model: Contents.ICheckpointModel): void  {\n  validateProperty(model, 'id', 'string');\n  validateProperty(model, 'last_modified', 'string');\n}\n"]}