"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var disposable_1 = require("@phosphor/disposable");
var messages_1 = require("./messages");
/**
 * Comm channel handler.
 */
var CommHandler = /** @class */ (function (_super) {
    __extends(CommHandler, _super);
    /**
     * Construct a new comm channel.
     */
    function CommHandler(target, id, kernel, disposeCb) {
        var _this = _super.call(this, disposeCb) || this;
        _this._target = '';
        _this._id = '';
        _this._id = id;
        _this._target = target;
        _this._kernel = kernel;
        return _this;
    }
    Object.defineProperty(CommHandler.prototype, "commId", {
        /**
         * The unique id for the comm channel.
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommHandler.prototype, "targetName", {
        /**
         * The target name for the comm channel.
         */
        get: function () {
            return this._target;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommHandler.prototype, "onClose", {
        /**
         * Get the callback for a comm close event.
         *
         * #### Notes
         * This is called when the comm is closed from either the server or
         * client.
         *
         * **See also:** [[ICommClose]], [[close]]
         */
        get: function () {
            return this._onClose;
        },
        /**
         * Set the callback for a comm close event.
         *
         * #### Notes
         * This is called when the comm is closed from either the server or
         * client.
         *
         * **See also:** [[close]]
         */
        set: function (cb) {
            this._onClose = cb;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommHandler.prototype, "onMsg", {
        /**
         * Get the callback for a comm message received event.
         */
        get: function () {
            return this._onMsg;
        },
        /**
         * Set the callback for a comm message received event.
         */
        set: function (cb) {
            this._onMsg = cb;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Open a comm with optional data and metadata.
     *
     * #### Notes
     * This sends a `comm_open` message to the server.
     *
     * **See also:** [[ICommOpen]]
     */
    CommHandler.prototype.open = function (data, metadata, buffers) {
        if (buffers === void 0) { buffers = []; }
        if (this.isDisposed || this._kernel.isDisposed) {
            throw new Error('Cannot open');
        }
        var options = {
            msgType: 'comm_open',
            channel: 'shell',
            username: this._kernel.username,
            session: this._kernel.clientId
        };
        var content = {
            comm_id: this._id,
            target_name: this._target,
            data: data || {}
        };
        var msg = messages_1.KernelMessage.createShellMessage(options, content, metadata, buffers);
        return this._kernel.sendShellMessage(msg, false, true);
    };
    /**
     * Send a `comm_msg` message to the kernel.
     *
     * #### Notes
     * This is a no-op if the comm has been closed.
     *
     * **See also:** [[ICommMsg]]
     */
    CommHandler.prototype.send = function (data, metadata, buffers, disposeOnDone) {
        if (buffers === void 0) { buffers = []; }
        if (disposeOnDone === void 0) { disposeOnDone = true; }
        if (this.isDisposed || this._kernel.isDisposed) {
            throw new Error('Cannot send');
        }
        var options = {
            msgType: 'comm_msg',
            channel: 'shell',
            username: this._kernel.username,
            session: this._kernel.clientId
        };
        var content = {
            comm_id: this._id,
            data: data
        };
        var msg = messages_1.KernelMessage.createShellMessage(options, content, metadata, buffers);
        return this._kernel.sendShellMessage(msg, false, true);
    };
    /**
     * Close the comm.
     *
     * #### Notes
     * This will send a `comm_close` message to the kernel, and call the
     * `onClose` callback if set.
     *
     * This is a no-op if the comm is already closed.
     *
     * **See also:** [[ICommClose]], [[onClose]]
     */
    CommHandler.prototype.close = function (data, metadata, buffers) {
        if (buffers === void 0) { buffers = []; }
        if (this.isDisposed || this._kernel.isDisposed) {
            throw new Error('Cannot close');
        }
        var options = {
            msgType: 'comm_msg',
            channel: 'shell',
            username: this._kernel.username,
            session: this._kernel.clientId
        };
        var content = {
            comm_id: this._id,
            data: data || {}
        };
        var msg = messages_1.KernelMessage.createShellMessage(options, content, metadata, buffers);
        var future = this._kernel.sendShellMessage(msg, false, true);
        options.channel = 'iopub';
        var onClose = this._onClose;
        if (onClose) {
            var ioMsg = messages_1.KernelMessage.createMessage(options, content, metadata, buffers);
            onClose(ioMsg);
        }
        this.dispose();
        return future;
    };
    return CommHandler;
}(disposable_1.DisposableDelegate));
exports.CommHandler = CommHandler;
