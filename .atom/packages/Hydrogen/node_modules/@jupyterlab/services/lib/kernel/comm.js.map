{"version":3,"file":"comm.js","sourceRoot":"","sources":["../../../../../services/src/kernel/comm.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;;;AAM3D,mDAE8B;AAM9B,uCAEoB;AAGpB;;GAEG;AACH;IAC0B,+BAAkB;IAC1C;;OAEG;IACH,qBAAY,MAAc,EAAE,EAAU,EAAE,MAAsB,EAAE,SAAqB;QAArF,YACE,kBAAM,SAAS,CAAC,SAIjB;QAkJO,aAAO,GAAG,EAAE,CAAC;QACb,SAAG,GAAG,EAAE,CAAC;QAtJf,KAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;;IACxB,CAAC;IAKD,sBAAI,+BAAM;QAHV;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;QAClB,CAAC;;;OAAA;IAKD,sBAAI,mCAAU;QAHd;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;;;OAAA;IAWD,sBAAI,gCAAO;QATX;;;;;;;;WAQG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;QAED;;;;;;;;WAQG;aACH,UAAY,EAA8C;YACxD,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACrB,CAAC;;;OAbA;IAkBD,sBAAI,8BAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;QAED;;WAEG;aACH,UAAU,EAA4C;YACpD,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACnB,CAAC;;;OAPA;IASD;;;;;;;OAOG;IACH,0BAAI,GAAJ,UAAK,IAAgB,EAAE,QAAqB,EAAE,OAA+C;QAA/C,wBAAA,EAAA,YAA+C;QAC3F,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAC/C,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACjC,CAAC;QACD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,WAAW;YACpB,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;SAC/B,CAAC;QACF,IAAI,OAAO,GAA4B;YACrC,OAAO,EAAE,IAAI,CAAC,GAAG;YACjB,WAAW,EAAE,IAAI,CAAC,OAAO;YACzB,IAAI,EAAE,IAAI,IAAI,EAAE;SACjB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAChF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;OAOG;IACH,0BAAI,GAAJ,UAAK,IAAe,EAAE,QAAqB,EAAE,OAA+C,EAAE,aAA6B;QAA9E,wBAAA,EAAA,YAA+C;QAAE,8BAAA,EAAA,oBAA6B;QACzH,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAC/C,MAAM,IAAI,KAAK,CAAC,aAAa,CAAC,CAAC;QACjC,CAAC;QACD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,UAAU;YACnB,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;SAC/B,CAAC;QACF,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,IAAI,CAAC,GAAG;YACjB,IAAI,EAAE,IAAI;SACX,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAChF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;;;;OAUG;IACH,2BAAK,GAAL,UAAM,IAAgB,EAAE,QAAqB,EAAE,OAA+C;QAA/C,wBAAA,EAAA,YAA+C;QAC5F,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAC/C,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QAClC,CAAC;QACD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,UAAU;YACnB,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAC/B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;SAC/B,CAAC;QACF,IAAI,OAAO,GAA6B;YACtC,OAAO,EAAE,IAAI,CAAC,GAAG;YACjB,IAAI,EAAE,IAAI,IAAI,EAAE;SACjB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAChF,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7D,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;QAC1B,IAAI,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC5B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,IAAI,KAAK,GAAG,wBAAa,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC7E,OAAO,CAAC,KAAoC,CAAC,CAAC;QAChD,CAAC;QACD,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAOH,kBAAC;AAAD,CAAC,AAjKD,CAC0B,+BAAkB,GAgK3C;AAhKK,kCAAW","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  JSONObject, JSONValue\n} from '@phosphor/coreutils';\n\nimport {\n  DisposableDelegate\n} from '@phosphor/disposable';\n\nimport {\n  Kernel\n} from './kernel';\n\nimport {\n  KernelMessage\n} from './messages';\n\n\n/**\n * Comm channel handler.\n */\nexport\nclass CommHandler extends DisposableDelegate implements Kernel.IComm {\n  /**\n   * Construct a new comm channel.\n   */\n  constructor(target: string, id: string, kernel: Kernel.IKernel, disposeCb: () => void) {\n    super(disposeCb);\n    this._id = id;\n    this._target = target;\n    this._kernel = kernel;\n  }\n\n  /**\n   * The unique id for the comm channel.\n   */\n  get commId(): string {\n    return this._id;\n  }\n\n  /**\n   * The target name for the comm channel.\n   */\n  get targetName(): string {\n    return this._target;\n  }\n\n  /**\n   * Get the callback for a comm close event.\n   *\n   * #### Notes\n   * This is called when the comm is closed from either the server or\n   * client.\n   *\n   * **See also:** [[ICommClose]], [[close]]\n   */\n  get onClose(): (msg: KernelMessage.ICommCloseMsg) => void {\n    return this._onClose;\n  }\n\n  /**\n   * Set the callback for a comm close event.\n   *\n   * #### Notes\n   * This is called when the comm is closed from either the server or\n   * client.\n   *\n   * **See also:** [[close]]\n   */\n  set onClose(cb: (msg: KernelMessage.ICommCloseMsg) => void) {\n    this._onClose = cb;\n  }\n\n  /**\n   * Get the callback for a comm message received event.\n   */\n  get onMsg(): (msg: KernelMessage.ICommMsgMsg) => void {\n    return this._onMsg;\n  }\n\n  /**\n   * Set the callback for a comm message received event.\n   */\n  set onMsg(cb: (msg: KernelMessage.ICommMsgMsg) => void) {\n    this._onMsg = cb;\n  }\n\n  /**\n   * Open a comm with optional data and metadata.\n   *\n   * #### Notes\n   * This sends a `comm_open` message to the server.\n   *\n   * **See also:** [[ICommOpen]]\n   */\n  open(data?: JSONValue, metadata?: JSONObject, buffers: (ArrayBuffer | ArrayBufferView)[] = []): Kernel.IFuture {\n    if (this.isDisposed || this._kernel.isDisposed) {\n      throw new Error('Cannot open');\n    }\n    let options: KernelMessage.IOptions = {\n      msgType: 'comm_open',\n      channel: 'shell',\n      username: this._kernel.username,\n      session: this._kernel.clientId\n    };\n    let content: KernelMessage.ICommOpen = {\n      comm_id: this._id,\n      target_name: this._target,\n      data: data || {}\n    };\n    let msg = KernelMessage.createShellMessage(options, content, metadata, buffers);\n    return this._kernel.sendShellMessage(msg, false, true);\n  }\n\n  /**\n   * Send a `comm_msg` message to the kernel.\n   *\n   * #### Notes\n   * This is a no-op if the comm has been closed.\n   *\n   * **See also:** [[ICommMsg]]\n   */\n  send(data: JSONValue, metadata?: JSONObject, buffers: (ArrayBuffer | ArrayBufferView)[] = [], disposeOnDone: boolean = true): Kernel.IFuture {\n    if (this.isDisposed || this._kernel.isDisposed) {\n      throw new Error('Cannot send');\n    }\n    let options: KernelMessage.IOptions = {\n      msgType: 'comm_msg',\n      channel: 'shell',\n      username: this._kernel.username,\n      session: this._kernel.clientId\n    };\n    let content: KernelMessage.ICommMsg = {\n      comm_id: this._id,\n      data: data\n    };\n    let msg = KernelMessage.createShellMessage(options, content, metadata, buffers);\n    return this._kernel.sendShellMessage(msg, false, true);\n  }\n\n  /**\n   * Close the comm.\n   *\n   * #### Notes\n   * This will send a `comm_close` message to the kernel, and call the\n   * `onClose` callback if set.\n   *\n   * This is a no-op if the comm is already closed.\n   *\n   * **See also:** [[ICommClose]], [[onClose]]\n   */\n  close(data?: JSONValue, metadata?: JSONObject, buffers: (ArrayBuffer | ArrayBufferView)[] = []): Kernel.IFuture {\n    if (this.isDisposed || this._kernel.isDisposed) {\n      throw new Error('Cannot close');\n    }\n    let options: KernelMessage.IOptions = {\n      msgType: 'comm_msg',\n      channel: 'shell',\n      username: this._kernel.username,\n      session: this._kernel.clientId\n    };\n    let content: KernelMessage.ICommClose = {\n      comm_id: this._id,\n      data: data || {}\n    };\n    let msg = KernelMessage.createShellMessage(options, content, metadata, buffers);\n    let future = this._kernel.sendShellMessage(msg, false, true);\n    options.channel = 'iopub';\n    let onClose = this._onClose;\n    if (onClose) {\n      let ioMsg = KernelMessage.createMessage(options, content, metadata, buffers);\n      onClose(ioMsg as KernelMessage.ICommCloseMsg);\n    }\n    this.dispose();\n    return future;\n  }\n\n  private _target = '';\n  private _id = '';\n  private _kernel: Kernel.IKernel;\n  private _onClose: (msg: KernelMessage.ICommCloseMsg) => void;\n  private _onMsg: (msg: KernelMessage.ICommMsgMsg) => void;\n}\n"]}