"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
var algorithm_1 = require("@phosphor/algorithm");
var coreutils_1 = require("@phosphor/coreutils");
var disposable_1 = require("@phosphor/disposable");
var signaling_1 = require("@phosphor/signaling");
var comm_1 = require("./comm");
var messages_1 = require("./messages");
var future_1 = require("./future");
var serialize = require("./serialize");
var validate = require("./validate");
var utils = require("../utils");
/**
 * The url for the kernel service.
 */
var KERNEL_SERVICE_URL = 'api/kernels';
/**
 * The url for the kernelspec service.
 */
var KERNELSPEC_SERVICE_URL = 'api/kernelspecs';
/**
 * Implementation of the Kernel object
 */
var DefaultKernel = (function () {
    /**
     * Construct a kernel object.
     */
    function DefaultKernel(options, id) {
        this._id = '';
        this._token = '';
        this._name = '';
        this._baseUrl = '';
        this._wsUrl = '';
        this._status = 'unknown';
        this._clientId = '';
        this._ws = null;
        this._username = '';
        this._ajaxSettings = '{}';
        this._reconnectLimit = 7;
        this._reconnectAttempt = 0;
        this._isReady = false;
        this._futures = null;
        this._commPromises = null;
        this._comms = null;
        this._targetRegistry = Object.create(null);
        this._info = null;
        this._pendingMessages = [];
        this._connectionPromise = null;
        this._specPromise = null;
        this._statusChanged = new signaling_1.Signal(this);
        this._iopubMessage = new signaling_1.Signal(this);
        this._unhandledMessage = new signaling_1.Signal(this);
        this._name = options.name;
        this._id = id;
        this._baseUrl = options.baseUrl || utils.getBaseUrl();
        this._wsUrl = options.wsUrl || utils.getWsUrl(this._baseUrl);
        this._ajaxSettings = JSON.stringify(utils.ajaxSettingsWithToken(options.ajaxSettings, options.token));
        this._token = options.token || utils.getConfigOption('token');
        this._clientId = options.clientId || utils.uuid();
        this._username = options.username || '';
        this._futures = new Map();
        this._commPromises = new Map();
        this._comms = new Map();
        this._createSocket();
        this.terminated = new signaling_1.Signal(this);
        Private.runningKernels.push(this);
    }
    Object.defineProperty(DefaultKernel.prototype, "statusChanged", {
        /**
         * A signal emitted when the kernel status changes.
         */
        get: function () {
            return this._statusChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "iopubMessage", {
        /**
         * A signal emitted for iopub kernel messages.
         */
        get: function () {
            return this._iopubMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "unhandledMessage", {
        /**
         * A signal emitted for unhandled kernel message.
         */
        get: function () {
            return this._unhandledMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "id", {
        /**
         * The id of the server-side kernel.
         */
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "name", {
        /**
         * The name of the server-side kernel.
         */
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "model", {
        /**
         * Get the model associated with the kernel.
         */
        get: function () {
            return { name: this.name, id: this.id };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "username", {
        /**
         * The client username.
         */
        get: function () {
            return this._username;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "clientId", {
        /**
         * The client unique id.
         */
        get: function () {
            return this._clientId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "status", {
        /**
         * The current status of the kernel.
         */
        get: function () {
            return this._status;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "baseUrl", {
        /**
         * The base url of the kernel.
         */
        get: function () {
            return this._baseUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "ajaxSettings", {
        /**
         * Get a copy of the default ajax settings for the kernel.
         */
        get: function () {
            return JSON.parse(this._ajaxSettings);
        },
        /**
         * Set the default ajax settings for the kernel.
         */
        set: function (value) {
            this._ajaxSettings = JSON.stringify(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "isDisposed", {
        /**
         * Test whether the kernel has been disposed.
         */
        get: function () {
            return this._futures === null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "info", {
        /**
         * The cached kernel info.
         *
         * #### Notes
         * This value will be null until the kernel is ready.
         */
        get: function () {
            return this._info;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "isReady", {
        /**
         * Test whether the kernel is ready.
         */
        get: function () {
            return this._isReady;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DefaultKernel.prototype, "ready", {
        /**
         * A promise that is fulfilled when the kernel is ready.
         */
        get: function () {
            return this._connectionPromise.promise;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Get the kernel spec.
     *
     * @returns A promise that resolves with the kernel spec.
     */
    DefaultKernel.prototype.getSpec = function () {
        var _this = this;
        if (this._specPromise) {
            return this._specPromise;
        }
        var options = {
            baseUrl: this._baseUrl,
            ajaxSettings: this.ajaxSettings
        };
        this._specPromise = Private.findSpecs(options).then(function (specs) {
            return specs.kernelspecs[_this._name];
        });
        return this._specPromise;
    };
    /**
     * Clone the current kernel with a new clientId.
     */
    DefaultKernel.prototype.clone = function () {
        var options = {
            baseUrl: this._baseUrl,
            wsUrl: this._wsUrl,
            name: this._name,
            username: this._username,
            token: this._token,
            ajaxSettings: this.ajaxSettings
        };
        return new DefaultKernel(options, this._id);
    };
    /**
     * Dispose of the resources held by the kernel.
     */
    DefaultKernel.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._status = 'dead';
        if (this._ws !== null) {
            this._ws.close();
        }
        this._ws = null;
        this._futures.forEach(function (future, key) {
            future.dispose();
        });
        this._comms.forEach(function (comm, key) {
            comm.dispose();
        });
        this._futures = null;
        this._commPromises = null;
        this._comms = null;
        this._targetRegistry = null;
        algorithm_1.ArrayExt.removeFirstOf(Private.runningKernels, this);
        signaling_1.Signal.clearData(this);
    };
    /**
     * Send a shell message to the kernel.
     *
     * #### Notes
     * Send a message to the kernel's shell channel, yielding a future object
     * for accepting replies.
     *
     * If `expectReply` is given and `true`, the future is disposed when both a
     * shell reply and an idle status message are received. If `expectReply`
     * is not given or is `false`, the future is resolved when an idle status
     * message is received.
     * If `disposeOnDone` is not given or is `true`, the Future is disposed at this point.
     * If `disposeOnDone` is given and `false`, it is up to the caller to dispose of the Future.
     *
     * All replies are validated as valid kernel messages.
     *
     * If the kernel status is `dead`, this will throw an error.
     */
    DefaultKernel.prototype.sendShellMessage = function (msg, expectReply, disposeOnDone) {
        var _this = this;
        if (expectReply === void 0) { expectReply = false; }
        if (disposeOnDone === void 0) { disposeOnDone = true; }
        if (this.status === 'dead') {
            throw new Error('Kernel is dead');
        }
        if (!this._isReady) {
            this._pendingMessages.push(msg);
        }
        else {
            this._ws.send(serialize.serialize(msg));
        }
        var future = new future_1.KernelFutureHandler(function () {
            _this._futures.delete(msg.header.msg_id);
        }, msg, expectReply, disposeOnDone);
        this._futures.set(msg.header.msg_id, future);
        return future;
    };
    /**
     * Interrupt a kernel.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).
     *
     * The promise is fulfilled on a valid response and rejected otherwise.
     *
     * It is assumed that the API call does not mutate the kernel id or name.
     *
     * The promise will be rejected if the kernel status is `Dead` or if the
     * request fails or the response is invalid.
     */
    DefaultKernel.prototype.interrupt = function () {
        return Private.interruptKernel(this, this._baseUrl, this.ajaxSettings);
    };
    /**
     * Restart a kernel.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.
     *
     * Any existing Future or Comm objects are cleared.
     *
     * The promise is fulfilled on a valid response and rejected otherwise.
     *
     * It is assumed that the API call does not mutate the kernel id or name.
     *
     * The promise will be rejected if the request fails or the response is
     * invalid.
     */
    DefaultKernel.prototype.restart = function () {
        this._clearState();
        this._updateStatus('restarting');
        return Private.restartKernel(this, this._baseUrl, this.ajaxSettings);
    };
    /**
     * Reconnect to a disconnected kernel.
     *
     * #### Notes
     * Used when the websocket connection to the kernel is lost.
     */
    DefaultKernel.prototype.reconnect = function () {
        this._isReady = false;
        if (this._ws !== null) {
            // Clear the websocket event handlers and the socket itself.
            this._ws.onopen = null;
            this._ws.onclose = null;
            this._ws.onerror = null;
            this._ws.onmessage = null;
            this._ws.close();
            this._ws = null;
        }
        this._updateStatus('reconnecting');
        this._createSocket();
        return this._connectionPromise.promise;
    };
    /**
     * Shutdown a kernel.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).
     *
     * The promise is fulfilled on a valid response and rejected otherwise.
     *
     * On a valid response, closes the websocket and disposes of the kernel
     * object, and fulfills the promise.
     *
     * The promise will be rejected if the kernel status is `Dead` or if the
     * request fails or the response is invalid.
     */
    DefaultKernel.prototype.shutdown = function () {
        var _this = this;
        if (this.status === 'dead') {
            return Promise.reject(new Error('Kernel is dead'));
        }
        this._clearState();
        return this.ready.then(function () {
            return Private.shutdownKernel(_this.id, _this._baseUrl, _this.ajaxSettings);
        });
    };
    /**
     * Send a `kernel_info_request` message.
     *
     * #### Notes
     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-info).
     *
     * Fulfills with the `kernel_info_response` content when the shell reply is
     * received and validated.
     */
    DefaultKernel.prototype.requestKernelInfo = function () {
        var _this = this;
        var options = {
            msgType: 'kernel_info_request',
            channel: 'shell',
            username: this._username,
            session: this._clientId
        };
        var msg = messages_1.KernelMessage.createShellMessage(options);
        return Private.handleShellMessage(this, msg).then(function (reply) {
            _this._info = reply.content;
            return reply;
        });
    };
    /**
     * Send a `complete_request` message.
     *
     * #### Notes
     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#completion).
     *
     * Fulfills with the `complete_reply` content when the shell reply is
     * received and validated.
     */
    DefaultKernel.prototype.requestComplete = function (content) {
        var options = {
            msgType: 'complete_request',
            channel: 'shell',
            username: this._username,
            session: this._clientId
        };
        var msg = messages_1.KernelMessage.createShellMessage(options, content);
        return Private.handleShellMessage(this, msg);
    };
    /**
     * Send an `inspect_request` message.
     *
     * #### Notes
     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#introspection).
     *
     * Fulfills with the `inspect_reply` content when the shell reply is
     * received and validated.
     */
    DefaultKernel.prototype.requestInspect = function (content) {
        var options = {
            msgType: 'inspect_request',
            channel: 'shell',
            username: this._username,
            session: this._clientId
        };
        var msg = messages_1.KernelMessage.createShellMessage(options, content);
        return Private.handleShellMessage(this, msg);
    };
    /**
     * Send a `history_request` message.
     *
     * #### Notes
     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#history).
     *
     * Fulfills with the `history_reply` content when the shell reply is
     * received and validated.
     */
    DefaultKernel.prototype.requestHistory = function (content) {
        var options = {
            msgType: 'history_request',
            channel: 'shell',
            username: this._username,
            session: this._clientId
        };
        var msg = messages_1.KernelMessage.createShellMessage(options, content);
        return Private.handleShellMessage(this, msg);
    };
    /**
     * Send an `execute_request` message.
     *
     * #### Notes
     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execute).
     *
     * Future `onReply` is called with the `execute_reply` content when the
     * shell reply is received and validated. The future will resolve when
     * this message is received and the `idle` iopub status is received.
     * The future will also be disposed at this point unless `disposeOnDone`
     * is specified and `false`, in which case it is up to the caller to dispose
     * of the future.
     *
     * **See also:** [[IExecuteReply]]
     */
    DefaultKernel.prototype.requestExecute = function (content, disposeOnDone) {
        if (disposeOnDone === void 0) { disposeOnDone = true; }
        var options = {
            msgType: 'execute_request',
            channel: 'shell',
            username: this._username,
            session: this._clientId
        };
        var defaults = {
            silent: false,
            store_history: true,
            user_expressions: {},
            allow_stdin: true,
            stop_on_error: false
        };
        content = utils.extend(defaults, content);
        var msg = messages_1.KernelMessage.createShellMessage(options, content);
        return this.sendShellMessage(msg, true, disposeOnDone);
    };
    /**
     * Send an `is_complete_request` message.
     *
     * #### Notes
     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#code-completeness).
     *
     * Fulfills with the `is_complete_response` content when the shell reply is
     * received and validated.
     */
    DefaultKernel.prototype.requestIsComplete = function (content) {
        var options = {
            msgType: 'is_complete_request',
            channel: 'shell',
            username: this._username,
            session: this._clientId
        };
        var msg = messages_1.KernelMessage.createShellMessage(options, content);
        return Private.handleShellMessage(this, msg);
    };
    /**
     * Send a `comm_info_request` message.
     *
     * #### Notes
     * Fulfills with the `comm_info_reply` content when the shell reply is
     * received and validated.
     */
    DefaultKernel.prototype.requestCommInfo = function (content) {
        var options = {
            msgType: 'comm_info_request',
            channel: 'shell',
            username: this._username,
            session: this._clientId
        };
        var msg = messages_1.KernelMessage.createShellMessage(options, content);
        return Private.handleShellMessage(this, msg);
    };
    /**
     * Send an `input_reply` message.
     *
     * #### Notes
     * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messages-on-the-stdin-router-dealer-sockets).
     */
    DefaultKernel.prototype.sendInputReply = function (content) {
        if (this.status === 'dead') {
            throw new Error('Kernel is dead');
        }
        var options = {
            msgType: 'input_reply',
            channel: 'stdin',
            username: this._username,
            session: this._clientId
        };
        var msg = messages_1.KernelMessage.createMessage(options, content);
        if (!this._isReady) {
            this._pendingMessages.push(msg);
        }
        else {
            this._ws.send(serialize.serialize(msg));
        }
    };
    /**
     * Register an IOPub message hook.
     *
     * @param msg_id - The parent_header message id the hook will intercept.
     *
     * @param hook - The callback invoked for the message.
     *
     * @returns A disposable used to unregister the message hook.
     *
     * #### Notes
     * The IOPub hook system allows you to preempt the handlers for IOPub messages with a
     * given parent_header message id. The most recently registered hook is run first.
     * If the hook returns false, any later hooks and the future's onIOPub handler will not run.
     * If a hook throws an error, the error is logged to the console and the next hook is run.
     * If a hook is registered during the hook processing, it won't run until the next message.
     * If a hook is disposed during the hook processing, it will be deactivated immediately.
     *
     * See also [[IFuture.registerMessageHook]].
     */
    DefaultKernel.prototype.registerMessageHook = function (msgId, hook) {
        var _this = this;
        var future = this._futures && this._futures.get(msgId);
        if (future) {
            future.registerMessageHook(hook);
        }
        return new disposable_1.DisposableDelegate(function () {
            future = _this._futures && _this._futures.get(msgId);
            if (future) {
                future.removeMessageHook(hook);
            }
        });
    };
    /**
     * Register a comm target handler.
     *
     * @param targetName - The name of the comm target.
     *
     * @param callback - The callback invoked for a comm open message.
     *
     * @returns A disposable used to unregister the comm target.
     *
     * #### Notes
     * Only one comm target can be registered at a time, an existing
     * callback will be overidden.  A registered comm target handler will take
     * precedence over a comm which specifies a `target_module`.
     */
    DefaultKernel.prototype.registerCommTarget = function (targetName, callback) {
        var _this = this;
        this._targetRegistry[targetName] = callback;
        return new disposable_1.DisposableDelegate(function () {
            if (!_this.isDisposed) {
                delete _this._targetRegistry[targetName];
            }
        });
    };
    /**
     * Connect to a comm, or create a new one.
     *
     * #### Notes
     * If a client-side comm already exists, it is returned.
     */
    DefaultKernel.prototype.connectToComm = function (targetName, commId) {
        var _this = this;
        if (commId === void 0) {
            commId = utils.uuid();
        }
        var comm = this._comms.get(commId);
        if (!comm) {
            comm = new comm_1.CommHandler(targetName, commId, this, function () { _this._unregisterComm(commId); });
            this._comms.set(commId, comm);
        }
        return comm;
    };
    /**
     * Create the kernel websocket connection and add socket status handlers.
     */
    DefaultKernel.prototype._createSocket = function () {
        var _this = this;
        var partialUrl = utils.urlPathJoin(this._wsUrl, KERNEL_SERVICE_URL, encodeURIComponent(this._id));
        // Strip any authentication from the display string.
        var parsed = utils.urlParse(partialUrl);
        console.log('Starting websocket', parsed.hostname);
        var url = utils.urlPathJoin(partialUrl, 'channels?session_id=' + encodeURIComponent(this._clientId));
        // if token authentication is in use
        if (this._token !== '') {
            url = url + ("&token=" + encodeURIComponent(this._token));
        }
        this._connectionPromise = new coreutils_1.PromiseDelegate();
        this._ws = new WebSocket(url);
        // Ensure incoming binary messages are not Blobs
        this._ws.binaryType = 'arraybuffer';
        this._ws.onmessage = function (evt) { _this._onWSMessage(evt); };
        this._ws.onopen = function (evt) { _this._onWSOpen(evt); };
        this._ws.onclose = function (evt) { _this._onWSClose(evt); };
        this._ws.onerror = function (evt) { _this._onWSClose(evt); };
    };
    /**
     * Handle a websocket open event.
     */
    DefaultKernel.prototype._onWSOpen = function (evt) {
        var _this = this;
        this._reconnectAttempt = 0;
        // Allow the message to get through.
        this._isReady = true;
        // Get the kernel info, signaling that the kernel is ready.
        this.requestKernelInfo().then(function () {
            _this._connectionPromise.resolve(void 0);
        }).catch(function (err) {
            _this._connectionPromise.reject(err);
        });
        this._isReady = false;
    };
    /**
     * Handle a websocket message, validating and routing appropriately.
     */
    DefaultKernel.prototype._onWSMessage = function (evt) {
        if (this.status === 'dead') {
            // If the socket is being closed, ignore any messages
            return;
        }
        var msg = serialize.deserialize(evt.data);
        try {
            validate.validateMessage(msg);
        }
        catch (error) {
            console.error("Invalid message: " + error.message);
            return;
        }
        if (msg.parent_header) {
            var parentHeader = msg.parent_header;
            var future = this._futures && this._futures.get(parentHeader.msg_id);
            if (future) {
                future.handleMsg(msg);
            }
            else {
                // If the message was sent by us and was not iopub, it is orphaned.
                var owned = parentHeader.session === this.clientId;
                if (msg.channel !== 'iopub' && owned) {
                    this._unhandledMessage.emit(msg);
                }
            }
        }
        if (msg.channel === 'iopub') {
            switch (msg.header.msg_type) {
                case 'status':
                    this._updateStatus(msg.content.execution_state);
                    break;
                case 'comm_open':
                    this._handleCommOpen(msg);
                    break;
                case 'comm_msg':
                    this._handleCommMsg(msg);
                    break;
                case 'comm_close':
                    this._handleCommClose(msg);
                    break;
                default:
                    break;
            }
            this._iopubMessage.emit(msg);
        }
    };
    /**
     * Handle a websocket close event.
     */
    DefaultKernel.prototype._onWSClose = function (evt) {
        if (this.status === 'dead') {
            return;
        }
        // Clear the websocket event handlers and the socket itself.
        this._ws.onclose = null;
        this._ws.onerror = null;
        this._ws = null;
        if (this._reconnectAttempt < this._reconnectLimit) {
            this._updateStatus('reconnecting');
            var timeout = Math.pow(2, this._reconnectAttempt);
            console.error('Connection lost, reconnecting in ' + timeout + ' seconds.');
            setTimeout(this._createSocket.bind(this), 1e3 * timeout);
            this._reconnectAttempt += 1;
        }
        else {
            this._updateStatus('dead');
            this._connectionPromise.reject(new Error('Could not establish connection'));
        }
    };
    /**
     * Handle status iopub messages from the kernel.
     */
    DefaultKernel.prototype._updateStatus = function (status) {
        switch (status) {
            case 'starting':
            case 'idle':
            case 'busy':
                this._isReady = true;
                break;
            case 'restarting':
            case 'reconnecting':
            case 'dead':
                this._isReady = false;
                break;
            default:
                console.error('invalid kernel status:', status);
                return;
        }
        if (status !== this._status) {
            this._status = status;
            Private.logKernelStatus(this);
            this._statusChanged.emit(status);
            if (status === 'dead') {
                this.dispose();
            }
        }
        if (this._isReady) {
            this._sendPending();
        }
    };
    /**
     * Send pending messages to the kernel.
     */
    DefaultKernel.prototype._sendPending = function () {
        // We shift the message off the queue
        // after the message is sent so that if there is an exception,
        // the message is still pending.
        while (this._pendingMessages.length > 0) {
            var msg = serialize.serialize(this._pendingMessages[0]);
            this._ws.send(msg);
            this._pendingMessages.shift();
        }
    };
    /**
     * Clear the internal state.
     */
    DefaultKernel.prototype._clearState = function () {
        this._isReady = false;
        this._pendingMessages = [];
        this._futures.forEach(function (future, key) {
            future.dispose();
        });
        this._comms.forEach(function (comm, key) {
            comm.dispose();
        });
        this._futures = new Map();
        this._commPromises = new Map();
        this._comms = new Map();
    };
    /**
     * Handle a `comm_open` kernel message.
     */
    DefaultKernel.prototype._handleCommOpen = function (msg) {
        var _this = this;
        var content = msg.content;
        var promise = utils.loadObject(content.target_name, content.target_module, this._targetRegistry).then(function (target) {
            var comm = new comm_1.CommHandler(content.target_name, content.comm_id, _this, function () { _this._unregisterComm(content.comm_id); });
            var response;
            try {
                response = target(comm, msg);
            }
            catch (e) {
                comm.close();
                console.error('Exception opening new comm');
                throw (e);
            }
            return Promise.resolve(response).then(function () {
                _this._commPromises.delete(comm.commId);
                _this._comms.set(comm.commId, comm);
                return comm;
            });
        });
        this._commPromises.set(content.comm_id, promise);
    };
    /**
     * Handle 'comm_close' kernel message.
     */
    DefaultKernel.prototype._handleCommClose = function (msg) {
        var _this = this;
        var content = msg.content;
        var promise = this._commPromises.get(content.comm_id);
        if (!promise) {
            var comm = this._comms.get(content.comm_id);
            if (!comm) {
                console.error('Comm not found for comm id ' + content.comm_id);
                return;
            }
            promise = Promise.resolve(comm);
        }
        promise.then(function (comm) {
            _this._unregisterComm(comm.commId);
            try {
                var onClose = comm.onClose;
                if (onClose) {
                    onClose(msg);
                }
                comm.dispose();
            }
            catch (e) {
                console.error('Exception closing comm: ', e, e.stack, msg);
            }
        });
    };
    /**
     * Handle a 'comm_msg' kernel message.
     */
    DefaultKernel.prototype._handleCommMsg = function (msg) {
        var content = msg.content;
        var promise = this._commPromises.get(content.comm_id);
        if (!promise) {
            var comm = this._comms.get(content.comm_id);
            if (!comm) {
                // We do have a registered comm for this comm id, ignore.
                return;
            }
            else {
                var onMsg = comm.onMsg;
                if (onMsg) {
                    onMsg(msg);
                }
            }
        }
        else {
            promise.then(function (comm) {
                try {
                    var onMsg = comm.onMsg;
                    if (onMsg) {
                        onMsg(msg);
                    }
                }
                catch (e) {
                    console.error('Exception handling comm msg: ', e, e.stack, msg);
                }
                return comm;
            });
        }
    };
    /**
     * Unregister a comm instance.
     */
    DefaultKernel.prototype._unregisterComm = function (commId) {
        this._comms.delete(commId);
        this._commPromises.delete(commId);
    };
    return DefaultKernel;
}());
exports.DefaultKernel = DefaultKernel;
/**
 * The namespace for `DefaultKernel` statics.
 */
(function (DefaultKernel) {
    /**
     * Find a kernel by id.
     *
     * #### Notes
     * If the kernel was already started via `startNewKernel`, we return its
     * `Kernel.IModel`.
     *
     * Otherwise, if `options` are given, we attempt to find the existing
     * kernel.
     * The promise is fulfilled when the kernel is found,
     * otherwise the promise is rejected.
     */
    function findById(id, options) {
        return Private.findById(id, options);
    }
    DefaultKernel.findById = findById;
    /**
     * Fetch all of the kernel specs.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernelspecs).
     */
    function getSpecs(options) {
        if (options === void 0) { options = {}; }
        return Private.getSpecs(options);
    }
    DefaultKernel.getSpecs = getSpecs;
    /**
     * Fetch the running kernels.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.
     *
     * The promise is fulfilled on a valid response and rejected otherwise.
     */
    function listRunning(options) {
        if (options === void 0) { options = {}; }
        return Private.listRunning(options);
    }
    DefaultKernel.listRunning = listRunning;
    /**
     * Start a new kernel.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.
     *
     * If no options are given or the kernel name is not given, the
     * default kernel will by started by the server.
     *
     * Wraps the result in a Kernel object. The promise is fulfilled
     * when the kernel is started by the server, otherwise the promise is rejected.
     */
    function startNew(options) {
        options = options || {};
        return Private.startNew(options);
    }
    DefaultKernel.startNew = startNew;
    /**
     * Connect to a running kernel.
     *
     * #### Notes
     * If the kernel was already started via `startNewKernel`, the existing
     * Kernel object info is used to create another instance.
     *
     * Otherwise, if `options` are given, we attempt to connect to the existing
     * kernel found by calling `listRunningKernels`.
     * The promise is fulfilled when the kernel is running on the server,
     * otherwise the promise is rejected.
     *
     * If the kernel was not already started and no `options` are given,
     * the promise is rejected.
     */
    function connectTo(id, options) {
        return Private.connectTo(id, options);
    }
    DefaultKernel.connectTo = connectTo;
    /**
     * Shut down a kernel by id.
     */
    function shutdown(id, options) {
        if (options === void 0) { options = {}; }
        return Private.shutdown(id, options);
    }
    DefaultKernel.shutdown = shutdown;
})(DefaultKernel = exports.DefaultKernel || (exports.DefaultKernel = {}));
exports.DefaultKernel = DefaultKernel;
/**
 * A private namespace for the Kernel.
 */
var Private;
(function (Private) {
    /**
     * A module private store for running kernels.
     */
    Private.runningKernels = [];
    /**
     * A module private store of kernel specs by base url.
     */
    Private.specs = Object.create(null);
    /**
     * Find a kernel by id.
     */
    function findById(id, options) {
        var kernel = algorithm_1.find(Private.runningKernels, function (value) {
            return (value.id === id);
        });
        if (kernel) {
            return Promise.resolve(kernel.model);
        }
        return getKernelModel(id, options).catch(function () {
            throw new Error("No running kernel with id: " + id);
        });
    }
    Private.findById = findById;
    /**
     * Get the cached kernel specs or fetch them.
     */
    function findSpecs(options) {
        var promise = Private.specs[options.baseUrl];
        if (promise) {
            return promise;
        }
        return getSpecs(options);
    }
    Private.findSpecs = findSpecs;
    /**
     * Fetch all of the kernel specs.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernelspecs).
     */
    function getSpecs(options) {
        if (options === void 0) { options = {}; }
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var url = utils.urlPathJoin(baseUrl, KERNELSPEC_SERVICE_URL);
        var ajaxSettings = utils.ajaxSettingsWithToken(options.ajaxSettings, options.token);
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        var promise = utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                throw utils.makeAjaxError(success);
            }
            try {
                return validate.validateSpecModels(success.data);
            }
            catch (err) {
                throw utils.makeAjaxError(success, err.message);
            }
        });
        Private.specs[baseUrl] = promise;
        return promise;
    }
    Private.getSpecs = getSpecs;
    /**
     * Fetch the running kernels.
     *
     * #### Notes
     * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.
     *
     * The promise is fulfilled on a valid response and rejected otherwise.
     */
    function listRunning(options) {
        if (options === void 0) { options = {}; }
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var url = utils.urlPathJoin(baseUrl, KERNEL_SERVICE_URL);
        var ajaxSettings = utils.ajaxSettingsWithToken(options.ajaxSettings, options.token);
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                throw utils.makeAjaxError(success);
            }
            if (!Array.isArray(success.data)) {
                throw utils.makeAjaxError(success, 'Invalid kernel list');
            }
            for (var i = 0; i < success.data.length; i++) {
                try {
                    validate.validateModel(success.data[i]);
                }
                catch (err) {
                    throw utils.makeAjaxError(success, err.message);
                }
            }
            return updateRunningKernels(success.data);
        }, onKernelError);
    }
    Private.listRunning = listRunning;
    /**
     * Update the running kernels based on new data from the server.
     */
    function updateRunningKernels(kernels) {
        algorithm_1.each(Private.runningKernels, function (kernel) {
            var updated = algorithm_1.find(kernels, function (model) {
                if (kernel.id === model.id) {
                    return true;
                }
            });
            // If kernel is no longer running on disk, emit dead signal.
            if (!updated && kernel.status !== 'dead') {
                kernel.terminated.emit(void 0);
                kernel.dispose();
            }
        });
        return kernels;
    }
    Private.updateRunningKernels = updateRunningKernels;
    /**
     * Start a new kernel.
     */
    function startNew(options) {
        options = options || {};
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var url = utils.urlPathJoin(baseUrl, KERNEL_SERVICE_URL);
        var ajaxSettings = utils.ajaxSettingsWithToken(options.ajaxSettings, options.token);
        ajaxSettings.method = 'POST';
        ajaxSettings.data = JSON.stringify({ name: options.name });
        ajaxSettings.dataType = 'json';
        ajaxSettings.contentType = 'application/json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 201) {
                throw utils.makeAjaxError(success);
            }
            validate.validateModel(success.data);
            options = utils.copy(options);
            options.name = success.data.name;
            return new DefaultKernel(options, success.data.id);
        }, onKernelError);
    }
    Private.startNew = startNew;
    /**
     * Connect to a running kernel.
     *
     * #### Notes
     * If the kernel was already started via `startNewKernel`, the existing
     * Kernel object info is used to create another instance.
     *
     * Otherwise, if `options` are given, we attempt to connect to the existing
     * kernel found by calling `listRunningKernels`.
     * The promise is fulfilled when the kernel is running on the server,
     * otherwise the promise is rejected.
     *
     * If the kernel was not already started and no `options` are given,
     * the promise is rejected.
     */
    function connectTo(id, options) {
        var kernel = algorithm_1.find(Private.runningKernels, function (value) {
            return value.id === id;
        });
        if (kernel) {
            return Promise.resolve(kernel.clone());
        }
        return getKernelModel(id, options).then(function (model) {
            options = utils.copy(options);
            options.name = model.name;
            return new DefaultKernel(options, id);
        }).catch(function () {
            throw new Error("No running kernel with id: " + id);
        });
    }
    Private.connectTo = connectTo;
    /**
     * Shut down a kernel by id.
     */
    function shutdown(id, options) {
        if (options === void 0) { options = {}; }
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var ajaxSettings = utils.ajaxSettingsWithToken(options.ajaxSettings, options.token);
        return shutdownKernel(id, baseUrl, ajaxSettings);
    }
    Private.shutdown = shutdown;
    /**
     * Restart a kernel.
     */
    function restartKernel(kernel, baseUrl, ajaxSettings) {
        if (kernel.status === 'dead') {
            return Promise.reject(new Error('Kernel is dead'));
        }
        var url = utils.urlPathJoin(baseUrl, KERNEL_SERVICE_URL, encodeURIComponent(kernel.id), 'restart');
        ajaxSettings = ajaxSettings || {};
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                throw utils.makeAjaxError(success);
            }
            try {
                validate.validateModel(success.data);
            }
            catch (err) {
                throw utils.makeAjaxError(success, err.message);
            }
        }, onKernelError);
    }
    Private.restartKernel = restartKernel;
    /**
     * Interrupt a kernel.
     */
    function interruptKernel(kernel, baseUrl, ajaxSettings) {
        if (kernel.status === 'dead') {
            return Promise.reject(new Error('Kernel is dead'));
        }
        var url = utils.urlPathJoin(baseUrl, KERNEL_SERVICE_URL, encodeURIComponent(kernel.id), 'interrupt');
        ajaxSettings = ajaxSettings || {};
        ajaxSettings.method = 'POST';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                throw utils.makeAjaxError(success);
            }
        }, onKernelError);
    }
    Private.interruptKernel = interruptKernel;
    /**
     * Delete a kernel.
     */
    function shutdownKernel(id, baseUrl, ajaxSettings) {
        var url = utils.urlPathJoin(baseUrl, KERNEL_SERVICE_URL, encodeURIComponent(id));
        ajaxSettings = ajaxSettings || {};
        ajaxSettings.method = 'DELETE';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 204) {
                throw utils.makeAjaxError(success);
            }
            killKernels(id);
        }, function (error) {
            if (error.xhr.status === 404) {
                var response = JSON.parse(error.xhr.responseText);
                console.warn(response['message']);
                killKernels(id);
            }
            else {
                return onKernelError(error);
            }
        });
    }
    Private.shutdownKernel = shutdownKernel;
    /**
     * Kill the kernels by id.
     */
    function killKernels(id) {
        algorithm_1.each(algorithm_1.toArray(Private.runningKernels), function (kernel) {
            if (kernel.id === id) {
                kernel.terminated.emit(void 0);
                kernel.dispose();
            }
        });
    }
    /**
     * Get a full kernel model from the server by kernel id string.
     */
    function getKernelModel(id, options) {
        options = options || {};
        var baseUrl = options.baseUrl || utils.getBaseUrl();
        var url = utils.urlPathJoin(baseUrl, KERNEL_SERVICE_URL, encodeURIComponent(id));
        var ajaxSettings = utils.ajaxSettingsWithToken(options.ajaxSettings, options.token);
        ajaxSettings.method = 'GET';
        ajaxSettings.dataType = 'json';
        ajaxSettings.cache = false;
        return utils.ajaxRequest(url, ajaxSettings).then(function (success) {
            if (success.xhr.status !== 200) {
                throw utils.makeAjaxError(success);
            }
            var data = success.data;
            try {
                validate.validateModel(data);
            }
            catch (err) {
                throw utils.makeAjaxError(success, err.message);
            }
            return data;
        }, Private.onKernelError);
    }
    Private.getKernelModel = getKernelModel;
    /**
     * Log the current kernel status.
     */
    function logKernelStatus(kernel) {
        switch (kernel.status) {
            case 'idle':
            case 'busy':
            case 'unknown':
                return;
            default:
                console.log("Kernel: " + kernel.status + " (" + kernel.id + ")");
                break;
        }
    }
    Private.logKernelStatus = logKernelStatus;
    /**
     * Handle an error on a kernel Ajax call.
     */
    function onKernelError(error) {
        var text = (error.throwError ||
            error.xhr.statusText ||
            error.xhr.responseText);
        var msg = "API request failed: " + text;
        console.error(msg);
        return Promise.reject(error);
    }
    Private.onKernelError = onKernelError;
    /**
     * Send a kernel message to the kernel and resolve the reply message.
     */
    function handleShellMessage(kernel, msg) {
        var future;
        try {
            future = kernel.sendShellMessage(msg, true);
        }
        catch (e) {
            return Promise.reject(e);
        }
        return new Promise(function (resolve, reject) {
            future.onReply = function (reply) {
                resolve(reply);
            };
        });
    }
    Private.handleShellMessage = handleShellMessage;
})(Private || (Private = {}));
