{"version":3,"file":"default.js","sourceRoot":"","sources":["../../../../../services/src/kernel/default.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;;;;;;;;;AAE3D,mDAE+B;AAE/B,iDAE6B;AAE7B,iDAE6B;AAE7B,mDAE8B;AAE9B,iDAE6B;AAE7B,wBAEY;AAEZ,+BAEgB;AAMhB,uCAEoB;AAEpB,mCAEkB;AAElB,uCACqB;AAErB,qCACoB;AAGpB;;GAEG;AACH,IAAM,kBAAkB,GAAG,aAAa,CAAC;AAEzC;;GAEG;AACH,IAAM,sBAAsB,GAAG,iBAAiB,CAAC;AAMjD;;GAEG;AACH;IAEE;;OAEG;IACH,uBAAY,OAAwB,EAAE,EAAU;QA+6BxC,QAAG,GAAG,EAAE,CAAC;QACT,UAAK,GAAG,EAAE,CAAC;QACX,YAAO,GAAkB,SAAS,CAAC;QACnC,cAAS,GAAG,EAAE,CAAC;QACf,gBAAW,GAAG,KAAK,CAAC;QACpB,eAAU,GAAG,KAAK,CAAC;QACnB,QAAG,GAAqB,IAAI,CAAC;QAC7B,cAAS,GAAG,EAAE,CAAC;QACf,oBAAe,GAAG,CAAC,CAAC;QACpB,sBAAiB,GAAG,CAAC,CAAC;QACtB,aAAQ,GAAG,KAAK,CAAC;QAIjB,oBAAe,GAAsF,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzH,UAAK,GAAoC,IAAI,CAAC;QAC9C,qBAAgB,GAA6B,EAAE,CAAC;QAGhD,mBAAc,GAAG,IAAI,kBAAM,CAAsB,IAAI,CAAC,CAAC;QACvD,kBAAa,GAAG,IAAI,kBAAM,CAAoC,IAAI,CAAC,CAAC;QACpE,sBAAiB,GAAG,IAAI,kBAAM,CAA+B,IAAI,CAAC,CAAC;QACnE,0BAAqB,GAAG,IAAI,GAAG,EAAoB,CAAC;QACpD,uBAAkB,GAAG,IAAI,GAAG,EAAoB,CAAC;QACjD,UAAK,GAAG,cAAmB,CAAC,CAAC;QAt8BnC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QAChF,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,IAAI,gBAAI,EAAE,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;QACxC,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAA+B,CAAC;QACvD,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAiC,CAAC;QAC9D,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAwB,CAAC;QAC9C,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,IAAI,kBAAM,CAAa,IAAI,CAAC,CAAC;QAC/C,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAeD,sBAAI,wCAAa;QAHjB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC7B,CAAC;;;OAAA;IAKD,sBAAI,uCAAY;QAHhB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAKD,sBAAI,2CAAgB;QAHpB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAChC,CAAC;;;OAAA;IAKD,sBAAI,6BAAE;QAHN;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;QAClB,CAAC;;;OAAA;IAKD,sBAAI,+BAAI;QAHR;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;;;OAAA;IAKD,sBAAI,gCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;QAC1C,CAAC;;;OAAA;IAKA,sBAAI,mCAAQ;QAHb;;WAEG;aACF;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAKF,sBAAI,mCAAQ;QAHZ;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAKD,sBAAI,iCAAM;QAHV;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACtB,CAAC;;;OAAA;IAKD,sBAAI,qCAAU;QAHd;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;;;OAAA;IAQD,sBAAI,+BAAI;QANR;;;;;WAKG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;;;OAAA;IAKD,sBAAI,kCAAO;QAHX;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;;;OAAA;IAKD,sBAAI,gCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;QACzC,CAAC;;;OAAA;IAED;;;;OAIG;IACH,+BAAO,GAAP;QAAA,iBAQC;QAPC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC3B,CAAC;QACD,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YACnE,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,6BAAK,GAAL;QACE,MAAM,CAAC,IAAI,aAAa,CAAC;YACvB,IAAI,EAAE,IAAI,CAAC,KAAK;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,cAAc,EAAE,IAAI,CAAC,cAAc;SACpC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACf,CAAC;IAED;;OAEG;IACH,+BAAO,GAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,GAAG;YAChC,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,GAAG;YAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;QACnC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAChC,oBAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QACrD,kBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED;;;;;;;;;;;;;;;;;OAiBG;IACH,wCAAgB,GAAhB,UAAiB,GAAgC,EAAE,WAAiB,EAAE,aAAkB;QAAxF,iBAoCC;QApCkD,4BAAA,EAAA,mBAAiB;QAAE,8BAAA,EAAA,oBAAkB;QACtF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,CAAC;QACD,IAAI,MAAM,GAAG,IAAI,4BAAmB,CAAC;YACnC,IAAI,KAAK,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;YAC9B,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,wCAAwC;YACxC,IAAI,UAAU,GAAG,KAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACpD,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC;YACT,CAAC;YACD,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;gBAC1B,IAAI,MAAM,GAAG,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACvD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,IAAI,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;oBAChC,EAAE,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;wBACf,MAAM,CAAC;oBACT,CAAC;oBACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;wBACxB,KAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;oBAC/C,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;wBACtB,KAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;oBACpD,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;YACH,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACxC,CAAC,EAAE,GAAG,EAAE,WAAW,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAED;;;;;;;;;;;;OAYG;IACH,iCAAS,GAAT;QACE,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC5D,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,+BAAO,GAAP;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QACjC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC1D,CAAC;IAED;;;;;OAKG;IACH,iCAAS,GAAT;QACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;YACtB,4DAA4D;YAC5D,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;YAC7B,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;YAC9B,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;YAC9B,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;YAChC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;YACjB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAClB,CAAC;QACD,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;QACnC,IAAI,CAAC,aAAa,EAAE,CAAC;QACrB,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;IACzC,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,gCAAQ,GAAR;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;YAC3B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrD,CAAC;QACD,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;;;;OAQG;IACH,yCAAiB,GAAjB;QAAA,iBAYC;QAXC,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,qBAAqB;YAC9B,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;QACpD,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YACrD,KAAI,CAAC,KAAK,GAAI,KAAqC,CAAC,OAAO,CAAC;YAC5D,MAAM,CAAC,KAAoC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;OAQG;IACH,uCAAe,GAAf,UAAgB,OAAuC;QACrD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,kBAAkB;YAC3B,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAA6C,CAAC;IAC3F,CAAC;IAED;;;;;;;;OAQG;IACH,sCAAc,GAAd,UAAe,OAAsC;QACnD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,iBAAiB;YAC1B,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAA4C,CAAC;IAC1F,CAAC;IAED;;;;;;;;OAQG;IACH,sCAAc,GAAd,UAAe,OAAsC;QACnD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,iBAAiB;YAC1B,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAA4C,CAAC;IAC1F,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,sCAAc,GAAd,UAAe,OAAsC,EAAE,aAA6B;QAA7B,8BAAA,EAAA,oBAA6B;QAClF,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,iBAAiB;YAC1B,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,QAAQ,GAAe;YACzB,MAAM,EAAG,KAAK;YACd,aAAa,EAAG,IAAI;YACpB,gBAAgB,EAAG,EAAE;YACrB,WAAW,EAAG,IAAI;YAClB,aAAa,EAAG,KAAK;SACtB,CAAC;QACF,OAAO,gBAAQ,QAAQ,EAAK,OAAO,CAAE,CAAC;QACtC,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;IACzD,CAAC;IAED;;;;;;;;OAQG;IACH,yCAAiB,GAAjB,UAAkB,OAAyC;QACzD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,qBAAqB;YAC9B,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAA+C,CAAC;IAC7F,CAAC;IAED;;;;;;OAMG;IACH,uCAAe,GAAf,UAAgB,OAAuC;QACrD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,mBAAmB;YAC5B,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAC7D,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,EAAE,GAAG,CAA6C,CAAC;IAC3F,CAAC;IAED;;;;;OAKG;IACH,sCAAc,GAAd,UAAe,OAAkC;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;QACD,IAAI,OAAO,GAA2B;YACpC,OAAO,EAAE,aAAa;YACtB,OAAO,EAAE,OAAO;YAChB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,OAAO,EAAE,IAAI,CAAC,SAAS;SACxB,CAAC;QACF,IAAI,GAAG,GAAG,wBAAa,CAAC,aAAa,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QACxD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YAChC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;IAED;;;;;;;;;;;;;;;;;;OAkBG;IACH,2CAAmB,GAAnB,UAAoB,KAAa,EAAE,IAAmD;QAAtF,iBAWC;QAVC,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACvD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;QACD,MAAM,CAAC,IAAI,+BAAkB,CAAC;YAC5B,MAAM,GAAG,KAAI,CAAC,QAAQ,IAAI,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YACnD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,0CAAkB,GAAlB,UAAmB,UAAkB,EAAE,QAAuE;QAA9G,iBAOC;QANC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;QAC5C,MAAM,CAAC,IAAI,+BAAkB,CAAC;YAC5B,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBACrB,OAAO,KAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,qCAAa,GAAb,UAAc,UAAkB,EAAE,MAAe;QAAjD,iBAUC;QATC,IAAI,EAAE,GAAG,MAAM,IAAI,gBAAI,EAAE,CAAC;QAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,kBAAW,CAC/C,UAAU,EACV,EAAE,EACF,IAAI,EACJ,cAAQ,KAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CACpC,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,qCAAa,GAArB;QAAA,iBA8BC;QA7BC,IAAI,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC;QACnC,IAAI,UAAU,GAAG,kBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,kBAAkB,EAClC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAE3D,oDAAoD;QACpD,IAAI,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,8BAA8B,EAAE,IAAI,CAAC,CAAC;QACvE,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAC;QAE5C,IAAI,GAAG,GAAG,kBAAM,CAAC,IAAI,CACjB,UAAU,EACV,sBAAsB,GAAG,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAC9D,CAAC;QACF,qCAAqC;QACrC,IAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC3B,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;YACjB,GAAG,GAAG,GAAG,IAAG,YAAU,kBAAkB,CAAC,KAAK,CAAG,CAAA,CAAC;QACpD,CAAC;QAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,2BAAe,EAAQ,CAAC;QACtD,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAEnC,gDAAgD;QAChD,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,aAAa,CAAC;QAEpC,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,UAAC,GAAiB,IAAO,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,UAAC,GAAU,IAAO,KAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,UAAC,GAAU,IAAO,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,UAAC,GAAU,IAAO,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;;OAEG;IACK,iCAAS,GAAjB,UAAkB,GAAU;QAA5B,iBAaC;QAZC,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;QAC3B,oCAAoC;QACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,kCAAkC;QAClC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QAChC,2DAA2D;QAC3D,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC;YAC5B,KAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG;YACV,KAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED;;OAEG;IACK,oCAAY,GAApB,UAAqB,GAAiB;QACpC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,qDAAqD;YACrD,MAAM,CAAC;QACT,CAAC;QACD,IAAI,GAAG,GAAG,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1C,IAAI,CAAC;YACH,QAAQ,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,sBAAoB,KAAK,CAAC,OAAS,CAAC,CAAC;YACnD,MAAM,CAAC;QACT,CAAC;QAED,IAAI,OAAO,GAAG,KAAK,CAAC;QAEpB,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,IAAI,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC9B,KAAK,cAAc,CAAC;gBACpB,KAAK,qBAAqB,CAAC;gBAC3B,KAAK,gBAAgB;oBACnB,gEAAgE;oBAChE,IAAI,SAAS,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAe,CAAC;oBAC5D,IAAI,SAAS,GAAG,SAAS,CAAC,YAAY,CAAW,CAAC;oBAClD,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBACd,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;oBAClD,CAAC;oBACD,KAAK,CAAC;gBACR;oBACE,KAAK,CAAC;YACR,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;YAClC,IAAI,YAAY,GAAG,GAAG,CAAC,aAAsC,CAAC;YAC9D,IAAI,MAAM,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YACrE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,mEAAmE;gBACnE,IAAI,KAAK,GAAG,YAAY,CAAC,OAAO,KAAK,IAAI,CAAC,QAAQ,CAAC;gBACnD,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,KAAK,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC;oBACrC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC,CAAC;YAC5B,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAC9B,KAAK,QAAQ;oBACX,IAAI,CAAC,aAAa,CAAE,GAAgC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;oBAC9E,KAAK,CAAC;gBACR,KAAK,WAAW;oBACd,IAAI,CAAC,eAAe,CAAC,GAAiC,CAAC,CAAC;oBACxD,KAAK,CAAC;gBACR,KAAK,UAAU;oBACb,IAAI,CAAC,cAAc,CAAC,GAAgC,CAAC,CAAC;oBACtD,KAAK,CAAC;gBACR,KAAK,YAAY;oBACf,IAAI,CAAC,gBAAgB,CAAC,GAAkC,CAAC,CAAC;oBAC1D,KAAK,CAAC;gBACR;oBACE,KAAK,CAAC;YACR,CAAC;YACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAkC,CAAC,CAAC;QAC9D,CAAC;IACH,CAAC;IAED;;;;OAIG;IACK,wCAAgB,GAAxB,UAAyB,SAAiB,EAAE,GAA2B;QAAvE,iBA+CC;QA9CC,IAAI,KAAK,GAAI,GAAG,CAAC,aAAuC,CAAC,MAAM,CAAC;QAChE,IAAI,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC1D,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;YACd,qEAAqE;YACrE,mDAAmD;YACnD,IAAI,WAAS,GAA2B;gBACtC,MAAM,EAAE,mBAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAA0B;gBAC7D,aAAa,EAAE,mBAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAA2B;gBAC5E,QAAQ,EAAE,mBAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC;gBACxC,OAAO,EAAE,mBAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC;gBACtC,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE;aAChD,CAAC;YACD,WAAS,CAAC,MAAc,CAAC,QAAQ,GAAG,qBAAqB,CAAC;YAE3D,SAAS,CAAC,GAAG,CAAC,UAAC,QAAQ;gBACrB,IAAI,MAAM,GAAG,KAAI,CAAC,QAAQ,IAAI,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC1D,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC,SAAS,CAAC,WAAS,CAAC,CAAC;gBAC9B,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAED,0CAA0C;QAC1C,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,KAAK,qBAAqB,CAAC,CAAC,CAAC;YAClD,uDAAuD;YACvD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,8DAA8D;QAC9D,8CAA8C;QAC9C,SAAS,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;QAC5D,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACpC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,CAAC;QACD,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAErD,kDAAkD;QAClD,IAAI,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAC1D,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,CAAC;QACD,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QAE/C,8CAA8C;QAC9C,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAED;;OAEG;IACK,kCAAU,GAAlB,UAAmB,GAAU;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC;QACT,CAAC;QACD,4DAA4D;QAC5D,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;QAC9B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;QAEhB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAClD,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;YACnC,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAClD,OAAO,CAAC,KAAK,CAAC,mCAAmC,GAAG,OAAO,GAAG,WAAW,CAAC,CAAC;YAC3E,UAAU,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,CAAC;YACzD,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC3B,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC,CAAC;QAC9E,CAAC;IACH,CAAC;IAED;;OAEG;IACK,oCAAY,GAApB;QACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;QACnB,CAAC;QACD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;IAClB,CAAC;IAED;;OAEG;IACK,qCAAa,GAArB,UAAsB,MAAqB;QACzC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,KAAK,UAAU,CAAC;YAChB,KAAK,MAAM,CAAC;YACZ,KAAK,MAAM,CAAC;YACZ,KAAK,WAAW;gBACd,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,KAAK,CAAC;YACR,KAAK,YAAY,CAAC;YAClB,KAAK,cAAc,CAAC;YACpB,KAAK,MAAM;gBACT,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,KAAK,CAAC;YACR;gBACE,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC;gBAChD,MAAM,CAAC;QACT,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;YACtB,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;gBACtB,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAED;;OAEG;IACK,oCAAY,GAApB;QACE,qCAAqC;QACrC,8DAA8D;QAC9D,gCAAgC;QAChC,OAAO,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACpD,IAAI,GAAG,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACnB,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;QAChC,CAAC;IACH,CAAC;IAED;;OAEG;IACK,mCAAW,GAAnB;QACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,GAAG;YAChC,MAAM,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAC,IAAI,EAAE,GAAG;YAC5B,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,QAAQ,GAAG,IAAI,GAAG,EAA+B,CAAC;QACvD,IAAI,CAAC,aAAa,GAAG,IAAI,GAAG,EAAiC,CAAC;QAC9D,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAwB,CAAC;QAC9C,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;QACnC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC;IAED;;OAEG;IACK,uCAAe,GAAvB,UAAwB,GAA+B;QAAvD,iBA+BC;QA9BC,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QACD,IAAI,OAAO,GAAG,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,EAAE,OAAO,CAAC,aAAa,EACzE,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;YAC/B,IAAI,IAAI,GAAG,IAAI,kBAAW,CACxB,OAAO,CAAC,WAAW,EACnB,OAAO,CAAC,OAAO,EACf,KAAI,EACJ,cAAQ,KAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CACjD,CAAC;YACF,IAAI,QAAc,CAAC;YACnB,IAAI,CAAC;gBACH,QAAQ,GAAG,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YAC/B,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;gBAC5C,MAAK,CAAC,CAAC,CAAC,CAAC;YACX,CAAC;YACD,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;gBACpC,EAAE,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC,CAAC;oBACpB,MAAM,CAAC;gBACT,CAAC;gBACD,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACvC,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;gBACnC,MAAM,CAAC,IAAI,CAAC;YACd,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACnD,CAAC;IAED;;OAEG;IACK,wCAAgB,GAAxB,UAAyB,GAAgC;QAAzD,iBA0BC;QAzBC,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC1B,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,OAAO,CAAC,KAAK,CAAC,6BAA6B,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;gBAC/D,MAAM,CAAC;YACT,CAAC;YACD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,UAAC,IAAI;YAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,MAAM,CAAC;YACT,CAAC;YACD,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAClC,IAAI,CAAC;gBACH,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;gBAC3B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;oBACZ,OAAO,CAAC,GAAG,CAAC,CAAC;gBACf,CAAC;gBACA,IAAoB,CAAC,OAAO,EAAE,CAAC;YAClC,CAAC;YAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACX,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACK,sCAAc,GAAtB,UAAuB,GAA8B;QACnD,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;QAC1B,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACV,yDAAyD;gBACzD,MAAM,CAAC;YACT,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBACvB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACV,KAAK,CAAC,GAAG,CAAC,CAAC;gBACb,CAAC;YACH,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,UAAC,IAAI;gBAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACV,MAAM,CAAC;gBACT,CAAC;gBACD,IAAI,CAAC;oBACH,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;oBACvB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;wBACV,KAAK,CAAC,GAAG,CAAC,CAAC;oBACb,CAAC;gBACH,CAAC;gBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACX,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;gBAClE,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACK,uCAAe,GAAvB,UAAwB,MAAc;QACpC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IA2BH,oBAAC;AAAD,CAAC,AA78BD,IA68BC;AA58BK,sCAAa;AA+8BnB;;GAEG;AACH,WACU,aAAa;IACrB;;;;;;;;;;;;;;;;;OAiBG;IACH,kBACkB,EAAU,EAAE,QAAqC;QACjE,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IAFQ,sBAAQ,WAEhB,CAAA;IAED;;;;;;;;;OASG;IACH,kBACkB,QAAqC;QACrD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAFQ,sBAAQ,WAEhB,CAAA;IAED;;;;;;;;;;;OAWG;IACH,qBACqB,QAAqC;QACxD,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAFQ,yBAAW,cAEnB,CAAA;IAED;;;;;;;;;;;;;;;OAeG;IACH,kBACkB,OAAwB;QACxC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACnC,CAAC;IAFQ,sBAAQ,WAEhB,CAAA;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,mBACmB,EAAU,EAAE,QAAqC;QAClE,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IACzC,CAAC;IAFQ,uBAAS,YAEjB,CAAA;IAED;;;;;;;;OAQG;IACH,kBACkB,EAAU,EAAE,QAAqC;QACjE,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAFQ,sBAAQ,WAEhB,CAAA;AACH,CAAC,EApHS,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAoHtB;AAvkCK,sCAAa;AA0kCnB;;GAEG;AACH,IAAU,OAAO,CA6XhB;AA7XD,WAAU,OAAO;IACf;;OAEG;IAEG,sBAAc,GAAoB,EAAE,CAAC;IAE3C;;OAEG;IAEG,aAAK,GAAmD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAElF;;OAEG;IACH,kBACkB,EAAU,EAAE,QAAqC;QACjE,IAAI,MAAM,GAAG,gBAAI,CAAC,QAAA,cAAc,EAAE,UAAA,KAAK;YACrC,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;QACD,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,KAAK,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,gCAA8B,EAAI,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC;IAVQ,gBAAQ,WAUhB,CAAA;IAED;;OAEG;IACH,mBACmB,QAAqC;QACtD,QAAQ,GAAG,QAAQ,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,OAAO,GAAG,QAAA,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACtC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,MAAM,CAAC,OAAO,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IAPQ,iBAAS,YAOjB,CAAA;IAED;;;;;OAKG;IACH,kBACkB,QAAqC;QACrD,QAAQ,GAAG,QAAQ,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,OAAO,GAAG;YACZ,GAAG,EAAE,kBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,sBAAsB,CAAC;YAC1D,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,KAAK;SACb,CAAC;QACF,IAAI,OAAO,GAAG,oBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YACzE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YACD,IAAI,CAAC;gBACH,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACpD,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACb,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1D,CAAC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAnBQ,gBAAQ,WAmBhB,CAAA;IAED;;;;;;;OAOG;IACH,qBACqB,QAAqC;QACxD,QAAQ,GAAG,QAAQ,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,OAAO,GAAG;YACZ,GAAG,EAAE,kBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,kBAAkB,CAAC;YACtD,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,KAAK;SACb,CAAC;QACF,MAAM,CAAC,oBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YAClE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClC,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC;YACpE,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC9C,IAAI,CAAC;oBACH,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,CAAC;gBAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACb,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;gBAC1D,CAAC;YACH,CAAC;YACD,MAAM,CAAC,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC,EAAE,aAAa,CAAC,CAAC;IACpB,CAAC;IAvBQ,mBAAW,cAuBnB,CAAA;IAED;;OAEG;IACH,8BAC8B,OAAwB;QACpD,gBAAI,CAAC,QAAA,cAAc,EAAE,UAAA,MAAM;YACzB,IAAI,OAAO,GAAG,gBAAI,CAAC,OAAO,EAAE,UAAA,KAAK;gBAC/B,MAAM,CAAC,MAAM,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC;YAChC,CAAC,CAAC,CAAC;YACH,4DAA4D;YAC5D,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;gBACzC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAZQ,4BAAoB,uBAY5B,CAAA;IAED;;OAEG;IACH,kBACkB,OAAwB;QACxC,IAAI,QAAQ,GAAG,OAAO,CAAC,cAAc,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACzE,IAAI,OAAO,GAAG;YACZ,GAAG,EAAE,kBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,kBAAkB,CAAC;YACtD,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC;YAC5C,WAAW,EAAE,kBAAkB;YAC/B,KAAK,EAAE,KAAK;SACb,CAAC;QACF,MAAM,CAAC,oBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YAClE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YACD,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,aAAa,cACnB,OAAO,IACV,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,EACxB,cAAc,EAAE,QAAQ,KACvB,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACvB,CAAC,EAAE,aAAa,CAAC,CAAC;IACpB,CAAC;IApBQ,gBAAQ,WAoBhB,CAAA;IAED;;;;;;;;;;;;;;OAcG;IACH,mBACmB,EAAU,EAAE,QAAqC;QAClE,QAAQ,GAAG,QAAQ,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,MAAM,GAAG,gBAAI,CAAC,QAAA,cAAc,EAAE,UAAA,KAAK;YACrC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,KAAK;YAC5C,MAAM,CAAC,IAAI,aAAa,CAAC;gBACvB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,cAAc,EAAE,QAAQ;aACvB,EAAE,EAAE,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,KAAK,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,gCAA8B,EAAI,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACL,CAAC;IAjBQ,iBAAS,YAiBjB,CAAA;IAED;;OAEG;IACH,uBACuB,MAAsB,EAAE,QAAqC;QAClF,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrD,CAAC;QACD,QAAQ,GAAG,QAAQ,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,GAAG,GAAG,kBAAM,CAAC,IAAI,CACnB,QAAQ,CAAC,OAAO,EAAE,kBAAkB,EACpC,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,SAAS,CACzC,CAAC;QACF,IAAI,OAAO,GAAG;YACZ,GAAG,KAAA;YACH,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,KAAK;SACb,CAAC;QACF,MAAM,CAAC,oBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YAClE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YACD,IAAI,CAAC;gBACH,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACxC,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACb,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1D,CAAC;QACH,CAAC,EAAE,aAAa,CAAC,CAAC;IACpB,CAAC;IAxBQ,qBAAa,gBAwBrB,CAAA;IAED;;OAEG;IACH,yBACyB,MAAsB,EAAE,QAAqC;QACpF,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC;YAC7B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACrD,CAAC;QACD,QAAQ,GAAG,QAAQ,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,GAAG,GAAG,kBAAM,CAAC,IAAI,CACnB,QAAQ,CAAC,OAAO,EAAE,kBAAkB,EACpC,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,WAAW,CAC3C,CAAC;QACF,IAAI,OAAO,GAAG;YACZ,GAAG,KAAA;YACH,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,KAAK;SACb,CAAC;QACF,MAAM,CAAC,oBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YAClE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;QACH,CAAC,EAAE,aAAa,CAAC,CAAC;IACpB,CAAC;IAnBQ,uBAAe,kBAmBvB,CAAA;IAED;;OAEG;IACH,wBACwB,EAAU,EAAE,QAAqC;QACvE,QAAQ,GAAG,QAAQ,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,GAAG,GAAG,kBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,kBAAkB,EAC9B,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;QACpD,IAAI,OAAO,GAAG;YACZ,GAAG,KAAA;YACH,MAAM,EAAE,QAAQ;YAChB,KAAK,EAAE,KAAK;SACb,CAAC;QACF,MAAM,CAAC,oBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YAClE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YACD,WAAW,CAAC,EAAE,CAAC,CAAC;QAClB,CAAC,EAAE,UAAA,KAAK;YACN,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAC7B,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAQ,CAAC;gBACzD,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;gBAClC,WAAW,CAAC,EAAE,CAAC,CAAC;YAClB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAvBQ,sBAAc,iBAuBtB,CAAA;IAED;;OAEG;IACH,qBAAqB,EAAU;QAC7B,gBAAI,CAAC,mBAAO,CAAC,QAAA,cAAc,CAAC,EAAE,UAAA,MAAM;YAClC,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,wBACwB,EAAU,EAAE,QAAqC;QACvE,QAAQ,GAAG,QAAQ,IAAI,oBAAgB,CAAC,YAAY,EAAE,CAAC;QACvD,IAAI,GAAG,GAAG,kBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,kBAAkB,EAC9B,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;QACpD,IAAI,OAAO,GAAG;YACZ,GAAG,KAAA;YACH,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,KAAK;SACb,CAAC;QACF,MAAM,CAAC,oBAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ;YAClE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChC,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YACD,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAqB,CAAC;YAC1C,IAAI,CAAC;gBACH,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC/B,CAAC;YAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACb,MAAM,oBAAgB,CAAC,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1D,CAAC;YACD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;IAC5B,CAAC;IArBQ,sBAAc,iBAqBtB,CAAA;IAED;;OAEG;IACH,yBACyB,MAAsB;QAC7C,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YACxB,KAAK,MAAM,CAAC;YACZ,KAAK,MAAM,CAAC;YACZ,KAAK,SAAS;gBACZ,MAAM,CAAC;YACT;gBACE,OAAO,CAAC,GAAG,CAAC,aAAW,MAAM,CAAC,MAAM,UAAK,MAAM,CAAC,EAAE,MAAG,CAAC,CAAC;gBACvD,KAAK,CAAC;QACR,CAAC;IACH,CAAC;IAVQ,uBAAe,kBAUvB,CAAA;IAED;;OAEG;IACH,uBACuB,KAA8B;QACnD,IAAI,IAAI,GAAG,CAAC,KAAK,CAAC,OAAO;YACb,KAAK,CAAC,GAAG,CAAC,UAAU;YACpB,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACpC,IAAI,GAAG,GAAG,yBAAuB,IAAM,CAAC;QACxC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAPQ,qBAAa,gBAOrB,CAAA;IAED;;OAEG;IACH,4BAC4B,MAAsB,EAAE,GAAgC;QAClF,IAAI,MAAsB,CAAC;QAC3B,IAAI,CAAC;YACH,MAAM,GAAG,MAAM,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC;QACD,MAAM,CAAC,IAAI,OAAO,CAAC,UAAA,OAAO,IAAM,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IARQ,0BAAkB,qBAQ1B,CAAA;IAED;;;;;;OAMG;IACH,oBACoB,IAAY,EAAE,UAA8B,EAAE,QAAiC;QACjG,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,+CAA+C;YAC/C,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC;oBACrC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;gBACzC,CAAC;gBACD,SAAS,CAAC,CAAC,UAAU,CAAC,EAAE,UAAC,GAAQ;oBAC/B,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;wBACzB,IAAI,GAAG,GAAG,aAAW,IAAI,+BAA0B,UAAU,MAAG,CAAC;wBACjE,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;oBACzB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;oBACrB,CAAC;gBACH,CAAC,EAAE,MAAM,CAAC,CAAC;YACb,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC1B,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,IAAI,KAAK,CAAC,aAAW,IAAI,4BAAyB,CAAC,CAAC,CAAC;gBAC9D,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAvBQ,kBAAU,aAuBlB,CAAA;IAAA,CAAC;AACJ,CAAC,EA7XS,OAAO,KAAP,OAAO,QA6XhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  URLExt, uuid\n} from '@jupyterlab/coreutils';\n\nimport {\n  ArrayExt, each, find, toArray\n} from '@phosphor/algorithm';\n\nimport {\n  JSONExt, JSONObject, PromiseDelegate\n} from '@phosphor/coreutils';\n\nimport {\n  DisposableDelegate, IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  ServerConnection\n} from '..';\n\nimport {\n  CommHandler\n} from './comm';\n\nimport {\n  Kernel\n} from './kernel';\n\nimport {\n  KernelMessage\n} from './messages';\n\nimport {\n  KernelFutureHandler\n} from './future';\n\nimport * as serialize\n  from './serialize';\n\nimport * as validate\n  from './validate';\n\n\n/**\n * The url for the kernel service.\n */\nconst KERNEL_SERVICE_URL = 'api/kernels';\n\n/**\n * The url for the kernelspec service.\n */\nconst KERNELSPEC_SERVICE_URL = 'api/kernelspecs';\n\n// Stub for requirejs.\ndeclare var requirejs: any;\n\n\n/**\n * Implementation of the Kernel object\n */\nexport\nclass DefaultKernel implements Kernel.IKernel {\n  /**\n   * Construct a kernel object.\n   */\n  constructor(options: Kernel.IOptions, id: string) {\n    this._name = options.name;\n    this._id = id;\n    this.serverSettings = options.serverSettings || ServerConnection.makeSettings();\n    this._clientId = options.clientId || uuid();\n    this._username = options.username || '';\n    this._futures = new Map<string, KernelFutureHandler>();\n    this._commPromises = new Map<string, Promise<Kernel.IComm>>();\n    this._comms = new Map<string, Kernel.IComm>();\n    this._createSocket();\n    this.terminated = new Signal<this, void>(this);\n    Private.runningKernels.push(this);\n  }\n\n  /**\n   * A signal emitted when the kernel is shut down.\n   */\n  readonly terminated: Signal<this, void>;\n\n  /**\n   * The server settings for the kernel.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * A signal emitted when the kernel status changes.\n   */\n  get statusChanged(): ISignal<this, Kernel.Status> {\n    return this._statusChanged;\n  }\n\n  /**\n   * A signal emitted for iopub kernel messages.\n   */\n  get iopubMessage(): ISignal<this, KernelMessage.IIOPubMessage> {\n    return this._iopubMessage;\n  }\n\n  /**\n   * A signal emitted for unhandled kernel message.\n   */\n  get unhandledMessage(): ISignal<this, KernelMessage.IMessage> {\n    return this._unhandledMessage;\n  }\n\n  /**\n   * The id of the server-side kernel.\n   */\n  get id(): string {\n    return this._id;\n  }\n\n  /**\n   * The name of the server-side kernel.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Get the model associated with the kernel.\n   */\n  get model(): Kernel.IModel {\n    return { name: this.name, id: this.id };\n  }\n\n  /**\n   * The client username.\n   */\n   get username(): string {\n     return this._username;\n   }\n\n  /**\n   * The client unique id.\n   */\n  get clientId(): string {\n    return this._clientId;\n  }\n\n  /**\n   * The current status of the kernel.\n   */\n  get status(): Kernel.Status {\n    return this._status;\n  }\n\n  /**\n   * Test whether the kernel has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * The cached kernel info.\n   *\n   * #### Notes\n   * This value will be null until the kernel is ready.\n   */\n  get info(): KernelMessage.IInfoReply | null {\n    return this._info;\n  }\n\n  /**\n   * Test whether the kernel is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * A promise that is fulfilled when the kernel is ready.\n   */\n  get ready(): Promise<void> {\n    return this._connectionPromise.promise;\n  }\n\n  /**\n   * Get the kernel spec.\n   *\n   * @returns A promise that resolves with the kernel spec.\n   */\n  getSpec(): Promise<Kernel.ISpecModel> {\n    if (this._specPromise) {\n      return this._specPromise;\n    }\n    this._specPromise = Private.findSpecs(this.serverSettings).then(specs => {\n      return specs.kernelspecs[this._name];\n    });\n    return this._specPromise;\n  }\n\n  /**\n   * Clone the current kernel with a new clientId.\n   */\n  clone(): Kernel.IKernel {\n    return new DefaultKernel({\n      name: this._name,\n      username: this._username,\n      serverSettings: this.serverSettings\n    }, this._id);\n  }\n\n  /**\n   * Dispose of the resources held by the kernel.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    this._status = 'dead';\n    this._clearSocket();\n    this._futures.forEach((future, key) => {\n      future.dispose();\n    });\n    this._comms.forEach((comm, key) => {\n      comm.dispose();\n    });\n    this._displayIdToParentIds.clear();\n    this._msgIdToDisplayIds.clear();\n    ArrayExt.removeFirstOf(Private.runningKernels, this);\n    Signal.clearData(this);\n  }\n\n  /**\n   * Send a shell message to the kernel.\n   *\n   * #### Notes\n   * Send a message to the kernel's shell channel, yielding a future object\n   * for accepting replies.\n   *\n   * If `expectReply` is given and `true`, the future is disposed when both a\n   * shell reply and an idle status message are received. If `expectReply`\n   * is not given or is `false`, the future is resolved when an idle status\n   * message is received.\n   * If `disposeOnDone` is not given or is `true`, the Future is disposed at this point.\n   * If `disposeOnDone` is given and `false`, it is up to the caller to dispose of the Future.\n   *\n   * All replies are validated as valid kernel messages.\n   *\n   * If the kernel status is `dead`, this will throw an error.\n   */\n  sendShellMessage(msg: KernelMessage.IShellMessage, expectReply=false, disposeOnDone=true): Kernel.IFuture {\n    if (this.status === 'dead') {\n      throw new Error('Kernel is dead');\n    }\n    if (!this._isReady || !this._ws) {\n      this._pendingMessages.push(msg);\n    } else {\n      this._ws.send(serialize.serialize(msg));\n    }\n    let future = new KernelFutureHandler(() => {\n      let msgId = msg.header.msg_id;\n      this._futures.delete(msgId);\n      // Remove stored display id information.\n      let displayIds = this._msgIdToDisplayIds.get(msgId);\n      if (!displayIds) {\n        return;\n      }\n      displayIds.forEach(displayId => {\n        let msgIds = this._displayIdToParentIds.get(displayId);\n        if (msgIds) {\n          let idx = msgIds.indexOf(msgId);\n          if (idx === -1) {\n            return;\n          }\n          if (msgIds.length === 1) {\n            this._displayIdToParentIds.delete(displayId);\n          } else {\n            msgIds.splice(idx, 1);\n            this._displayIdToParentIds.set(displayId, msgIds);\n          }\n        }\n      });\n      this._msgIdToDisplayIds.delete(msgId);\n    }, msg, expectReply, disposeOnDone, this);\n    this._futures.set(msg.header.msg_id, future);\n    return future;\n  }\n\n  /**\n   * Interrupt a kernel.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   *\n   * It is assumed that the API call does not mutate the kernel id or name.\n   *\n   * The promise will be rejected if the kernel status is `Dead` or if the\n   * request fails or the response is invalid.\n   */\n  interrupt(): Promise<void> {\n    return Private.interruptKernel(this, this.serverSettings);\n  }\n\n  /**\n   * Restart a kernel.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n   *\n   * Any existing Future or Comm objects are cleared.\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   *\n   * It is assumed that the API call does not mutate the kernel id or name.\n   *\n   * The promise will be rejected if the request fails or the response is\n   * invalid.\n   */\n  restart(): Promise<void> {\n    this._clearState();\n    this._updateStatus('restarting');\n    return Private.restartKernel(this, this.serverSettings);\n  }\n\n  /**\n   * Reconnect to a disconnected kernel.\n   *\n   * #### Notes\n   * Used when the websocket connection to the kernel is lost.\n   */\n  reconnect(): Promise<void> {\n    this._isReady = false;\n    if (this._ws !== null) {\n      // Clear the websocket event handlers and the socket itself.\n      this._ws.onopen = this._noOp;\n      this._ws.onclose = this._noOp;\n      this._ws.onerror = this._noOp;\n      this._ws.onmessage = this._noOp;\n      this._ws.close();\n      this._ws = null;\n    }\n    this._updateStatus('reconnecting');\n    this._createSocket();\n    return this._connectionPromise.promise;\n  }\n\n  /**\n   * Shutdown a kernel.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels).\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   *\n   * On a valid response, closes the websocket and disposes of the kernel\n   * object, and fulfills the promise.\n   *\n   * The promise will be rejected if the kernel status is `Dead` or if the\n   * request fails or the response is invalid.\n   */\n  shutdown(): Promise<void> {\n    if (this.status === 'dead') {\n      return Promise.reject(new Error('Kernel is dead'));\n    }\n    this._clearState();\n    this._clearSocket();\n    return Private.shutdownKernel(this.id, this.serverSettings);\n  }\n\n  /**\n   * Send a `kernel_info_request` message.\n   *\n   * #### Notes\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#kernel-info).\n   *\n   * Fulfills with the `kernel_info_response` content when the shell reply is\n   * received and validated.\n   */\n  requestKernelInfo(): Promise<KernelMessage.IInfoReplyMsg> {\n    let options: KernelMessage.IOptions = {\n      msgType: 'kernel_info_request',\n      channel: 'shell',\n      username: this._username,\n      session: this._clientId\n    };\n    let msg = KernelMessage.createShellMessage(options);\n    return Private.handleShellMessage(this, msg).then(reply => {\n      this._info = (reply as KernelMessage.IInfoReplyMsg).content;\n      return reply as KernelMessage.IInfoReplyMsg;\n    });\n  }\n\n  /**\n   * Send a `complete_request` message.\n   *\n   * #### Notes\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#completion).\n   *\n   * Fulfills with the `complete_reply` content when the shell reply is\n   * received and validated.\n   */\n  requestComplete(content: KernelMessage.ICompleteRequest): Promise<KernelMessage.ICompleteReplyMsg> {\n    let options: KernelMessage.IOptions = {\n      msgType: 'complete_request',\n      channel: 'shell',\n      username: this._username,\n      session: this._clientId\n    };\n    let msg = KernelMessage.createShellMessage(options, content);\n    return Private.handleShellMessage(this, msg) as Promise<KernelMessage.ICompleteReplyMsg>;\n  }\n\n  /**\n   * Send an `inspect_request` message.\n   *\n   * #### Notes\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#introspection).\n   *\n   * Fulfills with the `inspect_reply` content when the shell reply is\n   * received and validated.\n   */\n  requestInspect(content: KernelMessage.IInspectRequest): Promise<KernelMessage.IInspectReplyMsg> {\n    let options: KernelMessage.IOptions = {\n      msgType: 'inspect_request',\n      channel: 'shell',\n      username: this._username,\n      session: this._clientId\n    };\n    let msg = KernelMessage.createShellMessage(options, content);\n    return Private.handleShellMessage(this, msg) as Promise<KernelMessage.IInspectReplyMsg>;\n  }\n\n  /**\n   * Send a `history_request` message.\n   *\n   * #### Notes\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#history).\n   *\n   * Fulfills with the `history_reply` content when the shell reply is\n   * received and validated.\n   */\n  requestHistory(content: KernelMessage.IHistoryRequest): Promise<KernelMessage.IHistoryReplyMsg> {\n    let options: KernelMessage.IOptions = {\n      msgType: 'history_request',\n      channel: 'shell',\n      username: this._username,\n      session: this._clientId\n    };\n    let msg = KernelMessage.createShellMessage(options, content);\n    return Private.handleShellMessage(this, msg) as Promise<KernelMessage.IHistoryReplyMsg>;\n  }\n\n  /**\n   * Send an `execute_request` message.\n   *\n   * #### Notes\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#execute).\n   *\n   * Future `onReply` is called with the `execute_reply` content when the\n   * shell reply is received and validated. The future will resolve when\n   * this message is received and the `idle` iopub status is received.\n   * The future will also be disposed at this point unless `disposeOnDone`\n   * is specified and `false`, in which case it is up to the caller to dispose\n   * of the future.\n   *\n   * **See also:** [[IExecuteReply]]\n   */\n  requestExecute(content: KernelMessage.IExecuteRequest, disposeOnDone: boolean = true): Kernel.IFuture {\n    let options: KernelMessage.IOptions = {\n      msgType: 'execute_request',\n      channel: 'shell',\n      username: this._username,\n      session: this._clientId\n    };\n    let defaults: JSONObject = {\n      silent : false,\n      store_history : true,\n      user_expressions : {},\n      allow_stdin : true,\n      stop_on_error : false\n    };\n    content = { ...defaults, ...content };\n    let msg = KernelMessage.createShellMessage(options, content);\n    return this.sendShellMessage(msg, true, disposeOnDone);\n  }\n\n  /**\n   * Send an `is_complete_request` message.\n   *\n   * #### Notes\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#code-completeness).\n   *\n   * Fulfills with the `is_complete_response` content when the shell reply is\n   * received and validated.\n   */\n  requestIsComplete(content: KernelMessage.IIsCompleteRequest): Promise<KernelMessage.IIsCompleteReplyMsg> {\n    let options: KernelMessage.IOptions = {\n      msgType: 'is_complete_request',\n      channel: 'shell',\n      username: this._username,\n      session: this._clientId\n    };\n    let msg = KernelMessage.createShellMessage(options, content);\n    return Private.handleShellMessage(this, msg) as Promise<KernelMessage.IIsCompleteReplyMsg>;\n  }\n\n  /**\n   * Send a `comm_info_request` message.\n   *\n   * #### Notes\n   * Fulfills with the `comm_info_reply` content when the shell reply is\n   * received and validated.\n   */\n  requestCommInfo(content: KernelMessage.ICommInfoRequest): Promise<KernelMessage.ICommInfoReplyMsg> {\n    let options: KernelMessage.IOptions = {\n      msgType: 'comm_info_request',\n      channel: 'shell',\n      username: this._username,\n      session: this._clientId\n    };\n    let msg = KernelMessage.createShellMessage(options, content);\n    return Private.handleShellMessage(this, msg) as Promise<KernelMessage.ICommInfoReplyMsg>;\n  }\n\n  /**\n   * Send an `input_reply` message.\n   *\n   * #### Notes\n   * See [Messaging in Jupyter](https://jupyter-client.readthedocs.io/en/latest/messaging.html#messages-on-the-stdin-router-dealer-sockets).\n   */\n  sendInputReply(content: KernelMessage.IInputReply): void {\n    if (this.status === 'dead') {\n      throw new Error('Kernel is dead');\n    }\n    let options: KernelMessage.IOptions = {\n      msgType: 'input_reply',\n      channel: 'stdin',\n      username: this._username,\n      session: this._clientId\n    };\n    let msg = KernelMessage.createMessage(options, content);\n    if (!this._isReady || !this._ws) {\n      this._pendingMessages.push(msg);\n    } else {\n      this._ws.send(serialize.serialize(msg));\n    }\n  }\n\n  /**\n   * Register an IOPub message hook.\n   *\n   * @param msg_id - The parent_header message id the hook will intercept.\n   *\n   * @param hook - The callback invoked for the message.\n   *\n   * @returns A disposable used to unregister the message hook.\n   *\n   * #### Notes\n   * The IOPub hook system allows you to preempt the handlers for IOPub messages with a\n   * given parent_header message id. The most recently registered hook is run first.\n   * If the hook returns false, any later hooks and the future's onIOPub handler will not run.\n   * If a hook throws an error, the error is logged to the console and the next hook is run.\n   * If a hook is registered during the hook processing, it won't run until the next message.\n   * If a hook is disposed during the hook processing, it will be deactivated immediately.\n   *\n   * See also [[IFuture.registerMessageHook]].\n   */\n  registerMessageHook(msgId: string, hook: (msg: KernelMessage.IIOPubMessage) => boolean): IDisposable {\n    let future = this._futures && this._futures.get(msgId);\n    if (future) {\n      future.registerMessageHook(hook);\n    }\n    return new DisposableDelegate(() => {\n      future = this._futures && this._futures.get(msgId);\n      if (future) {\n        future.removeMessageHook(hook);\n      }\n    });\n  }\n\n  /**\n   * Register a comm target handler.\n   *\n   * @param targetName - The name of the comm target.\n   *\n   * @param callback - The callback invoked for a comm open message.\n   *\n   * @returns A disposable used to unregister the comm target.\n   *\n   * #### Notes\n   * Only one comm target can be registered at a time, an existing\n   * callback will be overidden.  A registered comm target handler will take\n   * precedence over a comm which specifies a `target_module`.\n   */\n  registerCommTarget(targetName: string, callback: (comm: Kernel.IComm, msg: KernelMessage.ICommOpenMsg) => void): IDisposable {\n    this._targetRegistry[targetName] = callback;\n    return new DisposableDelegate(() => {\n      if (!this.isDisposed) {\n        delete this._targetRegistry[targetName];\n      }\n    });\n  }\n\n  /**\n   * Connect to a comm, or create a new one.\n   *\n   * #### Notes\n   * If a client-side comm already exists, it is returned.\n   */\n  connectToComm(targetName: string, commId?: string): Kernel.IComm {\n    let id = commId || uuid();\n    let comm = this._comms.get(id) || new CommHandler(\n      targetName,\n      id,\n      this,\n      () => { this._unregisterComm(id); }\n    );\n    this._comms.set(id, comm);\n    return comm;\n  }\n\n  /**\n   * Create the kernel websocket connection and add socket status handlers.\n   */\n  private _createSocket(): void {\n    let settings = this.serverSettings;\n    let partialUrl = URLExt.join(settings.wsUrl, KERNEL_SERVICE_URL,\n                                 encodeURIComponent(this._id));\n\n    // Strip any authentication from the display string.\n    let display = partialUrl.replace(/^((?:\\w+:)?\\/\\/)(?:[^@\\/]+@)/, '$1');\n    console.log('Starting WebSocket:', display);\n\n    let url = URLExt.join(\n        partialUrl,\n        'channels?session_id=' + encodeURIComponent(this._clientId)\n    );\n    // If token authentication is in use.\n    let token = settings.token;\n    if (token !== '') {\n      url = url + `&token=${encodeURIComponent(token)}`;\n    }\n\n    this._connectionPromise = new PromiseDelegate<void>();\n    this._wsStopped = false;\n    this._ws = settings.wsFactory(url);\n\n    // Ensure incoming binary messages are not Blobs\n    this._ws.binaryType = 'arraybuffer';\n\n    this._ws.onmessage = (evt: MessageEvent) => { this._onWSMessage(evt); };\n    this._ws.onopen = (evt: Event) => { this._onWSOpen(evt); };\n    this._ws.onclose = (evt: Event) => { this._onWSClose(evt); };\n    this._ws.onerror = (evt: Event) => { this._onWSClose(evt); };\n  }\n\n  /**\n   * Handle a websocket open event.\n   */\n  private _onWSOpen(evt: Event): void {\n    this._reconnectAttempt = 0;\n    // Allow the message to get through.\n    this._isReady = true;\n    // Update our status to connected.\n    this._updateStatus('connected');\n    // Get the kernel info, signaling that the kernel is ready.\n    this.requestKernelInfo().then(() => {\n      this._connectionPromise.resolve(void 0);\n    }).catch(err => {\n      this._connectionPromise.reject(err);\n    });\n    this._isReady = false;\n  }\n\n  /**\n   * Handle a websocket message, validating and routing appropriately.\n   */\n  private _onWSMessage(evt: MessageEvent) {\n    if (this._wsStopped) {\n      // If the socket is being closed, ignore any messages\n      return;\n    }\n    let msg = serialize.deserialize(evt.data);\n    try {\n      validate.validateMessage(msg);\n    } catch (error) {\n      console.error(`Invalid message: ${error.message}`);\n      return;\n    }\n\n    let handled = false;\n\n    if (msg.parent_header && msg.channel === 'iopub') {\n      switch (msg.header.msg_type) {\n      case 'display_data':\n      case 'update_display_data':\n      case 'execute_result':\n        // display_data messages may re-route based on their display_id.\n        let transient = (msg.content.transient || {}) as JSONObject;\n        let displayId = transient['display_id'] as string;\n        if (displayId) {\n          handled = this._handleDisplayId(displayId, msg);\n        }\n        break;\n      default:\n        break;\n      }\n    }\n\n    if (!handled && msg.parent_header) {\n      let parentHeader = msg.parent_header as KernelMessage.IHeader;\n      let future = this._futures && this._futures.get(parentHeader.msg_id);\n      if (future) {\n        future.handleMsg(msg);\n      } else {\n        // If the message was sent by us and was not iopub, it is orphaned.\n        let owned = parentHeader.session === this.clientId;\n        if (msg.channel !== 'iopub' && owned) {\n          this._unhandledMessage.emit(msg);\n        }\n      }\n    }\n    if (msg.channel === 'iopub') {\n      switch (msg.header.msg_type) {\n      case 'status':\n        this._updateStatus((msg as KernelMessage.IStatusMsg).content.execution_state);\n        break;\n      case 'comm_open':\n        this._handleCommOpen(msg as KernelMessage.ICommOpenMsg);\n        break;\n      case 'comm_msg':\n        this._handleCommMsg(msg as KernelMessage.ICommMsgMsg);\n        break;\n      case 'comm_close':\n        this._handleCommClose(msg as KernelMessage.ICommCloseMsg);\n        break;\n      default:\n        break;\n      }\n      this._iopubMessage.emit(msg as KernelMessage.IIOPubMessage);\n    }\n  }\n\n  /**\n   * Handle a message with a display id.\n   *\n   * @returns Whether the message was handled.\n   */\n  private _handleDisplayId(displayId: string, msg: KernelMessage.IMessage): boolean {\n    let msgId = (msg.parent_header as KernelMessage.IHeader).msg_id;\n    let parentIds = this._displayIdToParentIds.get(displayId);\n    if (parentIds) {\n      // We've seen it before, update existing outputs with same display_id\n      // by handling display_data as update_display_data.\n      let updateMsg: KernelMessage.IMessage = {\n        header: JSONExt.deepCopy(msg.header) as KernelMessage.IHeader,\n        parent_header: JSONExt.deepCopy(msg.parent_header)  as KernelMessage.IHeader,\n        metadata: JSONExt.deepCopy(msg.metadata),\n        content: JSONExt.deepCopy(msg.content),\n        channel: msg.channel,\n        buffers: msg.buffers ? msg.buffers.slice() : []\n      };\n      (updateMsg.header as any).msg_type = 'update_display_data';\n\n      parentIds.map((parentId) => {\n        let future = this._futures && this._futures.get(parentId);\n        if (future) {\n          future.handleMsg(updateMsg);\n        }\n      });\n    }\n\n    // We're done here if it's update_display.\n    if (msg.header.msg_type === 'update_display_data') {\n      // It's an update, don't proceed to the normal display.\n      return true;\n    }\n\n    // Regular display_data with id, record it for future updating\n    // in _displayIdToParentIds for future lookup.\n    parentIds = this._displayIdToParentIds.get(displayId) || [];\n    if (parentIds.indexOf(msgId) === -1) {\n      parentIds.push(msgId);\n    }\n    this._displayIdToParentIds.set(displayId, parentIds);\n\n    // Add to our map of display ids for this message.\n    let displayIds = this._msgIdToDisplayIds.get(msgId) || [];\n    if (displayIds.indexOf(msgId) === -1) {\n      displayIds.push(msgId);\n    }\n    this._msgIdToDisplayIds.set(msgId, displayIds);\n\n    // Let it propagate to the intended recipient.\n    return false;\n  }\n\n  /**\n   * Handle a websocket close event.\n   */\n  private _onWSClose(evt: Event) {\n    if (this._wsStopped || !this._ws) {\n      return;\n    }\n    // Clear the websocket event handlers and the socket itself.\n    this._ws.onclose = this._noOp;\n    this._ws.onerror = this._noOp;\n    this._ws = null;\n\n    if (this._reconnectAttempt < this._reconnectLimit) {\n      this._updateStatus('reconnecting');\n      let timeout = Math.pow(2, this._reconnectAttempt);\n      console.error('Connection lost, reconnecting in ' + timeout + ' seconds.');\n      setTimeout(this._createSocket.bind(this), 1e3 * timeout);\n      this._reconnectAttempt += 1;\n    } else {\n      this._updateStatus('dead');\n      this._connectionPromise.reject(new Error('Could not establish connection'));\n    }\n  }\n\n  /**\n   * Clear the socket state.\n   */\n  private _clearSocket(): void {\n    this._wsStopped = true;\n    if (this._ws !== null) {\n      this._ws.close();\n    }\n    this._ws = null;\n  }\n\n  /**\n   * Handle status iopub messages from the kernel.\n   */\n  private _updateStatus(status: Kernel.Status): void {\n    switch (status) {\n    case 'starting':\n    case 'idle':\n    case 'busy':\n    case 'connected':\n      this._isReady = true;\n      break;\n    case 'restarting':\n    case 'reconnecting':\n    case 'dead':\n      this._isReady = false;\n      break;\n    default:\n      console.error('invalid kernel status:', status);\n      return;\n    }\n    if (status !== this._status) {\n      this._status = status;\n      Private.logKernelStatus(this);\n      this._statusChanged.emit(status);\n      if (status === 'dead') {\n        this.dispose();\n      }\n    }\n    if (this._isReady) {\n      this._sendPending();\n    }\n  }\n\n  /**\n   * Send pending messages to the kernel.\n   */\n  private _sendPending(): void {\n    // We shift the message off the queue\n    // after the message is sent so that if there is an exception,\n    // the message is still pending.\n    while (this._ws && this._pendingMessages.length > 0) {\n      let msg = serialize.serialize(this._pendingMessages[0]);\n      this._ws.send(msg);\n      this._pendingMessages.shift();\n    }\n  }\n\n  /**\n   * Clear the internal state.\n   */\n  private _clearState(): void {\n    this._isReady = false;\n    this._pendingMessages = [];\n    this._futures.forEach((future, key) => {\n      future.dispose();\n    });\n    this._comms.forEach((comm, key) => {\n      comm.dispose();\n    });\n    this._futures = new Map<string, KernelFutureHandler>();\n    this._commPromises = new Map<string, Promise<Kernel.IComm>>();\n    this._comms = new Map<string, Kernel.IComm>();\n    this._displayIdToParentIds.clear();\n    this._msgIdToDisplayIds.clear();\n  }\n\n  /**\n   * Handle a `comm_open` kernel message.\n   */\n  private _handleCommOpen(msg: KernelMessage.ICommOpenMsg): void {\n    let content = msg.content;\n    if (this.isDisposed) {\n      return;\n    }\n    let promise = Private.loadObject(content.target_name, content.target_module,\n      this._targetRegistry).then(target => {\n        let comm = new CommHandler(\n          content.target_name,\n          content.comm_id,\n          this,\n          () => { this._unregisterComm(content.comm_id); }\n        );\n        let response : any;\n        try {\n          response = target(comm, msg);\n        } catch (e) {\n          comm.close();\n          console.error('Exception opening new comm');\n          throw(e);\n        }\n        return Promise.resolve(response).then(() => {\n          if (this.isDisposed) {\n            return;\n          }\n          this._commPromises.delete(comm.commId);\n          this._comms.set(comm.commId, comm);\n          return comm;\n        });\n    });\n    this._commPromises.set(content.comm_id, promise);\n  }\n\n  /**\n   * Handle 'comm_close' kernel message.\n   */\n  private _handleCommClose(msg: KernelMessage.ICommCloseMsg): void {\n    let content = msg.content;\n    let promise = this._commPromises.get(content.comm_id);\n    if (!promise) {\n      let comm = this._comms.get(content.comm_id);\n      if (!comm) {\n        console.error('Comm not found for comm id ' + content.comm_id);\n        return;\n      }\n      promise = Promise.resolve(comm);\n    }\n    promise.then((comm) => {\n      if (!comm) {\n        return;\n      }\n      this._unregisterComm(comm.commId);\n      try {\n        let onClose = comm.onClose;\n        if (onClose) {\n          onClose(msg);\n        }\n        (comm as CommHandler).dispose();\n      } catch (e) {\n        console.error('Exception closing comm: ', e, e.stack, msg);\n      }\n    });\n  }\n\n  /**\n   * Handle a 'comm_msg' kernel message.\n   */\n  private _handleCommMsg(msg: KernelMessage.ICommMsgMsg): void {\n    let content = msg.content;\n    let promise = this._commPromises.get(content.comm_id);\n    if (!promise) {\n      let comm = this._comms.get(content.comm_id);\n      if (!comm) {\n        // We do have a registered comm for this comm id, ignore.\n        return;\n      } else {\n        let onMsg = comm.onMsg;\n        if (onMsg) {\n          onMsg(msg);\n        }\n      }\n    } else {\n      promise.then((comm) => {\n        if (!comm) {\n          return;\n        }\n        try {\n          let onMsg = comm.onMsg;\n          if (onMsg) {\n            onMsg(msg);\n          }\n        } catch (e) {\n          console.error('Exception handling comm msg: ', e, e.stack, msg);\n        }\n      });\n    }\n  }\n\n  /**\n   * Unregister a comm instance.\n   */\n  private _unregisterComm(commId: string) {\n    this._comms.delete(commId);\n    this._commPromises.delete(commId);\n  }\n\n  private _id = '';\n  private _name = '';\n  private _status: Kernel.Status = 'unknown';\n  private _clientId = '';\n  private _isDisposed = false;\n  private _wsStopped = false;\n  private _ws: WebSocket | null = null;\n  private _username = '';\n  private _reconnectLimit = 7;\n  private _reconnectAttempt = 0;\n  private _isReady = false;\n  private _futures: Map<string, KernelFutureHandler>;\n  private _commPromises: Map<string, Promise<Kernel.IComm | undefined>>;\n  private _comms: Map<string, Kernel.IComm>;\n  private _targetRegistry: { [key: string]: (comm: Kernel.IComm, msg: KernelMessage.ICommOpenMsg) => void; } = Object.create(null);\n  private _info: KernelMessage.IInfoReply | null = null;\n  private _pendingMessages: KernelMessage.IMessage[] = [];\n  private _connectionPromise: PromiseDelegate<void>;\n  private _specPromise: Promise<Kernel.ISpecModel>;\n  private _statusChanged = new Signal<this, Kernel.Status>(this);\n  private _iopubMessage = new Signal<this, KernelMessage.IIOPubMessage>(this);\n  private _unhandledMessage = new Signal<this, KernelMessage.IMessage>(this);\n  private _displayIdToParentIds = new Map<string, string[]>();\n  private _msgIdToDisplayIds = new Map<string, string[]>();\n  private _noOp = () => { /* no-op */};\n}\n\n\n/**\n * The namespace for `DefaultKernel` statics.\n */\nexport\nnamespace DefaultKernel {\n  /**\n   * Find a kernel by id.\n   *\n   * @param id - The id of the kernel of interest.\n   *\n   * @param settings - The optional server settings.\n   *\n   * @returns A promise that resolves with the model for the kernel.\n   *\n   * #### Notes\n   * If the kernel was already started via `startNewKernel`, we return its\n   * `Kernel.IModel`.\n   *\n   * Otherwise, we attempt to find to the existing\n   * kernel.\n   * The promise is fulfilled when the kernel is found,\n   * otherwise the promise is rejected.\n   */\n  export\n  function findById(id: string, settings?: ServerConnection.ISettings): Promise<Kernel.IModel> {\n    return Private.findById(id, settings);\n  }\n\n  /**\n   * Fetch all of the kernel specs.\n   *\n   * @param settings - The optional server settings.\n   *\n   * @returns A promise that resolves with the kernel specs.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernelspecs).\n   */\n  export\n  function getSpecs(settings?: ServerConnection.ISettings): Promise<Kernel.ISpecModels> {\n    return Private.getSpecs(settings);\n  }\n\n  /**\n   * Fetch the running kernels.\n   *\n   * @param settings - The optional server settings.\n   *\n   * @returns A promise that resolves with the list of running kernels.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   */\n  export\n  function listRunning(settings?: ServerConnection.ISettings): Promise<Kernel.IModel[]> {\n    return Private.listRunning(settings);\n  }\n\n  /**\n   * Start a new kernel.\n   *\n   * @param options - The options used to create the kernel.\n   *\n   * @returns A promise that resolves with a kernel object.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n   *\n   * If no options are given or the kernel name is not given, the\n   * default kernel will by started by the server.\n   *\n   * Wraps the result in a Kernel object. The promise is fulfilled\n   * when the kernel is started by the server, otherwise the promise is rejected.\n   */\n  export\n  function startNew(options: Kernel.IOptions): Promise<Kernel.IKernel> {\n    return Private.startNew(options);\n  }\n\n  /**\n   * Connect to a running kernel.\n   *\n   * @param id - The id of the running kernel.\n   *\n   * @param settings - The server settings for the request.\n   *\n   * @returns A promise that resolves with the kernel object.\n   *\n   * #### Notes\n   * If the kernel was already started via `startNewKernel`, the existing\n   * Kernel object info is used to create another instance.\n   *\n   * Otherwise, if `options` are given, we attempt to connect to the existing\n   * kernel found by calling `listRunningKernels`.\n   * The promise is fulfilled when the kernel is running on the server,\n   * otherwise the promise is rejected.\n   *\n   * If the kernel was not already started and no `options` are given,\n   * the promise is rejected.\n   */\n  export\n  function connectTo(id: string, settings?: ServerConnection.ISettings): Promise<Kernel.IKernel> {\n    return Private.connectTo(id, settings);\n  }\n\n  /**\n   * Shut down a kernel by id.\n   *\n   * @param id - The id of the running kernel.\n   *\n   * @param settings - The server settings for the request.\n   *\n   * @returns A promise that resolves when the kernel is shut down.\n   */\n  export\n  function shutdown(id: string, settings?: ServerConnection.ISettings): Promise<void> {\n    return Private.shutdownKernel(id, settings);\n  }\n}\n\n\n/**\n * A private namespace for the Kernel.\n */\nnamespace Private {\n  /**\n   * A module private store for running kernels.\n   */\n  export\n  const runningKernels: DefaultKernel[] = [];\n\n  /**\n   * A module private store of kernel specs by base url.\n   */\n  export\n  const specs: { [key: string]: Promise<Kernel.ISpecModels> } = Object.create(null);\n\n  /**\n   * Find a kernel by id.\n   */\n  export\n  function findById(id: string, settings?: ServerConnection.ISettings): Promise<Kernel.IModel> {\n    let kernel = find(runningKernels, value => {\n      return (value.id === id);\n    });\n    if (kernel) {\n      return Promise.resolve(kernel.model);\n    }\n    return getKernelModel(id, settings).catch(() => {\n      throw new Error(`No running kernel with id: ${id}`);\n    });\n  }\n\n  /**\n   * Get the cached kernel specs or fetch them.\n   */\n  export\n  function findSpecs(settings?: ServerConnection.ISettings): Promise<Kernel.ISpecModels> {\n    settings = settings || ServerConnection.makeSettings();\n    let promise = specs[settings.baseUrl];\n    if (promise) {\n      return promise;\n    }\n    return getSpecs(settings);\n  }\n\n  /**\n   * Fetch all of the kernel specs.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernelspecs).\n   */\n  export\n  function getSpecs(settings?: ServerConnection.ISettings): Promise<Kernel.ISpecModels> {\n    settings = settings || ServerConnection.makeSettings();\n    let request = {\n      url: URLExt.join(settings.baseUrl, KERNELSPEC_SERVICE_URL),\n      method: 'GET',\n      cache: false\n    };\n    let promise = ServerConnection.makeRequest(request, settings).then(response => {\n      if (response.xhr.status !== 200) {\n        throw ServerConnection.makeError(response);\n      }\n      try {\n        return validate.validateSpecModels(response.data);\n      } catch (err) {\n        throw ServerConnection.makeError(response, err.message);\n      }\n    });\n    Private.specs[settings.baseUrl] = promise;\n    return promise;\n  }\n\n  /**\n   * Fetch the running kernels.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/kernels) and validates the response model.\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   */\n  export\n  function listRunning(settings?: ServerConnection.ISettings): Promise<Kernel.IModel[]> {\n    settings = settings || ServerConnection.makeSettings();\n    let request = {\n      url: URLExt.join(settings.baseUrl, KERNEL_SERVICE_URL),\n      method: 'GET',\n      cache: false\n    };\n    return ServerConnection.makeRequest(request, settings).then(response => {\n      if (response.xhr.status !== 200) {\n        throw ServerConnection.makeError(response);\n      }\n      if (!Array.isArray(response.data)) {\n        throw ServerConnection.makeError(response, 'Invalid kernel list');\n      }\n      for (let i = 0; i < response.data.length; i++) {\n        try {\n          validate.validateModel(response.data[i]);\n        } catch (err) {\n          throw ServerConnection.makeError(response, err.message);\n        }\n      }\n      return updateRunningKernels(response.data);\n    }, onKernelError);\n  }\n\n  /**\n   * Update the running kernels based on new data from the server.\n   */\n  export\n  function updateRunningKernels(kernels: Kernel.IModel[]): Kernel.IModel[] {\n    each(runningKernels, kernel => {\n      let updated = find(kernels, model => {\n        return kernel.id === model.id;\n      });\n      // If kernel is no longer running on disk, emit dead signal.\n      if (!updated && kernel.status !== 'dead') {\n        kernel.terminated.emit(void 0);\n        kernel.dispose();\n      }\n    });\n    return kernels;\n  }\n\n  /**\n   * Start a new kernel.\n   */\n  export\n  function startNew(options: Kernel.IOptions): Promise<Kernel.IKernel> {\n    let settings = options.serverSettings || ServerConnection.makeSettings();\n    let request = {\n      url: URLExt.join(settings.baseUrl, KERNEL_SERVICE_URL),\n      method: 'POST',\n      data: JSON.stringify({ name: options.name }),\n      contentType: 'application/json',\n      cache: false\n    };\n    return ServerConnection.makeRequest(request, settings).then(response => {\n      if (response.xhr.status !== 201) {\n        throw ServerConnection.makeError(response);\n      }\n      validate.validateModel(response.data);\n      return new DefaultKernel({\n        ...options,\n        name: response.data.name,\n        serverSettings: settings\n      }, response.data.id);\n    }, onKernelError);\n  }\n\n  /**\n   * Connect to a running kernel.\n   *\n   * #### Notes\n   * If the kernel was already started via `startNewKernel`, the existing\n   * Kernel object info is used to create another instance.\n   *\n   * Otherwise, if `options` are given, we attempt to connect to the existing\n   * kernel found by calling `listRunningKernels`.\n   * The promise is fulfilled when the kernel is running on the server,\n   * otherwise the promise is rejected.\n   *\n   * If the kernel was not already started and no `options` are given,\n   * the promise is rejected.\n   */\n  export\n  function connectTo(id: string, settings?: ServerConnection.ISettings): Promise<Kernel.IKernel> {\n    settings = settings || ServerConnection.makeSettings();\n    let kernel = find(runningKernels, value => {\n      return value.id === id;\n    });\n    if (kernel) {\n      return Promise.resolve(kernel.clone());\n    }\n\n    return getKernelModel(id, settings).then(model => {\n      return new DefaultKernel({\n        name: model.name,\n        serverSettings: settings\n        }, id);\n    }).catch(() => {\n      throw new Error(`No running kernel with id: ${id}`);\n    });\n  }\n\n  /**\n   * Restart a kernel.\n   */\n  export\n  function restartKernel(kernel: Kernel.IKernel, settings?: ServerConnection.ISettings): Promise<void> {\n    if (kernel.status === 'dead') {\n      return Promise.reject(new Error('Kernel is dead'));\n    }\n    settings = settings || ServerConnection.makeSettings();\n    let url = URLExt.join(\n      settings.baseUrl, KERNEL_SERVICE_URL,\n      encodeURIComponent(kernel.id), 'restart'\n    );\n    let request = {\n      url,\n      method: 'POST',\n      cache: false\n    };\n    return ServerConnection.makeRequest(request, settings).then(response => {\n      if (response.xhr.status !== 200) {\n        throw ServerConnection.makeError(response);\n      }\n      try {\n        validate.validateModel(response.data);\n      } catch (err) {\n        throw ServerConnection.makeError(response, err.message);\n      }\n    }, onKernelError);\n  }\n\n  /**\n   * Interrupt a kernel.\n   */\n  export\n  function interruptKernel(kernel: Kernel.IKernel, settings?: ServerConnection.ISettings): Promise<void> {\n    if (kernel.status === 'dead') {\n      return Promise.reject(new Error('Kernel is dead'));\n    }\n    settings = settings || ServerConnection.makeSettings();\n    let url = URLExt.join(\n      settings.baseUrl, KERNEL_SERVICE_URL,\n      encodeURIComponent(kernel.id), 'interrupt'\n    );\n    let request = {\n      url,\n      method: 'POST',\n      cache: false\n    };\n    return ServerConnection.makeRequest(request, settings).then(response => {\n      if (response.xhr.status !== 204) {\n        throw ServerConnection.makeError(response);\n      }\n    }, onKernelError);\n  }\n\n  /**\n   * Delete a kernel.\n   */\n  export\n  function shutdownKernel(id: string, settings?: ServerConnection.ISettings): Promise<void> {\n    settings = settings || ServerConnection.makeSettings();\n    let url = URLExt.join(settings.baseUrl, KERNEL_SERVICE_URL,\n                                encodeURIComponent(id));\n    let request = {\n      url,\n      method: 'DELETE',\n      cache: false\n    };\n    return ServerConnection.makeRequest(request, settings).then(response => {\n      if (response.xhr.status !== 204) {\n        throw ServerConnection.makeError(response);\n      }\n      killKernels(id);\n    }, error => {\n      if (error.xhr.status === 404) {\n        let response = JSON.parse(error.xhr.responseText) as any;\n        console.warn(response['message']);\n        killKernels(id);\n      } else {\n        return onKernelError(error);\n      }\n    });\n  }\n\n  /**\n   * Kill the kernels by id.\n   */\n  function killKernels(id: string): void {\n    each(toArray(runningKernels), kernel => {\n      if (kernel.id === id) {\n        kernel.terminated.emit(void 0);\n        kernel.dispose();\n      }\n    });\n  }\n\n  /**\n   * Get a full kernel model from the server by kernel id string.\n   */\n  export\n  function getKernelModel(id: string, settings?: ServerConnection.ISettings): Promise<Kernel.IModel> {\n    settings = settings || ServerConnection.makeSettings();\n    let url = URLExt.join(settings.baseUrl, KERNEL_SERVICE_URL,\n                                encodeURIComponent(id));\n    let request = {\n      url,\n      method: 'GET',\n      cache: false\n    };\n    return ServerConnection.makeRequest(request, settings).then(response => {\n      if (response.xhr.status !== 200) {\n        throw ServerConnection.makeError(response);\n      }\n      let data = response.data as Kernel.IModel;\n      try {\n        validate.validateModel(data);\n      } catch (err) {\n        throw ServerConnection.makeError(response, err.message);\n      }\n      return data;\n    }, Private.onKernelError);\n  }\n\n  /**\n   * Log the current kernel status.\n   */\n  export\n  function logKernelStatus(kernel: Kernel.IKernel): void {\n    switch (kernel.status) {\n    case 'idle':\n    case 'busy':\n    case 'unknown':\n      return;\n    default:\n      console.log(`Kernel: ${kernel.status} (${kernel.id})`);\n      break;\n    }\n  }\n\n  /**\n   * Handle an error on a kernel Ajax call.\n   */\n  export\n  function onKernelError(error: ServerConnection.IError): Promise<any> {\n    let text = (error.message ||\n                error.xhr.statusText ||\n                error.xhr.responseText);\n    let msg = `API request failed: ${text}`;\n    console.error(msg);\n    return Promise.reject(error);\n  }\n\n  /**\n   * Send a kernel message to the kernel and resolve the reply message.\n   */\n  export\n  function handleShellMessage(kernel: Kernel.IKernel, msg: KernelMessage.IShellMessage): Promise<KernelMessage.IShellMessage> {\n    let future: Kernel.IFuture;\n    try {\n      future = kernel.sendShellMessage(msg, true);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    return new Promise(resolve => { future.onReply = resolve; });\n  }\n\n  /**\n   * Try to load an object from a module or a registry.\n   *\n   * Try to load an object from a module asynchronously if a module\n   * is specified, otherwise tries to load an object from the global\n   * registry, if the global registry is provided.\n   */\n  export\n  function loadObject(name: string, moduleName: string | undefined, registry?: { [key: string]: any }): Promise<any> {\n    return new Promise((resolve, reject) => {\n      // Try loading the view module using require.js\n      if (moduleName) {\n        if (typeof requirejs === 'undefined') {\n          throw new Error('requirejs not found');\n        }\n        requirejs([moduleName], (mod: any) => {\n          if (mod[name] === void 0) {\n            let msg = `Object '${name}' not found in module '${moduleName}'`;\n            reject(new Error(msg));\n          } else {\n            resolve(mod[name]);\n          }\n        }, reject);\n      } else {\n        if (registry && registry[name]) {\n          resolve(registry[name]);\n        } else {\n          reject(new Error(`Object '${name}' not found in registry`));\n        }\n      }\n    });\n  };\n}\n"]}