{"version":3,"file":"future.js","sourceRoot":"","sources":["../../../../../services/src/kernel/future.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  PromiseDelegate\n} from '@phosphor/coreutils';\n\nimport {\n  DisposableDelegate\n} from '@phosphor/disposable';\n\nimport {\n  Kernel\n} from './kernel';\n\nimport {\n  KernelMessage\n} from './messages';\n\n\n/**\n * Implementation of a kernel future.\n */\nexport\nclass KernelFutureHandler extends DisposableDelegate implements Kernel.IFuture {\n  /**\n   * Construct a new KernelFutureHandler.\n   */\n  constructor(cb: () => void, msg: KernelMessage.IShellMessage, expectShell: boolean, disposeOnDone: boolean, kernel: Kernel.IKernel) {\n    super(cb);\n    this._msg = msg;\n    if (!expectShell) {\n      this._setFlag(Private.KernelFutureFlag.GotReply);\n    }\n    this._disposeOnDone = disposeOnDone;\n    this._kernel = kernel;\n  }\n\n  /**\n   * Get the original outgoing message.\n   */\n  get msg(): KernelMessage.IShellMessage {\n    return this._msg;\n  }\n\n  /**\n   * A promise that resolves when the future is done.\n   */\n  get done(): Promise<KernelMessage.IShellMessage> {\n    return this._done.promise;\n  }\n\n  /**\n   * Get the reply handler.\n   */\n  get onReply(): (msg: KernelMessage.IShellMessage) => void {\n    return this._reply;\n  }\n\n  /**\n   * Set the reply handler.\n   */\n  set onReply(cb: (msg: KernelMessage.IShellMessage) => void) {\n    this._reply = cb;\n  }\n\n  /**\n   * Get the iopub handler.\n   */\n  get onIOPub(): (msg: KernelMessage.IIOPubMessage) => void {\n    return this._iopub;\n  }\n\n  /**\n   * Set the iopub handler.\n   */\n  set onIOPub(cb: (msg: KernelMessage.IIOPubMessage) => void) {\n    this._iopub = cb;\n  }\n\n  /**\n   * Get the stdin handler.\n   */\n  get onStdin(): (msg: KernelMessage.IStdinMessage) => void {\n    return this._stdin;\n  }\n\n  /**\n   * Set the stdin handler.\n   */\n  set onStdin(cb: (msg: KernelMessage.IStdinMessage) => void) {\n    this._stdin = cb;\n  }\n\n  /**\n   * Register hook for IOPub messages.\n   *\n   * @param hook - The callback invoked for an IOPub message.\n   *\n   * #### Notes\n   * The IOPub hook system allows you to preempt the handlers for IOPub messages handled\n   * by the future. The most recently registered hook is run first.\n   * If the hook returns false, any later hooks and the future's onIOPub handler will not run.\n   * If a hook throws an error, the error is logged to the console and the next hook is run.\n   * If a hook is registered during the hook processing, it won't run until the next message.\n   * If a hook is removed during the hook processing, it will be deactivated immediately.\n   */\n  registerMessageHook(hook: (msg: KernelMessage.IIOPubMessage) => boolean): void {\n    this._hooks.add(hook);\n  }\n\n  /**\n   * Remove a hook for IOPub messages.\n   *\n   * @param hook - The hook to remove.\n   *\n   * #### Notes\n   * If a hook is removed during the hook processing, it will be deactivated immediately.\n   */\n  removeMessageHook(hook: (msg: KernelMessage.IIOPubMessage) => boolean): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._hooks.remove(hook);\n  }\n\n\n  /**\n   * Send an `input_reply` message.\n   */\n  sendInputReply(content: KernelMessage.IInputReply): void {\n    this._kernel.sendInputReply(content);\n  }\n\n  /**\n   * Dispose and unregister the future.\n   */\n  dispose(): void {\n    this._stdin = Private.noOp;\n    this._iopub = Private.noOp;\n    this._reply = Private.noOp;\n    super.dispose();\n  }\n\n  /**\n   * Handle an incoming kernel message.\n   */\n  handleMsg(msg: KernelMessage.IMessage): void {\n    switch (msg.channel) {\n    case 'shell':\n      this._handleReply(msg as KernelMessage.IShellMessage);\n      break;\n    case 'stdin':\n      this._handleStdin(msg as KernelMessage.IStdinMessage);\n      break;\n    case 'iopub':\n      this._handleIOPub(msg as KernelMessage.IIOPubMessage);\n      break;\n    }\n  }\n\n  private _handleReply(msg: KernelMessage.IShellMessage): void {\n    let reply = this._reply;\n    if (reply) { reply(msg); }\n    this._replyMsg = msg;\n    this._setFlag(Private.KernelFutureFlag.GotReply);\n    if (this._testFlag(Private.KernelFutureFlag.GotIdle)) {\n      this._handleDone();\n    }\n  }\n\n  private _handleStdin(msg: KernelMessage.IStdinMessage): void {\n    let stdin = this._stdin;\n    if (stdin) { stdin(msg); }\n  }\n\n  private _handleIOPub(msg: KernelMessage.IIOPubMessage): void {\n    let process = this._hooks.process(msg);\n    let iopub = this._iopub;\n    if (process && iopub) { iopub(msg); }\n    if (KernelMessage.isStatusMsg(msg) &&\n        msg.content.execution_state === 'idle') {\n      this._setFlag(Private.KernelFutureFlag.GotIdle);\n      if (this._testFlag(Private.KernelFutureFlag.GotReply)) {\n        this._handleDone();\n      }\n    }\n  }\n\n  private _handleDone(): void {\n    if (this._testFlag(Private.KernelFutureFlag.IsDone)) {\n      return;\n    }\n    this._setFlag(Private.KernelFutureFlag.IsDone);\n    this._done.resolve(this._replyMsg);\n    if (this._disposeOnDone) {\n      this.dispose();\n    }\n  }\n\n  /**\n   * Test whether the given future flag is set.\n   */\n  private _testFlag(flag: Private.KernelFutureFlag): boolean {\n    return (this._status & flag) !== 0;\n  }\n\n  /**\n   * Set the given future flag.\n   */\n  private _setFlag(flag: Private.KernelFutureFlag): void {\n    this._status |= flag;\n  }\n\n  private _msg: KernelMessage.IShellMessage;\n  private _status = 0;\n  private _stdin: (msg: KernelMessage.IStdinMessage) => void = Private.noOp;\n  private _iopub: (msg: KernelMessage.IIOPubMessage) => void = Private.noOp;\n  private _reply: (msg: KernelMessage.IShellMessage) => void = Private.noOp;\n  private _done = new PromiseDelegate<KernelMessage.IShellMessage>();\n  private _replyMsg: KernelMessage.IShellMessage;\n  private _hooks = new Private.HookList<KernelMessage.IIOPubMessage>();\n  private _disposeOnDone = true;\n  private _kernel: Kernel.IKernel;\n}\n\nnamespace Private {\n  /**\n   * A no-op function.\n   */\n  export\n  const noOp = () => { /* no-op */ };\n\n  /**\n   * A polyfill for a function to run code outside of the current execution context.\n   */\n  let defer = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : setImmediate;\n\n  export\n  class HookList<T> {\n    /**\n     * Register a hook.\n     *\n     * @param hook - The callback to register.\n     */\n    add(hook: (msg: T) => boolean): void {\n      this.remove(hook);\n      this._hooks.push(hook);\n    }\n\n    /**\n     * Remove a hook.\n     *\n     * @param hook - The callback to remove.\n     */\n    remove(hook: (msg: T) => boolean): void {\n      let index = this._hooks.indexOf(hook);\n      if (index >= 0) {\n        this._hooks[index] = null;\n        this._scheduleCompact();\n      }\n    }\n\n    /**\n     * Process a message through the hooks.\n     *\n     * #### Notes\n     * The most recently registered hook is run first.\n     * If the hook returns false, any later hooks will not run.\n     * If a hook throws an error, the error is logged to the console and the next hook is run.\n     * If a hook is registered during the hook processing, it won't run until the next message.\n     * If a hook is removed during the hook processing, it will be deactivated immediately.\n     */\n    process(msg: T): boolean {\n      let continueHandling: boolean;\n      // most recently-added hook is called first\n      for (let i = this._hooks.length-1; i>=0; i--) {\n        let hook = this._hooks[i];\n        if (hook === null) { continue; }\n        try {\n          continueHandling = hook(msg);\n        } catch(err) {\n          continueHandling = true;\n          console.error(err);\n        }\n        if (continueHandling === false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    /**\n     * Schedule a cleanup of the list, removing any hooks that have been nulled out.\n     */\n    private _scheduleCompact(): void {\n      if (!this._cleanupScheduled) {\n        this._cleanupScheduled = true;\n        defer(() => {\n          this._cleanupScheduled = false;\n          this._compact();\n        });\n      }\n    }\n\n    /**\n     * Compact the list, removing any nulls.\n     */\n    private _compact(): void {\n      let numNulls = 0;\n      for (let i = 0, len = this._hooks.length; i < len; i++) {\n        let hook = this._hooks[i];\n        if (this._hooks[i] === null) {\n          numNulls++;\n        } else {\n          this._hooks[i - numNulls] = hook;\n        }\n      }\n      this._hooks.length -= numNulls;\n    }\n\n    private _hooks: (((msg: T) => boolean) | null)[] = [];\n    private _cleanupScheduled: boolean;\n  }\n\n  /**\n   * Bit flags for the kernel future state.\n   */\n  export\n  enum KernelFutureFlag {\n    GotReply = 0x1,\n    GotIdle = 0x2,\n    IsDone = 0x4,\n    DisposeOnDone = 0x8,\n  }\n}\n"]}