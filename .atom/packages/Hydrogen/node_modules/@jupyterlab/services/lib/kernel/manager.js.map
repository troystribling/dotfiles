{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../../../services/src/kernel/manager.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ArrayExt, IIterator, iter\n} from '@phosphor/algorithm';\n\nimport {\n  JSONExt\n} from '@phosphor/coreutils';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  ServerConnection\n} from '..';\n\nimport {\n  Kernel\n} from './kernel';\n\n\n/**\n * An implementation of a kernel manager.\n */\nexport\nclass KernelManager implements Kernel.IManager {\n  /**\n   * Construct a new kernel manager.\n   *\n   * @param options - The default options for kernel.\n   */\n  constructor(options: KernelManager.IOptions = {}) {\n    this.serverSettings = (\n      options.serverSettings || ServerConnection.makeSettings()\n    );\n\n    // Initialize internal data.\n    this._readyPromise = this._refreshSpecs().then(() => {\n      return this._refreshRunning();\n    });\n\n    // Set up polling.\n    this._runningTimer = (setInterval as any)(() => {\n      this._refreshRunning();\n    }, 10000);\n    this._specsTimer = (setInterval as any)(() => {\n      this._refreshSpecs();\n    }, 61000);\n  }\n\n  /**\n   * A signal emitted when the specs change.\n   */\n  get specsChanged(): ISignal<this, Kernel.ISpecModels> {\n    return this._specsChanged;\n  }\n\n  /**\n   * A signal emitted when the running kernels change.\n   */\n  get runningChanged(): ISignal<this, Kernel.IModel[]> {\n    return this._runningChanged;\n  }\n\n  /**\n   * Test whether the terminal manager is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this._isDisposed = true;\n    clearInterval(this._runningTimer);\n    clearInterval(this._specsTimer);\n    Signal.clearData(this);\n    this._running = [];\n  }\n\n  /**\n   * The server settings for the manager.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Get the most recently fetched kernel specs.\n   */\n  get specs(): Kernel.ISpecModels | null {\n    return this._specs;\n  }\n\n  /**\n   * Test whether the manager is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * A promise that fulfills when the manager is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  /**\n   * Create an iterator over the most recent running kernels.\n   *\n   * @returns A new iterator over the running kernels.\n   */\n  running(): IIterator<Kernel.IModel> {\n    return iter(this._running);\n  }\n\n  /**\n   * Force a refresh of the specs from the server.\n   *\n   * @returns A promise that resolves when the specs are fetched.\n   *\n   * #### Notes\n   * This is intended to be called only in response to a user action,\n   * since the manager maintains its internal state.\n   */\n  refreshSpecs(): Promise<void> {\n    return this._refreshSpecs();\n  }\n\n  /**\n   * Force a refresh of the running kernels.\n   *\n   * @returns A promise that with the list of running sessions.\n   *\n   * #### Notes\n   * This is not typically meant to be called by the user, since the\n   * manager maintains its own internal state.\n   */\n  refreshRunning(): Promise<void> {\n    return this._refreshRunning();\n  }\n\n  /**\n   * Start a new kernel.\n   *\n   * @param options - The kernel options to use.\n   *\n   * @returns A promise that resolves with the kernel instance.\n   *\n   * #### Notes\n   * The manager `serverSettings` will be always be used.\n   */\n  startNew(options: Kernel.IOptions = {}): Promise<Kernel.IKernel> {\n    let newOptions = { ...options, serverSettings: this.serverSettings };\n    return Kernel.startNew(newOptions).then(kernel => {\n      this._onStarted(kernel);\n      return kernel;\n    });\n  }\n\n  /**\n   * Find a kernel by id.\n   *\n   * @param id - The id of the target kernel.\n   *\n   * @returns A promise that resolves with the kernel's model.\n   */\n  findById(id: string): Promise<Kernel.IModel> {\n    return Kernel.findById(id, this.serverSettings);\n  }\n\n  /**\n   * Connect to an existing kernel.\n   *\n   * @param id - The id of the target kernel.\n   *\n   * @returns A promise that resolves with the new kernel instance.\n   */\n  connectTo(id: string): Promise<Kernel.IKernel> {\n    return Kernel.connectTo(id, this.serverSettings).then(kernel => {\n      this._onStarted(kernel);\n      return kernel;\n    });\n  }\n\n  /**\n   * Shut down a kernel by id.\n   *\n   * @param id - The id of the target kernel.\n   *\n   * @returns A promise that resolves when the operation is complete.\n   *\n   * #### Notes\n   * This will emit [[runningChanged]] if the running kernels list\n   * changes.\n   */\n  shutdown(id: string): Promise<void> {\n    return Kernel.shutdown(id, this.serverSettings).then(() => {\n      this._onTerminated(id);\n    });\n  }\n\n  /**\n   * Handle a kernel terminating.\n   */\n  private _onTerminated(id: string): void {\n    let index = ArrayExt.findFirstIndex(this._running, value => value.id === id);\n    if (index !== -1) {\n      this._running.splice(index, 1);\n      this._runningChanged.emit(this._running.slice());\n    }\n  }\n\n  /**\n   * Handle a kernel starting.\n   */\n  private _onStarted(kernel: Kernel.IKernel): void {\n    let id = kernel.id;\n    let index = ArrayExt.findFirstIndex(this._running, value => value.id === id);\n    if (index === -1) {\n      this._running.push(kernel.model);\n      this._runningChanged.emit(this._running.slice());\n    }\n    kernel.terminated.connect(() => {\n      this._onTerminated(id);\n    });\n  }\n\n  /**\n   * Refresh the specs.\n   */\n  private _refreshSpecs(): Promise<void> {\n    return Kernel.getSpecs(this.serverSettings).then(specs => {\n      if (!JSONExt.deepEqual(specs, this._specs)) {\n        this._specs = specs;\n        this._specsChanged.emit(specs);\n      }\n    });\n  }\n\n  /**\n   * Refresh the running sessions.\n   */\n  private _refreshRunning(): Promise<void> {\n    return Kernel.listRunning(this.serverSettings).then(running => {\n      this._isReady = true;\n      if (!JSONExt.deepEqual(running, this._running)) {\n        this._running = running.slice();\n        this._runningChanged.emit(running);\n      }\n    });\n  }\n\n  private _running: Kernel.IModel[] = [];\n  private _specs: Kernel.ISpecModels | null = null;\n  private _isDisposed = false;\n  private _runningTimer = -1;\n  private _specsTimer = -1;\n  private _readyPromise: Promise<void>;\n  private _isReady = false;\n  private _specsChanged = new Signal<this, Kernel.ISpecModels>(this);\n  private _runningChanged = new Signal<this, Kernel.IModel[]>(this);\n}\n\n\n/**\n * The namespace for `KernelManager` class statics.\n */\nexport\nnamespace KernelManager {\n  /**\n   * The options used to initialize a KernelManager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The server settings for the manager.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n"]}