"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
var signaling_1 = require("@phosphor/signaling");
var builder_1 = require("./builder");
var contents_1 = require("./contents");
var session_1 = require("./session");
var setting_1 = require("./setting");
var terminal_1 = require("./terminal");
var serverconnection_1 = require("./serverconnection");
/**
 * A Jupyter services manager.
 */
var ServiceManager = /** @class */ (function () {
    /**
     * Construct a new services provider.
     */
    function ServiceManager(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this._isDisposed = false;
        this._specsChanged = new signaling_1.Signal(this);
        this._isReady = false;
        this.serverSettings = (options.serverSettings || serverconnection_1.ServerConnection.makeSettings());
        this.contents = new contents_1.ContentsManager(options);
        this.sessions = new session_1.SessionManager(options);
        this.settings = new setting_1.SettingManager(options);
        this.terminals = new terminal_1.TerminalManager(options);
        this.builder = new builder_1.BuildManager(options);
        this.sessions.specsChanged.connect(function (sender, specs) {
            _this._specsChanged.emit(specs);
        });
        this._readyPromise = this.sessions.ready.then(function () {
            if (_this.terminals.isAvailable()) {
                return _this.terminals.ready;
            }
        });
        this._readyPromise.then(function () { _this._isReady = true; });
    }
    Object.defineProperty(ServiceManager.prototype, "specsChanged", {
        /**
         * A signal emitted when the kernel specs change.
         */
        get: function () {
            return this._specsChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "isDisposed", {
        /**
         * Test whether the service manager is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the manager.
     */
    ServiceManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        signaling_1.Signal.clearData(this);
        this.contents.dispose();
        this.sessions.dispose();
        this.terminals.dispose();
    };
    Object.defineProperty(ServiceManager.prototype, "specs", {
        /**
         * The kernel spec models.
         */
        get: function () {
            return this.sessions.specs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "isReady", {
        /**
         * Test whether the manager is ready.
         */
        get: function () {
            return this._isReady;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "ready", {
        /**
         * A promise that fulfills when the manager is ready.
         */
        get: function () {
            return this._readyPromise;
        },
        enumerable: true,
        configurable: true
    });
    return ServiceManager;
}());
exports.ServiceManager = ServiceManager;
