"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
var signaling_1 = require("@phosphor/signaling");
var contents_1 = require("./contents");
var session_1 = require("./session");
var terminal_1 = require("./terminal");
var utils_1 = require("./utils");
/**
 * A Jupyter services manager.
 */
var ServiceManager = (function () {
    /**
     * Construct a new services provider.
     */
    function ServiceManager(options) {
        var _this = this;
        this._sessionManager = null;
        this._contentsManager = null;
        this._terminalManager = null;
        this._isDisposed = false;
        this._specsChanged = new signaling_1.Signal(this);
        options = options || {};
        options.wsUrl = options.wsUrl || utils_1.getWsUrl();
        options.baseUrl = options.baseUrl || utils_1.getBaseUrl();
        options.ajaxSettings = utils_1.ajaxSettingsWithToken(options.ajaxSettings, options.token);
        this._sessionManager = new session_1.SessionManager(options);
        this._contentsManager = new contents_1.ContentsManager(options);
        this._terminalManager = new terminal_1.TerminalManager(options);
        this._sessionManager.specsChanged.connect(function (sender, specs) {
            _this._specsChanged.emit(specs);
        });
        this._readyPromise = this._sessionManager.ready.then(function () {
            if (_this._terminalManager.isAvailable()) {
                return _this._terminalManager.ready;
            }
        });
    }
    Object.defineProperty(ServiceManager.prototype, "specsChanged", {
        /**
         * A signal emitted when the kernel specs change.
         */
        get: function () {
            return this._specsChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "isDisposed", {
        /**
         * Test whether the terminal manager is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the manager.
     */
    ServiceManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        signaling_1.Signal.clearData(this);
        this._sessionManager.dispose();
        this._contentsManager.dispose();
        this._sessionManager.dispose();
    };
    Object.defineProperty(ServiceManager.prototype, "specs", {
        /**
         * The kernel spec models.
         */
        get: function () {
            return this._sessionManager.specs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "baseUrl", {
        /**
         * Get the base url of the server.
         */
        get: function () {
            return this._sessionManager.baseUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "sessions", {
        /**
         * Get the session manager instance.
         */
        get: function () {
            return this._sessionManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "contents", {
        /**
         * Get the contents manager instance.
         */
        get: function () {
            return this._contentsManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "terminals", {
        /**
         * Get the terminal manager instance.
         */
        get: function () {
            return this._terminalManager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "isReady", {
        /**
         * Test whether the manager is ready.
         */
        get: function () {
            return this._sessionManager.isReady || this._terminalManager.isReady;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ServiceManager.prototype, "ready", {
        /**
         * A promise that fulfills when the manager is ready.
         */
        get: function () {
            return this._readyPromise;
        },
        enumerable: true,
        configurable: true
    });
    return ServiceManager;
}());
exports.ServiceManager = ServiceManager;
