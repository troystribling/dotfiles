{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../../services/src/manager.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAM3D,iDAE6B;AAE7B,qCAEmB;AAEnB,uCAEoB;AAMpB,qCAEmB;AAEnB,qCAEmB;AAEnB,uCAEoB;AAEpB,uDAE4B;AAG5B;;GAEG;AACH;IAEE;;OAEG;IACH,wBAAY,OAAqC;QAArC,wBAAA,EAAA,YAAqC;QAAjD,iBAoBC;QAmFO,gBAAW,GAAG,KAAK,CAAC;QAEpB,kBAAa,GAAG,IAAI,kBAAM,CAA2B,IAAI,CAAC,CAAC;QAC3D,aAAQ,GAAG,KAAK,CAAC;QAzGvB,IAAI,CAAC,cAAc,GAAG,CACpB,OAAO,CAAC,cAAc,IAAI,mCAAgB,CAAC,YAAY,EAAE,CAC1D,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,0BAAe,CAAC,OAAO,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,IAAI,wBAAc,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,wBAAc,CAAC,OAAO,CAAC,CAAC;QAC5C,IAAI,CAAC,SAAS,GAAG,IAAI,0BAAe,CAAC,OAAO,CAAC,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,sBAAY,CAAC,OAAO,CAAC,CAAC;QAEzC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,KAAK;YAC/C,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC;YAC5C,EAAE,CAAC,CAAC,KAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBACjC,MAAM,CAAC,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,cAAQ,KAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3D,CAAC;IAKD,sBAAI,wCAAY;QAHhB;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAKD,sBAAI,sCAAU;QAHd;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;;;OAAA;IAED;;OAEG;IACH,gCAAO,GAAP;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,kBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEvB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;QACxB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAKD,sBAAI,iCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC7B,CAAC;;;OAAA;IAmCD,sBAAI,mCAAO;QAHX;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;;;OAAA;IAKD,sBAAI,iCAAK;QAHT;;WAEG;aACH;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;;;OAAA;IAMH,qBAAC;AAAD,CAAC,AAhHD,IAgHC;AA/GK,wCAAc","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  ISignal, Signal\n} from '@phosphor/signaling';\n\nimport {\n  Builder, BuildManager\n} from './builder';\n\nimport {\n  Contents, ContentsManager\n} from './contents';\n\nimport {\n  Kernel\n} from './kernel';\n\nimport {\n  Session, SessionManager\n} from './session';\n\nimport {\n  Setting, SettingManager\n} from './setting';\n\nimport {\n  TerminalSession, TerminalManager\n} from './terminal';\n\nimport {\n  ServerConnection\n} from './serverconnection';\n\n\n/**\n * A Jupyter services manager.\n */\nexport\nclass ServiceManager implements ServiceManager.IManager {\n  /**\n   * Construct a new services provider.\n   */\n  constructor(options: ServiceManager.IOptions = {}) {\n    this.serverSettings = (\n      options.serverSettings || ServerConnection.makeSettings()\n    );\n\n    this.contents = new ContentsManager(options);\n    this.sessions = new SessionManager(options);\n    this.settings = new SettingManager(options);\n    this.terminals = new TerminalManager(options);\n    this.builder = new BuildManager(options);\n\n    this.sessions.specsChanged.connect((sender, specs) => {\n      this._specsChanged.emit(specs);\n    });\n    this._readyPromise = this.sessions.ready.then(() => {\n      if (this.terminals.isAvailable()) {\n        return this.terminals.ready;\n      }\n    });\n    this._readyPromise.then(() => { this._isReady = true; });\n  }\n\n  /**\n   * A signal emitted when the kernel specs change.\n   */\n  get specsChanged(): ISignal<this, Kernel.ISpecModels> {\n    return this._specsChanged;\n  }\n\n  /**\n   * Test whether the service manager is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._isDisposed;\n  }\n\n  /**\n   * Dispose of the resources used by the manager.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    this._isDisposed = true;\n    Signal.clearData(this);\n\n    this.contents.dispose();\n    this.sessions.dispose();\n    this.terminals.dispose();\n  }\n\n  /**\n   * The kernel spec models.\n   */\n  get specs(): Kernel.ISpecModels | null {\n    return this.sessions.specs;\n  }\n\n  /**\n   * The server settings of the manager.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Get the session manager instance.\n   */\n  readonly sessions: SessionManager;\n\n  /**\n   * Get the setting manager instance.\n   */\n  readonly settings: SettingManager;\n\n  /**\n   * The builder for the manager.\n   */\n  readonly builder: BuildManager;\n\n  /**\n   * Get the contents manager instance.\n   */\n  readonly contents: ContentsManager;\n\n  /**\n   * Get the terminal manager instance.\n   */\n  readonly terminals: TerminalManager;\n\n  /**\n   * Test whether the manager is ready.\n   */\n  get isReady(): boolean {\n    return this._isReady;\n  }\n\n  /**\n   * A promise that fulfills when the manager is ready.\n   */\n  get ready(): Promise<void> {\n    return this._readyPromise;\n  }\n\n  private _isDisposed = false;\n  private _readyPromise: Promise<void>;\n  private _specsChanged = new Signal<this, Kernel.ISpecModels>(this);\n  private _isReady = false;\n}\n\n\n/**\n * The namespace for `ServiceManager` statics.\n */\nexport\nnamespace ServiceManager {\n  /**\n   * A service manager interface.\n   */\n  export\n  interface IManager extends IDisposable {\n    /**\n     * A signal emitted when the kernel specs change.\n     */\n    specsChanged: ISignal<IManager, Kernel.ISpecModels>;\n\n    /**\n     * The kernel spec models.\n     */\n    readonly specs: Kernel.ISpecModels | null;\n\n    /**\n     * The server settings of the manager.\n     */\n    readonly serverSettings: ServerConnection.ISettings;\n\n    /**\n     * The session manager for the manager.\n     */\n    readonly sessions: Session.IManager;\n\n    /**\n     * The setting manager for the manager.\n     */\n    readonly settings: Setting.IManager;\n\n    /**\n     * The builder for the manager.\n     */\n    readonly builder: Builder.IManager;\n\n    /**\n     * The contents manager for the manager.\n     */\n    readonly contents: Contents.IManager;\n\n    /**\n     * The terminals manager for the manager.\n     */\n    readonly terminals: TerminalSession.IManager;\n\n    /**\n     * Test whether the manager is ready.\n     */\n    readonly isReady: boolean;\n\n    /**\n     * A promise that fulfills when the manager is initially ready.\n     */\n    readonly ready: Promise<void>;\n  }\n\n  /**\n   * The options used to create a service manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The server settings of the manager.\n     */\n    readonly serverSettings?: ServerConnection.ISettings;\n\n    /**\n     * The default drive for the contents manager.\n     */\n    readonly defaultDrive?: Contents.IDrive;\n  }\n}\n"]}