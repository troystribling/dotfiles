/**
 * The namespace for ServerConnection functions.
 */
export declare namespace ServerConnection {
    /**
     * Make an Asynchronous XMLHttpRequest.
     *
     * @param request - The data for the request.
     *
     * @param settings - The server settings to apply to the request.
     *
     * @returns a Promise that resolves with the response data.
     */
    function makeRequest(request: IRequest, settings: ISettings): Promise<IResponse>;
    /**
     * Create a settings object given a subset of options.
     *
     * @param options - An optional partial set of options.
     *
     * @returns The full settings object.
     */
    function makeSettings(options?: Partial<ISettings>): ISettings;
    /**
     * Create an AJAX error from an AJAX success.
     *
     * @param response - The response object.
     *
     * @param message - The optional new error message.  If not given
     *  we use "Invalid Status: <xhr.status>"
     */
    function makeError(response: IResponse, message?: string): IError;
    /**
     * Ajax Request data.
     */
    interface IRequest {
        /**
         * The url of the request.
         */
        url: string;
        /**
         * The HTTP method to use.  Defaults to `'GET'`.
         */
        method?: string;
        /**
         * The return data type (used to parse the return data).  Defaults to 'json'.
         */
        dataType?: string;
        /**
         * The outgoing content type, used to set the `Content-Type` header.
         */
        contentType?: string;
        /**
         * The request data.
         */
        data?: Blob | BufferSource | FormData | URLSearchParams | ReadableStream | string;
        /**
         * Whether to cache the response. Defaults to `false`.
         */
        cache?: boolean;
        /**
         * A mapping of request headers, used via `setRequestHeader`.
         */
        headers?: {
            [key: string]: string;
        };
    }
    /**
     * A server settings object.
     */
    interface ISettings {
        /**
         * The base url of the server.  Defaults to PageConfig.getBaseUrl.
         */
        readonly baseUrl: string;
        /**
         * The base ws url of the server.  Defaults to PageConfig.getWsUrl.
         */
        readonly wsUrl: string;
        /**
         * Is a Boolean that indicates whether or not cross-site Access-Control
         * requests should be made using credentials such as cookies or
         * authorization headers.  Defaults to `false`.
         */
        readonly withCredentials: boolean;
        /**
         * The user name associated with the request.  Defaults to `''`.
         */
        readonly user: string;
        /**
         * The password associated with the request.  Defaults to `''`.
         */
        readonly password: string;
        /**
         * The timeout associated with requests.  Defaults to `0`.
         */
        readonly timeout: number;
        /**
         * The optional token for ajax requests. Defaults to PageConfig `token`.
         */
        readonly token: string;
        readonly requestHeaders: {
            readonly [key: string]: string;
        };
        /**
         * The XMLHttpRequest factory to use.  Defaults creating a new `XMLHttpRequest`.
         */
        readonly xhrFactory: () => XMLHttpRequest;
        /**
         * The WebSocket factory to use.  Defaults to creating a new `WebSocket`.
         */
        readonly wsFactory: (url: string, protocols?: string | string[]) => WebSocket;
    }
    /**
     * Data for a successful  AJAX request.
     */
    interface IResponse {
        /**
         * The `onload` event.
         */
        readonly event: ProgressEvent;
        /**
         * The XHR object.
         */
        readonly xhr: XMLHttpRequest;
        /**
         * The request input data.
         */
        readonly request: IRequest;
        /**
         * The settings associated with the request.
         */
        readonly settings: ISettings;
        /**
         * The data returned by the ajax call.
         */
        readonly data: any;
    }
    /**
     * Data for an unsuccesful AJAX request.
     */
    interface IError {
        /**
         * The event triggering the error.
         */
        readonly event: Event;
        /**
         * The XHR object.
         */
        readonly xhr: XMLHttpRequest;
        /**
         * The request input data.
         */
        readonly request: IRequest;
        /**
         * The settings associated with the request.
         */
        readonly settings: ISettings;
        /**
         * The error message associated with the error.
         */
        readonly message: string;
    }
}
