{"version":3,"file":"serverconnection.js","sourceRoot":"","sources":["../../../../services/src/serverconnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  PageConfig\n} from '@jupyterlab/coreutils';\n\nimport {\n  PromiseDelegate\n} from '@phosphor/coreutils';\n\n\n/**\n * The namespace for ServerConnection functions.\n */\nexport\nnamespace ServerConnection {\n  /**\n   * Make an Asynchronous XMLHttpRequest.\n   *\n   * @param request - The data for the request.\n   *\n   * @param settings - The server settings to apply to the request.\n   *\n   * @returns a Promise that resolves with the response data.\n   */\n  export\n  function makeRequest(request: IRequest, settings: ISettings): Promise<IResponse> {\n    let url = request.url;\n    if (request.cache !== true) {\n      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache.\n      url += ((/\\?/).test(url) ? '&' : '?') + (new Date()).getTime();\n    }\n    let xhr = settings.xhrFactory();\n    xhr.open(request.method || 'GET', url, true,\n             settings.user, settings.password);\n    Private.populateRequest(xhr, request, settings);\n    return Private.handleRequest(xhr, request, settings);\n  }\n\n  /**\n   * Create a settings object given a subset of options.\n   *\n   * @param options - An optional partial set of options.\n   *\n   * @returns The full settings object.\n   */\n  export\n  function makeSettings(options?: Partial<ISettings>) {\n    // Use the singleton default settings if no options are given.\n    if (options === void 0) {\n      if (Private.defaultSettings === void 0) {\n        Private.defaultSettings = Private.makeSettings();\n      }\n      return Private.defaultSettings;\n    }\n    return Private.makeSettings(options);\n  }\n\n  /**\n   * Create an AJAX error from an AJAX success.\n   *\n   * @param response - The response object.\n   *\n   * @param message - The optional new error message.  If not given\n   *  we use \"Invalid Status: <xhr.status>\"\n   */\n  export\n  function makeError(response: IResponse, message?: string): IError {\n    let { xhr, request, settings, event } = response;\n    message = message || `Invalid Status: ${xhr.status}`;\n    return { xhr, request, settings, event, message };\n  }\n\n  /**\n   * Ajax Request data.\n   */\n  export\n  interface IRequest {\n    /**\n     * The url of the request.\n     */\n    url: string;\n\n    /**\n     * The HTTP method to use.  Defaults to `'GET'`.\n     */\n    method?: string;\n\n    /**\n     * The return data type (used to parse the return data).  Defaults to 'json'.\n     */\n    dataType?: string;\n\n    /**\n     * The outgoing content type, used to set the `Content-Type` header.\n     */\n    contentType?: string;\n\n    /**\n     * The request data.\n     */\n    data?: Blob | BufferSource | FormData | URLSearchParams | ReadableStream | string;\n\n    /**\n     * Whether to cache the response. Defaults to `false`.\n     */\n    cache?: boolean;\n\n    /**\n     * A mapping of request headers, used via `setRequestHeader`.\n     */\n    headers?: { [key: string]: string; };\n  }\n\n  /**\n   * A server settings object.\n   */\n  export\n  interface ISettings {\n    /**\n     * The base url of the server.  Defaults to PageConfig.getBaseUrl.\n     */\n    readonly baseUrl: string;\n\n    /**\n     * The base ws url of the server.  Defaults to PageConfig.getWsUrl.\n     */\n    readonly wsUrl: string;\n\n    /**\n     * Is a Boolean that indicates whether or not cross-site Access-Control\n     * requests should be made using credentials such as cookies or\n     * authorization headers.  Defaults to `false`.\n     */\n    readonly withCredentials: boolean;\n\n    /**\n     * The user name associated with the request.  Defaults to `''`.\n     */\n    readonly user: string;\n\n    /**\n     * The password associated with the request.  Defaults to `''`.\n     */\n    readonly password: string;\n\n    /**\n     * The timeout associated with requests.  Defaults to `0`.\n     */\n    readonly timeout: number;\n\n    /**\n     * The optional token for ajax requests. Defaults to PageConfig `token`.\n     */\n    readonly token: string;\n\n    /*\n     * A mapping of request headers, used via `setRequestHeader`.\n     */\n    readonly requestHeaders: { readonly [key: string]: string; };\n\n    /**\n     * The XMLHttpRequest factory to use.  Defaults creating a new `XMLHttpRequest`.\n     */\n    readonly xhrFactory: () => XMLHttpRequest;\n\n    /**\n     * The WebSocket factory to use.  Defaults to creating a new `WebSocket`.\n     */\n    readonly wsFactory: (url: string, protocols?: string | string[]) => WebSocket;\n  }\n\n  /**\n   * Data for a successful  AJAX request.\n   */\n  export\n  interface IResponse {\n    /**\n     * The `onload` event.\n     */\n    readonly event: ProgressEvent;\n\n    /**\n     * The XHR object.\n     */\n    readonly xhr: XMLHttpRequest;\n\n    /**\n     * The request input data.\n     */\n    readonly request: IRequest;\n\n    /**\n     * The settings associated with the request.\n     */\n    readonly settings: ISettings;\n\n    /**\n     * The data returned by the ajax call.\n     */\n    readonly data: any;\n  }\n\n  /**\n   * Data for an unsuccesful AJAX request.\n   */\n  export\n  interface IError {\n    /**\n     * The event triggering the error.\n     */\n    readonly event: Event;\n\n    /**\n     * The XHR object.\n     */\n    readonly xhr: XMLHttpRequest;\n\n    /**\n     * The request input data.\n     */\n    readonly request: IRequest;\n\n    /**\n     * The settings associated with the request.\n     */\n    readonly settings: ISettings;\n\n    /**\n     * The error message associated with the error.\n     */\n    readonly message: string;\n  }\n}\n\n\n/**\n * The namespace for module private data.\n */\nnamespace Private {\n  export\n  let defaultSettings: ServerConnection.ISettings;\n\n  /**\n   * Handle the server connection settings, returning a new value.\n   */\n  export\n  function makeSettings(options: Partial<ServerConnection.ISettings> = {}): ServerConnection.ISettings {\n    let baseUrl = options.baseUrl || PageConfig.getBaseUrl();\n    return {\n      baseUrl,\n      wsUrl: options.wsUrl || PageConfig.getWsUrl(baseUrl),\n      user: options.user || '',\n      password: options.password || '',\n      withCredentials: !!options.withCredentials,\n      timeout: options.timeout || 0,\n      token: options.token || PageConfig.getOption('token'),\n      requestHeaders: { ...options.requestHeaders || {} },\n      xhrFactory: options.xhrFactory || xhrFactory,\n      wsFactory: options.wsFactory || wsFactory\n    };\n  }\n\n  /**\n   * Make an xhr request using settings.\n   */\n  export\n  function populateRequest(xhr: XMLHttpRequest, request: ServerConnection.IRequest, settings: ServerConnection.ISettings): void {\n    if (request.contentType !== void 0) {\n      xhr.setRequestHeader('Content-Type', request.contentType);\n    }\n\n    xhr.timeout = settings.timeout;\n    if (settings.withCredentials) {\n      xhr.withCredentials = true;\n    }\n\n    // Write the request headers.\n    let headers = request.headers;\n    if (headers) {\n      for (let prop in headers) {\n        xhr.setRequestHeader(prop, headers[prop]);\n      }\n    }\n\n    headers = settings.requestHeaders;\n    for (let prop in headers) {\n      xhr.setRequestHeader(prop, headers[prop]);\n    }\n\n    // Handle authorization.\n    if (settings.token) {\n      xhr.setRequestHeader('Authorization', `token ${settings.token}`);\n    } else if (typeof document !== 'undefined' && document.cookie) {\n      let xsrfToken = getCookie('_xsrf');\n      if (xsrfToken !== void 0) {\n        xhr.setRequestHeader('X-XSRFToken', xsrfToken);\n      }\n    }\n  }\n\n  /**\n   * Handle a request.\n   */\n  export\n  function handleRequest(xhr: XMLHttpRequest, request: ServerConnection.IRequest, settings: ServerConnection.ISettings): Promise<ServerConnection.IResponse> {\n    let delegate = new PromiseDelegate<ServerConnection.IResponse>();\n\n    xhr.onload = (event: ProgressEvent) => {\n      if (xhr.status >= 300) {\n        let message = xhr.statusText || `Invalid Status: ${xhr.status}`;\n        delegate.reject({ event, xhr, request, settings, message });\n        return;\n      }\n      let data = xhr.responseText;\n      if (request.dataType === 'json' || request.dataType === undefined) {\n         try {\n          data = JSON.parse(data);\n        } catch (err) {\n          // no-op\n        }\n      }\n      delegate.resolve({ xhr, request, settings, data, event });\n    };\n\n    xhr.onabort = (event: Event) => {\n      delegate.reject({ xhr, event, request, settings, message: 'Aborted' });\n    };\n\n    xhr.onerror = (event?: ErrorEvent) => {\n      delegate.reject({ xhr, event, request, settings, message: event ? event.message : 'Errored' });\n    };\n\n    xhr.ontimeout = (event: ProgressEvent) => {\n      delegate.reject({ xhr, event, request, settings, message: 'Timed Out' });\n    };\n\n    // Send the request, adding data if needed.\n    switch (request.method) {\n    case 'GET':\n    case 'DELETE':\n    case 'HEAD':\n    case 'CONNECT':\n    case 'TRACE':\n      // These methods take no payload.\n      xhr.send();\n      break;\n    default:\n      // Set the content type if there is no given data.\n      if (!request.data) {\n        xhr.setRequestHeader('Content-Type', 'application/json');\n      }\n      xhr.send(request.data || '{}');\n    }\n\n    return delegate.promise;\n  }\n\n  /**\n   * Create a new xhr object.\n   */\n  function xhrFactory(): XMLHttpRequest {\n    return new XMLHttpRequest();\n  }\n\n  /**\n   * Create a new ws object.\n   */\n  function wsFactory(url: string, protocols?: string | string[]): WebSocket {\n    return new WebSocket(url, protocols);\n  }\n\n  /**\n   * Get a cookie from the document.\n   */\n  function getCookie(name: string) {\n    // from tornado docs: http://www.tornadoweb.org/en/stable/guide/security.html\n    let r = document.cookie.match('\\\\b' + name + '=([^;]*)\\\\b');\n    return r ? r[1] : void 0;\n  }\n}\n"]}