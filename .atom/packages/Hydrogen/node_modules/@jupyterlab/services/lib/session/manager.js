"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var algorithm_1 = require("@phosphor/algorithm");
var coreutils_1 = require("@phosphor/coreutils");
var signaling_1 = require("@phosphor/signaling");
var kernel_1 = require("../kernel");
var __1 = require("..");
var session_1 = require("./session");
/**
 * An implementation of a session manager.
 */
var SessionManager = /** @class */ (function () {
    /**
     * Construct a new session manager.
     *
     * @param options - The default options for each session.
     */
    function SessionManager(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this._isDisposed = false;
        this._running = [];
        this._specs = null;
        this._runningTimer = -1;
        this._specsTimer = -1;
        this._specsChanged = new signaling_1.Signal(this);
        this._runningChanged = new signaling_1.Signal(this);
        this.serverSettings = (options.serverSettings || __1.ServerConnection.makeSettings());
        // Initialize internal data.
        this._readyPromise = this._refreshSpecs().then(function () {
            return _this._refreshRunning();
        });
        // Set up polling.
        this._runningTimer = setInterval(function () {
            _this._refreshRunning();
        }, 10000);
        this._specsTimer = setInterval(function () {
            _this._refreshSpecs();
        }, 61000);
    }
    Object.defineProperty(SessionManager.prototype, "specsChanged", {
        /**
         * A signal emitted when the kernel specs change.
         */
        get: function () {
            return this._specsChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionManager.prototype, "runningChanged", {
        /**
         * A signal emitted when the running sessions change.
         */
        get: function () {
            return this._runningChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionManager.prototype, "isDisposed", {
        /**
         * Test whether the terminal manager is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionManager.prototype, "specs", {
        /**
         * Get the most recently fetched kernel specs.
         */
        get: function () {
            return this._specs;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionManager.prototype, "isReady", {
        /**
         * Test whether the manager is ready.
         */
        get: function () {
            return this._specs !== null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionManager.prototype, "ready", {
        /**
         * A promise that fulfills when the manager is ready.
         */
        get: function () {
            return this._readyPromise;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the manager.
     */
    SessionManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        clearInterval(this._runningTimer);
        clearInterval(this._specsTimer);
        signaling_1.Signal.clearData(this);
        this._running.length = 0;
    };
    /**
     * Create an iterator over the most recent running sessions.
     *
     * @returns A new iterator over the running sessions.
     */
    SessionManager.prototype.running = function () {
        return algorithm_1.iter(this._running);
    };
    /**
     * Force a refresh of the specs from the server.
     *
     * @returns A promise that resolves when the specs are fetched.
     *
     * #### Notes
     * This is intended to be called only in response to a user action,
     * since the manager maintains its internal state.
     */
    SessionManager.prototype.refreshSpecs = function () {
        return this._refreshSpecs();
    };
    /**
     * Force a refresh of the running sessions.
     *
     * @returns A promise that with the list of running sessions.
     *
     * #### Notes
     * This is not typically meant to be called by the user, since the
     * manager maintains its own internal state.
     */
    SessionManager.prototype.refreshRunning = function () {
        return this._refreshRunning();
    };
    /**
     * Start a new session.  See also [[startNewSession]].
     *
     * @param options - Overrides for the default options, must include a
     *   `'path'`.
     */
    SessionManager.prototype.startNew = function (options) {
        var _this = this;
        var serverSettings = this.serverSettings;
        return session_1.Session.startNew(__assign({}, options, { serverSettings: serverSettings })).then(function (session) {
            _this._onStarted(session);
            return session;
        });
    };
    /**
     * Find a session associated with a path and stop it is the only session using
     * that kernel.
     *
     * @param path - The path in question.
     *
     * @returns A promise that resolves when the relevant sessions are stopped.
     */
    SessionManager.prototype.stopIfNeeded = function (path) {
        var _this = this;
        return session_1.Session.listRunning(this.serverSettings).then(function (sessions) {
            var matches = sessions.filter(function (value) { return value.path === path; });
            if (matches.length === 1) {
                var id = matches[0].id;
                return _this.shutdown(id).catch(function () { });
            }
        }).catch(function () { return Promise.resolve(void 0); }); // Always succeed.
    };
    /**
     * Find a session by id.
     */
    SessionManager.prototype.findById = function (id) {
        return session_1.Session.findById(id, this.serverSettings);
    };
    /**
     * Find a session by path.
     */
    SessionManager.prototype.findByPath = function (path) {
        return session_1.Session.findByPath(path, this.serverSettings);
    };
    /*
     * Connect to a running session.  See also [[connectToSession]].
     */
    SessionManager.prototype.connectTo = function (id) {
        var _this = this;
        return session_1.Session.connectTo(id, this.serverSettings).then(function (session) {
            _this._onStarted(session);
            return session;
        });
    };
    /**
     * Shut down a session by id.
     */
    SessionManager.prototype.shutdown = function (id) {
        var _this = this;
        return session_1.Session.shutdown(id, this.serverSettings).then(function () {
            _this._onTerminated(id);
        });
    };
    /**
     * Handle a session terminating.
     */
    SessionManager.prototype._onTerminated = function (id) {
        var index = algorithm_1.ArrayExt.findFirstIndex(this._running, function (value) { return value.id === id; });
        if (index !== -1) {
            this._running.splice(index, 1);
            this._runningChanged.emit(this._running.slice());
        }
    };
    /**
     * Handle a session starting.
     */
    SessionManager.prototype._onStarted = function (session) {
        var _this = this;
        var id = session.id;
        var index = algorithm_1.ArrayExt.findFirstIndex(this._running, function (value) { return value.id === id; });
        if (index === -1) {
            this._running.push(session.model);
            this._runningChanged.emit(this._running.slice());
        }
        session.terminated.connect(function () {
            _this._onTerminated(id);
        });
        session.propertyChanged.connect(function () {
            _this._onChanged(session.model);
        });
        session.kernelChanged.connect(function () {
            _this._onChanged(session.model);
        });
    };
    /**
     * Handle a change to a session.
     */
    SessionManager.prototype._onChanged = function (model) {
        var index = algorithm_1.ArrayExt.findFirstIndex(this._running, function (value) { return value.id === model.id; });
        if (index !== -1) {
            this._running[index] = model;
            this._runningChanged.emit(this._running.slice());
        }
    };
    /**
     * Refresh the specs.
     */
    SessionManager.prototype._refreshSpecs = function () {
        var _this = this;
        return kernel_1.Kernel.getSpecs(this.serverSettings).then(function (specs) {
            if (!coreutils_1.JSONExt.deepEqual(specs, _this._specs)) {
                _this._specs = specs;
                _this._specsChanged.emit(specs);
            }
        });
    };
    /**
     * Refresh the running sessions.
     */
    SessionManager.prototype._refreshRunning = function () {
        var _this = this;
        return session_1.Session.listRunning(this.serverSettings).then(function (running) {
            if (!coreutils_1.JSONExt.deepEqual(running, _this._running)) {
                _this._running = running.slice();
                _this._runningChanged.emit(running);
            }
        });
    };
    return SessionManager;
}());
exports.SessionManager = SessionManager;
