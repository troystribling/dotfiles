{"version":3,"file":"session.js","sourceRoot":"","sources":["../../../../../services/src/session/session.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AA0B3D,qCAEmB;AAGnB;;GAEG;AACH,IACU,OAAO,CAychB;AA1cD,WACU,OAAO;IAkIf;;;;;;;;;;;;;OAaG;IACH,qBACqB,QAAqC;QACxD,MAAM,CAAC,wBAAc,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC9C,CAAC;IAFQ,mBAAW,cAEnB,CAAA;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,kBACkB,OAAyB;QACzC,MAAM,CAAC,wBAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC1C,CAAC;IAFQ,gBAAQ,WAEhB,CAAA;IAED;;;;;;;;;;;;;;;;OAgBG;IACH,kBACkB,EAAU,EAAE,QAAqC;QACjE,MAAM,CAAC,wBAAc,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAFQ,gBAAQ,WAEhB,CAAA;IAED;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,oBACoB,IAAY,EAAE,QAAqC;QACrE,MAAM,CAAC,wBAAc,CAAC,UAAU,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;IAFQ,kBAAU,aAElB,CAAA;IAED;;;;;;;;;;;;;;;;;;;OAmBG;IACH,mBACmB,EAAU,EAAE,QAAqC;QAClE,MAAM,CAAC,wBAAc,CAAC,SAAS,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAChD,CAAC;IAFQ,iBAAS,YAEjB,CAAA;IAED;;;;;;;;;OASG;IACH,kBACkB,EAAU,EAAE,QAAqC;QACjE,MAAM,CAAC,wBAAc,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC/C,CAAC;IAFQ,gBAAQ,WAEhB,CAAA;AAqMH,CAAC,EAzcS,OAAO,GAAP,eAAO,KAAP,eAAO,QAychB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  IIterator\n} from '@phosphor/algorithm';\n\nimport {\n  JSONObject\n} from '@phosphor/coreutils';\n\nimport {\n  IDisposable\n} from '@phosphor/disposable';\n\nimport {\n  ISignal\n} from '@phosphor/signaling';\n\nimport {\n  Kernel, KernelMessage\n} from '../kernel';\n\nimport {\n  ServerConnection\n} from '..';\n\nimport {\n  DefaultSession\n} from './default';\n\n\n/**\n * A namespace for session interfaces and factory functions.\n */\nexport\nnamespace Session {\n  /**\n   * Interface of a session object.\n   */\n  export\n  interface ISession extends IDisposable {\n    /**\n     * A signal emitted when the session is shut down.\n     */\n    terminated: ISignal<this, void>;\n\n    /**\n     * A signal emitted when the kernel changes.\n     */\n    kernelChanged: ISignal<this, Kernel.IKernelConnection>;\n\n    /**\n     * A signal emitted when the session status changes.\n     */\n    statusChanged: ISignal<this, Kernel.Status>;\n\n    /**\n     * A signal emitted when a session property changes.\n     */\n    readonly propertyChanged: ISignal<this, 'path' | 'name' | 'type'>;\n\n    /**\n     * A signal emitted for iopub kernel messages.\n     */\n    iopubMessage: ISignal<this, KernelMessage.IIOPubMessage>;\n\n    /**\n     * A signal emitted for unhandled kernel message.\n     */\n    unhandledMessage: ISignal<this, KernelMessage.IMessage>;\n\n    /**\n     * Unique id of the session.\n     */\n    readonly id: string;\n\n    /**\n     * The current path associated with the sesssion.\n     */\n    readonly path: string;\n\n    /**\n     * The current name associated with the sesssion.\n     */\n    readonly name: string;\n\n    /**\n     * The type of the session.\n     */\n    readonly type: string;\n\n    /**\n     * The server settings of the session.\n     */\n    readonly serverSettings: ServerConnection.ISettings;\n\n    /**\n     * The model associated with the session.\n     */\n    readonly model: Session.IModel;\n\n    /**\n     * The kernel.\n     *\n     * #### Notes\n     * This is a read-only property, and can be altered by [changeKernel].\n     */\n    readonly kernel: Kernel.IKernelConnection;\n\n    /**\n     * The current status of the session.\n     *\n     * #### Notes\n     * This is a delegate to the kernel status.\n     */\n    readonly status: Kernel.Status;\n\n    /**\n     * Change the session path.\n     *\n     * @param path - The new session path.\n     *\n     * @returns A promise that resolves when the session has renamed.\n     *\n     * #### Notes\n     * This uses the Jupyter REST API, and the response is validated.\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     */\n    setPath(path: string): Promise<void>;\n\n    /**\n     * Change the session name.\n     */\n    setName(name: string): Promise<void>;\n\n    /**\n     * Change the session type.\n     */\n    setType(type: string): Promise<void>;\n\n    /**\n     * Change the kernel.\n     *\n     * @param options - The name or id of the new kernel.\n     *\n     * @returns A promise that resolves with the new kernel model.\n     *\n     * #### Notes\n     * This shuts down the existing kernel and creates a new kernel,\n     * keeping the existing session ID and path.\n     */\n    changeKernel(options: Partial<Kernel.IModel>): Promise<Kernel.IKernelConnection>;\n\n    /**\n     * Kill the kernel and shutdown the session.\n     *\n     * @returns A promise that resolves when the session is shut down.\n     *\n     * #### Notes\n     * This uses the Jupyter REST API, and the response is validated.\n     * The promise is fulfilled on a valid response and rejected otherwise.\n     */\n    shutdown(): Promise<void>;\n  }\n\n  /**\n   * List the running sessions.\n   *\n   * @param settings - The server settings to use for the request.\n   *\n   * @returns A promise that resolves with the list of session models.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions), and validates the response.\n   *\n   * All client-side sessions are updated with current information.\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   */\n  export\n  function listRunning(settings?: ServerConnection.ISettings): Promise<Session.IModel[]> {\n    return DefaultSession.listRunning(settings);\n  }\n\n  /**\n   * Start a new session.\n   *\n   * @param options - The options used to start the session.\n   *\n   * @returns A promise that resolves with the session instance.\n   *\n   * #### Notes\n   * Uses the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions), and validates the response.\n   *\n   * A path must be provided.  If a kernel id is given, it will\n   * connect to an existing kernel.  If no kernel id or name is given,\n   * the server will start the default kernel type.\n   *\n   * The promise is fulfilled on a valid response and rejected otherwise.\n   *\n   * Wrap the result in an Session object. The promise is fulfilled\n   * when the session is created on the server, otherwise the promise is\n   * rejected.\n   */\n  export\n  function startNew(options: Session.IOptions): Promise<ISession> {\n    return DefaultSession.startNew(options);\n  }\n\n  /**\n   * Find a session by id.\n   *\n   * @param id - The id of the target session.\n   *\n   * @param settings - The server settings.\n   *\n   * @returns A promise that resolves with the session model.\n   *\n   * #### Notes\n   * If the session was already started via `startNew`, the existing\n   * Session object's information is used in the fulfillment value.\n   *\n   * Otherwise, we attempt to find to the existing session.\n   * The promise is fulfilled when the session is found,\n   * otherwise the promise is rejected.\n   */\n  export\n  function findById(id: string, settings?: ServerConnection.ISettings): Promise<Session.IModel> {\n    return DefaultSession.findById(id, settings);\n  }\n\n  /**\n   * Find a session by path.\n   *\n   * @param path - The path of the target session.\n   *\n   * @param settings: The server settings.\n   *\n   * @returns A promise that resolves with the session model.\n   *\n   * #### Notes\n   * If the session was already started via `startNewSession`, the existing\n   * Session object's info is used in the fulfillment value.\n   *\n   * Otherwise, we attempt to find to the existing\n   * session using [listRunningSessions].\n   * The promise is fulfilled when the session is found,\n   * otherwise the promise is rejected.\n   *\n   * If the session was not already started and no `options` are given,\n   * the promise is rejected.\n   */\n  export\n  function findByPath(path: string, settings?: ServerConnection.ISettings): Promise<Session.IModel> {\n    return DefaultSession.findByPath(path, settings);\n  }\n\n  /**\n   * Connect to a running session.\n   *\n   * @param id - The id of the target session.\n   *\n   * @param settigns - The server settings.\n   *\n   * @returns A promise that resolves with the session instance.\n   *\n   * #### Notes\n   * If the session was already started via `startNew`, the existing\n   * Session object is used as the fulfillment value.\n   *\n   * Otherwise, we attempt to connect to the existing session.\n   * The promise is fulfilled when the session is ready on the server,\n   * otherwise the promise is rejected.\n   *\n   * If the session was not already started and no `options` are given,\n   * the promise is rejected.\n   */\n  export\n  function connectTo(id: string, settings?: ServerConnection.ISettings): Promise<ISession> {\n    return DefaultSession.connectTo(id, settings);\n  }\n\n  /**\n   * Shut down a session by id.\n   *\n   * @param id - The id of the target session.\n   *\n   * @param settings - The server settings.\n   *\n   * @returns A promise that resolves when the session is shut down.\n   *\n   */\n  export\n  function shutdown(id: string, settings?: ServerConnection.ISettings): Promise<void> {\n    return DefaultSession.shutdown(id, settings);\n  }\n\n  /**\n   * The session initialization options.\n   */\n  export\n  interface IOptions {\n    /**\n     * The path (not including name) to the session.\n     */\n    path: string;\n\n    /**\n     * The name of the session.\n     */\n    name?: string;\n\n    /**\n     * The type of the session.\n     */\n    type?: string;\n\n    /**\n     * The type of kernel (e.g. python3).\n     */\n    kernelName?: string;\n\n    /**\n     * The id of an existing kernel.\n     */\n    kernelId?: string;\n\n    /**\n     * The server settings.\n     */\n    serverSettings?: ServerConnection.ISettings;\n\n    /**\n     * The username of the session client.\n     */\n    username?: string;\n\n    /**\n     * The unique identifier for the session client.\n     */\n    clientId?: string;\n  }\n\n  /**\n   * Object which manages session instances.\n   *\n   * #### Notes\n   * The manager is responsible for maintaining the state of running\n   * sessions and the initial fetch of kernel specs.\n   */\n  export\n  interface IManager extends IDisposable {\n    /**\n     * A signal emitted when the kernel specs change.\n     */\n    specsChanged: ISignal<this, Kernel.ISpecModels>;\n\n    /**\n     * A signal emitted when the running sessions change.\n     */\n    runningChanged: ISignal<this, IModel[]>;\n\n    /**\n     * The server settings for the manager.\n     */\n    serverSettings?: ServerConnection.ISettings;\n\n    /**\n     * The cached kernel specs.\n     *\n     * #### Notes\n     * This value will be null until the manager is ready.\n     */\n    readonly specs: Kernel.ISpecModels | null;\n\n    /**\n     * Test whether the manager is ready.\n     */\n    readonly isReady: boolean;\n\n    /**\n     * A promise that is fulfilled when the manager is ready.\n     */\n    readonly ready: Promise<void>;\n\n    /**\n     * Create an iterator over the known running sessions.\n     *\n     * @returns A new iterator over the running sessions.\n     */\n    running(): IIterator<IModel>;\n\n    /**\n     * Start a new session.\n     *\n     * @param options - The session options to use.\n     *\n     * @returns A promise that resolves with the session instance.\n     *\n     * #### Notes\n     * The `serverSettings` of the manager will be used.\n     */\n    startNew(options: IOptions): Promise<ISession>;\n\n    /**\n     * Find a session by id.\n     *\n     * @param id - The id of the target session.\n     *\n     * @returns A promise that resolves with the session's model.\n     */\n    findById(id: string): Promise<IModel>;\n\n    /**\n     * Find a session by path.\n     *\n     * @param path - The path of the target session.\n     *\n     * @returns A promise that resolves with the session's model.\n     */\n    findByPath(path: string): Promise<IModel>;\n\n    /**\n     * Connect to a running session.\n     *\n     * @param id - The id of the target session.\n     *\n     * @param options - The session options to use.\n     *\n     * @returns A promise that resolves with the new session instance.\n     */\n    connectTo(id: string): Promise<ISession>;\n\n    /**\n     * Shut down a session by id.\n     *\n     * @param id - The id of the target kernel.\n     *\n     * @returns A promise that resolves when the operation is complete.\n     */\n    shutdown(id: string): Promise<void>;\n\n    /**\n     * Force a refresh of the specs from the server.\n     *\n     * @returns A promise that resolves when the specs are fetched.\n     *\n     * #### Notes\n     * This is intended to be called only in response to a user action,\n     * since the manager maintains its internal state.\n     */\n    refreshSpecs(): Promise<void>;\n\n    /**\n     * Force a refresh of the running sessions.\n     *\n     * @returns A promise that resolves when the models are refreshed.\n     *\n     * #### Notes\n     * This is intended to be called only in response to a user action,\n     * since the manager maintains its internal state.\n     */\n    refreshRunning(): Promise<void>;\n\n    /**\n     * Find a session associated with a path and stop it is the only session\n     * using that kernel.\n     *\n     * @param path - The path in question.\n     *\n     * @returns A promise that resolves when the relevant sessions are stopped.\n     */\n    stopIfNeeded(path: string): Promise<void>;\n  }\n\n  /**\n   * The session model used by the server.\n   *\n   * #### Notes\n   * See the [Jupyter Notebook API](http://petstore.swagger.io/?url=https://raw.githubusercontent.com/jupyter/notebook/master/notebook/services/api/api.yaml#!/sessions).\n   */\n  export\n  interface IModel extends JSONObject {\n    /**\n     * The unique identifier for the session client.\n     */\n    readonly id: string;\n    readonly name: string;\n    readonly path: string;\n    readonly type: string;\n    readonly kernel: Kernel.IModel;\n  }\n}\n"]}