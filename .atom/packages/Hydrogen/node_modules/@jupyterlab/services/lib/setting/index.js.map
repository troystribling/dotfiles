{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../services/src/setting/index.ts"],"names":[],"mappings":";AAAA,0CAA0C;AAC1C,2DAA2D;;AAE3D,mDAE+B;AAE/B,wDAE6B;AAG7B;;GAEG;AACH,IAAM,oBAAoB,GAAG,kBAAkB,CAAC;AAGhD;;GAEG;AACH;IAEE;;OAEG;IACH,wBAAY,OAAsC;QAAtC,wBAAA,EAAA,YAAsC;QAChD,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc;YAC1C,mCAAgB,CAAC,YAAY,EAAE,CAAC;IACpC,CAAC;IAOD;;;;;;;OAOG;IACH,8BAAK,GAAL,UAAM,EAAU;QACd,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;QACzC,IAAM,OAAO,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC;QACtD,IAAA,oCAAc,CAAU;QAChC,IAAM,OAAO,GAAG,mCAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAEtE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,QAAQ;YAClB,IAAA,4BAAM,CAAkB;YAEhC,EAAE,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBACnB,MAAM,mCAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YAED,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;QACvB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,MAAM,IAAM,MAAM,mCAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IAED;;;;;;;;;OASG;IACH,6BAAI,GAAJ,UAAK,EAAU,EAAE,GAAW;QAC1B,IAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;QACzC,IAAM,OAAO,GAAG;YACd,IAAI,EAAE,GAAG;YACT,WAAW,EAAE,iBAAiB;YAC9B,MAAM,EAAE,KAAK;YACb,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC;SAC3B,CAAC;QACM,IAAA,oCAAc,CAAU;QAChC,IAAM,OAAO,GAAG,mCAAgB,CAAC,WAAW,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAEtE,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,UAAA,QAAQ;YAClB,IAAA,4BAAM,CAAkB;YAEhC,EAAE,CAAC,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBACnB,MAAM,mCAAgB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YAC7C,CAAC;YAED,MAAM,CAAC,KAAK,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,MAAM,IAAM,MAAM,mCAAgB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpE,CAAC;IACH,qBAAC;AAAD,CAAC,AAvED,IAuEC;AAtEK,wCAAc;AAwGpB;;GAEG;AACH,IAAU,OAAO,CAQhB;AARD,WAAU,OAAO;IACf;;OAEG;IACH,aACa,IAAY,EAAE,EAAU;QACnC,MAAM,CAAC,kBAAM,CAAC,IAAI,CAAC,IAAI,EAAE,oBAAoB,EAAE,EAAE,CAAC,CAAC;IACrD,CAAC;IAFQ,WAAG,MAEX,CAAA;AACH,CAAC,EARS,OAAO,KAAP,OAAO,QAQhB","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  ISettingRegistry, URLExt\n} from '@jupyterlab/coreutils';\n\nimport {\n  ServerConnection\n} from '../serverconnection';\n\n\n/**\n * The url for the lab settings service.\n */\nconst SERVICE_SETTINGS_URL = 'lab/api/settings';\n\n\n/**\n * The static namespace for `SettingManager`.\n */\nexport\nclass SettingManager {\n  /**\n   * Create a new setting manager.\n   */\n  constructor(options: SettingManager.IOptions = { }) {\n    this.serverSettings = options.serverSettings ||\n      ServerConnection.makeSettings();\n  }\n\n  /**\n   * The server settings used to make API requests.\n   */\n  readonly serverSettings: ServerConnection.ISettings;\n\n  /**\n   * Fetch a plugin's settings.\n   *\n   * @param id - The plugin's ID.\n   *\n   * @returns A promise that resolves with the plugin settings or rejects\n   * with a `ServerConnection.IError`.\n   */\n  fetch(id: string): Promise<ISettingRegistry.IPlugin> {\n    const base = this.serverSettings.baseUrl;\n    const request = { method: 'GET', url: Private.url(base, id) };\n    const { serverSettings } = this;\n    const promise = ServerConnection.makeRequest(request, serverSettings);\n\n    return promise.then(response => {\n      const { status } = response.xhr;\n\n      if (status !== 200) {\n        throw ServerConnection.makeError(response);\n      }\n\n      return response.data;\n    }).catch(reason => { throw ServerConnection.makeError(reason); });\n  }\n\n  /**\n   * Save a plugin's settings.\n   *\n   * @param id - The plugin's ID.\n   *\n   * @param raw - The user setting values as a raw string of JSON with comments.\n   *\n   * @returns A promise that resolves when saving is complete or rejects\n   * with a `ServerConnection.IError`.\n   */\n  save(id: string, raw: string): Promise<void> {\n    const base = this.serverSettings.baseUrl;\n    const request = {\n      data: raw,\n      contentType: 'text/javascript',\n      method: 'PUT',\n      url: Private.url(base, id)\n    };\n    const { serverSettings } = this;\n    const promise = ServerConnection.makeRequest(request, serverSettings);\n\n    return promise.then(response => {\n      const { status } = response.xhr;\n\n      if (status !== 204) {\n        throw ServerConnection.makeError(response);\n      }\n\n      return void 0;\n    }).catch(reason => { throw ServerConnection.makeError(reason); });\n  }\n}\n\n\n/**\n * A namespace for `SettingManager` statics.\n */\nexport\nnamespace SettingManager {\n  /**\n   * The instantiation options for a setting manager.\n   */\n  export\n  interface IOptions {\n    /**\n     * The server settings used to make API requests.\n     */\n    serverSettings?: ServerConnection.ISettings;\n  }\n}\n\n\n/**\n * A namespace for setting API interfaces.\n */\nexport\nnamespace Setting {\n  /**\n   * The interface for the setting system manager.\n   */\n  export\n  interface IManager extends SettingManager { }\n}\n\n\n/**\n * A namespace for private data.\n */\nnamespace Private {\n  /**\n   * Get the url for a plugin's settings.\n   */\n  export\n  function url(base: string, id: string): string {\n    return URLExt.join(base, SERVICE_SETTINGS_URL, id);\n  }\n}\n"]}