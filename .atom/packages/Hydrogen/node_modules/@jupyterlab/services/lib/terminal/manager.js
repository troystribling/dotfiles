"use strict";
// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
Object.defineProperty(exports, "__esModule", { value: true });
var algorithm_1 = require("@phosphor/algorithm");
var coreutils_1 = require("@phosphor/coreutils");
var signaling_1 = require("@phosphor/signaling");
var utils = require("../utils");
var terminal_1 = require("./terminal");
/**
 * A terminal session manager.
 */
var TerminalManager = (function () {
    /**
     * Construct a new terminal manager.
     */
    function TerminalManager(options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this._baseUrl = '';
        this._wsUrl = '';
        this._ajaxSettings = '';
        this._running = [];
        this._isDisposed = false;
        this._isReady = false;
        this._refreshTimer = -1;
        this._runningChanged = new signaling_1.Signal(this);
        this._baseUrl = options.baseUrl || utils.getBaseUrl();
        this._wsUrl = options.wsUrl || utils.getWsUrl(this._baseUrl);
        this._ajaxSettings = JSON.stringify(options.ajaxSettings || {});
        // Set up state handling if terminals are available.
        if (terminal_1.TerminalSession.isAvailable()) {
            // Initialize internal data.
            this._readyPromise = this._refreshRunning();
            // Set up polling.
            this._refreshTimer = setInterval(function () {
                _this._refreshRunning();
            }, 10000);
        }
    }
    Object.defineProperty(TerminalManager.prototype, "runningChanged", {
        /**
         * A signal emitted when the running terminals change.
         */
        get: function () {
            return this._runningChanged;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerminalManager.prototype, "isDisposed", {
        /**
         * Test whether the terminal manager is disposed.
         */
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerminalManager.prototype, "baseUrl", {
        /**
         * The base url of the manager.
         */
        get: function () {
            return this._baseUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerminalManager.prototype, "wsUrl", {
        /**
         * The base ws url of the manager.
         */
        get: function () {
            return this._wsUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerminalManager.prototype, "ajaxSettings", {
        /**
         * The default ajax settings for the manager.
         */
        get: function () {
            return JSON.parse(this._ajaxSettings);
        },
        /**
         * Set the default ajax settings for the manager.
         */
        set: function (value) {
            this._ajaxSettings = JSON.stringify(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerminalManager.prototype, "isReady", {
        /**
         * Test whether the manger is ready.
         */
        get: function () {
            return this._isReady;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Dispose of the resources used by the manager.
     */
    TerminalManager.prototype.dispose = function () {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        clearInterval(this._refreshTimer);
        signaling_1.Signal.clearData(this);
        this._running = [];
    };
    Object.defineProperty(TerminalManager.prototype, "ready", {
        /**
         * A promise that fulfills when the manager is ready.
         */
        get: function () {
            return this._readyPromise || Promise.reject('Terminals unavailable');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Whether the terminal service is available.
     */
    TerminalManager.prototype.isAvailable = function () {
        return terminal_1.TerminalSession.isAvailable();
    };
    /**
     * Create an iterator over the most recent running terminals.
     *
     * @returns A new iterator over the running terminals.
     */
    TerminalManager.prototype.running = function () {
        return algorithm_1.iter(this._running);
    };
    /**
     * Create a new terminal session.
     *
     * @param ajaxSettings - The ajaxSettings to use, overrides manager
     *   settings.
     *
     * @returns A promise that resolves with the terminal instance.
     *
     * #### Notes
     * The baseUrl and wsUrl of the options will be forced
     * to the ones used by the manager. The ajaxSettings of the manager
     * will be used unless overridden.
     */
    TerminalManager.prototype.startNew = function (options) {
        var _this = this;
        return terminal_1.TerminalSession.startNew(this._getOptions(options)).then(function (session) {
            _this._onStarted(session);
            return session;
        });
    };
    /*
     * Connect to a running session.
     *
     * @param name - The name of the target session.
     *
     * @param ajaxSettings - The ajaxSettings to use, overrides manager
     *   settings.
     *
     * @returns A promise that resolves with the new session instance.
     *
     * #### Notes
     * The baseUrl and wsUrl of the options will be forced
     * to the ones used by the manager. The ajaxSettings of the manager
     * will be used unless overridden.
     */
    TerminalManager.prototype.connectTo = function (name, options) {
        var _this = this;
        return terminal_1.TerminalSession.connectTo(name, this._getOptions(options)).then(function (session) {
            _this._onStarted(session);
            return session;
        });
    };
    /**
     * Shut down a terminal session by name.
     */
    TerminalManager.prototype.shutdown = function (name) {
        var _this = this;
        return terminal_1.TerminalSession.shutdown(name, this._getOptions()).then(function () {
            _this._onTerminated(name);
        });
    };
    /**
     * Force a refresh of the running sessions.
     *
     * @returns A promise that with the list of running sessions.
     *
     * #### Notes
     * This is not typically meant to be called by the user, since the
     * manager maintains its own internal state.
     */
    TerminalManager.prototype.refreshRunning = function () {
        return this._refreshRunning();
    };
    /**
     * Handle a session terminating.
     */
    TerminalManager.prototype._onTerminated = function (name) {
        var index = algorithm_1.ArrayExt.findFirstIndex(this._running, function (value) { return value.name === name; });
        if (index !== -1) {
            this._running.splice(index, 1);
            this._runningChanged.emit(this._running.slice());
        }
    };
    /**
     * Handle a session starting.
     */
    TerminalManager.prototype._onStarted = function (session) {
        var _this = this;
        var name = session.name;
        var index = algorithm_1.ArrayExt.findFirstIndex(this._running, function (value) { return value.name === name; });
        if (index === -1) {
            this._running.push(session.model);
            this._runningChanged.emit(this._running.slice());
        }
        session.terminated.connect(function () {
            _this._onTerminated(name);
        });
    };
    /**
     * Refresh the running sessions.
     */
    TerminalManager.prototype._refreshRunning = function () {
        var _this = this;
        return terminal_1.TerminalSession.listRunning(this._getOptions({})).then(function (running) {
            _this._isReady = true;
            if (!coreutils_1.JSONExt.deepEqual(running, _this._running)) {
                _this._running = running.slice();
                _this._runningChanged.emit(running);
            }
        });
    };
    /**
     * Get a set of options to pass.
     */
    TerminalManager.prototype._getOptions = function (options) {
        if (options === void 0) { options = {}; }
        options.baseUrl = this.baseUrl;
        options.wsUrl = this.wsUrl;
        options.ajaxSettings = options.ajaxSettings || this.ajaxSettings;
        return options;
    };
    return TerminalManager;
}());
exports.TerminalManager = TerminalManager;
