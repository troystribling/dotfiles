import { ImmutableOutput } from "./outputs";
import { ExecutionCount } from "./primitives";
import { List as ImmutableList, Map as ImmutableMap, Record, RecordOf } from "immutable";
export interface CodeCellParams {
    cell_type: "code";
    id?: string;
    metadata: ImmutableMap<string, any>;
    execution_count: ExecutionCount;
    source: string;
    outputs: ImmutableList<ImmutableOutput>;
}
export declare const makeCodeCell: Record.Factory<CodeCellParams>;
export declare type ImmutableCodeCell = RecordOf<CodeCellParams>;
export interface MarkdownCellParams {
    cell_type: "markdown";
    id?: string;
    source: string;
    metadata: ImmutableMap<string, any>;
}
export declare const makeMarkdownCell: Record.Factory<MarkdownCellParams>;
export declare type ImmutableMarkdownCell = RecordOf<MarkdownCellParams>;
export interface RawCellParams {
    id?: string;
    cell_type: "raw";
    source: string;
    metadata: ImmutableMap<string, any>;
}
export declare const makeRawCell: Record.Factory<RawCellParams>;
export declare type ImmutableRawCell = RecordOf<RawCellParams>;
export declare type ImmutableCell = ImmutableMarkdownCell | ImmutableCodeCell | ImmutableRawCell;
export declare type CellType = "raw" | "markdown" | "code";
