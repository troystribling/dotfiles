"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var v4 = require("./v4");
var v3 = require("./v3");

var _require = require("./structures"),
    emptyNotebook = _require.emptyNotebook,
    emptyCodeCell = _require.emptyCodeCell,
    emptyMarkdownCell = _require.emptyMarkdownCell,
    appendCell = _require.appendCell,
    monocellNotebook = _require.monocellNotebook,
    appendCellToNotebook = _require.appendCellToNotebook,
    insertCellAt = _require.insertCellAt,
    insertCellAfter = _require.insertCellAfter,
    removeCell = _require.removeCell;

function freezeReviver(k, v) {
  return Object.freeze(v);
}

// Expected usage of below is
// fromJS(parseNotebook(string|buffer))

function parseNotebook(notebookString) {
  return JSON.parse(notebookString, freezeReviver);
}

function fromJS(notebookJSON) {
  if (notebookJSON.nbformat === 4 && notebookJSON.nbformat_minor >= 0) {
    if (Array.isArray(notebookJSON.cells) && _typeof(notebookJSON.metadata) === "object") {
      return v4.fromJS(notebookJSON);
    }
  } else if (notebookJSON.nbformat === 3 && notebookJSON.nbformat_minor >= 0) {
    return v3.fromJS(notebookJSON);
  }

  if (notebookJSON.nbformat) {
    throw new TypeError("nbformat v" + notebookJSON.nbformat + "." + notebookJSON.nbformat_minor + " not recognized");
  }

  throw new TypeError("This notebook format is not supported");
}

function toJS(immnb) {
  if (immnb.get("nbformat") === 4 && immnb.get("nbformat_minor") >= 0) {
    return v4.toJS(immnb);
  }
  throw new TypeError("Only notebook formats 3 and 4 are supported!");
}

// Expected usage is stringifyNotebook(toJS(immutableNotebook))
function stringifyNotebook(notebook) {
  return JSON.stringify(notebook, null, 2);
}

module.exports = {
  emptyCodeCell: emptyCodeCell,
  emptyMarkdownCell: emptyMarkdownCell,
  emptyNotebook: emptyNotebook,
  monocellNotebook: monocellNotebook,
  toJS: toJS,
  fromJS: fromJS,

  parseNotebook: parseNotebook,
  stringifyNotebook: stringifyNotebook,

  insertCellAt: insertCellAt,
  insertCellAfter: insertCellAfter,
  removeCell: removeCell,
  appendCell: appendCell,
  appendCellToNotebook: appendCellToNotebook,
  createImmutableOutput: v4.createImmutableOutput
};