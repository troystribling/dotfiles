"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createImmutableOutput = exports.makeErrorOutput = exports.makeStreamOutput = exports.makeDisplayData = exports.makeExecuteResult = void 0;
const immutable_1 = require("immutable");
const primitives_1 = require("./primitives");
// Used for initializing all output records
const emptyMediaBundle = Object.freeze({});
exports.makeExecuteResult = immutable_1.Record({
    data: emptyMediaBundle,
    execution_count: null,
    metadata: immutable_1.Map(),
    output_type: "execute_result"
});
exports.makeDisplayData = immutable_1.Record({
    data: emptyMediaBundle,
    metadata: immutable_1.Map(),
    output_type: "display_data"
});
exports.makeStreamOutput = immutable_1.Record({
    name: "stdout",
    output_type: "stream",
    text: ""
});
exports.makeErrorOutput = immutable_1.Record({
    ename: "",
    evalue: "",
    output_type: "error",
    traceback: immutable_1.List()
});
/**
 * Converts a mutable representation of an output to an immutable representation.
 *
 * @param output The mutable output that will be converted.
 *
 * @returns ImmutableOutput An immutable representation of the same output.
 */
function createImmutableOutput(output) {
    switch (output.output_type) {
        case "execute_result":
            return exports.makeExecuteResult({
                data: primitives_1.createFrozenMediaBundle(output.data),
                execution_count: output.execution_count,
                metadata: immutable_1.fromJS(output.metadata)
            });
        case "display_data":
            return exports.makeDisplayData({
                data: primitives_1.createFrozenMediaBundle(output.data),
                metadata: immutable_1.fromJS(output.metadata)
            });
        case "stream":
            return exports.makeStreamOutput({
                name: output.name,
                text: primitives_1.demultiline(output.text)
            });
        case "error":
            return exports.makeErrorOutput({
                ename: output.ename,
                evalue: output.evalue,
                output_type: "error",
                // Note: this is one of the cases where the Array of strings (for
                // traceback) is part of the format, not a multiline string
                traceback: immutable_1.List(output.traceback)
            });
        default:
            // Since we're well typed, output is never. However we can still get new output types we don't handle
            // and need to fail hard instead of making indeterminate behavior
            const unknownOutput = output;
            if (unknownOutput.output_type) {
                throw new TypeError(`Output type ${output.output_type} not recognized`);
            }
            throw new TypeError(`Output structure not known: ${JSON.stringify(output)}`);
    }
}
exports.createImmutableOutput = createImmutableOutput;
//# sourceMappingURL=outputs.js.map