"use strict";
// Due to the on-disk format needing to be written out in an explicit order,
// we disable ordering for this file
// tslint:disable:object-literal-sort-keys.
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNotebookV4 = exports.toJS = exports.cellToJS = exports.outputToJS = exports.fromJS = void 0;
/**
 * Functions in this module are provided for converting from Jupyter Notebook
 * Format v4 to nteract's in-memory format, affectionately referred to as
 * commutable.
 *
 * See: https://github.com/jupyter/nbformat/blob/62d6eb8803616d198eaa2024604d1fe923f2a7b3/nbformat/v4/nbformat.v4.schema.json
 *
 * The main goal here is consistency and compliance with the v4 spec. The types
 * contained in here (non Immutable ones) are constrained to the disk based
 * notebook format.
 *
 */
// Vendor modules
const immutable_1 = require("immutable");
// Local modules
const cells_1 = require("./cells");
const outputs_1 = require("./outputs");
const primitives_1 = require("./primitives");
const structures_1 = require("./structures");
/**
 * Converts a mutable representation of metadata to an immutable representation.
 *
 * @param metadata A JSON representation of notebook metadata.
 *
 * @returns ImmutableMetadata An immutable representation of the metadata.
 */
function createImmutableMetadata(metadata) {
    return immutable_1.Map(metadata).map((v, k) => {
        if (k !== "tags") {
            return v;
        }
        if (Array.isArray(v)) {
            return immutable_1.Set(v);
        }
        // The notebook spec requires that this field is an Array of strings
        return immutable_1.Set();
    });
}
function createImmutableRawCell(cell) {
    return cells_1.makeRawCell({
        cell_type: cell.cell_type,
        source: primitives_1.demultiline(cell.source),
        metadata: createImmutableMetadata(cell.metadata)
    });
}
function createImmutableMarkdownCell(cell) {
    return cells_1.makeMarkdownCell({
        cell_type: cell.cell_type,
        source: primitives_1.demultiline(cell.source),
        metadata: createImmutableMetadata(cell.metadata)
    });
}
function createImmutableCodeCell(cell) {
    return cells_1.makeCodeCell({
        cell_type: cell.cell_type,
        source: primitives_1.demultiline(cell.source),
        outputs: immutable_1.List(cell.outputs.map(outputs_1.createImmutableOutput)),
        execution_count: cell.execution_count,
        metadata: createImmutableMetadata(cell.metadata)
    });
}
/**
 * Converts a JSON representation of a cell of any type to the correct
 * immutable representation, per the v4 nbformat specification.
 *
 * @param cell A JSON representation of a cell.
 *
 * @returns An immutable representation of the same cell.
 */
function createImmutableCell(cell) {
    switch (cell.cell_type) {
        case "markdown":
            return createImmutableMarkdownCell(cell);
        case "code":
            return createImmutableCodeCell(cell);
        case "raw":
            return createImmutableRawCell(cell);
        default:
            throw new TypeError(`Cell type ${cell.cell_type} unknown`);
    }
}
function hasCellId(notebook) {
    return notebook.nbformat === 4 && notebook.nbformat_minor >= 5;
}
function fromJS(notebook) {
    if (!isNotebookV4(notebook)) {
        notebook = notebook;
        throw new TypeError(`Notebook is not a valid v4 notebook. v4 notebooks must be of form 4.x
       It lists nbformat v${notebook.nbformat}.${notebook.nbformat_minor}`);
    }
    // Since we're doing N cell operations all at once, switch to mutable then
    // switch back after.
    const starterCellStructure = {
        cellOrder: immutable_1.List().asMutable(),
        cellMap: immutable_1.Map().asMutable()
    };
    // Obtain the cell id if we're on a notebook version 4.5 or greater
    const shouldUseId = hasCellId(notebook);
    const cellStructure = notebook.cells.reduce((cellStruct, cell) => structures_1.appendCell(cellStruct, createImmutableCell(cell), 
    // Pass in the cell id if it exists, otherwise
    // use undefined and let nteract generate a cell id
    shouldUseId ? cell.id : undefined), starterCellStructure);
    return structures_1.makeNotebookRecord({
        cellOrder: cellStructure.cellOrder.asImmutable(),
        cellMap: cellStructure.cellMap.asImmutable(),
        nbformat_minor: notebook.nbformat_minor,
        nbformat: 4,
        metadata: immutable_1.fromJS(notebook.metadata)
    });
}
exports.fromJS = fromJS;
function metadataToJS(immMetadata) {
    return immMetadata.toJS();
}
function outputToJS(output) {
    switch (output.output_type) {
        case "execute_result":
            return {
                output_type: output.output_type,
                execution_count: output.execution_count,
                data: primitives_1.createOnDiskMediaBundle(output.data),
                metadata: output.metadata.toJS()
            };
        case "display_data":
            return {
                output_type: output.output_type,
                data: primitives_1.createOnDiskMediaBundle(output.data),
                metadata: output.metadata.toJS()
            };
        case "stream":
            return {
                output_type: output.output_type,
                name: output.name,
                text: primitives_1.remultiline(output.text)
            };
        case "error":
            return {
                output_type: output.output_type,
                ename: output.ename,
                evalue: output.evalue,
                // Note: this is one of the cases where the Array of strings (for
                // traceback) is part of the format, not a multiline string
                traceback: output.traceback.toJS()
            };
    }
}
exports.outputToJS = outputToJS;
function markdownCellToJS(immCell) {
    return {
        cell_type: "markdown",
        source: primitives_1.remultiline(immCell.source),
        metadata: metadataToJS(immCell.metadata)
    };
}
/**
 * Converts an immutable representation of a code cell to a JSON representation.
 *
 * @param immCell An immutable representation of a code cell.
 *
 * @returns A JSON representation of the same code cell.
 */
function codeCellToJS(immCell) {
    return {
        cell_type: "code",
        source: primitives_1.remultiline(immCell.source),
        outputs: immCell.outputs.map(outputToJS).toArray(),
        execution_count: immCell.execution_count,
        metadata: metadataToJS(immCell.metadata)
    };
}
/**
 * Converts an immutable representation of a raw cell to a JSON representation.
 *
 * @param immCell An immutable representation of a raw cell.
 *
 * @returns A JSON representation of the same raw cell.
 */
function rawCellToJS(immCell) {
    return {
        cell_type: "raw",
        source: primitives_1.remultiline(immCell.source),
        metadata: metadataToJS(immCell.get("metadata", immutable_1.Map()))
    };
}
/**
 * Converts an immutable cell to a JSON cell.
 *
 * @param immCell An immutable representation of a cell.
 *
 * @returns A JSON representation of the same cell.
 */
function cellToJS(immCell) {
    switch (immCell.cell_type) {
        case "markdown":
            return markdownCellToJS(immCell);
        case "code":
            return codeCellToJS(immCell);
        case "raw":
            return rawCellToJS(immCell);
        default:
            throw new TypeError("Cell type unknown at runtime");
    }
}
exports.cellToJS = cellToJS;
/**
 * Converts an immutable representation of a notebook to a JSON representation.
 *
 * @param immnb The immutable representation of a notebook.
 *
 * @returns The JSON representation of a notebook.
 */
function toJS(immnb) {
    const plainNotebook = immnb.toObject();
    const plainCellOrder = plainNotebook.cellOrder.toArray();
    const plainCellMap = plainNotebook.cellMap.toObject();
    const shouldUseCellId = hasCellId(plainNotebook);
    const cells = plainCellOrder
        .filter((cellId) => !plainCellMap[cellId].getIn([
        "metadata",
        "nteract",
        "transient",
        "deleting"
    ]))
        .map((cellId) => {
        const cell = cellToJS(plainCellMap[cellId]);
        // if this notebook has cell ids, ensure
        // that the id is included in the cell output
        if (shouldUseCellId) {
            cell["id"] = cellId;
        }
        return cell;
    });
    return {
        cells,
        metadata: plainNotebook.metadata.toJS(),
        nbformat: 4,
        nbformat_minor: plainNotebook.nbformat_minor
    };
}
exports.toJS = toJS;
function isNotebookV4(value) {
    return (value &&
        typeof value === "object" &&
        value.nbformat === 4 &&
        value.nbformat_minor >= 0);
}
exports.isNotebookV4 = isNotebookV4;
//# sourceMappingURL=v4.js.map