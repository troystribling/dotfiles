"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _transforms = require("@nteract/transforms");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var RichestMime = function (_React$Component) {
  _inherits(RichestMime, _React$Component);

  function RichestMime() {
    _classCallCheck(this, RichestMime);

    return _possibleConstructorReturn(this, (RichestMime.__proto__ || Object.getPrototypeOf(RichestMime)).apply(this, arguments));
  }

  _createClass(RichestMime, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      // eslint-disable-line class-methods-use-this
      if (nextProps && nextProps.theme && this.props && nextProps.theme !== this.props.theme) {
        return true;
      }
      // return false;
      return true;
    }
  }, {
    key: "render",
    value: function render() {
      var mimetype = (0, _transforms.richestMimetype)(this.props.bundle, this.props.displayOrder, this.props.transforms);

      if (!mimetype) {
        // If no mimetype is supported, don't return a component
        return null;
      }

      var Transform = this.props.transforms[mimetype];
      var data = this.props.bundle[mimetype];
      var metadata = this.props.metadata[mimetype];
      return _react2.default.createElement(Transform, {
        expanded: this.props.expanded,
        data: data,
        metadata: metadata,
        theme: this.props.theme,
        models: this.props.models
      });
    }
  }]);

  return RichestMime;
}(_react2.default.Component);

RichestMime.defaultProps = {
  transforms: _transforms.transforms,
  displayOrder: _transforms.displayOrder,
  theme: "light",
  metadata: {},
  bundle: {},
  models: {}
};
exports.default = RichestMime;