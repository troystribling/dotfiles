"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint class-methods-use-this: 0 */
const lodash_1 = require("lodash");
const react_1 = __importDefault(require("react"));
const NULL_MIMETYPE = "text/vnd.plotly.v1+html";
const MIMETYPE = "application/vnd.plotly.v1+json";
/*
 * As part of the init notebook mode, Plotly sneaks a <script> tag in to load
 * the plotlyjs lib. We have already loaded this though, so we "handle" the
 * transform by doing nothing and returning null.
 */
const PlotlyNullTransform = () => null;
exports.PlotlyNullTransform = PlotlyNullTransform;
PlotlyNullTransform.MIMETYPE = NULL_MIMETYPE;
PlotlyNullTransform.defaultProps = {
    mediaType: NULL_MIMETYPE
};
class PlotlyTransform extends react_1.default.Component {
    constructor() {
        super(...arguments);
        this.plotDivRef = (plotDiv) => {
            this.plotDiv = plotDiv;
        };
        this.getFigure = () => {
            const figure = this.props.data;
            if (typeof figure === "string") {
                return JSON.parse(figure);
            }
            // The Plotly API *mutates* the figure to include a UID, which means
            // they won't take our frozen objects
            if (Object.isFrozen(figure)) {
                return lodash_1.cloneDeep(figure);
            }
            const { data = {}, layout = {} } = figure;
            return { data, layout };
        };
    }
    componentDidMount() {
        // Handle case of either string to be `JSON.parse`d or pure object
        const figure = this.getFigure();
        this.Plotly = require("@nteract/plotly");
        this.Plotly.newPlot(this.plotDiv, figure.data, figure.layout);
    }
    shouldComponentUpdate(nextProps) {
        return this.props.data !== nextProps.data;
    }
    componentDidUpdate() {
        const figure = this.getFigure();
        if (!this.plotDiv) {
            return;
        }
        this.plotDiv.data = figure.data;
        this.plotDiv.layout = figure.layout;
        this.Plotly.redraw(this.plotDiv);
    }
    render() {
        const { layout } = this.getFigure();
        const style = {};
        if (layout && layout.height && !layout.autosize) {
            style.height = layout.height;
        }
        return react_1.default.createElement("div", { ref: this.plotDivRef, style: style });
    }
}
PlotlyTransform.MIMETYPE = MIMETYPE;
PlotlyTransform.defaultProps = {
    mediaType: MIMETYPE
};
exports.PlotlyTransform = PlotlyTransform;
exports.default = PlotlyTransform;
