"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PlotlyNullTransform = exports.PlotlyTransform = undefined;
var _jsxFileName = "src/index.js";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
/* eslint class-methods-use-this: 0 */


var cloneDeep = require("lodash").cloneDeep;

var NULL_MIMETYPE = "text/vnd.plotly.v1+html";
var MIMETYPE = "application/vnd.plotly.v1+json";

/*
 * As part of the init notebook mode, Plotly sneaks a <script> tag in to load
 * the plotlyjs lib. We have already loaded this though, so we "handle" the
 * transform by doing nothing and returning null.
 */
var PlotlyNullTransform = function PlotlyNullTransform() {
  return null;
};
PlotlyNullTransform.MIMETYPE = NULL_MIMETYPE;

var PlotlyTransform = exports.PlotlyTransform = function (_React$Component) {
  _inherits(PlotlyTransform, _React$Component);

  function PlotlyTransform() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, PlotlyTransform);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PlotlyTransform.__proto__ || Object.getPrototypeOf(PlotlyTransform)).call.apply(_ref, [this].concat(args))), _this), _this.plotDivRef = function (plotDiv) {
      _this.plotDiv = plotDiv;
    }, _this.getFigure = function () {
      var figure = _this.props.data;
      if (typeof figure === "string") {
        return JSON.parse(figure);
      }

      // The Plotly API *mutates* the figure to include a UID, which means
      // they won't take our frozen objects
      if (Object.isFrozen(figure)) {
        return cloneDeep(figure);
      }
      return figure;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(PlotlyTransform, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Handle case of either string to be `JSON.parse`d or pure object
      var figure = this.getFigure();
      this.Plotly = require("@nteract/plotly");
      this.Plotly.newPlot(this.plotDiv, figure.data, figure.layout);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.data !== nextProps.data;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var figure = this.getFigure();
      if (!this.plotDiv) return;
      this.plotDiv.data = figure.data;
      this.plotDiv.layout = figure.layout;
      this.Plotly.redraw(this.plotDiv);
    }
  }, {
    key: "render",
    value: function render() {
      var _getFigure = this.getFigure(),
          layout = _getFigure.layout;

      var style = {};
      if (layout && layout.height && !layout.autosize) {
        style.height = layout.height;
      }
      // $FlowFixMe: a normal div doesn't have the properties that plotly puts on it
      return _react2.default.createElement("div", { ref: this.plotDivRef, style: style, __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      });
    }
  }]);

  return PlotlyTransform;
}(_react2.default.Component);

PlotlyTransform.MIMETYPE = MIMETYPE;
exports.PlotlyNullTransform = PlotlyNullTransform;
exports.default = PlotlyTransform;