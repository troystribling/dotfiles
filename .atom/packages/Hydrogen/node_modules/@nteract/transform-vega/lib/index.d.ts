import * as React from "react";
interface EmbedData {
    config: object;
}
interface EmbedProps {
    data: EmbedData;
    embedMode?: "vega" | "vega-lite";
    version: string;
    renderedCallback: (err: any, result: any) => any;
}
export declare class VegaEmbed extends React.Component<Partial<EmbedProps>> {
    static defaultProps: {
        renderedCallback: () => any;
        embedMode: string;
        version: string;
    };
    el?: HTMLElement | null;
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: EmbedProps): boolean;
    componentDidUpdate(): void;
    render(): JSX.Element;
}
interface Props<MediaType> {
    data: EmbedData;
    mediaType: MediaType;
}
export declare function VegaLite1(props: Partial<Props<"application/vnd.vegalite.v1+json">>): JSX.Element;
export declare namespace VegaLite1 {
    var MIMETYPE: string;
    var defaultProps: {
        mediaType: string;
    };
}
export declare function Vega2(props: Partial<Props<"application/vnd.vega.v2+json">>): JSX.Element;
export declare namespace Vega2 {
    var MIMETYPE: string;
    var defaultProps: {
        mediaType: string;
    };
}
export { VegaLite1 as VegaLite, Vega2 as Vega };
export declare function VegaLite2(props: Partial<Props<"application/vnd.vegalite.v2+json">>): JSX.Element;
export declare namespace VegaLite2 {
    var MIMETYPE: string;
    var defaultProps: {
        mediaType: string;
    };
}
export declare function Vega3(props: Partial<Props<"application/vnd.vega.v3+json">>): JSX.Element;
export declare namespace Vega3 {
    var MIMETYPE: string;
    var defaultProps: {
        mediaType: string;
    };
}
