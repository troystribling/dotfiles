"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VegaEmbed = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.VegaLite = VegaLite;
exports.Vega = Vega;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var merge = require("lodash").merge;
var vegaEmbed = require("vega-embed");

var MIMETYPE_VEGA = "application/vnd.vega.v2+json";
var MIMETYPE_VEGALITE = "application/vnd.vegalite.v1+json";

var DEFAULT_WIDTH = 500;
var DEFAULT_HEIGHT = DEFAULT_WIDTH / 1.5;

var defaultCallback = function defaultCallback() {};

function embed(el, spec, mode, cb) {
  var embedSpec = {
    mode: mode,
    spec: Object.assign({}, spec)
  };

  if (mode === "vega-lite") {
    embedSpec.spec.config = merge({
      cell: {
        width: DEFAULT_WIDTH,
        height: DEFAULT_HEIGHT
      }
    }, embedSpec.spec.config);
  }

  vegaEmbed(el, embedSpec, cb);
}

var VegaEmbed = exports.VegaEmbed = function (_React$Component) {
  _inherits(VegaEmbed, _React$Component);

  function VegaEmbed() {
    _classCallCheck(this, VegaEmbed);

    return _possibleConstructorReturn(this, (VegaEmbed.__proto__ || Object.getPrototypeOf(VegaEmbed)).apply(this, arguments));
  }

  _createClass(VegaEmbed, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.el) {
        embed(this.el, this.props.data, this.props.embedMode, this.props.renderedCallback);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.data !== nextProps.data;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.el) {
        embed(this.el, this.props.data, this.props.embedMode, this.props.renderedCallback);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      // Note: We hide vega-actions since they won't work in our environment
      return _react2.default.createElement(
        "div",
        null,
        _react2.default.createElement(
          "style",
          null,
          ".vega-actions{ display: none; }"
        ),
        _react2.default.createElement("div", {
          ref: function ref(el) {
            _this2.el = el;
          }
        })
      );
    }
  }]);

  return VegaEmbed;
}(_react2.default.Component);

VegaEmbed.defaultProps = {
  renderedCallback: defaultCallback,
  embedMode: "vega-lite"
};
function VegaLite(props) {
  return _react2.default.createElement(VegaEmbed, { data: props.data, embedMode: "vega-lite" });
}

VegaLite.MIMETYPE = MIMETYPE_VEGALITE;

function Vega(props) {
  return _react2.default.createElement(VegaEmbed, { data: props.data, embedMode: "vega" });
}

Vega.MIMETYPE = MIMETYPE_VEGA;