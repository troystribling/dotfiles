"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vega = exports.VegaLite = exports.VegaEmbed = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.VegaLite1 = VegaLite1;
exports.Vega2 = Vega2;
exports.VegaLite2 = VegaLite2;
exports.Vega3 = Vega3;

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _lodash = require("lodash");

var _vegaEmbed = require("@nteract/vega-embed2");

var _vegaEmbed2 = _interopRequireDefault(_vegaEmbed);

var _vegaEmbed3 = require("vega-embed");

var _vegaEmbed4 = _interopRequireDefault(_vegaEmbed3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

(function () {
  var enterModule = require('react-hot-loader').enterModule;

  enterModule && enterModule(module);
})();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MIMETYPE_VEGA2 = "application/vnd.vega.v2+json";
var MIMETYPE_VEGA3 = "application/vnd.vega.v3+json";
var MIMETYPE_VEGALITE1 = "application/vnd.vegalite.v1+json";
var MIMETYPE_VEGALITE2 = "application/vnd.vegalite.v2+json";

var DEFAULT_WIDTH = 500;
var DEFAULT_HEIGHT = DEFAULT_WIDTH / 1.5;

var defaultCallback = function defaultCallback() {};

function embed(el, spec, mode, version, cb) {
  if (version == "vega2") {
    var embedSpec = {
      mode: mode,
      spec: Object.assign({}, spec)
    };

    if (mode === "vega-lite") {
      embedSpec.spec.config = (0, _lodash.merge)({
        cell: {
          width: DEFAULT_WIDTH,
          height: DEFAULT_HEIGHT
        }
      }, embedSpec.spec.config);
    }

    (0, _vegaEmbed2.default)(el, embedSpec, cb);
  } else {
    spec = Object.assign({}, spec);
    if (mode === "vega-lite") {
      spec.config = (0, _lodash.merge)({
        cell: {
          width: DEFAULT_WIDTH,
          height: DEFAULT_HEIGHT
        }
      }, spec.config);
    }

    (0, _vegaEmbed4.default)(el, spec, {
      mode: mode,
      actions: false
    }).then(function (result) {
      return cb(null, result);
    }).catch(cb);
  }
}

var VegaEmbed = exports.VegaEmbed = function (_React$Component) {
  _inherits(VegaEmbed, _React$Component);

  function VegaEmbed() {
    _classCallCheck(this, VegaEmbed);

    return _possibleConstructorReturn(this, (VegaEmbed.__proto__ || Object.getPrototypeOf(VegaEmbed)).apply(this, arguments));
  }

  _createClass(VegaEmbed, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.el) {
        embed(this.el, this.props.data, this.props.embedMode, this.props.version, this.props.renderedCallback);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.data !== nextProps.data;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.el) {
        embed(this.el, this.props.data, this.props.embedMode, this.props.version, this.props.renderedCallback);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      // Note: We hide vega-actions since they won't work in our environment
      // (this is only needed for vega2, since vega-embed v3 supports hiding
      // actions via options)
      return React.createElement(
        React.Fragment,
        null,
        React.createElement(
          "style",
          null,
          ".vega-actions{ display: none; }"
        ),
        React.createElement("div", {
          ref: function ref(el) {
            _this2.el = el;
          }
        })
      );
    }
  }, {
    key: "__reactstandin__regenerateByEval",
    // @ts-ignore
    value: function __reactstandin__regenerateByEval(key, code) {
      // @ts-ignore
      this[key] = eval(code);
    }
  }]);

  return VegaEmbed;
}(React.Component);

VegaEmbed.defaultProps = {
  renderedCallback: defaultCallback,
  embedMode: "vega-lite",
  version: "vega2"
};
function VegaLite1(props) {
  return React.createElement(VegaEmbed, { data: props.data, embedMode: "vega-lite", version: "vega2" });
}

VegaLite1.MIMETYPE = MIMETYPE_VEGALITE1;

function Vega2(props) {
  return React.createElement(VegaEmbed, { data: props.data, embedMode: "vega", version: "vega2" });
}

Vega2.MIMETYPE = MIMETYPE_VEGA2;

// For backwards compatibility
exports.VegaLite = VegaLite1;
exports.Vega = Vega2;
function VegaLite2(props) {
  return React.createElement(VegaEmbed, { data: props.data, embedMode: "vega-lite", version: "vega3" });
}

VegaLite2.MIMETYPE = MIMETYPE_VEGALITE2;

function Vega3(props) {
  return React.createElement(VegaEmbed, { data: props.data, embedMode: "vega", version: "vega3" });
}

Vega3.MIMETYPE = MIMETYPE_VEGA3;
;

(function () {
  var reactHotLoader = require('react-hot-loader').default;

  var leaveModule = require('react-hot-loader').leaveModule;

  if (!reactHotLoader) {
    return;
  }

  reactHotLoader.register(MIMETYPE_VEGA2, "MIMETYPE_VEGA2", "src/index.js");
  reactHotLoader.register(MIMETYPE_VEGA3, "MIMETYPE_VEGA3", "src/index.js");
  reactHotLoader.register(MIMETYPE_VEGALITE1, "MIMETYPE_VEGALITE1", "src/index.js");
  reactHotLoader.register(MIMETYPE_VEGALITE2, "MIMETYPE_VEGALITE2", "src/index.js");
  reactHotLoader.register(DEFAULT_WIDTH, "DEFAULT_WIDTH", "src/index.js");
  reactHotLoader.register(DEFAULT_HEIGHT, "DEFAULT_HEIGHT", "src/index.js");
  reactHotLoader.register(defaultCallback, "defaultCallback", "src/index.js");
  reactHotLoader.register(embed, "embed", "src/index.js");
  reactHotLoader.register(VegaEmbed, "VegaEmbed", "src/index.js");
  reactHotLoader.register(VegaLite1, "VegaLite1", "src/index.js");
  reactHotLoader.register(Vega2, "Vega2", "src/index.js");
  reactHotLoader.register(VegaLite2, "VegaLite2", "src/index.js");
  reactHotLoader.register(Vega3, "Vega3", "src/index.js");
  leaveModule(module);
})();

;