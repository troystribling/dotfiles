"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const vega_embed_v2_1 = __importDefault(require("@nteract/vega-embed-v2"));
const lodash_1 = require("lodash");
const React = __importStar(require("react"));
const vega_embed_1 = __importDefault(require("vega-embed"));
const MIMETYPE_VEGA2 = "application/vnd.vega.v2+json";
const MIMETYPE_VEGA3 = "application/vnd.vega.v3+json";
const MIMETYPE_VEGALITE1 = "application/vnd.vegalite.v1+json";
const MIMETYPE_VEGALITE2 = "application/vnd.vegalite.v2+json";
const DEFAULT_WIDTH = 500;
const DEFAULT_HEIGHT = DEFAULT_WIDTH / 1.5;
const defaultCallback = () => { };
function embed(el, spec, mode, version, cb) {
    if (version === "vega2") {
        const embedSpec = {
            mode,
            spec: Object.assign({}, spec)
        };
        if (mode === "vega-lite") {
            embedSpec.spec.config = lodash_1.merge({
                cell: {
                    width: DEFAULT_WIDTH,
                    height: DEFAULT_HEIGHT
                }
            }, embedSpec.spec.config);
        }
        vega_embed_v2_1.default(el, embedSpec, cb);
    }
    else {
        spec = Object.assign({}, spec);
        if (mode === "vega-lite") {
            spec.config = lodash_1.merge({
                cell: {
                    width: DEFAULT_WIDTH,
                    height: DEFAULT_HEIGHT
                }
            }, spec.config);
        }
        vega_embed_1.default(el, spec, {
            mode,
            actions: false
        })
            .then(result => cb(null, result))
            .catch(cb);
    }
}
class VegaEmbed extends React.Component {
    componentDidMount() {
        if (this.el &&
            this.props.data &&
            this.props.embedMode &&
            this.props.version &&
            this.props.renderedCallback) {
            embed(this.el, this.props.data, this.props.embedMode, this.props.version, this.props.renderedCallback);
        }
    }
    shouldComponentUpdate(nextProps) {
        return this.props.data !== nextProps.data;
    }
    componentDidUpdate() {
        if (this.el &&
            this.props.data &&
            this.props.embedMode &&
            this.props.version &&
            this.props.renderedCallback) {
            embed(this.el, this.props.data, this.props.embedMode, this.props.version, this.props.renderedCallback);
        }
    }
    render() {
        // Note: We hide vega-actions since they won't work in our environment
        // (this is only needed for vega2, since vega-embed v3 supports hiding
        // actions via options)
        return (React.createElement(React.Fragment, null,
            React.createElement("style", null, ".vega-actions{ display: none; }"),
            React.createElement("div", { ref: el => {
                    this.el = el;
                } })));
    }
}
VegaEmbed.defaultProps = {
    renderedCallback: defaultCallback,
    embedMode: "vega-lite",
    version: "vega2"
};
exports.VegaEmbed = VegaEmbed;
function VegaLite1(props) {
    return React.createElement(VegaEmbed, { data: props.data, embedMode: "vega-lite", version: "vega2" });
}
exports.VegaLite1 = VegaLite1;
exports.VegaLite = VegaLite1;
VegaLite1.MIMETYPE = MIMETYPE_VEGALITE1;
VegaLite1.defaultProps = {
    mediaType: MIMETYPE_VEGA2
};
function Vega2(props) {
    return React.createElement(VegaEmbed, { data: props.data, embedMode: "vega", version: "vega2" });
}
exports.Vega2 = Vega2;
exports.Vega = Vega2;
Vega2.MIMETYPE = MIMETYPE_VEGA2;
Vega2.defaultProps = {
    mediaType: MIMETYPE_VEGA2
};
function VegaLite2(props) {
    return React.createElement(VegaEmbed, { data: props.data, embedMode: "vega-lite", version: "vega3" });
}
exports.VegaLite2 = VegaLite2;
VegaLite2.MIMETYPE = MIMETYPE_VEGALITE2;
VegaLite2.defaultProps = {
    mediaType: MIMETYPE_VEGALITE2
};
function Vega3(props) {
    return React.createElement(VegaEmbed, { data: props.data, embedMode: "vega", version: "vega3" });
}
exports.Vega3 = Vega3;
Vega3.MIMETYPE = MIMETYPE_VEGA3;
Vega3.defaultProps = {
    mediaType: MIMETYPE_VEGA3
};
