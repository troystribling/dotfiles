"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const presentational_components_1 = require("@nteract/presentational-components");
const React = __importStar(require("react"));
const external_1 = require("./external");
/** React component embedding a certain Vega(-Lite) media type. */
class VegaEmbed extends React.Component {
    constructor(props) {
        super(props);
        this.anchorRef = React.createRef();
    }
    render() {
        return (React.createElement("div", null,
            React.createElement(presentational_components_1.Error, { error: this.embedError }),
            React.createElement("div", { ref: this.anchorRef })));
    }
    async callEmbedder() {
        var _a, _b, _c, _d;
        if (this.anchorRef.current === null) {
            return;
        }
        try {
            this.embedResult = await external_1.embed(this.anchorRef.current, this.props.mediaType, this.props.spec, this.props.options);
            (_b = (_a = this.props).resultHandler) === null || _b === void 0 ? void 0 : _b.call(_a, this.embedResult);
        }
        catch (error) {
            (_d = (_c = this.props).errorHandler) === null || _d === void 0 ? void 0 : _d.call(_c, error);
            this.embedError = error;
            this.forceUpdate();
        }
    }
    shouldComponentUpdate(nextProps) {
        if (this.props.spec !== nextProps.spec) {
            this.embedError = undefined;
            return true;
        }
        else {
            return false;
        }
    }
    componentDidMount() {
        this.callEmbedder().then();
    }
    componentDidUpdate() {
        if (!this.embedError) {
            this.callEmbedder().then();
        }
    }
    componentWillUnmount() {
        var _a;
        if (this.embedResult) {
            if (this.embedResult.finalize) {
                this.embedResult.finalize();
            }
            else if ((_a = this.embedResult.view) === null || _a === void 0 ? void 0 : _a.finalize) {
                this.embedResult.view.finalize();
            }
            this.embedResult = undefined;
        }
    }
}
exports.VegaEmbed = VegaEmbed;
