"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GIFDisplay = exports.JPEGDisplay = exports.PNGDisplay = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = ImageDisplay;

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function ImageDisplay(props) {
  var size = {};

  if (props.metadata) {
    var _props$metadata = props.metadata,
        width = _props$metadata.width,
        height = _props$metadata.height;

    size = { width: width, height: height };
  }

  return _react2.default.createElement("img", _extends({ alt: "", src: "data:" + props.mimetype + ";base64," + props.data }, size));
}

var PNGDisplay = exports.PNGDisplay = function (_React$Component) {
  _inherits(PNGDisplay, _React$Component);

  function PNGDisplay() {
    _classCallCheck(this, PNGDisplay);

    return _possibleConstructorReturn(this, (PNGDisplay.__proto__ || Object.getPrototypeOf(PNGDisplay)).apply(this, arguments));
  }

  _createClass(PNGDisplay, [{
    key: "render",
    value: function render() {
      return _react2.default.createElement(ImageDisplay, _extends({ mimetype: "image/png" }, this.props));
    }
  }]);

  return PNGDisplay;
}(_react2.default.Component);

PNGDisplay.MIMETYPE = "image/png";

var JPEGDisplay = exports.JPEGDisplay = function (_React$Component2) {
  _inherits(JPEGDisplay, _React$Component2);

  function JPEGDisplay() {
    _classCallCheck(this, JPEGDisplay);

    return _possibleConstructorReturn(this, (JPEGDisplay.__proto__ || Object.getPrototypeOf(JPEGDisplay)).apply(this, arguments));
  }

  _createClass(JPEGDisplay, [{
    key: "render",
    value: function render() {
      return _react2.default.createElement(ImageDisplay, _extends({ mimetype: "image/jpeg" }, this.props));
    }
  }]);

  return JPEGDisplay;
}(_react2.default.Component);

JPEGDisplay.MIMETYPE = "image/jpeg";

var GIFDisplay = exports.GIFDisplay = function (_React$Component3) {
  _inherits(GIFDisplay, _React$Component3);

  function GIFDisplay() {
    _classCallCheck(this, GIFDisplay);

    return _possibleConstructorReturn(this, (GIFDisplay.__proto__ || Object.getPrototypeOf(GIFDisplay)).apply(this, arguments));
  }

  _createClass(GIFDisplay, [{
    key: "render",
    value: function render() {
      return _react2.default.createElement(ImageDisplay, _extends({ mimetype: "image/gif" }, this.props));
    }
  }]);

  return GIFDisplay;
}(_react2.default.Component);

GIFDisplay.MIMETYPE = "image/gif";