"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactJsonTree = require("react-json-tree");

var _reactJsonTree2 = _interopRequireDefault(_reactJsonTree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultTheme = {
  base00: "transparent",
  base01: "#073642",
  base02: "#586e75",
  base03: "#657b83",
  base04: "#839496",
  base05: "#93a1a1",
  base06: "#eee8d5",
  base07: "#fdf6e3",
  base08: "#dc322f",
  base09: "#cb4b16",
  base0A: "#b58900",
  base0B: "#66BB6A",
  base0C: "#2aa198",
  base0D: "#268bd2",
  base0E: "#6c71c4",
  base0F: "#d33682"
};

function getTheme(themeName) {
  switch (themeName) {
    case "light":
    case "classic":
      {
        return defaultTheme;
      }
    case "dark":
    case "nteract":
      {
        return Object.assign({}, defaultTheme, { base0B: "#EDF3F7" });
      }
    case "halloween":
      {
        return Object.assign({}, defaultTheme, {
          base03: "#E28410",
          base0B: "#A22222",
          base0D: "#000000"
        });
      }
    default:
      return defaultTheme;
  }
}

var JsonDisplay = function (_React$Component) {
  _inherits(JsonDisplay, _React$Component);

  function JsonDisplay() {
    _classCallCheck(this, JsonDisplay);

    var _this = _possibleConstructorReturn(this, (JsonDisplay.__proto__ || Object.getPrototypeOf(JsonDisplay)).call(this));

    _this.shouldExpandNode = _this.shouldExpandNode.bind(_this);
    return _this;
  }

  _createClass(JsonDisplay, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      if (nextProps.theme !== this.props.theme || nextProps.data !== this.props.data) {
        return true;
      }
      return false;
    }
  }, {
    key: "shouldExpandNode",
    value: function shouldExpandNode() {
      if (this.props.metadata && this.props.metadata.expanded) {
        return true;
      }
      return false;
    }
  }, {
    key: "render",
    value: function render() {
      var theme = getTheme(this.props.theme);
      return _react2.default.createElement(_reactJsonTree2.default, {
        data: this.props.data,
        theme: theme,
        invertTheme: false,
        shouldExpandNode: this.shouldExpandNode
      });
    }
  }]);

  return JsonDisplay;
}(_react2.default.Component);

JsonDisplay.MIMETYPE = "application/json";
JsonDisplay.defaultProps = {
  data: {},
  theme: "light",
  metadata: {}
};
exports.default = JsonDisplay;