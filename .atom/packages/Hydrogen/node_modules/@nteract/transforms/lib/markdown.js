"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarkdownDisplay = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _commonmark = require("commonmark");

var _commonmark2 = _interopRequireDefault(_commonmark);

var _commonmarkReactRenderer = require("commonmark-react-renderer");

var _commonmarkReactRenderer2 = _interopRequireDefault(_commonmarkReactRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var parser = new _commonmark2.default.Parser();
var renderer = new _commonmarkReactRenderer2.default();

var mdRender = function mdRender(input) {
  return renderer.render(parser.parse(input));
};

var MarkdownDisplay = exports.MarkdownDisplay = function (_React$Component) {
  _inherits(MarkdownDisplay, _React$Component);

  function MarkdownDisplay() {
    _classCallCheck(this, MarkdownDisplay);

    return _possibleConstructorReturn(this, (MarkdownDisplay.__proto__ || Object.getPrototypeOf(MarkdownDisplay)).apply(this, arguments));
  }

  _createClass(MarkdownDisplay, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.data !== this.props.data;
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement(
        "div",
        null,
        mdRender(this.props.data)
      );
    }
  }]);

  return MarkdownDisplay;
}(_react2.default.Component);

MarkdownDisplay.MIMETYPE = "text/markdown";
exports.default = MarkdownDisplay;