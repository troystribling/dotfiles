/// <reference types="node" />
import { ChildProcess } from "child_process";
import * as Immutable from "immutable";
import { Subject } from "rxjs";
import { KernelId, SessionId } from "../ids";
import { HostRef, KernelRef } from "../refs";
import { KernelInfo } from "./kernel-info";
export interface KernelNotStartedProps {
    kernelSpecName?: string | null;
    status?: string | null;
    type: "unknown";
    cwd: ".";
    channels: Subject<any>;
    info?: KernelInfo | null;
}
export declare type KernelNotStartedRecord = Immutable.RecordOf<KernelNotStartedProps>;
export declare const makeKernelNotStartedRecord: Immutable.Record.Factory<KernelNotStartedProps>;
export declare enum KernelStatus {
    /** Kernel is currently executing code. */
    Busy = "busy",
    /** Kernel is currently not executing code. */
    Idle = "idle",
    /** Kernel process is being launched. */
    Starting = "starting",
    /** Kernel is being shut down. */
    ShuttingDown = "shutting down",
    /** Kernel is restarting. */
    Restarting = "restarting",
    /** Kernel's current execution process has been interrupted. */
    Interrupted = "interrupted",
    /** Kernel is not connected to current notebook. */
    NotConnected = "not connected",
    /** 0mq-based kernel is launched. */
    Launched = "launched",
    /** 0mq-based kernel is killed. */
    Killed = "killed",
    /** Kernel is in an failed or error state. */
    Error = "error"
}
export interface LocalKernelProps {
    kernelSpecName?: string | null;
    info?: KernelInfo | null;
    hostRef?: HostRef | null;
    lastActivity?: Date | null;
    channels: Subject<any>;
    cwd: string;
    status?: string | null;
    type: "zeromq";
    spawn?: ChildProcess | null;
    connectionFile?: string | null;
}
export declare const makeLocalKernelRecord: Immutable.Record.Factory<LocalKernelProps>;
export declare type LocalKernelRecord = Immutable.RecordOf<LocalKernelProps>;
export interface RemoteKernelProps {
    kernelSpecName?: string | null;
    info?: KernelInfo | null;
    hostRef?: HostRef | null;
    lastActivity?: Date | null;
    channels: Subject<any>;
    cwd: string;
    status?: string | null;
    type: "websocket";
    sessionId?: SessionId | null;
    id?: KernelId | null;
}
export declare const makeRemoteKernelRecord: Immutable.Record.Factory<RemoteKernelProps>;
export declare type RemoteKernelRecord = Immutable.RecordOf<RemoteKernelProps>;
export declare type KernelRecord = KernelNotStartedRecord | LocalKernelRecord | RemoteKernelRecord;
export interface KernelsRecordProps {
    byRef: Immutable.Map<KernelRef, KernelRecord>;
}
export declare const makeKernelsRecord: Immutable.Record.Factory<KernelsRecordProps>;
