import { RecordOf } from "immutable";
import { List, Map, Record } from "immutable";
import { HostRef, KernelspecsRef } from "../refs";
export interface KernelspecProps {
    name: string;
    argv: List<string>;
    env: Map<string, any>;
    interruptMode?: string | null;
    language: string;
    displayName: string;
    resources: Map<string, any>;
    metadata: Map<string, any>;
}
export declare const makeKernelspec: Record.Factory<KernelspecProps>;
export declare type KernelspecRecord = RecordOf<KernelspecProps>;
export interface KernelspecsByRefRecordProps {
    hostRef?: HostRef | null;
    defaultKernelName: string;
    byName: Map<string, KernelspecRecord>;
}
export declare type KernelspecsByRefRecord = RecordOf<KernelspecsByRefRecordProps>;
export declare const makeKernelspecsByRefRecord: Record.Factory<KernelspecsByRefRecordProps>;
export interface KernelspecsRecordProps {
    byRef: Map<KernelspecsRef, RecordOf<KernelspecsByRefRecordProps>>;
    refs: List<KernelspecsRef>;
}
export declare const makeKernelspecsRecord: Record.Factory<KernelspecsRecordProps>;
export declare type KernelSpecsRecord = RecordOf<KernelspecsRecordProps>;
