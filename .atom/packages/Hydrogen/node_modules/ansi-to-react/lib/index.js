"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var React = require("react");
var Anser = require("anser");
var escapeCarriageReturn = require("escape-carriage");

/**
 * ansiToJson
 * Convert ANSI strings into JSON output.
 *
 * @name ansiToJSON
 * @function
 * @param {String} input The input string.
 * @return {Array} The parsed input.
 */
function ansiToJSON(input) {
  input = escapeCarriageReturn(input);
  return Anser.ansiToJson(input, {
    json: true,
    remove_empty: true
  });
}

function ansiJSONtoStyleBundle(ansiBundle) {
  var style = {};
  if (ansiBundle.bg) {
    style.backgroundColor = "rgb(" + ansiBundle.bg + ")";
  }
  if (ansiBundle.fg) {
    style.color = "rgb(" + ansiBundle.fg + ")";
  }
  return {
    content: ansiBundle.content,
    style: style
  };
}

function ansiToInlineStyle(text) {
  return ansiToJSON(text).map(ansiJSONtoStyleBundle);
}

function linkifyBundle(bundle) {
  return _extends({}, bundle, {
    content: bundle.content.split(" ").reduce(function (result, word, index) {
      return [].concat(_toConsumableArray(result), [
      // Unless word is the first, prepend a space
      index === 0 ? "" : " ",
      // If word is a URL, return an <a> element
      /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/.test(word) ? React.createElement("a", {
        key: index,
        href: word,
        target: "_blank"
      }, "" + word) : word]);
    }, [])
  });
}

function inlineBundleToReact(bundle, key) {
  return React.createElement("span", {
    style: bundle.style,
    key: key
  }, bundle.content);
}

function Ansi(props) {
  return React.createElement("code", { className: props.className }, props.linkify ? ansiToInlineStyle(props.children).map(linkifyBundle).map(inlineBundleToReact) : ansiToInlineStyle(props.children).map(inlineBundleToReact));
}

module.exports = Ansi;