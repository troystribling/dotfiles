"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const anser_1 = require("anser");
const escape_carriage_1 = require("escape-carriage");
const React = __importStar(require("react"));
const LINK_REGEX = /(https?:\/\/(?:www\.|(?!www))[^\s\.]+\.[^\s]{2,}|www\.[^\s]+\.[^\s]{2,})/;
/**
 * Converts ANSI strings into JSON output.
 * @name ansiToJSON
 * @function
 * @param {String} input The input string.
 * @return {Array} The parsed input.
 */
function ansiToJSON(input, use_classes = false) {
    input = escape_carriage_1.escapeCarriageReturn(input);
    return anser_1.ansiToJson(input, {
        json: true,
        remove_empty: true,
        use_classes
    });
}
/**
 * Create a class string.
 * @name createClass
 * @function
 * @param {AnserJsonEntry}.
 * @return {String} class name(s)
 */
function createClass(bundle) {
    let classNames = "";
    if (!bundle.bg && !bundle.fg) {
        return null;
    }
    if (bundle.bg) {
        classNames += bundle.bg + " ";
    }
    if (bundle.fg) {
        classNames += bundle.fg + " ";
    }
    classNames = classNames.substring(0, classNames.length - 1);
    return classNames;
}
/**
 * Create the style attribute.
 * @name createStyle
 * @function
 * @param {AnserJsonEntry}.
 * @return {Object} returns the style object
 */
function createStyle(bundle) {
    const style = {};
    if (bundle.bg) {
        style.backgroundColor = `rgb(${bundle.bg})`;
    }
    if (bundle.fg) {
        style.color = `rgb(${bundle.fg})`;
    }
    return style;
}
/**
 * Converts an Anser bundle into a React Node.
 * @param linkify whether links should be converting into clickable anchor tags.
 * @param useClasses should render the span with a class instead of style.
 * @param bundle Anser output.
 */
function convertBundleIntoReact(linkify, useClasses, bundle, key) {
    const style = useClasses ? null : createStyle(bundle);
    const className = useClasses ? createClass(bundle) : null;
    if (!linkify) {
        return React.createElement("span", { style, key, className }, bundle.content);
    }
    const words = bundle.content.split(" ").reduce((words, word, index) => {
        // If this isn't the first word, re-add the space removed from split.
        if (index !== 0) {
            words.push(" ");
        }
        // If  this isn't a link, just return the word as-is.
        if (!LINK_REGEX.test(word)) {
            words.push(word);
            return words;
        }
        words.push(React.createElement("a", {
            key: index,
            href: word,
            target: "_blank"
        }, `${word}`));
        return words;
    }, []);
    return React.createElement("span", { style, key, className }, words);
}
function Ansi(props) {
    const { className, useClasses, children, linkify } = props;
    return React.createElement("code", { className }, ansiToJSON(children, !!useClasses).map(convertBundleIntoReact.bind(null, linkify, !!useClasses)));
}
exports.default = Ansi;
