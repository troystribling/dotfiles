{"version":3,"sources":["../src/index.js"],"names":["React","require","Anser","escapeCarriageReturn","ansiToJSON","input","ansiToJson","json","remove_empty","ansiJSONtoStyleBundle","ansiBundle","style","bg","backgroundColor","fg","color","content","ansiToInlineStyle","text","map","linkifyBundle","bundle","split","reduce","result","word","index","test","createElement","key","href","target","inlineBundleToReact","Ansi","props","className","linkify","children","module","exports"],"mappings":";;;;;;AAEA,IAAMA,QAAQC,QAAQ,OAAR,CAAd;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,IAAME,uBAAuBF,QAAQ,iBAAR,CAA7B;;AAEA;;;;;;;;;AASA,SAASG,UAAT,CAAoBC,KAApB,EAA2B;AACzBA,UAAQF,qBAAqBE,KAArB,CAAR;AACA,SAAOH,MAAMI,UAAN,CAAiBD,KAAjB,EAAwB;AAC7BE,UAAM,IADuB;AAE7BC,kBAAc;AAFe,GAAxB,CAAP;AAID;;AAED,SAASC,qBAAT,CAA+BC,UAA/B,EAA2C;AACzC,MAAMC,QAAQ,EAAd;AACA,MAAID,WAAWE,EAAf,EAAmB;AACjBD,UAAME,eAAN,YAA+BH,WAAWE,EAA1C;AACD;AACD,MAAIF,WAAWI,EAAf,EAAmB;AACjBH,UAAMI,KAAN,YAAqBL,WAAWI,EAAhC;AACD;AACD,SAAO;AACLE,aAASN,WAAWM,OADf;AAELL;AAFK,GAAP;AAID;;AAED,SAASM,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,SAAOd,WAAWc,IAAX,EAAiBC,GAAjB,CAAqBV,qBAArB,CAAP;AACD;;AAED,SAASW,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,sBACKA,MADL;AAEEL,aAASK,OAAOL,OAAP,CAAeM,KAAf,CAAqB,GAArB,EAA0BC,MAA1B,CACP,UAACC,MAAD,EAASC,IAAT,EAAeC,KAAf;AAAA,0CACKF,MADL;AAEE;AACAE,gBAAU,CAAV,GAAc,EAAd,GAAmB,GAHrB;AAIE;AACA,iFAA2EC,IAA3E,CACEF,IADF,IAGIzB,MAAM4B,aAAN,CACE,GADF,EAEE;AACEC,aAAKH,KADP;AAEEI,cAAML,IAFR;AAGEM,gBAAQ;AAHV,OAFF,OAOKN,IAPL,CAHJ,GAYIA,IAjBN;AAAA,KADO,EAoBP,EApBO;AAFX;AAyBD;;AAED,SAASO,mBAAT,CAA6BX,MAA7B,EAAqCQ,GAArC,EAA0C;AACxC,SAAO7B,MAAM4B,aAAN,CACL,MADK,EAEL;AACEjB,WAAOU,OAAOV,KADhB;AAEEkB;AAFF,GAFK,EAMLR,OAAOL,OANF,CAAP;AAQD;;AAQD,SAASiB,IAAT,CAAcC,KAAd,EAA4B;AAC1B,SAAOlC,MAAM4B,aAAN,CACL,MADK,EAEL,EAAEO,WAAWD,MAAMC,SAAnB,EAFK,EAGLD,MAAME,OAAN,GACInB,kBAAkBiB,MAAMG,QAAxB,EACGlB,GADH,CACOC,aADP,EAEGD,GAFH,CAEOa,mBAFP,CADJ,GAIIf,kBAAkBiB,MAAMG,QAAxB,EAAkClB,GAAlC,CAAsCa,mBAAtC,CAPC,CAAP;AASD;;AAEDM,OAAOC,OAAP,GAAiBN,IAAjB","file":"index.js","sourcesContent":["/* @flow */\n\nconst React = require(\"react\");\nconst Anser = require(\"anser\");\nconst escapeCarriageReturn = require(\"escape-carriage\");\n\n/**\n * ansiToJson\n * Convert ANSI strings into JSON output.\n *\n * @name ansiToJSON\n * @function\n * @param {String} input The input string.\n * @return {Array} The parsed input.\n */\nfunction ansiToJSON(input) {\n  input = escapeCarriageReturn(input);\n  return Anser.ansiToJson(input, {\n    json: true,\n    remove_empty: true\n  });\n}\n\nfunction ansiJSONtoStyleBundle(ansiBundle) {\n  const style = {};\n  if (ansiBundle.bg) {\n    style.backgroundColor = `rgb(${ansiBundle.bg})`;\n  }\n  if (ansiBundle.fg) {\n    style.color = `rgb(${ansiBundle.fg})`;\n  }\n  return {\n    content: ansiBundle.content,\n    style\n  };\n}\n\nfunction ansiToInlineStyle(text) {\n  return ansiToJSON(text).map(ansiJSONtoStyleBundle);\n}\n\nfunction linkifyBundle(bundle) {\n  return {\n    ...bundle,\n    content: bundle.content.split(\" \").reduce(\n      (result, word, index) => [\n        ...result,\n        // Unless word is the first, prepend a space\n        index === 0 ? \"\" : \" \",\n        // If word is a URL, return an <a> element\n        /(https?:\\/\\/(?:www\\.|(?!www))[^\\s\\.]+\\.[^\\s]{2,}|www\\.[^\\s]+\\.[^\\s]{2,})/.test(\n          word\n        )\n          ? React.createElement(\n              \"a\",\n              {\n                key: index,\n                href: word,\n                target: \"_blank\"\n              },\n              `${word}`\n            )\n          : word\n      ],\n      []\n    )\n  };\n}\n\nfunction inlineBundleToReact(bundle, key) {\n  return React.createElement(\n    \"span\",\n    {\n      style: bundle.style,\n      key\n    },\n    bundle.content\n  );\n}\n\ntype Props = {\n  children?: React.Node,\n  className?: string,\n  linkify?: boolean\n};\n\nfunction Ansi(props: Props) {\n  return React.createElement(\n    \"code\",\n    { className: props.className },\n    props.linkify\n      ? ansiToInlineStyle(props.children)\n          .map(linkifyBundle)\n          .map(inlineBundleToReact)\n      : ansiToInlineStyle(props.children).map(inlineBundleToReact)\n  );\n}\n\nmodule.exports = Ansi;\n"]}