"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var split_1 = require("../split");
/**
 * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)
 * about how fields have been parsed or whether they have been derived in a transforms. We use this to not parse the
 * same field again (or differently).
 */
var AncestorParse = /** @class */ (function (_super) {
    tslib_1.__extends(AncestorParse, _super);
    function AncestorParse(explicit, implicit, parseNothing) {
        if (explicit === void 0) { explicit = {}; }
        if (implicit === void 0) { implicit = {}; }
        if (parseNothing === void 0) { parseNothing = false; }
        var _this = _super.call(this, explicit, implicit) || this;
        _this.explicit = explicit;
        _this.implicit = implicit;
        _this.parseNothing = parseNothing;
        return _this;
    }
    AncestorParse.prototype.clone = function () {
        var clone = _super.prototype.clone.call(this);
        clone.parseNothing = this.parseNothing;
        return clone;
    };
    return AncestorParse;
}(split_1.Split));
exports.AncestorParse = AncestorParse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGtDQUErQjtBQWtEL0I7Ozs7R0FJRztBQUNIO0lBQW1DLHlDQUFtQjtJQUNwRCx1QkFDa0IsUUFBb0MsRUFDcEMsUUFBb0MsRUFDN0MsWUFBb0I7UUFGWCx5QkFBQSxFQUFBLGFBQW9DO1FBQ3BDLHlCQUFBLEVBQUEsYUFBb0M7UUFDN0MsNkJBQUEsRUFBQSxvQkFBb0I7UUFIN0IsWUFLRSxrQkFBTSxRQUFRLEVBQUUsUUFBUSxDQUFDLFNBQzFCO1FBTGlCLGNBQVEsR0FBUixRQUFRLENBQTRCO1FBQ3BDLGNBQVEsR0FBUixRQUFRLENBQTRCO1FBQzdDLGtCQUFZLEdBQVosWUFBWSxDQUFROztJQUc3QixDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUNFLElBQU0sS0FBSyxHQUFHLGlCQUFNLEtBQUssV0FBbUIsQ0FBQztRQUM3QyxLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDdkMsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQUFDLEFBZEQsQ0FBbUMsYUFBSyxHQWN2QztBQWRZLHNDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaWN0fSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7U3BsaXR9IGZyb20gJy4uL3NwbGl0JztcbmltcG9ydCB7T3V0cHV0Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5pbXBvcnQge0ZhY2V0Tm9kZX0gZnJvbSAnLi9mYWNldCc7XG5pbXBvcnQge1NvdXJjZU5vZGV9IGZyb20gJy4vc291cmNlJztcblxuZXhwb3J0IGludGVyZmFjZSBEYXRhQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEEgZGljdGlvbmFyeSBvZiBzb3VyY2VzIGluZGV4ZWQgYnkgYSBoYXNoLlxuICAgKi9cbiAgc291cmNlczogRGljdDxTb3VyY2VOb2RlPjtcblxuICAvKipcbiAgICogUmVnaXN0cnkgb2Ygb3V0cHV0IG5vZGVzLlxuICAgKi9cbiAgb3V0cHV0Tm9kZXM6IERpY3Q8T3V0cHV0Tm9kZSB8IEZhY2V0Tm9kZT47XG5cbiAgLyoqXG4gICAqIEhvdyBvZnRlbiBpcyBhbiBvdXRwdXQgbm9kZSB1c2VkLiBJZiBpdCBpcyBub3QgdXNlZCwgd2UgZG9uJ3QgbmVlZCB0b1xuICAgKiBpbnN0YW50aWF0ZSBpdCBpbiB0aGUgYXNzZW1ibGUgc3RlcC5cbiAgICovXG4gIG91dHB1dE5vZGVSZWZDb3VudHM6IERpY3Q8bnVtYmVyPjtcblxuICAvKipcbiAgICogVGhlIG91dHB1dCBub2RlIGJlZm9yZSBhZ2dyZWdhdGlvbi5cbiAgICovXG4gIHJhdz86IE91dHB1dE5vZGU7XG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIG91dHB1dCBub2RlLlxuICAgKi9cbiAgbWFpbj86IE91dHB1dE5vZGU7XG5cbiAgLyoqXG4gICAqIEZvciBmYWNldHMsIHdlIHN0b3JlIHRoZSByZWZlcmVuY2UgdG8gdGhlIHJvb3Qgbm9kZS5cbiAgICovXG4gIGZhY2V0Um9vdD86IEZhY2V0Tm9kZTtcblxuICAvKipcbiAgICogVHJ1ZSBpZiB0aGUgZGF0YSBmb3IgdGhpcyBtb2RlbCBpcyBmYWNldGVkLlxuICAgKiBBIGRhdGFzZXQgaXMgZmFjZXRlZCBpZiBhIHBhcmVudCBtb2RlbCBpcyBhIGZhY2V0IGFuZCBubyBuZXcgZGF0YXNldCBpc1xuICAgKiBkZWZpbmVkICh3aGljaCB3b3VsZCBtYWtlIHRoZSBkYXRhIHVuZmFjZXRlZCBhZ2FpbikuXG4gICAqL1xuICBpc0ZhY2V0ZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFBhcnNlIHByb3BlcnRpZXMgcGFzc2VkIGRvd24gZnJvbSBhbmNlc3RvcnMuIEhlbHBzIHVzIHRvIGtlZXAgdHJhY2sgb2Ygd2hhdCBoYXMgYmVlbiBwYXJzZWQgb3IgaXMgZGVyaXZlZC5cbiAgICovXG4gIGFuY2VzdG9yUGFyc2U/OiBBbmNlc3RvclBhcnNlO1xufVxuXG4vKipcbiAqIENsYXNzIHRvIHRyYWNrIGludGVyZXN0aW5nIHByb3BlcnRpZXMgKHNlZSBodHRwczovLzE1NzIxLmNvdXJzZXMuY3MuY211LmVkdS9zcHJpbmcyMDE2L3BhcGVycy9ncmFlZmUtaWVlZTE5OTUucGRmKVxuICogYWJvdXQgaG93IGZpZWxkcyBoYXZlIGJlZW4gcGFyc2VkIG9yIHdoZXRoZXIgdGhleSBoYXZlIGJlZW4gZGVyaXZlZCBpbiBhIHRyYW5zZm9ybXMuIFdlIHVzZSB0aGlzIHRvIG5vdCBwYXJzZSB0aGVcbiAqIHNhbWUgZmllbGQgYWdhaW4gKG9yIGRpZmZlcmVudGx5KS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFuY2VzdG9yUGFyc2UgZXh0ZW5kcyBTcGxpdDxEaWN0PHN0cmluZz4+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGV4cGxpY2l0OiBQYXJ0aWFsPERpY3Q8c3RyaW5nPj4gPSB7fSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW1wbGljaXQ6IFBhcnRpYWw8RGljdDxzdHJpbmc+PiA9IHt9LFxuICAgIHB1YmxpYyBwYXJzZU5vdGhpbmcgPSBmYWxzZVxuICApIHtcbiAgICBzdXBlcihleHBsaWNpdCwgaW1wbGljaXQpO1xuICB9XG5cbiAgcHVibGljIGNsb25lKCk6IEFuY2VzdG9yUGFyc2Uge1xuICAgIGNvbnN0IGNsb25lID0gc3VwZXIuY2xvbmUoKSBhcyBBbmNlc3RvclBhcnNlO1xuICAgIGNsb25lLnBhcnNlTm90aGluZyA9IHRoaXMucGFyc2VOb3RoaW5nO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxufVxuIl19