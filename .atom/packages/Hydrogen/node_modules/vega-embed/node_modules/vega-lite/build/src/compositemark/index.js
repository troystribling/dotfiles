"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var mark_1 = require("./../mark");
var boxplot_1 = require("./boxplot");
var errorbar_1 = require("./errorbar");
/**
 * Registry index for all composite mark's normalizer
 */
var normalizerRegistry = {};
function add(mark, normalizer) {
    normalizerRegistry[mark] = normalizer;
}
exports.add = add;
function remove(mark) {
    delete normalizerRegistry[mark];
}
exports.remove = remove;
exports.COMPOSITE_MARK_STYLES = boxplot_1.BOXPLOT_STYLES;
exports.VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = __assign({}, boxplot_1.VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX);
add(boxplot_1.BOXPLOT, boxplot_1.normalizeBoxPlot);
add(errorbar_1.ERRORBAR, errorbar_1.normalizeErrorBar);
/**
 * Transform a unit spec with composite mark into a normal layer spec.
 */
function normalize(
    // This GenericUnitSpec has any as Encoding because unit specs with composite mark can have additional encoding channels.
    spec, config) {
    var mark = mark_1.isMarkDef(spec.mark) ? spec.mark.type : spec.mark;
    var normalizer = normalizerRegistry[mark];
    if (normalizer) {
        return normalizer(spec, config);
    }
    throw new Error("Unregistered composite mark " + mark);
}
exports.normalize = normalize;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zaXRlbWFyay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0Esa0NBQTZDO0FBRTdDLHFDQUE0STtBQUM1SSx1Q0FBdUQ7QUFNdkQ7O0dBRUc7QUFDSCxJQUFNLGtCQUFrQixHQUFxQyxFQUFFLENBQUM7QUFFaEUsYUFBb0IsSUFBWSxFQUFFLFVBQTBCO0lBQzFELGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztBQUN4QyxDQUFDO0FBRkQsa0JBRUM7QUFFRCxnQkFBdUIsSUFBWTtJQUNqQyxPQUFPLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFGRCx3QkFFQztBQVFZLFFBQUEscUJBQXFCLEdBQUcsd0JBQWMsQ0FBQztBQUt2QyxRQUFBLHFEQUFxRCxnQkFDN0QsK0NBQXFDLEVBQ3hDO0FBRUYsR0FBRyxDQUFDLGlCQUFPLEVBQUUsMEJBQWdCLENBQUMsQ0FBQztBQUMvQixHQUFHLENBQUMsbUJBQVEsRUFBRSw0QkFBaUIsQ0FBQyxDQUFDO0FBRWpDOztHQUVHO0FBQ0g7SUFDSSx5SEFBeUg7SUFDekgsSUFBbUMsRUFDbkMsTUFBYztJQUdoQixJQUFNLElBQUksR0FBRyxnQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDL0QsSUFBTSxVQUFVLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNmLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLGlDQUErQixJQUFNLENBQUMsQ0FBQztBQUN6RCxDQUFDO0FBYkQsOEJBYUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbmZpZ30gZnJvbSAnLi8uLi9jb25maWcnO1xuaW1wb3J0IHtBbnlNYXJrLCBpc01hcmtEZWZ9IGZyb20gJy4vLi4vbWFyayc7XG5pbXBvcnQge0dlbmVyaWNVbml0U3BlYywgTGF5ZXJTcGVjfSBmcm9tICcuLy4uL3NwZWMnO1xuaW1wb3J0IHtCT1hQTE9ULCBCT1hQTE9UX1NUWUxFUywgQm94UGxvdENvbmZpZ01peGlucywgQm94UGxvdERlZiwgbm9ybWFsaXplQm94UGxvdCwgVkxfT05MWV9CT1hQTE9UX0NPTkZJR19QUk9QRVJUWV9JTkRFWH0gZnJvbSAnLi9ib3hwbG90JztcbmltcG9ydCB7RVJST1JCQVIsIG5vcm1hbGl6ZUVycm9yQmFyfSBmcm9tICcuL2Vycm9yYmFyJztcblxuXG5leHBvcnQge0JveFBsb3RDb25maWd9IGZyb20gJy4vYm94cGxvdCc7XG5leHBvcnQgdHlwZSBVbml0Tm9ybWFsaXplciA9IChzcGVjOiBHZW5lcmljVW5pdFNwZWM8YW55LCBhbnk+LCBjb25maWc6IENvbmZpZyk9PiBMYXllclNwZWM7XG5cbi8qKlxuICogUmVnaXN0cnkgaW5kZXggZm9yIGFsbCBjb21wb3NpdGUgbWFyaydzIG5vcm1hbGl6ZXJcbiAqL1xuY29uc3Qgbm9ybWFsaXplclJlZ2lzdHJ5OiB7W21hcms6IHN0cmluZ106IFVuaXROb3JtYWxpemVyfSA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkKG1hcms6IHN0cmluZywgbm9ybWFsaXplcjogVW5pdE5vcm1hbGl6ZXIpIHtcbiAgbm9ybWFsaXplclJlZ2lzdHJ5W21hcmtdID0gbm9ybWFsaXplcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShtYXJrOiBzdHJpbmcpIHtcbiAgZGVsZXRlIG5vcm1hbGl6ZXJSZWdpc3RyeVttYXJrXTtcbn1cblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlTWFyayA9IEJPWFBMT1QgfCBFUlJPUkJBUjtcblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlTWFya0RlZiA9IEJveFBsb3REZWY7XG5cbmV4cG9ydCB0eXBlIENvbXBvc2l0ZUFnZ3JlZ2F0ZSA9IEJPWFBMT1Q7XG5cbmV4cG9ydCBjb25zdCBDT01QT1NJVEVfTUFSS19TVFlMRVMgPSBCT1hQTE9UX1NUWUxFUztcbmV4cG9ydCB0eXBlIENvbXBvc2l0ZU1hcmtTdHlsZSA9IHR5cGVvZiBDT01QT1NJVEVfTUFSS19TVFlMRVNbMF07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9zaXRlTWFya0NvbmZpZ01peGlucyBleHRlbmRzIEJveFBsb3RDb25maWdNaXhpbnMge31cblxuZXhwb3J0IGNvbnN0IFZMX09OTFlfQ09NUE9TSVRFX01BUktfU1BFQ0lGSUNfQ09ORklHX1BST1BFUlRZX0lOREVYID0ge1xuICAuLi5WTF9PTkxZX0JPWFBMT1RfQ09ORklHX1BST1BFUlRZX0lOREVYXG59O1xuXG5hZGQoQk9YUExPVCwgbm9ybWFsaXplQm94UGxvdCk7XG5hZGQoRVJST1JCQVIsIG5vcm1hbGl6ZUVycm9yQmFyKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSB1bml0IHNwZWMgd2l0aCBjb21wb3NpdGUgbWFyayBpbnRvIGEgbm9ybWFsIGxheWVyIHNwZWMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUoXG4gICAgLy8gVGhpcyBHZW5lcmljVW5pdFNwZWMgaGFzIGFueSBhcyBFbmNvZGluZyBiZWNhdXNlIHVuaXQgc3BlY3Mgd2l0aCBjb21wb3NpdGUgbWFyayBjYW4gaGF2ZSBhZGRpdGlvbmFsIGVuY29kaW5nIGNoYW5uZWxzLlxuICAgIHNwZWM6IEdlbmVyaWNVbml0U3BlYzxhbnksIEFueU1hcms+LFxuICAgIGNvbmZpZzogQ29uZmlnXG4gICk6IExheWVyU3BlYyB7XG5cbiAgY29uc3QgbWFyayA9IGlzTWFya0RlZihzcGVjLm1hcmspID8gc3BlYy5tYXJrLnR5cGUgOiBzcGVjLm1hcms7XG4gIGNvbnN0IG5vcm1hbGl6ZXIgPSBub3JtYWxpemVyUmVnaXN0cnlbbWFya107XG4gIGlmIChub3JtYWxpemVyKSB7XG4gICAgcmV0dXJuIG5vcm1hbGl6ZXIoc3BlYywgY29uZmlnKTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcihgVW5yZWdpc3RlcmVkIGNvbXBvc2l0ZSBtYXJrICR7bWFya31gKTtcbn1cbiJdfQ==