"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var datetime_1 = require("./datetime");
var log = require("./log");
var util_1 = require("./util");
var TimeUnit;
(function (TimeUnit) {
    TimeUnit.YEAR = 'year';
    TimeUnit.MONTH = 'month';
    TimeUnit.DAY = 'day';
    TimeUnit.DATE = 'date';
    TimeUnit.HOURS = 'hours';
    TimeUnit.MINUTES = 'minutes';
    TimeUnit.SECONDS = 'seconds';
    TimeUnit.MILLISECONDS = 'milliseconds';
    TimeUnit.YEARMONTH = 'yearmonth';
    TimeUnit.YEARMONTHDATE = 'yearmonthdate';
    TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';
    TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';
    TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds';
    // MONTHDATE always include 29 February since we use year 0th (which is a leap year);
    TimeUnit.MONTHDATE = 'monthdate';
    TimeUnit.HOURSMINUTES = 'hoursminutes';
    TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';
    TimeUnit.MINUTESSECONDS = 'minutesseconds';
    TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';
    TimeUnit.QUARTER = 'quarter';
    TimeUnit.YEARQUARTER = 'yearquarter';
    TimeUnit.QUARTERMONTH = 'quartermonth';
    TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';
    TimeUnit.UTCYEAR = 'utcyear';
    TimeUnit.UTCMONTH = 'utcmonth';
    TimeUnit.UTCDAY = 'utcday';
    TimeUnit.UTCDATE = 'utcdate';
    TimeUnit.UTCHOURS = 'utchours';
    TimeUnit.UTCMINUTES = 'utcminutes';
    TimeUnit.UTCSECONDS = 'utcseconds';
    TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';
    TimeUnit.UTCYEARMONTH = 'utcyearmonth';
    TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';
    TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';
    TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';
    TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds';
    // MONTHDATE always include 29 February since we use year 0th (which is a leap year);
    TimeUnit.UTCMONTHDATE = 'utcmonthdate';
    TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';
    TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';
    TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';
    TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';
    TimeUnit.UTCQUARTER = 'utcquarter';
    TimeUnit.UTCYEARQUARTER = 'utcyearquarter';
    TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';
    TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';
})(TimeUnit = exports.TimeUnit || (exports.TimeUnit = {}));
/** Time Unit that only corresponds to only one part of Date objects. */
var LOCAL_SINGLE_TIMEUNIT_INDEX = {
    year: 1,
    quarter: 1,
    month: 1,
    day: 1,
    date: 1,
    hours: 1,
    minutes: 1,
    seconds: 1,
    milliseconds: 1
};
exports.TIMEUNIT_PARTS = util_1.flagKeys(LOCAL_SINGLE_TIMEUNIT_INDEX);
function isLocalSingleTimeUnit(timeUnit) {
    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];
}
exports.isLocalSingleTimeUnit = isLocalSingleTimeUnit;
var UTC_SINGLE_TIMEUNIT_INDEX = {
    utcyear: 1,
    utcquarter: 1,
    utcmonth: 1,
    utcday: 1,
    utcdate: 1,
    utchours: 1,
    utcminutes: 1,
    utcseconds: 1,
    utcmilliseconds: 1
};
function isUtcSingleTimeUnit(timeUnit) {
    return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];
}
exports.isUtcSingleTimeUnit = isUtcSingleTimeUnit;
var LOCAL_MULTI_TIMEUNIT_INDEX = {
    yearquarter: 1,
    yearquartermonth: 1,
    yearmonth: 1,
    yearmonthdate: 1,
    yearmonthdatehours: 1,
    yearmonthdatehoursminutes: 1,
    yearmonthdatehoursminutesseconds: 1,
    quartermonth: 1,
    monthdate: 1,
    hoursminutes: 1,
    hoursminutesseconds: 1,
    minutesseconds: 1,
    secondsmilliseconds: 1
};
var UTC_MULTI_TIMEUNIT_INDEX = {
    utcyearquarter: 1,
    utcyearquartermonth: 1,
    utcyearmonth: 1,
    utcyearmonthdate: 1,
    utcyearmonthdatehours: 1,
    utcyearmonthdatehoursminutes: 1,
    utcyearmonthdatehoursminutesseconds: 1,
    utcquartermonth: 1,
    utcmonthdate: 1,
    utchoursminutes: 1,
    utchoursminutesseconds: 1,
    utcminutesseconds: 1,
    utcsecondsmilliseconds: 1
};
var UTC_TIMEUNIT_INDEX = tslib_1.__assign({}, UTC_SINGLE_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);
function isUTCTimeUnit(t) {
    return !!UTC_TIMEUNIT_INDEX[t];
}
exports.isUTCTimeUnit = isUTCTimeUnit;
function getLocalTimeUnit(t) {
    return t.substr(3);
}
exports.getLocalTimeUnit = getLocalTimeUnit;
var TIMEUNIT_INDEX = tslib_1.__assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX, UTC_SINGLE_TIMEUNIT_INDEX, LOCAL_MULTI_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);
exports.TIMEUNITS = util_1.flagKeys(TIMEUNIT_INDEX);
function isTimeUnit(t) {
    return !!TIMEUNIT_INDEX[t];
}
exports.isTimeUnit = isTimeUnit;
var SET_DATE_METHOD = {
    year: 'setFullYear',
    month: 'setMonth',
    date: 'setDate',
    hours: 'setHours',
    minutes: 'setMinutes',
    seconds: 'setSeconds',
    milliseconds: 'setMilliseconds',
    // Day and quarter have their own special cases
    quarter: null,
    day: null,
};
/**
 * Converts a date to only have the measurements relevant to the specified unit
 * i.e. ('yearmonth', '2000-12-04 07:58:14') -> '2000-12-01 00:00:00'
 * Note: the base date is Jan 01 1900 00:00:00
 */
function convert(unit, date) {
    var isUTC = isUTCTimeUnit(unit);
    var result = isUTC ?
        // start with uniform date
        new Date(Date.UTC(0, 0, 1, 0, 0, 0, 0)) :
        new Date(0, 0, 1, 0, 0, 0, 0);
    for (var _i = 0, TIMEUNIT_PARTS_1 = exports.TIMEUNIT_PARTS; _i < TIMEUNIT_PARTS_1.length; _i++) {
        var timeUnitPart = TIMEUNIT_PARTS_1[_i];
        if (containsTimeUnit(unit, timeUnitPart)) {
            switch (timeUnitPart) {
                case TimeUnit.DAY:
                    throw new Error('Cannot convert to TimeUnits containing \'day\'');
                case TimeUnit.QUARTER: {
                    var _a = dateMethods('month', isUTC), getDateMethod_1 = _a.getDateMethod, setDateMethod_1 = _a.setDateMethod;
                    // indicate quarter by setting month to be the first of the quarter i.e. may (4) -> april (3)
                    result[setDateMethod_1]((Math.floor(date[getDateMethod_1]() / 3)) * 3);
                    break;
                }
                default:
                    var _b = dateMethods(timeUnitPart, isUTC), getDateMethod = _b.getDateMethod, setDateMethod = _b.setDateMethod;
                    result[setDateMethod](date[getDateMethod]());
            }
        }
    }
    return result;
}
exports.convert = convert;
function dateMethods(singleUnit, isUtc) {
    var rawSetDateMethod = SET_DATE_METHOD[singleUnit];
    var setDateMethod = isUtc ? 'setUTC' + rawSetDateMethod.substr(3) : rawSetDateMethod;
    var getDateMethod = 'get' + (isUtc ? 'UTC' : '') + rawSetDateMethod.substr(3);
    return { setDateMethod: setDateMethod, getDateMethod: getDateMethod };
}
function getTimeUnitParts(timeUnit) {
    return exports.TIMEUNIT_PARTS.reduce(function (parts, part) {
        if (containsTimeUnit(timeUnit, part)) {
            return parts.concat(part);
        }
        return parts;
    }, []);
}
exports.getTimeUnitParts = getTimeUnitParts;
/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */
function containsTimeUnit(fullTimeUnit, timeUnit) {
    var index = fullTimeUnit.indexOf(timeUnit);
    return index > -1 &&
        (timeUnit !== TimeUnit.SECONDS ||
            index === 0 ||
            fullTimeUnit.charAt(index - 1) !== 'i' // exclude milliseconds
        );
}
exports.containsTimeUnit = containsTimeUnit;
/**
 * Returns Vega expresssion for a given timeUnit and fieldRef
 */
function fieldExpr(fullTimeUnit, field) {
    var fieldRef = util_1.accessPathWithDatum(field);
    var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';
    function func(timeUnit) {
        if (timeUnit === TimeUnit.QUARTER) {
            // quarter starting at 0 (0,3,6,9).
            return "(" + utc + "quarter(" + fieldRef + ")-1)";
        }
        else {
            return "" + utc + timeUnit + "(" + fieldRef + ")";
        }
    }
    var d = exports.TIMEUNIT_PARTS.reduce(function (dateExpr, tu) {
        if (containsTimeUnit(fullTimeUnit, tu)) {
            dateExpr[tu] = func(tu);
        }
        return dateExpr;
    }, {});
    return datetime_1.dateTimeExpr(d);
}
exports.fieldExpr = fieldExpr;
/**
 * returns the signal expression used for axis labels for a time unit
 */
function formatExpression(timeUnit, field, shortTimeLabels, isUTCScale) {
    if (!timeUnit) {
        return undefined;
    }
    var dateComponents = [];
    var expression = '';
    var hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);
    if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {
        // special expression for quarter as prefix
        expression = "'Q' + quarter(" + field + ")";
    }
    if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {
        // By default use short month name
        dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');
    }
    if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {
        dateComponents.push(shortTimeLabels ? '%a' : '%A');
    }
    else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {
        dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year
    }
    if (hasYear) {
        dateComponents.push(shortTimeLabels ? '%y' : '%Y');
    }
    var timeComponents = [];
    if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {
        timeComponents.push('%H');
    }
    if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {
        timeComponents.push('%M');
    }
    if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {
        timeComponents.push('%S');
    }
    if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {
        timeComponents.push('%L');
    }
    var dateTimeComponents = [];
    if (dateComponents.length > 0) {
        dateTimeComponents.push(dateComponents.join(' '));
    }
    if (timeComponents.length > 0) {
        dateTimeComponents.push(timeComponents.join(':'));
    }
    if (dateTimeComponents.length > 0) {
        if (expression) {
            // Add space between quarter and main time format
            expression += " + ' ' + ";
        }
        // We only use utcFormat for utc scale
        // For utc time units, the data is already converted as a part of timeUnit transform.
        // Thus, utc time units should use timeFormat to avoid shifting the time twice.
        if (isUTCScale) {
            expression += "utcFormat(" + field + ", '" + dateTimeComponents.join(' ') + "')";
        }
        else {
            expression += "timeFormat(" + field + ", '" + dateTimeComponents.join(' ') + "')";
        }
    }
    // If expression is still an empty string, return undefined instead.
    return expression || undefined;
}
exports.formatExpression = formatExpression;
function normalizeTimeUnit(timeUnit) {
    if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {
        log.warn(log.message.dayReplacedWithDate(timeUnit));
        return timeUnit.replace('day', 'date');
    }
    return timeUnit;
}
exports.normalizeTimeUnit = normalizeTimeUnit;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXVuaXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGltZXVuaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsdUNBQXNEO0FBQ3RELDJCQUE2QjtBQUM3QiwrQkFBMkQ7QUFFM0QsSUFBaUIsUUFBUSxDQWlEeEI7QUFqREQsV0FBaUIsUUFBUTtJQUNWLGFBQUksR0FBVyxNQUFNLENBQUM7SUFDdEIsY0FBSyxHQUFZLE9BQU8sQ0FBQztJQUN6QixZQUFHLEdBQVUsS0FBSyxDQUFDO0lBQ25CLGFBQUksR0FBVyxNQUFNLENBQUM7SUFDdEIsY0FBSyxHQUFZLE9BQU8sQ0FBQztJQUN6QixnQkFBTyxHQUFjLFNBQVMsQ0FBQztJQUMvQixnQkFBTyxHQUFjLFNBQVMsQ0FBQztJQUMvQixxQkFBWSxHQUFtQixjQUFjLENBQUM7SUFDOUMsa0JBQVMsR0FBZ0IsV0FBVyxDQUFDO0lBQ3JDLHNCQUFhLEdBQW9CLGVBQWUsQ0FBQztJQUNqRCwyQkFBa0IsR0FBeUIsb0JBQW9CLENBQUM7SUFDaEUsa0NBQXlCLEdBQWdDLDJCQUEyQixDQUFDO0lBQ3JGLHlDQUFnQyxHQUF1QyxrQ0FBa0MsQ0FBQztJQUV2SCxxRkFBcUY7SUFDeEUsa0JBQVMsR0FBZ0IsV0FBVyxDQUFDO0lBQ3JDLHFCQUFZLEdBQW1CLGNBQWMsQ0FBQztJQUM5Qyw0QkFBbUIsR0FBMEIscUJBQXFCLENBQUM7SUFDbkUsdUJBQWMsR0FBcUIsZ0JBQWdCLENBQUM7SUFDcEQsNEJBQW1CLEdBQTBCLHFCQUFxQixDQUFDO0lBQ25FLGdCQUFPLEdBQWMsU0FBUyxDQUFDO0lBQy9CLG9CQUFXLEdBQWtCLGFBQWEsQ0FBQztJQUMzQyxxQkFBWSxHQUFtQixjQUFjLENBQUM7SUFDOUMseUJBQWdCLEdBQXVCLGtCQUFrQixDQUFDO0lBQzFELGdCQUFPLEdBQWMsU0FBUyxDQUFDO0lBQy9CLGlCQUFRLEdBQWUsVUFBVSxDQUFDO0lBQ2xDLGVBQU0sR0FBYSxRQUFR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RUM7QUFFRCwyQkFBa0MsUUFBa0I7SUFDbEQsSUFBSSxRQUFRLEtBQUssS0FBSyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3BELE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFhLENBQUM7S0FDcEQ7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBTkQsOENBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RhdGVUaW1lRXhwciwgZGF0ZVRpbWVFeHByfSBmcm9tICcuL2RhdGV0aW1lJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuL2xvZyc7XG5pbXBvcnQge2FjY2Vzc1BhdGhXaXRoRGF0dW0sIEZsYWcsIGZsYWdLZXlzfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgbmFtZXNwYWNlIFRpbWVVbml0IHtcbiAgZXhwb3J0IGNvbnN0IFlFQVI6ICd5ZWFyJyA9ICd5ZWFyJztcbiAgZXhwb3J0IGNvbnN0IE1PTlRIOiAnbW9udGgnID0gJ21vbnRoJztcbiAgZXhwb3J0IGNvbnN0IERBWTogJ2RheScgPSAnZGF5JztcbiAgZXhwb3J0IGNvbnN0IERBVEU6ICdkYXRlJyA9ICdkYXRlJztcbiAgZXhwb3J0IGNvbnN0IEhPVVJTOiAnaG91cnMnID0gJ2hvdXJzJztcbiAgZXhwb3J0IGNvbnN0IE1JTlVURVM6ICdtaW51dGVzJyA9ICdtaW51dGVzJztcbiAgZXhwb3J0IGNvbnN0IFNFQ09ORFM6ICdzZWNvbmRzJyA9ICdzZWNvbmRzJztcbiAgZXhwb3J0IGNvbnN0IE1JTExJU0VDT05EUzogJ21pbGxpc2Vjb25kcycgPSAnbWlsbGlzZWNvbmRzJztcbiAgZXhwb3J0IGNvbnN0IFlFQVJNT05USDogJ3llYXJtb250aCcgPSAneWVhcm1vbnRoJztcbiAgZXhwb3J0IGNvbnN0IFlFQVJNT05USERBVEU6ICd5ZWFybW9udGhkYXRlJyA9ICd5ZWFybW9udGhkYXRlJztcbiAgZXhwb3J0IGNvbnN0IFlFQVJNT05USERBVEVIT1VSUzogJ3llYXJtb250aGRhdGVob3VycycgPSAneWVhcm1vbnRoZGF0ZWhvdXJzJztcbiAgZXhwb3J0IGNvbnN0IFlFQVJNT05USERBVEVIT1VSU01JTlVURVM6ICd5ZWFybW9udGhkYXRlaG91cnNtaW51dGVzJyA9ICd5ZWFybW9udGhkYXRlaG91cnNtaW51dGVzJztcbiAgZXhwb3J0IGNvbnN0IFlFQVJNT05USERBVEVIT1VSU01JTlVURVNTRUNPTkRTOiAneWVhcm1vbnRoZGF0ZWhvdXJzbWludXRlc3NlY29uZHMnID0gJ3llYXJtb250aGRhdGVob3Vyc21pbnV0ZXNzZWNvbmRzJztcblxuICAvLyBNT05USERBVEUgYWx3YXlzIGluY2x1ZGUgMjkgRmVicnVhcnkgc2luY2Ugd2UgdXNlIHllYXIgMHRoICh3aGljaCBpcyBhIGxlYXAgeWVhcik7XG4gIGV4cG9ydCBjb25zdCBNT05USERBVEU6ICdtb250aGRhdGUnID0gJ21vbnRoZGF0ZSc7XG4gIGV4cG9ydCBjb25zdCBIT1VSU01JTlVURVM6ICdob3Vyc21pbnV0ZXMnID0gJ2hvdXJzbWludXRlcyc7XG4gIGV4cG9ydCBjb25zdCBIT1VSU01JTlVURVNTRUNPTkRTOiAnaG91cnNtaW51dGVzc2Vjb25kcycgPSAnaG91cnNtaW51dGVzc2Vjb25kcyc7XG4gIGV4cG9ydCBjb25zdCBNSU5VVEVTU0VDT05EUzogJ21pbnV0ZXNzZWNvbmRzJyA9ICdtaW51dGVzc2Vjb25kcyc7XG4gIGV4cG9ydCBjb25zdCBTRUNPTkRTTUlMTElTRUNPTkRTOiAnc2Vjb25kc21pbGxpc2Vjb25kcycgPSAnc2Vjb25kc21pbGxpc2Vjb25kcyc7XG4gIGV4cG9ydCBjb25zdCBRVUFSVEVSOiAncXVhcnRlcicgPSAncXVhcnRlcic7XG4gIGV4cG9ydCBjb25zdCBZRUFSUVVBUlRFUjogJ3llYXJxdWFydGVyJyA9ICd5ZWFycXVhcnRlcic7XG4gIGV4cG9ydCBjb25zdCBRVUFSVEVSTU9OVEg6ICdxdWFydGVybW9udGgnID0gJ3F1YXJ0ZXJtb250aCc7XG4gIGV4cG9ydCBjb25zdCBZRUFSUVVBUlRFUk1PTlRIOiAneWVhcnF1YXJ0ZXJtb250aCcgPSAneWVhcnF1YXJ0ZXJtb250aCc7XG4gIGV4cG9ydCBjb25zdCBVVENZRUFSOiAndXRjeWVhcicgPSAndXRjeWVhcic7XG4gIGV4cG9ydCBjb25zdCBVVENNT05USDogJ3V0Y21vbnRoJyA9ICd1dGNtb250aCc7XG4gIGV4cG9ydCBjb25zdCBVVENEQVk6ICd1dGNkYXknID0gJ3V0Y2RheSc7XG4gIGV4cG9ydCBjb25zdCBVVENEQVRFOiAndXRjZGF0ZScgPSAndXRjZGF0ZSc7XG4gIGV4cG9ydCBjb25zdCBVVENIT1VSUzogJ3V0Y2hvdXJzJyA9ICd1dGNob3Vycyc7XG4gIGV4cG9ydCBjb25zdCBVVENNSU5VVEVTOiAndXRjbWludXRlcycgPSAndXRjbWludXRlcyc7XG4gIGV4cG9ydCBjb25zdCBVVENTRUNPTkRTOiAndXRjc2Vjb25kcycgPSAndXRjc2Vjb25kcyc7XG4gIGV4cG9ydCBjb25zdCBVVENNSUxMSVNFQ09ORFM6ICd1dGNtaWxsaXNlY29uZHMnID0gJ3V0Y21pbGxpc2Vjb25kcyc7XG4gIGV4cG9ydCBjb25zdCBVVENZRUFSTU9OVEg6ICd1dGN5ZWFybW9udGgnID0gJ3V0Y3llYXJtb250aCc7XG4gIGV4cG9ydCBjb25zdCBVVENZRUFSTU9OVEhEQVRFOiAndXRjeWVhcm1vbnRoZGF0ZScgPSAndXRjeWVhcm1vbnRoZGF0ZSc7XG4gIGV4cG9ydCBjb25zdCBVVENZRUFSTU9OVEhEQVRFSE9VUlM6ICd1dGN5ZWFybW9udGhkYXRlaG91cnMnID0gJ3V0Y3llYXJtb250aGRhdGVob3Vycyc7XG4gIGV4cG9ydCBjb25zdCBVVENZRUFSTU9OVEhEQVRFSE9VUlNNSU5VVEVTOiAndXRjeWVhcm1vbnRoZGF0ZWhvdXJzbWludXRlcycgPSAndXRjeWVhcm1vbnRoZGF0ZWhvdXJzbWludXRlcyc7XG4gIGV4cG9ydCBjb25zdCBVVENZRUFSTU9OVEhEQVRFSE9VUlNNSU5VVEVTU0VDT05EUzogJ3V0Y3llYXJtb250aGRhdGVob3Vyc21pbnV0ZXNzZWNvbmRzJyA9ICd1dGN5ZWFybW9udGhkYXRlaG91cnNtaW51dGVzc2Vjb25kcyc7XG5cbiAgLy8gTU9OVEhEQVRFIGFsd2F5cyBpbmNsdWRlIDI5IEZlYnJ1YXJ5IHNpbmNlIHdlIHVzZSB5ZWFyIDB0aCAod2hpY2ggaXMgYSBsZWFwIHllYXIpO1xuICBleHBvcnQgY29uc3QgVVRDTU9OVEhEQVRFOiAndXRjbW9udGhkYXRlJyA9ICd1dGNtb250aGRhdGUnO1xuICBleHBvcnQgY29uc3QgVVRDSE9VUlNNSU5VVEVTOiAndXRjaG91cnNtaW51dGVzJyA9ICd1dGNob3Vyc21pbnV0ZXMnO1xuICBleHBvcnQgY29uc3QgVVRDSE9VUlNNSU5VVEVTU0VDT05EUzogJ3V0Y2hvdXJzbWludXRlc3NlY29uZHMnID0gJ3V0Y2hvdXJzbWludXRlc3NlY29uZHMnO1xuICBleHBvcnQgY29uc3QgVVRDTUlOVVRFU1NFQ09ORFM6ICd1dGNtaW51dGVzc2Vjb25kcycgPSAndXRjbWludXRlc3NlY29uZHMnO1xuICBleHBvcnQgY29uc3QgVVRDU0VDT05EU01JTExJU0VDT05EUzogJ3V0Y3NlY29uZHNtaWxsaXNlY29uZHMnID0gJ3V0Y3NlY29uZHNtaWxsaXNlY29uZHMnO1xuICBleHBvcnQgY29uc3QgVVRDUVVBUlRFUjogJ3V0Y3F1YXJ0ZXInID0gJ3V0Y3F1YXJ0ZXInO1xuICBleHBvcnQgY29uc3QgVVRDWUVBUlFVQVJURVI6ICd1dGN5ZWFycXVhcnRlcicgPSAndXRjeWVhcnF1YXJ0ZXInO1xuICBleHBvcnQgY29uc3QgVVRDUVVBUlRFUk1PTlRIOiAndXRjcXVhcnRlcm1vbnRoJyA9ICd1dGNxdWFydGVybW9udGgnO1xuICBleHBvcnQgY29uc3QgVVRDWUVBUlFVQVJURVJNT05USDogJ3V0Y3llYXJxdWFydGVybW9udGgnID0gJ3V0Y3llYXJxdWFydGVybW9udGgnO1xufVxuXG5leHBvcnQgdHlwZSBMb2NhbFNpbmdsZVRpbWVVbml0ID1cbiAgdHlwZW9mIFRpbWVVbml0LllFQVIgfFxuICB0eXBlb2YgVGltZVVuaXQuUVVBUlRFUiB8XG4gIHR5cGVvZiBUaW1lVW5pdC5NT05USCB8XG4gIHR5cGVvZiBUaW1lVW5pdC5EQVkgfFxuICB0eXBlb2YgVGltZVVuaXQuREFURSB8XG4gIHR5cGVvZiBUaW1lVW5pdC5IT1VSUyB8XG4gIHR5cGVvZiBUaW1lVW5pdC5NSU5VVEVTIHxcbiAgdHlwZW9mIFRpbWVVbml0LlNFQ09ORFMgfFxuICB0eXBlb2YgVGltZVVuaXQuTUlMTElTRUNPTkRTO1xuXG4vKiogVGltZSBVbml0IHRoYXQgb25seSBjb3JyZXNwb25kcyB0byBvbmx5IG9uZSBwYXJ0IG9mIERhdGUgb2JqZWN0cy4gKi9cbmNvbnN0IExPQ0FMX1NJTkdMRV9USU1FVU5JVF9JTkRFWDogRmxhZzxMb2NhbFNpbmdsZVRpbWVVbml0PiA9IHtcbiAgeWVhcjogMSxcbiAgcXVhcnRlcjogMSxcbiAgbW9udGg6IDEsXG4gIGRheTogMSxcbiAgZGF0ZTogMSxcbiAgaG91cnM6IDEsXG4gIG1pbnV0ZXM6IDEsXG4gIHNlY29uZHM6IDEsXG4gIG1pbGxpc2Vjb25kczogMVxufTtcblxuZXhwb3J0IGNvbnN0IFRJTUVVTklUX1BBUlRTID0gZmxhZ0tleXMoTE9DQUxfU0lOR0xFX1RJTUVVTklUX0lOREVYKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxTaW5nbGVUaW1lVW5pdCh0aW1lVW5pdDogc3RyaW5nKTogdGltZVVuaXQgaXMgTG9jYWxTaW5nbGVUaW1lVW5pdCB7XG4gIHJldHVybiAhIUxPQ0FMX1NJTkdMRV9USU1FVU5JVF9JTkRFWFt0aW1lVW5pdF07XG59XG5cbmV4cG9ydCB0eXBlIFV0Y1NpbmdsZVRpbWVVbml0ID1cbiAgdHlwZW9mIFRpbWVVbml0LlVUQ1lFQVIgfFxuICB0eXBlb2YgVGltZVVuaXQuVVRDUVVBUlRFUiB8XG4gIHR5cGVvZiBUaW1lVW5pdC5VVENNT05USCB8XG4gIHR5cGVvZiBUaW1lVW5pdC5VVENEQVkgfFxuICB0eXBlb2YgVGltZVVuaXQuVVRDREFURSB8XG4gIHR5cGVvZiBUaW1lVW5pdC5VVENIT1VSUyB8XG4gIHR5cGVvZiBUaW1lVW5pdC5VVENNSU5VVEVTIHxcbiAgdHlwZW9mIFRpbWVVbml0LlVUQ1NFQ09ORFMgfFxuICB0eXBlb2YgVGltZVVuaXQuVVRDTUlMTElTRUNPTkRTO1xuXG5jb25zdCBVVENfU0lOR0xFX1RJTUVVTklUX0lOREVYOiBGbGFnPFV0Y1NpbmdsZVRpbWVVbml0PiA9IHtcbiAgdXRjeWVhcjogMSxcbiAgdXRjcXVhcnRlcjogMSxcbiAgdXRjbW9udGg6IDEsXG4gIHV0Y2RheTogMSxcbiAgdXRjZGF0ZTogMSxcbiAgdXRjaG91cnM6IDEsXG4gIHV0Y21pbnV0ZXM6IDEsXG4gIHV0Y3NlY29uZHM6IDEsXG4gIHV0Y21pbGxpc2Vjb25kczogMVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzVXRjU2luZ2xlVGltZVVuaXQodGltZVVuaXQ6IHN0cmluZyk6IHRpbWVVbml0IGlzIFV0Y1NpbmdsZVRpbWVVbml0IHtcbiAgcmV0dXJuICEhVVRDX1NJTkdMRV9USU1FVU5JVF9JTkRFWFt0aW1lVW5pdF07XG59XG5cbmV4cG9ydCB0eXBlIFNpbmdsZVRpbWVVbml0ID0gTG9jYWxTaW5nbGVUaW1lVW5pdCB8IFV0Y1NpbmdsZVRpbWVVbml0O1xuXG5leHBvcnQgdHlwZSBMb2NhbE11bHRpVGltZVVuaXQgPVxuICAvLyBMb2NhbCBUaW1lXG4gIHR5cGVvZiBUaW1lVW5pdC5ZRUFSUVVBUlRFUiB8IHR5cGVvZiBUaW1lVW5pdC5ZRUFSUVVBUlRFUk1PTlRIIHxcbiAgdHlwZW9mIFRpbWVVbml0LllFQVJNT05USCB8IHR5cGVvZiBUaW1lVW5pdC5ZRUFSTU9OVEhEQVRFIHwgdHlwZW9mIFRpbWVVbml0LllFQVJNT05USERBVEVIT1VSUyB8IHR5cGVvZiBUaW1lVW5pdC5ZRUFSTU9OVEhEQVRFSE9VUlNNSU5VVEVTfCB0eXBlb2YgVGltZVVuaXQuWUVBUk1PTlRIREFURUhPVVJTTUlOVVRFU1NFQ09ORFMgfFxuICB0eXBlb2YgVGltZVVuaXQuUVVBUlRFUk1PTlRIIHxcbiAgdHlwZW9mIFRpbWVVbml0Lk1PTlRIREFURSB8XG4gIHR5cGVvZiBUaW1lVW5pdC5IT1VSU01JTlVURVMgfCB0eXBlb2YgVGltZVVuaXQuSE9VUlNNSU5VVEVTU0VDT05EUyB8XG4gIHR5cGVvZiBUaW1lVW5pdC5NSU5VVEVTU0VDT05EUyB8XG4gIHR5cGVvZiBUaW1lVW5pdC5TRUNPTkRTTUlMTElTRUNPTkRTO1xuXG5jb25zdCBMT0NBTF9NVUxUSV9USU1FVU5JVF9JTkRFWDogRmxhZzxMb2NhbE11bHRpVGltZVVuaXQ+ID0ge1xuICB5ZWFycXVhcnRlcjogMSxcbiAgeWVhcnF1YXJ0ZXJtb250aDogMSxcblxuICB5ZWFybW9udGg6IDEsXG4gIHllYXJtb250aGRhdGU6IDEsXG4gIHllYXJtb250aGRhdGVob3VyczogMSxcbiAgeWVhcm1vbnRoZGF0ZWhvdXJzbWludXRlczogMSxcbiAgeWVhcm1vbnRoZGF0ZWhvdXJzbWludXRlc3NlY29uZHM6IDEsXG5cbiAgcXVhcnRlcm1vbnRoOiAxLFxuXG4gIG1vbnRoZGF0ZTogMSxcblxuICBob3Vyc21pbnV0ZXM6IDEsXG4gIGhvdXJzbWludXRlc3NlY29uZHM6IDEsXG5cbiAgbWludXRlc3NlY29uZHM6IDEsXG5cbiAgc2Vjb25kc21pbGxpc2Vjb25kczogMVxufTtcblxuZXhwb3J0IHR5cGUgVXRjTXVsdGlUaW1lVW5pdCA9XG4gIHR5cGVvZiBUaW1lVW5pdC5VVENZRUFSUVVBUlRFUiB8IHR5cGVvZiBUaW1lVW5pdC5VVENZRUFSUVVBUlRFUk1PTlRIIHxcbiAgdHlwZW9mIFRpbWVVbml0LlVUQ1lFQVJNT05USCB8IHR5cGVvZiBUaW1lVW5pdC5VVENZRUFSTU9OVEhEQVRFIHwgdHlwZW9mIFRpbWVVbml0LlVUQ1lFQVJNT05USERBVEVIT1VSUyB8IHR5cGVvZiBUaW1lVW5pdC5VVENZRUFSTU9OVEhEQVRFSE9VUlNNSU5VVEVTfCB0eXBlb2YgVGltZVVuaXQuVVRDWUVBUk1PTlRIREFURUhPVVJTTUlOVVRFU1NFQ09ORFMgfFxuICB0eXBlb2YgVGltZVVuaXQuVVRDUVVBUlRFUk1PTlRIIHxcbiAgdHlwZW9mIFRpbWVVbml0LlVUQ01PTlRIREFURSB8XG4gIHR5cGVvZiBUaW1lVW5pdC5VVENIT1VSU01JTlVURVMgfCB0eXBlb2YgVGltZVVuaXQuVVRDSE9VUlNNSU5VVEVTU0VDT05EUyB8XG4gIHR5cGVvZiBUaW1lVW5pdC5VVENNSU5VVEVTU0VDT05EUyB8XG4gIHR5cGVvZiBUaW1lVW5pdC5VVENTRUNPTkRTTUlMTElTRUNPTkRTO1xuXG5jb25zdCBVVENfTVVMVElfVElNRVVOSVRfSU5ERVg6IEZsYWc8VXRjTXVsdGlUaW1lVW5pdD4gPSB7XG4gIHV0Y3llYXJxdWFydGVyOiAxLFxuICB1dGN5ZWFycXVhcnRlcm1vbnRoOiAxLFxuXG4gIHV0Y3llYXJtb250aDogMSxcbiAgdXRjeWVhcm1vbnRoZGF0ZTogMSxcbiAgdXRjeWVhcm1vbnRoZGF0ZWhvdXJzOiAxLFxuICB1dGN5ZWFybW9udGhkYXRlaG91cnNtaW51dGVzOiAxLFxuICB1dGN5ZWFybW9udGhkYXRlaG91cnNtaW51dGVzc2Vjb25kczogMSxcblxuICB1dGNxdWFydGVybW9udGg6IDEsXG5cbiAgdXRjbW9udGhkYXRlOiAxLFxuXG4gIHV0Y2hvdXJzbWludXRlczogMSxcbiAgdXRjaG91cnNtaW51dGVzc2Vjb25kczogMSxcblxuICB1dGNtaW51dGVzc2Vjb25kczogMSxcblxuICB1dGNzZWNvbmRzbWlsbGlzZWNvbmRzOiAxXG59O1xuXG5leHBvcnQgdHlwZSBNdWx0aVRpbWVVbml0ID0gTG9jYWxNdWx0aVRpbWVVbml0IHwgVXRjTXVsdGlUaW1lVW5pdDtcblxuXG5leHBvcnQgdHlwZSBMb2NhbFRpbWVVbml0ID0gTG9jYWxTaW5nbGVUaW1lVW5pdCB8IExvY2FsTXVsdGlUaW1lVW5pdDtcbmV4cG9ydCB0eXBlIFV0Y1RpbWVVbml0ID0gVXRjU2luZ2xlVGltZVVuaXQgfCBVdGNNdWx0aVRpbWVVbml0O1xuXG5jb25zdCBVVENfVElNRVVOSVRfSU5ERVg6IEZsYWc8VXRjVGltZVVuaXQ+ID0ge1xuICAuLi5VVENfU0lOR0xFX1RJTUVVTklUX0lOREVYLFxuICAuLi5VVENfTVVMVElfVElNRVVOSVRfSU5ERVhcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VUQ1RpbWVVbml0KHQ6IHN0cmluZyk6IHQgaXMgVXRjVGltZVVuaXQge1xuICByZXR1cm4gISFVVENfVElNRVVOSVRfSU5ERVhbdF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbFRpbWVVbml0KHQ6IFV0Y1RpbWVVbml0KTogTG9jYWxUaW1lVW5pdCB7XG4gIHJldHVybiB0LnN1YnN0cigzKSBhcyBMb2NhbFRpbWVVbml0O1xufVxuXG5leHBvcnQgdHlwZSBUaW1lVW5pdCA9IFNpbmdsZVRpbWVVbml0IHwgTXVsdGlUaW1lVW5pdDtcblxuY29uc3QgVElNRVVOSVRfSU5ERVg6IEZsYWc8VGltZVVuaXQ+ID0ge1xuICAuLi5MT0NBTF9TSU5HTEVfVElNRVVOSVRfSU5ERVgsXG4gIC4uLlVUQ19TSU5HTEVfVElNRVVOSVRfSU5ERVgsXG4gIC4uLkxPQ0FMX01VTFRJX1RJTUVVTklUX0lOREVYLFxuICAuLi5VVENfTVVMVElfVElNRVVOSVRfSU5ERVhcbn07XG5cbmV4cG9ydCBjb25zdCBUSU1FVU5JVFMgPSBmbGFnS2V5cyhUSU1FVU5JVF9JTkRFWCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RpbWVVbml0KHQ6IHN0cmluZyk6IHQgaXMgVGltZVVuaXQge1xuICByZXR1cm4gISFUSU1FVU5JVF9JTkRFWFt0XTtcbn1cblxudHlwZSBEYXRlTWV0aG9kTmFtZSA9IGtleW9mIERhdGU7XG5cbmNvbnN0IFNFVF9EQVRFX01FVEhPRDogUmVjb3JkPExvY2FsU2luZ2xlVGltZVVuaXQsIERhdGVNZXRob2ROYW1lPiA9IHtcbiAgeWVhcjogJ3NldEZ1bGxZZWFyJyxcbiAgbW9udGg6ICdzZXRNb250aCcsXG4gIGRhdGU6ICdzZXREYXRlJyxcbiAgaG91cnM6ICdzZXRIb3VycycsXG4gIG1pbnV0ZXM6ICdzZXRNaW51dGVzJyxcbiAgc2Vjb25kczogJ3NldFNlY29uZHMnLFxuICBtaWxsaXNlY29uZHM6ICdzZXRNaWxsaXNlY29uZHMnLFxuICAvLyBEYXkgYW5kIHF1YXJ0ZXIgaGF2ZSB0aGVpciBvd24gc3BlY2lhbCBjYXNlc1xuICBxdWFydGVyOiBudWxsLFxuICBkYXk6IG51bGwsXG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgZGF0ZSB0byBvbmx5IGhhdmUgdGhlIG1lYXN1cmVtZW50cyByZWxldmFudCB0byB0aGUgc3BlY2lmaWVkIHVuaXRcbiAqIGkuZS4gKCd5ZWFybW9udGgnLCAnMjAwMC0xMi0wNCAwNzo1ODoxNCcpIC0+ICcyMDAwLTEyLTAxIDAwOjAwOjAwJ1xuICogTm90ZTogdGhlIGJhc2UgZGF0ZSBpcyBKYW4gMDEgMTkwMCAwMDowMDowMFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydCh1bml0OiBUaW1lVW5pdCwgZGF0ZTogRGF0ZSk6IERhdGUge1xuICBjb25zdCBpc1VUQyA9IGlzVVRDVGltZVVuaXQodW5pdCk7XG4gIGNvbnN0IHJlc3VsdDogRGF0ZSA9IGlzVVRDID9cbiAgICAvLyBzdGFydCB3aXRoIHVuaWZvcm0gZGF0ZVxuICAgIG5ldyBEYXRlKERhdGUuVVRDKDAsIDAsIDEsIDAsIDAsIDAsIDApKSA6XG4gICAgbmV3IERhdGUoMCwgMCwgMSwgMCwgMCwgMCwgMCk7XG4gICAgZm9yIChjb25zdCB0aW1lVW5pdFBhcnQgb2YgVElNRVVOSVRfUEFSVFMpIHtcbiAgICBpZiAoY29udGFpbnNUaW1lVW5pdCh1bml0LCB0aW1lVW5pdFBhcnQpKSB7XG4gICAgICBzd2l0Y2ggKHRpbWVVbml0UGFydCkge1xuICAgICAgICBjYXNlIFRpbWVVbml0LkRBWTpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IHRvIFRpbWVVbml0cyBjb250YWluaW5nIFxcJ2RheVxcJycpO1xuICAgICAgICBjYXNlIFRpbWVVbml0LlFVQVJURVI6IHtcbiAgICAgICAgICBjb25zdCB7Z2V0RGF0ZU1ldGhvZCwgc2V0RGF0ZU1ldGhvZH0gPSBkYXRlTWV0aG9kcygnbW9udGgnLCBpc1VUQyk7XG4gICAgICAgICAgLy8gaW5kaWNhdGUgcXVhcnRlciBieSBzZXR0aW5nIG1vbnRoIHRvIGJlIHRoZSBmaXJzdCBvZiB0aGUgcXVhcnRlciBpLmUuIG1heSAoNCkgLT4gYXByaWwgKDMpXG4gICAgICAgICAgcmVzdWx0W3NldERhdGVNZXRob2RdKChNYXRoLmZsb29yKGRhdGVbZ2V0RGF0ZU1ldGhvZF0oKSAvIDMpKSAqIDMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc3Qge2dldERhdGVNZXRob2QsIHNldERhdGVNZXRob2R9ID0gZGF0ZU1ldGhvZHModGltZVVuaXRQYXJ0LCBpc1VUQyk7XG4gICAgICAgICAgcmVzdWx0W3NldERhdGVNZXRob2RdKGRhdGVbZ2V0RGF0ZU1ldGhvZF0oKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGRhdGVNZXRob2RzKHNpbmdsZVVuaXQ6IFNpbmdsZVRpbWVVbml0LCBpc1V0YzogYm9vbGVhbikge1xuICBjb25zdCByYXdTZXREYXRlTWV0aG9kID0gU0VUX0RBVEVfTUVUSE9EW3NpbmdsZVVuaXRdO1xuICBjb25zdCBzZXREYXRlTWV0aG9kID0gaXNVdGMgPyAnc2V0VVRDJyArIHJhd1NldERhdGVNZXRob2Quc3Vic3RyKDMpIDogcmF3U2V0RGF0ZU1ldGhvZDtcbiAgY29uc3QgZ2V0RGF0ZU1ldGhvZCA9ICdnZXQnICsgKGlzVXRjID8gJ1VUQycgOiAnJykgKyByYXdTZXREYXRlTWV0aG9kLnN1YnN0cigzKTtcbiAgcmV0dXJuIHtzZXREYXRlTWV0aG9kLCBnZXREYXRlTWV0aG9kfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVVbml0UGFydHModGltZVVuaXQ6IFRpbWVVbml0KSB7XG4gIHJldHVybiBUSU1FVU5JVF9QQVJUUy5yZWR1Y2UoKHBhcnRzLCBwYXJ0KSA9PiB7XG4gICAgaWYgKGNvbnRhaW5zVGltZVVuaXQodGltZVVuaXQsIHBhcnQpKSB7XG4gICAgICByZXR1cm4gcGFydHMuY29uY2F0KHBhcnQpO1xuICAgIH1cbiAgICByZXR1cm4gcGFydHM7XG4gIH0sIFtdKTtcbn1cblxuLyoqIFJldHVybnMgdHJ1ZSBpZiBmdWxsVGltZVVuaXQgY29udGFpbnMgdGhlIHRpbWVVbml0LCBmYWxzZSBvdGhlcndpc2UuICovXG5leHBvcnQgZnVuY3Rpb24gY29udGFpbnNUaW1lVW5pdChmdWxsVGltZVVuaXQ6IFRpbWVVbml0LCB0aW1lVW5pdDogVGltZVVuaXQpIHtcbiAgY29uc3QgaW5kZXggPSBmdWxsVGltZVVuaXQuaW5kZXhPZih0aW1lVW5pdCk7XG4gIHJldHVybiBpbmRleCA+IC0xICYmXG4gICAgKFxuICAgICAgdGltZVVuaXQgIT09IFRpbWVVbml0LlNFQ09ORFMgfHxcbiAgICAgIGluZGV4ID09PSAwIHx8XG4gICAgICBmdWxsVGltZVVuaXQuY2hhckF0KGluZGV4LTEpICE9PSAnaScgLy8gZXhjbHVkZSBtaWxsaXNlY29uZHNcbiAgICApO1xufVxuXG4vKipcbiAqIFJldHVybnMgVmVnYSBleHByZXNzc2lvbiBmb3IgYSBnaXZlbiB0aW1lVW5pdCBhbmQgZmllbGRSZWZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpZWxkRXhwcihmdWxsVGltZVVuaXQ6IFRpbWVVbml0LCBmaWVsZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgZmllbGRSZWYgPSBhY2Nlc3NQYXRoV2l0aERhdHVtKGZpZWxkKTtcblxuICBjb25zdCB1dGMgPSBpc1VUQ1RpbWVVbml0KGZ1bGxUaW1lVW5pdCkgPyAndXRjJyA6ICcnO1xuICBmdW5jdGlvbiBmdW5jKHRpbWVVbml0OiBUaW1lVW5pdCkge1xuICAgIGlmICh0aW1lVW5pdCA9PT0gVGltZVVuaXQuUVVBUlRFUikge1xuICAgICAgLy8gcXVhcnRlciBzdGFydGluZyBhdCAwICgwLDMsNiw5KS5cbiAgICAgIHJldHVybiBgKCR7dXRjfXF1YXJ0ZXIoJHtmaWVsZFJlZn0pLTEpYDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGAke3V0Y30ke3RpbWVVbml0fSgke2ZpZWxkUmVmfSlgO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGQgPSBUSU1FVU5JVF9QQVJUUy5yZWR1Y2UoKGRhdGVFeHByOiBEYXRlVGltZUV4cHIsIHR1OiBUaW1lVW5pdCkgPT4ge1xuICAgIGlmIChjb250YWluc1RpbWVVbml0KGZ1bGxUaW1lVW5pdCwgdHUpKSB7XG4gICAgICBkYXRlRXhwclt0dV0gPSBmdW5jKHR1KTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGVFeHByO1xuICB9LCB7fSBhcyB7W2tleSBpbiBTaW5nbGVUaW1lVW5pdF06IHN0cmluZ30pO1xuXG4gIHJldHVybiBkYXRlVGltZUV4cHIoZCk7XG59XG5cbi8qKlxuICogcmV0dXJucyB0aGUgc2lnbmFsIGV4cHJlc3Npb24gdXNlZCBmb3IgYXhpcyBsYWJlbHMgZm9yIGEgdGltZSB1bml0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRFeHByZXNzaW9uKHRpbWVVbml0OiBUaW1lVW5pdCwgZmllbGQ6IHN0cmluZywgc2hvcnRUaW1lTGFiZWxzOiBib29sZWFuLCBpc1VUQ1NjYWxlOiBib29sZWFuKTogc3RyaW5nIHtcbiAgaWYgKCF0aW1lVW5pdCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBkYXRlQ29tcG9uZW50czogc3RyaW5nW10gPSBbXTtcbiAgbGV0IGV4cHJlc3Npb24gPSAnJztcbiAgY29uc3QgaGFzWWVhciA9IGNvbnRhaW5zVGltZVVuaXQodGltZVVuaXQsIFRpbWVVbml0LllFQVIpO1xuXG4gIGlmIChjb250YWluc1RpbWVVbml0KHRpbWVVbml0LCBUaW1lVW5pdC5RVUFSVEVSKSkge1xuICAgLy8gc3BlY2lhbCBleHByZXNzaW9uIGZvciBxdWFydGVyIGFzIHByZWZpeFxuICAgIGV4cHJlc3Npb24gPSBgJ1EnICsgcXVhcnRlcigke2ZpZWxkfSlgO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5zVGltZVVuaXQodGltZVVuaXQsIFRpbWVVbml0Lk1PTlRIKSkge1xuICAgIC8vIEJ5IGRlZmF1bHQgdXNlIHNob3J0IG1vbnRoIG5hbWVcbiAgICBkYXRlQ29tcG9uZW50cy5wdXNoKHNob3J0VGltZUxhYmVscyAhPT0gZmFsc2UgPyAnJWInIDogJyVCJyk7XG4gIH1cblxuICBpZiAoY29udGFpbnNUaW1lVW5pdCh0aW1lVW5pdCwgVGltZVVuaXQuREFZKSkge1xuICAgIGRhdGVDb21wb25lbnRzLnB1c2goc2hvcnRUaW1lTGFiZWxzID8gJyVhJyA6ICclQScpO1xuICB9IGVsc2UgaWYgKGNvbnRhaW5zVGltZVVuaXQodGltZVVuaXQsIFRpbWVVbml0LkRBVEUpKSB7XG4gICAgZGF0ZUNvbXBvbmVudHMucHVzaCgnJWQnICsgKGhhc1llYXIgPyAnLCcgOiAnJykpOyAvLyBhZGQgY29tbWEgaWYgdGhlcmUgaXMgeWVhclxuICB9XG5cbiAgaWYgKGhhc1llYXIpIHtcbiAgICBkYXRlQ29tcG9uZW50cy5wdXNoKHNob3J0VGltZUxhYmVscyA/ICcleScgOiAnJVknKTtcbiAgfVxuXG4gIGNvbnN0IHRpbWVDb21wb25lbnRzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGlmIChjb250YWluc1RpbWVVbml0KHRpbWVVbml0LCBUaW1lVW5pdC5IT1VSUykpIHtcbiAgICB0aW1lQ29tcG9uZW50cy5wdXNoKCclSCcpO1xuICB9XG4gIGlmIChjb250YWluc1RpbWVVbml0KHRpbWVVbml0LCBUaW1lVW5pdC5NSU5VVEVTKSkge1xuICAgIHRpbWVDb21wb25lbnRzLnB1c2goJyVNJyk7XG4gIH1cbiAgaWYgKGNvbnRhaW5zVGltZVVuaXQodGltZVVuaXQsIFRpbWVVbml0LlNFQ09ORFMpKSB7XG4gICAgdGltZUNvbXBvbmVudHMucHVzaCgnJVMnKTtcbiAgfVxuICBpZiAoY29udGFpbnNUaW1lVW5pdCh0aW1lVW5pdCwgVGltZVVuaXQuTUlMTElTRUNPTkRTKSkge1xuICAgIHRpbWVDb21wb25lbnRzLnB1c2goJyVMJyk7XG4gIH1cblxuICBjb25zdCBkYXRlVGltZUNvbXBvbmVudHM6IHN0cmluZ1tdID0gW107XG4gIGlmIChkYXRlQ29tcG9uZW50cy5sZW5ndGggPiAwKSB7XG4gICAgZGF0ZVRpbWVDb21wb25lbnRzLnB1c2goZGF0ZUNvbXBvbmVudHMuam9pbignICcpKTtcbiAgfVxuICBpZiAodGltZUNvbXBvbmVudHMubGVuZ3RoID4gMCkge1xuICAgIGRhdGVUaW1lQ29tcG9uZW50cy5wdXNoKHRpbWVDb21wb25lbnRzLmpvaW4oJzonKSk7XG4gIH1cblxuICBpZiAoZGF0ZVRpbWVDb21wb25lbnRzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoZXhwcmVzc2lvbikge1xuICAgICAgLy8gQWRkIHNwYWNlIGJldHdlZW4gcXVhcnRlciBhbmQgbWFpbiB0aW1lIGZvcm1hdFxuICAgICAgZXhwcmVzc2lvbiArPSBgICsgJyAnICsgYDtcbiAgICB9XG5cbiAgICAvLyBXZSBvbmx5IHVzZSB1dGNGb3JtYXQgZm9yIHV0YyBzY2FsZVxuICAgIC8vIEZvciB1dGMgdGltZSB1bml0cywgdGhlIGRhdGEgaXMgYWxyZWFkeSBjb252ZXJ0ZWQgYXMgYSBwYXJ0IG9mIHRpbWVVbml0IHRyYW5zZm9ybS5cbiAgICAvLyBUaHVzLCB1dGMgdGltZSB1bml0cyBzaG91bGQgdXNlIHRpbWVGb3JtYXQgdG8gYXZvaWQgc2hpZnRpbmcgdGhlIHRpbWUgdHdpY2UuXG4gICAgaWYgKGlzVVRDU2NhbGUpIHtcbiAgICAgIGV4cHJlc3Npb24gKz0gYHV0Y0Zvcm1hdCgke2ZpZWxkfSwgJyR7ZGF0ZVRpbWVDb21wb25lbnRzLmpvaW4oJyAnKX0nKWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cHJlc3Npb24gKz0gYHRpbWVGb3JtYXQoJHtmaWVsZH0sICcke2RhdGVUaW1lQ29tcG9uZW50cy5qb2luKCcgJyl9JylgO1xuICAgIH1cbiAgfVxuXG4gIC8vIElmIGV4cHJlc3Npb24gaXMgc3RpbGwgYW4gZW1wdHkgc3RyaW5nLCByZXR1cm4gdW5kZWZpbmVkIGluc3RlYWQuXG4gIHJldHVybiBleHByZXNzaW9uIHx8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVRpbWVVbml0KHRpbWVVbml0OiBUaW1lVW5pdCk6IFRpbWVVbml0IHtcbiAgaWYgKHRpbWVVbml0ICE9PSAnZGF5JyAmJiB0aW1lVW5pdC5pbmRleE9mKCdkYXknKSA+PSAwKSB7XG4gICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuZGF5UmVwbGFjZWRXaXRoRGF0ZSh0aW1lVW5pdCkpO1xuICAgIHJldHVybiB0aW1lVW5pdC5yZXBsYWNlKCdkYXknLCAnZGF0ZScpIGFzIFRpbWVVbml0O1xuICB9XG4gIHJldHVybiB0aW1lVW5pdDtcbn1cbiJdfQ==