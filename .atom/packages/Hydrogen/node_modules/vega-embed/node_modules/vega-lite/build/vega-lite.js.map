{"version":3,"file":"vega-lite.js","sources":["../node_modules/vega-util/src/accessor.js","../node_modules/vega-util/src/error.js","../node_modules/vega-util/src/splitAccessPath.js","../node_modules/vega-util/src/isArray.js","../node_modules/vega-util/src/isObject.js","../node_modules/vega-util/src/isString.js","../node_modules/vega-util/src/stringValue.js","../node_modules/vega-util/src/field.js","../node_modules/vega-util/src/accessors.js","../node_modules/vega-util/src/logger.js","../node_modules/vega-util/src/isBoolean.js","../node_modules/vega-util/src/isNumber.js","../node_modules/vega-util/src/toSet.js","../node_modules/tslib/tslib.es6.js","../node_modules/jsonify/lib/parse.js","../node_modules/jsonify/lib/stringify.js","../node_modules/jsonify/index.js","../node_modules/json-stable-stringify/index.js","src/logical.js","src/util.js","src/aggregate.js","src/axis.js","src/channel.js","src/bin.js","src/mark.js","src/log.js","src/datetime.js","src/timeunit.js","src/type.js","src/fielddef.js","src/encoding.js","src/compositemark/common.js","src/compositemark/boxplot.js","src/compositemark/errorbar.js","src/compositemark/index.js","src/guide.js","src/legend.js","src/scale.js","src/selection.js","src/title.js","src/config.js","src/stack.js","src/spec.js","src/toplevelprops.js","src/data.js","../node_modules/vega-event-selector/src/event-selector.js","src/vega.schema.js","src/compile/axis/assemble.js","src/compile/mark/valueref.js","src/compile/mark/mixins.js","src/compile/common.js","src/compile/layout/header.js","src/compile/layoutsize/assemble.js","src/compile/resolve.js","src/compile/split.js","src/compile/legend/component.js","src/compile/legend/encode.js","src/compile/legend/properties.js","src/compile/legend/parse.js","src/compile/legend/assemble.js","src/compile/projection/assemble.js","src/projection.js","src/compile/projection/component.js","src/compile/projection/parse.js","src/sort.js","src/compile/data/dataflow.js","src/compile/data/calculate.js","src/compile/data/aggregate.js","src/compile/data/facet.js","src/compile/data/filterinvalid.js","src/compile/data/formatparse.js","src/compile/data/source.js","src/compile/data/timeunit.js","src/compile/data/optimizers.js","src/compile/data/stack.js","src/compile/data/optimize.js","src/compile/scale/domain.js","src/compile/scale/assemble.js","src/compile/scale/component.js","src/compile/scale/range.js","src/compile/scale/properties.js","src/compile/scale/type.js","src/compile/scale/parse.js","src/compile/model.js","src/compile/selection/transforms/scales.js","src/compile/selection/interval.js","src/compile/selection/transforms/nearest.js","src/compile/selection/multi.js","src/compile/selection/single.js","src/compile/selection/transforms/inputs.js","src/compile/selection/transforms/project.js","src/compile/selection/transforms/toggle.js","src/compile/selection/transforms/translate.js","src/compile/selection/transforms/zoom.js","src/compile/selection/transforms/transforms.js","src/compile/selection/selection.js","src/predicate.js","src/transform.js","src/compile/data/bin.js","src/compile/data/filter.js","src/compile/data/geojson.js","src/compile/data/geopoint.js","src/compile/data/indentifier.js","src/compile/data/index.js","src/compile/data/lookup.js","src/compile/data/window.js","src/compile/data/parse.js","src/compile/baseconcat.js","src/compile/layoutsize/parse.js","src/compile/concat.js","src/compile/data/assemble.js","src/compile/repeater.js","src/compile/facet.js","src/compile/axis/component.js","src/compile/axis/config.js","src/compile/axis/encode.js","src/compile/axis/properties.js","src/compile/axis/parse.js","src/compile/mark/init.js","src/compile/mark/area.js","src/compile/mark/bar.js","src/compile/mark/geoshape.js","src/compile/mark/line.js","src/compile/mark/point.js","src/compile/mark/rect.js","src/compile/mark/rule.js","src/compile/mark/text.js","src/compile/mark/tick.js","src/compile/mark/mark.js","src/compile/unit.js","src/compile/layer.js","src/compile/repeat.js","src/compile/buildmodel.js","src/compile/compile.js","src/validate.js"],"sourcesContent":["export default function(fn, fields, name) {\n  fn.fields = fields || [];\n  fn.fname = name;\n  return fn;\n}\n\nexport function accessorName(fn) {\n  return fn == null ? null : fn.fname;\n}\n\nexport function accessorFields(fn) {\n  return fn == null ? null : fn.fields;\n}\n","export default function(message) {\n  throw Error(message);\n}\n","import error from './error';\n\nexport default function(p) {\n  var path = [],\n      q = null,\n      b = 0,\n      n = p.length,\n      s = '',\n      i, j, c;\n\n  p = p + '';\n\n  function push() {\n    path.push(s + p.substring(i, j));\n    s = '';\n    i = j + 1;\n  }\n\n  for (i=j=0; j<n; ++j) {\n    c = p[j];\n    if (c === '\\\\') {\n      s += p.substring(i, j);\n      i = ++j;\n    } else if (c === q) {\n      push();\n      q = null;\n      b = -1;\n    } else if (q) {\n      continue;\n    } else if (i === b && c === '\"') {\n      i = j + 1;\n      q = c;\n    } else if (i === b && c === \"'\") {\n      i = j + 1;\n      q = c;\n    } else if (c === '.' && !b) {\n      if (j > i) {\n        push();\n      } else {\n        i = j + 1;\n      }\n    } else if (c === '[') {\n      if (j > i) push();\n      b = i = j + 1;\n    } else if (c === ']') {\n      if (!b) error('Access path missing open bracket: ' + p);\n      if (b > 0) push();\n      b = 0;\n      i = j + 1;\n    }\n  }\n\n  if (b) error('Access path missing closing bracket: ' + p);\n  if (q) error('Access path missing closing quote: ' + p);\n\n  if (j > i) {\n    j++;\n    push();\n  }\n\n  return path;\n}\n","export default Array.isArray;\n","export default function(_) {\n  return _ === Object(_);\n}\n","export default function(_) {\n  return typeof _ === 'string';\n}\n","import isArray from './isArray';\nimport isObject from './isObject';\nimport isString from './isString';\n\nexport default function $(x) {\n  return isArray(x) ? '[' + x.map($) + ']'\n    : isObject(x) || isString(x) ?\n      // Output valid JSON and JS source strings.\n      // See http://timelessrepo.com/json-isnt-a-javascript-subset\n      JSON.stringify(x).replace('\\u2028','\\\\u2028').replace('\\u2029', '\\\\u2029')\n    : x;\n}\n","import accessor from './accessor';\nimport splitAccessPath from './splitAccessPath';\nimport stringValue from './stringValue';\n\nexport default function(field, name) {\n  var path = splitAccessPath(field),\n      code = 'return _[' + path.map(stringValue).join('][') + '];';\n\n  return accessor(\n    Function('_', code),\n    [(field = path.length===1 ? path[0] : field)],\n    name || field\n  );\n}\n","import accessor from './accessor';\nimport field from './field';\n\nvar empty = [];\n\nexport var id = field('id');\n\nexport var identity = accessor(function(_) { return _; }, empty, 'identity');\n\nexport var zero = accessor(function() { return 0; }, empty, 'zero');\n\nexport var one = accessor(function() { return 1; }, empty, 'one');\n\nexport var truthy = accessor(function() { return true; }, empty, 'true');\n\nexport var falsy = accessor(function() { return false; }, empty, 'false');\n","function log(method, level, input) {\n  var args = [level].concat([].slice.call(input));\n  console[method].apply(console, args); // eslint-disable-line no-console\n}\n\nexport var None  = 0;\nexport var Error = 1;\nexport var Warn  = 2;\nexport var Info  = 3;\nexport var Debug = 4;\n\nexport default function(_) {\n  var level = _ || None;\n  return {\n    level: function(_) {\n      if (arguments.length) {\n        level = +_;\n        return this;\n      } else {\n        return level;\n      }\n    },\n    error: function() {\n      if (level >= Error) log('error', 'ERROR', arguments);\n      return this;\n    },\n    warn: function() {\n      if (level >= Warn) log('warn', 'WARN', arguments);\n      return this;\n    },\n    info: function() {\n      if (level >= Info) log('log', 'INFO', arguments);\n      return this;\n    },\n    debug: function() {\n      if (level >= Debug) log('log', 'DEBUG', arguments);\n      return this;\n    }\n  }\n}\n","export default function(_) {\n  return typeof _ === 'boolean';\n}\n","export default function(_) {\n  return typeof _ === 'number';\n}\n","export default function(_) {\n  for (var s={}, i=0, n=_.length; i<n; ++i) s[_[i]] = true;\n  return s;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","var at, // The index of the current character\n    ch, // The current character\n    escapee = {\n        '\"':  '\"',\n        '\\\\': '\\\\',\n        '/':  '/',\n        b:    '\\b',\n        f:    '\\f',\n        n:    '\\n',\n        r:    '\\r',\n        t:    '\\t'\n    },\n    text,\n\n    error = function (m) {\n        // Call error when something is wrong.\n        throw {\n            name:    'SyntaxError',\n            message: m,\n            at:      at,\n            text:    text\n        };\n    },\n    \n    next = function (c) {\n        // If a c parameter is provided, verify that it matches the current character.\n        if (c && c !== ch) {\n            error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n        }\n        \n        // Get the next character. When there are no more characters,\n        // return the empty string.\n        \n        ch = text.charAt(at);\n        at += 1;\n        return ch;\n    },\n    \n    number = function () {\n        // Parse a number value.\n        var number,\n            string = '';\n        \n        if (ch === '-') {\n            string = '-';\n            next('-');\n        }\n        while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n        }\n        if (ch === '.') {\n            string += '.';\n            while (next() && ch >= '0' && ch <= '9') {\n                string += ch;\n            }\n        }\n        if (ch === 'e' || ch === 'E') {\n            string += ch;\n            next();\n            if (ch === '-' || ch === '+') {\n                string += ch;\n                next();\n            }\n            while (ch >= '0' && ch <= '9') {\n                string += ch;\n                next();\n            }\n        }\n        number = +string;\n        if (!isFinite(number)) {\n            error(\"Bad number\");\n        } else {\n            return number;\n        }\n    },\n    \n    string = function () {\n        // Parse a string value.\n        var hex,\n            i,\n            string = '',\n            uffff;\n        \n        // When parsing for string values, we must look for \" and \\ characters.\n        if (ch === '\"') {\n            while (next()) {\n                if (ch === '\"') {\n                    next();\n                    return string;\n                } else if (ch === '\\\\') {\n                    next();\n                    if (ch === 'u') {\n                        uffff = 0;\n                        for (i = 0; i < 4; i += 1) {\n                            hex = parseInt(next(), 16);\n                            if (!isFinite(hex)) {\n                                break;\n                            }\n                            uffff = uffff * 16 + hex;\n                        }\n                        string += String.fromCharCode(uffff);\n                    } else if (typeof escapee[ch] === 'string') {\n                        string += escapee[ch];\n                    } else {\n                        break;\n                    }\n                } else {\n                    string += ch;\n                }\n            }\n        }\n        error(\"Bad string\");\n    },\n\n    white = function () {\n\n// Skip whitespace.\n\n        while (ch && ch <= ' ') {\n            next();\n        }\n    },\n\n    word = function () {\n\n// true, false, or null.\n\n        switch (ch) {\n        case 't':\n            next('t');\n            next('r');\n            next('u');\n            next('e');\n            return true;\n        case 'f':\n            next('f');\n            next('a');\n            next('l');\n            next('s');\n            next('e');\n            return false;\n        case 'n':\n            next('n');\n            next('u');\n            next('l');\n            next('l');\n            return null;\n        }\n        error(\"Unexpected '\" + ch + \"'\");\n    },\n\n    value,  // Place holder for the value function.\n\n    array = function () {\n\n// Parse an array value.\n\n        var array = [];\n\n        if (ch === '[') {\n            next('[');\n            white();\n            if (ch === ']') {\n                next(']');\n                return array;   // empty array\n            }\n            while (ch) {\n                array.push(value());\n                white();\n                if (ch === ']') {\n                    next(']');\n                    return array;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad array\");\n    },\n\n    object = function () {\n\n// Parse an object value.\n\n        var key,\n            object = {};\n\n        if (ch === '{') {\n            next('{');\n            white();\n            if (ch === '}') {\n                next('}');\n                return object;   // empty object\n            }\n            while (ch) {\n                key = string();\n                white();\n                next(':');\n                if (Object.hasOwnProperty.call(object, key)) {\n                    error('Duplicate key \"' + key + '\"');\n                }\n                object[key] = value();\n                white();\n                if (ch === '}') {\n                    next('}');\n                    return object;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad object\");\n    };\n\nvalue = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n    white();\n    switch (ch) {\n    case '{':\n        return object();\n    case '[':\n        return array();\n    case '\"':\n        return string();\n    case '-':\n        return number();\n    default:\n        return ch >= '0' && ch <= '9' ? number() : word();\n    }\n};\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\nmodule.exports = function (source, reviver) {\n    var result;\n    \n    text = source;\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n        error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? (function walk(holder, key) {\n        var k, v, value = holder[key];\n        if (value && typeof value === 'object') {\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = walk(value, k);\n                    if (v !== undefined) {\n                        value[k] = v;\n                    } else {\n                        delete value[k];\n                    }\n                }\n            }\n        }\n        return reviver.call(holder, key, value);\n    }({'': result}, '')) : result;\n};\n","var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n","exports.parse = require('./lib/parse');\nexports.stringify = require('./lib/stringify');\n","var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');\n\nmodule.exports = function (obj, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var space = opts.space || '';\n    if (typeof space === 'number') space = Array(space+1).join(' ');\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n    var replacer = opts.replacer || function(key, value) { return value; };\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (parent, key, node, level) {\n        var indent = space ? ('\\n' + new Array(level + 1).join(space)) : '';\n        var colonSeparator = space ? ': ' : ':';\n\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        node = replacer.call(parent, key, node);\n\n        if (node === undefined) {\n            return;\n        }\n        if (typeof node !== 'object' || node === null) {\n            return json.stringify(node);\n        }\n        if (isArray(node)) {\n            var out = [];\n            for (var i = 0; i < node.length; i++) {\n                var item = stringify(node, i, node[i], level+1) || json.stringify(null);\n                out.push(indent + space + item);\n            }\n            return '[' + out.join(',') + indent + ']';\n        }\n        else {\n            if (seen.indexOf(node) !== -1) {\n                if (cycles) return json.stringify('__cycle__');\n                throw new TypeError('Converting circular structure to JSON');\n            }\n            else seen.push(node);\n\n            var keys = objectKeys(node).sort(cmp && cmp(node));\n            var out = [];\n            for (var i = 0; i < keys.length; i++) {\n                var key = keys[i];\n                var value = stringify(node, key, node[key], level+1);\n\n                if(!value) continue;\n\n                var keyValue = json.stringify(key)\n                    + colonSeparator\n                    + value;\n                ;\n                out.push(indent + space + keyValue);\n            }\n            seen.splice(seen.indexOf(node), 1);\n            return '{' + out.join(',') + indent + '}';\n        }\n    })({ '': obj }, '', obj, 0);\n};\n\nvar isArray = Array.isArray || function (x) {\n    return {}.toString.call(x) === '[object Array]';\n};\n\nvar objectKeys = Object.keys || function (obj) {\n    var has = Object.prototype.hasOwnProperty || function () { return true };\n    var keys = [];\n    for (var key in obj) {\n        if (has.call(obj, key)) keys.push(key);\n    }\n    return keys;\n};\n","export function isLogicalOr(op) {\n    return !!op.or;\n}\nexport function isLogicalAnd(op) {\n    return !!op.and;\n}\nexport function isLogicalNot(op) {\n    return !!op.not;\n}\nexport function forEachLeaf(op, fn) {\n    if (isLogicalNot(op)) {\n        forEachLeaf(op.not, fn);\n    }\n    else if (isLogicalAnd(op)) {\n        for (var _i = 0, _a = op.and; _i < _a.length; _i++) {\n            var subop = _a[_i];\n            forEachLeaf(subop, fn);\n        }\n    }\n    else if (isLogicalOr(op)) {\n        for (var _b = 0, _c = op.or; _b < _c.length; _b++) {\n            var subop = _c[_b];\n            forEachLeaf(subop, fn);\n        }\n    }\n    else {\n        fn(op);\n    }\n}\nexport function normalizeLogicalOperand(op, normalizer) {\n    if (isLogicalNot(op)) {\n        return { not: normalizeLogicalOperand(op.not, normalizer) };\n    }\n    else if (isLogicalAnd(op)) {\n        return { and: op.and.map(function (o) { return normalizeLogicalOperand(o, normalizer); }) };\n    }\n    else if (isLogicalOr(op)) {\n        return { or: op.or.map(function (o) { return normalizeLogicalOperand(o, normalizer); }) };\n    }\n    else {\n        return normalizer(op);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naWNhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dpY2FsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLE1BQU0sc0JBQXNCLEVBQXVCO0lBQ2pELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sdUJBQXVCLEVBQXVCO0lBQ2xELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sdUJBQXVCLEVBQXVCO0lBQ2xELE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sc0JBQXlCLEVBQXFCLEVBQUUsRUFBbUI7SUFDdkUsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDcEIsV0FBVyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDekI7U0FBTSxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMzQixLQUFvQixVQUFNLEVBQU4sS0FBQSxFQUFFLENBQUMsR0FBRyxFQUFOLGNBQU0sRUFBTixJQUFNLEVBQUU7WUFBdkIsSUFBTSxLQUFLLFNBQUE7WUFDZCxXQUFXLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3hCO0tBQ0Y7U0FBTSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMxQixLQUFvQixVQUFLLEVBQUwsS0FBQSxFQUFFLENBQUMsRUFBRSxFQUFMLGNBQUssRUFBTCxJQUFLLEVBQUU7WUFBdEIsSUFBTSxLQUFLLFNBQUE7WUFDZCxXQUFXLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3hCO0tBQ0Y7U0FBTTtRQUNMLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNSO0FBQ0gsQ0FBQztBQUVELE1BQU0sa0NBQXFDLEVBQXFCLEVBQUUsVUFBdUI7SUFDdkYsSUFBSSxZQUFZLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDcEIsT0FBTyxFQUFDLEdBQUcsRUFBRSx1QkFBdUIsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxFQUFDLENBQUM7S0FDM0Q7U0FBTSxJQUFJLFlBQVksQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUMzQixPQUFPLEVBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsdUJBQXVCLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxFQUF0QyxDQUFzQyxDQUFDLEVBQUMsQ0FBQztLQUN2RTtTQUFNLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQzFCLE9BQU8sRUFBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSx1QkFBdUIsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQXRDLENBQXNDLENBQUMsRUFBQyxDQUFDO0tBQ3JFO1NBQU07UUFDTCxPQUFPLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN2QjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBMb2dpY2FsT3BlcmFuZDxUPiA9IExvZ2ljYWxOb3Q8VD4gfCBMb2dpY2FsQW5kPFQ+IHwgTG9naWNhbE9yPFQ+IHwgVDtcblxuZXhwb3J0IGludGVyZmFjZSBMb2dpY2FsT3I8VD4ge1xuICBvcjogTG9naWNhbE9wZXJhbmQ8VD5bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dpY2FsQW5kPFQ+IHtcbiAgYW5kOiBMb2dpY2FsT3BlcmFuZDxUPltdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvZ2ljYWxOb3Q8VD4ge1xuICBub3Q6IExvZ2ljYWxPcGVyYW5kPFQ+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMb2dpY2FsT3Iob3A6IExvZ2ljYWxPcGVyYW5kPGFueT4pOiBvcCBpcyBMb2dpY2FsT3I8YW55PiB7XG4gIHJldHVybiAhIW9wLm9yO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMb2dpY2FsQW5kKG9wOiBMb2dpY2FsT3BlcmFuZDxhbnk+KTogb3AgaXMgTG9naWNhbEFuZDxhbnk+IHtcbiAgcmV0dXJuICEhb3AuYW5kO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNMb2dpY2FsTm90KG9wOiBMb2dpY2FsT3BlcmFuZDxhbnk+KTogb3AgaXMgTG9naWNhbE5vdDxhbnk+IHtcbiAgcmV0dXJuICEhb3Aubm90O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaExlYWY8VD4ob3A6IExvZ2ljYWxPcGVyYW5kPFQ+LCBmbjogKG9wOiBUKSA9PiB2b2lkKSB7XG4gIGlmIChpc0xvZ2ljYWxOb3Qob3ApKSB7XG4gICAgZm9yRWFjaExlYWYob3Aubm90LCBmbik7XG4gIH0gZWxzZSBpZiAoaXNMb2dpY2FsQW5kKG9wKSkge1xuICAgIGZvciAoY29uc3Qgc3Vib3Agb2Ygb3AuYW5kKSB7XG4gICAgICBmb3JFYWNoTGVhZihzdWJvcCwgZm4pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0xvZ2ljYWxPcihvcCkpIHtcbiAgICBmb3IgKGNvbnN0IHN1Ym9wIG9mIG9wLm9yKSB7XG4gICAgICBmb3JFYWNoTGVhZihzdWJvcCwgZm4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmbihvcCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUxvZ2ljYWxPcGVyYW5kPFQ+KG9wOiBMb2dpY2FsT3BlcmFuZDxUPiwgbm9ybWFsaXplcjogKG86IFQpID0+IFQpOiBMb2dpY2FsT3BlcmFuZDxUPiB7XG4gIGlmIChpc0xvZ2ljYWxOb3Qob3ApKSB7XG4gICAgcmV0dXJuIHtub3Q6IG5vcm1hbGl6ZUxvZ2ljYWxPcGVyYW5kKG9wLm5vdCwgbm9ybWFsaXplcil9O1xuICB9IGVsc2UgaWYgKGlzTG9naWNhbEFuZChvcCkpIHtcbiAgICByZXR1cm4ge2FuZDogb3AuYW5kLm1hcChvID0+IG5vcm1hbGl6ZUxvZ2ljYWxPcGVyYW5kKG8sIG5vcm1hbGl6ZXIpKX07XG4gIH0gZWxzZSBpZiAoaXNMb2dpY2FsT3Iob3ApKSB7XG4gICAgcmV0dXJuIHtvcjogb3Aub3IubWFwKG8gPT4gbm9ybWFsaXplTG9naWNhbE9wZXJhbmQobywgbm9ybWFsaXplcikpfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbm9ybWFsaXplcihvcCk7XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport stableStringify from 'json-stable-stringify';\nimport { isArray, isNumber, isString, splitAccessPath, stringValue } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\n/**\n * Creates an object composed of the picked object properties.\n *\n * Example:  (from lodash)\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // → {'a': 1, 'c': 3}\n *\n */\nexport function pick(obj, props) {\n    var copy = {};\n    for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {\n        var prop = props_1[_i];\n        if (obj.hasOwnProperty(prop)) {\n            copy[prop] = obj[prop];\n        }\n    }\n    return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\nexport function omit(obj, props) {\n    var copy = tslib_1.__assign({}, obj);\n    for (var _i = 0, props_2 = props; _i < props_2.length; _i++) {\n        var prop = props_2[_i];\n        delete copy[prop];\n    }\n    return copy;\n}\n/**\n * Converts any object into a string representation that can be consumed by humans.\n */\nexport var stringify = stableStringify;\n/**\n * Converts any object into a string of limited size, or a number.\n */\nexport function hash(a) {\n    if (isNumber(a)) {\n        return a;\n    }\n    var str = isString(a) ? a : stableStringify(a);\n    // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n    if (str.length < 100) {\n        return str;\n    }\n    // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n    var h = 0;\n    for (var i = 0; i < str.length; i++) {\n        var char = str.charCodeAt(i);\n        h = ((h << 5) - h) + char;\n        h = h & h; // Convert to 32bit integer\n    }\n    return h;\n}\nexport function contains(array, item) {\n    return array.indexOf(item) > -1;\n}\n/** Returns the array without the elements in item */\nexport function without(array, excludedItems) {\n    return array.filter(function (item) { return !contains(excludedItems, item); });\n}\nexport function union(array, other) {\n    return array.concat(without(other, array));\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n    var i = 0;\n    for (var k = 0; k < arr.length; k++) {\n        if (f(arr[k], k, i++)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n    var i = 0;\n    for (var k = 0; k < arr.length; k++) {\n        if (!f(arr[k], k, i++)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function flatten(arrays) {\n    return [].concat.apply([], arrays);\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest) {\n    var src = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        src[_i - 1] = arguments[_i];\n    }\n    for (var _a = 0, src_1 = src; _a < src_1.length; _a++) {\n        var s = src_1[_a];\n        dest = deepMerge_(dest, s);\n    }\n    return dest;\n}\n// recursively merges src into dest\nfunction deepMerge_(dest, src) {\n    if (typeof src !== 'object' || src === null) {\n        return dest;\n    }\n    for (var p in src) {\n        if (!src.hasOwnProperty(p)) {\n            continue;\n        }\n        if (src[p] === undefined) {\n            continue;\n        }\n        if (typeof src[p] !== 'object' || isArray(src[p]) || src[p] === null) {\n            dest[p] = src[p];\n        }\n        else if (typeof dest[p] !== 'object' || dest[p] === null) {\n            dest[p] = mergeDeep(isArray(src[p].constructor) ? [] : {}, src[p]);\n        }\n        else {\n            mergeDeep(dest[p], src[p]);\n        }\n    }\n    return dest;\n}\nexport function unique(values, f) {\n    var results = [];\n    var u = {};\n    var v;\n    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n        var val = values_1[_i];\n        v = f(val);\n        if (v in u) {\n            continue;\n        }\n        u[v] = 1;\n        results.push(val);\n    }\n    return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function differ(dict, other) {\n    for (var key in dict) {\n        if (dict.hasOwnProperty(key)) {\n            if (other[key] && dict[key] && other[key] !== dict[key]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nexport function hasIntersection(a, b) {\n    for (var key in a) {\n        if (key in b) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isNumeric(num) {\n    return !isNaN(num);\n}\nexport function differArray(array, other) {\n    if (array.length !== other.length) {\n        return true;\n    }\n    array.sort();\n    other.sort();\n    for (var i = 0; i < array.length; i++) {\n        if (other[i] !== array[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport var keys = Object.keys;\nexport function vals(x) {\n    var _vals = [];\n    for (var k in x) {\n        if (x.hasOwnProperty(k)) {\n            _vals.push(x[k]);\n        }\n    }\n    return _vals;\n}\nexport function flagKeys(f) {\n    return keys(f);\n}\nexport function duplicate(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\nexport function isBoolean(b) {\n    return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n    var alphanumericS = s.replace(/\\W/g, '_');\n    // Add _ if the string has leading numbers.\n    return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n    if (isLogicalNot(op)) {\n        return '!(' + logicalExpr(op.not, cb) + ')';\n    }\n    else if (isLogicalAnd(op)) {\n        return '(' + op.and.map(function (and) { return logicalExpr(and, cb); }).join(') && (') + ')';\n    }\n    else if (isLogicalOr(op)) {\n        return '(' + op.or.map(function (or) { return logicalExpr(or, cb); }).join(') || (') + ')';\n    }\n    else {\n        return cb(op);\n    }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n    if (orderedProps.length === 0) {\n        return true;\n    }\n    var prop = orderedProps.shift();\n    if (deleteNestedProperty(obj[prop], orderedProps)) {\n        delete obj[prop];\n    }\n    return Object.keys(obj).length === 0;\n}\nexport function titlecase(s) {\n    return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path, datum) {\n    if (datum === void 0) { datum = 'datum'; }\n    var pieces = splitAccessPath(path);\n    var prefixes = [];\n    for (var i = 1; i <= pieces.length; i++) {\n        var prefix = \"[\" + pieces.slice(0, i).map(stringValue).join('][') + \"]\";\n        prefixes.push(\"\" + datum + prefix);\n    }\n    return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the falttened field.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path, datum) {\n    if (datum === void 0) { datum = 'datum'; }\n    return datum + \"[\" + stringValue(splitAccessPath(path).join('.')) + \"]\";\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n    return \"\" + splitAccessPath(path).map(function (p) { return p.replace('.', '\\\\.'); }).join('\\\\.');\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n    return \"\" + splitAccessPath(path).join('.');\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n    if (!path) {\n        return 0;\n    }\n    return splitAccessPath(path).length;\n}\n//# sourceMappingURL=data:application/json;base64,","import { toSet } from 'vega-util';\nimport { contains, flagKeys } from './util';\nvar AGGREGATE_OP_INDEX = {\n    argmax: 1,\n    argmin: 1,\n    average: 1,\n    count: 1,\n    distinct: 1,\n    max: 1,\n    mean: 1,\n    median: 1,\n    min: 1,\n    missing: 1,\n    q1: 1,\n    q3: 1,\n    ci0: 1,\n    ci1: 1,\n    stderr: 1,\n    stdev: 1,\n    stdevp: 1,\n    sum: 1,\n    valid: 1,\n    values: 1,\n    variance: 1,\n    variancep: 1,\n};\nexport var AGGREGATE_OPS = flagKeys(AGGREGATE_OP_INDEX);\nexport function isAggregateOp(a) {\n    return !!AGGREGATE_OP_INDEX[a];\n}\nexport var COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];\nexport function isCountingAggregateOp(aggregate) {\n    return aggregate && contains(COUNTING_OPS, aggregate);\n}\n/** Additive-based aggregation operations.  These can be applied to stack. */\nexport var SUM_OPS = [\n    'count',\n    'sum',\n    'distinct',\n    'valid',\n    'missing'\n];\n/**\n * Aggregation operators that always produce values within the range [domainMin, domainMax].\n */\nexport var SHARED_DOMAIN_OPS = [\n    'mean',\n    'average',\n    'median',\n    'q1',\n    'q3',\n    'min',\n    'max',\n];\nexport var SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWdncmVnYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FnZ3JlZ2F0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxRQUFRLEVBQVEsUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRWhELElBQU0sa0JBQWtCLEdBQXNCO0lBQzVDLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7SUFDVCxPQUFPLEVBQUUsQ0FBQztJQUNWLEtBQUssRUFBRSxDQUFDO0lBQ1IsUUFBUSxFQUFFLENBQUM7SUFDWCxHQUFHLEVBQUUsQ0FBQztJQUNOLElBQUksRUFBRSxDQUFDO0lBQ1AsTUFBTSxFQUFFLENBQUM7SUFDVCxHQUFHLEVBQUUsQ0FBQztJQUNOLE9BQU8sRUFBRSxDQUFDO0lBQ1YsRUFBRSxFQUFFLENBQUM7SUFDTCxFQUFFLEVBQUUsQ0FBQztJQUNMLEdBQUcsRUFBRSxDQUFDO0lBQ04sR0FBRyxFQUFFLENBQUM7SUFDTixNQUFNLEVBQUUsQ0FBQztJQUNULEtBQUssRUFBRSxDQUFDO0lBQ1IsTUFBTSxFQUFFLENBQUM7SUFDVCxHQUFHLEVBQUUsQ0FBQztJQUNOLEtBQUssRUFBRSxDQUFDO0lBQ1IsTUFBTSxFQUFFLENBQUM7SUFDVCxRQUFRLEVBQUUsQ0FBQztJQUNYLFNBQVMsRUFBRSxDQUFDO0NBQ2IsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUUxRCxNQUFNLHdCQUF3QixDQUFTO0lBQ3JDLE9BQU8sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQWtCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFFckYsTUFBTSxnQ0FBZ0MsU0FBaUI7SUFDckQsT0FBTyxTQUFTLElBQUksUUFBUSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN4RCxDQUFDO0FBRUQsNkVBQTZFO0FBQzdFLE1BQU0sQ0FBQyxJQUFNLE9BQU8sR0FBa0I7SUFDbEMsT0FBTztJQUNQLEtBQUs7SUFDTCxVQUFVO0lBQ1YsT0FBTztJQUNQLFNBQVM7Q0FDWixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBa0I7SUFDNUMsTUFBTTtJQUNOLFNBQVM7SUFDVCxRQUFRO0lBQ1IsSUFBSTtJQUNKLElBQUk7SUFDSixLQUFLO0lBQ0wsS0FBSztDQUNSLENBQUM7QUFFRixNQUFNLENBQUMsSUFBTSxzQkFBc0IsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWdncmVnYXRlT3B9IGZyb20gJ3ZlZ2EnO1xuaW1wb3J0IHt0b1NldH0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Y29udGFpbnMsIEZsYWcsIGZsYWdLZXlzfSBmcm9tICcuL3V0aWwnO1xuXG5jb25zdCBBR0dSRUdBVEVfT1BfSU5ERVg6IEZsYWc8QWdncmVnYXRlT3A+ID0ge1xuICBhcmdtYXg6IDEsXG4gIGFyZ21pbjogMSxcbiAgYXZlcmFnZTogMSxcbiAgY291bnQ6IDEsXG4gIGRpc3RpbmN0OiAxLFxuICBtYXg6IDEsXG4gIG1lYW46IDEsXG4gIG1lZGlhbjogMSxcbiAgbWluOiAxLFxuICBtaXNzaW5nOiAxLFxuICBxMTogMSxcbiAgcTM6IDEsXG4gIGNpMDogMSxcbiAgY2kxOiAxLFxuICBzdGRlcnI6IDEsXG4gIHN0ZGV2OiAxLFxuICBzdGRldnA6IDEsXG4gIHN1bTogMSxcbiAgdmFsaWQ6IDEsXG4gIHZhbHVlczogMSxcbiAgdmFyaWFuY2U6IDEsXG4gIHZhcmlhbmNlcDogMSxcbn07XG5cbmV4cG9ydCBjb25zdCBBR0dSRUdBVEVfT1BTID0gZmxhZ0tleXMoQUdHUkVHQVRFX09QX0lOREVYKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWdncmVnYXRlT3AoYTogc3RyaW5nKTogYSBpcyBBZ2dyZWdhdGVPcCB7XG4gIHJldHVybiAhIUFHR1JFR0FURV9PUF9JTkRFWFthXTtcbn1cblxuZXhwb3J0IGNvbnN0IENPVU5USU5HX09QUzogQWdncmVnYXRlT3BbXSA9IFsnY291bnQnLCAndmFsaWQnLCAnbWlzc2luZycsICdkaXN0aW5jdCddO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb3VudGluZ0FnZ3JlZ2F0ZU9wKGFnZ3JlZ2F0ZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBhZ2dyZWdhdGUgJiYgY29udGFpbnMoQ09VTlRJTkdfT1BTLCBhZ2dyZWdhdGUpO1xufVxuXG4vKiogQWRkaXRpdmUtYmFzZWQgYWdncmVnYXRpb24gb3BlcmF0aW9ucy4gIFRoZXNlIGNhbiBiZSBhcHBsaWVkIHRvIHN0YWNrLiAqL1xuZXhwb3J0IGNvbnN0IFNVTV9PUFM6IEFnZ3JlZ2F0ZU9wW10gPSBbXG4gICAgJ2NvdW50JyxcbiAgICAnc3VtJyxcbiAgICAnZGlzdGluY3QnLFxuICAgICd2YWxpZCcsXG4gICAgJ21pc3NpbmcnXG5dO1xuXG4vKipcbiAqIEFnZ3JlZ2F0aW9uIG9wZXJhdG9ycyB0aGF0IGFsd2F5cyBwcm9kdWNlIHZhbHVlcyB3aXRoaW4gdGhlIHJhbmdlIFtkb21haW5NaW4sIGRvbWFpbk1heF0uXG4gKi9cbmV4cG9ydCBjb25zdCBTSEFSRURfRE9NQUlOX09QUzogQWdncmVnYXRlT3BbXSA9IFtcbiAgICAnbWVhbicsXG4gICAgJ2F2ZXJhZ2UnLFxuICAgICdtZWRpYW4nLFxuICAgICdxMScsXG4gICAgJ3EzJyxcbiAgICAnbWluJyxcbiAgICAnbWF4Jyxcbl07XG5cbmV4cG9ydCBjb25zdCBTSEFSRURfRE9NQUlOX09QX0lOREVYID0gdG9TZXQoU0hBUkVEX0RPTUFJTl9PUFMpO1xuIl19","import * as tslib_1 from \"tslib\";\nimport { flagKeys } from './util';\nexport var AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];\n/**\n * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.\n * (Properties not listed are applicable for both)\n */\nexport var AXIS_PROPERTY_TYPE = {\n    grid: 'grid',\n    gridScale: 'grid',\n    domain: 'main',\n    labels: 'main',\n    labelFlush: 'main',\n    labelOverlap: 'main',\n    minExtent: 'main',\n    maxExtent: 'main',\n    offset: 'main',\n    ticks: 'main',\n    title: 'main',\n    values: 'both',\n    scale: 'both',\n    zindex: 'both' // this is actually set afterward, so it doesn't matter\n};\nvar COMMON_AXIS_PROPERTIES_INDEX = {\n    orient: 1,\n    domain: 1,\n    format: 1,\n    grid: 1,\n    labelBound: 1,\n    labelFlush: 1,\n    labelPadding: 1,\n    labels: 1,\n    labelOverlap: 1,\n    maxExtent: 1,\n    minExtent: 1,\n    offset: 1,\n    position: 1,\n    tickCount: 1,\n    ticks: 1,\n    tickSize: 1,\n    title: 1,\n    titlePadding: 1,\n    values: 1,\n    zindex: 1,\n};\nvar AXIS_PROPERTIES_INDEX = tslib_1.__assign({}, COMMON_AXIS_PROPERTIES_INDEX, { encoding: 1, labelAngle: 1, titleMaxLength: 1 });\nvar VG_AXIS_PROPERTIES_INDEX = tslib_1.__assign({ scale: 1 }, COMMON_AXIS_PROPERTIES_INDEX, { gridScale: 1, encode: 1 });\nexport function isAxisProperty(prop) {\n    return !!AXIS_PROPERTIES_INDEX[prop];\n}\nexport var VG_AXIS_PROPERTIES = flagKeys(VG_AXIS_PROPERTIES_INDEX);\n// Export for dependent projects\nexport var AXIS_PROPERTIES = flagKeys(AXIS_PROPERTIES_INDEX);\n//# sourceMappingURL=data:application/json;base64,","/*\n * Constants and utilities for encoding channels (Visual variables)\n * such as 'x', 'y', 'color'.\n */\nimport * as tslib_1 from \"tslib\";\nimport { flagKeys } from './util';\nexport var Channel;\n(function (Channel) {\n    // Facet\n    Channel.ROW = 'row';\n    Channel.COLUMN = 'column';\n    // Position\n    Channel.X = 'x';\n    Channel.Y = 'y';\n    Channel.X2 = 'x2';\n    Channel.Y2 = 'y2';\n    // Geo Position\n    Channel.LATITUDE = 'latitude';\n    Channel.LONGITUDE = 'longitude';\n    Channel.LATITUDE2 = 'latitude2';\n    Channel.LONGITUDE2 = 'longitude2';\n    // Mark property with scale\n    Channel.COLOR = 'color';\n    Channel.FILL = 'fill';\n    Channel.STROKE = 'stroke';\n    Channel.SHAPE = 'shape';\n    Channel.SIZE = 'size';\n    Channel.OPACITY = 'opacity';\n    // Non-scale channel\n    Channel.TEXT = 'text';\n    Channel.ORDER = 'order';\n    Channel.DETAIL = 'detail';\n    Channel.KEY = 'key';\n    Channel.TOOLTIP = 'tooltip';\n    Channel.HREF = 'href';\n})(Channel || (Channel = {}));\nexport var X = Channel.X;\nexport var Y = Channel.Y;\nexport var X2 = Channel.X2;\nexport var Y2 = Channel.Y2;\nexport var LATITUDE = Channel.LATITUDE;\nexport var LATITUDE2 = Channel.LATITUDE2;\nexport var LONGITUDE = Channel.LONGITUDE;\nexport var LONGITUDE2 = Channel.LONGITUDE2;\nexport var ROW = Channel.ROW;\nexport var COLUMN = Channel.COLUMN;\nexport var SHAPE = Channel.SHAPE;\nexport var SIZE = Channel.SIZE;\nexport var COLOR = Channel.COLOR;\nexport var FILL = Channel.FILL;\nexport var STROKE = Channel.STROKE;\nexport var TEXT = Channel.TEXT;\nexport var DETAIL = Channel.DETAIL;\nexport var KEY = Channel.KEY;\nexport var ORDER = Channel.ORDER;\nexport var OPACITY = Channel.OPACITY;\nexport var TOOLTIP = Channel.TOOLTIP;\nexport var HREF = Channel.HREF;\nexport var GEOPOSITION_CHANNEL_INDEX = {\n    longitude: 1,\n    longitude2: 1,\n    latitude: 1,\n    latitude2: 1,\n};\nexport var GEOPOSITION_CHANNELS = flagKeys(GEOPOSITION_CHANNEL_INDEX);\nvar UNIT_CHANNEL_INDEX = tslib_1.__assign({ \n    // position\n    x: 1, y: 1, x2: 1, y2: 1 }, GEOPOSITION_CHANNEL_INDEX, { \n    // color\n    color: 1, fill: 1, stroke: 1, \n    // other non-position with scale\n    opacity: 1, size: 1, shape: 1, \n    // channels without scales\n    order: 1, text: 1, detail: 1, key: 1, tooltip: 1, href: 1 });\nexport function isColorChannel(channel) {\n    return channel === 'color' || channel === 'fill' || channel === 'stroke';\n}\nvar FACET_CHANNEL_INDEX = {\n    row: 1,\n    column: 1\n};\nvar CHANNEL_INDEX = tslib_1.__assign({}, UNIT_CHANNEL_INDEX, FACET_CHANNEL_INDEX);\nexport var CHANNELS = flagKeys(CHANNEL_INDEX);\nvar _o = CHANNEL_INDEX.order, _d = CHANNEL_INDEX.detail, SINGLE_DEF_CHANNEL_INDEX = tslib_1.__rest(CHANNEL_INDEX, [\"order\", \"detail\"]);\n/**\n * Channels that cannot have an array of channelDef.\n * model.fieldDef, getFieldDef only work for these channels.\n *\n * (The only two channels that can have an array of channelDefs are \"detail\" and \"order\".\n * Since there can be multiple fieldDefs for detail and order, getFieldDef/model.fieldDef\n * are not applicable for them.  Similarly, selection projection won't work with \"detail\" and \"order\".)\n */\nexport var SINGLE_DEF_CHANNELS = flagKeys(SINGLE_DEF_CHANNEL_INDEX);\nexport function isChannel(str) {\n    return !!CHANNEL_INDEX[str];\n}\n// CHANNELS without COLUMN, ROW\nexport var UNIT_CHANNELS = flagKeys(UNIT_CHANNEL_INDEX);\n// NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;\nvar _x = UNIT_CHANNEL_INDEX.x, _y = UNIT_CHANNEL_INDEX.y, \n// x2 and y2 share the same scale as x and y\n_x2 = UNIT_CHANNEL_INDEX.x2, _y2 = UNIT_CHANNEL_INDEX.y2, _latitude = UNIT_CHANNEL_INDEX.latitude, _longitude = UNIT_CHANNEL_INDEX.longitude, _latitude2 = UNIT_CHANNEL_INDEX.latitude2, _longitude2 = UNIT_CHANNEL_INDEX.longitude2, \n// The rest of unit channels then have scale\nNONPOSITION_CHANNEL_INDEX = tslib_1.__rest(UNIT_CHANNEL_INDEX, [\"x\", \"y\", \"x2\", \"y2\", \"latitude\", \"longitude\", \"latitude2\", \"longitude2\"]);\nexport var NONPOSITION_CHANNELS = flagKeys(NONPOSITION_CHANNEL_INDEX);\n// POSITION_SCALE_CHANNELS = X and Y;\nvar POSITION_SCALE_CHANNEL_INDEX = { x: 1, y: 1 };\nexport var POSITION_SCALE_CHANNELS = flagKeys(POSITION_SCALE_CHANNEL_INDEX);\n// NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y\nvar \n// x2 and y2 share the same scale as x and y\n// text and tooltip have format instead of scale,\n// href has neither format, nor scale\n_t = NONPOSITION_CHANNEL_INDEX.text, _tt = NONPOSITION_CHANNEL_INDEX.tooltip, _hr = NONPOSITION_CHANNEL_INDEX.href, \n// detail and order have no scale\n_dd = NONPOSITION_CHANNEL_INDEX.detail, _k = NONPOSITION_CHANNEL_INDEX.key, _oo = NONPOSITION_CHANNEL_INDEX.order, NONPOSITION_SCALE_CHANNEL_INDEX = tslib_1.__rest(NONPOSITION_CHANNEL_INDEX, [\"text\", \"tooltip\", \"href\", \"detail\", \"key\", \"order\"]);\nexport var NONPOSITION_SCALE_CHANNELS = flagKeys(NONPOSITION_SCALE_CHANNEL_INDEX);\n// Declare SCALE_CHANNEL_INDEX\nvar SCALE_CHANNEL_INDEX = tslib_1.__assign({}, POSITION_SCALE_CHANNEL_INDEX, NONPOSITION_SCALE_CHANNEL_INDEX);\n/** List of channels with scales */\nexport var SCALE_CHANNELS = flagKeys(SCALE_CHANNEL_INDEX);\nexport function isScaleChannel(channel) {\n    return !!SCALE_CHANNEL_INDEX[channel];\n}\n/**\n * Return whether a channel supports a particular mark type.\n * @param channel  channel name\n * @param mark the mark type\n * @return whether the mark supports the channel\n */\nexport function supportMark(channel, mark) {\n    return mark in getSupportedMark(channel);\n}\n/**\n * Return a dictionary showing whether a channel supports mark type.\n * @param channel\n * @return A dictionary mapping mark types to boolean values.\n */\nexport function getSupportedMark(channel) {\n    switch (channel) {\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case DETAIL:\n        case KEY:\n        case TOOLTIP:\n        case HREF:\n        case ORDER: // TODO: revise (order might not support rect, which is not stackable?)\n        case OPACITY:\n        case ROW:\n        case COLUMN:\n            return {\n                point: true, tick: true, rule: true, circle: true, square: true,\n                bar: true, rect: true, line: true, trail: true, area: true, text: true, geoshape: true\n            };\n        case X:\n        case Y:\n        case LATITUDE:\n        case LONGITUDE:\n            return {\n                point: true, tick: true, rule: true, circle: true, square: true,\n                bar: true, rect: true, line: true, trail: true, area: true, text: true\n            };\n        case X2:\n        case Y2:\n        case LATITUDE2:\n        case LONGITUDE2:\n            return {\n                rule: true, bar: true, rect: true, area: true\n            };\n        case SIZE:\n            return {\n                point: true, tick: true, rule: true, circle: true, square: true,\n                bar: true, text: true, line: true, trail: true\n            };\n        case SHAPE:\n            return { point: true, geoshape: true };\n        case TEXT:\n            return { text: true };\n    }\n}\nexport function rangeType(channel) {\n    switch (channel) {\n        case X:\n        case Y:\n        case SIZE:\n        case OPACITY:\n        // X2 and Y2 use X and Y scales, so they similarly have continuous range.\n        case X2:\n        case Y2:\n            return 'continuous';\n        case ROW:\n        case COLUMN:\n        case SHAPE:\n        // TEXT, TOOLTIP, and HREF have no scale but have discrete output\n        case TEXT:\n        case TOOLTIP:\n        case HREF:\n            return 'discrete';\n        // Color can be either continuous or discrete, depending on scale type.\n        case COLOR:\n        case FILL:\n        case STROKE:\n            return 'flexible';\n        // No scale, no range type.\n        case LATITUDE:\n        case LONGITUDE:\n        case LATITUDE2:\n        case LONGITUDE2:\n        case DETAIL:\n        case KEY:\n        case ORDER:\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach here. */\n    throw new Error('rangeType not implemented for ' + channel);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbm5lbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jaGFubmVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFNSCxPQUFPLEVBQU8sUUFBUSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRXRDLE1BQU0sS0FBVyxPQUFPLENBb0N2QjtBQXBDRCxXQUFpQixPQUFPO0lBQ3RCLFFBQVE7SUFDSyxXQUFHLEdBQVUsS0FBSyxDQUFDO0lBQ25CLGNBQU0sR0FBYSxRQUFRLENBQUM7SUFFekMsV0FBVztJQUNFLFNBQUMsR0FBUSxHQUFHLENBQUM7SUFDYixTQUFDLEdBQVEsR0FBRyxDQUFDO0lBQ2IsVUFBRSxHQUFTLElBQUksQ0FBQztJQUNoQixVQUFFLEdBQVMsSUFBSSxDQUFDO0lBRTdCLGVBQWU7SUFDRixnQkFBUSxHQUFlLFVBQVUsQ0FBQztJQUNsQyxpQkFBUyxHQUFnQixXQUFXLENBQUM7SUFDckMsaUJBQVMsR0FBZ0IsV0FBVyxDQUFDO0lBQ3JDLGtCQUFVLEdBQWlCLFlBQVksQ0FBQztJQUVyRCwyQkFBMkI7SUFDZCxhQUFLLEdBQVksT0FBTyxDQUFDO0lBRXpCLFlBQUksR0FBVyxNQUFNLENBQUM7SUFFdEIsY0FBTSxHQUFhLFFBQVEsQ0FBQztJQUU1QixhQUFLLEdBQVksT0FBTyxDQUFDO0lBQ3pCLFlBQUksR0FBVyxNQUFNLENBQUM7SUFDdEIsZUFBTyxHQUFjLFNBQVMsQ0FBQztJQUU1QyxvQkFBb0I7SUFDUCxZQUFJLEdBQVcsTUFBTSxDQUFDO0lBQ3RCLGFBQUssR0FBWSxPQUFPLENBQUM7SUFDekIsY0FBTSxHQUFhLFFBQVEsQ0FBQztJQUM1QixXQUFHLEdBQVUsS0FBSyxDQUFDO0lBRW5CLGVBQU8sR0FBYyxTQUFTLENBQUM7SUFDL0IsWUFBSSxHQUFXLE1BQU0sQ0FBQztBQUNyQyxDQUFDLEVBcENnQixPQUFPLEtBQVAsT0FBTyxRQW9DdkI7QUFJRCxNQUFNLENBQUMsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUMzQixNQUFNLENBQUMsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUMzQixNQUFNLENBQUMsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUM3QixNQUFNLENBQUMsSUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQztBQUU3QixNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUN6QyxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUMzQyxNQUFNLENBQUMsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUMzQyxNQUFNLENBQUMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUU3QyxNQUFNLENBQUMsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUMvQixNQUFNLENBQUMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNyQyxNQUFNLENBQUMsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNuQyxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUNqQyxNQUFNLENBQUMsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUVuQyxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUNqQyxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNyQyxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUNqQyxNQUFNLENBQUMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztBQUNyQyxNQUFNLENBQUMsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQztBQUMvQixN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S0FBSyxJQUFJO1lBQ1AsT0FBTyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUMsQ0FBQztLQUN2QjtBQUNILENBQUM7QUFFRCxNQUFNLG9CQUFvQixPQUFnQjtJQUN4QyxRQUFRLE9BQU8sRUFBRTtRQUNmLEtBQUssQ0FBQyxDQUFDO1FBQ1AsS0FBSyxDQUFDLENBQUM7UUFDUCxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssT0FBTyxDQUFDO1FBQ2IseUVBQXlFO1FBQ3pFLEtBQUssRUFBRSxDQUFDO1FBQ1IsS0FBSyxFQUFFO1lBQ0wsT0FBTyxZQUFZLENBQUM7UUFFdEIsS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssS0FBSyxDQUFDO1FBQ1gsaUVBQWlFO1FBQ2pFLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxPQUFPLENBQUM7UUFDYixLQUFLLElBQUk7WUFDUCxPQUFPLFVBQVUsQ0FBQztRQUVwQix1RUFBdUU7UUFDdkUsS0FBSyxLQUFLLENBQUM7UUFDWCxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssTUFBTTtZQUNULE9BQU8sVUFBVSxDQUFDO1FBRXBCLDJCQUEyQjtRQUUzQixLQUFLLFFBQVEsQ0FBQztRQUNkLEtBQUssU0FBUyxDQUFDO1FBQ2YsS0FBSyxTQUFTLENBQUM7UUFDZixLQUFLLFVBQVUsQ0FBQztRQUNoQixLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssR0FBRyxDQUFDO1FBQ1QsS0FBSyxLQUFLO1lBQ1IsT0FBTyxTQUFTLENBQUM7S0FDcEI7SUFDRCxvREFBb0Q7SUFDcEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsR0FBRyxPQUFPLENBQUMsQ0FBQztBQUM5RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvbnN0YW50cyBhbmQgdXRpbGl0aWVzIGZvciBlbmNvZGluZyBjaGFubmVscyAoVmlzdWFsIHZhcmlhYmxlcylcbiAqIHN1Y2ggYXMgJ3gnLCAneScsICdjb2xvcicuXG4gKi9cblxuaW1wb3J0IHtSYW5nZVR5cGV9IGZyb20gJy4vY29tcGlsZS9zY2FsZS90eXBlJztcbmltcG9ydCB7RW5jb2Rpbmd9IGZyb20gJy4vZW5jb2RpbmcnO1xuaW1wb3J0IHtGYWNldE1hcHBpbmd9IGZyb20gJy4vZmFjZXQnO1xuaW1wb3J0IHtNYXJrfSBmcm9tICcuL21hcmsnO1xuaW1wb3J0IHtGbGFnLCBmbGFnS2V5c30gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBDaGFubmVsIHtcbiAgLy8gRmFjZXRcbiAgZXhwb3J0IGNvbnN0IFJPVzogJ3JvdycgPSAncm93JztcbiAgZXhwb3J0IGNvbnN0IENPTFVNTjogJ2NvbHVtbicgPSAnY29sdW1uJztcblxuICAvLyBQb3NpdGlvblxuICBleHBvcnQgY29uc3QgWDogJ3gnID0gJ3gnO1xuICBleHBvcnQgY29uc3QgWTogJ3knID0gJ3knO1xuICBleHBvcnQgY29uc3QgWDI6ICd4MicgPSAneDInO1xuICBleHBvcnQgY29uc3QgWTI6ICd5MicgPSAneTInO1xuXG4gIC8vIEdlbyBQb3NpdGlvblxuICBleHBvcnQgY29uc3QgTEFUSVRVREU6ICdsYXRpdHVkZScgPSAnbGF0aXR1ZGUnO1xuICBleHBvcnQgY29uc3QgTE9OR0lUVURFOiAnbG9uZ2l0dWRlJyA9ICdsb25naXR1ZGUnO1xuICBleHBvcnQgY29uc3QgTEFUSVRVREUyOiAnbGF0aXR1ZGUyJyA9ICdsYXRpdHVkZTInO1xuICBleHBvcnQgY29uc3QgTE9OR0lUVURFMjogJ2xvbmdpdHVkZTInID0gJ2xvbmdpdHVkZTInO1xuXG4gIC8vIE1hcmsgcHJvcGVydHkgd2l0aCBzY2FsZVxuICBleHBvcnQgY29uc3QgQ09MT1I6ICdjb2xvcicgPSAnY29sb3InO1xuXG4gIGV4cG9ydCBjb25zdCBGSUxMOiAnZmlsbCcgPSAnZmlsbCc7XG5cbiAgZXhwb3J0IGNvbnN0IFNUUk9LRTogJ3N0cm9rZScgPSAnc3Ryb2tlJztcblxuICBleHBvcnQgY29uc3QgU0hBUEU6ICdzaGFwZScgPSAnc2hhcGUnO1xuICBleHBvcnQgY29uc3QgU0laRTogJ3NpemUnID0gJ3NpemUnO1xuICBleHBvcnQgY29uc3QgT1BBQ0lUWTogJ29wYWNpdHknID0gJ29wYWNpdHknO1xuXG4gIC8vIE5vbi1zY2FsZSBjaGFubmVsXG4gIGV4cG9ydCBjb25zdCBURVhUOiAndGV4dCcgPSAndGV4dCc7XG4gIGV4cG9ydCBjb25zdCBPUkRFUjogJ29yZGVyJyA9ICdvcmRlcic7XG4gIGV4cG9ydCBjb25zdCBERVRBSUw6ICdkZXRhaWwnID0gJ2RldGFpbCc7XG4gIGV4cG9ydCBjb25zdCBLRVk6ICdrZXknID0gJ2tleSc7XG5cbiAgZXhwb3J0IGNvbnN0IFRPT0xUSVA6ICd0b29sdGlwJyA9ICd0b29sdGlwJztcbiAgZXhwb3J0IGNvbnN0IEhSRUY6ICdocmVmJyA9ICdocmVmJztcbn1cblxuZXhwb3J0IHR5cGUgQ2hhbm5lbCA9IGtleW9mIEVuY29kaW5nPGFueT4gfCBrZXlvZiBGYWNldE1hcHBpbmc8YW55PjtcblxuZXhwb3J0IGNvbnN0IFggPSBDaGFubmVsLlg7XG5leHBvcnQgY29uc3QgWSA9IENoYW5uZWwuWTtcbmV4cG9ydCBjb25zdCBYMiA9IENoYW5uZWwuWDI7XG5leHBvcnQgY29uc3QgWTIgPSBDaGFubmVsLlkyO1xuXG5leHBvcnQgY29uc3QgTEFUSVRVREUgPSBDaGFubmVsLkxBVElUVURFO1xuZXhwb3J0IGNvbnN0IExBVElUVURFMiA9IENoYW5uZWwuTEFUSVRVREUyO1xuZXhwb3J0IGNvbnN0IExPTkdJVFVERSA9IENoYW5uZWwuTE9OR0lUVURFO1xuZXhwb3J0IGNvbnN0IExPTkdJVFVERTIgPSBDaGFubmVsLkxPTkdJVFVERTI7XG5cbmV4cG9ydCBjb25zdCBST1cgPSBDaGFubmVsLlJPVztcbmV4cG9ydCBjb25zdCBDT0xVTU4gPSBDaGFubmVsLkNPTFVNTjtcbmV4cG9ydCBjb25zdCBTSEFQRSA9IENoYW5uZWwuU0hBUEU7XG5leHBvcnQgY29uc3QgU0laRSA9IENoYW5uZWwuU0laRTtcbmV4cG9ydCBjb25zdCBDT0xPUiA9IENoYW5uZWwuQ09MT1I7XG5cbmV4cG9ydCBjb25zdCBGSUxMID0gQ2hhbm5lbC5GSUxMO1xuZXhwb3J0IGNvbnN0IFNUUk9LRSA9IENoYW5uZWwuU1RST0tFO1xuZXhwb3J0IGNvbnN0IFRFWFQgPSBDaGFubmVsLlRFWFQ7XG5leHBvcnQgY29uc3QgREVUQUlMID0gQ2hhbm5lbC5ERVRBSUw7XG5leHBvcnQgY29uc3QgS0VZID0gQ2hhbm5lbC5LRVk7XG5leHBvcnQgY29uc3QgT1JERVIgPSBDaGFubmVsLk9SREVSO1xuZXhwb3J0IGNvbnN0IE9QQUNJVFkgPSBDaGFubmVsLk9QQUNJVFk7XG5leHBvcnQgY29uc3QgVE9PTFRJUCA9IENoYW5uZWwuVE9PTFRJUDtcbmV4cG9ydCBjb25zdCBIUkVGID0gQ2hhbm5lbC5IUkVGO1xuXG5leHBvcnQgdHlwZSBHZW9Qb3NpdGlvbkNoYW5uZWwgPSAnbG9uZ2l0dWRlJyB8ICdsYXRpdHVkZScgfCAnbG9uZ2l0dWRlMicgfCAnbGF0aXR1ZGUyJztcblxuZXhwb3J0IGNvbnN0IEdFT1BPU0lUSU9OX0NIQU5ORUxfSU5ERVg6IEZsYWc8R2VvUG9zaXRpb25DaGFubmVsPiA9IHtcbiAgbG9uZ2l0dWRlOiAxLFxuICBsb25naXR1ZGUyOiAxLFxuICBsYXRpdHVkZTogMSxcbiAgbGF0aXR1ZGUyOiAxLFxufTtcblxuZXhwb3J0IGNvbnN0IEdFT1BPU0lUSU9OX0NIQU5ORUxTID0gZmxhZ0tleXMoR0VPUE9TSVRJT05fQ0hBTk5FTF9JTkRFWCk7XG5cbmNvbnN0IFVOSVRfQ0hBTk5FTF9JTkRFWDogRmxhZzxrZXlvZiBFbmNvZGluZzxhbnk+PiA9IHtcbiAgLy8gcG9zaXRpb25cbiAgeDogMSxcbiAgeTogMSxcbiAgeDI6IDEsXG4gIHkyOiAxLFxuXG4gIC4uLkdFT1BPU0lUSU9OX0NIQU5ORUxfSU5ERVgsXG5cbiAgLy8gY29sb3JcbiAgY29sb3I6IDEsXG4gIGZpbGw6IDEsXG4gIHN0cm9rZTogMSxcblxuICAvLyBvdGhlciBub24tcG9zaXRpb24gd2l0aCBzY2FsZVxuICBvcGFjaXR5OiAxLFxuICBzaXplOiAxLFxuICBzaGFwZTogMSxcblxuICAvLyBjaGFubmVscyB3aXRob3V0IHNjYWxlc1xuICBvcmRlcjogMSxcbiAgdGV4dDogMSxcbiAgZGV0YWlsOiAxLFxuICBrZXk6IDEsXG4gIHRvb2x0aXA6IDEsXG4gIGhyZWY6IDEsXG59O1xuXG5leHBvcnQgdHlwZSBDb2xvckNoYW5uZWwgPSAnY29sb3InIHwgJ2ZpbGwnIHwgJ3N0cm9rZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbG9yQ2hhbm5lbChjaGFubmVsOiBDaGFubmVsKTogY2hhbm5lbCBpcyBDb2xvckNoYW5uZWwge1xuICByZXR1cm4gY2hhbm5lbCA9PT0gJ2NvbG9yJyB8fCBjaGFubmVsID09PSAnZmlsbCcgfHwgY2hhbm5lbCA9PT0gJ3N0cm9rZSc7XG59XG5cbmNvbnN0IEZBQ0VUX0NIQU5ORUxfSU5ERVg6IEZsYWc8a2V5b2YgRmFjZXRNYXBwaW5nPGFueT4+ID0ge1xuICByb3c6IDEsXG4gIGNvbHVtbjogMVxufTtcblxuY29uc3QgQ0hBTk5FTF9JTkRFWCA9IHtcbiAgLi4uVU5JVF9DSEFOTkVMX0lOREVYLFxuICAuLi5GQUNFVF9DSEFOTkVMX0lOREVYXG59O1xuXG5leHBvcnQgY29uc3QgQ0hBTk5FTFMgPSBmbGFnS2V5cyhDSEFOTkVMX0lOREVYKTtcblxuY29uc3Qge29yZGVyOiBfbywgZGV0YWlsOiBfZCwgLi4uU0lOR0xFX0RFRl9DSEFOTkVMX0lOREVYfSA9IENIQU5ORUxfSU5ERVg7XG4vKipcbiAqIENoYW5uZWxzIHRoYXQgY2Fubm90IGhhdmUgYW4gYXJyYXkgb2YgY2hhbm5lbERlZi5cbiAqIG1vZGVsLmZpZWxkRGVmLCBnZXRGaWVsZERlZiBvbmx5IHdvcmsgZm9yIHRoZXNlIGNoYW5uZWxzLlxuICpcbiAqIChUaGUgb25seSB0d28gY2hhbm5lbHMgdGhhdCBjYW4gaGF2ZSBhbiBhcnJheSBvZiBjaGFubmVsRGVmcyBhcmUgXCJkZXRhaWxcIiBhbmQgXCJvcmRlclwiLlxuICogU2luY2UgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGZpZWxkRGVmcyBmb3IgZGV0YWlsIGFuZCBvcmRlciwgZ2V0RmllbGREZWYvbW9kZWwuZmllbGREZWZcbiAqIGFyZSBub3QgYXBwbGljYWJsZSBmb3IgdGhlbS4gIFNpbWlsYXJseSwgc2VsZWN0aW9uIHByb2plY3Rpb24gd29uJ3Qgd29yayB3aXRoIFwiZGV0YWlsXCIgYW5kIFwib3JkZXJcIi4pXG4gKi9cblxuZXhwb3J0IGNvbnN0IFNJTkdMRV9ERUZfQ0hBTk5FTFM6IFNpbmdsZURlZkNoYW5uZWxbXSA9IGZsYWdLZXlzKFNJTkdMRV9ERUZfQ0hBTk5FTF9JTkRFWCk7XG5cbi8vIFVzaW5nIHRoZSBmb2xsb3dpbmcgbGluZSBsZWFkcyB0byBUeXBlRXJyb3I6IENhbm5vdCByZWFkIHByb3BlcnR5ICdlbGVtZW50VHlwZXMnIG9mIHVuZGVmaW5lZFxuLy8gd2hlbiBydW5uaW5nIHRoZSBzY2hlbWEgZ2VuZXJhdG9yXG4vLyBleHBvcnQgdHlwZSBTaW5nbGVEZWZDaGFubmVsID0gdHlwZW9mIFNJTkdMRV9ERUZfQ0hBTk5FTFNbMF07XG5leHBvcnQgdHlwZSBTaW5nbGVEZWZDaGFubmVsID0gJ3gnIHwgJ3knIHwgJ3gyJyB8ICd5MicgfFxuICAnbG9uZ2l0dWRlJyB8ICdsYXRpdHVkZScgfCAnbG9uZ2l0dWRlMicgfCAnbGF0aXR1ZGUyJyB8XG4gICdyb3cnIHwgJ2NvbHVtbicgfFxuICAnY29sb3InIHwgJ2ZpbGwnIHwgJ3N0cm9rZScgfFxuICAnc2l6ZScgfCAnc2hhcGUnIHwgJ29wYWNpdHknIHxcbiAgJ3RleHQnIHwgJ3Rvb2x0aXAnIHwgJ2hyZWYnIHwgJ2tleSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NoYW5uZWwoc3RyOiBzdHJpbmcpOiBzdHIgaXMgQ2hhbm5lbCB7XG4gIHJldHVybiAhIUNIQU5ORUxfSU5ERVhbc3RyXTtcbn1cblxuLy8gQ0hBTk5FTFMgd2l0aG91dCBDT0xVTU4sIFJPV1xuZXhwb3J0IGNvbnN0IFVOSVRfQ0hBTk5FTFMgPSBmbGFnS2V5cyhVTklUX0NIQU5ORUxfSU5ERVgpO1xuXG5cbi8vIE5PTlBPU0lUSU9OX0NIQU5ORUxTID0gVU5JVF9DSEFOTkVMUyB3aXRob3V0IFgsIFksIFgyLCBZMjtcbmNvbnN0IHtcbiAgeDogX3gsIHk6IF95LFxuICAvLyB4MiBhbmQgeTIgc2hhcmUgdGhlIHNhbWUgc2NhbGUgYXMgeCBhbmQgeVxuICB4MjogX3gyLCB5MjogX3kyLFxuICBsYXRpdHVkZTogX2xhdGl0dWRlLCBsb25naXR1ZGU6IF9sb25naXR1ZGUsXG4gIGxhdGl0dWRlMjogX2xhdGl0dWRlMiwgbG9uZ2l0dWRlMjogX2xvbmdpdHVkZTIsXG4gIC8vIFRoZSByZXN0IG9mIHVuaXQgY2hhbm5lbHMgdGhlbiBoYXZlIHNjYWxlXG4gIC4uLk5PTlBPU0lUSU9OX0NIQU5ORUxfSU5ERVhcbn0gPSBVTklUX0NIQU5ORUxfSU5ERVg7XG5cbmV4cG9ydCBjb25zdCBOT05QT1NJVElPTl9DSEFOTkVMUyA9IGZsYWdLZXlzKE5PTlBPU0lUSU9OX0NIQU5ORUxfSU5ERVgpO1xuZXhwb3J0IHR5cGUgTm9uUG9zaXRpb25DaGFubmVsID0gdHlwZW9mIE5PTlBPU0lUSU9OX0NIQU5ORUxTWzBdO1xuXG4vLyBQT1NJVElPTl9TQ0FMRV9DSEFOTkVMUyA9IFggYW5kIFk7XG5jb25zdCBQT1NJVElPTl9TQ0FMRV9DSEFOTkVMX0lOREVYOiB7eDoxLCB5OjF9ID0ge3g6MSwgeToxfTtcbmV4cG9ydCBjb25zdCBQT1NJVElPTl9TQ0FMRV9DSEFOTkVMUyA9IGZsYWdLZXlzKFBPU0lUSU9OX1NDQUxFX0NIQU5ORUxfSU5ERVgpO1xuZXhwb3J0IHR5cGUgUG9zaXRpb25TY2FsZUNoYW5uZWwgPSB0eXBlb2YgUE9TSVRJT05fU0NBTEVfQ0hBTk5FTFNbMF07XG5cbi8vIE5PTl9QT1NJVElPTl9TQ0FMRV9DSEFOTkVMID0gU0NBTEVfQ0hBTk5FTFMgd2l0aG91dCBYLCBZXG5jb25zdCB7XG4gIC8vIHgyIGFuZCB5MiBzaGFyZSB0aGUgc2FtZSBzY2FsZSBhcyB4IGFuZCB5XG4gIC8vIHRleHQgYW5kIHRvb2x0aXAgaGF2ZSBmb3JtYXQgaW5zdGVhZCBvZiBzY2FsZSxcbiAgLy8gaHJlZiBoYXMgbmVpdGhlciBmb3JtYXQsIG5vciBzY2FsZVxuICB0ZXh0OiBfdCwgdG9vbHRpcDogX3R0LCBocmVmOiBfaHIsXG4gIC8vIGRldGFpbCBhbmQgb3JkZXIgaGF2ZSBubyBzY2FsZVxuICBkZXRhaWw6IF9kZCwga2V5OiBfaywgb3JkZXI6IF9vbyxcbiAgLi4uTk9OUE9TSVRJT05fU0NBTEVfQ0hBTk5FTF9JTkRFWFxufSA9IE5PTlBPU0lUSU9OX0NIQU5ORUxfSU5ERVg7XG5leHBvcnQgY29uc3QgTk9OUE9TSVRJT05fU0NBTEVfQ0hBTk5FTFMgPSBmbGFnS2V5cyhOT05QT1NJVElPTl9TQ0FMRV9DSEFOTkVMX0lOREVYKTtcbmV4cG9ydCB0eXBlIE5vblBvc2l0aW9uU2NhbGVDaGFubmVsID0gdHlwZW9mIE5PTlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTWzBdO1xuXG4vLyBEZWNsYXJlIFNDQUxFX0NIQU5ORUxfSU5ERVhcbmNvbnN0IFNDQUxFX0NIQU5ORUxfSU5ERVggPSB7XG4gIC4uLlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxfSU5ERVgsXG4gIC4uLk5PTlBPU0lUSU9OX1NDQUxFX0NIQU5ORUxfSU5ERVhcbn07XG5cbi8qKiBMaXN0IG9mIGNoYW5uZWxzIHdpdGggc2NhbGVzICovXG5leHBvcnQgY29uc3QgU0NBTEVfQ0hBTk5FTFMgPSBmbGFnS2V5cyhTQ0FMRV9DSEFOTkVMX0lOREVYKTtcbmV4cG9ydCB0eXBlIFNjYWxlQ2hhbm5lbCA9IHR5cGVvZiBTQ0FMRV9DSEFOTkVMU1swXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2NhbGVDaGFubmVsKGNoYW5uZWw6IENoYW5uZWwpOiBjaGFubmVsIGlzIFNjYWxlQ2hhbm5lbCB7XG4gIHJldHVybiAhIVNDQUxFX0NIQU5ORUxfSU5ERVhbY2hhbm5lbF07XG59XG5cbmV4cG9ydCB0eXBlIFN1cHBvcnRlZE1hcmsgPSB7XG4gIFttYXJrIGluIE1hcmtdPzogYm9vbGVhblxufTtcblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciBhIGNoYW5uZWwgc3VwcG9ydHMgYSBwYXJ0aWN1bGFyIG1hcmsgdHlwZS5cbiAqIEBwYXJhbSBjaGFubmVsICBjaGFubmVsIG5hbWVcbiAqIEBwYXJhbSBtYXJrIHRoZSBtYXJrIHR5cGVcbiAqIEByZXR1cm4gd2hldGhlciB0aGUgbWFyayBzdXBwb3J0cyB0aGUgY2hhbm5lbFxuICovXG5leHBvcnQgZnVuY3Rpb24gc3VwcG9ydE1hcmsoY2hhbm5lbDogQ2hhbm5lbCwgbWFyazogTWFyaykge1xuICByZXR1cm4gbWFyayBpbiBnZXRTdXBwb3J0ZWRNYXJrKGNoYW5uZWwpO1xufVxuXG4vKipcbiAqIFJldHVybiBhIGRpY3Rpb25hcnkgc2hvd2luZyB3aGV0aGVyIGEgY2hhbm5lbCBzdXBwb3J0cyBtYXJrIHR5cGUuXG4gKiBAcGFyYW0gY2hhbm5lbFxuICogQHJldHVybiBBIGRpY3Rpb25hcnkgbWFwcGluZyBtYXJrIHR5cGVzIHRvIGJvb2xlYW4gdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3VwcG9ydGVkTWFyayhjaGFubmVsOiBDaGFubmVsKTogU3VwcG9ydGVkTWFyayB7XG4gIHN3aXRjaCAoY2hhbm5lbCkge1xuICAgIGNhc2UgQ09MT1I6XG4gICAgY2FzZSBGSUxMOlxuICAgIGNhc2UgU1RST0tFOlxuXG4gICAgY2FzZSBERVRBSUw6XG4gICAgY2FzZSBLRVk6XG4gICAgY2FzZSBUT09MVElQOlxuICAgIGNhc2UgSFJFRjpcbiAgICBjYXNlIE9SREVSOiAgICAvLyBUT0RPOiByZXZpc2UgKG9yZGVyIG1pZ2h0IG5vdCBzdXBwb3J0IHJlY3QsIHdoaWNoIGlzIG5vdCBzdGFja2FibGU/KVxuICAgIGNhc2UgT1BBQ0lUWTpcbiAgICBjYXNlIFJPVzpcbiAgICBjYXNlIENPTFVNTjpcbiAgICAgIHJldHVybiB7IC8vIGFsbCBtYXJrc1xuICAgICAgICBwb2ludDogdHJ1ZSwgdGljazogdHJ1ZSwgcnVsZTogdHJ1ZSwgY2lyY2xlOiB0cnVlLCBzcXVhcmU6IHRydWUsXG4gICAgICAgIGJhcjogdHJ1ZSwgcmVjdDogdHJ1ZSwgbGluZTogdHJ1ZSwgdHJhaWw6IHRydWUsIGFyZWE6IHRydWUsIHRleHQ6IHRydWUsIGdlb3NoYXBlOiB0cnVlXG4gICAgICB9O1xuICAgIGNhc2UgWDpcbiAgICBjYXNlIFk6XG4gICAgY2FzZSBMQVRJVFVERTpcbiAgICBjYXNlIExPTkdJVFVERTpcbiAgICAgIHJldHVybiB7IC8vIGFsbCBtYXJrcyBleGNlcHQgZ2Vvc2hhcGUuIGdlb3NoYXBlIGRvZXMgbm90IHVzZSBYLCBZIC0tIGl0IHVzZXMgYSBwcm9qZWN0aW9uXG4gICAgICAgIHBvaW50OiB0cnVlLCB0aWNrOiB0cnVlLCBydWxlOiB0cnVlLCBjaXJjbGU6IHRydWUsIHNxdWFyZTogdHJ1ZSxcbiAgICAgICAgYmFyOiB0cnVlLCByZWN0OiB0cnVlLCBsaW5lOiB0cnVlLCB0cmFpbDogdHJ1ZSwgYXJlYTogdHJ1ZSwgdGV4dDogdHJ1ZVxuICAgICAgfTtcbiAgICBjYXNlIFgyOlxuICAgIGNhc2UgWTI6XG4gICAgY2FzZSBMQVRJVFVERTI6XG4gICAgY2FzZSBMT05HSVRVREUyOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcnVsZTogdHJ1ZSwgYmFyOiB0cnVlLCByZWN0OiB0cnVlLCBhcmVhOiB0cnVlXG4gICAgICB9O1xuICAgIGNhc2UgU0laRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50OiB0cnVlLCB0aWNrOiB0cnVlLCBydWxlOiB0cnVlLCBjaXJjbGU6IHRydWUsIHNxdWFyZTogdHJ1ZSxcbiAgICAgICAgYmFyOiB0cnVlLCB0ZXh0OiB0cnVlLCBsaW5lOiB0cnVlLCB0cmFpbDogdHJ1ZVxuICAgICAgfTtcbiAgICBjYXNlIFNIQVBFOlxuICAgICAgcmV0dXJuIHtwb2ludDogdHJ1ZSwgZ2Vvc2hhcGU6IHRydWV9O1xuICAgIGNhc2UgVEVYVDpcbiAgICAgIHJldHVybiB7dGV4dDogdHJ1ZX07XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlVHlwZShjaGFubmVsOiBDaGFubmVsKTogUmFuZ2VUeXBlIHtcbiAgc3dpdGNoIChjaGFubmVsKSB7XG4gICAgY2FzZSBYOlxuICAgIGNhc2UgWTpcbiAgICBjYXNlIFNJWkU6XG4gICAgY2FzZSBPUEFDSVRZOlxuICAgIC8vIFgyIGFuZCBZMiB1c2UgWCBhbmQgWSBzY2FsZXMsIHNvIHRoZXkgc2ltaWxhcmx5IGhhdmUgY29udGludW91cyByYW5nZS5cbiAgICBjYXNlIFgyOlxuICAgIGNhc2UgWTI6XG4gICAgICByZXR1cm4gJ2NvbnRpbnVvdXMnO1xuXG4gICAgY2FzZSBST1c6XG4gICAgY2FzZSBDT0xVTU46XG4gICAgY2FzZSBTSEFQRTpcbiAgICAvLyBURVhULCBUT09MVElQLCBhbmQgSFJFRiBoYXZlIG5vIHNjYWxlIGJ1dCBoYXZlIGRpc2NyZXRlIG91dHB1dFxuICAgIGNhc2UgVEVYVDpcbiAgICBjYXNlIFRPT0xUSVA6XG4gICAgY2FzZSBIUkVGOlxuICAgICAgcmV0dXJuICdkaXNjcmV0ZSc7XG5cbiAgICAvLyBDb2xvciBjYW4gYmUgZWl0aGVyIGNvbnRpbnVvdXMgb3IgZGlzY3JldGUsIGRlcGVuZGluZyBvbiBzY2FsZSB0eXBlLlxuICAgIGNhc2UgQ09MT1I6XG4gICAgY2FzZSBGSUxMOlxuICAgIGNhc2UgU1RST0tFOlxuICAgICAgcmV0dXJuICdmbGV4aWJsZSc7XG5cbiAgICAvLyBObyBzY2FsZSwgbm8gcmFuZ2UgdHlwZS5cblxuICAgIGNhc2UgTEFUSVRVREU6XG4gICAgY2FzZSBMT05HSVRVREU6XG4gICAgY2FzZSBMQVRJVFVERTI6XG4gICAgY2FzZSBMT05HSVRVREUyOlxuICAgIGNhc2UgREVUQUlMOlxuICAgIGNhc2UgS0VZOlxuICAgIGNhc2UgT1JERVI6XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZS4gKi9cbiAgdGhyb3cgbmV3IEVycm9yKCdyYW5nZVR5cGUgbm90IGltcGxlbWVudGVkIGZvciAnICsgY2hhbm5lbCk7XG59XG4iXX0=","import { isBoolean } from 'vega-util';\nimport { COLOR, COLUMN, FILL, OPACITY, ROW, SHAPE, SIZE, STROKE } from './channel';\nimport { keys, varName } from './util';\nexport function binToString(bin) {\n    if (isBoolean(bin)) {\n        return 'bin';\n    }\n    return 'bin' + keys(bin).map(function (p) { return varName(\"_\" + p + \"_\" + bin[p]); }).join('');\n}\nexport function isBinParams(bin) {\n    return bin && !isBoolean(bin);\n}\nexport function autoMaxBins(channel) {\n    switch (channel) {\n        case ROW:\n        case COLUMN:\n        case SIZE:\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case OPACITY:\n        // Facets and Size shouldn't have too many bins\n        // We choose 6 like shape to simplify the rule\n        case SHAPE:\n            return 6; // Vega's \"shape\" has 6 distinct values\n        default:\n            return 10;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2Jpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFGLE9BQU8sRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBNkRyQyxNQUFNLHNCQUFzQixHQUF3QjtJQUNsRCxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNsQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsT0FBTyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLE9BQU8sQ0FBQyxNQUFJLENBQUMsU0FBSSxHQUFHLENBQUMsQ0FBQyxDQUFHLENBQUMsRUFBMUIsQ0FBMEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6RSxDQUFDO0FBRUQsTUFBTSxzQkFBc0IsR0FBd0I7SUFDbEQsT0FBTyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sc0JBQXNCLE9BQWdCO0lBQzFDLFFBQVEsT0FBTyxFQUFFO1FBQ2YsS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLE1BQU0sQ0FBQztRQUNaLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxLQUFLLENBQUM7UUFDWCxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssTUFBTSxDQUFDO1FBQ1osS0FBSyxPQUFPLENBQUM7UUFDWCwrQ0FBK0M7UUFDL0MsOENBQThDO1FBQ2hELEtBQUssS0FBSztZQUNSLE9BQU8sQ0FBQyxDQUFDLENBQUMsdUNBQXVDO1FBQ25EO1lBQ0UsT0FBTyxFQUFFLENBQUM7S0FDYjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzQm9vbGVhbn0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Q2hhbm5lbCwgQ09MT1IsIENPTFVNTiwgRklMTCwgT1BBQ0lUWSwgUk9XLCBTSEFQRSwgU0laRSwgU1RST0tFfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHtrZXlzLCB2YXJOYW1lfSBmcm9tICcuL3V0aWwnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUJpbiB7XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIGJhc2UgdG8gdXNlIGZvciBhdXRvbWF0aWMgYmluIGRldGVybWluYXRpb24gKGRlZmF1bHQgaXMgYmFzZSAxMCkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgMTBgXG4gICAqXG4gICAqL1xuICBiYXNlPzogbnVtYmVyO1xuICAvKipcbiAgICogQW4gZXhhY3Qgc3RlcCBzaXplIHRvIHVzZSBiZXR3ZWVuIGJpbnMuXG4gICAqXG4gICAqIF9fTm90ZTpfXyBJZiBwcm92aWRlZCwgb3B0aW9ucyBzdWNoIGFzIG1heGJpbnMgd2lsbCBiZSBpZ25vcmVkLlxuICAgKi9cbiAgc3RlcD86IG51bWJlcjtcbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGFsbG93YWJsZSBzdGVwIHNpemVzIHRvIGNob29zZSBmcm9tLlxuICAgKiBAbWluSXRlbXMgMVxuICAgKi9cbiAgc3RlcHM/OiBudW1iZXJbXTtcbiAgLyoqXG4gICAqIEEgbWluaW11bSBhbGxvd2FibGUgc3RlcCBzaXplIChwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBpbnRlZ2VyIHZhbHVlcykuXG4gICAqL1xuICBtaW5zdGVwPzogbnVtYmVyO1xuICAvKipcbiAgICogU2NhbGUgZmFjdG9ycyBpbmRpY2F0aW5nIGFsbG93YWJsZSBzdWJkaXZpc2lvbnMuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIFs1LCAyXSwgd2hpY2ggaW5kaWNhdGVzIHRoYXQgZm9yIGJhc2UgMTAgbnVtYmVycyAodGhlIGRlZmF1bHQgYmFzZSksIHRoZSBtZXRob2QgbWF5IGNvbnNpZGVyIGRpdmlkaW5nIGJpbiBzaXplcyBieSA1IGFuZC9vciAyLiBGb3IgZXhhbXBsZSwgZm9yIGFuIGluaXRpYWwgc3RlcCBzaXplIG9mIDEwLCB0aGUgbWV0aG9kIGNhbiBjaGVjayBpZiBiaW4gc2l6ZXMgb2YgMiAoPSAxMC81KSwgNSAoPSAxMC8yKSwgb3IgMSAoPSAxMC8oNSoyKSkgbWlnaHQgYWxzbyBzYXRpc2Z5IHRoZSBnaXZlbiBjb25zdHJhaW50cy5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBbNSwgMl1gXG4gICAqXG4gICAqIEBtaW5JdGVtcyAxXG4gICAqL1xuICBkaXZpZGU/OiBudW1iZXJbXTtcbiAgLyoqXG4gICAqIE1heGltdW0gbnVtYmVyIG9mIGJpbnMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgNmAgZm9yIGByb3dgLCBgY29sdW1uYCBhbmQgYHNoYXBlYCBjaGFubmVsczsgYDEwYCBmb3Igb3RoZXIgY2hhbm5lbHNcbiAgICpcbiAgICogQG1pbmltdW0gMlxuICAgKi9cbiAgbWF4Ymlucz86IG51bWJlcjtcbiAgLyoqXG4gICAqIElmIHRydWUgKHRoZSBkZWZhdWx0KSwgYXR0ZW1wdHMgdG8gbWFrZSB0aGUgYmluIGJvdW5kYXJpZXMgdXNlIGh1bWFuLWZyaWVuZGx5IGJvdW5kYXJpZXMsIHN1Y2ggYXMgbXVsdGlwbGVzIG9mIHRlbi5cbiAgICovXG4gIG5pY2U/OiBib29sZWFuO1xufVxuXG5cbi8qKlxuICogQmlubmluZyBwcm9wZXJ0aWVzIG9yIGJvb2xlYW4gZmxhZyBmb3IgZGV0ZXJtaW5pbmcgd2hldGhlciB0byBiaW4gZGF0YSBvciBub3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmluUGFyYW1zIGV4dGVuZHMgQmFzZUJpbiB7XG4gIC8qKlxuICAgKiBBIHR3by1lbGVtZW50IChgW21pbiwgbWF4XWApIGFycmF5IGluZGljYXRpbmcgdGhlIHJhbmdlIG9mIGRlc2lyZWQgYmluIHZhbHVlcy5cbiAgICogQG1pbkl0ZW1zIDJcbiAgICogQG1heEl0ZW1zIDJcbiAgICovXG4gIGV4dGVudD86IG51bWJlcltdOyAgLy8gVmdCaW5UcmFuc2Zvcm0gdXNlcyBhIGRpZmZlcmVudCBleHRlbnQgc28gd2UgbmVlZCB0byBwdWxsIHRoaXMgb3V0LlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYmluVG9TdHJpbmcoYmluOiBCaW5QYXJhbXMgfCBib29sZWFuKSB7XG4gIGlmIChpc0Jvb2xlYW4oYmluKSkge1xuICAgIHJldHVybiAnYmluJztcbiAgfVxuICByZXR1cm4gJ2JpbicgKyBrZXlzKGJpbikubWFwKHAgPT4gdmFyTmFtZShgXyR7cH1fJHtiaW5bcF19YCkpLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCaW5QYXJhbXMoYmluOiBCaW5QYXJhbXMgfCBib29sZWFuKTogYmluIGlzIEJpblBhcmFtcyB7XG4gIHJldHVybiBiaW4gJiYgIWlzQm9vbGVhbihiaW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXV0b01heEJpbnMoY2hhbm5lbDogQ2hhbm5lbCk6IG51bWJlciB7XG4gIHN3aXRjaCAoY2hhbm5lbCkge1xuICAgIGNhc2UgUk9XOlxuICAgIGNhc2UgQ09MVU1OOlxuICAgIGNhc2UgU0laRTpcbiAgICBjYXNlIENPTE9SOlxuICAgIGNhc2UgRklMTDpcbiAgICBjYXNlIFNUUk9LRTpcbiAgICBjYXNlIE9QQUNJVFk6XG4gICAgICAvLyBGYWNldHMgYW5kIFNpemUgc2hvdWxkbid0IGhhdmUgdG9vIG1hbnkgYmluc1xuICAgICAgLy8gV2UgY2hvb3NlIDYgbGlrZSBzaGFwZSB0byBzaW1wbGlmeSB0aGUgcnVsZVxuICAgIGNhc2UgU0hBUEU6XG4gICAgICByZXR1cm4gNjsgLy8gVmVnYSdzIFwic2hhcGVcIiBoYXMgNiBkaXN0aW5jdCB2YWx1ZXNcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDEwO1xuICB9XG59XG4iXX0=","import { toSet } from 'vega-util';\nimport { contains, flagKeys } from './util';\nexport var Mark;\n(function (Mark) {\n    Mark.AREA = 'area';\n    Mark.BAR = 'bar';\n    Mark.LINE = 'line';\n    Mark.POINT = 'point';\n    Mark.RECT = 'rect';\n    Mark.RULE = 'rule';\n    Mark.TEXT = 'text';\n    Mark.TICK = 'tick';\n    Mark.TRAIL = 'trail';\n    Mark.CIRCLE = 'circle';\n    Mark.SQUARE = 'square';\n    Mark.GEOSHAPE = 'geoshape';\n})(Mark || (Mark = {}));\nexport var AREA = Mark.AREA;\nexport var BAR = Mark.BAR;\nexport var LINE = Mark.LINE;\nexport var POINT = Mark.POINT;\nexport var TEXT = Mark.TEXT;\nexport var TICK = Mark.TICK;\nexport var TRAIL = Mark.TRAIL;\nexport var RECT = Mark.RECT;\nexport var RULE = Mark.RULE;\nexport var GEOSHAPE = Mark.GEOSHAPE;\nexport var CIRCLE = Mark.CIRCLE;\nexport var SQUARE = Mark.SQUARE;\n// Using mapped type to declare index, ensuring we always have all marks when we add more.\nvar MARK_INDEX = {\n    area: 1,\n    bar: 1,\n    line: 1,\n    point: 1,\n    text: 1,\n    tick: 1,\n    trail: 1,\n    rect: 1,\n    geoshape: 1,\n    rule: 1,\n    circle: 1,\n    square: 1\n};\nexport function isMark(m) {\n    return !!MARK_INDEX[m];\n}\nexport function isPathMark(m) {\n    return contains(['line', 'area', 'trail'], m);\n}\nexport var PRIMITIVE_MARKS = flagKeys(MARK_INDEX);\nexport function isMarkDef(mark) {\n    return mark['type'];\n}\nvar PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\nexport function isPrimitiveMark(mark) {\n    var markType = isMarkDef(mark) ? mark.type : mark;\n    return markType in PRIMITIVE_MARK_INDEX;\n}\nexport var STROKE_CONFIG = ['stroke', 'strokeWidth',\n    'strokeDash', 'strokeDashOffset', 'strokeOpacity'];\nexport var FILL_CONFIG = ['fill', 'fillOpacity'];\nexport var FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);\nexport var VL_ONLY_MARK_CONFIG_PROPERTIES = ['filled', 'color'];\nexport var VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n    area: ['line', 'point'],\n    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    line: ['point'],\n    text: ['shortTimeLabels'],\n    tick: ['bandSize', 'thickness']\n};\nexport var defaultMarkConfig = {\n    color: '#4c78a8',\n};\nexport var defaultBarConfig = {\n    binSpacing: 1,\n    continuousBandSize: 5\n};\nexport var defaultTickConfig = {\n    thickness: 1\n};\n//# sourceMappingURL=data:application/json;base64,","/**\n * Vega-Lite's singleton logger utility.\n */\nimport { logger, Warn } from 'vega-util';\nimport { stringify } from './util';\n/**\n * Main (default) Vega Logger instance for Vega-Lite\n */\nvar main = logger(Warn);\nvar current = main;\n/**\n * Logger tool for checking if the code throws correct warning\n */\nvar LocalLogger = /** @class */ (function () {\n    function LocalLogger() {\n        this.warns = [];\n        this.infos = [];\n        this.debugs = [];\n    }\n    LocalLogger.prototype.level = function () {\n        return this;\n    };\n    LocalLogger.prototype.warn = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this.warns).push.apply(_a, args);\n        return this;\n    };\n    LocalLogger.prototype.info = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this.infos).push.apply(_a, args);\n        return this;\n    };\n    LocalLogger.prototype.debug = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this.debugs).push.apply(_a, args);\n        return this;\n    };\n    return LocalLogger;\n}());\nexport { LocalLogger };\nexport function wrap(f) {\n    return function () {\n        current = new LocalLogger();\n        f(current);\n        reset();\n    };\n}\n/**\n * Set the singleton logger to be a custom logger\n */\nexport function set(newLogger) {\n    current = newLogger;\n    return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger\n */\nexport function reset() {\n    current = main;\n    return current;\n}\nexport function warn() {\n    var _ = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        _[_i] = arguments[_i];\n    }\n    current.warn.apply(current, arguments);\n}\nexport function info() {\n    var _ = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        _[_i] = arguments[_i];\n    }\n    current.info.apply(current, arguments);\n}\nexport function debug() {\n    var _ = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        _[_i] = arguments[_i];\n    }\n    current.debug.apply(current, arguments);\n}\n/**\n * Collection of all Vega-Lite Error Messages\n */\nexport var message;\n(function (message) {\n    message.INVALID_SPEC = 'Invalid spec';\n    // FIT\n    message.FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\n    message.CANNOT_FIX_RANGE_STEP_WITH_FIT = 'Cannot use a fixed value of \"rangeStep\" when \"autosize\" is \"fit\".';\n    // SELECTION\n    function cannotProjectOnChannelWithoutField(channel) {\n        return \"Cannot project a selection on encoding channel \\\"\" + channel + \"\\\", which has no field.\";\n    }\n    message.cannotProjectOnChannelWithoutField = cannotProjectOnChannelWithoutField;\n    function nearestNotSupportForContinuous(mark) {\n        return \"The \\\"nearest\\\" transform is not supported for \" + mark + \" marks.\";\n    }\n    message.nearestNotSupportForContinuous = nearestNotSupportForContinuous;\n    function selectionNotFound(name) {\n        return \"Cannot find a selection named \\\"\" + name + \"\\\"\";\n    }\n    message.selectionNotFound = selectionNotFound;\n    message.SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\n    // REPEAT\n    function noSuchRepeatedValue(field) {\n        return \"Unknown repeated value \\\"\" + field + \"\\\".\";\n    }\n    message.noSuchRepeatedValue = noSuchRepeatedValue;\n    // CONCAT\n    message.CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated views.';\n    // REPEAT\n    message.REPEAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in repeated views.';\n    // TITLE\n    function cannotSetTitleAnchor(type) {\n        return \"Cannot set title \\\"anchor\\\" for a \" + type + \" spec\";\n    }\n    message.cannotSetTitleAnchor = cannotSetTitleAnchor;\n    // DATA\n    function unrecognizedParse(p) {\n        return \"Unrecognized parse \\\"\" + p + \"\\\".\";\n    }\n    message.unrecognizedParse = unrecognizedParse;\n    function differentParse(field, local, ancestor) {\n        return \"An ancestor parsed field \\\"\" + field + \"\\\" as \" + ancestor + \" but a child wants to parse the field as \" + local + \".\";\n    }\n    message.differentParse = differentParse;\n    // TRANSFORMS\n    function invalidTransformIgnored(transform) {\n        return \"Ignoring an invalid transform: \" + stringify(transform) + \".\";\n    }\n    message.invalidTransformIgnored = invalidTransformIgnored;\n    message.NO_FIELDS_NEEDS_AS = 'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.';\n    // ENCODING & FACET\n    function encodingOverridden(channels) {\n        return \"Layer's shared \" + channels.join(',') + \" channel \" + (channels.length === 1 ? 'is' : 'are') + \" overriden\";\n    }\n    message.encodingOverridden = encodingOverridden;\n    function projectionOverridden(opt) {\n        var parentProjection = opt.parentProjection, projection = opt.projection;\n        return \"Layer's shared projection \" + stringify(parentProjection) + \" is overridden by a child projection \" + stringify(projection) + \".\";\n    }\n    message.projectionOverridden = projectionOverridden;\n    function primitiveChannelDef(channel, type, value) {\n        return \"Channel \" + channel + \" is a \" + type + \". Converted to {value: \" + stringify(value) + \"}.\";\n    }\n    message.primitiveChannelDef = primitiveChannelDef;\n    function invalidFieldType(type) {\n        return \"Invalid field type \\\"\" + type + \"\\\"\";\n    }\n    message.invalidFieldType = invalidFieldType;\n    function nonZeroScaleUsedWithLengthMark(mark, channel, opt) {\n        var scaleText = opt.scaleType ? opt.scaleType + \" scale\" :\n            opt.zeroFalse ? 'scale with zero=false' :\n                'scale with custom domain that excludes zero';\n        return \"A \" + scaleText + \" is used with \" + mark + \" mark. This can be misleading as the \" + (channel === 'x' ? 'width' : 'height') + \" of the \" + mark + \" can be arbitrary based on the scale domain. You may want to use point mark instead.\";\n    }\n    message.nonZeroScaleUsedWithLengthMark = nonZeroScaleUsedWithLengthMark;\n    function invalidFieldTypeForCountAggregate(type, aggregate) {\n        return \"Invalid field type \\\"\" + type + \"\\\" for aggregate: \\\"\" + aggregate + \"\\\", using \\\"quantitative\\\" instead.\";\n    }\n    message.invalidFieldTypeForCountAggregate = invalidFieldTypeForCountAggregate;\n    function invalidAggregate(aggregate) {\n        return \"Invalid aggregation operator \\\"\" + aggregate + \"\\\"\";\n    }\n    message.invalidAggregate = invalidAggregate;\n    function emptyOrInvalidFieldType(type, channel, newType) {\n        return \"Invalid field type \\\"\" + type + \"\\\" for channel \\\"\" + channel + \"\\\", using \\\"\" + newType + \"\\\" instead.\";\n    }\n    message.emptyOrInvalidFieldType = emptyOrInvalidFieldType;\n    function droppingColor(type, opt) {\n        var fill = opt.fill, stroke = opt.stroke;\n        return \"Dropping color \" + type + \" as the plot also has \" + (fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke');\n    }\n    message.droppingColor = droppingColor;\n    function emptyFieldDef(fieldDef, channel) {\n        return \"Dropping \" + stringify(fieldDef) + \" from channel \\\"\" + channel + \"\\\" since it does not contain data field or value.\";\n    }\n    message.emptyFieldDef = emptyFieldDef;\n    function latLongDeprecated(channel, type, newChannel) {\n        return channel + \"-encoding with type \" + type + \" is deprecated. Replacing with \" + newChannel + \"-encoding.\";\n    }\n    message.latLongDeprecated = latLongDeprecated;\n    message.LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\n    function incompatibleChannel(channel, markOrFacet, when) {\n        return channel + \" dropped as it is incompatible with \\\"\" + markOrFacet + \"\\\"\" + (when ? \" when \" + when : '') + \".\";\n    }\n    message.incompatibleChannel = incompatibleChannel;\n    function invalidEncodingChannel(channel) {\n        return channel + \"-encoding is dropped as \" + channel + \" is not a valid encoding channel.\";\n    }\n    message.invalidEncodingChannel = invalidEncodingChannel;\n    function facetChannelShouldBeDiscrete(channel) {\n        return channel + \" encoding should be discrete (ordinal / nominal / binned).\";\n    }\n    message.facetChannelShouldBeDiscrete = facetChannelShouldBeDiscrete;\n    function discreteChannelCannotEncode(channel, type) {\n        return \"Using discrete channel \\\"\" + channel + \"\\\" to encode \\\"\" + type + \"\\\" field can be misleading as it does not encode \" + (type === 'ordinal' ? 'order' : 'magnitude') + \".\";\n    }\n    message.discreteChannelCannotEncode = discreteChannelCannotEncode;\n    // Mark\n    message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL = 'Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.';\n    function lineWithRange(hasX2, hasY2) {\n        var channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n        return \"Line mark is for continuous lines and thus cannot be used with \" + channels + \". We will use the rule mark (line segments) instead.\";\n    }\n    message.lineWithRange = lineWithRange;\n    function unclearOrientContinuous(mark) {\n        return \"Cannot clearly determine orientation for \\\"\" + mark + \"\\\" since both x and y channel encode continuous fields. In this case, we use vertical by default\";\n    }\n    message.unclearOrientContinuous = unclearOrientContinuous;\n    function unclearOrientDiscreteOrEmpty(mark) {\n        return \"Cannot clearly determine orientation for \\\"\" + mark + \"\\\" since both x and y channel encode discrete or empty fields.\";\n    }\n    message.unclearOrientDiscreteOrEmpty = unclearOrientDiscreteOrEmpty;\n    function orientOverridden(original, actual) {\n        return \"Specified orient \\\"\" + original + \"\\\" overridden with \\\"\" + actual + \"\\\"\";\n    }\n    message.orientOverridden = orientOverridden;\n    // SCALE\n    message.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'custom domain scale cannot be unioned with default field-based domain';\n    function cannotUseScalePropertyWithNonColor(prop) {\n        return \"Cannot use the scale property \\\"\" + prop + \"\\\" with non-color channel.\";\n    }\n    message.cannotUseScalePropertyWithNonColor = cannotUseScalePropertyWithNonColor;\n    function unaggregateDomainHasNoEffectForRawField(fieldDef) {\n        return \"Using unaggregated domain with raw field has no effect (\" + stringify(fieldDef) + \").\";\n    }\n    message.unaggregateDomainHasNoEffectForRawField = unaggregateDomainHasNoEffectForRawField;\n    function unaggregateDomainWithNonSharedDomainOp(aggregate) {\n        return \"Unaggregated domain not applicable for \\\"\" + aggregate + \"\\\" since it produces values outside the origin domain of the source data.\";\n    }\n    message.unaggregateDomainWithNonSharedDomainOp = unaggregateDomainWithNonSharedDomainOp;\n    function unaggregatedDomainWithLogScale(fieldDef) {\n        return \"Unaggregated domain is currently unsupported for log scale (\" + stringify(fieldDef) + \").\";\n    }\n    message.unaggregatedDomainWithLogScale = unaggregatedDomainWithLogScale;\n    function cannotApplySizeToNonOrientedMark(mark) {\n        return \"Cannot apply size to non-oriented mark \\\"\" + mark + \"\\\".\";\n    }\n    message.cannotApplySizeToNonOrientedMark = cannotApplySizeToNonOrientedMark;\n    function rangeStepDropped(channel) {\n        return \"rangeStep for \\\"\" + channel + \"\\\" is dropped as top-level \" + (channel === 'x' ? 'width' : 'height') + \" is provided.\";\n    }\n    message.rangeStepDropped = rangeStepDropped;\n    function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\n        return \"Channel \\\"\" + channel + \"\\\" does not work with \\\"\" + scaleType + \"\\\" scale. We are using \\\"\" + defaultScaleType + \"\\\" scale instead.\";\n    }\n    message.scaleTypeNotWorkWithChannel = scaleTypeNotWorkWithChannel;\n    function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\n        return \"FieldDef does not work with \\\"\" + scaleType + \"\\\" scale. We are using \\\"\" + defaultScaleType + \"\\\" scale instead.\";\n    }\n    message.scaleTypeNotWorkWithFieldDef = scaleTypeNotWorkWithFieldDef;\n    function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\n        return channel + \"-scale's \\\"\" + propName + \"\\\" is dropped as it does not work with \" + scaleType + \" scale.\";\n    }\n    message.scalePropertyNotWorkWithScaleType = scalePropertyNotWorkWithScaleType;\n    function scaleTypeNotWorkWithMark(mark, scaleType) {\n        return \"Scale type \\\"\" + scaleType + \"\\\" does not work with mark \\\"\" + mark + \"\\\".\";\n    }\n    message.scaleTypeNotWorkWithMark = scaleTypeNotWorkWithMark;\n    function mergeConflictingProperty(property, propertyOf, v1, v2) {\n        return \"Conflicting \" + propertyOf.toString() + \" property \\\"\" + property.toString() + \"\\\" (\" + stringify(v1) + \" and \" + stringify(v2) + \").  Using \" + stringify(v1) + \".\";\n    }\n    message.mergeConflictingProperty = mergeConflictingProperty;\n    function independentScaleMeansIndependentGuide(channel) {\n        return \"Setting the scale to be independent for \\\"\" + channel + \"\\\" means we also have to set the guide (axis or legend) to be independent.\";\n    }\n    message.independentScaleMeansIndependentGuide = independentScaleMeansIndependentGuide;\n    function domainSortDropped(sort) {\n        return \"Dropping sort property \" + stringify(sort) + \" as unioned domains only support boolean or op 'count'.\";\n    }\n    message.domainSortDropped = domainSortDropped;\n    message.UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains';\n    message.MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\n    // AXIS\n    message.INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';\n    // STACK\n    function cannotStackRangedMark(channel) {\n        return \"Cannot stack \\\"\" + channel + \"\\\" if there is already \\\"\" + channel + \"2\\\"\";\n    }\n    message.cannotStackRangedMark = cannotStackRangedMark;\n    function cannotStackNonLinearScale(scaleType) {\n        return \"Cannot stack non-linear scale (\" + scaleType + \")\";\n    }\n    message.cannotStackNonLinearScale = cannotStackNonLinearScale;\n    function stackNonSummativeAggregate(aggregate) {\n        return \"Stacking is applied even though the aggregate function is non-summative (\\\"\" + aggregate + \"\\\")\";\n    }\n    message.stackNonSummativeAggregate = stackNonSummativeAggregate;\n    // TIMEUNIT\n    function invalidTimeUnit(unitName, value) {\n        return \"Invalid \" + unitName + \": \" + stringify(value);\n    }\n    message.invalidTimeUnit = invalidTimeUnit;\n    function dayReplacedWithDate(fullTimeUnit) {\n        return \"Time unit \\\"\" + fullTimeUnit + \"\\\" is not supported. We are replacing it with \" + fullTimeUnit.replace('day', 'date') + \".\";\n    }\n    message.dayReplacedWithDate = dayReplacedWithDate;\n    function droppedDay(d) {\n        return \"Dropping day from datetime \" + stringify(d) + \" as day cannot be combined with other units.\";\n    }\n    message.droppedDay = droppedDay;\n})(message || (message = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUdILE9BQU8sRUFBQyxNQUFNLEVBQW1CLElBQUksRUFBQyxNQUFNLFdBQVcsQ0FBQztBQVN4RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBTWpDOztHQUVHO0FBQ0gsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLElBQUksT0FBTyxHQUFvQixJQUFJLENBQUM7QUFFcEM7O0dBRUc7QUFDSDtJQUFBO1FBQ1MsVUFBSyxHQUFVLEVBQUUsQ0FBQztRQUNsQixVQUFLLEdBQVUsRUFBRSxDQUFDO1FBQ2xCLFdBQU0sR0FBVSxFQUFFLENBQUM7SUFvQjVCLENBQUM7SUFsQlEsMkJBQUssR0FBWjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLDBCQUFJLEdBQVg7O1FBQVksY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFDeEIsQ0FBQSxLQUFBLElBQUksQ0FBQyxLQUFLLENBQUEsQ0FBQyxJQUFJLFdBQUksSUFBSSxFQUFFO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLDBCQUFJLEdBQVg7O1FBQVksY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFDeEIsQ0FBQSxLQUFBLElBQUksQ0FBQyxLQUFLLENBQUEsQ0FBQyxJQUFJLFdBQUksSUFBSSxFQUFFO1FBQ3pCLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLDJCQUFLLEdBQVo7O1FBQWEsY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFDekIsQ0FBQSxLQUFBLElBQUksQ0FBQyxNQUFNLENBQUEsQ0FBQyxJQUFJLFdBQUksSUFBSSxF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RkFBMkYsQ0FBQztJQUU5SCxPQUFPO0lBQ00sZ0NBQXdCLEdBQUcsMkJBQTJCLENBQUM7SUFFcEUsUUFBUTtJQUNSLCtCQUFzQyxPQUFnQjtRQUNwRCxPQUFPLG9CQUFpQixPQUFPLGlDQUEwQixPQUFPLFFBQUksQ0FBQztJQUN2RSxDQUFDO0lBRmUsNkJBQXFCLHdCQUVwQyxDQUFBO0lBRUQsbUNBQTBDLFNBQW9CO1FBQzVELE9BQU8sb0NBQWtDLFNBQVMsTUFBRyxDQUFDO0lBQ3hELENBQUM7SUFGZSxpQ0FBeUIsNEJBRXhDLENBQUE7SUFFRCxvQ0FBMkMsU0FBaUI7UUFDMUQsT0FBTyxnRkFBNkUsU0FBUyxRQUFJLENBQUM7SUFDcEcsQ0FBQztJQUZlLGtDQUEwQiw2QkFFekMsQ0FBQTtJQUVELFdBQVc7SUFDWCx5QkFBZ0MsUUFBZ0IsRUFBRSxLQUFzQjtRQUN0RSxPQUFPLGFBQVcsUUFBUSxVQUFLLFNBQVMsQ0FBQyxLQUFLLENBQUcsQ0FBQztJQUNwRCxDQUFDO0lBRmUsdUJBQWUsa0JBRTlCLENBQUE7SUFFRCw2QkFBb0MsWUFBb0I7UUFDdEQsT0FBTyxpQkFBYyxZQUFZLHNEQUMvQixZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBRyxDQUFDO0lBQzNDLENBQUM7SUFIZSwyQkFBbUIsc0JBR2xDLENBQUE7SUFFRCxvQkFBMkIsQ0FBMEI7UUFDbkQsT0FBTyxnQ0FBOEIsU0FBUyxDQUFDLENBQUMsQ0FBQyxpREFBOEMsQ0FBQztJQUNsRyxDQUFDO0lBRmUsa0JBQVUsYUFFekIsQ0FBQTtBQUNILENBQUMsRUE1T2dCLE9BQU8sS0FBUCxPQUFPLFFBNE92QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmVnYS1MaXRlJ3Mgc2luZ2xldG9uIGxvZ2dlciB1dGlsaXR5LlxuICovXG5cbmltcG9ydCB7QWdncmVnYXRlT3B9IGZyb20gJ3ZlZ2EnO1xuaW1wb3J0IHtsb2dnZXIsIExvZ2dlckludGVyZmFjZSwgV2Fybn0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Q2hhbm5lbCwgR2VvUG9zaXRpb25DaGFubmVsfSBmcm9tICcuL2NoYW5uZWwnO1xuaW1wb3J0IHtDb21wb3NpdGVNYXJrfSBmcm9tICcuL2NvbXBvc2l0ZW1hcmsnO1xuaW1wb3J0IHtEYXRlVGltZSwgRGF0ZVRpbWVFeHByfSBmcm9tICcuL2RhdGV0aW1lJztcbmltcG9ydCB7RmllbGREZWZ9IGZyb20gJy4vZmllbGRkZWYnO1xuaW1wb3J0IHtNYXJrfSBmcm9tICcuL21hcmsnO1xuaW1wb3J0IHtQcm9qZWN0aW9ufSBmcm9tICcuL3Byb2plY3Rpb24nO1xuaW1wb3J0IHtTY2FsZVR5cGV9IGZyb20gJy4vc2NhbGUnO1xuaW1wb3J0IHtUeXBlfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHtzdHJpbmdpZnl9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQge1ZnU29ydEZpZWxkfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuXG5leHBvcnQge0xvZ2dlckludGVyZmFjZX0gZnJvbSAndmVnYS11dGlsJztcblxuLyoqXG4gKiBNYWluIChkZWZhdWx0KSBWZWdhIExvZ2dlciBpbnN0YW5jZSBmb3IgVmVnYS1MaXRlXG4gKi9cbmNvbnN0IG1haW4gPSBsb2dnZXIoV2Fybik7XG5sZXQgY3VycmVudDogTG9nZ2VySW50ZXJmYWNlID0gbWFpbjtcblxuLyoqXG4gKiBMb2dnZXIgdG9vbCBmb3IgY2hlY2tpbmcgaWYgdGhlIGNvZGUgdGhyb3dzIGNvcnJlY3Qgd2FybmluZ1xuICovXG5leHBvcnQgY2xhc3MgTG9jYWxMb2dnZXIgaW1wbGVtZW50cyBMb2dnZXJJbnRlcmZhY2Uge1xuICBwdWJsaWMgd2FybnM6IGFueVtdID0gW107XG4gIHB1YmxpYyBpbmZvczogYW55W10gPSBbXTtcbiAgcHVibGljIGRlYnVnczogYW55W10gPSBbXTtcblxuICBwdWJsaWMgbGV2ZWwoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBwdWJsaWMgd2FybiguLi5hcmdzOiBhbnlbXSkge1xuICAgIHRoaXMud2FybnMucHVzaCguLi5hcmdzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHB1YmxpYyBpbmZvKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5pbmZvcy5wdXNoKC4uLmFyZ3MpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIGRlYnVnKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgdGhpcy5kZWJ1Z3MucHVzaCguLi5hcmdzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JhcChmOiAobG9nZ2VyOiBMb2NhbExvZ2dlcikgPT4gdm9pZCkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGN1cnJlbnQgPSBuZXcgTG9jYWxMb2dnZXIoKTtcbiAgICBmKGN1cnJlbnQgYXMgTG9jYWxMb2dnZXIpO1xuICAgIHJlc2V0KCk7XG4gIH07XG59XG5cbi8qKlxuICogU2V0IHRoZSBzaW5nbGV0b24gbG9nZ2VyIHRvIGJlIGEgY3VzdG9tIGxvZ2dlclxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5ld0xvZ2dlcjogTG9nZ2VySW50ZXJmYWNlKSB7XG4gIGN1cnJlbnQgPSBuZXdMb2dnZXI7XG4gIHJldHVybiBjdXJyZW50O1xufVxuXG4vKipcbiAqIFJlc2V0IHRoZSBtYWluIGxvZ2dlciB0byB1c2UgdGhlIGRlZmF1bHQgVmVnYSBMb2dnZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0KCkge1xuICBjdXJyZW50ID0gbWFpbjtcbiAgcmV0dXJuIGN1cnJlbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXJuKC4uLl86IGFueVtdKSB7XG4gIGN1cnJlbnQud2Fybi5hcHBseShjdXJyZW50LCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mbyguLi5fOiBhbnlbXSkge1xuICBjdXJyZW50LmluZm8uYXBwbHkoY3VycmVudCwgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYnVnKC4uLl86IGFueVtdKSB7XG4gIGN1cnJlbnQuZGVidWcuYXBwbHkoY3VycmVudCwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0aW9uIG9mIGFsbCBWZWdhLUxpdGUgRXJyb3IgTWVzc2FnZXNcbiAqL1xuZXhwb3J0IG5hbWVzcGFjZSBtZXNzYWdlIHtcbiAgZXhwb3J0IGNvbnN0IElOVkFMSURfU1BFQyA9ICdJbnZhbGlkIHNwZWMnO1xuXG4gIC8vIEZJVFxuICBleHBvcnQgY29uc3QgRklUX05PTl9TSU5HTEUgPSAnQXV0b3NpemUgXCJmaXRcIiBvbmx5IHdvcmtzIGZvciBzaW5nbGUgdmlld3MgYW5kIGxheWVyZWQgdmlld3MuJztcblxuICBleHBvcnQgY29uc3QgQ0FOTk9UX0ZJWF9SQU5HRV9TVEVQX1dJVEhfRklUID0gJ0Nhbm5vdCB1c2UgYSBmaXhlZCB2YWx1ZSBvZiBcInJhbmdlU3RlcFwiIHdoZW4gXCJhdXRvc2l6ZVwiIGlzIFwiZml0XCIuJztcblxuICAvLyBTRUxFQ1RJT05cbiAgZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdFByb2plY3RPbkNoYW5uZWxXaXRob3V0RmllbGQoY2hhbm5lbDogQ2hhbm5lbCkge1xuICAgIHJldHVybiBgQ2Fubm90IHByb2plY3QgYSBzZWxlY3Rpb24gb24gZW5jb2RpbmcgY2hhbm5lbCBcIiR7Y2hhbm5lbH1cIiwgd2hpY2ggaGFzIG5vIGZpZWxkLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbmVhcmVzdE5vdFN1cHBvcnRGb3JDb250aW51b3VzKG1hcms6IHN0cmluZykge1xuICAgIHJldHVybiBgVGhlIFwibmVhcmVzdFwiIHRyYW5zZm9ybSBpcyBub3Qgc3VwcG9ydGVkIGZvciAke21hcmt9IG1hcmtzLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc2VsZWN0aW9uTm90Rm91bmQobmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBDYW5ub3QgZmluZCBhIHNlbGVjdGlvbiBuYW1lZCBcIiR7bmFtZX1cImA7XG4gIH1cblxuICBleHBvcnQgY29uc3QgU0NBTEVfQklORElOR1NfQ09OVElOVU9VUyA9ICdTY2FsZSBiaW5kaW5ncyBhcmUgY3VycmVudGx5IG9ubHkgc3VwcG9ydGVkIGZvciBzY2FsZXMgd2l0aCB1bmJpbm5lZCwgY29udGludW91cyBkb21haW5zLic7XG5cbiAgLy8gUkVQRUFUXG4gIGV4cG9ydCBmdW5jdGlvbiBub1N1Y2hSZXBlYXRlZFZhbHVlKGZpZWxkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYFVua25vd24gcmVwZWF0ZWQgdmFsdWUgXCIke2ZpZWxkfVwiLmA7XG4gIH1cblxuICAvLyBDT05DQVRcbiAgZXhwb3J0IGNvbnN0IENPTkNBVF9DQU5OT1RfU0hBUkVfQVhJUyA9ICdBeGVzIGNhbm5vdCBiZSBzaGFyZWQgaW4gY29uY2F0ZW5hdGVkIHZpZXdzLic7XG5cbiAgLy8gUkVQRUFUXG4gIGV4cG9ydCBjb25zdCBSRVBFQVRfQ0FOTk9UX1NIQVJFX0FYSVMgPSAnQXhlcyBjYW5ub3QgYmUgc2hhcmVkIGluIHJlcGVhdGVkIHZpZXdzLic7XG5cbiAgLy8gVElUTEVcbiAgZXhwb3J0IGZ1bmN0aW9uIGNhbm5vdFNldFRpdGxlQW5jaG9yKHR5cGU6IHN0cmluZykge1xuICAgIHJldHVybiBgQ2Fubm90IHNldCB0aXRsZSBcImFuY2hvclwiIGZvciBhICR7dHlwZX0gc3BlY2A7XG4gIH1cblxuICAvLyBEQVRBXG4gIGV4cG9ydCBmdW5jdGlvbiB1bnJlY29nbml6ZWRQYXJzZShwOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYFVucmVjb2duaXplZCBwYXJzZSBcIiR7cH1cIi5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVudFBhcnNlKGZpZWxkOiBzdHJpbmcsIGxvY2FsOiBzdHJpbmcsIGFuY2VzdG9yOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYEFuIGFuY2VzdG9yIHBhcnNlZCBmaWVsZCBcIiR7ZmllbGR9XCIgYXMgJHthbmNlc3Rvcn0gYnV0IGEgY2hpbGQgd2FudHMgdG8gcGFyc2UgdGhlIGZpZWxkIGFzICR7bG9jYWx9LmA7XG4gIH1cblxuICAvLyBUUkFOU0ZPUk1TXG4gIGV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkVHJhbnNmb3JtSWdub3JlZCh0cmFuc2Zvcm06IGFueSkge1xuICAgIHJldHVybiBgSWdub3JpbmcgYW4gaW52YWxpZCB0cmFuc2Zvcm06ICR7c3RyaW5naWZ5KHRyYW5zZm9ybSl9LmA7XG4gIH1cblxuICBleHBvcnQgY29uc3QgTk9fRklFTERTX05FRURTX0FTID0gJ0lmIFwiZnJvbS5maWVsZHNcIiBpcyBub3Qgc3BlY2lmaWVkLCBcImFzXCIgaGFzIHRvIGJlIGEgc3RyaW5nIHRoYXQgc3BlY2lmaWVzIHRoZSBrZXkgdG8gYmUgdXNlZCBmb3IgdGhlIGRhdGEgZnJvbSB0aGUgc2Vjb25kYXJ5IHNvdXJjZS4nO1xuXG4gIC8vIEVOQ09ESU5HICYgRkFDRVRcblxuICBleHBvcnQgZnVuY3Rpb24gZW5jb2RpbmdPdmVycmlkZGVuKGNoYW5uZWxzOiBDaGFubmVsW10pIHtcbiAgICByZXR1cm4gYExheWVyJ3Mgc2hhcmVkICR7Y2hhbm5lbHMuam9pbignLCcpfSBjaGFubmVsICR7Y2hhbm5lbHMubGVuZ3RoID09PSAxID8gJ2lzJyA6ICdhcmUnfSBvdmVycmlkZW5gO1xuICB9XG4gIGV4cG9ydCBmdW5jdGlvbiBwcm9qZWN0aW9uT3ZlcnJpZGRlbihvcHQ6IHtwYXJlbnRQcm9qZWN0aW9uOiBQcm9qZWN0aW9uLCBwcm9qZWN0aW9uOiBQcm9qZWN0aW9ufSkge1xuICAgIGNvbnN0IHtwYXJlbnRQcm9qZWN0aW9uLCBwcm9qZWN0aW9ufSA9IG9wdDtcbiAgICByZXR1cm4gYExheWVyJ3Mgc2hhcmVkIHByb2plY3Rpb24gJHtzdHJpbmdpZnkocGFyZW50UHJvamVjdGlvbil9IGlzIG92ZXJyaWRkZW4gYnkgYSBjaGlsZCBwcm9qZWN0aW9uICR7c3RyaW5naWZ5KHByb2plY3Rpb24pfS5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHByaW1pdGl2ZUNoYW5uZWxEZWYoY2hhbm5lbDogQ2hhbm5lbCwgdHlwZTogJ3N0cmluZycgfCAnbnVtYmVyJyB8ICdib29sZWFuJywgdmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gYENoYW5uZWwgJHtjaGFubmVsfSBpcyBhICR7dHlwZX0uIENvbnZlcnRlZCB0byB7dmFsdWU6ICR7c3RyaW5naWZ5KHZhbHVlKX19LmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaW52YWxpZEZpZWxkVHlwZSh0eXBlOiBUeXBlKSB7XG4gICAgcmV0dXJuIGBJbnZhbGlkIGZpZWxkIHR5cGUgXCIke3R5cGV9XCJgO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG5vblplcm9TY2FsZVVzZWRXaXRoTGVuZ3RoTWFyayhcbiAgICBtYXJrOiAnYmFyJyB8ICdhcmVhJywgY2hhbm5lbDogQ2hhbm5lbCxcbiAgICBvcHQ6IHtzY2FsZVR5cGU/OiBTY2FsZVR5cGUsIHplcm9GYWxzZT86IGJvb2xlYW59XG4gICkge1xuICAgIGNvbnN0IHNjYWxlVGV4dCA9IG9wdC5zY2FsZVR5cGUgPyBgJHtvcHQuc2NhbGVUeXBlfSBzY2FsZWAgOlxuICAgICAgb3B0Lnplcm9GYWxzZSA/ICdzY2FsZSB3aXRoIHplcm89ZmFsc2UnIDpcbiAgICAgICdzY2FsZSB3aXRoIGN1c3RvbSBkb21haW4gdGhhdCBleGNsdWRlcyB6ZXJvJztcblxuICAgIHJldHVybiBgQSAke3NjYWxlVGV4dH0gaXMgdXNlZCB3aXRoICR7bWFya30gbWFyay4gVGhpcyBjYW4gYmUgbWlzbGVhZGluZyBhcyB0aGUgJHtjaGFubmVsID09PSAneCcgPyAnd2lkdGgnIDogJ2hlaWdodCd9IG9mIHRoZSAke21hcmt9IGNhbiBiZSBhcmJpdHJhcnkgYmFzZWQgb24gdGhlIHNjYWxlIGRvbWFpbi4gWW91IG1heSB3YW50IHRvIHVzZSBwb2ludCBtYXJrIGluc3RlYWQuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkRmllbGRUeXBlRm9yQ291bnRBZ2dyZWdhdGUodHlwZTogVHlwZSwgYWdncmVnYXRlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYEludmFsaWQgZmllbGQgdHlwZSBcIiR7dHlwZX1cIiBmb3IgYWdncmVnYXRlOiBcIiR7YWdncmVnYXRlfVwiLCB1c2luZyBcInF1YW50aXRhdGl2ZVwiIGluc3RlYWQuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkQWdncmVnYXRlKGFnZ3JlZ2F0ZTogQWdncmVnYXRlT3AgfCBzdHJpbmcpIHtcbiAgICByZXR1cm4gYEludmFsaWQgYWdncmVnYXRpb24gb3BlcmF0b3IgXCIke2FnZ3JlZ2F0ZX1cImA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZW1wdHlPckludmFsaWRGaWVsZFR5cGUodHlwZTogVHlwZSB8IHN0cmluZywgY2hhbm5lbDogQ2hhbm5lbCwgbmV3VHlwZTogVHlwZSkge1xuICAgIHJldHVybiBgSW52YWxpZCBmaWVsZCB0eXBlIFwiJHt0eXBlfVwiIGZvciBjaGFubmVsIFwiJHtjaGFubmVsfVwiLCB1c2luZyBcIiR7bmV3VHlwZX1cIiBpbnN0ZWFkLmA7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIGRyb3BwaW5nQ29sb3IodHlwZTogJ2VuY29kaW5nJyB8ICdwcm9wZXJ0eScsIG9wdDoge2ZpbGw/OiBib29sZWFuLCBzdHJva2U/OiBib29sZWFufSkge1xuICAgIGNvbnN0IHtmaWxsLCBzdHJva2V9ID0gb3B0O1xuICAgIHJldHVybiBgRHJvcHBpbmcgY29sb3IgJHt0eXBlfSBhcyB0aGUgcGxvdCBhbHNvIGhhcyBgICsgKFxuICAgICAgZmlsbCAmJiBzdHJva2UgPyAnZmlsbCBhbmQgc3Ryb2tlJyA6IGZpbGwgPyAnZmlsbCcgOiAnc3Ryb2tlJ1xuICAgICk7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZW1wdHlGaWVsZERlZihmaWVsZERlZjogRmllbGREZWY8c3RyaW5nPiwgY2hhbm5lbDogQ2hhbm5lbCkge1xuICAgIHJldHVybiBgRHJvcHBpbmcgJHtzdHJpbmdpZnkoZmllbGREZWYpfSBmcm9tIGNoYW5uZWwgXCIke2NoYW5uZWx9XCIgc2luY2UgaXQgZG9lcyBub3QgY29udGFpbiBkYXRhIGZpZWxkIG9yIHZhbHVlLmA7XG4gIH1cbiAgZXhwb3J0IGZ1bmN0aW9uIGxhdExvbmdEZXByZWNhdGVkKGNoYW5uZWw6IENoYW5uZWwsIHR5cGU6IFR5cGUsIG5ld0NoYW5uZWw6IEdlb1Bvc2l0aW9uQ2hhbm5lbCkge1xuICAgIHJldHVybiBgJHtjaGFubmVsfS1lbmNvZGluZyB3aXRoIHR5cGUgJHt0eXBlfSBpcyBkZXByZWNhdGVkLiBSZXBsYWNpbmcgd2l0aCAke25ld0NoYW5uZWx9LWVuY29kaW5nLmA7XG4gIH1cblxuICBleHBvcnQgY29uc3QgTElORV9XSVRIX1ZBUllJTkdfU0laRSA9ICdMaW5lIG1hcmtzIGNhbm5vdCBlbmNvZGUgc2l6ZSB3aXRoIGEgbm9uLWdyb3VwYnkgZmllbGQuIFlvdSBtYXkgd2FudCB0byB1c2UgdHJhaWwgbWFya3MgaW5zdGVhZC4nO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbmNvbXBhdGlibGVDaGFubmVsKGNoYW5uZWw6IENoYW5uZWwsIG1hcmtPckZhY2V0OiBNYXJrIHwgJ2ZhY2V0JyB8IENvbXBvc2l0ZU1hcmssIHdoZW4/OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYCR7Y2hhbm5lbH0gZHJvcHBlZCBhcyBpdCBpcyBpbmNvbXBhdGlibGUgd2l0aCBcIiR7bWFya09yRmFjZXR9XCIke3doZW4gPyBgIHdoZW4gJHt3aGVufWAgOiAnJ30uYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpbnZhbGlkRW5jb2RpbmdDaGFubmVsKGNoYW5uZWw6IHN0cmluZykge1xuICAgIHJldHVybiBgJHtjaGFubmVsfS1lbmNvZGluZyBpcyBkcm9wcGVkIGFzICR7Y2hhbm5lbH0gaXMgbm90IGEgdmFsaWQgZW5jb2RpbmcgY2hhbm5lbC5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGZhY2V0Q2hhbm5lbFNob3VsZEJlRGlzY3JldGUoY2hhbm5lbDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGAke2NoYW5uZWx9IGVuY29kaW5nIHNob3VsZCBiZSBkaXNjcmV0ZSAob3JkaW5hbCAvIG5vbWluYWwgLyBiaW5uZWQpLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZGlzY3JldGVDaGFubmVsQ2Fubm90RW5jb2RlKGNoYW5uZWw6IENoYW5uZWwsIHR5cGU6IFR5cGUpIHtcbiAgICByZXR1cm4gYFVzaW5nIGRpc2NyZXRlIGNoYW5uZWwgXCIke2NoYW5uZWx9XCIgdG8gZW5jb2RlIFwiJHt0eXBlfVwiIGZpZWxkIGNhbiBiZSBtaXNsZWFkaW5nIGFzIGl0IGRvZXMgbm90IGVuY29kZSAke3R5cGUgPT09ICdvcmRpbmFsJyA/ICdvcmRlcicgOiAnbWFnbml0dWRlJ30uYDtcbiAgfVxuXG4gIC8vIE1hcmtcbiAgZXhwb3J0IGNvbnN0IEJBUl9XSVRIX1BPSU5UX1NDQUxFX0FORF9SQU5HRVNURVBfTlVMTCA9ICdCYXIgbWFyayBzaG91bGQgbm90IGJlIHVzZWQgd2l0aCBwb2ludCBzY2FsZSB3aGVuIHJhbmdlU3RlcCBpcyBudWxsLiBQbGVhc2UgdXNlIGJhbmQgc2NhbGUgaW5zdGVhZC4nO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBsaW5lV2l0aFJhbmdlKGhhc1gyOiBib29sZWFuLCBoYXNZMjogYm9vbGVhbikge1xuICAgIGNvbnN0IGNoYW5uZWxzID0gaGFzWDIgJiYgaGFzWTIgPyAneDIgYW5kIHkyJyA6IGhhc1gyID8gJ3gyJyA6ICd5Mic7XG4gICAgcmV0dXJuIGBMaW5lIG1hcmsgaXMgZm9yIGNvbnRpbnVvdXMgbGluZXMgYW5kIHRodXMgY2Fubm90IGJlIHVzZWQgd2l0aCAke2NoYW5uZWxzfS4gV2Ugd2lsbCB1c2UgdGhlIHJ1bGUgbWFyayAobGluZSBzZWdtZW50cykgaW5zdGVhZC5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHVuY2xlYXJPcmllbnRDb250aW51b3VzKG1hcms6IE1hcmspIHtcbiAgICByZXR1cm4gYENhbm5vdCBjbGVhcmx5IGRldGVybWluZSBvcmllbnRhdGlvbiBmb3IgXCIke21hcmt9XCIgc2luY2UgYm90aCB4IGFuZCB5IGNoYW5uZWwgZW5jb2RlIGNvbnRpbnVvdXMgZmllbGRzLiBJbiB0aGlzIGNhc2UsIHdlIHVzZSB2ZXJ0aWNhbCBieSBkZWZhdWx0YDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiB1bmNsZWFyT3JpZW50RGlzY3JldGVPckVtcHR5KG1hcms6IE1hcmspIHtcbiAgICByZXR1cm4gYENhbm5vdCBjbGVhcmx5IGRldGVybWluZSBvcmllbnRhdGlvbiBmb3IgXCIke21hcmt9XCIgc2luY2UgYm90aCB4IGFuZCB5IGNoYW5uZWwgZW5jb2RlIGRpc2NyZXRlIG9yIGVtcHR5IGZpZWxkcy5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIG9yaWVudE92ZXJyaWRkZW4ob3JpZ2luYWw6IHN0cmluZywgYWN0dWFsOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYFNwZWNpZmllZCBvcmllbnQgXCIke29yaWdpbmFsfVwiIG92ZXJyaWRkZW4gd2l0aCBcIiR7YWN0dWFsfVwiYDtcbiAgfVxuXG4gIC8vIFNDQUxFXG4gIGV4cG9ydCBjb25zdCBDQU5OT1RfVU5JT05fQ1VTVE9NX0RPTUFJTl9XSVRIX0ZJRUxEX0RPTUFJTiA9ICdjdXN0b20gZG9tYWluIHNjYWxlIGNhbm5vdCBiZSB1bmlvbmVkIHdpdGggZGVmYXVsdCBmaWVsZC1iYXNlZCBkb21haW4nO1xuXG4gIGV4cG9ydCBmdW5jdGlvbiBjYW5ub3RVc2VTY2FsZVByb3BlcnR5V2l0aE5vbkNvbG9yKHByb3A6IHN0cmluZykge1xuICAgIHJldHVybiBgQ2Fubm90IHVzZSB0aGUgc2NhbGUgcHJvcGVydHkgXCIke3Byb3B9XCIgd2l0aCBub24tY29sb3IgY2hhbm5lbC5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHVuYWdncmVnYXRlRG9tYWluSGFzTm9FZmZlY3RGb3JSYXdGaWVsZChmaWVsZERlZjogRmllbGREZWY8c3RyaW5nPikge1xuICAgIHJldHVybiBgVXNpbmcgdW5hZ2dyZWdhdGVkIGRvbWFpbiB3aXRoIHJhdyBmaWVsZCBoYXMgbm8gZWZmZWN0ICgke3N0cmluZ2lmeShmaWVsZERlZil9KS5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHVuYWdncmVnYXRlRG9tYWluV2l0aE5vblNoYXJlZERvbWFpbk9wKGFnZ3JlZ2F0ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGBVbmFnZ3JlZ2F0ZWQgZG9tYWluIG5vdCBhcHBsaWNhYmxlIGZvciBcIiR7YWdncmVnYXRlfVwiIHNpbmNlIGl0IHByb2R1Y2VzIHZhbHVlcyBvdXRzaWRlIHRoZSBvcmlnaW4gZG9tYWluIG9mIHRoZSBzb3VyY2UgZGF0YS5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHVuYWdncmVnYXRlZERvbWFpbldpdGhMb2dTY2FsZShmaWVsZERlZjogRmllbGREZWY8c3RyaW5nPikge1xuICAgIHJldHVybiBgVW5hZ2dyZWdhdGVkIGRvbWFpbiBpcyBjdXJyZW50bHkgdW5zdXBwb3J0ZWQgZm9yIGxvZyBzY2FsZSAoJHtzdHJpbmdpZnkoZmllbGREZWYpfSkuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBjYW5ub3RBcHBseVNpemVUb05vbk9yaWVudGVkTWFyayhtYXJrOiBNYXJrKSB7XG4gICAgcmV0dXJuIGBDYW5ub3QgYXBwbHkgc2l6ZSB0byBub24tb3JpZW50ZWQgbWFyayBcIiR7bWFya31cIi5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHJhbmdlU3RlcERyb3BwZWQoY2hhbm5lbDogQ2hhbm5lbCkge1xuICAgIHJldHVybiBgcmFuZ2VTdGVwIGZvciBcIiR7Y2hhbm5lbH1cIiBpcyBkcm9wcGVkIGFzIHRvcC1sZXZlbCAke1xuICAgICAgY2hhbm5lbCA9PT0gJ3gnID8gJ3dpZHRoJyA6ICdoZWlnaHQnfSBpcyBwcm92aWRlZC5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHNjYWxlVHlwZU5vdFdvcmtXaXRoQ2hhbm5lbChjaGFubmVsOiBDaGFubmVsLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSwgZGVmYXVsdFNjYWxlVHlwZTogU2NhbGVUeXBlKSB7XG4gICAgcmV0dXJuIGBDaGFubmVsIFwiJHtjaGFubmVsfVwiIGRvZXMgbm90IHdvcmsgd2l0aCBcIiR7c2NhbGVUeXBlfVwiIHNjYWxlLiBXZSBhcmUgdXNpbmcgXCIke2RlZmF1bHRTY2FsZVR5cGV9XCIgc2NhbGUgaW5zdGVhZC5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHNjYWxlVHlwZU5vdFdvcmtXaXRoRmllbGREZWYoc2NhbGVUeXBlOiBTY2FsZVR5cGUsIGRlZmF1bHRTY2FsZVR5cGU6IFNjYWxlVHlwZSkge1xuICAgIHJldHVybiBgRmllbGREZWYgZG9lcyBub3Qgd29yayB3aXRoIFwiJHtzY2FsZVR5cGV9XCIgc2NhbGUuIFdlIGFyZSB1c2luZyBcIiR7ZGVmYXVsdFNjYWxlVHlwZX1cIiBzY2FsZSBpbnN0ZWFkLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc2NhbGVQcm9wZXJ0eU5vdFdvcmtXaXRoU2NhbGVUeXBlKHNjYWxlVHlwZTogU2NhbGVUeXBlLCBwcm9wTmFtZTogc3RyaW5nLCBjaGFubmVsOiBDaGFubmVsKSB7XG4gICAgcmV0dXJuIGAke2NoYW5uZWx9LXNjYWxlJ3MgXCIke3Byb3BOYW1lfVwiIGlzIGRyb3BwZWQgYXMgaXQgZG9lcyBub3Qgd29yayB3aXRoICR7c2NhbGVUeXBlfSBzY2FsZS5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIHNjYWxlVHlwZU5vdFdvcmtXaXRoTWFyayhtYXJrOiBNYXJrLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSkge1xuICAgIHJldHVybiBgU2NhbGUgdHlwZSBcIiR7c2NhbGVUeXBlfVwiIGRvZXMgbm90IHdvcmsgd2l0aCBtYXJrIFwiJHttYXJrfVwiLmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gbWVyZ2VDb25mbGljdGluZ1Byb3BlcnR5PFQ+KHByb3BlcnR5OiBzdHJpbmcgfCBudW1iZXIgfCBzeW1ib2wsIHByb3BlcnR5T2Y6IHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCwgdjE6IFQsIHYyOiBUKSB7XG4gICAgcmV0dXJuIGBDb25mbGljdGluZyAke3Byb3BlcnR5T2YudG9TdHJpbmcoKX0gcHJvcGVydHkgXCIke3Byb3BlcnR5LnRvU3RyaW5nKCl9XCIgKCR7c3RyaW5naWZ5KHYxKX0gYW5kICR7c3RyaW5naWZ5KHYyKX0pLiAgVXNpbmcgJHtzdHJpbmdpZnkodjEpfS5gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGluZGVwZW5kZW50U2NhbGVNZWFuc0luZGVwZW5kZW50R3VpZGUoY2hhbm5lbDogQ2hhbm5lbCkge1xuICAgIHJldHVybiBgU2V0dGluZyB0aGUgc2NhbGUgdG8gYmUgaW5kZXBlbmRlbnQgZm9yIFwiJHtjaGFubmVsfVwiIG1lYW5zIHdlIGFsc28gaGF2ZSB0byBzZXQgdGhlIGd1aWRlIChheGlzIG9yIGxlZ2VuZCkgdG8gYmUgaW5kZXBlbmRlbnQuYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBkb21haW5Tb3J0RHJvcHBlZChzb3J0OiBWZ1NvcnRGaWVsZCkge1xuICAgIHJldHVybiBgRHJvcHBpbmcgc29ydCBwcm9wZXJ0eSAke3N0cmluZ2lmeShzb3J0KX0gYXMgdW5pb25lZCBkb21haW5zIG9ubHkgc3VwcG9ydCBib29sZWFuIG9yIG9wICdjb3VudCcuYDtcbiAgfVxuXG4gIGV4cG9ydCBjb25zdCBVTkFCTEVfVE9fTUVSR0VfRE9NQUlOUyA9ICdVbmFibGUgdG8gbWVyZ2UgZG9tYWlucyc7XG5cbiAgZXhwb3J0IGNvbnN0IE1PUkVfVEhBTl9PTkVfU09SVCA9ICdEb21haW5zIHRoYXQgc2hvdWxkIGJlIHVuaW9uZWQgaGFzIGNvbmZsaWN0aW5nIHNvcnQgcHJvcGVydGllcy4gU29ydCB3aWxsIGJlIHNldCB0byB0cnVlLic7XG5cbiAgLy8gQVhJU1xuICBleHBvcnQgY29uc3QgSU5WQUxJRF9DSEFOTkVMX0ZPUl9BWElTID0gJ0ludmFsaWQgY2hhbm5lbCBmb3IgYXhpcy4nO1xuXG4gIC8vIFNUQUNLXG4gIGV4cG9ydCBmdW5jdGlvbiBjYW5ub3RTdGFja1JhbmdlZE1hcmsoY2hhbm5lbDogQ2hhbm5lbCkge1xuICAgIHJldHVybiBgQ2Fubm90IHN0YWNrIFwiJHtjaGFubmVsfVwiIGlmIHRoZXJlIGlzIGFscmVhZHkgXCIke2NoYW5uZWx9MlwiYDtcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBjYW5ub3RTdGFja05vbkxpbmVhclNjYWxlKHNjYWxlVHlwZTogU2NhbGVUeXBlKSB7XG4gICAgcmV0dXJuIGBDYW5ub3Qgc3RhY2sgbm9uLWxpbmVhciBzY2FsZSAoJHtzY2FsZVR5cGV9KWA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gc3RhY2tOb25TdW1tYXRpdmVBZ2dyZWdhdGUoYWdncmVnYXRlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYFN0YWNraW5nIGlzIGFwcGxpZWQgZXZlbiB0aG91Z2ggdGhlIGFnZ3JlZ2F0ZSBmdW5jdGlvbiBpcyBub24tc3VtbWF0aXZlIChcIiR7YWdncmVnYXRlfVwiKWA7XG4gIH1cblxuICAvLyBUSU1FVU5JVFxuICBleHBvcnQgZnVuY3Rpb24gaW52YWxpZFRpbWVVbml0KHVuaXROYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICByZXR1cm4gYEludmFsaWQgJHt1bml0TmFtZX06ICR7c3RyaW5naWZ5KHZhbHVlKX1gO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGRheVJlcGxhY2VkV2l0aERhdGUoZnVsbFRpbWVVbml0OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYFRpbWUgdW5pdCBcIiR7ZnVsbFRpbWVVbml0fVwiIGlzIG5vdCBzdXBwb3J0ZWQuIFdlIGFyZSByZXBsYWNpbmcgaXQgd2l0aCAke1xuICAgICAgZnVsbFRpbWVVbml0LnJlcGxhY2UoJ2RheScsICdkYXRlJyl9LmA7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gZHJvcHBlZERheShkOiBEYXRlVGltZSB8IERhdGVUaW1lRXhwcikge1xuICAgIHJldHVybiBgRHJvcHBpbmcgZGF5IGZyb20gZGF0ZXRpbWUgJHtzdHJpbmdpZnkoZCl9IGFzIGRheSBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB1bml0cy5gO1xuICB9XG59XG5cbiJdfQ==","// DateTime definition object\nimport { isNumber } from 'vega-util';\nimport * as log from './log';\nimport { duplicate, keys } from './util';\n/*\n * A designated year that starts on Sunday.\n */\nvar SUNDAY_YEAR = 2006;\nexport function isDateTime(o) {\n    return !!o && (!!o.year || !!o.quarter || !!o.month || !!o.date || !!o.day ||\n        !!o.hours || !!o.minutes || !!o.seconds || !!o.milliseconds);\n}\nexport var MONTHS = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];\nexport var SHORT_MONTHS = MONTHS.map(function (m) { return m.substr(0, 3); });\nexport var DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport var SHORT_DAYS = DAYS.map(function (d) { return d.substr(0, 3); });\nfunction normalizeQuarter(q) {\n    if (isNumber(q)) {\n        if (q > 4) {\n            log.warn(log.message.invalidTimeUnit('quarter', q));\n        }\n        // We accept 1-based quarter, so need to readjust to 0-based quarter\n        return (q - 1) + '';\n    }\n    else {\n        // Invalid quarter\n        throw new Error(log.message.invalidTimeUnit('quarter', q));\n    }\n}\nfunction normalizeMonth(m) {\n    if (isNumber(m)) {\n        // We accept 1-based month, so need to readjust to 0-based month\n        return (m - 1) + '';\n    }\n    else {\n        var lowerM = m.toLowerCase();\n        var monthIndex = MONTHS.indexOf(lowerM);\n        if (monthIndex !== -1) {\n            return monthIndex + ''; // 0 for january, ...\n        }\n        var shortM = lowerM.substr(0, 3);\n        var shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n        if (shortMonthIndex !== -1) {\n            return shortMonthIndex + '';\n        }\n        // Invalid month\n        throw new Error(log.message.invalidTimeUnit('month', m));\n    }\n}\nfunction normalizeDay(d) {\n    if (isNumber(d)) {\n        // mod so that this can be both 0-based where 0 = sunday\n        // and 1-based where 7=sunday\n        return (d % 7) + '';\n    }\n    else {\n        var lowerD = d.toLowerCase();\n        var dayIndex = DAYS.indexOf(lowerD);\n        if (dayIndex !== -1) {\n            return dayIndex + ''; // 0 for january, ...\n        }\n        var shortD = lowerD.substr(0, 3);\n        var shortDayIndex = SHORT_DAYS.indexOf(shortD);\n        if (shortDayIndex !== -1) {\n            return shortDayIndex + '';\n        }\n        // Invalid day\n        throw new Error(log.message.invalidTimeUnit('day', d));\n    }\n}\n/**\n * Return Vega Expression for a particular date time.\n * @param d\n * @param normalize whether to normalize quarter, month, day.\n */\nexport function dateTimeExpr(d, normalize) {\n    if (normalize === void 0) { normalize = false; }\n    var units = [];\n    if (normalize && d.day !== undefined) {\n        if (keys(d).length > 1) {\n            log.warn(log.message.droppedDay(d));\n            d = duplicate(d);\n            delete d.day;\n        }\n    }\n    if (d.year !== undefined) {\n        units.push(d.year);\n    }\n    else if (d.day !== undefined) {\n        // Set year to 2006 for working with day since January 1 2006 is a Sunday\n        units.push(SUNDAY_YEAR);\n    }\n    else {\n        units.push(0);\n    }\n    if (d.month !== undefined) {\n        var month = normalize ? normalizeMonth(d.month) : d.month;\n        units.push(month);\n    }\n    else if (d.quarter !== undefined) {\n        var quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n        units.push(quarter + '*3');\n    }\n    else {\n        units.push(0); // months start at zero in JS\n    }\n    if (d.date !== undefined) {\n        units.push(d.date);\n    }\n    else if (d.day !== undefined) {\n        // HACK: Day only works as a standalone unit\n        // This is only correct because we always set year to 2006 for day\n        var day = normalize ? normalizeDay(d.day) : d.day;\n        units.push(day + '+1');\n    }\n    else {\n        units.push(1); // Date starts at 1 in JS\n    }\n    // Note: can't use TimeUnit enum here as importing it will create\n    // circular dependency problem!\n    for (var _i = 0, _a = ['hours', 'minutes', 'seconds', 'milliseconds']; _i < _a.length; _i++) {\n        var timeUnit = _a[_i];\n        if (d[timeUnit] !== undefined) {\n            units.push(d[timeUnit]);\n        }\n        else {\n            units.push(0);\n        }\n    }\n    if (d.utc) {\n        return \"utc(\" + units.join(', ') + \")\";\n    }\n    else {\n        return \"datetime(\" + units.join(', ') + \")\";\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { dateTimeExpr } from './datetime';\nimport * as log from './log';\nimport { accessPathWithDatum, flagKeys } from './util';\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit.YEAR = 'year';\n    TimeUnit.MONTH = 'month';\n    TimeUnit.DAY = 'day';\n    TimeUnit.DATE = 'date';\n    TimeUnit.HOURS = 'hours';\n    TimeUnit.MINUTES = 'minutes';\n    TimeUnit.SECONDS = 'seconds';\n    TimeUnit.MILLISECONDS = 'milliseconds';\n    TimeUnit.YEARMONTH = 'yearmonth';\n    TimeUnit.YEARMONTHDATE = 'yearmonthdate';\n    TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';\n    TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';\n    TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds';\n    // MONTHDATE always include 29 February since we use year 0th (which is a leap year);\n    TimeUnit.MONTHDATE = 'monthdate';\n    TimeUnit.HOURSMINUTES = 'hoursminutes';\n    TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';\n    TimeUnit.MINUTESSECONDS = 'minutesseconds';\n    TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';\n    TimeUnit.QUARTER = 'quarter';\n    TimeUnit.YEARQUARTER = 'yearquarter';\n    TimeUnit.QUARTERMONTH = 'quartermonth';\n    TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';\n    TimeUnit.UTCYEAR = 'utcyear';\n    TimeUnit.UTCMONTH = 'utcmonth';\n    TimeUnit.UTCDAY = 'utcday';\n    TimeUnit.UTCDATE = 'utcdate';\n    TimeUnit.UTCHOURS = 'utchours';\n    TimeUnit.UTCMINUTES = 'utcminutes';\n    TimeUnit.UTCSECONDS = 'utcseconds';\n    TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';\n    TimeUnit.UTCYEARMONTH = 'utcyearmonth';\n    TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';\n    TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';\n    TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';\n    TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds';\n    // MONTHDATE always include 29 February since we use year 0th (which is a leap year);\n    TimeUnit.UTCMONTHDATE = 'utcmonthdate';\n    TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';\n    TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';\n    TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';\n    TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';\n    TimeUnit.UTCQUARTER = 'utcquarter';\n    TimeUnit.UTCYEARQUARTER = 'utcyearquarter';\n    TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';\n    TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';\n})(TimeUnit || (TimeUnit = {}));\n/** Time Unit that only corresponds to only one part of Date objects. */\nvar LOCAL_SINGLE_TIMEUNIT_INDEX = {\n    year: 1,\n    quarter: 1,\n    month: 1,\n    day: 1,\n    date: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n    milliseconds: 1\n};\nexport var TIMEUNIT_PARTS = flagKeys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nvar UTC_SINGLE_TIMEUNIT_INDEX = {\n    utcyear: 1,\n    utcquarter: 1,\n    utcmonth: 1,\n    utcday: 1,\n    utcdate: 1,\n    utchours: 1,\n    utcminutes: 1,\n    utcseconds: 1,\n    utcmilliseconds: 1\n};\nexport function isUtcSingleTimeUnit(timeUnit) {\n    return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nvar LOCAL_MULTI_TIMEUNIT_INDEX = {\n    yearquarter: 1,\n    yearquartermonth: 1,\n    yearmonth: 1,\n    yearmonthdate: 1,\n    yearmonthdatehours: 1,\n    yearmonthdatehoursminutes: 1,\n    yearmonthdatehoursminutesseconds: 1,\n    quartermonth: 1,\n    monthdate: 1,\n    hoursminutes: 1,\n    hoursminutesseconds: 1,\n    minutesseconds: 1,\n    secondsmilliseconds: 1\n};\nvar UTC_MULTI_TIMEUNIT_INDEX = {\n    utcyearquarter: 1,\n    utcyearquartermonth: 1,\n    utcyearmonth: 1,\n    utcyearmonthdate: 1,\n    utcyearmonthdatehours: 1,\n    utcyearmonthdatehoursminutes: 1,\n    utcyearmonthdatehoursminutesseconds: 1,\n    utcquartermonth: 1,\n    utcmonthdate: 1,\n    utchoursminutes: 1,\n    utchoursminutesseconds: 1,\n    utcminutesseconds: 1,\n    utcsecondsmilliseconds: 1\n};\nvar UTC_TIMEUNIT_INDEX = tslib_1.__assign({}, UTC_SINGLE_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);\nexport function isUTCTimeUnit(t) {\n    return !!UTC_TIMEUNIT_INDEX[t];\n}\nexport function getLocalTimeUnit(t) {\n    return t.substr(3);\n}\nvar TIMEUNIT_INDEX = tslib_1.__assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX, UTC_SINGLE_TIMEUNIT_INDEX, LOCAL_MULTI_TIMEUNIT_INDEX, UTC_MULTI_TIMEUNIT_INDEX);\nexport var TIMEUNITS = flagKeys(TIMEUNIT_INDEX);\nexport function isTimeUnit(t) {\n    return !!TIMEUNIT_INDEX[t];\n}\nvar SET_DATE_METHOD = {\n    year: 'setFullYear',\n    month: 'setMonth',\n    date: 'setDate',\n    hours: 'setHours',\n    minutes: 'setMinutes',\n    seconds: 'setSeconds',\n    milliseconds: 'setMilliseconds',\n    // Day and quarter have their own special cases\n    quarter: null,\n    day: null,\n};\n/**\n * Converts a date to only have the measurements relevant to the specified unit\n * i.e. ('yearmonth', '2000-12-04 07:58:14') -> '2000-12-01 00:00:00'\n * Note: the base date is Jan 01 1900 00:00:00\n */\nexport function convert(unit, date) {\n    var isUTC = isUTCTimeUnit(unit);\n    var result = isUTC ?\n        // start with uniform date\n        new Date(Date.UTC(0, 0, 1, 0, 0, 0, 0)) :\n        new Date(0, 0, 1, 0, 0, 0, 0);\n    for (var _i = 0, TIMEUNIT_PARTS_1 = TIMEUNIT_PARTS; _i < TIMEUNIT_PARTS_1.length; _i++) {\n        var timeUnitPart = TIMEUNIT_PARTS_1[_i];\n        if (containsTimeUnit(unit, timeUnitPart)) {\n            switch (timeUnitPart) {\n                case TimeUnit.DAY:\n                    throw new Error('Cannot convert to TimeUnits containing \\'day\\'');\n                case TimeUnit.QUARTER: {\n                    var _a = dateMethods('month', isUTC), getDateMethod_1 = _a.getDateMethod, setDateMethod_1 = _a.setDateMethod;\n                    // indicate quarter by setting month to be the first of the quarter i.e. may (4) -> april (3)\n                    result[setDateMethod_1]((Math.floor(date[getDateMethod_1]() / 3)) * 3);\n                    break;\n                }\n                default:\n                    var _b = dateMethods(timeUnitPart, isUTC), getDateMethod = _b.getDateMethod, setDateMethod = _b.setDateMethod;\n                    result[setDateMethod](date[getDateMethod]());\n            }\n        }\n    }\n    return result;\n}\nfunction dateMethods(singleUnit, isUtc) {\n    var rawSetDateMethod = SET_DATE_METHOD[singleUnit];\n    var setDateMethod = isUtc ? 'setUTC' + rawSetDateMethod.substr(3) : rawSetDateMethod;\n    var getDateMethod = 'get' + (isUtc ? 'UTC' : '') + rawSetDateMethod.substr(3);\n    return { setDateMethod: setDateMethod, getDateMethod: getDateMethod };\n}\nexport function getTimeUnitParts(timeUnit) {\n    return TIMEUNIT_PARTS.reduce(function (parts, part) {\n        if (containsTimeUnit(timeUnit, part)) {\n            return parts.concat(part);\n        }\n        return parts;\n    }, []);\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n    var index = fullTimeUnit.indexOf(timeUnit);\n    return index > -1 &&\n        (timeUnit !== TimeUnit.SECONDS ||\n            index === 0 ||\n            fullTimeUnit.charAt(index - 1) !== 'i' // exclude milliseconds\n        );\n}\n/**\n * Returns Vega expresssion for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit, field) {\n    var fieldRef = accessPathWithDatum(field);\n    var utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n    function func(timeUnit) {\n        if (timeUnit === TimeUnit.QUARTER) {\n            // quarter starting at 0 (0,3,6,9).\n            return \"(\" + utc + \"quarter(\" + fieldRef + \")-1)\";\n        }\n        else {\n            return \"\" + utc + timeUnit + \"(\" + fieldRef + \")\";\n        }\n    }\n    var d = TIMEUNIT_PARTS.reduce(function (dateExpr, tu) {\n        if (containsTimeUnit(fullTimeUnit, tu)) {\n            dateExpr[tu] = func(tu);\n        }\n        return dateExpr;\n    }, {});\n    return dateTimeExpr(d);\n}\n/**\n * returns the signal expression used for axis labels for a time unit\n */\nexport function formatExpression(timeUnit, field, shortTimeLabels, isUTCScale) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    var dateComponents = [];\n    var expression = '';\n    var hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);\n    if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {\n        // special expression for quarter as prefix\n        expression = \"'Q' + quarter(\" + field + \")\";\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {\n        // By default use short month name\n        dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {\n        dateComponents.push(shortTimeLabels ? '%a' : '%A');\n    }\n    else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {\n        dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year\n    }\n    if (hasYear) {\n        dateComponents.push(shortTimeLabels ? '%y' : '%Y');\n    }\n    var timeComponents = [];\n    if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {\n        timeComponents.push('%H');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {\n        timeComponents.push('%M');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {\n        timeComponents.push('%S');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {\n        timeComponents.push('%L');\n    }\n    var dateTimeComponents = [];\n    if (dateComponents.length > 0) {\n        dateTimeComponents.push(dateComponents.join(' '));\n    }\n    if (timeComponents.length > 0) {\n        dateTimeComponents.push(timeComponents.join(':'));\n    }\n    if (dateTimeComponents.length > 0) {\n        if (expression) {\n            // Add space between quarter and main time format\n            expression += \" + ' ' + \";\n        }\n        // We only use utcFormat for utc scale\n        // For utc time units, the data is already converted as a part of timeUnit transform.\n        // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n        if (isUTCScale) {\n            expression += \"utcFormat(\" + field + \", '\" + dateTimeComponents.join(' ') + \"')\";\n        }\n        else {\n            expression += \"timeFormat(\" + field + \", '\" + dateTimeComponents.join(' ') + \"')\";\n        }\n    }\n    // If expression is still an empty string, return undefined instead.\n    return expression || undefined;\n}\nexport function normalizeTimeUnit(timeUnit) {\n    if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {\n        log.warn(log.message.dayReplacedWithDate(timeUnit));\n        return timeUnit.replace('day', 'date');\n    }\n    return timeUnit;\n}\n//# sourceMappingURL=data:application/json;base64,","/** Constants and utilities for data type */\n/** Data type based on level of measurement */\nexport var Type;\n(function (Type) {\n    Type.QUANTITATIVE = 'quantitative';\n    Type.ORDINAL = 'ordinal';\n    Type.TEMPORAL = 'temporal';\n    Type.NOMINAL = 'nominal';\n    Type.LATITUDE = 'latitude';\n    Type.LONGITUDE = 'longitude';\n    Type.GEOJSON = 'geojson';\n})(Type || (Type = {}));\nexport var TYPE_INDEX = {\n    quantitative: 1,\n    ordinal: 1,\n    temporal: 1,\n    nominal: 1,\n    latitude: 1,\n    longitude: 1,\n    geojson: 1\n};\nexport function isType(t) {\n    return !!TYPE_INDEX[t];\n}\nexport var QUANTITATIVE = Type.QUANTITATIVE;\nexport var ORDINAL = Type.ORDINAL;\nexport var TEMPORAL = Type.TEMPORAL;\nexport var NOMINAL = Type.NOMINAL;\nexport var GEOJSON = Type.GEOJSON;\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type) {\n    if (type) {\n        type = type.toLowerCase();\n        switch (type) {\n            case 'q':\n            case QUANTITATIVE:\n                return 'quantitative';\n            case 't':\n            case TEMPORAL:\n                return 'temporal';\n            case 'o':\n            case ORDINAL:\n                return 'ordinal';\n            case 'n':\n            case NOMINAL:\n                return 'nominal';\n            case Type.LATITUDE:\n                return 'latitude';\n            case Type.LONGITUDE:\n                return 'longitude';\n            case GEOJSON:\n                return 'geojson';\n        }\n    }\n    // If we get invalid input, return undefined type.\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLDRDQUE0QztBQUM1Qyw4Q0FBOEM7QUFFOUMsTUFBTSxLQUFXLElBQUksQ0FTcEI7QUFURCxXQUFpQixJQUFJO0lBQ04saUJBQVksR0FBbUIsY0FBYyxDQUFDO0lBQzlDLFlBQU8sR0FBYyxTQUFTLENBQUM7SUFDL0IsYUFBUSxHQUFlLFVBQVUsQ0FBQztJQUNsQyxZQUFPLEdBQWMsU0FBUyxDQUFDO0lBRS9CLGFBQVEsR0FBZSxVQUFVLENBQUM7SUFDbEMsY0FBUyxHQUFnQixXQUFXLENBQUM7SUFDckMsWUFBTyxHQUFjLFNBQVMsQ0FBQztBQUM5QyxDQUFDLEVBVGdCLElBQUksS0FBSixJQUFJLFFBU3BCO0FBTUQsTUFBTSxDQUFDLElBQU0sVUFBVSxHQUFlO0lBQ3BDLFlBQVksRUFBRSxDQUFDO0lBQ2YsT0FBTyxFQUFFLENBQUM7SUFDVixRQUFRLEVBQUUsQ0FBQztJQUNYLE9BQU8sRUFBRSxDQUFDO0lBQ1YsUUFBUSxFQUFFLENBQUM7SUFDWCxTQUFTLEVBQUUsQ0FBQztJQUNaLE9BQU8sRUFBRSxDQUFDO0NBQ1gsQ0FBQztBQUVGLE1BQU0saUJBQWlCLENBQU07SUFDM0IsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztBQUM5QyxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUNwQyxNQUFNLENBQUMsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUN0QyxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUVwQyxNQUFNLENBQUMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUVwQzs7OztHQUlHO0FBQ0gsTUFBTSxzQkFBc0IsSUFBaUI7SUFDM0MsSUFBSSxJQUFJLEVBQUU7UUFDUixJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzFCLFFBQVEsSUFBSSxFQUFFO1lBQ1osS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLFlBQVk7Z0JBQ2YsT0FBTyxjQUFjLENBQUM7WUFDeEIsS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLFFBQVE7Z0JBQ1gsT0FBTyxVQUFVLENBQUM7WUFDcEIsS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxTQUFTLENBQUM7WUFDbkIsS0FBSyxHQUFHLENBQUM7WUFDVCxLQUFLLE9BQU87Z0JBQ1YsT0FBTyxTQUFTLENBQUM7WUFDbkIsS0FBSyxJQUFJLENBQUMsUUFBUTtnQkFDaEIsT0FBTyxVQUFVLENBQUM7WUFDcEIsS0FBSyxJQUFJLENBQUMsU0FBUztnQkFDakIsT0FBTyxXQUFXLENBQUM7WUFDckIsS0FBSyxPQUFPO2dCQUNWLE9BQU8sU0FBUyxDQUFDO1NBQ3BCO0tBQ0Y7SUFDRCxrREFBa0Q7SUFDbEQsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RmxhZ30gZnJvbSAnLi91dGlsJztcbi8qKiBDb25zdGFudHMgYW5kIHV0aWxpdGllcyBmb3IgZGF0YSB0eXBlICovXG4vKiogRGF0YSB0eXBlIGJhc2VkIG9uIGxldmVsIG9mIG1lYXN1cmVtZW50ICovXG5cbmV4cG9ydCBuYW1lc3BhY2UgVHlwZSB7XG4gIGV4cG9ydCBjb25zdCBRVUFOVElUQVRJVkU6ICdxdWFudGl0YXRpdmUnID0gJ3F1YW50aXRhdGl2ZSc7XG4gIGV4cG9ydCBjb25zdCBPUkRJTkFMOiAnb3JkaW5hbCcgPSAnb3JkaW5hbCc7XG4gIGV4cG9ydCBjb25zdCBURU1QT1JBTDogJ3RlbXBvcmFsJyA9ICd0ZW1wb3JhbCc7XG4gIGV4cG9ydCBjb25zdCBOT01JTkFMOiAnbm9taW5hbCcgPSAnbm9taW5hbCc7XG5cbiAgZXhwb3J0IGNvbnN0IExBVElUVURFOiAnbGF0aXR1ZGUnID0gJ2xhdGl0dWRlJztcbiAgZXhwb3J0IGNvbnN0IExPTkdJVFVERTogJ2xvbmdpdHVkZScgPSAnbG9uZ2l0dWRlJztcbiAgZXhwb3J0IGNvbnN0IEdFT0pTT046ICdnZW9qc29uJyA9ICdnZW9qc29uJztcbn1cbmV4cG9ydCB0eXBlIEJhc2ljVHlwZSA9IHR5cGVvZiBUeXBlLlFVQU5USVRBVElWRSB8IHR5cGVvZiBUeXBlLk9SRElOQUwgfCB0eXBlb2YgVHlwZS5URU1QT1JBTCB8IHR5cGVvZiBUeXBlLk5PTUlOQUw7XG5leHBvcnQgdHlwZSBHZW9UeXBlID0gdHlwZW9mIFR5cGUuTEFUSVRVREUgfCB0eXBlb2YgVHlwZS5MT05HSVRVREUgfCB0eXBlb2YgVHlwZS5HRU9KU09OO1xuXG5leHBvcnQgdHlwZSBUeXBlID0gQmFzaWNUeXBlIHwgR2VvVHlwZTtcblxuZXhwb3J0IGNvbnN0IFRZUEVfSU5ERVg6IEZsYWc8VHlwZT4gPSB7XG4gIHF1YW50aXRhdGl2ZTogMSxcbiAgb3JkaW5hbDogMSxcbiAgdGVtcG9yYWw6IDEsXG4gIG5vbWluYWw6IDEsXG4gIGxhdGl0dWRlOiAxLFxuICBsb25naXR1ZGU6IDEsXG4gIGdlb2pzb246IDFcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGUodDogYW55KTogdCBpcyBUeXBlIHtcbiAgcmV0dXJuICEhVFlQRV9JTkRFWFt0XTtcbn1cblxuZXhwb3J0IGNvbnN0IFFVQU5USVRBVElWRSA9IFR5cGUuUVVBTlRJVEFUSVZFO1xuZXhwb3J0IGNvbnN0IE9SRElOQUwgPSBUeXBlLk9SRElOQUw7XG5leHBvcnQgY29uc3QgVEVNUE9SQUwgPSBUeXBlLlRFTVBPUkFMO1xuZXhwb3J0IGNvbnN0IE5PTUlOQUwgPSBUeXBlLk5PTUlOQUw7XG5cbmV4cG9ydCBjb25zdCBHRU9KU09OID0gVHlwZS5HRU9KU09OO1xuXG4vKipcbiAqIEdldCBmdWxsLCBsb3dlcmNhc2UgdHlwZSBuYW1lIGZvciBhIGdpdmVuIHR5cGUuXG4gKiBAcGFyYW0gIHR5cGVcbiAqIEByZXR1cm4gRnVsbCB0eXBlIG5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdWxsTmFtZSh0eXBlOiBUeXBlfHN0cmluZyk6IFR5cGUge1xuICBpZiAodHlwZSkge1xuICAgIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdxJzpcbiAgICAgIGNhc2UgUVVBTlRJVEFUSVZFOlxuICAgICAgICByZXR1cm4gJ3F1YW50aXRhdGl2ZSc7XG4gICAgICBjYXNlICd0JzpcbiAgICAgIGNhc2UgVEVNUE9SQUw6XG4gICAgICAgIHJldHVybiAndGVtcG9yYWwnO1xuICAgICAgY2FzZSAnbyc6XG4gICAgICBjYXNlIE9SRElOQUw6XG4gICAgICAgIHJldHVybiAnb3JkaW5hbCc7XG4gICAgICBjYXNlICduJzpcbiAgICAgIGNhc2UgTk9NSU5BTDpcbiAgICAgICAgcmV0dXJuICdub21pbmFsJztcbiAgICAgIGNhc2UgVHlwZS5MQVRJVFVERTpcbiAgICAgICAgcmV0dXJuICdsYXRpdHVkZSc7XG4gICAgICBjYXNlIFR5cGUuTE9OR0lUVURFOlxuICAgICAgICByZXR1cm4gJ2xvbmdpdHVkZSc7XG4gICAgICBjYXNlIEdFT0pTT046XG4gICAgICAgIHJldHVybiAnZ2VvanNvbic7XG4gICAgfVxuICB9XG4gIC8vIElmIHdlIGdldCBpbnZhbGlkIGlucHV0LCByZXR1cm4gdW5kZWZpbmVkIHR5cGUuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isArray, isBoolean, isNumber, isString } from 'vega-util';\nimport { isAggregateOp, isCountingAggregateOp } from './aggregate';\nimport { autoMaxBins, binToString } from './bin';\nimport { rangeType } from './channel';\nimport * as log from './log';\nimport { getTimeUnitParts, normalizeTimeUnit } from './timeunit';\nimport { getFullName, QUANTITATIVE } from './type';\nimport { flatAccessWithDatum, replacePathInField, titlecase } from './util';\nexport function isConditionalSelection(c) {\n    return c['selection'];\n}\nexport function isRepeatRef(field) {\n    return field && !isString(field) && 'repeat' in field;\n}\nexport function toFieldDefBase(fieldDef) {\n    var field = fieldDef.field, timeUnit = fieldDef.timeUnit, bin = fieldDef.bin, aggregate = fieldDef.aggregate;\n    return tslib_1.__assign({}, (timeUnit ? { timeUnit: timeUnit } : {}), (bin ? { bin: bin } : {}), (aggregate ? { aggregate: aggregate } : {}), { field: field });\n}\nexport function isConditionalDef(channelDef) {\n    return !!channelDef && !!channelDef.condition;\n}\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nexport function hasConditionalFieldDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\nexport function hasConditionalValueDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && (isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\nexport function isFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\nexport function isStringFieldDef(fieldDef) {\n    return isFieldDef(fieldDef) && isString(fieldDef.field);\n}\nexport function isValueDef(channelDef) {\n    return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\nexport function isScaleFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\nfunction isOpFieldDef(fieldDef) {\n    return !!fieldDef['op'];\n}\nexport function vgField(fieldDef, opt) {\n    if (opt === void 0) { opt = {}; }\n    var field = fieldDef.field;\n    var prefix = opt.prefix;\n    var suffix = opt.suffix;\n    if (isCount(fieldDef)) {\n        field = 'count_*';\n    }\n    else {\n        var fn = undefined;\n        if (!opt.nofn) {\n            if (isOpFieldDef(fieldDef)) {\n                fn = fieldDef.op;\n            }\n            else if (fieldDef.bin) {\n                fn = binToString(fieldDef.bin);\n                suffix = opt.binSuffix || '';\n            }\n            else if (fieldDef.aggregate) {\n                fn = String(fieldDef.aggregate);\n            }\n            else if (fieldDef.timeUnit) {\n                fn = String(fieldDef.timeUnit);\n            }\n        }\n        if (fn) {\n            field = field ? fn + \"_\" + field : fn;\n        }\n    }\n    if (suffix) {\n        field = field + \"_\" + suffix;\n    }\n    if (prefix) {\n        field = prefix + \"_\" + field;\n    }\n    if (opt.expr) {\n        // Expression to access flattened field. No need to escape dots.\n        return flatAccessWithDatum(field, opt.expr);\n    }\n    else {\n        // We flattened all fields so paths should have become dot.\n        return replacePathInField(field);\n    }\n}\nexport function isDiscrete(fieldDef) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n        case 'geojson':\n            return true;\n        case 'quantitative':\n            return !!fieldDef.bin;\n        case 'latitude':\n        case 'longitude':\n        case 'temporal':\n            return false;\n    }\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\nexport function isContinuous(fieldDef) {\n    return !isDiscrete(fieldDef);\n}\nexport function isCount(fieldDef) {\n    return fieldDef.aggregate === 'count';\n}\nexport function verbalTitleFormatter(fieldDef, config) {\n    var field = fieldDef.field, bin = fieldDef.bin, timeUnit = fieldDef.timeUnit, aggregate = fieldDef.aggregate;\n    if (aggregate === 'count') {\n        return config.countTitle;\n    }\n    else if (bin) {\n        return field + \" (binned)\";\n    }\n    else if (timeUnit) {\n        var units = getTimeUnitParts(timeUnit).join('-');\n        return field + \" (\" + units + \")\";\n    }\n    else if (aggregate) {\n        return titlecase(aggregate) + \" of \" + field;\n    }\n    return field;\n}\nexport function functionalTitleFormatter(fieldDef, config) {\n    var fn = fieldDef.aggregate || fieldDef.timeUnit || (fieldDef.bin && 'bin');\n    if (fn) {\n        return fn.toUpperCase() + '(' + fieldDef.field + ')';\n    }\n    else {\n        return fieldDef.field;\n    }\n}\nexport var defaultTitleFormatter = function (fieldDef, config) {\n    switch (config.fieldTitle) {\n        case 'plain':\n            return fieldDef.field;\n        case 'functional':\n            return functionalTitleFormatter(fieldDef, config);\n        default:\n            return verbalTitleFormatter(fieldDef, config);\n    }\n};\nvar titleFormatter = defaultTitleFormatter;\nexport function setTitleFormatter(formatter) {\n    titleFormatter = formatter;\n}\nexport function resetTitleFormatter() {\n    setTitleFormatter(defaultTitleFormatter);\n}\nexport function title(fieldDef, config) {\n    return titleFormatter(fieldDef, config);\n}\nexport function defaultType(fieldDef, channel) {\n    if (fieldDef.timeUnit) {\n        return 'temporal';\n    }\n    if (fieldDef.bin) {\n        return 'quantitative';\n    }\n    switch (rangeType(channel)) {\n        case 'continuous':\n            return 'quantitative';\n        case 'discrete':\n            return 'nominal';\n        case 'flexible': // color\n            return 'nominal';\n        default:\n            return 'quantitative';\n    }\n}\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\nexport function getFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n        return channelDef;\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return channelDef.condition;\n    }\n    return undefined;\n}\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function normalize(channelDef, channel) {\n    if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n        var primitiveType = isString(channelDef) ? 'string' :\n            isNumber(channelDef) ? 'number' : 'boolean';\n        log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n        return { value: channelDef };\n    }\n    // If a fieldDef contains a field, we need type.\n    if (isFieldDef(channelDef)) {\n        return normalizeFieldDef(channelDef, channel);\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return tslib_1.__assign({}, channelDef, { \n            // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n            condition: normalizeFieldDef(channelDef.condition, channel) });\n    }\n    return channelDef;\n}\nexport function normalizeFieldDef(fieldDef, channel) {\n    // Drop invalid aggregate\n    if (fieldDef.aggregate && !isAggregateOp(fieldDef.aggregate)) {\n        var aggregate = fieldDef.aggregate, fieldDefWithoutAggregate = tslib_1.__rest(fieldDef, [\"aggregate\"]);\n        log.warn(log.message.invalidAggregate(fieldDef.aggregate));\n        fieldDef = fieldDefWithoutAggregate;\n    }\n    // Normalize Time Unit\n    if (fieldDef.timeUnit) {\n        fieldDef = tslib_1.__assign({}, fieldDef, { timeUnit: normalizeTimeUnit(fieldDef.timeUnit) });\n    }\n    // Normalize bin\n    if (fieldDef.bin) {\n        fieldDef = tslib_1.__assign({}, fieldDef, { bin: normalizeBin(fieldDef.bin, channel) });\n    }\n    // Normalize Type\n    if (fieldDef.type) {\n        var fullType = getFullName(fieldDef.type);\n        if (fieldDef.type !== fullType) {\n            // convert short type to full type\n            fieldDef = tslib_1.__assign({}, fieldDef, { type: fullType });\n        }\n        if (fieldDef.type !== 'quantitative') {\n            if (isCountingAggregateOp(fieldDef.aggregate)) {\n                log.warn(log.message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));\n                fieldDef = tslib_1.__assign({}, fieldDef, { type: 'quantitative' });\n            }\n        }\n    }\n    else {\n        // If type is empty / invalid, then augment with default type\n        var newType = defaultType(fieldDef, channel);\n        log.warn(log.message.emptyOrInvalidFieldType(fieldDef.type, channel, newType));\n        fieldDef = tslib_1.__assign({}, fieldDef, { type: newType });\n    }\n    var _a = channelCompatibility(fieldDef, channel), compatible = _a.compatible, warning = _a.warning;\n    if (!compatible) {\n        log.warn(warning);\n    }\n    return fieldDef;\n}\nexport function normalizeBin(bin, channel) {\n    if (isBoolean(bin)) {\n        return { maxbins: autoMaxBins(channel) };\n    }\n    else if (!bin.maxbins && !bin.step) {\n        return tslib_1.__assign({}, bin, { maxbins: autoMaxBins(channel) });\n    }\n    else {\n        return bin;\n    }\n}\nvar COMPATIBLE = { compatible: true };\nexport function channelCompatibility(fieldDef, channel) {\n    var type = fieldDef.type;\n    switch (channel) {\n        case 'row':\n        case 'column':\n            if (isContinuous(fieldDef)) {\n                return {\n                    compatible: false,\n                    warning: log.message.facetChannelShouldBeDiscrete(channel)\n                };\n            }\n            return COMPATIBLE;\n        case 'x':\n        case 'y':\n        case 'color':\n        case 'fill':\n        case 'stroke':\n        case 'text':\n        case 'detail':\n        case 'key':\n        case 'tooltip':\n        case 'href':\n            return COMPATIBLE;\n        case 'longitude':\n        case 'longitude2':\n        case 'latitude':\n        case 'latitude2':\n            if (type !== QUANTITATIVE) {\n                return {\n                    compatible: false,\n                    warning: \"Channel \" + channel + \" should be used with a quantitative field only, not \" + fieldDef.type + \" field.\"\n                };\n            }\n            return COMPATIBLE;\n        case 'opacity':\n        case 'size':\n        case 'x2':\n        case 'y2':\n            if ((type === 'nominal' && !fieldDef['sort']) || type === 'geojson') {\n                return {\n                    compatible: false,\n                    warning: \"Channel \" + channel + \" should not be used with an unsorted discrete field.\"\n                };\n            }\n            return COMPATIBLE;\n        case 'shape':\n            if (fieldDef.type !== 'nominal' && fieldDef.type !== 'geojson') {\n                return {\n                    compatible: false,\n                    warning: 'Shape channel should be used with only either nominal or geojson data'\n                };\n            }\n            return COMPATIBLE;\n        case 'order':\n            if (fieldDef.type === 'nominal') {\n                return {\n                    compatible: false,\n                    warning: \"Channel order is inappropriate for nominal field, which has no inherent order.\"\n                };\n            }\n            return COMPATIBLE;\n    }\n    throw new Error('channelCompatability not implemented for channel ' + channel);\n}\nexport function isNumberFieldDef(fieldDef) {\n    return fieldDef.type === 'quantitative' || !!fieldDef.bin;\n}\nexport function isTimeFieldDef(fieldDef) {\n    return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { CHANNELS, isChannel, supportMark } from './channel';\nimport { getFieldDef, hasConditionalFieldDef, isConditionalDef, isFieldDef, isValueDef, normalize, normalizeFieldDef } from './fielddef';\nimport * as log from './log';\nimport { Type } from './type';\nimport { contains, keys, some } from './util';\nexport function channelHasField(encoding, channel) {\n    var channelDef = encoding && encoding[channel];\n    if (channelDef) {\n        if (isArray(channelDef)) {\n            return some(channelDef, function (fieldDef) { return !!fieldDef.field; });\n        }\n        else {\n            return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);\n        }\n    }\n    return false;\n}\nexport function isAggregate(encoding) {\n    return some(CHANNELS, function (channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            if (isArray(channelDef)) {\n                return some(channelDef, function (fieldDef) { return !!fieldDef.aggregate; });\n            }\n            else {\n                var fieldDef = getFieldDef(channelDef);\n                return fieldDef && !!fieldDef.aggregate;\n            }\n        }\n        return false;\n    });\n}\nexport function normalizeEncoding(encoding, mark) {\n    return keys(encoding).reduce(function (normalizedEncoding, channel) {\n        var _a;\n        if (!isChannel(channel)) {\n            // Drop invalid channel\n            log.warn(log.message.invalidEncodingChannel(channel));\n            return normalizedEncoding;\n        }\n        if (!supportMark(channel, mark)) {\n            // Drop unsupported channel\n            log.warn(log.message.incompatibleChannel(channel, mark));\n            return normalizedEncoding;\n        }\n        // Drop line's size if the field is aggregated.\n        if (channel === 'size' && mark === 'line') {\n            var fieldDef = getFieldDef(encoding[channel]);\n            if (fieldDef && fieldDef.aggregate) {\n                log.warn(log.message.LINE_WITH_VARYING_SIZE);\n                return normalizedEncoding;\n            }\n        }\n        // Drop color if either fill or stroke is specified\n        if (channel === 'color' && ('fill' in encoding || 'stroke' in encoding)) {\n            log.warn(log.message.droppingColor('encoding', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n            return normalizedEncoding;\n        }\n        var channelDef = encoding[channel];\n        if (channel === 'detail' ||\n            (channel === 'order' && !isArray(channelDef) && !isValueDef(channelDef)) ||\n            (channel === 'tooltip' && isArray(channelDef))) {\n            if (channelDef) {\n                // Array of fieldDefs for detail channel (or production rule)\n                normalizedEncoding[channel] = (isArray(channelDef) ? channelDef : [channelDef])\n                    .reduce(function (defs, fieldDef) {\n                    if (!isFieldDef(fieldDef)) {\n                        log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                    }\n                    else {\n                        defs.push(normalizeFieldDef(fieldDef, channel));\n                    }\n                    return defs;\n                }, []);\n            }\n        }\n        else {\n            var fieldDef = getFieldDef(encoding[channel]);\n            if (fieldDef && contains([Type.LATITUDE, Type.LONGITUDE], fieldDef.type)) {\n                var _b = channel, _ = normalizedEncoding[_b], newEncoding = tslib_1.__rest(normalizedEncoding, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n                var newChannel = channel === 'x' ? 'longitude' :\n                    channel === 'y' ? 'latitude' :\n                        channel === 'x2' ? 'longitude2' :\n                            channel === 'y2' ? 'latitude2' : undefined;\n                log.warn(log.message.latLongDeprecated(channel, fieldDef.type, newChannel));\n                return tslib_1.__assign({}, newEncoding, (_a = {}, _a[newChannel] = tslib_1.__assign({}, normalize(fieldDef, channel), { type: 'quantitative' }), _a));\n            }\n            if (!isFieldDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef)) {\n                log.warn(log.message.emptyFieldDef(channelDef, channel));\n                return normalizedEncoding;\n            }\n            normalizedEncoding[channel] = normalize(channelDef, channel);\n        }\n        return normalizedEncoding;\n    }, {});\n}\nexport function isRanged(encoding) {\n    return encoding && ((!!encoding.x && !!encoding.x2) || (!!encoding.y && !!encoding.y2));\n}\nexport function fieldDefs(encoding) {\n    var arr = [];\n    CHANNELS.forEach(function (channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            (isArray(channelDef) ? channelDef : [channelDef]).forEach(function (def) {\n                if (isFieldDef(def)) {\n                    arr.push(def);\n                }\n                else if (hasConditionalFieldDef(def)) {\n                    arr.push(def.condition);\n                }\n            });\n        }\n    });\n    return arr;\n}\nexport function forEach(mapping, f, thisArg) {\n    if (!mapping) {\n        return;\n    }\n    var _loop_1 = function (channel) {\n        if (isArray(mapping[channel])) {\n            mapping[channel].forEach(function (channelDef) {\n                f.call(thisArg, channelDef, channel);\n            });\n        }\n        else {\n            f.call(thisArg, mapping[channel], channel);\n        }\n    };\n    for (var _i = 0, _a = keys(mapping); _i < _a.length; _i++) {\n        var channel = _a[_i];\n        _loop_1(channel);\n    }\n}\nexport function reduce(mapping, f, init, thisArg) {\n    if (!mapping) {\n        return init;\n    }\n    return keys(mapping).reduce(function (r, channel) {\n        var map = mapping[channel];\n        if (isArray(map)) {\n            return map.reduce(function (r1, channelDef) {\n                return f.call(thisArg, r1, channelDef, channel);\n            }, r);\n        }\n        else {\n            return f.call(thisArg, r, map, channel);\n        }\n    }, init);\n}\n//# sourceMappingURL=data:application/json;base64,","export function getMarkSpecificConfigMixins(markSpecificConfig, channel) {\n    var _a;\n    var value = markSpecificConfig[channel];\n    return value !== undefined ? (_a = {}, _a[channel] = { value: value }, _a) : {};\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvc2l0ZW1hcmsvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sc0NBQXNDLGtCQUE4QixFQUFFLE9BQTJCOztJQUNyRyxJQUFNLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxQyxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxXQUFFLEdBQUMsT0FBTyxJQUFHLEVBQUMsS0FBSyxPQUFBLEVBQUMsTUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05vblBvc2l0aW9uQ2hhbm5lbH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5pbXBvcnQge01hcmtDb25maWd9IGZyb20gJy4uL21hcmsnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFya1NwZWNpZmljQ29uZmlnTWl4aW5zKG1hcmtTcGVjaWZpY0NvbmZpZzogTWFya0NvbmZpZywgY2hhbm5lbDogTm9uUG9zaXRpb25DaGFubmVsKSB7XG4gIGNvbnN0IHZhbHVlID0gbWFya1NwZWNpZmljQ29uZmlnW2NoYW5uZWxdO1xuICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHtbY2hhbm5lbF06IHt2YWx1ZX19IDoge307XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isNumber } from 'vega-util';\nimport { reduce } from '../encoding';\nimport { forEach } from './../encoding';\nimport { isContinuous, isFieldDef, vgField } from './../fielddef';\nimport * as log from './../log';\nimport { getMarkSpecificConfigMixins } from './common';\nexport var BOXPLOT = 'box-plot';\nexport function isBoxPlotDef(mark) {\n    return !!mark['type'];\n}\nexport var BOXPLOT_STYLES = ['boxWhisker', 'box', 'boxMid'];\nexport var VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX = {\n    box: ['size', 'color', 'extent'],\n    boxWhisker: ['color'],\n    boxMid: ['color']\n};\nvar supportedChannels = ['x', 'y', 'color', 'detail', 'opacity', 'size'];\nexport function filterUnsupportedChannels(spec) {\n    return tslib_1.__assign({}, spec, { encoding: reduce(spec.encoding, function (newEncoding, fieldDef, channel) {\n            if (supportedChannels.indexOf(channel) > -1) {\n                newEncoding[channel] = fieldDef;\n            }\n            else {\n                log.warn(log.message.incompatibleChannel(channel, BOXPLOT));\n            }\n            return newEncoding;\n        }, {}) });\n}\nexport function normalizeBoxPlot(spec, config) {\n    var _a, _b, _c, _d;\n    spec = filterUnsupportedChannels(spec);\n    // TODO: use selection\n    var mark = spec.mark, encoding = spec.encoding, selection = spec.selection, _p = spec.projection, outerSpec = tslib_1.__rest(spec, [\"mark\", \"encoding\", \"selection\", \"projection\"]);\n    var kIQRScalar = undefined;\n    if (isNumber(config.box.extent)) {\n        kIQRScalar = config.box.extent;\n    }\n    if (isBoxPlotDef(mark)) {\n        if (mark.extent) {\n            if (mark.extent === 'min-max') {\n                kIQRScalar = undefined;\n            }\n        }\n    }\n    var orient = boxOrient(spec);\n    var _e = boxParams(spec, orient, kIQRScalar), transform = _e.transform, continuousAxisChannelDef = _e.continuousAxisChannelDef, continuousAxis = _e.continuousAxis, encodingWithoutContinuousAxis = _e.encodingWithoutContinuousAxis;\n    var color = encodingWithoutContinuousAxis.color, size = encodingWithoutContinuousAxis.size, encodingWithoutSizeColorAndContinuousAxis = tslib_1.__rest(encodingWithoutContinuousAxis, [\"color\", \"size\"]);\n    // Size encoding or the default config.box.size is applied to box and boxMid\n    var sizeMixins = size ? { size: size } : getMarkSpecificConfigMixins(config.box, 'size');\n    var continuousAxisScaleAndAxis = {};\n    if (continuousAxisChannelDef.scale) {\n        continuousAxisScaleAndAxis['scale'] = continuousAxisChannelDef.scale;\n    }\n    if (continuousAxisChannelDef.axis) {\n        continuousAxisScaleAndAxis['axis'] = continuousAxisChannelDef.axis;\n    }\n    return tslib_1.__assign({}, outerSpec, { transform: transform, layer: [\n            {\n                mark: {\n                    type: 'rule',\n                    style: 'boxWhisker'\n                },\n                encoding: tslib_1.__assign((_a = {}, _a[continuousAxis] = tslib_1.__assign({ field: 'lower_whisker_' + continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, continuousAxisScaleAndAxis), _a[continuousAxis + '2'] = {\n                    field: 'lower_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _a), encodingWithoutSizeColorAndContinuousAxis, getMarkSpecificConfigMixins(config.boxWhisker, 'color'))\n            }, {\n                mark: {\n                    type: 'rule',\n                    style: 'boxWhisker'\n                },\n                encoding: tslib_1.__assign((_b = {}, _b[continuousAxis] = {\n                    field: 'upper_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _b[continuousAxis + '2'] = {\n                    field: 'upper_whisker_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _b), encodingWithoutSizeColorAndContinuousAxis, getMarkSpecificConfigMixins(config.boxWhisker, 'color'))\n            },\n            tslib_1.__assign({}, (selection ? { selection: selection } : {}), { mark: {\n                    type: 'bar',\n                    style: 'box'\n                }, encoding: tslib_1.__assign((_c = {}, _c[continuousAxis] = {\n                    field: 'lower_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _c[continuousAxis + '2'] = {\n                    field: 'upper_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _c), encodingWithoutContinuousAxis, (encodingWithoutContinuousAxis.color ? {} : getMarkSpecificConfigMixins(config.box, 'color')), sizeMixins) }),\n            {\n                mark: {\n                    type: 'tick',\n                    style: 'boxMid'\n                },\n                encoding: tslib_1.__assign((_d = {}, _d[continuousAxis] = {\n                    field: 'mid_box_' + continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                }, _d), encodingWithoutSizeColorAndContinuousAxis, getMarkSpecificConfigMixins(config.boxMid, 'color'), sizeMixins)\n            }\n        ] });\n}\nfunction boxOrient(spec) {\n    var mark = spec.mark, encoding = spec.encoding, _p = spec.projection, _outerSpec = tslib_1.__rest(spec, [\"mark\", \"encoding\", \"projection\"]);\n    if (isFieldDef(encoding.x) && isContinuous(encoding.x)) {\n        // x is continuous\n        if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n            // both x and y are continuous\n            if (encoding.x.aggregate === undefined && encoding.y.aggregate === BOXPLOT) {\n                return 'vertical';\n            }\n            else if (encoding.y.aggregate === undefined && encoding.x.aggregate === BOXPLOT) {\n                return 'horizontal';\n            }\n            else if (encoding.x.aggregate === BOXPLOT && encoding.y.aggregate === BOXPLOT) {\n                throw new Error('Both x and y cannot have aggregate');\n            }\n            else {\n                if (isBoxPlotDef(mark) && mark.orient) {\n                    return mark.orient;\n                }\n                // default orientation = vertical\n                return 'vertical';\n            }\n        }\n        // x is continuous but y is not\n        return 'horizontal';\n    }\n    else if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n        // y is continuous but x is not\n        return 'vertical';\n    }\n    else {\n        // Neither x nor y is continuous.\n        throw new Error('Need a valid continuous axis for boxplots');\n    }\n}\nfunction boxContinousAxis(spec, orient) {\n    var mark = spec.mark, encoding = spec.encoding, _p = spec.projection, _outerSpec = tslib_1.__rest(spec, [\"mark\", \"encoding\", \"projection\"]);\n    var continuousAxisChannelDef;\n    var continuousAxis;\n    if (orient === 'vertical') {\n        continuousAxis = 'y';\n        continuousAxisChannelDef = encoding.y; // Safe to cast because if y is not continuous fielddef, the orient would not be vertical.\n    }\n    else {\n        continuousAxis = 'x';\n        continuousAxisChannelDef = encoding.x; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.\n    }\n    if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {\n        var aggregate = continuousAxisChannelDef.aggregate, continuousAxisWithoutAggregate = tslib_1.__rest(continuousAxisChannelDef, [\"aggregate\"]);\n        if (aggregate !== BOXPLOT) {\n            log.warn(\"Continuous axis should not have customized aggregation function \" + aggregate);\n        }\n        continuousAxisChannelDef = continuousAxisWithoutAggregate;\n    }\n    return {\n        continuousAxisChannelDef: continuousAxisChannelDef,\n        continuousAxis: continuousAxis\n    };\n}\nfunction boxParams(spec, orient, kIQRScalar) {\n    var _a = boxContinousAxis(spec, orient), continuousAxisChannelDef = _a.continuousAxisChannelDef, continuousAxis = _a.continuousAxis;\n    var encoding = spec.encoding;\n    var isMinMax = kIQRScalar === undefined;\n    var aggregate = [\n        {\n            op: 'q1',\n            field: continuousAxisChannelDef.field,\n            as: 'lower_box_' + continuousAxisChannelDef.field\n        },\n        {\n            op: 'q3',\n            field: continuousAxisChannelDef.field,\n            as: 'upper_box_' + continuousAxisChannelDef.field\n        },\n        {\n            op: 'median',\n            field: continuousAxisChannelDef.field,\n            as: 'mid_box_' + continuousAxisChannelDef.field\n        }\n    ];\n    var postAggregateCalculates = [];\n    aggregate.push({\n        op: 'min',\n        field: continuousAxisChannelDef.field,\n        as: (isMinMax ? 'lower_whisker_' : 'min_') + continuousAxisChannelDef.field\n    });\n    aggregate.push({\n        op: 'max',\n        field: continuousAxisChannelDef.field,\n        as: (isMinMax ? 'upper_whisker_' : 'max_') + continuousAxisChannelDef.field\n    });\n    if (!isMinMax) {\n        postAggregateCalculates = [\n            {\n                calculate: \"datum.upper_box_\" + continuousAxisChannelDef.field + \" - datum.lower_box_\" + continuousAxisChannelDef.field,\n                as: 'iqr_' + continuousAxisChannelDef.field\n            },\n            {\n                calculate: \"min(datum.upper_box_\" + continuousAxisChannelDef.field + \" + datum.iqr_\" + continuousAxisChannelDef.field + \" * \" + kIQRScalar + \", datum.max_\" + continuousAxisChannelDef.field + \")\",\n                as: 'upper_whisker_' + continuousAxisChannelDef.field\n            },\n            {\n                calculate: \"max(datum.lower_box_\" + continuousAxisChannelDef.field + \" - datum.iqr_\" + continuousAxisChannelDef.field + \" * \" + kIQRScalar + \", datum.min_\" + continuousAxisChannelDef.field + \")\",\n                as: 'lower_whisker_' + continuousAxisChannelDef.field\n            }\n        ];\n    }\n    var groupby = [];\n    var bins = [];\n    var timeUnits = [];\n    var encodingWithoutContinuousAxis = {};\n    forEach(encoding, function (channelDef, channel) {\n        if (channel === continuousAxis) {\n            // Skip continuous axis as we already handle it separately\n            return;\n        }\n        if (isFieldDef(channelDef)) {\n            if (channelDef.aggregate && channelDef.aggregate !== BOXPLOT) {\n                aggregate.push({\n                    op: channelDef.aggregate,\n                    field: channelDef.field,\n                    as: vgField(channelDef)\n                });\n            }\n            else if (channelDef.aggregate === undefined) {\n                var transformedField = vgField(channelDef);\n                // Add bin or timeUnit transform if applicable\n                var bin = channelDef.bin;\n                if (bin) {\n                    var field = channelDef.field;\n                    bins.push({ bin: bin, field: field, as: transformedField });\n                }\n                else if (channelDef.timeUnit) {\n                    var timeUnit = channelDef.timeUnit, field = channelDef.field;\n                    timeUnits.push({ timeUnit: timeUnit, field: field, as: transformedField });\n                }\n                groupby.push(transformedField);\n            }\n            // now the field should refer to post-transformed field instead\n            encodingWithoutContinuousAxis[channel] = {\n                field: vgField(channelDef),\n                type: channelDef.type\n            };\n        }\n        else {\n            // For value def, just copy\n            encodingWithoutContinuousAxis[channel] = encoding[channel];\n        }\n    });\n    return {\n        transform: [].concat(bins, timeUnits, [{ aggregate: aggregate, groupby: groupby }], postAggregateCalculates),\n        continuousAxisChannelDef: continuousAxisChannelDef,\n        continuousAxis: continuousAxis,\n        encodingWithoutContinuousAxis: encodingWithoutContinuousAxis\n    };\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nexport var ERRORBAR = 'error-bar';\nexport function normalizeErrorBar(spec) {\n    // TODO: use selection\n    var _m = spec.mark, _sel = spec.selection, _p = spec.projection, encoding = spec.encoding, outerSpec = tslib_1.__rest(spec, [\"mark\", \"selection\", \"projection\", \"encoding\"]);\n    var _s = encoding.size, encodingWithoutSize = tslib_1.__rest(encoding, [\"size\"]);\n    var _x2 = encoding.x2, _y2 = encoding.y2, encodingWithoutX2Y2 = tslib_1.__rest(encoding, [\"x2\", \"y2\"]);\n    var _x = encodingWithoutX2Y2.x, _y = encodingWithoutX2Y2.y, encodingWithoutX_X2_Y_Y2 = tslib_1.__rest(encodingWithoutX2Y2, [\"x\", \"y\"]);\n    if (!encoding.x2 && !encoding.y2) {\n        throw new Error('Neither x2 or y2 provided');\n    }\n    return tslib_1.__assign({}, outerSpec, { layer: [\n            {\n                mark: 'rule',\n                encoding: encodingWithoutSize\n            }, {\n                mark: 'tick',\n                encoding: encodingWithoutX2Y2\n            }, {\n                mark: 'tick',\n                encoding: encoding.x2 ? tslib_1.__assign({ x: encoding.x2, y: encoding.y }, encodingWithoutX_X2_Y_Y2) : tslib_1.__assign({ x: encoding.x, y: encoding.y2 }, encodingWithoutX_X2_Y_Y2)\n            }\n        ] });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3JiYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zaXRlbWFyay9lcnJvcmJhci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBS0EsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFnQixXQUFXLENBQUM7QUFHakQsTUFBTSw0QkFBNEIsSUFBZ0Q7SUFDaEYsc0JBQXNCO0lBQ2YsSUFBQSxjQUFRLEVBQUUscUJBQWUsRUFBRSxvQkFBYyxFQUFFLHdCQUFRLEVBQUUsaUZBQVksQ0FBUztJQUMxRSxJQUFBLGtCQUFRLEVBQUUsd0RBQXNCLENBQWE7SUFDN0MsSUFBQSxpQkFBTyxFQUFFLGlCQUFPLEVBQUUsNERBQXNCLENBQWE7SUFDckQsSUFBQSwwQkFBSyxFQUFFLDBCQUFLLEVBQUUsMEVBQTJCLENBQXdCO0lBRXhFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRTtRQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUM7S0FDOUM7SUFFRCw0QkFDSyxTQUFTLElBQ1osS0FBSyxFQUFFO1lBQ0w7Z0JBQ0UsSUFBSSxFQUFFLE1BQU07Z0JBQ1osUUFBUSxFQUFFLG1CQUFtQjthQUM5QixFQUFDO2dCQUNBLElBQUksRUFBRSxNQUFNO2dCQUNaLFFBQVEsRUFBRSxtQkFBbUI7YUFDOUIsRUFBRTtnQkFDRCxJQUFJLEVBQUUsTUFBTTtnQkFDWixRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLG9CQUNyQixDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFDZCxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFDVix3QkFBd0IsRUFDM0IsQ0FBQyxvQkFDRCxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsRUFDYixDQUFDLEVBQUUsUUFBUSxDQUFDLEVBQUUsSUFDWCx3QkFBd0IsQ0FDNUI7YUFDRjtTQUNGLElBQ0Q7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGaWVsZH0gZnJvbSAnLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtFbmNvZGluZ30gZnJvbSAnLi8uLi9lbmNvZGluZyc7XG5pbXBvcnQge0dlbmVyaWNVbml0U3BlYywgTm9ybWFsaXplZExheWVyU3BlY30gZnJvbSAnLi8uLi9zcGVjJztcblxuXG5leHBvcnQgY29uc3QgRVJST1JCQVI6ICdlcnJvci1iYXInID0gJ2Vycm9yLWJhcic7XG5leHBvcnQgdHlwZSBFUlJPUkJBUiA9IHR5cGVvZiBFUlJPUkJBUjtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUVycm9yQmFyKHNwZWM6IEdlbmVyaWNVbml0U3BlYzxFbmNvZGluZzxGaWVsZD4sIEVSUk9SQkFSPik6IE5vcm1hbGl6ZWRMYXllclNwZWMge1xuICAvLyBUT0RPOiB1c2Ugc2VsZWN0aW9uXG4gIGNvbnN0IHttYXJrOiBfbSwgc2VsZWN0aW9uOiBfc2VsLCBwcm9qZWN0aW9uOiBfcCwgZW5jb2RpbmcsIC4uLm91dGVyU3BlY30gPSBzcGVjO1xuICBjb25zdCB7c2l6ZTogX3MsIC4uLmVuY29kaW5nV2l0aG91dFNpemV9ID0gZW5jb2Rpbmc7XG4gIGNvbnN0IHt4MjogX3gyLCB5MjogX3kyLCAuLi5lbmNvZGluZ1dpdGhvdXRYMlkyfSA9IGVuY29kaW5nO1xuICBjb25zdCB7eDogX3gsIHk6IF95LCAuLi5lbmNvZGluZ1dpdGhvdXRYX1gyX1lfWTJ9ID0gZW5jb2RpbmdXaXRob3V0WDJZMjtcblxuICBpZiAoIWVuY29kaW5nLngyICYmICFlbmNvZGluZy55Mikge1xuICAgIHRocm93IG5ldyBFcnJvcignTmVpdGhlciB4MiBvciB5MiBwcm92aWRlZCcpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5vdXRlclNwZWMsXG4gICAgbGF5ZXI6IFtcbiAgICAgIHtcbiAgICAgICAgbWFyazogJ3J1bGUnLFxuICAgICAgICBlbmNvZGluZzogZW5jb2RpbmdXaXRob3V0U2l6ZVxuICAgICAgfSx7IC8vIExvd2VyIHRpY2tcbiAgICAgICAgbWFyazogJ3RpY2snLFxuICAgICAgICBlbmNvZGluZzogZW5jb2RpbmdXaXRob3V0WDJZMlxuICAgICAgfSwgeyAvLyBVcHBlciB0aWNrXG4gICAgICAgIG1hcms6ICd0aWNrJyxcbiAgICAgICAgZW5jb2Rpbmc6IGVuY29kaW5nLngyID8ge1xuICAgICAgICAgIHg6IGVuY29kaW5nLngyLFxuICAgICAgICAgIHk6IGVuY29kaW5nLnksXG4gICAgICAgICAgLi4uZW5jb2RpbmdXaXRob3V0WF9YMl9ZX1kyXG4gICAgICAgIH0gOiB7XG4gICAgICAgICAgeDogZW5jb2RpbmcueCxcbiAgICAgICAgICB5OiBlbmNvZGluZy55MixcbiAgICAgICAgICAuLi5lbmNvZGluZ1dpdGhvdXRYX1gyX1lfWTJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { isMarkDef } from './../mark';\nimport { BOXPLOT, normalizeBoxPlot, VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX } from './boxplot';\nimport { ERRORBAR, normalizeErrorBar } from './errorbar';\n// This package import below makes the generated .d.ts file compatible with\n// Typescript 2.7 so that libraries requiring us can use Typedoc (which\n// currently is limited to Typescript 2.7). This comment and import can be\n// removed when Typedoc is updated to Typescript 2.9 or later. See\n// https://github.com/vega/vega-lite/issues/3862 for more details.\nimport * as boxplot from './boxplot';\n/**\n * Registry index for all composite mark's normalizer\n */\nvar normalizerRegistry = {};\nexport function add(mark, normalizer) {\n    normalizerRegistry[mark] = normalizer;\n}\nexport function remove(mark) {\n    delete normalizerRegistry[mark];\n}\nexport var COMPOSITE_MARK_STYLES = boxplot.BOXPLOT_STYLES;\nexport var VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = tslib_1.__assign({}, VL_ONLY_BOXPLOT_CONFIG_PROPERTY_INDEX);\nadd(BOXPLOT, normalizeBoxPlot);\nadd(ERRORBAR, normalizeErrorBar);\n/**\n * Transform a unit spec with composite mark into a normal layer spec.\n */\nexport function normalize(\n// This GenericUnitSpec has any as Encoding because unit specs with composite mark can have additional encoding channels.\nspec, config) {\n    var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n    var normalizer = normalizerRegistry[mark];\n    if (normalizer) {\n        return normalizer(spec, config);\n    }\n    throw new Error(\"Invalid mark type \\\"\" + mark + \"\\\"\");\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9zaXRlbWFyay9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFVLFNBQVMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUU3QyxPQUFPLEVBQUMsT0FBTyxFQUFtQyxnQkFBZ0IsRUFBRSxxQ0FBcUMsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUM1SCxPQUFPLEVBQUMsUUFBUSxFQUFFLGlCQUFpQixFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXZELDJFQUEyRTtBQUMzRSx1RUFBdUU7QUFDdkUsMEVBQTBFO0FBQzFFLGtFQUFrRTtBQUNsRSxrRUFBa0U7QUFDbEUsT0FBTyxLQUFLLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFLckM7O0dBRUc7QUFDSCxJQUFNLGtCQUFrQixHQUFxQyxFQUFFLENBQUM7QUFFaEUsTUFBTSxjQUFjLElBQVksRUFBRSxVQUEwQjtJQUMxRCxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxVQUFVLENBQUM7QUFDeEMsQ0FBQztBQUVELE1BQU0saUJBQWlCLElBQVk7SUFDakMsT0FBTyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBUUQsTUFBTSxDQUFDLElBQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUs1RCxNQUFNLENBQUMsSUFBTSxxREFBcUQsd0JBQzdELHFDQUFxQyxDQUN6QyxDQUFDO0FBRUYsR0FBRyxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQy9CLEdBQUcsQ0FBQyxRQUFRLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUVqQzs7R0FFRztBQUNILE1BQU07QUFDRix5SEFBeUg7QUFDekgsSUFBbUMsRUFDbkMsTUFBYztJQUdoQixJQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMvRCxJQUFNLFVBQVUsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxJQUFJLFVBQVUsRUFBRTtRQUNkLE9BQU8sVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztLQUNqQztJQUVELE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXNCLElBQUksT0FBRyxDQUFDLENBQUM7QUFDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnfSBmcm9tICcuLy4uL2NvbmZpZyc7XG5pbXBvcnQge0FueU1hcmssIGlzTWFya0RlZn0gZnJvbSAnLi8uLi9tYXJrJztcbmltcG9ydCB7R2VuZXJpY1VuaXRTcGVjLCBOb3JtYWxpemVkTGF5ZXJTcGVjfSBmcm9tICcuLy4uL3NwZWMnO1xuaW1wb3J0IHtCT1hQTE9ULCBCb3hQbG90Q29uZmlnTWl4aW5zLCBCb3hQbG90RGVmLCBub3JtYWxpemVCb3hQbG90LCBWTF9PTkxZX0JPWFBMT1RfQ09ORklHX1BST1BFUlRZX0lOREVYfSBmcm9tICcuL2JveHBsb3QnO1xuaW1wb3J0IHtFUlJPUkJBUiwgbm9ybWFsaXplRXJyb3JCYXJ9IGZyb20gJy4vZXJyb3JiYXInO1xuXG4vLyBUaGlzIHBhY2thZ2UgaW1wb3J0IGJlbG93IG1ha2VzIHRoZSBnZW5lcmF0ZWQgLmQudHMgZmlsZSBjb21wYXRpYmxlIHdpdGhcbi8vIFR5cGVzY3JpcHQgMi43IHNvIHRoYXQgbGlicmFyaWVzIHJlcXVpcmluZyB1cyBjYW4gdXNlIFR5cGVkb2MgKHdoaWNoXG4vLyBjdXJyZW50bHkgaXMgbGltaXRlZCB0byBUeXBlc2NyaXB0IDIuNykuIFRoaXMgY29tbWVudCBhbmQgaW1wb3J0IGNhbiBiZVxuLy8gcmVtb3ZlZCB3aGVuIFR5cGVkb2MgaXMgdXBkYXRlZCB0byBUeXBlc2NyaXB0IDIuOSBvciBsYXRlci4gU2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzM4NjIgZm9yIG1vcmUgZGV0YWlscy5cbmltcG9ydCAqIGFzIGJveHBsb3QgZnJvbSAnLi9ib3hwbG90JztcblxuZXhwb3J0IHtCb3hQbG90Q29uZmlnfSBmcm9tICcuL2JveHBsb3QnO1xuZXhwb3J0IHR5cGUgVW5pdE5vcm1hbGl6ZXIgPSAoc3BlYzogR2VuZXJpY1VuaXRTcGVjPGFueSwgYW55PiwgY29uZmlnOiBDb25maWcpPT4gTm9ybWFsaXplZExheWVyU3BlYztcblxuLyoqXG4gKiBSZWdpc3RyeSBpbmRleCBmb3IgYWxsIGNvbXBvc2l0ZSBtYXJrJ3Mgbm9ybWFsaXplclxuICovXG5jb25zdCBub3JtYWxpemVyUmVnaXN0cnk6IHtbbWFyazogc3RyaW5nXTogVW5pdE5vcm1hbGl6ZXJ9ID0ge307XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGQobWFyazogc3RyaW5nLCBub3JtYWxpemVyOiBVbml0Tm9ybWFsaXplcikge1xuICBub3JtYWxpemVyUmVnaXN0cnlbbWFya10gPSBub3JtYWxpemVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKG1hcms6IHN0cmluZykge1xuICBkZWxldGUgbm9ybWFsaXplclJlZ2lzdHJ5W21hcmtdO1xufVxuXG5leHBvcnQgdHlwZSBDb21wb3NpdGVNYXJrID0gQk9YUExPVCB8IEVSUk9SQkFSO1xuXG5leHBvcnQgdHlwZSBDb21wb3NpdGVNYXJrRGVmID0gQm94UGxvdERlZjtcblxuZXhwb3J0IHR5cGUgQ29tcG9zaXRlQWdncmVnYXRlID0gQk9YUExPVDtcblxuZXhwb3J0IGNvbnN0IENPTVBPU0lURV9NQVJLX1NUWUxFUyA9IGJveHBsb3QuQk9YUExPVF9TVFlMRVM7XG5leHBvcnQgdHlwZSBDb21wb3NpdGVNYXJrU3R5bGUgPSB0eXBlb2YgQ09NUE9TSVRFX01BUktfU1RZTEVTWzBdO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvc2l0ZU1hcmtDb25maWdNaXhpbnMgZXh0ZW5kcyBCb3hQbG90Q29uZmlnTWl4aW5zIHt9XG5cbmV4cG9ydCBjb25zdCBWTF9PTkxZX0NPTVBPU0lURV9NQVJLX1NQRUNJRklDX0NPTkZJR19QUk9QRVJUWV9JTkRFWCA9IHtcbiAgLi4uVkxfT05MWV9CT1hQTE9UX0NPTkZJR19QUk9QRVJUWV9JTkRFWFxufTtcblxuYWRkKEJPWFBMT1QsIG5vcm1hbGl6ZUJveFBsb3QpO1xuYWRkKEVSUk9SQkFSLCBub3JtYWxpemVFcnJvckJhcik7XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgdW5pdCBzcGVjIHdpdGggY29tcG9zaXRlIG1hcmsgaW50byBhIG5vcm1hbCBsYXllciBzcGVjLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKFxuICAgIC8vIFRoaXMgR2VuZXJpY1VuaXRTcGVjIGhhcyBhbnkgYXMgRW5jb2RpbmcgYmVjYXVzZSB1bml0IHNwZWNzIHdpdGggY29tcG9zaXRlIG1hcmsgY2FuIGhhdmUgYWRkaXRpb25hbCBlbmNvZGluZyBjaGFubmVscy5cbiAgICBzcGVjOiBHZW5lcmljVW5pdFNwZWM8YW55LCBBbnlNYXJrPixcbiAgICBjb25maWc6IENvbmZpZ1xuICApOiBOb3JtYWxpemVkTGF5ZXJTcGVjIHtcblxuICBjb25zdCBtYXJrID0gaXNNYXJrRGVmKHNwZWMubWFyaykgPyBzcGVjLm1hcmsudHlwZSA6IHNwZWMubWFyaztcbiAgY29uc3Qgbm9ybWFsaXplciA9IG5vcm1hbGl6ZXJSZWdpc3RyeVttYXJrXTtcbiAgaWYgKG5vcm1hbGl6ZXIpIHtcbiAgICByZXR1cm4gbm9ybWFsaXplcihzcGVjLCBjb25maWcpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1hcmsgdHlwZSBcIiR7bWFya31cImApO1xufVxuIl19","export var VL_ONLY_GUIDE_CONFIG = ['shortTimeLabels'];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ3VpZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkNBLE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFnQyxDQUFDLGlCQUFpQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbmRpdGlvblZhbHVlRGVmTWl4aW5zLCBWYWx1ZURlZn0gZnJvbSAnLi9maWVsZGRlZic7XG5pbXBvcnQge1ZnRW5jb2RlQ2hhbm5lbH0gZnJvbSAnLi92ZWdhLnNjaGVtYSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGl0bGVNaXhpbnMge1xuICAvKipcbiAgICogQSB0aXRsZSBmb3IgdGhlIGZpZWxkLiBJZiBgbnVsbGAsIHRoZSB0aXRsZSB3aWxsIGJlIHJlbW92ZWQuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAgZGVyaXZlZCBmcm9tIHRoZSBmaWVsZCdzIG5hbWUgYW5kIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIChgYWdncmVnYXRlYCwgYGJpbmAgYW5kIGB0aW1lVW5pdGApLiAgSWYgdGhlIGZpZWxkIGhhcyBhbiBhZ2dyZWdhdGUgZnVuY3Rpb24sIHRoZSBmdW5jdGlvbiBpcyBkaXNwbGF5ZWQgYXMgcGFydCBvZiB0aGUgdGl0bGUgKGUuZy4sIGBcIlN1bSBvZiBQcm9maXRcImApLiBJZiB0aGUgZmllbGQgaXMgYmlubmVkIG9yIGhhcyBhIHRpbWUgdW5pdCBhcHBsaWVkLCB0aGUgYXBwbGllZCBmdW5jdGlvbiBpcyBzaG93biBpbiBwYXJlbnRoZXNlcyAoZS5nLiwgYFwiUHJvZml0IChiaW5uZWQpXCJgLCBgXCJUcmFuc2FjdGlvbiBEYXRlICh5ZWFyLW1vbnRoKVwiYCkuICBPdGhlcndpc2UsIHRoZSB0aXRsZSBpcyBzaW1wbHkgdGhlIGZpZWxkIG5hbWUuXG4gICAqXG4gICAqIF9fTm90ZXNfXzpcbiAgICpcbiAgICogMSkgWW91IGNhbiBjdXN0b21pemUgdGhlIGRlZmF1bHQgZmllbGQgdGl0bGUgZm9ybWF0IGJ5IHByb3ZpZGluZyB0aGUgW2BmaWVsZFRpdGxlYCBwcm9wZXJ0eSBpbiB0aGUgW2NvbmZpZ10oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9jb25maWcuaHRtbCkgb3IgW2BmaWVsZFRpdGxlYCBmdW5jdGlvbiB2aWEgdGhlIGBjb21waWxlYCBmdW5jdGlvbidzIG9wdGlvbnNdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvY29tcGlsZS5odG1sI2ZpZWxkLXRpdGxlKS5cbiAgICpcbiAgICogMikgSWYgYm90aCBmaWVsZCBkZWZpbml0aW9uJ3MgYHRpdGxlYCBhbmQgYXhpcywgaGVhZGVyLCBvciBsZWdlbmQgYHRpdGxlYCBhcmUgZGVmaW5lZCwgYXhpcy9oZWFkZXIvbGVnZW5kIHRpdGxlIHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIHRpdGxlPzogc3RyaW5nIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHdWlkZSBleHRlbmRzIFRpdGxlTWl4aW5zIHtcbiAgLyoqXG4gICAqIFRoZSBmb3JtYXR0aW5nIHBhdHRlcm4gZm9yIGxhYmVscy4gVGhpcyBpcyBEMydzIFtudW1iZXIgZm9ybWF0IHBhdHRlcm5dKGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy1mb3JtYXQjbG9jYWxlX2Zvcm1hdCkgZm9yIHF1YW50aXRhdGl2ZSBmaWVsZHMgYW5kIEQzJ3MgW3RpbWUgZm9ybWF0IHBhdHRlcm5dKGh0dHBzOi8vZ2l0aHViLmNvbS9kMy9kMy10aW1lLWZvcm1hdCNsb2NhbGVfZm9ybWF0KSBmb3IgdGltZSBmaWVsZC5cbiAgICpcbiAgICogU2VlIHRoZSBbZm9ybWF0IGRvY3VtZW50YXRpb25dKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvZm9ybWF0Lmh0bWwpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gIGRlcml2ZWQgZnJvbSBbbnVtYmVyRm9ybWF0XShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL2NvbmZpZy5odG1sI2Zvcm1hdCkgY29uZmlnIGZvciBxdWFudGl0YXRpdmUgZmllbGRzIGFuZCBmcm9tIFt0aW1lRm9ybWF0XShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL2NvbmZpZy5odG1sI2Zvcm1hdCkgY29uZmlnIGZvciB0ZW1wb3JhbCBmaWVsZHMuXG4gICAqL1xuICBmb3JtYXQ/OiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFZsT25seUd1aWRlQ29uZmlnIHtcblxuICAvKipcbiAgICogV2hldGhlciBtb250aCBuYW1lcyBhbmQgd2Vla2RheSBuYW1lcyBzaG91bGQgYmUgYWJicmV2aWF0ZWQuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyAgYGZhbHNlYFxuICAgKi9cbiAgc2hvcnRUaW1lTGFiZWxzPzogYm9vbGVhbjtcbn1cblxuXG5leHBvcnQgdHlwZSBHdWlkZUVuY29kaW5nRW50cnkgPSB7XG4gIFtrIGluIFZnRW5jb2RlQ2hhbm5lbF0/OiBWYWx1ZURlZiAmIENvbmRpdGlvblZhbHVlRGVmTWl4aW5zO1xufTtcblxuZXhwb3J0IGNvbnN0IFZMX09OTFlfR1VJREVfQ09ORklHOiAoa2V5b2YgVmxPbmx5R3VpZGVDb25maWcpW10gPSBbJ3Nob3J0VGltZUxhYmVscyddO1xuIl19","import * as tslib_1 from \"tslib\";\nimport { flagKeys } from './util';\nexport var defaultLegendConfig = {};\nvar COMMON_LEGEND_PROPERTY_INDEX = {\n    entryPadding: 1,\n    format: 1,\n    offset: 1,\n    orient: 1,\n    padding: 1,\n    tickCount: 1,\n    title: 1,\n    type: 1,\n    values: 1,\n    zindex: 1\n};\nvar VG_LEGEND_PROPERTY_INDEX = tslib_1.__assign({}, COMMON_LEGEND_PROPERTY_INDEX, { \n    // channel scales\n    opacity: 1, shape: 1, stroke: 1, fill: 1, size: 1, \n    // encode\n    encode: 1 });\nexport var LEGEND_PROPERTIES = flagKeys(COMMON_LEGEND_PROPERTY_INDEX);\nexport var VG_LEGEND_PROPERTIES = flagKeys(VG_LEGEND_PROPERTY_INDEX);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnZW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xlZ2VuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFPLFFBQVEsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQXdFdEMsTUFBTSxDQUFDLElBQU0sbUJBQW1CLEdBQWlCLEVBQUUsQ0FBQztBQUVwRCxJQUFNLDRCQUE0QixHQUFvQztJQUNwRSxZQUFZLEVBQUUsQ0FBQztJQUNmLE1BQU0sRUFBRSxDQUFDO0lBQ1QsTUFBTSxFQUFFLENBQUM7SUFDVCxNQUFNLEVBQUUsQ0FBQztJQUNULE9BQU8sRUFBRSxDQUFDO0lBQ1YsU0FBUyxFQUFFLENBQUM7SUFDWixLQUFLLEVBQUUsQ0FBQztJQUNSLElBQUksRUFBRSxDQUFDO0lBQ1AsTUFBTSxFQUFFLENBQUM7SUFDVCxNQUFNLEVBQUUsQ0FBQztDQUNWLENBQUM7QUFFRixJQUFNLHdCQUF3Qix3QkFDekIsNEJBQTRCO0lBQy9CLGlCQUFpQjtJQUNqQixPQUFPLEVBQUUsQ0FBQyxFQUNWLEtBQUssRUFBRSxDQUFDLEVBQ1IsTUFBTSxFQUFFLENBQUMsRUFDVCxJQUFJLEVBQUUsQ0FBQyxFQUNQLElBQUksRUFBRSxDQUFDO0lBQ1AsU0FBUztJQUNULE1BQU0sRUFBRSxDQUFDLEdBQ1YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRXhFLE1BQU0sQ0FBQyxJQUFNLG9CQUFvQixHQUFHLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEYXRlVGltZX0gZnJvbSAnLi9kYXRldGltZSc7XG5pbXBvcnQge0d1aWRlLCBHdWlkZUVuY29kaW5nRW50cnksIFZsT25seUd1aWRlQ29uZmlnfSBmcm9tICcuL2d1aWRlJztcbmltcG9ydCB7RmxhZywgZmxhZ0tleXN9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQge1ZnTGVnZW5kLCBWZ0xlZ2VuZEJhc2UsIFZnTGVnZW5kQ29uZmlnfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIExlZ2VuZENvbmZpZyBleHRlbmRzIFZnTGVnZW5kQ29uZmlnLCBWbE9ubHlHdWlkZUNvbmZpZyB7fVxuXG4vKipcbiAqIFByb3BlcnRpZXMgb2YgYSBsZWdlbmQgb3IgYm9vbGVhbiBmbGFnIGZvciBkZXRlcm1pbmluZyB3aGV0aGVyIHRvIHNob3cgaXQuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTGVnZW5kIGV4dGVuZHMgVmdMZWdlbmRCYXNlLCBHdWlkZSB7XG4gIC8qKlxuICAgKiBNYXJrIGRlZmluaXRpb25zIGZvciBjdXN0b20gbGVnZW5kIGVuY29kaW5nLlxuICAgKlxuICAgKiBAaGlkZVxuICAgKi9cbiAgZW5jb2Rpbmc/OiBMZWdlbmRFbmNvZGluZztcblxuICAvKipcbiAgICogVGhlIGRlc2lyZWQgbnVtYmVyIG9mIHRpY2sgdmFsdWVzIGZvciBxdWFudGl0YXRpdmUgbGVnZW5kcy5cbiAgICovXG4gIHRpY2tDb3VudD86IG51bWJlcjtcblxuICAvKipcbiAgICogRXhwbGljaXRseSBzZXQgdGhlIHZpc2libGUgbGVnZW5kIHZhbHVlcy5cbiAgICovXG4gIHZhbHVlcz86IG51bWJlcltdIHwgc3RyaW5nW10gfCBEYXRlVGltZVtdO1xuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgbGVnZW5kLiBVc2UgYFwic3ltYm9sXCJgIHRvIGNyZWF0ZSBhIGRpc2NyZXRlIGxlZ2VuZCBhbmQgYFwiZ3JhZGllbnRcImAgZm9yIGEgY29udGludW91cyBjb2xvciBncmFkaWVudC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBcImdyYWRpZW50XCJgIGZvciBub24tYmlubmVkIHF1YW50aXRhdGl2ZSBmaWVsZHMgYW5kIHRlbXBvcmFsIGZpZWxkczsgYFwic3ltYm9sXCJgIG90aGVyd2lzZS5cbiAgICovXG4gIHR5cGU/OiAnc3ltYm9sJyB8ICdncmFkaWVudCc7XG5cbiAgLyoqXG4gICAqIEEgbm9uLXBvc2l0aXZlIGludGVnZXIgaW5kaWNhdGluZyB6LWluZGV4IG9mIHRoZSBsZWdlbmQuXG4gICAqIElmIHppbmRleCBpcyAwLCBsZWdlbmQgc2hvdWxkIGJlIGRyYXduIGJlaGluZCBhbGwgY2hhcnQgZWxlbWVudHMuXG4gICAqIFRvIHB1dCB0aGVtIGluIGZyb250LCB1c2UgemluZGV4ID0gMS5cbiAgICogQFRKUy10eXBlIGludGVnZXJcbiAgICogQG1pbmltdW0gMFxuICAgKi9cbiAgemluZGV4PzogbnVtYmVyO1xufVxuXG5leHBvcnQgdHlwZSBMZWdlbmRFbmNvZGluZyA9IHtcbiAgLyoqXG4gICAqIEN1c3RvbSBlbmNvZGluZyBmb3IgdGhlIGxlZ2VuZCBjb250YWluZXIuXG4gICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgY3JlYXRpbmcgbGVnZW5kIHdpdGggY3VzdG9tIHgsIHkgcG9zaXRpb24uXG4gICAqL1xuICBsZWdlbmQ/OiBHdWlkZUVuY29kaW5nRW50cnk7XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBlbmNvZGluZyBmb3IgdGhlIGxlZ2VuZCB0aXRsZSB0ZXh0IG1hcmsuXG4gICAqL1xuICB0aXRsZT86IEd1aWRlRW5jb2RpbmdFbnRyeTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVuY29kaW5nIGZvciBsZWdlbmQgbGFiZWwgdGV4dCBtYXJrcy5cbiAgICovXG4gIGxhYmVscz86IEd1aWRlRW5jb2RpbmdFbnRyeTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVuY29kaW5nIGZvciBsZWdlbmQgc3ltYm9sIG1hcmtzLlxuICAgKi9cbiAgc3ltYm9scz86IEd1aWRlRW5jb2RpbmdFbnRyeTtcblxuICAvKipcbiAgICogQ3VzdG9tIGVuY29kaW5nIGZvciBsZWdlbmQgZ3JhZGllbnQgZmlsbGVkIHJlY3QgbWFya3MuXG4gICAqL1xuICBncmFkaWVudD86IEd1aWRlRW5jb2RpbmdFbnRyeTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0TGVnZW5kQ29uZmlnOiBMZWdlbmRDb25maWcgPSB7fTtcblxuY29uc3QgQ09NTU9OX0xFR0VORF9QUk9QRVJUWV9JTkRFWDogRmxhZzxrZXlvZiAoVmdMZWdlbmQgfCBMZWdlbmQpPiA9IHtcbiAgZW50cnlQYWRkaW5nOiAxLFxuICBmb3JtYXQ6IDEsXG4gIG9mZnNldDogMSxcbiAgb3JpZW50OiAxLFxuICBwYWRkaW5nOiAxLFxuICB0aWNrQ291bnQ6IDEsXG4gIHRpdGxlOiAxLFxuICB0eXBlOiAxLFxuICB2YWx1ZXM6IDEsXG4gIHppbmRleDogMVxufTtcblxuY29uc3QgVkdfTEVHRU5EX1BST1BFUlRZX0lOREVYOiBGbGFnPGtleW9mIFZnTGVnZW5kPiA9IHtcbiAgLi4uQ09NTU9OX0xFR0VORF9QUk9QRVJUWV9JTkRFWCxcbiAgLy8gY2hhbm5lbCBzY2FsZXNcbiAgb3BhY2l0eTogMSxcbiAgc2hhcGU6IDEsXG4gIHN0cm9rZTogMSxcbiAgZmlsbDogMSxcbiAgc2l6ZTogMSxcbiAgLy8gZW5jb2RlXG4gIGVuY29kZTogMVxufTtcblxuZXhwb3J0IGNvbnN0IExFR0VORF9QUk9QRVJUSUVTID0gZmxhZ0tleXMoQ09NTU9OX0xFR0VORF9QUk9QRVJUWV9JTkRFWCk7XG5cbmV4cG9ydCBjb25zdCBWR19MRUdFTkRfUFJPUEVSVElFUyA9IGZsYWdLZXlzKFZHX0xFR0VORF9QUk9QRVJUWV9JTkRFWCk7XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { toSet } from 'vega-util';\nimport { Channel, CHANNELS, isColorChannel } from './channel';\nimport * as log from './log';\nimport { Type, TYPE_INDEX } from './type';\nimport { contains, flagKeys, keys } from './util';\nexport var ScaleType;\n(function (ScaleType) {\n    // Continuous - Quantitative\n    ScaleType.LINEAR = 'linear';\n    ScaleType.BIN_LINEAR = 'bin-linear';\n    ScaleType.LOG = 'log';\n    ScaleType.POW = 'pow';\n    ScaleType.SQRT = 'sqrt';\n    // Continuous - Time\n    ScaleType.TIME = 'time';\n    ScaleType.UTC = 'utc';\n    // sequential\n    ScaleType.SEQUENTIAL = 'sequential';\n    // Quantile, Quantize, threshold\n    ScaleType.QUANTILE = 'quantile';\n    ScaleType.QUANTIZE = 'quantize';\n    ScaleType.THRESHOLD = 'threshold';\n    ScaleType.ORDINAL = 'ordinal';\n    ScaleType.BIN_ORDINAL = 'bin-ordinal';\n    ScaleType.POINT = 'point';\n    ScaleType.BAND = 'band';\n})(ScaleType || (ScaleType = {}));\n/**\n * Index for scale categories -- only scale of the same categories can be merged together.\n * Current implementation is trying to be conservative and avoid merging scale type that might not work together\n */\nvar SCALE_CATEGORY_INDEX = {\n    linear: 'numeric',\n    log: 'numeric',\n    pow: 'numeric',\n    sqrt: 'numeric',\n    'bin-linear': 'bin-linear',\n    time: 'time',\n    utc: 'time',\n    sequential: 'sequential',\n    ordinal: 'ordinal',\n    'bin-ordinal': 'bin-ordinal',\n    point: 'ordinal-position',\n    band: 'ordinal-position'\n};\nexport var SCALE_TYPES = keys(SCALE_CATEGORY_INDEX);\n/**\n * Whether the two given scale types can be merged together.\n */\nexport function scaleCompatible(scaleType1, scaleType2) {\n    var scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\n    var scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\n    return scaleCategory1 === scaleCategory2 ||\n        (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||\n        (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time');\n}\n/**\n * Index for scale precedence -- high score = higher priority for merging.\n */\nvar SCALE_PRECEDENCE_INDEX = {\n    // numeric\n    linear: 0,\n    log: 1,\n    pow: 1,\n    sqrt: 1,\n    // time\n    time: 0,\n    utc: 0,\n    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\n    point: 10,\n    band: 11,\n    // non grouped types\n    'bin-linear': 0,\n    sequential: 0,\n    ordinal: 0,\n    'bin-ordinal': 0,\n};\n/**\n * Return scale categories -- only scale of the same categories can be merged together.\n */\nexport function scaleTypePrecedence(scaleType) {\n    return SCALE_PRECEDENCE_INDEX[scaleType];\n}\nexport var CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'bin-linear', 'log', 'pow', 'sqrt', 'time', 'utc'];\nvar CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\nexport var CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat(['sequential' /* TODO add 'quantile', 'quantize', 'threshold'*/]);\nvar CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\nexport var DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];\nvar DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\nvar BIN_SCALES_INDEX = toSet(['bin-linear', 'bin-ordinal']);\nexport var TIME_SCALE_TYPES = ['time', 'utc'];\nexport function hasDiscreteDomain(type) {\n    return type in DISCRETE_DOMAIN_INDEX;\n}\nexport function isBinScale(type) {\n    return type in BIN_SCALES_INDEX;\n}\nexport function hasContinuousDomain(type) {\n    return type in CONTINUOUS_DOMAIN_INDEX;\n}\nexport function isContinuousToContinuous(type) {\n    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\n}\nexport var defaultScaleConfig = {\n    textXRangeStep: 90,\n    rangeStep: 21,\n    pointPadding: 0.5,\n    bandPaddingInner: 0.1,\n    facetSpacing: 16,\n    minBandSize: 2,\n    minFontSize: 8,\n    maxFontSize: 40,\n    minOpacity: 0.3,\n    maxOpacity: 0.8,\n    // FIXME: revise if these *can* become ratios of rangeStep\n    minSize: 9,\n    minStrokeWidth: 1,\n    maxStrokeWidth: 4\n};\nexport function isExtendedScheme(scheme) {\n    return scheme && !!scheme['name'];\n}\nexport function isSelectionDomain(domain) {\n    return domain && domain['selection'];\n}\nvar SCALE_PROPERTY_INDEX = {\n    type: 1,\n    domain: 1,\n    range: 1,\n    rangeStep: 1,\n    scheme: 1,\n    // Other properties\n    reverse: 1,\n    round: 1,\n    // quantitative / time\n    clamp: 1,\n    nice: 1,\n    // quantitative\n    base: 1,\n    exponent: 1,\n    interpolate: 1,\n    zero: 1,\n    // band/point\n    padding: 1,\n    paddingInner: 1,\n    paddingOuter: 1\n};\nexport var SCALE_PROPERTIES = flagKeys(SCALE_PROPERTY_INDEX);\nvar type = SCALE_PROPERTY_INDEX.type, domain = SCALE_PROPERTY_INDEX.domain, range = SCALE_PROPERTY_INDEX.range, rangeStep = SCALE_PROPERTY_INDEX.rangeStep, scheme = SCALE_PROPERTY_INDEX.scheme, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = tslib_1.__rest(SCALE_PROPERTY_INDEX, [\"type\", \"domain\", \"range\", \"rangeStep\", \"scheme\"]);\nexport var NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = flagKeys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\nexport var SCALE_TYPE_INDEX = generateScaleTypeIndex();\nexport function scaleTypeSupportProperty(scaleType, propName) {\n    switch (propName) {\n        case 'type':\n        case 'domain':\n        case 'reverse':\n        case 'range':\n            return true;\n        case 'scheme':\n            return contains(['sequential', 'ordinal', 'bin-ordinal', 'quantile', 'quantize'], scaleType);\n        case 'interpolate':\n            // FIXME(https://github.com/vega/vega-lite/issues/2902) how about ordinal?\n            return contains(['linear', 'bin-linear', 'pow', 'log', 'sqrt', 'utc', 'time'], scaleType);\n        case 'round':\n            return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\n        case 'padding':\n            return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\n        case 'paddingOuter':\n        case 'rangeStep':\n            return contains(['point', 'band'], scaleType);\n        case 'paddingInner':\n            return scaleType === 'band';\n        case 'clamp':\n            return isContinuousToContinuous(scaleType) || scaleType === 'sequential';\n        case 'nice':\n            return isContinuousToContinuous(scaleType) || scaleType === 'sequential' || scaleType === 'quantize';\n        case 'exponent':\n            return scaleType === 'pow';\n        case 'base':\n            return scaleType === 'log';\n        case 'zero':\n            return hasContinuousDomain(scaleType) && !contains([\n                'log',\n                'time', 'utc',\n                'bin-linear',\n                'threshold',\n                'quantile' // quantile depends on distribution so zero does not matter\n            ], scaleType);\n    }\n    /* istanbul ignore next: should never reach here*/\n    throw new Error(\"Invalid scale property \" + propName + \".\");\n}\n/**\n * Returns undefined if the input channel supports the input scale property name\n */\nexport function channelScalePropertyIncompatability(channel, propName) {\n    switch (propName) {\n        case 'interpolate':\n        case 'scheme':\n            if (!isColorChannel(channel)) {\n                return log.message.cannotUseScalePropertyWithNonColor(channel);\n            }\n            return undefined;\n        case 'type':\n        case 'domain':\n        case 'range':\n        case 'base':\n        case 'exponent':\n        case 'nice':\n        case 'padding':\n        case 'paddingInner':\n        case 'paddingOuter':\n        case 'rangeStep':\n        case 'reverse':\n        case 'round':\n        case 'clamp':\n        case 'zero':\n            return undefined; // GOOD!\n    }\n    /* istanbul ignore next: it should never reach here */\n    throw new Error(\"Invalid scale property \\\"\" + propName + \"\\\".\");\n}\nexport function scaleTypeSupportDataType(specifiedType, fieldDefType, bin) {\n    if (contains([Type.ORDINAL, Type.NOMINAL], fieldDefType)) {\n        return specifiedType === undefined || hasDiscreteDomain(specifiedType);\n    }\n    else if (fieldDefType === Type.TEMPORAL) {\n        return contains([ScaleType.TIME, ScaleType.UTC, ScaleType.SEQUENTIAL, undefined], specifiedType);\n    }\n    else if (fieldDefType === Type.QUANTITATIVE) {\n        if (bin) {\n            return contains([ScaleType.BIN_LINEAR, ScaleType.BIN_ORDINAL, ScaleType.LINEAR], specifiedType);\n        }\n        return contains([ScaleType.LOG, ScaleType.POW, ScaleType.SQRT, ScaleType.QUANTILE, ScaleType.QUANTIZE, ScaleType.LINEAR, ScaleType.SEQUENTIAL, undefined], specifiedType);\n    }\n    return true;\n}\nexport function channelSupportScaleType(channel, scaleType) {\n    switch (channel) {\n        case Channel.X:\n        case Channel.Y:\n        case Channel.SIZE: // TODO: size and opacity can support ordinal with more modification\n        case Channel.OPACITY:\n            // Although it generally doesn't make sense to use band with size and opacity,\n            // it can also work since we use band: 0.5 to get midpoint.\n            return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\n        case Channel.COLOR:\n        case Channel.FILL:\n        case Channel.STROKE:\n            return scaleType !== 'band'; // band does not make sense with color\n        case Channel.SHAPE:\n            return scaleType === 'ordinal'; // shape = lookup only\n    }\n    /* istanbul ignore next: it should never reach here */\n    return false;\n}\nexport function getSupportedScaleType(channel, fieldDefType, bin) {\n    return SCALE_TYPE_INDEX[generateScaleTypeIndexKey(channel, fieldDefType, bin)];\n}\n// generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes\nfunction generateScaleTypeIndex() {\n    var index = {};\n    for (var _i = 0, CHANNELS_1 = CHANNELS; _i < CHANNELS_1.length; _i++) {\n        var channel = CHANNELS_1[_i];\n        for (var _a = 0, _b = keys(TYPE_INDEX); _a < _b.length; _a++) {\n            var fieldDefType = _b[_a];\n            for (var _c = 0, SCALE_TYPES_1 = SCALE_TYPES; _c < SCALE_TYPES_1.length; _c++) {\n                var scaleType = SCALE_TYPES_1[_c];\n                for (var _d = 0, _e = [false, true]; _d < _e.length; _d++) {\n                    var bin = _e[_d];\n                    var key = generateScaleTypeIndexKey(channel, fieldDefType, bin);\n                    if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType, bin)) {\n                        index[key] = index[key] || [];\n                        index[key].push(scaleType);\n                    }\n                }\n            }\n        }\n    }\n    return index;\n}\nfunction generateScaleTypeIndexKey(channel, fieldDefType, bin) {\n    var key = channel + '_' + fieldDefType;\n    return bin ? key + '_bin' : key;\n}\n//# sourceMappingURL=data:application/json;base64,","export var SELECTION_ID = '_vgsid_';\nexport var defaultConfig = {\n    single: {\n        on: 'click',\n        fields: [SELECTION_ID],\n        resolve: 'global',\n        empty: 'all'\n    },\n    multi: {\n        on: 'click',\n        fields: [SELECTION_ID],\n        toggle: 'event.shiftKey',\n        resolve: 'global',\n        empty: 'all'\n    },\n    interval: {\n        on: '[mousedown, window:mouseup] > window:mousemove!',\n        encodings: ['x', 'y'],\n        translate: '[mousedown, window:mouseup] > window:mousemove!',\n        zoom: 'wheel!',\n        mark: { fill: '#333', fillOpacity: 0.125, stroke: 'white' },\n        resolve: 'global'\n    }\n};\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nexport function extractTitleConfig(titleConfig) {\n    var \n    // These are non-mark title config that need to be hardcoded\n    anchor = titleConfig.anchor, offset = titleConfig.offset, orient = titleConfig.orient, \n    // color needs to be redirect to fill\n    color = titleConfig.color, \n    // The rest are mark config.\n    titleMarkConfig = tslib_1.__rest(titleConfig, [\"anchor\", \"offset\", \"orient\", \"color\"]);\n    var mark = tslib_1.__assign({}, titleMarkConfig, color ? { fill: color } : {});\n    var nonMark = tslib_1.__assign({}, anchor ? { anchor: anchor } : {}, offset ? { offset: offset } : {}, orient ? { orient: orient } : {});\n    return { mark: mark, nonMark: nonMark };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGl0bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQXdDQSxNQUFNLDZCQUE2QixXQUEwQjtJQU16RDtJQURBLDREQUE0RDtJQUM1RCwyQkFBTSxFQUFFLDJCQUFNLEVBQUUsMkJBQU07SUFDdEIscUNBQXFDO0lBQ3JDLHlCQUFLO0lBQ0wsNEJBQTRCO0lBQzVCLHNGQUFrQixDQUNKO0lBRWhCLElBQU0sSUFBSSx3QkFDTCxlQUFlLEVBQ2YsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUM5QixDQUFDO0lBRUYsSUFBTSxPQUFPLHdCQUNSLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQ3RCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBQyxNQUFNLFFBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQzFCLENBQUM7SUFFRixPQUFPLEVBQUMsSUFBSSxNQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUMsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBbmNob3IsIFRpdGxlT3JpZW50LCBWZ01hcmtDb25maWcsIFZnVGl0bGVDb25maWd9IGZyb20gJy4vdmVnYS5zY2hlbWEnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRpdGxlQmFzZSB7XG4gIC8qKlxuICAgKiBUaGUgb3JpZW50YXRpb24gb2YgdGhlIHRpdGxlIHJlbGF0aXZlIHRvIHRoZSBjaGFydC4gT25lIG9mIGBcInRvcFwiYCAodGhlIGRlZmF1bHQpLCBgXCJib3R0b21cImAsIGBcImxlZnRcImAsIG9yIGBcInJpZ2h0XCJgLlxuICAgKi9cbiAgb3JpZW50PzogVGl0bGVPcmllbnQ7XG5cbiAgLyoqXG4gICAqIFRoZSBhbmNob3IgcG9zaXRpb24gZm9yIHBsYWNpbmcgdGhlIHRpdGxlLiBPbmUgb2YgYFwic3RhcnRcImAsIGBcIm1pZGRsZVwiYCwgb3IgYFwiZW5kXCJgLiBGb3IgZXhhbXBsZSwgd2l0aCBhbiBvcmllbnRhdGlvbiBvZiB0b3AgdGhlc2UgYW5jaG9yIHBvc2l0aW9ucyBtYXAgdG8gYSBsZWZ0LSwgY2VudGVyLSwgb3IgcmlnaHQtYWxpZ25lZCB0aXRsZS5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBcIm1pZGRsZVwiYCBmb3IgW3NpbmdsZV0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9zcGVjLmh0bWwpIGFuZCBbbGF5ZXJlZF0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9sYXllci5odG1sKSB2aWV3cy5cbiAgICogYFwic3RhcnRcImAgZm9yIG90aGVyIGNvbXBvc2l0ZSB2aWV3cy5cbiAgICpcbiAgICogX19Ob3RlOl9fIFtGb3Igbm93XShodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI4NzUpLCBgYW5jaG9yYCBpcyBvbmx5IGN1c3RvbWl6YWJsZSBvbmx5IGZvciBbc2luZ2xlXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL3NwZWMuaHRtbCkgYW5kIFtsYXllcmVkXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL2xheWVyLmh0bWwpIHZpZXdzLiAgRm9yIG90aGVyIGNvbXBvc2l0ZSB2aWV3cywgYGFuY2hvcmAgaXMgYWx3YXlzIGBcInN0YXJ0XCJgLlxuICAgKi9cbiAgYW5jaG9yPzogQW5jaG9yO1xuXG4gIC8qKlxuICAgKiBUaGUgb3J0aG9nb25hbCBvZmZzZXQgaW4gcGl4ZWxzIGJ5IHdoaWNoIHRvIGRpc3BsYWNlIHRoZSB0aXRsZSBmcm9tIGl0cyBwb3NpdGlvbiBhbG9uZyB0aGUgZWRnZSBvZiB0aGUgY2hhcnQuXG4gICAqL1xuICBvZmZzZXQ/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEEgW21hcmsgc3R5bGUgcHJvcGVydHldKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvY29uZmlnLmh0bWwjc3R5bGUpIHRvIGFwcGx5IHRvIHRoZSB0aXRsZSB0ZXh0IG1hcmsuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgXCJncm91cC10aXRsZVwiYC5cbiAgICovXG4gIHN0eWxlPzogc3RyaW5nIHwgc3RyaW5nW107XG5cbiAgLy8gVE9ETzogbmFtZSwgZW5jb2RlLCBpbnRlcmFjdGl2ZSwgemluZGV4XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGl0bGVQYXJhbXMgZXh0ZW5kcyBUaXRsZUJhc2Uge1xuICAvKipcbiAgICogVGhlIHRpdGxlIHRleHQuXG4gICAqL1xuICB0ZXh0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VGl0bGVDb25maWcodGl0bGVDb25maWc6IFZnVGl0bGVDb25maWcpOiB7XG4gIG1hcms6IFZnTWFya0NvbmZpZyxcbiAgbm9uTWFyazogVGl0bGVCYXNlXG59IHtcbiAgY29uc3Qge1xuICAgIC8vIFRoZXNlIGFyZSBub24tbWFyayB0aXRsZSBjb25maWcgdGhhdCBuZWVkIHRvIGJlIGhhcmRjb2RlZFxuICAgIGFuY2hvciwgb2Zmc2V0LCBvcmllbnQsXG4gICAgLy8gY29sb3IgbmVlZHMgdG8gYmUgcmVkaXJlY3QgdG8gZmlsbFxuICAgIGNvbG9yLFxuICAgIC8vIFRoZSByZXN0IGFyZSBtYXJrIGNvbmZpZy5cbiAgICAuLi50aXRsZU1hcmtDb25maWdcbiAgfSA9IHRpdGxlQ29uZmlnO1xuXG4gIGNvbnN0IG1hcms6IFZnTWFya0NvbmZpZyA9IHtcbiAgICAuLi50aXRsZU1hcmtDb25maWcsXG4gICAgLi4uY29sb3IgPyB7ZmlsbDogY29sb3J9IDoge31cbiAgfTtcblxuICBjb25zdCBub25NYXJrOiBUaXRsZUJhc2UgPSB7XG4gICAgLi4uYW5jaG9yID8ge2FuY2hvcn0gOiB7fSxcbiAgICAuLi5vZmZzZXQgPyB7b2Zmc2V0fSA6IHt9LFxuICAgIC4uLm9yaWVudCA/IHtvcmllbnR9IDoge31cbiAgfTtcblxuICByZXR1cm4ge21hcmssIG5vbk1hcmt9O1xufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { isObject } from 'vega-util';\nimport { COMPOSITE_MARK_STYLES } from './compositemark';\nimport { VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX } from './compositemark/index';\nimport { VL_ONLY_GUIDE_CONFIG } from './guide';\nimport { defaultLegendConfig } from './legend';\nimport { PRIMITIVE_MARKS, VL_ONLY_MARK_CONFIG_PROPERTIES, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX } from './mark';\nimport * as mark from './mark';\nimport { defaultScaleConfig } from './scale';\nimport { defaultConfig as defaultSelectionConfig } from './selection';\nimport { extractTitleConfig } from './title';\nimport { duplicate, keys, mergeDeep } from './util';\nexport var defaultViewConfig = {\n    width: 200,\n    height: 200\n};\nexport var defaultConfig = {\n    padding: 5,\n    timeFormat: '',\n    countTitle: 'Number of Records',\n    invalidValues: 'filter',\n    view: defaultViewConfig,\n    mark: mark.defaultMarkConfig,\n    area: {},\n    bar: mark.defaultBarConfig,\n    circle: {},\n    geoshape: {},\n    line: {},\n    point: {},\n    rect: {},\n    rule: { color: 'black' },\n    square: {},\n    text: { color: 'black' },\n    tick: mark.defaultTickConfig,\n    trail: {},\n    box: { size: 14, extent: 1.5 },\n    boxWhisker: {},\n    boxMid: { color: 'white' },\n    scale: defaultScaleConfig,\n    projection: {},\n    axis: {},\n    axisX: {},\n    axisY: { minExtent: 30 },\n    axisLeft: {},\n    axisRight: {},\n    axisTop: {},\n    axisBottom: {},\n    axisBand: {},\n    legend: defaultLegendConfig,\n    selection: defaultSelectionConfig,\n    style: {},\n    title: {},\n};\nexport function initConfig(config) {\n    return mergeDeep(duplicate(defaultConfig), config);\n}\nvar MARK_STYLES = ['view'].concat(PRIMITIVE_MARKS, COMPOSITE_MARK_STYLES);\nvar VL_ONLY_CONFIG_PROPERTIES = [\n    'padding', 'numberFormat', 'timeFormat', 'countTitle',\n    'stack', 'scale', 'selection', 'invalidValues',\n    'overlay' // FIXME: Redesign and unhide this\n];\nvar VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = tslib_1.__assign({ view: ['width', 'height'] }, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX, VL_ONLY_COMPOSITE_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);\nexport function stripAndRedirectConfig(config) {\n    config = duplicate(config);\n    for (var _i = 0, VL_ONLY_CONFIG_PROPERTIES_1 = VL_ONLY_CONFIG_PROPERTIES; _i < VL_ONLY_CONFIG_PROPERTIES_1.length; _i++) {\n        var prop = VL_ONLY_CONFIG_PROPERTIES_1[_i];\n        delete config[prop];\n    }\n    // Remove Vega-Lite only axis/legend config\n    if (config.axis) {\n        for (var _a = 0, VL_ONLY_GUIDE_CONFIG_1 = VL_ONLY_GUIDE_CONFIG; _a < VL_ONLY_GUIDE_CONFIG_1.length; _a++) {\n            var prop = VL_ONLY_GUIDE_CONFIG_1[_a];\n            delete config.axis[prop];\n        }\n    }\n    if (config.legend) {\n        for (var _b = 0, VL_ONLY_GUIDE_CONFIG_2 = VL_ONLY_GUIDE_CONFIG; _b < VL_ONLY_GUIDE_CONFIG_2.length; _b++) {\n            var prop = VL_ONLY_GUIDE_CONFIG_2[_b];\n            delete config.legend[prop];\n        }\n    }\n    // Remove Vega-Lite only generic mark config\n    if (config.mark) {\n        for (var _c = 0, VL_ONLY_MARK_CONFIG_PROPERTIES_1 = VL_ONLY_MARK_CONFIG_PROPERTIES; _c < VL_ONLY_MARK_CONFIG_PROPERTIES_1.length; _c++) {\n            var prop = VL_ONLY_MARK_CONFIG_PROPERTIES_1[_c];\n            delete config.mark[prop];\n        }\n    }\n    for (var _d = 0, MARK_STYLES_1 = MARK_STYLES; _d < MARK_STYLES_1.length; _d++) {\n        var markType = MARK_STYLES_1[_d];\n        // Remove Vega-Lite-only mark config\n        for (var _e = 0, VL_ONLY_MARK_CONFIG_PROPERTIES_2 = VL_ONLY_MARK_CONFIG_PROPERTIES; _e < VL_ONLY_MARK_CONFIG_PROPERTIES_2.length; _e++) {\n            var prop = VL_ONLY_MARK_CONFIG_PROPERTIES_2[_e];\n            delete config[markType][prop];\n        }\n        // Remove Vega-Lite only mark-specific config\n        var vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\n        if (vlOnlyMarkSpecificConfigs) {\n            for (var _f = 0, vlOnlyMarkSpecificConfigs_1 = vlOnlyMarkSpecificConfigs; _f < vlOnlyMarkSpecificConfigs_1.length; _f++) {\n                var prop = vlOnlyMarkSpecificConfigs_1[_f];\n                delete config[markType][prop];\n            }\n        }\n        // Redirect mark config to config.style so that mark config only affect its own mark type\n        // without affecting other marks that share the same underlying Vega marks.\n        // For example, config.rect should not affect bar marks.\n        redirectConfig(config, markType);\n    }\n    // Redirect config.title -- so that title config do not\n    // affect header labels, which also uses `title` directive to implement.\n    redirectConfig(config, 'title', 'group-title');\n    // Remove empty config objects\n    for (var prop in config) {\n        if (isObject(config[prop]) && keys(config[prop]).length === 0) {\n            delete config[prop];\n        }\n    }\n    return keys(config).length > 0 ? config : undefined;\n}\nfunction redirectConfig(config, prop, toProp) {\n    var propConfig = prop === 'title' ? extractTitleConfig(config.title).mark : config[prop];\n    if (prop === 'view') {\n        toProp = 'cell'; // View's default style is \"cell\"\n    }\n    var style = tslib_1.__assign({}, propConfig, config.style[prop]);\n    // set config.style if it is not an empty object\n    if (keys(style).length > 0) {\n        config.style[toProp || prop] = style;\n    }\n    delete config[prop];\n}\n//# sourceMappingURL=data:application/json;base64,","import { isArray } from 'vega-util';\nimport { SUM_OPS } from './aggregate';\nimport { NONPOSITION_CHANNELS, X, X2, Y2 } from './channel';\nimport { channelHasField } from './encoding';\nimport { getFieldDef, isFieldDef, isStringFieldDef, vgField } from './fielddef';\nimport * as log from './log';\nimport { AREA, BAR, CIRCLE, isMarkDef, isPathMark, LINE, POINT, RULE, SQUARE, TEXT, TICK } from './mark';\nimport { ScaleType } from './scale';\nimport { contains } from './util';\nvar STACK_OFFSET_INDEX = {\n    zero: 1,\n    center: 1,\n    normalize: 1\n};\nexport function isStackOffset(s) {\n    return !!STACK_OFFSET_INDEX[s];\n}\nexport var STACKABLE_MARKS = [BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT, TICK];\nexport var STACK_BY_DEFAULT_MARKS = [BAR, AREA];\nfunction potentialStackedChannel(encoding) {\n    var xDef = encoding.x;\n    var yDef = encoding.y;\n    if (isFieldDef(xDef) && isFieldDef(yDef)) {\n        if (xDef.type === 'quantitative' && yDef.type === 'quantitative') {\n            if (xDef.stack) {\n                return 'x';\n            }\n            else if (yDef.stack) {\n                return 'y';\n            }\n            // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y\n            if ((!!xDef.aggregate) !== (!!yDef.aggregate)) {\n                return xDef.aggregate ? 'x' : 'y';\n            }\n        }\n        else if (xDef.type === 'quantitative') {\n            return 'x';\n        }\n        else if (yDef.type === 'quantitative') {\n            return 'y';\n        }\n    }\n    else if (isFieldDef(xDef) && xDef.type === 'quantitative') {\n        return 'x';\n    }\n    else if (isFieldDef(yDef) && yDef.type === 'quantitative') {\n        return 'y';\n    }\n    return undefined;\n}\n// Note: CompassQL uses this method and only pass in required properties of each argument object.\n// If required properties change, make sure to update CompassQL.\nexport function stack(m, encoding, stackConfig) {\n    var mark = isMarkDef(m) ? m.type : m;\n    // Should have stackable mark\n    if (!contains(STACKABLE_MARKS, mark)) {\n        return null;\n    }\n    var fieldChannel = potentialStackedChannel(encoding);\n    if (!fieldChannel) {\n        return null;\n    }\n    var stackedFieldDef = encoding[fieldChannel];\n    var stackedField = isStringFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;\n    var dimensionChannel = fieldChannel === 'x' ? 'y' : 'x';\n    var dimensionDef = encoding[dimensionChannel];\n    var dimensionField = isStringFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined;\n    // Should have grouping level of detail that is different from the dimension field\n    var stackBy = NONPOSITION_CHANNELS.reduce(function (sc, channel) {\n        if (channelHasField(encoding, channel)) {\n            var channelDef = encoding[channel];\n            (isArray(channelDef) ? channelDef : [channelDef]).forEach(function (cDef) {\n                var fieldDef = getFieldDef(cDef);\n                if (fieldDef.aggregate) {\n                    return;\n                }\n                // Check whether the channel's field is identical to x/y's field or if the channel is a repeat\n                var f = isStringFieldDef(fieldDef) ? vgField(fieldDef, {}) : undefined;\n                if (\n                // if fielddef is a repeat, just include it in the stack by\n                !f ||\n                    // otherwise, the field must be different from x and y fields.\n                    (f !== dimensionField && f !== stackedField)) {\n                    sc.push({ channel: channel, fieldDef: fieldDef });\n                }\n            });\n        }\n        return sc;\n    }, []);\n    if (stackBy.length === 0) {\n        return null;\n    }\n    // Automatically determine offset\n    var offset = undefined;\n    if (stackedFieldDef.stack !== undefined) {\n        offset = stackedFieldDef.stack;\n    }\n    else if (contains(STACK_BY_DEFAULT_MARKS, mark)) {\n        // Bar and Area with sum ops are automatically stacked by default\n        offset = stackConfig === undefined ? 'zero' : stackConfig;\n    }\n    else {\n        offset = stackConfig;\n    }\n    if (!offset || !isStackOffset(offset)) {\n        return null;\n    }\n    // warn when stacking non-linear\n    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {\n        log.warn(log.message.cannotStackNonLinearScale(stackedFieldDef.scale.type));\n    }\n    // Check if it is a ranged mark\n    if (channelHasField(encoding, fieldChannel === X ? X2 : Y2)) {\n        log.warn(log.message.cannotStackRangedMark(fieldChannel));\n        return null;\n    }\n    // Warn if stacking summative aggregate\n    if (stackedFieldDef.aggregate && !contains(SUM_OPS, stackedFieldDef.aggregate)) {\n        log.warn(log.message.stackNonSummativeAggregate(stackedFieldDef.aggregate));\n    }\n    return {\n        groupbyChannel: dimensionDef ? dimensionChannel : undefined,\n        fieldChannel: fieldChannel,\n        impute: isPathMark(mark),\n        stackBy: stackBy,\n        offset: offset\n    };\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isObject } from 'vega-util';\nimport { COLUMN, ROW, X, X2, Y, Y2 } from './channel';\nimport * as compositeMark from './compositemark';\nimport { channelHasField, isRanged } from './encoding';\nimport * as vlEncoding from './encoding';\nimport * as log from './log';\nimport { isMarkDef, isPathMark, isPrimitiveMark } from './mark';\nimport { stack } from './stack';\nimport { duplicate, hash, keys, omit, vals } from './util';\n/* Custom type guards */\nexport function isFacetSpec(spec) {\n    return spec['facet'] !== undefined;\n}\nexport function isUnitSpec(spec) {\n    return !!spec['mark'];\n}\nexport function isLayerSpec(spec) {\n    return spec['layer'] !== undefined;\n}\nexport function isRepeatSpec(spec) {\n    return spec['repeat'] !== undefined;\n}\nexport function isConcatSpec(spec) {\n    return isVConcatSpec(spec) || isHConcatSpec(spec);\n}\nexport function isVConcatSpec(spec) {\n    return spec['vconcat'] !== undefined;\n}\nexport function isHConcatSpec(spec) {\n    return spec['hconcat'] !== undefined;\n}\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n */\n// TODO: consider moving this to another file.  Maybe vl.spec.normalize or vl.normalize\nexport function normalize(spec, config) {\n    if (isFacetSpec(spec)) {\n        return normalizeFacet(spec, config);\n    }\n    if (isLayerSpec(spec)) {\n        return normalizeLayer(spec, config);\n    }\n    if (isRepeatSpec(spec)) {\n        return normalizeRepeat(spec, config);\n    }\n    if (isVConcatSpec(spec)) {\n        return normalizeVConcat(spec, config);\n    }\n    if (isHConcatSpec(spec)) {\n        return normalizeHConcat(spec, config);\n    }\n    if (isUnitSpec(spec)) {\n        var hasRow = channelHasField(spec.encoding, ROW);\n        var hasColumn = channelHasField(spec.encoding, COLUMN);\n        if (hasRow || hasColumn) {\n            return normalizeFacetedUnit(spec, config);\n        }\n        return normalizeNonFacetUnit(spec, config);\n    }\n    throw new Error(log.message.INVALID_SPEC);\n}\nfunction normalizeFacet(spec, config) {\n    var subspec = spec.spec, rest = tslib_1.__rest(spec, [\"spec\"]);\n    return tslib_1.__assign({}, rest, { \n        // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n        spec: normalize(subspec, config) });\n}\nfunction mergeEncoding(opt) {\n    var parentEncoding = opt.parentEncoding, encoding = opt.encoding;\n    if (parentEncoding && encoding) {\n        var overriden = keys(parentEncoding).reduce(function (o, key) {\n            if (encoding[key]) {\n                o.push(key);\n            }\n            return o;\n        }, []);\n        if (overriden.length > 0) {\n            log.warn(log.message.encodingOverridden(overriden));\n        }\n    }\n    var merged = tslib_1.__assign({}, (parentEncoding || {}), (encoding || {}));\n    return keys(merged).length > 0 ? merged : undefined;\n}\nfunction mergeProjection(opt) {\n    var parentProjection = opt.parentProjection, projection = opt.projection;\n    if (parentProjection && projection) {\n        log.warn(log.message.projectionOverridden({ parentProjection: parentProjection, projection: projection }));\n    }\n    return projection || parentProjection;\n}\nfunction normalizeLayer(spec, config, parentEncoding, parentProjection) {\n    var layer = spec.layer, encoding = spec.encoding, projection = spec.projection, rest = tslib_1.__rest(spec, [\"layer\", \"encoding\", \"projection\"]);\n    var mergedEncoding = mergeEncoding({ parentEncoding: parentEncoding, encoding: encoding });\n    var mergedProjection = mergeProjection({ parentProjection: parentProjection, projection: projection });\n    return tslib_1.__assign({}, rest, { layer: layer.map(function (subspec) {\n            if (isLayerSpec(subspec)) {\n                return normalizeLayer(subspec, config, mergedEncoding, mergedProjection);\n            }\n            return normalizeNonFacetUnit(subspec, config, mergedEncoding, mergedProjection);\n        }) });\n}\nfunction normalizeRepeat(spec, config) {\n    var subspec = spec.spec, rest = tslib_1.__rest(spec, [\"spec\"]);\n    return tslib_1.__assign({}, rest, { spec: normalize(subspec, config) });\n}\nfunction normalizeVConcat(spec, config) {\n    var vconcat = spec.vconcat, rest = tslib_1.__rest(spec, [\"vconcat\"]);\n    return tslib_1.__assign({}, rest, { vconcat: vconcat.map(function (subspec) { return normalize(subspec, config); }) });\n}\nfunction normalizeHConcat(spec, config) {\n    var hconcat = spec.hconcat, rest = tslib_1.__rest(spec, [\"hconcat\"]);\n    return tslib_1.__assign({}, rest, { hconcat: hconcat.map(function (subspec) { return normalize(subspec, config); }) });\n}\nfunction normalizeFacetedUnit(spec, config) {\n    // New encoding in the inside spec should not contain row / column\n    // as row/column should be moved to facet\n    var _a = spec.encoding, row = _a.row, column = _a.column, encoding = tslib_1.__rest(_a, [\"row\", \"column\"]);\n    // Mark and encoding should be moved into the inner spec\n    var mark = spec.mark, width = spec.width, projection = spec.projection, height = spec.height, selection = spec.selection, _ = spec.encoding, outerSpec = tslib_1.__rest(spec, [\"mark\", \"width\", \"projection\", \"height\", \"selection\", \"encoding\"]);\n    return tslib_1.__assign({}, outerSpec, { facet: tslib_1.__assign({}, (row ? { row: row } : {}), (column ? { column: column } : {})), spec: normalizeNonFacetUnit(tslib_1.__assign({}, (projection ? { projection: projection } : {}), { mark: mark }, (width ? { width: width } : {}), (height ? { height: height } : {}), { encoding: encoding }, (selection ? { selection: selection } : {})), config) });\n}\nfunction isNonFacetUnitSpecWithPrimitiveMark(spec) {\n    return isPrimitiveMark(spec.mark);\n}\nfunction getPointOverlay(markDef, markConfig, encoding) {\n    if (markDef.point === 'transparent') {\n        return { opacity: 0 };\n    }\n    else if (markDef.point) { // truthy : true or object\n        return isObject(markDef.point) ? markDef.point : {};\n    }\n    else if (markDef.point !== undefined) { // false or null\n        return null;\n    }\n    else { // undefined (not disabled)\n        if (markConfig.point || encoding.shape) {\n            // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\n            return isObject(markConfig.point) ? markConfig.point : {};\n        }\n        // markDef.point is defined as falsy\n        return null;\n    }\n}\nfunction getLineOverlay(markDef, markConfig) {\n    if (markDef.line) { // true or object\n        return markDef.line === true ? {} : markDef.line;\n    }\n    else if (markDef.line !== undefined) { // false or null\n        return null;\n    }\n    else { // undefined (not disabled)\n        if (markConfig.line) {\n            // enable line overlay if config[mark].line is truthy\n            return markConfig.line === true ? {} : markConfig.line;\n        }\n        // markDef.point is defined as falsy\n        return null;\n    }\n}\nfunction normalizeNonFacetUnit(spec, config, parentEncoding, parentProjection) {\n    var encoding = spec.encoding, projection = spec.projection;\n    var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n    // merge parent encoding / projection first\n    if (parentEncoding || parentProjection) {\n        var mergedProjection = mergeProjection({ parentProjection: parentProjection, projection: projection });\n        var mergedEncoding = mergeEncoding({ parentEncoding: parentEncoding, encoding: encoding });\n        return normalizeNonFacetUnit(tslib_1.__assign({}, spec, (mergedProjection ? { projection: mergedProjection } : {}), (mergedEncoding ? { encoding: mergedEncoding } : {})), config);\n    }\n    if (isNonFacetUnitSpecWithPrimitiveMark(spec)) {\n        // TODO: thoroughly test\n        if (isRanged(encoding)) {\n            return normalizeRangedUnit(spec);\n        }\n        if (mark === 'line' && (encoding.x2 || encoding.y2)) {\n            log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n            return normalizeNonFacetUnit(tslib_1.__assign({ mark: 'rule' }, spec), config, parentEncoding, parentProjection);\n        }\n        if (isPathMark(mark)) {\n            return normalizePathOverlay(spec, config);\n        }\n        return spec; // Nothing to normalize\n    }\n    else {\n        return compositeMark.normalize(spec, config);\n    }\n}\nfunction normalizeRangedUnit(spec) {\n    var hasX = channelHasField(spec.encoding, X);\n    var hasY = channelHasField(spec.encoding, Y);\n    var hasX2 = channelHasField(spec.encoding, X2);\n    var hasY2 = channelHasField(spec.encoding, Y2);\n    if ((hasX2 && !hasX) || (hasY2 && !hasY)) {\n        var normalizedSpec = duplicate(spec);\n        if (hasX2 && !hasX) {\n            normalizedSpec.encoding.x = normalizedSpec.encoding.x2;\n            delete normalizedSpec.encoding.x2;\n        }\n        if (hasY2 && !hasY) {\n            normalizedSpec.encoding.y = normalizedSpec.encoding.y2;\n            delete normalizedSpec.encoding.y2;\n        }\n        return normalizedSpec;\n    }\n    return spec;\n}\nfunction dropLineAndPoint(markDef) {\n    var _point = markDef.point, _line = markDef.line, mark = tslib_1.__rest(markDef, [\"point\", \"line\"]);\n    return keys(mark).length > 1 ? mark : mark.type;\n}\nfunction normalizePathOverlay(spec, config) {\n    var _a;\n    if (config === void 0) { config = {}; }\n    // _ is used to denote a dropped property of the unit spec\n    // which should not be carried over to the layer spec\n    var selection = spec.selection, projection = spec.projection, encoding = spec.encoding, mark = spec.mark, outerSpec = tslib_1.__rest(spec, [\"selection\", \"projection\", \"encoding\", \"mark\"]);\n    var markDef = isMarkDef(mark) ? mark : { type: mark };\n    var pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\n    var lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\n    if (!pointOverlay && !lineOverlay) {\n        return tslib_1.__assign({}, spec, { \n            // Do not include point / line overlay in the normalize spec\n            mark: dropLineAndPoint(markDef) });\n    }\n    var layer = [tslib_1.__assign({}, (selection ? { selection: selection } : {}), { \n            // Do not include point / line overlay in the normalize spec\n            mark: dropLineAndPoint(tslib_1.__assign({}, markDef, (markDef.type === 'area' ? { opacity: 0.7 } : {}))), \n            // drop shape from encoding as this might be used to trigger point overlay\n            encoding: omit(encoding, ['shape']) })];\n    // FIXME: disable tooltip for the line layer if tooltip is not group-by field.\n    // FIXME: determine rules for applying selections.\n    // Need to copy stack config to overlayed layer\n    var stackProps = stack(markDef, encoding, config ? config.stack : undefined);\n    var overlayEncoding = encoding;\n    if (stackProps) {\n        var stackFieldChannel = stackProps.fieldChannel, offset = stackProps.offset;\n        overlayEncoding = tslib_1.__assign({}, encoding, (_a = {}, _a[stackFieldChannel] = tslib_1.__assign({}, encoding[stackFieldChannel], (offset ? { stack: offset } : {})), _a));\n    }\n    if (lineOverlay) {\n        var interpolate = markDef.interpolate;\n        layer.push(tslib_1.__assign({}, (projection ? { projection: projection } : {}), { mark: tslib_1.__assign({ type: 'line' }, lineOverlay, (interpolate ? { interpolate: interpolate } : {})), encoding: overlayEncoding }));\n    }\n    if (pointOverlay) {\n        layer.push(tslib_1.__assign({}, (projection ? { projection: projection } : {}), { mark: tslib_1.__assign({ type: 'point', opacity: 1, filled: true }, pointOverlay), encoding: overlayEncoding }));\n    }\n    return tslib_1.__assign({}, outerSpec, { layer: layer });\n}\n// TODO: add vl.spec.validate & move stuff from vl.validate to here\n/* Accumulate non-duplicate fieldDefs in a dictionary */\nfunction accumulate(dict, defs) {\n    defs.forEach(function (fieldDef) {\n        // Consider only pure fieldDef properties (ignoring scale, axis, legend)\n        var pureFieldDef = ['field', 'type', 'value', 'timeUnit', 'bin', 'aggregate'].reduce(function (f, key) {\n            if (fieldDef[key] !== undefined) {\n                f[key] = fieldDef[key];\n            }\n            return f;\n        }, {});\n        var key = hash(pureFieldDef);\n        dict[key] = dict[key] || fieldDef;\n    });\n    return dict;\n}\n/* Recursively get fieldDefs from a spec, returns a dictionary of fieldDefs */\nfunction fieldDefIndex(spec, dict) {\n    if (dict === void 0) { dict = {}; }\n    // FIXME(https://github.com/vega/vega-lite/issues/2207): Support fieldDefIndex for repeat\n    if (isLayerSpec(spec)) {\n        spec.layer.forEach(function (layer) {\n            if (isUnitSpec(layer)) {\n                accumulate(dict, vlEncoding.fieldDefs(layer.encoding));\n            }\n            else {\n                fieldDefIndex(layer, dict);\n            }\n        });\n    }\n    else if (isFacetSpec(spec)) {\n        accumulate(dict, vlEncoding.fieldDefs(spec.facet));\n        fieldDefIndex(spec.spec, dict);\n    }\n    else if (isRepeatSpec(spec)) {\n        fieldDefIndex(spec.spec, dict);\n    }\n    else if (isConcatSpec(spec)) {\n        var childSpec = isVConcatSpec(spec) ? spec.vconcat : spec.hconcat;\n        childSpec.forEach(function (child) { return fieldDefIndex(child, dict); });\n    }\n    else { // Unit Spec\n        accumulate(dict, vlEncoding.fieldDefs(spec.encoding));\n    }\n    return dict;\n}\n/* Returns all non-duplicate fieldDefs in a spec in a flat array */\nexport function fieldDefs(spec) {\n    return vals(fieldDefIndex(spec));\n}\nexport function isStacked(spec, config) {\n    config = config || spec.config;\n    if (isPrimitiveMark(spec.mark)) {\n        return stack(spec.mark, spec.encoding, config ? config.stack : undefined) !== null;\n    }\n    return false;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isString } from 'vega-util';\nimport * as log from './log';\nfunction _normalizeAutoSize(autosize) {\n    return isString(autosize) ? { type: autosize } : autosize || {};\n}\nexport function normalizeAutoSize(topLevelAutosize, configAutosize, isUnitOrLayer) {\n    if (isUnitOrLayer === void 0) { isUnitOrLayer = true; }\n    var autosize = tslib_1.__assign({ type: 'pad' }, _normalizeAutoSize(configAutosize), _normalizeAutoSize(topLevelAutosize));\n    if (autosize.type === 'fit') {\n        if (!isUnitOrLayer) {\n            log.warn(log.message.FIT_NON_SINGLE);\n            autosize.type = 'pad';\n        }\n    }\n    return autosize;\n}\nvar TOP_LEVEL_PROPERTIES = [\n    'background', 'padding', 'datasets'\n    // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n];\nexport function extractTopLevelProperties(t) {\n    return TOP_LEVEL_PROPERTIES.reduce(function (o, p) {\n        if (t && t[p] !== undefined) {\n            o[p] = t[p];\n        }\n        return o;\n    }, {});\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9wbGV2ZWxwcm9wcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b3BsZXZlbHByb3BzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBR25DLE9BQU8sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDO0FBbUU3Qiw0QkFBNEIsUUFBdUM7SUFDakUsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO0FBQ2hFLENBQUM7QUFFRCxNQUFNLDRCQUE0QixnQkFBK0MsRUFBRSxjQUE2QyxFQUFFLGFBQTZCO0lBQTdCLDhCQUFBLEVBQUEsb0JBQTZCO0lBQzdKLElBQU0sUUFBUSxzQkFDWixJQUFJLEVBQUUsS0FBSyxJQUNSLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxFQUNsQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUN4QyxDQUFDO0lBRUYsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtRQUMzQixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNyQyxRQUFRLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztTQUN2QjtLQUNGO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQztBQUVELElBQU0sb0JBQW9CLEdBQWlDO0lBQ3pELFlBQVksRUFBRSxTQUFTLEVBQUUsVUFBVTtJQUNuQyxtSEFBbUg7Q0FDcEgsQ0FBQztBQUVGLE1BQU0sb0NBQWtFLENBQUk7SUFDMUUsT0FBTyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQzNCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDYjtRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTdHJpbmd9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5cbmltcG9ydCB7SW5saW5lRGF0YXNldH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCAqIGFzIGxvZyBmcm9tICcuL2xvZyc7XG5pbXBvcnQge0RpY3R9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICogQG1pbmltdW0gMFxuICovXG5leHBvcnQgdHlwZSBQYWRkaW5nID0gbnVtYmVyIHwge3RvcD86IG51bWJlciwgYm90dG9tPzogbnVtYmVyLCBsZWZ0PzogbnVtYmVyLCByaWdodD86IG51bWJlcn07XG5cbmV4cG9ydCB0eXBlIERhdGFzZXRzID0gRGljdDxJbmxpbmVEYXRhc2V0PjtcblxuZXhwb3J0IGludGVyZmFjZSBUb3BMZXZlbFByb3BlcnRpZXMge1xuICAvKipcbiAgICogQ1NTIGNvbG9yIHByb3BlcnR5IHRvIHVzZSBhcyB0aGUgYmFja2dyb3VuZCBvZiB2aXN1YWxpemF0aW9uLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gbm9uZSAodHJhbnNwYXJlbnQpXG4gICAqL1xuICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVmYXVsdCB2aXN1YWxpemF0aW9uIHBhZGRpbmcsIGluIHBpeGVscywgZnJvbSB0aGUgZWRnZSBvZiB0aGUgdmlzdWFsaXphdGlvbiBjYW52YXMgdG8gdGhlIGRhdGEgcmVjdGFuZ2xlLiAgSWYgYSBudW1iZXIsIHNwZWNpZmllcyBwYWRkaW5nIGZvciBhbGwgc2lkZXMuXG4gICAqIElmIGFuIG9iamVjdCwgdGhlIHZhbHVlIHNob3VsZCBoYXZlIHRoZSBmb3JtYXQgYHtcImxlZnRcIjogNSwgXCJ0b3BcIjogNSwgXCJyaWdodFwiOiA1LCBcImJvdHRvbVwiOiA1fWAgdG8gc3BlY2lmeSBwYWRkaW5nIGZvciBlYWNoIHNpZGUgb2YgdGhlIHZpc3VhbGl6YXRpb24uXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgNWBcbiAgICovXG4gIHBhZGRpbmc/OiBQYWRkaW5nO1xuXG4gIC8qKlxuICAgKiBTZXRzIGhvdyB0aGUgdmlzdWFsaXphdGlvbiBzaXplIHNob3VsZCBiZSBkZXRlcm1pbmVkLiBJZiBhIHN0cmluZywgc2hvdWxkIGJlIG9uZSBvZiBgXCJwYWRcImAsIGBcImZpdFwiYCBvciBgXCJub25lXCJgLlxuICAgKiBPYmplY3QgdmFsdWVzIGNhbiBhZGRpdGlvbmFsbHkgc3BlY2lmeSBwYXJhbWV0ZXJzIGZvciBjb250ZW50IHNpemluZyBhbmQgYXV0b21hdGljIHJlc2l6aW5nLlxuICAgKiBgXCJmaXRcImAgaXMgb25seSBzdXBwb3J0ZWQgZm9yIHNpbmdsZSBhbmQgbGF5ZXJlZCB2aWV3cyB0aGF0IGRvbid0IHVzZSBgcmFuZ2VTdGVwYC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlX186IGBwYWRgXG4gICAqL1xuICBhdXRvc2l6ZT86IEF1dG9zaXplVHlwZSB8IEF1dG9TaXplUGFyYW1zO1xuXG4gIC8qKlxuICAgKiBBIGdsb2JhbCBkYXRhIHN0b3JlIGZvciBuYW1lZCBkYXRhc2V0cy4gVGhpcyBpcyBhIG1hcHBpbmcgZnJvbSBuYW1lcyB0byBpbmxpbmUgZGF0YXNldHMuXG4gICAqIFRoaXMgY2FuIGJlIGFuIGFycmF5IG9mIG9iamVjdHMgb3IgcHJpbWl0aXZlIHZhbHVlcyBvciBhIHN0cmluZy4gQXJyYXlzIG9mIHByaW1pdGl2ZSB2YWx1ZXMgYXJlIGluZ2VzdGVkIGFzIG9iamVjdHMgd2l0aCBhIGBkYXRhYCBwcm9wZXJ0eS5cbiAgICovXG4gIGRhdGFzZXRzPzogRGF0YXNldHM7XG59XG5cbmV4cG9ydCB0eXBlIEF1dG9zaXplVHlwZSA9ICdwYWQnIHwgJ2ZpdCcgfCAnbm9uZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXV0b1NpemVQYXJhbXMge1xuICAvKipcbiAgICogVGhlIHNpemluZyBmb3JtYXQgdHlwZS4gT25lIG9mIGBcInBhZFwiYCwgYFwiZml0XCJgIG9yIGBcIm5vbmVcImAuIFNlZSB0aGUgW2F1dG9zaXplIHR5cGVdKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3Mvc2l6ZS5odG1sI2F1dG9zaXplKSBkb2N1bWVudGF0aW9uIGZvciBkZXNjcmlwdGlvbnMgb2YgZWFjaC5cbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlX186IGBcInBhZFwiYFxuICAgKi9cbiAgdHlwZT86IEF1dG9zaXplVHlwZTtcblxuICAvKipcbiAgICogQSBib29sZWFuIGZsYWcgaW5kaWNhdGluZyBpZiBhdXRvc2l6ZSBsYXlvdXQgc2hvdWxkIGJlIHJlLWNhbGN1bGF0ZWQgb24gZXZlcnkgdmlldyB1cGRhdGUuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgZmFsc2VgXG4gICAqL1xuICByZXNpemU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGhvdyBzaXplIGNhbGN1bGF0aW9uIHNob3VsZCBiZSBwZXJmb3JtZWQsIG9uZSBvZiBgXCJjb250ZW50XCJgIG9yIGBcInBhZGRpbmdcImAuIFRoZSBkZWZhdWx0IHNldHRpbmcgKGBcImNvbnRlbnRcImApIGludGVycHJldHMgdGhlIHdpZHRoIGFuZCBoZWlnaHQgc2V0dGluZ3MgYXMgdGhlIGRhdGEgcmVjdGFuZ2xlIChwbG90dGluZykgZGltZW5zaW9ucywgdG8gd2hpY2ggcGFkZGluZyBpcyB0aGVuIGFkZGVkLiBJbiBjb250cmFzdCwgdGhlIGBcInBhZGRpbmdcImAgc2V0dGluZyBpbmNsdWRlcyB0aGUgcGFkZGluZyB3aXRoaW4gdGhlIHZpZXcgc2l6ZSBjYWxjdWxhdGlvbnMsIHN1Y2ggdGhhdCB0aGUgd2lkdGggYW5kIGhlaWdodCBzZXR0aW5ncyBpbmRpY2F0ZSB0aGUgKip0b3RhbCoqIGludGVuZGVkIHNpemUgb2YgdGhlIHZpZXcuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZV9fOiBgXCJjb250ZW50XCJgXG4gICAqL1xuICBjb250YWlucz86ICdjb250ZW50JyB8ICdwYWRkaW5nJztcbn1cblxuZnVuY3Rpb24gX25vcm1hbGl6ZUF1dG9TaXplKGF1dG9zaXplOiBBdXRvc2l6ZVR5cGUgfCBBdXRvU2l6ZVBhcmFtcykge1xuICByZXR1cm4gaXNTdHJpbmcoYXV0b3NpemUpID8ge3R5cGU6IGF1dG9zaXplfSA6IGF1dG9zaXplIHx8IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQXV0b1NpemUodG9wTGV2ZWxBdXRvc2l6ZTogQXV0b3NpemVUeXBlIHwgQXV0b1NpemVQYXJhbXMsIGNvbmZpZ0F1dG9zaXplOiBBdXRvc2l6ZVR5cGUgfCBBdXRvU2l6ZVBhcmFtcywgaXNVbml0T3JMYXllcjogYm9vbGVhbiA9IHRydWUpOiBBdXRvU2l6ZVBhcmFtcyB7XG4gIGNvbnN0IGF1dG9zaXplOiBBdXRvU2l6ZVBhcmFtcyA9IHtcbiAgICB0eXBlOiAncGFkJyxcbiAgICAuLi5fbm9ybWFsaXplQXV0b1NpemUoY29uZmlnQXV0b3NpemUpLFxuICAgIC4uLl9ub3JtYWxpemVBdXRvU2l6ZSh0b3BMZXZlbEF1dG9zaXplKVxuICB9O1xuXG4gIGlmIChhdXRvc2l6ZS50eXBlID09PSAnZml0Jykge1xuICAgIGlmICghaXNVbml0T3JMYXllcikge1xuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuRklUX05PTl9TSU5HTEUpO1xuICAgICAgYXV0b3NpemUudHlwZSA9ICdwYWQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdXRvc2l6ZTtcbn1cblxuY29uc3QgVE9QX0xFVkVMX1BST1BFUlRJRVM6IChrZXlvZiBUb3BMZXZlbFByb3BlcnRpZXMpW10gPSBbXG4gICdiYWNrZ3JvdW5kJywgJ3BhZGRpbmcnLCAnZGF0YXNldHMnXG4gIC8vIFdlIGRvIG5vdCBpbmNsdWRlIFwiYXV0b3NpemVcIiBoZXJlIGFzIGl0IGlzIHN1cHBvcnRlZCBieSBvbmx5IHVuaXQgYW5kIGxheWVyIHNwZWNzIGFuZCB0aHVzIG5lZWQgdG8gYmUgbm9ybWFsaXplZFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RUb3BMZXZlbFByb3BlcnRpZXM8VCBleHRlbmRzIFRvcExldmVsUHJvcGVydGllcz4odDogVCkge1xuICByZXR1cm4gVE9QX0xFVkVMX1BST1BFUlRJRVMucmVkdWNlKChvLCBwKSA9PiB7XG4gICAgaWYgKHQgJiYgdFtwXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBvW3BdID0gdFtwXTtcbiAgICB9XG4gICAgcmV0dXJuIG87XG4gIH0sIHt9KTtcbn1cbiJdfQ==","export function isUrlData(data) {\n    return !!data['url'];\n}\nexport function isInlineData(data) {\n    return !!data['values'];\n}\nexport function isNamedData(data) {\n    return !!data['name'] && !isUrlData(data) && !isInlineData(data);\n}\nexport var MAIN = 'main';\nexport var RAW = 'raw';\n//# sourceMappingURL=data:application/json;base64,","/**\n * Parse an event selector string.\n * Returns an array of event stream definitions.\n */\nexport default function(selector, source, marks) {\n  DEFAULT_SOURCE = source || VIEW;\n  MARKS = marks || DEFAULT_MARKS;\n  return parseMerge(selector.trim()).map(parseSelector);\n}\n\nvar VIEW    = 'view',\n    LBRACK  = '[',\n    RBRACK  = ']',\n    LBRACE  = '{',\n    RBRACE  = '}',\n    COLON   = ':',\n    COMMA   = ',',\n    NAME    = '@',\n    GT      = '>',\n    ILLEGAL = /[[\\]{}]/,\n    DEFAULT_SOURCE,\n    MARKS,\n    DEFAULT_MARKS = {\n      '*': 1,\n      arc: 1,\n      area: 1,\n      group: 1,\n      image: 1,\n      line: 1,\n      path: 1,\n      rect: 1,\n      rule: 1,\n      shape: 1,\n      symbol: 1,\n      text: 1,\n      trail: 1\n    };\n\nfunction isMarkType(type) {\n  return MARKS.hasOwnProperty(type);\n}\n\nfunction find(s, i, endChar, pushChar, popChar) {\n  var count = 0,\n      n = s.length,\n      c;\n  for (; i<n; ++i) {\n    c = s[i];\n    if (!count && c === endChar) return i;\n    else if (popChar && popChar.indexOf(c) >= 0) --count;\n    else if (pushChar && pushChar.indexOf(c) >= 0) ++count;\n  }\n  return i;\n}\n\nfunction parseMerge(s) {\n  var output = [],\n      start = 0,\n      n = s.length,\n      i = 0;\n\n  while (i < n) {\n    i = find(s, i, COMMA, LBRACK + LBRACE, RBRACK + RBRACE);\n    output.push(s.substring(start, i).trim());\n    start = ++i;\n  }\n\n  if (output.length === 0) {\n    throw 'Empty event selector: ' + s;\n  }\n  return output;\n}\n\nfunction parseSelector(s) {\n  return s[0] === '['\n    ? parseBetween(s)\n    : parseStream(s);\n}\n\nfunction parseBetween(s) {\n  var n = s.length,\n      i = 1,\n      b, stream;\n\n  i = find(s, i, RBRACK, LBRACK, RBRACK);\n  if (i === n) {\n    throw 'Empty between selector: ' + s;\n  }\n\n  b = parseMerge(s.substring(1, i));\n  if (b.length !== 2) {\n    throw 'Between selector must have two elements: ' + s;\n  }\n\n  s = s.slice(i + 1).trim();\n  if (s[0] !== GT) {\n    throw 'Expected \\'>\\' after between selector: ' + s;\n  }\n\n  b = b.map(parseSelector);\n\n  stream = parseSelector(s.slice(1).trim());\n  if (stream.between) {\n    return {\n      between: b,\n      stream: stream\n    };\n  } else {\n    stream.between = b;\n  }\n\n  return stream;\n}\n\nfunction parseStream(s) {\n  var stream = {source: DEFAULT_SOURCE},\n      source = [],\n      throttle = [0, 0],\n      markname = 0,\n      start = 0,\n      n = s.length,\n      i = 0, j,\n      filter;\n\n  // extract throttle from end\n  if (s[n-1] === RBRACE) {\n    i = s.lastIndexOf(LBRACE);\n    if (i >= 0) {\n      try {\n        throttle = parseThrottle(s.substring(i+1, n-1));\n      } catch (e) {\n        throw 'Invalid throttle specification: ' + s;\n      }\n      s = s.slice(0, i).trim();\n      n = s.length;\n    } else throw 'Unmatched right brace: ' + s;\n    i = 0;\n  }\n\n  if (!n) throw s;\n\n  // set name flag based on first char\n  if (s[0] === NAME) markname = ++i;\n\n  // extract first part of multi-part stream selector\n  j = find(s, i, COLON);\n  if (j < n) {\n    source.push(s.substring(start, j).trim());\n    start = i = ++j;\n  }\n\n  // extract remaining part of stream selector\n  i = find(s, i, LBRACK);\n  if (i === n) {\n    source.push(s.substring(start, n).trim());\n  } else {\n    source.push(s.substring(start, i).trim());\n    filter = [];\n    start = ++i;\n    if (start === n) throw 'Unmatched left bracket: ' + s;\n  }\n\n  // extract filters\n  while (i < n) {\n    i = find(s, i, RBRACK);\n    if (i === n) throw 'Unmatched left bracket: ' + s;\n    filter.push(s.substring(start, i).trim());\n    if (i < n-1 && s[++i] !== LBRACK) throw 'Expected left bracket: ' + s;\n    start = ++i;\n  }\n\n  // marshall event stream specification\n  if (!(n = source.length) || ILLEGAL.test(source[n-1])) {\n    throw 'Invalid event selector: ' + s;\n  }\n\n  if (n > 1) {\n    stream.type = source[1];\n    if (markname) {\n      stream.markname = source[0].slice(1);\n    } else if (isMarkType(source[0])) {\n      stream.marktype = source[0];\n    } else {\n      stream.source = source[0];\n    }\n  } else {\n    stream.type = source[0];\n  }\n  if (stream.type.slice(-1) === '!') {\n    stream.consume = true;\n    stream.type = stream.type.slice(0, -1)\n  }\n  if (filter != null) stream.filter = filter;\n  if (throttle[0]) stream.throttle = throttle[0];\n  if (throttle[1]) stream.debounce = throttle[1];\n\n  return stream;\n}\n\nfunction parseThrottle(s) {\n  var a = s.split(COMMA);\n  if (!s.length || a.length > 2) throw s;\n  return a.map(function(_) {\n    var x = +_;\n    if (x !== x) throw s;\n    return x;\n  });\n}\n","import { isArray } from 'vega-util';\nimport { flagKeys } from './util';\nexport function isVgSignalRef(o) {\n    return !!o['signal'];\n}\nexport function isVgRangeStep(range) {\n    return !!range['step'];\n}\nexport function isDataRefUnionedDomain(domain) {\n    if (!isArray(domain)) {\n        return 'fields' in domain && !('data' in domain);\n    }\n    return false;\n}\nexport function isFieldRefUnionDomain(domain) {\n    if (!isArray(domain)) {\n        return 'fields' in domain && 'data' in domain;\n    }\n    return false;\n}\nexport function isDataRefDomain(domain) {\n    if (!isArray(domain)) {\n        return 'field' in domain && 'data' in domain;\n    }\n    return false;\n}\nexport function isSignalRefDomain(domain) {\n    if (!isArray(domain)) {\n        return 'signal' in domain;\n    }\n    return false;\n}\nvar VG_MARK_CONFIG_INDEX = {\n    opacity: 1,\n    fill: 1,\n    fillOpacity: 1,\n    stroke: 1,\n    strokeCap: 1,\n    strokeWidth: 1,\n    strokeOpacity: 1,\n    strokeDash: 1,\n    strokeDashOffset: 1,\n    size: 1,\n    shape: 1,\n    interpolate: 1,\n    tension: 1,\n    orient: 1,\n    align: 1,\n    baseline: 1,\n    text: 1,\n    limit: 1,\n    dx: 1,\n    dy: 1,\n    radius: 1,\n    theta: 1,\n    angle: 1,\n    font: 1,\n    fontSize: 1,\n    fontWeight: 1,\n    fontStyle: 1,\n    cursor: 1,\n    href: 1,\n};\nexport var VG_MARK_CONFIGS = flagKeys(VG_MARK_CONFIG_INDEX);\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { AXIS_PARTS, AXIS_PROPERTY_TYPE } from '../../axis';\nimport { title as fieldDefTitle } from '../../fielddef';\nimport { keys } from '../../util';\nfunction assembleTitle(title, config) {\n    if (isArray(title)) {\n        return title.map(function (fieldDef) { return fieldDefTitle(fieldDef, config); }).join(', ');\n    }\n    return title;\n}\nexport function assembleAxis(axisCmpt, kind, config, opt) {\n    if (opt === void 0) { opt = { header: false }; }\n    var _a = axisCmpt.combine(), orient = _a.orient, scale = _a.scale, title = _a.title, zindex = _a.zindex, axis = tslib_1.__rest(_a, [\"orient\", \"scale\", \"title\", \"zindex\"]);\n    // Remove properties that are not valid for this kind of axis\n    keys(axis).forEach(function (key) {\n        var propType = AXIS_PROPERTY_TYPE[key];\n        if (propType && propType !== kind && propType !== 'both') {\n            delete axis[key];\n        }\n    });\n    if (kind === 'grid') {\n        if (!axis.grid) {\n            return undefined;\n        }\n        // Remove unnecessary encode block\n        if (axis.encode) {\n            // Only need to keep encode block for grid\n            var grid = axis.encode.grid;\n            axis.encode = tslib_1.__assign({}, (grid ? { grid: grid } : {}));\n            if (keys(axis.encode).length === 0) {\n                delete axis.encode;\n            }\n        }\n        return tslib_1.__assign({ scale: scale,\n            orient: orient }, axis, { domain: false, labels: false, \n            // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`\n            // would not affect gridAxis\n            maxExtent: 0, minExtent: 0, ticks: false, zindex: zindex !== undefined ? zindex : 0 // put grid behind marks by default\n         });\n    }\n    else { // kind === 'main'\n        if (!opt.header && axisCmpt.mainExtracted) {\n            // if mainExtracted has been extracted to a separate facet\n            return undefined;\n        }\n        // Remove unnecessary encode block\n        if (axis.encode) {\n            for (var _i = 0, AXIS_PARTS_1 = AXIS_PARTS; _i < AXIS_PARTS_1.length; _i++) {\n                var part = AXIS_PARTS_1[_i];\n                if (!axisCmpt.hasAxisPart(part)) {\n                    delete axis.encode[part];\n                }\n            }\n            if (keys(axis.encode).length === 0) {\n                delete axis.encode;\n            }\n        }\n        var titleString = assembleTitle(title, config);\n        return tslib_1.__assign({ scale: scale,\n            orient: orient, grid: false }, (titleString ? { title: titleString } : {}), axis, { zindex: zindex !== undefined ? zindex : 1 // put axis line above marks by default\n         });\n    }\n}\nexport function assembleAxes(axisComponents, config) {\n    var _a = axisComponents.x, x = _a === void 0 ? [] : _a, _b = axisComponents.y, y = _b === void 0 ? [] : _b;\n    return x.map(function (a) { return assembleAxis(a, 'main', config); }).concat(x.map(function (a) { return assembleAxis(a, 'grid', config); }), y.map(function (a) { return assembleAxis(a, 'main', config); }), y.map(function (a) { return assembleAxis(a, 'grid', config); })).filter(function (a) { return a; }); // filter undefined\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\n/**\n * Utility files for producing Vega ValueRef for marks\n */\nimport { isArray, isString } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { isFieldDef, isValueDef, vgField, } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport { QUANTITATIVE } from '../../type';\nimport { contains, some } from '../../util';\nimport { binRequiresRange, formatSignalRef } from '../common';\n// TODO: we need to find a way to refactor these so that scaleName is a part of scale\n// but that's complicated.  For now, this is a huge step moving forward.\n/**\n * @return Vega ValueRef for stackable x or y\n */\nexport function stackable(channel, channelDef, scaleName, scale, stack, defaultRef) {\n    if (isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {\n        // x or y use stack_end so that stacked line's point mark use stack_end too.\n        return fieldRef(channelDef, scaleName, { suffix: 'end' });\n    }\n    return midPoint(channel, channelDef, scaleName, scale, stack, defaultRef);\n}\n/**\n * @return Vega ValueRef for stackable x2 or y2\n */\nexport function stackable2(channel, aFieldDef, a2fieldDef, scaleName, scale, stack, defaultRef) {\n    if (isFieldDef(aFieldDef) && stack &&\n        // If fieldChannel is X and channel is X2 (or Y and Y2)\n        channel.charAt(0) === stack.fieldChannel.charAt(0)) {\n        return fieldRef(aFieldDef, scaleName, { suffix: 'start' });\n    }\n    return midPoint(channel, a2fieldDef, scaleName, scale, stack, defaultRef);\n}\nexport function getOffset(channel, markDef) {\n    var offsetChannel = channel + 'Offset';\n    // TODO: in the future read from encoding channel too\n    var markDefOffsetValue = markDef[offsetChannel];\n    if (markDefOffsetValue) {\n        return markDefOffsetValue;\n    }\n    return undefined;\n}\n/**\n * Value Ref for binned fields\n */\nexport function bin(fieldDef, scaleName, side, offset) {\n    var binSuffix = side === 'start' ? undefined : 'end';\n    return fieldRef(fieldDef, scaleName, { binSuffix: binSuffix }, offset ? { offset: offset } : {});\n}\nexport function fieldRef(fieldDef, scaleName, opt, mixins) {\n    var ref = tslib_1.__assign({}, (scaleName ? { scale: scaleName } : {}), { field: vgField(fieldDef, opt) });\n    if (mixins) {\n        return tslib_1.__assign({}, ref, mixins);\n    }\n    return ref;\n}\nexport function bandRef(scaleName, band) {\n    if (band === void 0) { band = true; }\n    return {\n        scale: scaleName,\n        band: band\n    };\n}\n/**\n * Signal that returns the middle of a bin. Should only be used with x and y.\n */\nfunction binMidSignal(fieldDef, scaleName) {\n    return {\n        signal: \"(\" +\n            (\"scale(\\\"\" + scaleName + \"\\\", \" + vgField(fieldDef, { expr: 'datum' }) + \")\") +\n            \" + \" +\n            (\"scale(\\\"\" + scaleName + \"\\\", \" + vgField(fieldDef, { binSuffix: 'end', expr: 'datum' }) + \")\") +\n            \")/2\"\n    };\n}\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nexport function midPoint(channel, channelDef, scaleName, scale, stack, defaultRef) {\n    // TODO: datum support\n    if (channelDef) {\n        /* istanbul ignore else */\n        if (isFieldDef(channelDef)) {\n            if (channelDef.bin) {\n                // Use middle only for x an y to place marks in the center between start and end of the bin range.\n                // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n                if (contains([X, Y], channel) && channelDef.type === QUANTITATIVE) {\n                    if (stack && stack.impute) {\n                        // For stack, we computed bin_mid so we can impute.\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'mid' });\n                    }\n                    // For non-stack, we can just calculate bin mid on the fly using signal.\n                    return binMidSignal(channelDef, scaleName);\n                }\n                return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {});\n            }\n            if (scale) {\n                var scaleType = scale.get('type');\n                if (hasDiscreteDomain(scaleType)) {\n                    if (scaleType === 'band') {\n                        // For band, to get mid point, need to offset by half of the band\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { band: 0.5 });\n                    }\n                    return fieldRef(channelDef, scaleName, { binSuffix: 'range' });\n                }\n            }\n            return fieldRef(channelDef, scaleName, {}); // no need for bin suffix\n        }\n        else if (isValueDef(channelDef)) {\n            var value = channelDef.value;\n            if (contains(['x', 'x2'], channel) && value === 'width') {\n                return { field: { group: 'width' } };\n            }\n            else if (contains(['y', 'y2'], channel) && value === 'height') {\n                return { field: { group: 'height' } };\n            }\n            return { value: value };\n        }\n        // If channelDef is neither field def or value def, it's a condition-only def.\n        // In such case, we will use default ref.\n    }\n    return defaultRef;\n}\nexport function text(textDef, config) {\n    // text\n    if (textDef) {\n        if (isFieldDef(textDef)) {\n            return formatSignalRef(textDef, textDef.format, 'datum', config);\n        }\n        else if (isValueDef(textDef)) {\n            return { value: textDef.value };\n        }\n    }\n    return undefined;\n}\nexport function mid(sizeRef) {\n    return tslib_1.__assign({}, sizeRef, { mult: 0.5 });\n}\n/**\n * Whether the scale definitely includes zero in the domain\n */\nfunction domainDefinitelyIncludeZero(scale) {\n    if (scale.get('zero') !== false) {\n        return true;\n    }\n    var domains = scale.domains;\n    if (isArray(domains)) {\n        return some(domains, function (d) { return isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0; });\n    }\n    return false;\n}\nexport function getDefaultRef(defaultRef, channel, scaleName, scale, mark) {\n    if (isString(defaultRef)) {\n        if (scaleName) {\n            var scaleType = scale.get('type');\n            if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {\n                // Log scales cannot have zero.\n                // Zero in time scale is arbitrary, and does not affect ratio.\n                // (Time is an interval level of measurement, not ratio).\n                // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n                if (mark === 'bar' || mark === 'area') {\n                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { scaleType: scaleType }));\n                }\n            }\n            else {\n                if (domainDefinitelyIncludeZero(scale)) {\n                    return {\n                        scale: scaleName,\n                        value: 0\n                    };\n                }\n                if (mark === 'bar' || mark === 'area') {\n                    log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, channel, { zeroFalse: scale.explicit.zero === false }));\n                }\n            }\n        }\n        if (defaultRef === 'zeroOrMin') {\n            return channel === 'x' ? { value: 0 } : { field: { group: 'height' } };\n        }\n        else { // zeroOrMax\n            return channel === 'x' ? { field: { group: 'width' } } : { value: 0 };\n        }\n    }\n    return defaultRef;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { getFieldDef, isConditionalSelection, isValueDef, vgField, } from '../../fielddef';\nimport * as log from '../../log';\nimport { expression } from '../../predicate';\nimport { hasContinuousDomain } from '../../scale';\nimport { contains } from '../../util';\nimport { VG_MARK_CONFIGS } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport { selectionPredicate } from '../selection/selection';\nimport * as ref from './valueref';\nexport function color(model, opt) {\n    var _a, _b;\n    if (opt === void 0) { opt = { valueOnly: false }; }\n    var markDef = model.markDef, encoding = model.encoding, config = model.config;\n    var filled = markDef.filled, markType = markDef.type;\n    var configValue = {\n        fill: getMarkConfig('fill', markDef, config),\n        stroke: getMarkConfig('stroke', markDef, config),\n        color: getMarkConfig('color', markDef, config)\n    };\n    var transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType) ? 'transparent' : undefined;\n    var defaultValue = {\n        fill: markDef.fill || configValue.fill ||\n            // If there is no fill, always fill symbols, bar, geoshape\n            // with transparent fills https://github.com/vega/vega-lite/issues/1316\n            transparentIfNeeded,\n        stroke: markDef.stroke || configValue.stroke\n    };\n    var colorVgChannel = filled ? 'fill' : 'stroke';\n    var fillStrokeMarkDefAndConfig = tslib_1.__assign({}, (defaultValue.fill ? {\n        fill: { value: defaultValue.fill }\n    } : {}), (defaultValue.stroke ? {\n        stroke: { value: defaultValue.stroke }\n    } : {}));\n    if (encoding.fill || encoding.stroke) {\n        // ignore encoding.color, markDef.color, config.color\n        if (markDef.color) {\n            // warn for markDef.color  (no need to warn encoding.color as it will be dropped in normalized already)\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n        }\n        return tslib_1.__assign({}, nonPosition('fill', model, { defaultValue: defaultValue.fill || transparentIfNeeded }), nonPosition('stroke', model, { defaultValue: defaultValue.stroke }));\n    }\n    else if (encoding.color) {\n        return tslib_1.__assign({}, fillStrokeMarkDefAndConfig, nonPosition('color', model, {\n            vgChannel: colorVgChannel,\n            // apply default fill/stroke first, then color config, then transparent if needed.\n            defaultValue: markDef[colorVgChannel] || markDef.color || configValue[colorVgChannel] || configValue.color || (filled ? transparentIfNeeded : undefined)\n        }));\n    }\n    else if (markDef.fill || markDef.stroke) {\n        // Ignore markDef.color, config.color\n        if (markDef.color) {\n            log.warn(log.message.droppingColor('property', { fill: 'fill' in markDef, stroke: 'stroke' in markDef }));\n        }\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (markDef.color) {\n        return tslib_1.__assign({}, fillStrokeMarkDefAndConfig, (_a = {}, _a[colorVgChannel] = { value: markDef.color }, _a));\n    }\n    else if (configValue.fill || configValue.stroke) {\n        // ignore config.color\n        return fillStrokeMarkDefAndConfig;\n    }\n    else if (configValue.color) {\n        return tslib_1.__assign({}, (transparentIfNeeded ? { fill: { value: 'transparent' } } : {}), (_b = {}, _b[colorVgChannel] = { value: configValue.color }, _b));\n    }\n    return {};\n}\nexport function baseEncodeEntry(model, ignore) {\n    return tslib_1.__assign({}, markDefProperties(model.markDef, ignore), color(model), nonPosition('opacity', model), tooltip(model), text(model, 'href'));\n}\nfunction markDefProperties(mark, ignore) {\n    return VG_MARK_CONFIGS.reduce(function (m, prop) {\n        if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {\n            m[prop] = { value: mark[prop] };\n        }\n        return m;\n    }, {});\n}\nexport function valueIfDefined(prop, value) {\n    var _a;\n    if (value !== undefined) {\n        return _a = {}, _a[prop] = { value: value }, _a;\n    }\n    return undefined;\n}\nfunction validPredicate(vgRef) {\n    return vgRef + \" !== null && !isNaN(\" + vgRef + \")\";\n}\nexport function defined(model) {\n    if (model.config.invalidValues === 'filter') {\n        var fields = ['x', 'y'].map(function (channel) {\n            var scaleComponent = model.getScaleComponent(channel);\n            if (scaleComponent) {\n                var scaleType = scaleComponent.get('type');\n                // Discrete domain scales can handle invalid values, but continuous scales can't.\n                if (hasContinuousDomain(scaleType)) {\n                    return model.vgField(channel, { expr: 'datum' });\n                }\n            }\n            return undefined;\n        })\n            .filter(function (field) { return !!field; })\n            .map(validPredicate);\n        if (fields.length > 0) {\n            return {\n                defined: { signal: fields.join(' && ') }\n            };\n        }\n    }\n    return {};\n}\n/**\n * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)\n */\nexport function nonPosition(channel, model, opt) {\n    if (opt === void 0) { opt = {}; }\n    var defaultValue = opt.defaultValue, vgChannel = opt.vgChannel;\n    var defaultRef = opt.defaultRef || (defaultValue !== undefined ? { value: defaultValue } : undefined);\n    var channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, vgChannel || channel, function (cDef) {\n        return ref.midPoint(channel, cDef, model.scaleName(channel), model.getScaleComponent(channel), null, // No need to provide stack for non-position as it does not affect mid point\n        defaultRef);\n    });\n}\n/**\n * Return a mixin that include a Vega production rule for a Vega-Lite conditional channel definition.\n * or a simple mixin if channel def has no condition.\n */\nexport function wrapCondition(model, channelDef, vgChannel, refFn) {\n    var _a, _b;\n    var condition = channelDef && channelDef.condition;\n    var valueRef = refFn(channelDef);\n    if (condition) {\n        var conditions = isArray(condition) ? condition : [condition];\n        var vgConditions = conditions.map(function (c) {\n            var conditionValueRef = refFn(c);\n            var test = isConditionalSelection(c) ? selectionPredicate(model, c.selection) : expression(model, c.test);\n            return tslib_1.__assign({ test: test }, conditionValueRef);\n        });\n        return _a = {},\n            _a[vgChannel] = vgConditions.concat((valueRef !== undefined ? [valueRef] : [])),\n            _a;\n    }\n    else {\n        return valueRef !== undefined ? (_b = {}, _b[vgChannel] = valueRef, _b) : {};\n    }\n}\nexport function tooltip(model) {\n    var channel = 'tooltip';\n    var channelDef = model.encoding[channel];\n    if (isArray(channelDef)) {\n        var keyValues = channelDef.map(function (fieldDef) {\n            var key = fieldDef.title !== undefined ? fieldDef.title : vgField(fieldDef, { binSuffix: 'range' });\n            var value = ref.text(fieldDef, model.config).signal;\n            return \"\\\"\" + key + \"\\\": \" + value;\n        });\n        return { tooltip: { signal: \"{\" + keyValues.join(', ') + \"}\" } };\n    }\n    else {\n        // if not an array, behave just like text\n        return textCommon(model, channel, channelDef);\n    }\n}\nexport function text(model, channel) {\n    if (channel === void 0) { channel = 'text'; }\n    var channelDef = model.encoding[channel];\n    return textCommon(model, channel, channelDef);\n}\nfunction textCommon(model, channel, channelDef) {\n    return wrapCondition(model, channelDef, channel, function (cDef) { return ref.text(cDef, model.config); });\n}\nexport function bandPosition(fieldDef, channel, model) {\n    var _a, _b, _c;\n    var scaleName = model.scaleName(channel);\n    var sizeChannel = channel === 'x' ? 'width' : 'height';\n    if (model.encoding.size || model.markDef.size !== undefined) {\n        var orient = model.markDef.orient;\n        if (orient) {\n            var centeredBandPositionMixins = (_a = {},\n                // Use xc/yc and place the mark at the middle of the band\n                // This way we never have to deal with size's condition for x/y position.\n                _a[channel + 'c'] = ref.fieldRef(fieldDef, scaleName, {}, { band: 0.5 }),\n                _a);\n            if (getFieldDef(model.encoding.size)) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (isValueDef(model.encoding.size)) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (model.markDef.size !== undefined) {\n                return tslib_1.__assign({}, centeredBandPositionMixins, (_b = {}, _b[sizeChannel] = { value: model.markDef.size }, _b));\n            }\n        }\n        else {\n            log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));\n        }\n    }\n    return _c = {},\n        _c[channel] = ref.fieldRef(fieldDef, scaleName, { binSuffix: 'range' }),\n        _c[sizeChannel] = ref.bandRef(scaleName),\n        _c;\n}\nexport function centeredBandPosition(channel, model, defaultPosRef, defaultSizeRef) {\n    var centerChannel = channel === 'x' ? 'xc' : 'yc';\n    var sizeChannel = channel === 'x' ? 'width' : 'height';\n    return tslib_1.__assign({}, pointPosition(channel, model, defaultPosRef, centerChannel), nonPosition('size', model, { defaultRef: defaultSizeRef, vgChannel: sizeChannel }));\n}\nexport function binnedPosition(fieldDef, channel, scaleName, spacing, reverse) {\n    if (channel === 'x') {\n        return {\n            x2: ref.bin(fieldDef, scaleName, 'start', reverse ? 0 : spacing),\n            x: ref.bin(fieldDef, scaleName, 'end', reverse ? spacing : 0)\n        };\n    }\n    else {\n        return {\n            y2: ref.bin(fieldDef, scaleName, 'start', reverse ? spacing : 0),\n            y: ref.bin(fieldDef, scaleName, 'end', reverse ? 0 : spacing)\n        };\n    }\n}\n/**\n * Return mixins for point (non-band) position channels.\n */\nexport function pointPosition(channel, model, defaultRef, vgChannel) {\n    // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613\n    var _a;\n    var encoding = model.encoding, mark = model.mark, stack = model.stack;\n    var channelDef = encoding[channel];\n    var scaleName = model.scaleName(channel);\n    var scale = model.getScaleComponent(channel);\n    var offset = ref.getOffset(channel, model.markDef);\n    var valueRef = !channelDef && (encoding.latitude || encoding.longitude) ?\n        // use geopoint output if there are lat/long and there is no point position overriding lat/long.\n        { field: model.getName(channel) } : tslib_1.__assign({}, ref.stackable(channel, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, channel, scaleName, scale, mark)), (offset ? { offset: offset } : {}));\n    return _a = {},\n        _a[vgChannel || channel] = valueRef,\n        _a;\n}\n/**\n * Return mixins for x2, y2.\n * If channel is not specified, return one channel based on orientation.\n */\nexport function pointPosition2(model, defaultRef, channel) {\n    var _a;\n    var encoding = model.encoding, mark = model.mark, stack = model.stack;\n    var baseChannel = channel === 'x2' ? 'x' : 'y';\n    var channelDef = encoding[baseChannel];\n    var scaleName = model.scaleName(baseChannel);\n    var scale = model.getScaleComponent(baseChannel);\n    var offset = ref.getOffset(channel, model.markDef);\n    var valueRef = !channelDef && (encoding.latitude || encoding.longitude) ?\n        // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\n        { field: model.getName(channel) } : tslib_1.__assign({}, ref.stackable2(channel, channelDef, encoding[channel], scaleName, scale, stack, ref.getDefaultRef(defaultRef, baseChannel, scaleName, scale, mark)), (offset ? { offset: offset } : {}));\n    return _a = {}, _a[channel] = valueRef, _a;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { isScaleChannel } from '../channel';\nimport { isScaleFieldDef, isTimeFieldDef, vgField } from '../fielddef';\nimport { ScaleType } from '../scale';\nimport { formatExpression } from '../timeunit';\nimport { QUANTITATIVE } from '../type';\nimport { contains, keys, stringify } from '../util';\nimport { wrapCondition } from './mark/mixins';\nexport function applyConfig(e, config, // TODO(#1842): consolidate MarkConfig | TextConfig?\npropsList) {\n    for (var _i = 0, propsList_1 = propsList; _i < propsList_1.length; _i++) {\n        var property = propsList_1[_i];\n        var value = config[property];\n        if (value !== undefined) {\n            e[property] = { value: value };\n        }\n    }\n    return e;\n}\nexport function applyMarkConfig(e, model, propsList) {\n    for (var _i = 0, propsList_2 = propsList; _i < propsList_2.length; _i++) {\n        var property = propsList_2[_i];\n        var value = getMarkConfig(property, model.markDef, model.config);\n        if (value !== undefined) {\n            e[property] = { value: value };\n        }\n    }\n    return e;\n}\nexport function getStyles(mark) {\n    return [].concat(mark.type, mark.style || []);\n}\n/**\n * Return property value from style or mark specific config property if exists.\n * Otherwise, return general mark specific config.\n */\nexport function getMarkConfig(prop, mark, config) {\n    // By default, read from mark config first!\n    var value = config.mark[prop];\n    // Then read mark specific config, which has higher precedence\n    var markSpecificConfig = config[mark.type];\n    if (markSpecificConfig[prop] !== undefined) {\n        value = markSpecificConfig[prop];\n    }\n    // Then read style config, which has even higher precedence.\n    var styles = getStyles(mark);\n    for (var _i = 0, styles_1 = styles; _i < styles_1.length; _i++) {\n        var style = styles_1[_i];\n        var styleConfig = config.style[style];\n        // MarkConfig extends VgMarkConfig so a prop may not be a valid property for style\n        // However here we also check if it is defined, so it is okay to cast here\n        var p = prop;\n        if (styleConfig && styleConfig[p] !== undefined) {\n            value = styleConfig[p];\n        }\n    }\n    return value;\n}\nexport function formatSignalRef(fieldDef, specifiedFormat, expr, config) {\n    var format = numberFormat(fieldDef, specifiedFormat, config);\n    if (fieldDef.bin) {\n        var startField = vgField(fieldDef, { expr: expr });\n        var endField = vgField(fieldDef, { expr: expr, binSuffix: 'end' });\n        return {\n            signal: binFormatExpression(startField, endField, format, config)\n        };\n    }\n    else if (fieldDef.type === 'quantitative') {\n        return {\n            signal: \"\" + formatExpr(vgField(fieldDef, { expr: expr, binSuffix: 'range' }), format)\n        };\n    }\n    else if (isTimeFieldDef(fieldDef)) {\n        var isUTCScale = isScaleFieldDef(fieldDef) && fieldDef['scale'] && fieldDef['scale'].type === ScaleType.UTC;\n        return {\n            signal: timeFormatExpression(vgField(fieldDef, { expr: expr }), fieldDef.timeUnit, specifiedFormat, config.text.shortTimeLabels, config.timeFormat, isUTCScale, true)\n        };\n    }\n    else {\n        return {\n            signal: \"''+\" + vgField(fieldDef, { expr: expr })\n        };\n    }\n}\nexport function getSpecifiedOrDefaultValue(specifiedValue, defaultValue) {\n    if (specifiedValue !== undefined) {\n        return specifiedValue;\n    }\n    return defaultValue;\n}\n/**\n * Returns number format for a fieldDef\n *\n * @param format explicitly specified format\n */\nexport function numberFormat(fieldDef, specifiedFormat, config) {\n    if (fieldDef.type === QUANTITATIVE) {\n        // add number format for quantitative type only\n        // Specified format in axis/legend has higher precedence than fieldDef.format\n        if (specifiedFormat) {\n            return specifiedFormat;\n        }\n        // TODO: need to make this work correctly for numeric ordinal / nominal type\n        return config.numberFormat;\n    }\n    return undefined;\n}\nfunction formatExpr(field, format) {\n    return \"format(\" + field + \", \\\"\" + (format || '') + \"\\\")\";\n}\nexport function numberFormatExpr(field, specifiedFormat, config) {\n    return formatExpr(field, specifiedFormat || config.numberFormat);\n}\nexport function binFormatExpression(startField, endField, format, config) {\n    return startField + \" === null || isNaN(\" + startField + \") ? \\\"null\\\" : \" + numberFormatExpr(startField, format, config) + \" + \\\" - \\\" + \" + numberFormatExpr(endField, format, config);\n}\n/**\n * Returns the time expression used for axis/legend labels or text mark for a temporal field\n */\nexport function timeFormatExpression(field, timeUnit, format, shortTimeLabels, timeFormatConfig, isUTCScale, alwaysReturn) {\n    if (alwaysReturn === void 0) { alwaysReturn = false; }\n    if (!timeUnit || format) {\n        // If there is not time unit, or if user explicitly specify format for axis/legend/text.\n        format = format || timeFormatConfig; // only use config.timeFormat if there is no timeUnit.\n        if (format || alwaysReturn) {\n            return (isUTCScale ? 'utc' : 'time') + \"Format(\" + field + \", '\" + format + \"')\";\n        }\n        else {\n            return undefined;\n        }\n    }\n    else {\n        return formatExpression(timeUnit, field, shortTimeLabels, isUTCScale);\n    }\n}\n/**\n * Return Vega sort parameters (tuple of field and order).\n */\nexport function sortParams(orderDef, fieldRefOption) {\n    return (isArray(orderDef) ? orderDef : [orderDef]).reduce(function (s, orderChannelDef) {\n        s.field.push(vgField(orderChannelDef, fieldRefOption));\n        s.order.push(orderChannelDef.sort || 'ascending');\n        return s;\n    }, { field: [], order: [] });\n}\nexport function mergeTitleFieldDefs(f1, f2) {\n    var merged = f1.slice();\n    f2.forEach(function (fdToMerge) {\n        for (var _i = 0, merged_1 = merged; _i < merged_1.length; _i++) {\n            var fieldDef1 = merged_1[_i];\n            // If already exists, no need to append to merged array\n            if (stringify(fieldDef1) === stringify(fdToMerge)) {\n                return;\n            }\n        }\n        merged.push(fdToMerge);\n    });\n    return merged;\n}\nexport function mergeTitle(title1, title2) {\n    return title1 === title2 ?\n        title1 : // if title is the same just use one of them\n        title1 + ', ' + title2; // join title with comma if different\n}\nexport function mergeTitleComponent(v1, v2) {\n    if (isArray(v1.value) && isArray(v2.value)) {\n        return {\n            explicit: v1.explicit,\n            value: mergeTitleFieldDefs(v1.value, v2.value)\n        };\n    }\n    else if (!isArray(v1.value) && !isArray(v2.value)) {\n        return {\n            explicit: v1.explicit,\n            value: mergeTitle(v1.value, v2.value)\n        };\n    }\n    /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n    throw new Error('It should never reach here');\n}\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\nexport function binRequiresRange(fieldDef, channel) {\n    if (!fieldDef.bin) {\n        console.warn('Only use this method with binned field defs');\n        return false;\n    }\n    // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n    // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n    return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\n}\nexport function guideEncodeEntry(encoding, model) {\n    return keys(encoding).reduce(function (encode, channel) {\n        var valueDef = encoding[channel];\n        return tslib_1.__assign({}, encode, wrapCondition(model, valueDef, channel, function (x) { return ({ value: x.value }); }));\n    }, {});\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { vgField } from '../../fielddef';\nimport { keys } from '../../util';\nimport { formatSignalRef } from '../common';\nexport var HEADER_CHANNELS = ['row', 'column'];\nexport var HEADER_TYPES = ['header', 'footer'];\nexport function getHeaderType(orient) {\n    if (orient === 'top' || orient === 'left') {\n        return 'header';\n    }\n    return 'footer';\n}\nexport function getTitleGroup(model, channel) {\n    var title = model.component.layoutHeaders[channel].title;\n    var textOrient = channel === 'row' ? 'vertical' : undefined;\n    var update = tslib_1.__assign({ align: { value: 'center' }, text: { value: title } }, (textOrient === 'vertical' ? { angle: { value: 270 } } : {}));\n    return {\n        name: model.getName(channel + \"_title\"),\n        role: channel + \"-title\",\n        type: 'group',\n        marks: [tslib_1.__assign({ type: 'text', role: channel + \"-title-text\", style: 'guide-title' }, (keys(update).length > 0 ? { encode: { update: update } } : {}))]\n    };\n}\nexport function getHeaderGroups(model, channel) {\n    var layoutHeader = model.component.layoutHeaders[channel];\n    var groups = [];\n    for (var _i = 0, HEADER_TYPES_1 = HEADER_TYPES; _i < HEADER_TYPES_1.length; _i++) {\n        var headerType = HEADER_TYPES_1[_i];\n        if (layoutHeader[headerType]) {\n            for (var _a = 0, _b = layoutHeader[headerType]; _a < _b.length; _a++) {\n                var headerCmpt = _b[_a];\n                groups.push(getHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));\n            }\n        }\n    }\n    return groups;\n}\n// 0, (0,90), 90, (90, 180), 180, (180, 270), 270, (270, 0)\nexport function labelAlign(angle) {\n    // to keep angle in [0, 360)\n    angle = ((angle % 360) + 360) % 360;\n    if ((angle + 90) % 180 === 0) { // for 90 and 270\n        return {}; // default center\n    }\n    else if (angle < 90 || 270 < angle) {\n        return { align: { value: 'right' } };\n    }\n    else if (135 <= angle && angle < 225) {\n        return { align: { value: 'left' } };\n    }\n    return {};\n}\nexport function labelBaseline(angle) {\n    // to keep angle in [0, 360)\n    angle = ((angle % 360) + 360) % 360;\n    if (45 <= angle && angle <= 135) {\n        return { baseline: { value: 'top' } };\n    }\n    return {};\n}\nfunction getHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt) {\n    var _a;\n    if (headerCmpt) {\n        var title = null;\n        var facetFieldDef = layoutHeader.facetFieldDef;\n        if (facetFieldDef && headerCmpt.labels) {\n            var _b = facetFieldDef.header, header = _b === void 0 ? {} : _b;\n            var format = header.format, labelAngle = header.labelAngle;\n            var update = tslib_1.__assign({}, (labelAngle !== undefined ? { angle: { value: labelAngle } } : {}), labelAlign(labelAngle), labelBaseline(labelAngle));\n            title = tslib_1.__assign({ text: formatSignalRef(facetFieldDef, format, 'parent', model.config), offset: 10, orient: channel === 'row' ? 'left' : 'top', style: 'guide-label' }, (keys(update).length > 0 ? { encode: { update: update } } : {}));\n        }\n        var axes = headerCmpt.axes;\n        var hasAxes = axes && axes.length > 0;\n        if (title || hasAxes) {\n            var sizeChannel = channel === 'row' ? 'height' : 'width';\n            return tslib_1.__assign({ name: model.getName(channel + \"_\" + headerType), type: 'group', role: channel + \"-\" + headerType }, (layoutHeader.facetFieldDef ? {\n                from: { data: model.getName(channel + '_domain') },\n                sort: {\n                    field: vgField(facetFieldDef, { expr: 'datum' }),\n                    order: facetFieldDef.sort || 'ascending'\n                }\n            } : {}), (title ? { title: title } : {}), (headerCmpt.sizeSignal ? {\n                encode: {\n                    update: (_a = {},\n                        _a[sizeChannel] = headerCmpt.sizeSignal,\n                        _a)\n                }\n            } : {}), (hasAxes ? { axes: axes } : {}));\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,","import { hasDiscreteDomain } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { isFacetModel } from '../model';\nexport function assembleLayoutSignals(model) {\n    return [].concat(sizeSignals(model, 'width'), sizeSignals(model, 'height'));\n}\nexport function sizeSignals(model, sizeType) {\n    var channel = sizeType === 'width' ? 'x' : 'y';\n    var size = model.component.layoutSize.get(sizeType);\n    if (!size || size === 'merged') {\n        return [];\n    }\n    // Read size signal name from name map, just in case it is the top-level size signal that got renamed.\n    var name = model.getSizeSignalRef(sizeType).signal;\n    if (size === 'range-step') {\n        var scaleComponent = model.getScaleComponent(channel);\n        if (scaleComponent) {\n            var type = scaleComponent.get('type');\n            var range = scaleComponent.get('range');\n            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                var scaleName = model.scaleName(channel);\n                if (isFacetModel(model.parent)) {\n                    // If parent is facet and this is an independent scale, return only signal signal\n                    // as the width/height will be calculated using the cardinality from\n                    // facet's aggregate rather than reading from scale domain\n                    var parentResolve = model.parent.component.resolve;\n                    if (parentResolve.scale[channel] === 'independent') {\n                        return [stepSignal(scaleName, range)];\n                    }\n                }\n                return [\n                    stepSignal(scaleName, range),\n                    {\n                        name: name,\n                        update: sizeExpr(scaleName, scaleComponent, \"domain('\" + scaleName + \"').length\")\n                    }\n                ];\n            }\n        }\n        /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n        throw new Error('layout size is range step although there is no rangeStep.');\n    }\n    else {\n        return [{\n                name: name,\n                value: size\n            }];\n    }\n}\nfunction stepSignal(scaleName, range) {\n    return {\n        name: scaleName + '_step',\n        value: range.step,\n    };\n}\nexport function sizeExpr(scaleName, scaleComponent, cardinality) {\n    var type = scaleComponent.get('type');\n    var padding = scaleComponent.get('padding');\n    var paddingOuter = scaleComponent.get('paddingOuter');\n    paddingOuter = paddingOuter !== undefined ? paddingOuter : padding;\n    var paddingInner = scaleComponent.get('paddingInner');\n    paddingInner = type === 'band' ?\n        // only band has real paddingInner\n        (paddingInner !== undefined ? paddingInner : padding) :\n        // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,\n        // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.\n        1;\n    return \"bandspace(\" + cardinality + \", \" + paddingInner + \", \" + paddingOuter + \") * \" + scaleName + \"_step\";\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9sYXlvdXRzaXplL2Fzc2VtYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUM5QyxPQUFPLEVBQUMsYUFBYSxFQUF3QixNQUFNLG1CQUFtQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxZQUFZLEVBQVEsTUFBTSxVQUFVLENBQUM7QUFHN0MsTUFBTSxnQ0FBZ0MsS0FBWTtJQUNoRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQ2QsV0FBVyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsRUFDM0IsV0FBVyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FDN0IsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLHNCQUFzQixLQUFZLEVBQUUsUUFBNEI7SUFDcEUsSUFBTSxPQUFPLEdBQUcsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDakQsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM5QixPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsc0dBQXNHO0lBQ3RHLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFFckQsSUFBSSxJQUFJLEtBQUssWUFBWSxFQUFFO1FBQ3pCLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV4RCxJQUFJLGNBQWMsRUFBRTtZQUNsQixJQUFNLElBQUksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLElBQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFMUMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ25ELElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBRTNDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDOUIsaUZBQWlGO29CQUNqRixvRUFBb0U7b0JBQ3BFLDBEQUEwRDtvQkFDMUQsSUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO29CQUNyRCxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssYUFBYSxFQUFFO3dCQUNsRCxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO3FCQUN2QztpQkFDRjtnQkFFRCxPQUFPO29CQUNMLFVBQVUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDO29CQUM1Qjt3QkFDRSxJQUFJLE1BQUE7d0JBQ0osTUFBTSxFQUFFLFFBQVEsQ0FBQyxTQUFTLEVBQUUsY0FBYyxFQUFFLGFBQVcsU0FBUyxjQUFXLENBQUM7cUJBQzdFO2lCQUNGLENBQUM7YUFDSDtTQUNGO1FBQ0QsMkZBQTJGO1FBQzNGLE1BQU0sSUFBSSxLQUFLLENBQUMsMkRBQTJELENBQUMsQ0FBQztLQUM5RTtTQUFNO1FBQ0wsT0FBTyxDQUFDO2dCQUNOLElBQUksTUFBQTtnQkFDSixLQUFLLEVBQUUsSUFBSTthQUNaLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQUVELG9CQUFvQixTQUFpQixFQUFFLEtBQWtCO0lBQ3ZELE9BQU87UUFDTCxJQUFJLEVBQUUsU0FBUyxHQUFHLE9BQU87UUFDekIsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJO0tBQ2xCLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxtQkFBbUIsU0FBaUIsRUFBRSxjQUE4QixFQUFFLFdBQW1CO0lBQzdGLElBQU0sSUFBSSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsSUFBTSxPQUFPLEdBQUcsY0FBYyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM5QyxJQUFJLFlBQVksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RELFlBQVksR0FBRyxZQUFZLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUVuRSxJQUFJLFlBQVksR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3RELFlBQVksR0FBRyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUM7UUFDOUIsa0NBQWtDO1FBQ2xDLENBQUMsWUFBWSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELCtGQUErRjtRQUMvRiwyRkFBMkY7UUFDM0YsQ0FBQyxDQUFDO0lBQ0osT0FBTyxlQUFhLFdBQVcsVUFBSyxZQUFZLFVBQUssWUFBWSxZQUFPLFNBQVMsVUFBTyxDQUFDO0FBQzNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7aGFzRGlzY3JldGVEb21haW59IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7aXNWZ1JhbmdlU3RlcCwgVmdSYW5nZVN0ZXAsIFZnU2lnbmFsfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzRmFjZXRNb2RlbCwgTW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7U2NhbGVDb21wb25lbnR9IGZyb20gJy4uL3NjYWxlL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZUxheW91dFNpZ25hbHMobW9kZWw6IE1vZGVsKTogVmdTaWduYWxbXSB7XG4gIHJldHVybiBbXS5jb25jYXQoXG4gICAgc2l6ZVNpZ25hbHMobW9kZWwsICd3aWR0aCcpLFxuICAgIHNpemVTaWduYWxzKG1vZGVsLCAnaGVpZ2h0JylcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNpemVTaWduYWxzKG1vZGVsOiBNb2RlbCwgc2l6ZVR5cGU6ICd3aWR0aCcgfCAnaGVpZ2h0Jyk6IFZnU2lnbmFsW10ge1xuICBjb25zdCBjaGFubmVsID0gc2l6ZVR5cGUgPT09ICd3aWR0aCcgPyAneCcgOiAneSc7XG4gIGNvbnN0IHNpemUgPSBtb2RlbC5jb21wb25lbnQubGF5b3V0U2l6ZS5nZXQoc2l6ZVR5cGUpO1xuICBpZiAoIXNpemUgfHwgc2l6ZSA9PT0gJ21lcmdlZCcpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICAvLyBSZWFkIHNpemUgc2lnbmFsIG5hbWUgZnJvbSBuYW1lIG1hcCwganVzdCBpbiBjYXNlIGl0IGlzIHRoZSB0b3AtbGV2ZWwgc2l6ZSBzaWduYWwgdGhhdCBnb3QgcmVuYW1lZC5cbiAgY29uc3QgbmFtZSA9IG1vZGVsLmdldFNpemVTaWduYWxSZWYoc2l6ZVR5cGUpLnNpZ25hbDtcblxuICBpZiAoc2l6ZSA9PT0gJ3JhbmdlLXN0ZXAnKSB7XG4gICAgY29uc3Qgc2NhbGVDb21wb25lbnQgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudChjaGFubmVsKTtcblxuICAgIGlmIChzY2FsZUNvbXBvbmVudCkge1xuICAgICAgY29uc3QgdHlwZSA9IHNjYWxlQ29tcG9uZW50LmdldCgndHlwZScpO1xuICAgICAgY29uc3QgcmFuZ2UgPSBzY2FsZUNvbXBvbmVudC5nZXQoJ3JhbmdlJyk7XG5cbiAgICAgIGlmIChoYXNEaXNjcmV0ZURvbWFpbih0eXBlKSAmJiBpc1ZnUmFuZ2VTdGVwKHJhbmdlKSkge1xuICAgICAgICBjb25zdCBzY2FsZU5hbWUgPSBtb2RlbC5zY2FsZU5hbWUoY2hhbm5lbCk7XG5cbiAgICAgICAgaWYgKGlzRmFjZXRNb2RlbChtb2RlbC5wYXJlbnQpKSB7XG4gICAgICAgICAgLy8gSWYgcGFyZW50IGlzIGZhY2V0IGFuZCB0aGlzIGlzIGFuIGluZGVwZW5kZW50IHNjYWxlLCByZXR1cm4gb25seSBzaWduYWwgc2lnbmFsXG4gICAgICAgICAgLy8gYXMgdGhlIHdpZHRoL2hlaWdodCB3aWxsIGJlIGNhbGN1bGF0ZWQgdXNpbmcgdGhlIGNhcmRpbmFsaXR5IGZyb21cbiAgICAgICAgICAvLyBmYWNldCdzIGFnZ3JlZ2F0ZSByYXRoZXIgdGhhbiByZWFkaW5nIGZyb20gc2NhbGUgZG9tYWluXG4gICAgICAgICAgY29uc3QgcGFyZW50UmVzb2x2ZSA9IG1vZGVsLnBhcmVudC5jb21wb25lbnQucmVzb2x2ZTtcbiAgICAgICAgICBpZiAocGFyZW50UmVzb2x2ZS5zY2FsZVtjaGFubmVsXSA9PT0gJ2luZGVwZW5kZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtzdGVwU2lnbmFsKHNjYWxlTmFtZSwgcmFuZ2UpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIHN0ZXBTaWduYWwoc2NhbGVOYW1lLCByYW5nZSksXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHVwZGF0ZTogc2l6ZUV4cHIoc2NhbGVOYW1lLCBzY2FsZUNvbXBvbmVudCwgYGRvbWFpbignJHtzY2FsZU5hbWV9JykubGVuZ3RoYClcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBDb25kaXRpb24gc2hvdWxkIG5vdCBoYXBwZW4gLS0gb25seSBmb3Igd2FybmluZyBpbiBkZXZlbG9wbWVudC4gKi9cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xheW91dCBzaXplIGlzIHJhbmdlIHN0ZXAgYWx0aG91Z2ggdGhlcmUgaXMgbm8gcmFuZ2VTdGVwLicpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBbe1xuICAgICAgbmFtZSxcbiAgICAgIHZhbHVlOiBzaXplXG4gICAgfV07XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RlcFNpZ25hbChzY2FsZU5hbWU6IHN0cmluZywgcmFuZ2U6IFZnUmFuZ2VTdGVwKTogVmdTaWduYWwge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IHNjYWxlTmFtZSArICdfc3RlcCcsXG4gICAgdmFsdWU6IHJhbmdlLnN0ZXAsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaXplRXhwcihzY2FsZU5hbWU6IHN0cmluZywgc2NhbGVDb21wb25lbnQ6IFNjYWxlQ29tcG9uZW50LCBjYXJkaW5hbGl0eTogc3RyaW5nKSB7XG4gIGNvbnN0IHR5cGUgPSBzY2FsZUNvbXBvbmVudC5nZXQoJ3R5cGUnKTtcbiAgY29uc3QgcGFkZGluZyA9IHNjYWxlQ29tcG9uZW50LmdldCgncGFkZGluZycpO1xuICBsZXQgcGFkZGluZ091dGVyID0gc2NhbGVDb21wb25lbnQuZ2V0KCdwYWRkaW5nT3V0ZXInKTtcbiAgcGFkZGluZ091dGVyID0gcGFkZGluZ091dGVyICE9PSB1bmRlZmluZWQgPyBwYWRkaW5nT3V0ZXIgOiBwYWRkaW5nO1xuXG4gIGxldCBwYWRkaW5nSW5uZXIgPSBzY2FsZUNvbXBvbmVudC5nZXQoJ3BhZGRpbmdJbm5lcicpO1xuICBwYWRkaW5nSW5uZXIgPSB0eXBlID09PSAnYmFuZCcgP1xuICAgIC8vIG9ubHkgYmFuZCBoYXMgcmVhbCBwYWRkaW5nSW5uZXJcbiAgICAocGFkZGluZ0lubmVyICE9PSB1bmRlZmluZWQgPyBwYWRkaW5nSW5uZXIgOiBwYWRkaW5nKSA6XG4gICAgLy8gRm9yIHBvaW50LCBhcyBjYWxjdWxhdGVkIGluIGh0dHBzOi8vZ2l0aHViLmNvbS92ZWdhL3ZlZ2Etc2NhbGUvYmxvYi9tYXN0ZXIvc3JjL2JhbmQuanMjTDEyOCxcbiAgICAvLyBpdCdzIGVxdWl2YWxlbnQgdG8gaGF2ZSBwYWRkaW5nSW5uZXIgPSAxIHNpbmNlIHRoZXJlIGlzIG9ubHkgbi0xIHN0ZXBzIGJldHdlZW4gbiBwb2ludHMuXG4gICAgMTtcbiAgcmV0dXJuIGBiYW5kc3BhY2UoJHtjYXJkaW5hbGl0eX0sICR7cGFkZGluZ0lubmVyfSwgJHtwYWRkaW5nT3V0ZXJ9KSAqICR7c2NhbGVOYW1lfV9zdGVwYDtcbn1cblxuXG4iXX0=","import { POSITION_SCALE_CHANNELS } from '../channel';\nimport * as log from '../log';\nimport { contains } from '../util';\nimport { isConcatModel, isFacetModel, isLayerModel, isRepeatModel } from './model';\nexport function defaultScaleResolve(channel, model) {\n    if (isLayerModel(model) || isFacetModel(model)) {\n        return 'shared';\n    }\n    else if (isConcatModel(model) || isRepeatModel(model)) {\n        return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';\n    }\n    /* istanbul ignore next: should never reach here. */\n    throw new Error('invalid model type for resolve');\n}\nexport function parseGuideResolve(resolve, channel) {\n    var channelScaleResolve = resolve.scale[channel];\n    var guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';\n    if (channelScaleResolve === 'independent') {\n        if (resolve[guide][channel] === 'shared') {\n            log.warn(log.message.independentScaleMeansIndependentGuide(channel));\n        }\n        return 'independent';\n    }\n    return resolve[guide][channel] || 'shared';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL3Jlc29sdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFlLE1BQU0sWUFBWSxDQUFDO0FBQ2pFLE9BQU8sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFDakMsT0FBTyxFQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBUSxNQUFNLFNBQVMsQ0FBQztBQUV4RixNQUFNLDhCQUE4QixPQUFxQixFQUFFLEtBQVk7SUFDckUsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQzlDLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO1NBQU0sSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3ZELE9BQU8sUUFBUSxDQUFDLHVCQUF1QixFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztLQUM5RTtJQUNELG9EQUFvRDtJQUNwRCxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUVELE1BQU0sNEJBQTRCLE9BQWdCLEVBQUUsT0FBcUI7SUFDdkUsSUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFFN0UsSUFBSSxtQkFBbUIsS0FBSyxhQUFhLEVBQUU7UUFDekMsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQ3hDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQ0FBcUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFFRCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLENBQUM7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UE9TSVRJT05fU0NBTEVfQ0hBTk5FTFMsIFNjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vbG9nJztcbmltcG9ydCB7UmVzb2x2ZSwgUmVzb2x2ZU1vZGV9IGZyb20gJy4uL3Jlc29sdmUnO1xuaW1wb3J0IHtjb250YWluc30gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge2lzQ29uY2F0TW9kZWwsIGlzRmFjZXRNb2RlbCwgaXNMYXllck1vZGVsLCBpc1JlcGVhdE1vZGVsLCBNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0U2NhbGVSZXNvbHZlKGNoYW5uZWw6IFNjYWxlQ2hhbm5lbCwgbW9kZWw6IE1vZGVsKTogUmVzb2x2ZU1vZGUge1xuICBpZiAoaXNMYXllck1vZGVsKG1vZGVsKSB8fCBpc0ZhY2V0TW9kZWwobW9kZWwpKSB7XG4gICAgcmV0dXJuICdzaGFyZWQnO1xuICB9IGVsc2UgaWYgKGlzQ29uY2F0TW9kZWwobW9kZWwpIHx8IGlzUmVwZWF0TW9kZWwobW9kZWwpKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zKFBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCBjaGFubmVsKSA/ICdpbmRlcGVuZGVudCcgOiAnc2hhcmVkJztcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogc2hvdWxkIG5ldmVyIHJlYWNoIGhlcmUuICovXG4gIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBtb2RlbCB0eXBlIGZvciByZXNvbHZlJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUd1aWRlUmVzb2x2ZShyZXNvbHZlOiBSZXNvbHZlLCBjaGFubmVsOiBTY2FsZUNoYW5uZWwpOiBSZXNvbHZlTW9kZSB7XG4gIGNvbnN0IGNoYW5uZWxTY2FsZVJlc29sdmUgPSByZXNvbHZlLnNjYWxlW2NoYW5uZWxdO1xuICBjb25zdCBndWlkZSA9IGNvbnRhaW5zKFBPU0lUSU9OX1NDQUxFX0NIQU5ORUxTLCBjaGFubmVsKSA/ICdheGlzJyA6ICdsZWdlbmQnO1xuXG4gIGlmIChjaGFubmVsU2NhbGVSZXNvbHZlID09PSAnaW5kZXBlbmRlbnQnKSB7XG4gICAgaWYgKHJlc29sdmVbZ3VpZGVdW2NoYW5uZWxdID09PSAnc2hhcmVkJykge1xuICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuaW5kZXBlbmRlbnRTY2FsZU1lYW5zSW5kZXBlbmRlbnRHdWlkZShjaGFubmVsKSk7XG4gICAgfVxuICAgIHJldHVybiAnaW5kZXBlbmRlbnQnO1xuICB9XG5cbiAgcmV0dXJuIHJlc29sdmVbZ3VpZGVdW2NoYW5uZWxdIHx8ICdzaGFyZWQnO1xufVxuIl19","import * as tslib_1 from \"tslib\";\nimport * as log from '../log';\nimport { duplicate, keys, stringify } from '../util';\n/**\n * Generic class for storing properties that are explicitly specified\n * and implicitly determined by the compiler.\n * This is important for scale/axis/legend merging as\n * we want to prioritize properties that users explicitly specified.\n */\nvar Split = /** @class */ (function () {\n    function Split(explicit, implicit) {\n        if (explicit === void 0) { explicit = {}; }\n        if (implicit === void 0) { implicit = {}; }\n        this.explicit = explicit;\n        this.implicit = implicit;\n    }\n    Split.prototype.clone = function () {\n        return new Split(duplicate(this.explicit), duplicate(this.implicit));\n    };\n    Split.prototype.combine = function () {\n        // FIXME remove \"as any\".\n        // Add \"as any\" to avoid an error \"Spread types may only be created from object types\".\n        return tslib_1.__assign({}, this.explicit, this.implicit);\n    };\n    Split.prototype.get = function (key) {\n        // Explicit has higher precedence\n        return this.explicit[key] !== undefined ? this.explicit[key] : this.implicit[key];\n    };\n    Split.prototype.getWithExplicit = function (key) {\n        // Explicit has higher precedence\n        if (this.explicit[key] !== undefined) {\n            return { explicit: true, value: this.explicit[key] };\n        }\n        else if (this.implicit[key] !== undefined) {\n            return { explicit: false, value: this.implicit[key] };\n        }\n        return { explicit: false, value: undefined };\n    };\n    Split.prototype.setWithExplicit = function (key, value) {\n        if (value.value !== undefined) {\n            this.set(key, value.value, value.explicit);\n        }\n    };\n    Split.prototype.set = function (key, value, explicit) {\n        delete this[explicit ? 'implicit' : 'explicit'][key];\n        this[explicit ? 'explicit' : 'implicit'][key] = value;\n        return this;\n    };\n    Split.prototype.copyKeyFromSplit = function (key, s) {\n        // Explicit has higher precedence\n        if (s.explicit[key] !== undefined) {\n            this.set(key, s.explicit[key], true);\n        }\n        else if (s.implicit[key] !== undefined) {\n            this.set(key, s.implicit[key], false);\n        }\n    };\n    Split.prototype.copyKeyFromObject = function (key, s) {\n        // Explicit has higher precedence\n        if (s[key] !== undefined) {\n            this.set(key, s[key], true);\n        }\n    };\n    /**\n     * Merge split object into this split object. Properties from the other split\n     * overwrite properties from this split.\n     */\n    Split.prototype.copyAll = function (other) {\n        for (var _i = 0, _a = keys(other.combine()); _i < _a.length; _i++) {\n            var key = _a[_i];\n            var val = other.getWithExplicit(key);\n            this.setWithExplicit(key, val);\n        }\n    };\n    return Split;\n}());\nexport { Split };\nexport function makeExplicit(value) {\n    return {\n        explicit: true,\n        value: value\n    };\n}\nexport function makeImplicit(value) {\n    return {\n        explicit: false,\n        value: value\n    };\n}\nexport function tieBreakByComparing(compare) {\n    return function (v1, v2, property, propertyOf) {\n        var diff = compare(v1.value, v2.value);\n        if (diff > 0) {\n            return v1;\n        }\n        else if (diff < 0) {\n            return v2;\n        }\n        return defaultTieBreaker(v1, v2, property, propertyOf);\n    };\n}\nexport function defaultTieBreaker(v1, v2, property, propertyOf) {\n    if (v1.explicit && v2.explicit) {\n        log.warn(log.message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));\n    }\n    // If equal score, prefer v1.\n    return v1;\n}\nexport function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker) {\n    if (tieBreaker === void 0) { tieBreaker = defaultTieBreaker; }\n    if (v1 === undefined || v1.value === undefined) {\n        // For first run\n        return v2;\n    }\n    if (v1.explicit && !v2.explicit) {\n        return v1;\n    }\n    else if (v2.explicit && !v1.explicit) {\n        return v2;\n    }\n    else if (stringify(v1.value) === stringify(v2.value)) {\n        return v1;\n    }\n    else {\n        return tieBreaker(v1, v2, property, propertyOf);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { Split } from '../split';\nvar LegendComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(LegendComponent, _super);\n    function LegendComponent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return LegendComponent;\n}(Split));\nexport { LegendComponent };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvbGVnZW5kL2NvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUcvQjtJQUFxQywyQ0FBZTtJQUFwRDs7SUFBc0QsQ0FBQztJQUFELHNCQUFDO0FBQUQsQ0FBQyxBQUF2RCxDQUFxQyxLQUFLLEdBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0xlZ2VuZH0gZnJvbSAnLi4vLi4vL2xlZ2VuZCc7XG5pbXBvcnQge05vblBvc2l0aW9uU2NhbGVDaGFubmVsfSBmcm9tICcuLi8uLi9jaGFubmVsJztcbmltcG9ydCB7VmdMZWdlbmR9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7U3BsaXR9IGZyb20gJy4uL3NwbGl0JztcblxuXG5leHBvcnQgY2xhc3MgTGVnZW5kQ29tcG9uZW50IGV4dGVuZHMgU3BsaXQ8VmdMZWdlbmQ+IHt9XG5cbi8vIFVzaW5nIE1hcHBlZCBUeXBlIHRvIGRlY2xhcmUgdHlwZSAoaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXMpXG5leHBvcnQgdHlwZSBMZWdlbmRDb21wb25lbnRJbmRleCA9IHtbUCBpbiBOb25Qb3NpdGlvblNjYWxlQ2hhbm5lbF0/OiBMZWdlbmRDb21wb25lbnR9O1xuXG5leHBvcnQgdHlwZSBMZWdlbmRJbmRleCA9IHtbUCBpbiBOb25Qb3NpdGlvblNjYWxlQ2hhbm5lbF0/OiBMZWdlbmR9O1xuIl19","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { COLOR, OPACITY, SHAPE } from '../../channel';\nimport { hasConditionalValueDef, isTimeFieldDef, isValueDef, } from '../../fielddef';\nimport { AREA, BAR, CIRCLE, FILL_STROKE_CONFIG, GEOSHAPE, LINE, POINT, SQUARE, TEXT, TICK } from '../../mark';\nimport { ScaleType } from '../../scale';\nimport { keys } from '../../util';\nimport { applyMarkConfig, timeFormatExpression } from '../common';\nimport * as mixins from '../mark/mixins';\nexport function symbols(fieldDef, symbolsSpec, model, channel, type) {\n    if (type === 'gradient') {\n        return undefined;\n    }\n    var out = tslib_1.__assign({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG), mixins.color(model));\n    switch (model.mark) {\n        case BAR:\n        case TICK:\n        case TEXT:\n            out.shape = { value: 'square' };\n            break;\n        case CIRCLE:\n        case SQUARE:\n            out.shape = { value: model.mark };\n            break;\n        case POINT:\n        case LINE:\n        case GEOSHAPE:\n        case AREA:\n            // use default circle\n            break;\n    }\n    var markDef = model.markDef, encoding = model.encoding;\n    var filled = markDef.filled;\n    if (out.fill) {\n        // for fill legend, we don't want any fill in symbol\n        if (channel === 'fill' || (filled && channel === COLOR)) {\n            delete out.fill;\n        }\n        else {\n            if (out.fill['field']) {\n                // For others, remove fill field\n                delete out.fill;\n            }\n            else if (isArray(out.fill)) {\n                var fill = getFirstConditionValue(encoding.fill || encoding.color) || markDef.fill || (filled && markDef.color);\n                if (fill) {\n                    out.fill = { value: fill };\n                }\n            }\n        }\n    }\n    if (out.stroke) {\n        if (channel === 'stroke' || (!filled && channel === COLOR)) {\n            delete out.stroke;\n        }\n        else {\n            if (out.stroke['field']) {\n                // For others, remove stroke field\n                delete out.stroke;\n            }\n            else if (isArray(out.stroke)) {\n                var stroke = getFirstConditionValue(encoding.stroke || encoding.color) || markDef.stroke || (!filled && markDef.color);\n                if (stroke) {\n                    out.stroke = { value: stroke };\n                }\n            }\n        }\n    }\n    if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke) {\n        // for non color channel's legend, we need to override symbol stroke config from Vega config\n        out.stroke = { value: 'transparent' };\n    }\n    if (channel !== SHAPE) {\n        var shape = getFirstConditionValue(encoding.shape) || markDef.shape;\n        if (shape) {\n            out.shape = { value: shape };\n        }\n    }\n    if (channel !== OPACITY) {\n        var opacity = getMaxValue(encoding.opacity) || markDef.opacity;\n        if (opacity) { // only apply opacity if it is neither zero or undefined\n            out.opacity = { value: opacity };\n        }\n    }\n    out = tslib_1.__assign({}, out, symbolsSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nexport function gradient(fieldDef, gradientSpec, model, channel, type) {\n    var out = {};\n    if (type === 'gradient') {\n        var opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;\n        if (opacity) { // only apply opacity if it is neither zero or undefined\n            out.opacity = { value: opacity };\n        }\n    }\n    out = tslib_1.__assign({}, out, gradientSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nexport function labels(fieldDef, labelsSpec, model, channel, type) {\n    var legend = model.legend(channel);\n    var config = model.config;\n    var out = {};\n    if (isTimeFieldDef(fieldDef)) {\n        var isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n        var expr = timeFormatExpression('datum.value', fieldDef.timeUnit, legend.format, config.legend.shortTimeLabels, config.timeFormat, isUTCScale);\n        labelsSpec = tslib_1.__assign({}, (expr ? { text: { signal: expr } } : {}), labelsSpec);\n    }\n    out = tslib_1.__assign({}, out, labelsSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nfunction getMaxValue(channelDef) {\n    return getConditionValue(channelDef, function (v, conditionalDef) { return Math.max(v, conditionalDef.value); });\n}\nfunction getFirstConditionValue(channelDef) {\n    return getConditionValue(channelDef, function (v, conditionalDef) { return v !== undefined ? v : conditionalDef.value; });\n}\nfunction getConditionValue(channelDef, reducer) {\n    if (hasConditionalValueDef(channelDef)) {\n        return (isArray(channelDef.condition) ? channelDef.condition : [channelDef.condition])\n            .reduce(reducer, channelDef.value);\n    }\n    else if (isValueDef(channelDef)) {\n        return channelDef.value;\n    }\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,","import { isColorChannel } from '../../channel';\nimport { dateTimeExpr, isDateTime } from '../../datetime';\nimport { isBinScale } from '../../scale';\nimport { contains } from '../../util';\nexport function values(legend) {\n    var vals = legend.values;\n    if (vals && isDateTime(vals[0])) {\n        return vals.map(function (dt) {\n            // normalize = true as end user won't put 0 = January\n            return { signal: dateTimeExpr(dt, true) };\n        });\n    }\n    return vals;\n}\nexport function type(t, channel, scaleType) {\n    if (isColorChannel(channel) && ((t === 'quantitative' && !isBinScale(scaleType)) ||\n        (t === 'temporal' && contains(['time', 'utc'], scaleType)))) {\n        return 'gradient';\n    }\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2xlZ2VuZC9wcm9wZXJ0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVSxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFXLFlBQVksRUFBRSxVQUFVLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQUMsVUFBVSxFQUFZLE1BQU0sYUFBYSxDQUFDO0FBRWxELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFcEMsTUFBTSxpQkFBaUIsTUFBYztJQUNuQyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzNCLElBQUksSUFBSSxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMvQixPQUFRLElBQW1CLENBQUMsR0FBRyxDQUFDLFVBQUMsRUFBRTtZQUNqQyxxREFBcUQ7WUFDckQsT0FBTyxFQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELE1BQU0sZUFBZSxDQUFPLEVBQUUsT0FBZ0IsRUFBRSxTQUFvQjtJQUNsRSxJQUNJLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUN6QixDQUFDLENBQUMsS0FBSyxjQUFjLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLEtBQUssVUFBVSxJQUFJLFFBQVEsQ0FBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUN0RSxFQUNEO1FBQ0YsT0FBTyxVQUFVLENBQUM7S0FDbkI7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFubmVsLCBpc0NvbG9yQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0RhdGVUaW1lLCBkYXRlVGltZUV4cHIsIGlzRGF0ZVRpbWV9IGZyb20gJy4uLy4uL2RhdGV0aW1lJztcbmltcG9ydCB7TGVnZW5kfSBmcm9tICcuLi8uLi9sZWdlbmQnO1xuaW1wb3J0IHtpc0JpblNjYWxlLCBTY2FsZVR5cGV9IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7VHlwZX0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQge2NvbnRhaW5zfSBmcm9tICcuLi8uLi91dGlsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlcyhsZWdlbmQ6IExlZ2VuZCkge1xuICBjb25zdCB2YWxzID0gbGVnZW5kLnZhbHVlcztcbiAgaWYgKHZhbHMgJiYgaXNEYXRlVGltZSh2YWxzWzBdKSkge1xuICAgIHJldHVybiAodmFscyBhcyBEYXRlVGltZVtdKS5tYXAoKGR0KSA9PiB7XG4gICAgICAvLyBub3JtYWxpemUgPSB0cnVlIGFzIGVuZCB1c2VyIHdvbid0IHB1dCAwID0gSmFudWFyeVxuICAgICAgcmV0dXJuIHtzaWduYWw6IGRhdGVUaW1lRXhwcihkdCwgdHJ1ZSl9O1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB2YWxzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHlwZSh0OiBUeXBlLCBjaGFubmVsOiBDaGFubmVsLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSk6ICdncmFkaWVudCcge1xuICBpZiAoXG4gICAgICBpc0NvbG9yQ2hhbm5lbChjaGFubmVsKSAmJiAoXG4gICAgICAgICh0ID09PSAncXVhbnRpdGF0aXZlJyAmJiAhaXNCaW5TY2FsZShzY2FsZVR5cGUpKSB8fFxuICAgICAgICAodCA9PT0gJ3RlbXBvcmFsJyAmJiBjb250YWluczxTY2FsZVR5cGU+KFsndGltZScsICd1dGMnXSwgc2NhbGVUeXBlKSlcbiAgICAgIClcbiAgICApIHtcbiAgICByZXR1cm4gJ2dyYWRpZW50JztcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19","import { COLOR, FILL, OPACITY, SHAPE, SIZE, STROKE } from '../../channel';\nimport { isFieldDef, title as fieldDefTitle } from '../../fielddef';\nimport { LEGEND_PROPERTIES, VG_LEGEND_PROPERTIES } from '../../legend';\nimport { GEOJSON } from '../../type';\nimport { deleteNestedProperty, keys } from '../../util';\nimport { getSpecifiedOrDefaultValue, guideEncodeEntry, mergeTitleComponent, numberFormat } from '../common';\nimport { isUnitModel } from '../model';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, makeImplicit, mergeValuesWithExplicit } from '../split';\nimport { LegendComponent } from './component';\nimport * as encode from './encode';\nimport * as properties from './properties';\nexport function parseLegend(model) {\n    if (isUnitModel(model)) {\n        model.component.legends = parseUnitLegend(model);\n    }\n    else {\n        model.component.legends = parseNonUnitLegend(model);\n    }\n}\nfunction parseUnitLegend(model) {\n    var encoding = model.encoding;\n    return [COLOR, FILL, STROKE, SIZE, SHAPE, OPACITY].reduce(function (legendComponent, channel) {\n        var def = encoding[channel];\n        if (model.legend(channel) && model.getScaleComponent(channel) && !(isFieldDef(def) && (channel === SHAPE && def.type === GEOJSON))) {\n            legendComponent[channel] = parseLegendForChannel(model, channel);\n        }\n        return legendComponent;\n    }, {});\n}\nfunction getLegendDefWithScale(model, channel) {\n    var _a;\n    // For binned field with continuous scale, use a special scale so we can overrride the mark props and labels\n    switch (channel) {\n        case COLOR:\n            var scale = model.scaleName(COLOR);\n            return model.markDef.filled ? { fill: scale } : { stroke: scale };\n        case FILL:\n        case STROKE:\n        case SIZE:\n        case SHAPE:\n        case OPACITY:\n            return _a = {}, _a[channel] = model.scaleName(channel), _a;\n    }\n}\nexport function parseLegendForChannel(model, channel) {\n    var fieldDef = model.fieldDef(channel);\n    var legend = model.legend(channel);\n    var legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));\n    LEGEND_PROPERTIES.forEach(function (property) {\n        var value = getProperty(property, legend, channel, model);\n        if (value !== undefined) {\n            var explicit = \n            // specified legend.values is already respected, but may get transformed.\n            property === 'values' ? !!legend.values :\n                // title can be explicit if fieldDef.title is set\n                property === 'title' && value === model.fieldDef(channel).title ? true :\n                    // Otherwise, things are explicit if the returned value matches the specified property\n                    value === legend[property];\n            if (explicit || model.config.legend[property] === undefined) {\n                legendCmpt.set(property, value, explicit);\n            }\n        }\n    });\n    // 2) Add mark property definition groups\n    var legendEncoding = legend.encoding || {};\n    var legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce(function (e, part) {\n        var legendEncodingPart = guideEncodeEntry(legendEncoding[part] || {}, model);\n        var value = encode[part] ?\n            // TODO: replace legendCmpt with type is sufficient\n            encode[part](fieldDef, legendEncodingPart, model, channel, legendCmpt.get('type')) : // apply rule\n            legendEncodingPart; // no rule -- just default values\n        if (value !== undefined && keys(value).length > 0) {\n            e[part] = { update: value };\n        }\n        return e;\n    }, {});\n    if (keys(legendEncode).length > 0) {\n        legendCmpt.set('encode', legendEncode, !!legend.encoding);\n    }\n    return legendCmpt;\n}\nfunction getProperty(property, specifiedLegend, channel, model) {\n    var fieldDef = model.fieldDef(channel);\n    switch (property) {\n        case 'format':\n            // We don't include temporal field here as we apply format in encode block\n            return numberFormat(fieldDef, specifiedLegend.format, model.config);\n        case 'title':\n            // For falsy value, keep undefined so we use default,\n            // but use null for '', null, and false to hide the title\n            var specifiedTitle = fieldDef.title !== undefined ? fieldDef.title :\n                specifiedLegend.title || (specifiedLegend.title === undefined ? undefined : null);\n            return getSpecifiedOrDefaultValue(specifiedTitle, fieldDefTitle(fieldDef, model.config)) || undefined; // make falsy value undefined so output Vega spec is shorter\n        case 'values':\n            return properties.values(specifiedLegend);\n        case 'type':\n            return getSpecifiedOrDefaultValue(specifiedLegend.type, properties.type(fieldDef.type, channel, model.getScaleComponent(channel).get('type')));\n    }\n    // Otherwise, return specified property.\n    return specifiedLegend[property];\n}\nfunction parseNonUnitLegend(model) {\n    var _a = model.component, legends = _a.legends, resolve = _a.resolve;\n    var _loop_1 = function (child) {\n        parseLegend(child);\n        keys(child.component.legends).forEach(function (channel) {\n            resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);\n            if (resolve.legend[channel] === 'shared') {\n                // If the resolve says shared (and has not been overridden)\n                // We will try to merge and see if there is a conflict\n                legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);\n                if (!legends[channel]) {\n                    // If merge returns nothing, there is a conflict so we cannot make the legend shared.\n                    // Thus, mark legend as independent and remove the legend component.\n                    resolve.legend[channel] = 'independent';\n                    delete legends[channel];\n                }\n            }\n        });\n    };\n    for (var _i = 0, _b = model.children; _i < _b.length; _i++) {\n        var child = _b[_i];\n        _loop_1(child);\n    }\n    keys(legends).forEach(function (channel) {\n        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            if (!child.component.legends[channel]) {\n                // skip if the child does not have a particular legend\n                continue;\n            }\n            if (resolve.legend[channel] === 'shared') {\n                // After merging shared legend, make sure to remove legend from child\n                delete child.component.legends[channel];\n            }\n        }\n    });\n    return legends;\n}\nexport function mergeLegendComponent(mergedLegend, childLegend) {\n    if (!mergedLegend) {\n        return childLegend.clone();\n    }\n    var mergedOrient = mergedLegend.getWithExplicit('orient');\n    var childOrient = childLegend.getWithExplicit('orient');\n    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n        // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n        // Cannot merge due to inconsistent orient\n        return undefined;\n    }\n    var typeMerged = false;\n    var _loop_2 = function (prop) {\n        var mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', \n        // Tie breaker function\n        function (v1, v2) {\n            switch (prop) {\n                case 'title':\n                    return mergeTitleComponent(v1, v2);\n                case 'type':\n                    // There are only two types. If we have different types, then prefer symbol over gradient.\n                    typeMerged = true;\n                    return makeImplicit('symbol');\n            }\n            return defaultTieBreaker(v1, v2, prop, 'legend');\n        });\n        mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);\n    };\n    // Otherwise, let's merge\n    for (var _i = 0, VG_LEGEND_PROPERTIES_1 = VG_LEGEND_PROPERTIES; _i < VG_LEGEND_PROPERTIES_1.length; _i++) {\n        var prop = VG_LEGEND_PROPERTIES_1[_i];\n        _loop_2(prop);\n    }\n    if (typeMerged) {\n        if (((mergedLegend.implicit || {}).encode || {}).gradient) {\n            deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);\n        }\n        if (((mergedLegend.explicit || {}).encode || {}).gradient) {\n            deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);\n        }\n    }\n    return mergedLegend;\n}\n//# sourceMappingURL=data:application/json;base64,","import { flatten, keys, stringify, vals } from '../../util';\nimport { mergeLegendComponent } from './parse';\nexport function assembleLegends(model) {\n    var legendComponentIndex = model.component.legends;\n    var legendByDomain = {};\n    for (var _i = 0, _a = keys(legendComponentIndex); _i < _a.length; _i++) {\n        var channel = _a[_i];\n        var scaleComponent = model.getScaleComponent(channel);\n        var domainHash = stringify(scaleComponent.domains);\n        if (legendByDomain[domainHash]) {\n            for (var _b = 0, _c = legendByDomain[domainHash]; _b < _c.length; _b++) {\n                var mergedLegendComponent = _c[_b];\n                var merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);\n                if (!merged) {\n                    // If cannot merge, need to add this legend separately\n                    legendByDomain[domainHash].push(legendComponentIndex[channel]);\n                }\n            }\n        }\n        else {\n            legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];\n        }\n    }\n    return flatten(vals(legendByDomain)).map(function (legendCmpt) { return legendCmpt.combine(); });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9sZWdlbmQvYXNzZW1ibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUkxRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFN0MsTUFBTSwwQkFBMEIsS0FBWTtJQUMxQyxJQUFNLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3JELElBQU0sY0FBYyxHQUE4QyxFQUFFLENBQUM7SUFFckUsS0FBc0IsVUFBMEIsRUFBMUIsS0FBQSxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBMUIsY0FBMEIsRUFBMUIsSUFBMEIsRUFBRTtRQUE3QyxJQUFNLE9BQU8sU0FBQTtRQUNoQixJQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsSUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRCxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM5QixLQUFvQyxVQUEwQixFQUExQixLQUFBLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBMUIsY0FBMEIsRUFBMUIsSUFBMEIsRUFBRTtnQkFBM0QsSUFBTSxxQkFBcUIsU0FBQTtnQkFDOUIsSUFBTSxNQUFNLEdBQUcsb0JBQW9CLENBQUMscUJBQXFCLEVBQUUsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDMUYsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWCxzREFBc0Q7b0JBQ3RELGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztpQkFDaEU7YUFDRjtTQUVGO2FBQU07WUFDTCxjQUFjLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO0tBQ0Y7SUFFRCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxVQUEyQixJQUFLLE9BQUEsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFwQixDQUFvQixDQUFDLENBQUM7QUFDbEcsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7ZmxhdHRlbiwga2V5cywgc3RyaW5naWZ5LCB2YWxzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdMZWdlbmR9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7TGVnZW5kQ29tcG9uZW50fSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge21lcmdlTGVnZW5kQ29tcG9uZW50fSBmcm9tICcuL3BhcnNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlTGVnZW5kcyhtb2RlbDogTW9kZWwpOiBWZ0xlZ2VuZFtdIHtcbiAgY29uc3QgbGVnZW5kQ29tcG9uZW50SW5kZXggPSBtb2RlbC5jb21wb25lbnQubGVnZW5kcztcbiAgY29uc3QgbGVnZW5kQnlEb21haW46IHtbZG9tYWluSGFzaDogc3RyaW5nXTogTGVnZW5kQ29tcG9uZW50W119ID0ge307XG5cbiAgZm9yIChjb25zdCBjaGFubmVsIG9mIGtleXMobGVnZW5kQ29tcG9uZW50SW5kZXgpKSB7XG4gICAgY29uc3Qgc2NhbGVDb21wb25lbnQgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudChjaGFubmVsKTtcbiAgICBjb25zdCBkb21haW5IYXNoID0gc3RyaW5naWZ5KHNjYWxlQ29tcG9uZW50LmRvbWFpbnMpO1xuICAgIGlmIChsZWdlbmRCeURvbWFpbltkb21haW5IYXNoXSkge1xuICAgICAgZm9yIChjb25zdCBtZXJnZWRMZWdlbmRDb21wb25lbnQgb2YgbGVnZW5kQnlEb21haW5bZG9tYWluSGFzaF0pIHtcbiAgICAgICAgY29uc3QgbWVyZ2VkID0gbWVyZ2VMZWdlbmRDb21wb25lbnQobWVyZ2VkTGVnZW5kQ29tcG9uZW50LCBsZWdlbmRDb21wb25lbnRJbmRleFtjaGFubmVsXSk7XG4gICAgICAgIGlmICghbWVyZ2VkKSB7XG4gICAgICAgICAgLy8gSWYgY2Fubm90IG1lcmdlLCBuZWVkIHRvIGFkZCB0aGlzIGxlZ2VuZCBzZXBhcmF0ZWx5XG4gICAgICAgICAgbGVnZW5kQnlEb21haW5bZG9tYWluSGFzaF0ucHVzaChsZWdlbmRDb21wb25lbnRJbmRleFtjaGFubmVsXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICBsZWdlbmRCeURvbWFpbltkb21haW5IYXNoXSA9IFtsZWdlbmRDb21wb25lbnRJbmRleFtjaGFubmVsXS5jbG9uZSgpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmxhdHRlbih2YWxzKGxlZ2VuZEJ5RG9tYWluKSkubWFwKChsZWdlbmRDbXB0OiBMZWdlbmRDb21wb25lbnQpID0+IGxlZ2VuZENtcHQuY29tYmluZSgpKTtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { contains } from '../../util';\nimport { isVgSignalRef } from '../../vega.schema';\nimport { isConcatModel, isLayerModel, isRepeatModel } from '../model';\nexport function assembleProjections(model) {\n    if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n        return assembleProjectionsForModelAndChildren(model);\n    }\n    else {\n        return assembleProjectionForModel(model);\n    }\n}\nexport function assembleProjectionsForModelAndChildren(model) {\n    return model.children.reduce(function (projections, child) {\n        return projections.concat(child.assembleProjections());\n    }, assembleProjectionForModel(model));\n}\nexport function assembleProjectionForModel(model) {\n    var component = model.component.projection;\n    if (!component || component.merged) {\n        return [];\n    }\n    var projection = component.combine();\n    var name = projection.name, rest = tslib_1.__rest(projection, [\"name\"]); // we need to extract name so that it is always present in the output and pass TS type validation\n    var size = {\n        signal: \"[\" + component.size.map(function (ref) { return ref.signal; }).join(', ') + \"]\"\n    };\n    var fit = component.data.reduce(function (sources, data) {\n        var source = isVgSignalRef(data) ? data.signal : \"data('\" + model.lookupDataSource(data) + \"')\";\n        if (!contains(sources, source)) {\n            // build a unique list of sources\n            sources.push(source);\n        }\n        return sources;\n    }, []);\n    if (fit.length <= 0) {\n        throw new Error(\"Projection's fit didn't find any data sources\");\n    }\n    return [tslib_1.__assign({ name: name,\n            size: size, fit: {\n                signal: fit.length > 1 ? \"[\" + fit.join(', ') + \"]\" : fit[0]\n            } }, rest)];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9wcm9qZWN0aW9uL2Fzc2VtYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxhQUFhLEVBQTRCLE1BQU0sbUJBQW1CLENBQUM7QUFDM0UsT0FBTyxFQUFDLGFBQWEsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFRLE1BQU0sVUFBVSxDQUFDO0FBRTNFLE1BQU0sOEJBQThCLEtBQVk7SUFDOUMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN2RSxPQUFPLHNDQUFzQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3REO1NBQU07UUFDTCxPQUFPLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0FBQ0gsQ0FBQztBQUVELE1BQU0saURBQWlELEtBQVk7SUFDakUsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLFdBQVcsRUFBRSxLQUFLO1FBQzlDLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0lBQ3pELENBQUMsRUFBRSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCxNQUFNLHFDQUFxQyxLQUFZO0lBQ3JELElBQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQzdDLElBQUksQ0FBQyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUNsQyxPQUFPLEVBQUUsQ0FBQztLQUNYO0lBRUQsSUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2hDLElBQUEsc0JBQUksRUFBRSwyQ0FBTyxDQUFlLENBQUUsaUdBQWlHO0lBRXRJLElBQU0sSUFBSSxHQUFnQjtRQUN4QixNQUFNLEVBQUUsTUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxNQUFNLEVBQVYsQ0FBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFHO0tBQ2xFLENBQUM7SUFFRixJQUFNLEdBQUcsR0FBYSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFDLE9BQU8sRUFBRSxJQUFJO1FBQ3hELElBQU0sTUFBTSxHQUFXLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBUyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQUksQ0FBQztRQUNyRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRTtZQUM5QixpQ0FBaUM7WUFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN0QjtRQUNELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVQLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7UUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0tBQ2xFO0lBRUQsT0FBTyxvQkFDTCxJQUFJLE1BQUE7WUFDSixJQUFJLE1BQUEsRUFDSixHQUFHLEVBQUU7Z0JBQ0gsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUN4RCxJQUNFLElBQUksRUFDUCxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Y29udGFpbnN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtpc1ZnU2lnbmFsUmVmLCBWZ1Byb2plY3Rpb24sIFZnU2lnbmFsUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzQ29uY2F0TW9kZWwsIGlzTGF5ZXJNb2RlbCwgaXNSZXBlYXRNb2RlbCwgTW9kZWx9IGZyb20gJy4uL21vZGVsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlUHJvamVjdGlvbnMobW9kZWw6IE1vZGVsKTogVmdQcm9qZWN0aW9uW10ge1xuICBpZiAoaXNMYXllck1vZGVsKG1vZGVsKSB8fCBpc0NvbmNhdE1vZGVsKG1vZGVsKSB8fCBpc1JlcGVhdE1vZGVsKG1vZGVsKSkge1xuICAgIHJldHVybiBhc3NlbWJsZVByb2plY3Rpb25zRm9yTW9kZWxBbmRDaGlsZHJlbihtb2RlbCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGFzc2VtYmxlUHJvamVjdGlvbkZvck1vZGVsKG1vZGVsKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZW1ibGVQcm9qZWN0aW9uc0Zvck1vZGVsQW5kQ2hpbGRyZW4obW9kZWw6IE1vZGVsKTogVmdQcm9qZWN0aW9uW10ge1xuICByZXR1cm4gbW9kZWwuY2hpbGRyZW4ucmVkdWNlKChwcm9qZWN0aW9ucywgY2hpbGQpID0+IHtcbiAgICByZXR1cm4gcHJvamVjdGlvbnMuY29uY2F0KGNoaWxkLmFzc2VtYmxlUHJvamVjdGlvbnMoKSk7XG4gIH0sIGFzc2VtYmxlUHJvamVjdGlvbkZvck1vZGVsKG1vZGVsKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlbWJsZVByb2plY3Rpb25Gb3JNb2RlbChtb2RlbDogTW9kZWwpOiBWZ1Byb2plY3Rpb25bXSB7XG4gIGNvbnN0IGNvbXBvbmVudCA9IG1vZGVsLmNvbXBvbmVudC5wcm9qZWN0aW9uO1xuICBpZiAoIWNvbXBvbmVudCB8fCBjb21wb25lbnQubWVyZ2VkKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY29uc3QgcHJvamVjdGlvbiA9IGNvbXBvbmVudC5jb21iaW5lKCk7XG4gIGNvbnN0IHtuYW1lLCAuLi5yZXN0fSA9IHByb2plY3Rpb247ICAvLyB3ZSBuZWVkIHRvIGV4dHJhY3QgbmFtZSBzbyB0aGF0IGl0IGlzIGFsd2F5cyBwcmVzZW50IGluIHRoZSBvdXRwdXQgYW5kIHBhc3MgVFMgdHlwZSB2YWxpZGF0aW9uXG5cbiAgY29uc3Qgc2l6ZTogVmdTaWduYWxSZWYgPSB7XG4gICAgc2lnbmFsOiBgWyR7Y29tcG9uZW50LnNpemUubWFwKChyZWYpID0+IHJlZi5zaWduYWwpLmpvaW4oJywgJyl9XWBcbiAgfTtcblxuICBjb25zdCBmaXQ6IHN0cmluZ1tdID0gY29tcG9uZW50LmRhdGEucmVkdWNlKChzb3VyY2VzLCBkYXRhKSA9PiB7XG4gICAgY29uc3Qgc291cmNlOiBzdHJpbmcgPSBpc1ZnU2lnbmFsUmVmKGRhdGEpID8gZGF0YS5zaWduYWwgOiBgZGF0YSgnJHttb2RlbC5sb29rdXBEYXRhU291cmNlKGRhdGEpfScpYDtcbiAgICBpZiAoIWNvbnRhaW5zKHNvdXJjZXMsIHNvdXJjZSkpIHtcbiAgICAgIC8vIGJ1aWxkIGEgdW5pcXVlIGxpc3Qgb2Ygc291cmNlc1xuICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2VzO1xuICB9LCBbXSk7XG5cbiAgaWYgKGZpdC5sZW5ndGggPD0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlByb2plY3Rpb24ncyBmaXQgZGlkbid0IGZpbmQgYW55IGRhdGEgc291cmNlc1wiKTtcbiAgfVxuXG4gIHJldHVybiBbe1xuICAgIG5hbWUsXG4gICAgc2l6ZSxcbiAgICBmaXQ6IHtcbiAgICAgIHNpZ25hbDogZml0Lmxlbmd0aCA+IDEgPyBgWyR7Zml0LmpvaW4oJywgJyl9XWAgOiBmaXRbMF1cbiAgICB9LFxuICAgIC4uLnJlc3RcbiAgfV07XG59XG4iXX0=","export var PROJECTION_PROPERTIES = [\n    'type',\n    'clipAngle',\n    'clipExtent',\n    'center',\n    'rotate',\n    'precision',\n    'coefficient',\n    'distance',\n    'fraction',\n    'lobes',\n    'parallel',\n    'radius',\n    'ratio',\n    'spacing',\n    'tilt'\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm9qZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJEQSxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBeUI7SUFDekQsTUFBTTtJQUNOLFdBQVc7SUFDWCxZQUFZO0lBQ1osUUFBUTtJQUNSLFFBQVE7SUFDUixXQUFXO0lBQ1gsYUFBYTtJQUNiLFVBQVU7SUFDVixVQUFVO0lBQ1YsT0FBTztJQUNQLFVBQVU7SUFDVixRQUFRO0lBQ1IsT0FBTztJQUNQLFNBQVM7SUFDVCxNQUFNO0NBQ1AsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtWZ1Byb2plY3Rpb25UeXBlfSBmcm9tICcuL3ZlZ2Euc2NoZW1hJztcblxuZXhwb3J0IHR5cGUgUHJvamVjdGlvblR5cGUgPSBWZ1Byb2plY3Rpb25UeXBlO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3Rpb24ge1xuICAvKipcbiAgICogVGhlIGNhcnRvZ3JhcGhpYyBwcm9qZWN0aW9uIHRvIHVzZS4gVGhpcyB2YWx1ZSBpcyBjYXNlLWluc2Vuc2l0aXZlLCBmb3IgZXhhbXBsZSBgXCJhbGJlcnNcImAgYW5kIGBcIkFsYmVyc1wiYCBpbmRpY2F0ZSB0aGUgc2FtZSBwcm9qZWN0aW9uIHR5cGUuIFlvdSBjYW4gZmluZCBhbGwgdmFsaWQgcHJvamVjdGlvbiB0eXBlcyBbaW4gdGhlIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vdmVnYS5naXRodWIuaW8vdmVnYS1saXRlL2RvY3MvcHJvamVjdGlvbi5odG1sI3Byb2plY3Rpb24tdHlwZXMpLlxuICAgKlxuICAgKiBfX0RlZmF1bHQgdmFsdWU6X18gYG1lcmNhdG9yYFxuICAgKi9cbiAgdHlwZT86IFByb2plY3Rpb25UeXBlO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBwcm9qZWN0aW9u4oCZcyBjbGlwcGluZyBjaXJjbGUgcmFkaXVzIHRvIHRoZSBzcGVjaWZpZWQgYW5nbGUgaW4gZGVncmVlcy4gSWYgYG51bGxgLCBzd2l0Y2hlcyB0byBbYW50aW1lcmlkaWFuXShodHRwOi8vYmwub2Nrcy5vcmcvbWJvc3RvY2svMzc4ODk5OSkgY3V0dGluZyByYXRoZXIgdGhhbiBzbWFsbC1jaXJjbGUgY2xpcHBpbmcuXG4gICAqL1xuICBjbGlwQW5nbGU/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2plY3Rpb27igJlzIHZpZXdwb3J0IGNsaXAgZXh0ZW50IHRvIHRoZSBzcGVjaWZpZWQgYm91bmRzIGluIHBpeGVscy4gVGhlIGV4dGVudCBib3VuZHMgYXJlIHNwZWNpZmllZCBhcyBhbiBhcnJheSBgW1t4MCwgeTBdLCBbeDEsIHkxXV1gLCB3aGVyZSBgeDBgIGlzIHRoZSBsZWZ0LXNpZGUgb2YgdGhlIHZpZXdwb3J0LCBgeTBgIGlzIHRoZSB0b3AsIGB4MWAgaXMgdGhlIHJpZ2h0IGFuZCBgeTFgIGlzIHRoZSBib3R0b20uIElmIGBudWxsYCwgbm8gdmlld3BvcnQgY2xpcHBpbmcgaXMgcGVyZm9ybWVkLlxuICAgKi9cbiAgY2xpcEV4dGVudD86IG51bWJlcltdW107XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2plY3Rpb27igJlzIGNlbnRlciB0byB0aGUgc3BlY2lmaWVkIGNlbnRlciwgYSB0d28tZWxlbWVudCBhcnJheSBvZiBsb25naXR1ZGUgYW5kIGxhdGl0dWRlIGluIGRlZ3JlZXMuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBgWzAsIDBdYFxuICAgKi9cbiAgY2VudGVyPzogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHByb2plY3Rpb27igJlzIHRocmVlLWF4aXMgcm90YXRpb24gdG8gdGhlIHNwZWNpZmllZCBhbmdsZXMsIHdoaWNoIG11c3QgYmUgYSB0d28tIG9yIHRocmVlLWVsZW1lbnQgYXJyYXkgb2YgbnVtYmVycyBbYGxhbWJkYWAsIGBwaGlgLCBgZ2FtbWFgXSBzcGVjaWZ5aW5nIHRoZSByb3RhdGlvbiBhbmdsZXMgaW4gZGVncmVlcyBhYm91dCBlYWNoIHNwaGVyaWNhbCBheGlzLiAoVGhlc2UgY29ycmVzcG9uZCB0byB5YXcsIHBpdGNoIGFuZCByb2xsLilcbiAgICpcbiAgICogX19EZWZhdWx0IHZhbHVlOl9fIGBbMCwgMCwgMF1gXG4gICAqL1xuICByb3RhdGU/OiBudW1iZXJbXTtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdGhyZXNob2xkIGZvciB0aGUgcHJvamVjdGlvbuKAmXMgW2FkYXB0aXZlIHJlc2FtcGxpbmddKGh0dHA6Ly9ibC5vY2tzLm9yZy9tYm9zdG9jay8zNzk1NTQ0KSB0byB0aGUgc3BlY2lmaWVkIHZhbHVlIGluIHBpeGVscy4gVGhpcyB2YWx1ZSBjb3JyZXNwb25kcyB0byB0aGUgW0RvdWdsYXPigJNQZXVja2VyIGRpc3RhbmNlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1JhbWVyJUUyJTgwJTkzRG91Z2xhcyVFMiU4MCU5M1BldWNrZXJfYWxnb3JpdGhtKS4gSWYgcHJlY2lzaW9uIGlzIG5vdCBzcGVjaWZpZWQsIHJldHVybnMgdGhlIHByb2plY3Rpb27igJlzIGN1cnJlbnQgcmVzYW1wbGluZyBwcmVjaXNpb24gd2hpY2ggZGVmYXVsdHMgdG8gYOKImjAuNSDiiYUgMC43MDcxMOKApmAuXG4gICAqL1xuICBwcmVjaXNpb24/OiBTdHJpbmc7XG5cbiAgLyogVGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGFyZSBhbGwgc3VwcG9ydGVkIGZvciBzcGVjaWZpYyB0eXBlcyBvZiBwcm9qZWN0aW9ucy4gQ29uc3VsdCB0aGUgZDMtZ2VvLXByb2plY3Rpb24gbGlicmFyeSBmb3IgbW9yZSBpbmZvcm1hdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2QzL2QzLWdlby1wcm9qZWN0aW9uICovXG4gIGNvZWZmaWNpZW50PzogbnVtYmVyO1xuICBkaXN0YW5jZT86IG51bWJlcjtcbiAgZnJhY3Rpb24/OiBudW1iZXI7XG4gIGxvYmVzPzogbnVtYmVyO1xuICBwYXJhbGxlbD86IG51bWJlcjtcbiAgcmFkaXVzPzogbnVtYmVyO1xuICByYXRpbz86IG51bWJlcjtcbiAgc3BhY2luZz86IG51bWJlcjtcbiAgdGlsdD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBbnkgcHJvcGVydHkgb2YgUHJvamVjdGlvbiBjYW4gYmUgaW4gY29uZmlnXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvamVjdGlvbkNvbmZpZyBleHRlbmRzIFByb2plY3Rpb24geyB9XG5cbmV4cG9ydCBjb25zdCBQUk9KRUNUSU9OX1BST1BFUlRJRVM6IChrZXlvZiBQcm9qZWN0aW9uKVtdID0gW1xuICAndHlwZScsXG4gICdjbGlwQW5nbGUnLFxuICAnY2xpcEV4dGVudCcsXG4gICdjZW50ZXInLFxuICAncm90YXRlJyxcbiAgJ3ByZWNpc2lvbicsXG4gICdjb2VmZmljaWVudCcsXG4gICdkaXN0YW5jZScsXG4gICdmcmFjdGlvbicsXG4gICdsb2JlcycsXG4gICdwYXJhbGxlbCcsXG4gICdyYWRpdXMnLFxuICAncmF0aW8nLFxuICAnc3BhY2luZycsXG4gICd0aWx0J1xuXTtcbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { Split } from '../split';\nvar ProjectionComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(ProjectionComponent, _super);\n    function ProjectionComponent(name, specifiedProjection, size, data) {\n        var _this = _super.call(this, tslib_1.__assign({}, specifiedProjection), // all explicit properties of projection\n        { name: name } // name as initial implicit property\n        ) || this;\n        _this.specifiedProjection = specifiedProjection;\n        _this.size = size;\n        _this.data = data;\n        _this.merged = false;\n        return _this;\n    }\n    return ProjectionComponent;\n}(Split));\nexport { ProjectionComponent };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvcHJvamVjdGlvbi9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFL0I7SUFBeUMsK0NBQW1CO0lBRzFELDZCQUFZLElBQVksRUFBUyxtQkFBK0IsRUFBUyxJQUFtQixFQUFTLElBQThCO1FBQW5JLFlBQ0UsdUNBQ00sbUJBQW1CLEdBQUksd0NBQXdDO1FBQ25FLEVBQUMsSUFBSSxNQUFBLEVBQUMsQ0FBRSxvQ0FBb0M7U0FDN0MsU0FDRjtRQUxnQyx5QkFBbUIsR0FBbkIsbUJBQW1CLENBQVk7UUFBUyxVQUFJLEdBQUosSUFBSSxDQUFlO1FBQVMsVUFBSSxHQUFKLElBQUksQ0FBMEI7UUFGNUgsWUFBTSxHQUFHLEtBQUssQ0FBQzs7SUFPdEIsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQVRELENBQXlDLEtBQUssR0FTN0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1Byb2plY3Rpb259IGZyb20gJy4uLy4uL3Byb2plY3Rpb24nO1xuaW1wb3J0IHtWZ1Byb2plY3Rpb24sIFZnU2lnbmFsUmVmfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1NwbGl0fSBmcm9tICcuLi9zcGxpdCc7XG5cbmV4cG9ydCBjbGFzcyBQcm9qZWN0aW9uQ29tcG9uZW50IGV4dGVuZHMgU3BsaXQ8VmdQcm9qZWN0aW9uPiB7XG4gIHB1YmxpYyBtZXJnZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHB1YmxpYyBzcGVjaWZpZWRQcm9qZWN0aW9uOiBQcm9qZWN0aW9uLCBwdWJsaWMgc2l6ZTogVmdTaWduYWxSZWZbXSwgcHVibGljIGRhdGE6IChzdHJpbmcgfCBWZ1NpZ25hbFJlZilbXSkge1xuICAgIHN1cGVyKFxuICAgICAgey4uLnNwZWNpZmllZFByb2plY3Rpb259LCAgLy8gYWxsIGV4cGxpY2l0IHByb3BlcnRpZXMgb2YgcHJvamVjdGlvblxuICAgICAge25hbWV9ICAvLyBuYW1lIGFzIGluaXRpYWwgaW1wbGljaXQgcHJvcGVydHlcbiAgICApO1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { MAIN } from '../../data';\nimport { PROJECTION_PROPERTIES } from '../../projection';\nimport { GEOJSON } from '../../type';\nimport { duplicate, every, stringify } from '../../util';\nimport { isUnitModel } from '../model';\nimport { ProjectionComponent } from './component';\nexport function parseProjection(model) {\n    if (isUnitModel(model)) {\n        model.component.projection = parseUnitProjection(model);\n    }\n    else {\n        // because parse happens from leaves up (unit specs before layer spec),\n        // we can be sure that the above if statement has already occurred\n        // and therefore we have access to child.component.projection\n        // for each of model's children\n        model.component.projection = parseNonUnitProjections(model);\n    }\n}\nfunction parseUnitProjection(model) {\n    var specifiedProjection = model.specifiedProjection, config = model.config, hasProjection = model.hasProjection;\n    if (hasProjection) {\n        var data_1 = [];\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(function (posssiblePair) {\n            if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {\n                data_1.push({\n                    signal: model.getName(\"geojson_\" + data_1.length)\n                });\n            }\n        });\n        if (model.channelHasField(SHAPE) && model.fieldDef(SHAPE).type === GEOJSON) {\n            data_1.push({\n                signal: model.getName(\"geojson_\" + data_1.length)\n            });\n        }\n        if (data_1.length === 0) {\n            // main source is geojson, so we can just use that\n            data_1.push(model.requestDataName(MAIN));\n        }\n        return new ProjectionComponent(model.projectionName(true), tslib_1.__assign({}, (config.projection || {}), (specifiedProjection || {})), [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')], data_1);\n    }\n    return undefined;\n}\nfunction mergeIfNoConflict(first, second) {\n    var allPropertiesShared = every(PROJECTION_PROPERTIES, function (prop) {\n        // neither has the poperty\n        if (!first.explicit.hasOwnProperty(prop) &&\n            !second.explicit.hasOwnProperty(prop)) {\n            return true;\n        }\n        // both have property and an equal value for property\n        if (first.explicit.hasOwnProperty(prop) &&\n            second.explicit.hasOwnProperty(prop) &&\n            // some properties might be signals or objects and require hashing for comparison\n            stringify(first.get(prop)) === stringify(second.get(prop))) {\n            return true;\n        }\n        return false;\n    });\n    var size = stringify(first.size) === stringify(second.size);\n    if (size) {\n        if (allPropertiesShared) {\n            return first;\n        }\n        else if (stringify(first.explicit) === stringify({})) {\n            return second;\n        }\n        else if (stringify(second.explicit) === stringify({})) {\n            return first;\n        }\n    }\n    // if all properties don't match, let each unit spec have its own projection\n    return null;\n}\nfunction parseNonUnitProjections(model) {\n    if (model.children.length === 0) {\n        return undefined;\n    }\n    var nonUnitProjection;\n    var mergable = every(model.children, function (child) {\n        parseProjection(child);\n        var projection = child.component.projection;\n        if (!projection) {\n            // child layer does not use a projection\n            return true;\n        }\n        else if (!nonUnitProjection) {\n            // cached 'projection' is null, cache this one\n            nonUnitProjection = projection;\n            return true;\n        }\n        else {\n            var merge = mergeIfNoConflict(nonUnitProjection, projection);\n            if (merge) {\n                nonUnitProjection = merge;\n            }\n            return !!merge;\n        }\n    });\n    // it cached one and all other children share the same projection,\n    if (nonUnitProjection && mergable) {\n        // so we can elevate it to the layer level\n        var name_1 = model.projectionName(true);\n        var modelProjection_1 = new ProjectionComponent(name_1, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));\n        // rename and assign all others as merged\n        model.children.forEach(function (child) {\n            if (child.component.projection) {\n                modelProjection_1.data = modelProjection_1.data.concat(child.component.projection.data);\n                child.renameProjection(child.component.projection.get('name'), name_1);\n                child.component.projection.merged = true;\n            }\n        });\n        return modelProjection_1;\n    }\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,","import { isArray, isString } from 'vega-util';\nexport function isSortField(sort) {\n    return !!sort && (sort['op'] === 'count' || !!sort['field']) && !!sort['op'];\n}\nexport function isSortArray(sort) {\n    return !!sort && isArray(sort) && sort.every(function (s) { return isString(s); });\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zb3J0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBa0Q1QyxNQUFNLHNCQUF5QixJQUFpRDtJQUM5RSxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9FLENBQUM7QUFFRCxNQUFNLHNCQUF5QixJQUFpRDtJQUM5RSxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUM7QUFDakUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWdncmVnYXRlT3B9IGZyb20gJ3ZlZ2EnO1xuaW1wb3J0IHtpc0FycmF5LCBpc1N0cmluZ30gZnJvbSAndmVnYS11dGlsJztcblxuaW1wb3J0IHtWZ0NvbXBhcmF0b3JPcmRlcn0gZnJvbSAnLi92ZWdhLnNjaGVtYSc7XG5cblxuZXhwb3J0IHR5cGUgU29ydE9yZGVyID0gVmdDb21wYXJhdG9yT3JkZXIgfCBudWxsO1xuXG5cbi8qKlxuICogQSBzb3J0IGRlZmluaXRpb24gZm9yIHRyYW5zZm9ybVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNvcnRGaWVsZCB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgZmllbGQgdG8gc29ydC5cbiAgICovXG4gIGZpZWxkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc29ydCB0aGUgZmllbGQgaW4gYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAqL1xuICBvcmRlcj86IFZnQ29tcGFyYXRvck9yZGVyO1xufVxuXG5cbi8qKlxuICogQSBzb3J0IGRlZmluaXRpb24gZm9yIHNvcnRpbmcgYSBkaXNjcmV0ZSBzY2FsZSBpbiBhbiBlbmNvZGluZyBmaWVsZCBkZWZpbml0aW9uLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgRW5jb2RpbmdTb3J0RmllbGQ8Rj4ge1xuICAvKipcbiAgICogVGhlIGRhdGEgW2ZpZWxkXShodHRwczovL3ZlZ2EuZ2l0aHViLmlvL3ZlZ2EtbGl0ZS9kb2NzL2ZpZWxkLmh0bWwpIHRvIHNvcnQgYnkuXG4gICAqXG4gICAqIF9fRGVmYXVsdCB2YWx1ZTpfXyBJZiB1bnNwZWNpZmllZCwgZGVmYXVsdHMgdG8gdGhlIGZpZWxkIHNwZWNpZmllZCBpbiB0aGUgb3V0ZXIgZGF0YSByZWZlcmVuY2UuXG4gICAqL1xuICBmaWVsZD86IEY7XG4gIC8qKlxuICAgKiBBbiBbYWdncmVnYXRlIG9wZXJhdGlvbl0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9hZ2dyZWdhdGUuaHRtbCNvcHMpIHRvIHBlcmZvcm0gb24gdGhlIGZpZWxkIHByaW9yIHRvIHNvcnRpbmcgKGUuZy4sIGBcImNvdW50XCJgLCBgXCJtZWFuXCJgIGFuZCBgXCJtZWRpYW5cImApLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIHJlcXVpcmVkIGluIGNhc2VzIHdoZXJlIHRoZSBzb3J0IGZpZWxkIGFuZCB0aGUgZGF0YSByZWZlcmVuY2UgZmllbGQgZG8gbm90IG1hdGNoLlxuICAgKiBUaGUgaW5wdXQgZGF0YSBvYmplY3RzIHdpbGwgYmUgYWdncmVnYXRlZCwgZ3JvdXBlZCBieSB0aGUgZW5jb2RlZCBkYXRhIGZpZWxkLlxuICAgKlxuICAgKiBGb3IgYSBmdWxsIGxpc3Qgb2Ygb3BlcmF0aW9ucywgcGxlYXNlIHNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgW2FnZ3JlZ2F0ZV0oaHR0cHM6Ly92ZWdhLmdpdGh1Yi5pby92ZWdhLWxpdGUvZG9jcy9hZ2dyZWdhdGUuaHRtbCNvcHMpLlxuICAgKi9cbiAgb3A6IEFnZ3JlZ2F0ZU9wO1xuXG4gIC8qKlxuICAgKiBUaGUgc29ydCBvcmRlci4gT25lIG9mIGBcImFzY2VuZGluZ1wiYCAoZGVmYXVsdCksIGBcImRlc2NlbmRpbmdcImAsIG9yIGBudWxsYCAobm8gbm90IHNvcnQpLlxuICAgKi9cbiAgb3JkZXI/OiBTb3J0T3JkZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NvcnRGaWVsZDxGPihzb3J0OiBzdHJpbmdbXSB8IFNvcnRPcmRlciB8IEVuY29kaW5nU29ydEZpZWxkPEY+KTogc29ydCBpcyBFbmNvZGluZ1NvcnRGaWVsZDxGPiB7XG4gIHJldHVybiAhIXNvcnQgJiYgKHNvcnRbJ29wJ10gPT09ICdjb3VudCcgfHwgISFzb3J0WydmaWVsZCddKSAmJiAhIXNvcnRbJ29wJ107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NvcnRBcnJheTxGPihzb3J0OiBzdHJpbmdbXSB8IFNvcnRPcmRlciB8IEVuY29kaW5nU29ydEZpZWxkPEY+KTogc29ydCBpcyBzdHJpbmdbXSB7XG4gIHJldHVybiAhIXNvcnQgJiYgaXNBcnJheShzb3J0KSAmJiBzb3J0LmV2ZXJ5KHMgPT4gaXNTdHJpbmcocykpO1xufVxuIl19","import * as tslib_1 from \"tslib\";\n/**\n * A node in the dataflow tree.\n */\nvar DataFlowNode = /** @class */ (function () {\n    function DataFlowNode(parent, debugName) {\n        this.debugName = debugName;\n        this._children = [];\n        this._parent = null;\n        if (parent) {\n            this.parent = parent;\n        }\n    }\n    /**\n     * Clone this node with a deep copy but don't clone links to children or parents.\n     */\n    DataFlowNode.prototype.clone = function () {\n        throw new Error('Cannot clone node');\n    };\n    /**\n     * Set of fields that are being created by this node.\n     */\n    DataFlowNode.prototype.producedFields = function () {\n        return {};\n    };\n    DataFlowNode.prototype.dependentFields = function () {\n        return {};\n    };\n    Object.defineProperty(DataFlowNode.prototype, \"parent\", {\n        get: function () {\n            return this._parent;\n        },\n        /**\n         * Set the parent of the node and also add this not to the parent's children.\n         */\n        set: function (parent) {\n            this._parent = parent;\n            parent.addChild(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DataFlowNode.prototype, \"children\", {\n        get: function () {\n            return this._children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DataFlowNode.prototype.numChildren = function () {\n        return this._children.length;\n    };\n    DataFlowNode.prototype.addChild = function (child) {\n        this._children.push(child);\n    };\n    DataFlowNode.prototype.removeChild = function (oldChild) {\n        this._children.splice(this._children.indexOf(oldChild), 1);\n    };\n    /**\n     * Remove node from the dataflow.\n     */\n    DataFlowNode.prototype.remove = function () {\n        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parent = this._parent;\n        }\n        this._parent.removeChild(this);\n    };\n    /**\n     * Insert another node as a parent of this node.\n     */\n    DataFlowNode.prototype.insertAsParentOf = function (other) {\n        var parent = other.parent;\n        parent.removeChild(this);\n        this.parent = parent;\n        other.parent = this;\n    };\n    DataFlowNode.prototype.swapWithParent = function () {\n        var parent = this._parent;\n        var newParent = parent.parent;\n        // reconnect the children\n        for (var _i = 0, _a = this._children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parent = parent;\n        }\n        // remove old links\n        this._children = []; // equivalent to removing every child link one by one\n        parent.removeChild(this);\n        parent.parent.removeChild(parent);\n        // swap two nodes\n        this.parent = newParent;\n        parent.parent = this;\n    };\n    return DataFlowNode;\n}());\nexport { DataFlowNode };\nvar OutputNode = /** @class */ (function (_super) {\n    tslib_1.__extends(OutputNode, _super);\n    /**\n     * @param source The name of the source. Will change in assemble.\n     * @param type The type of the output node.\n     * @param refCounts A global ref counter map.\n     */\n    function OutputNode(parent, source, type, refCounts) {\n        var _this = _super.call(this, parent, source) || this;\n        _this.type = type;\n        _this.refCounts = refCounts;\n        _this._source = _this._name = source;\n        if (_this.refCounts && !(_this._name in _this.refCounts)) {\n            _this.refCounts[_this._name] = 0;\n        }\n        return _this;\n    }\n    OutputNode.prototype.clone = function () {\n        var cloneObj = new this.constructor;\n        cloneObj.debugName = 'clone_' + this.debugName;\n        cloneObj._source = this._source;\n        cloneObj._name = 'clone_' + this._name;\n        cloneObj.type = this.type;\n        cloneObj.refCounts = this.refCounts;\n        cloneObj.refCounts[cloneObj._name] = 0;\n        return cloneObj;\n    };\n    /**\n     * Request the datasource name and increase the ref counter.\n     *\n     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.\n     * It is crucial to request the name from an output node to mark it as a required node.\n     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.\n     *\n     * In the assemble phase, this will return the correct name.\n     */\n    OutputNode.prototype.getSource = function () {\n        this.refCounts[this._name]++;\n        return this._source;\n    };\n    OutputNode.prototype.isRequired = function () {\n        return !!this.refCounts[this._name];\n    };\n    OutputNode.prototype.setSource = function (source) {\n        this._source = source;\n    };\n    return OutputNode;\n}(DataFlowNode));\nexport { OutputNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWZsb3cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2RhdGFmbG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFLQTs7R0FFRztBQUNIO0lBS0Usc0JBQVksTUFBb0IsRUFBa0IsU0FBa0I7UUFBbEIsY0FBUyxHQUFULFNBQVMsQ0FBUztRQUo1RCxjQUFTLEdBQW1CLEVBQUUsQ0FBQztRQUUvQixZQUFPLEdBQWlCLElBQUksQ0FBQztRQUduQyxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ0ksNEJBQUssR0FBWjtRQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxxQ0FBYyxHQUFyQjtRQUNFLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVNLHNDQUFlLEdBQXRCO1FBQ0UsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBRUQsc0JBQUksZ0NBQU07YUFBVjtZQUNFLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN0QixDQUFDO1FBRUQ7O1dBRUc7YUFDSCxVQUFXLE1BQW9CO1lBQzdCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1lBQ3RCLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEIsQ0FBQzs7O09BUkE7SUFVRCxzQkFBSSxrQ0FBUTthQUFaO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBO0lBRU0sa0NBQVcsR0FBbEI7UUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQy9CLENBQUM7SUFFTSwrQkFBUSxHQUFmLFVBQWdCLEtBQW1CO1FBQ2pDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtB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R0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3BDLFFBQVEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBaUJEOzs7Ozs7OztPQVFHO0lBQ0ksOEJBQVMsR0FBaEI7UUFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQzdCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRU0sK0JBQVUsR0FBakI7UUFDRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sOEJBQVMsR0FBaEIsVUFBaUIsTUFBYztRQUM3QixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBQ0gsaUJBQUM7QUFBRCxDQUFDLEFBcERELENBQWdDLFlBQVksR0FvRDNDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge0RhdGFTb3VyY2VUeXBlfSBmcm9tICcuLi8uLi9kYXRhJztcbmltcG9ydCB7RGljdCwgU3RyaW5nU2V0fSBmcm9tICcuLi8uLi91dGlsJztcblxuXG4vKipcbiAqIEEgbm9kZSBpbiB0aGUgZGF0YWZsb3cgdHJlZS5cbiAqL1xuZXhwb3J0IGNsYXNzIERhdGFGbG93Tm9kZSB7XG4gIHByaXZhdGUgX2NoaWxkcmVuOiBEYXRhRmxvd05vZGVbXSA9IFtdO1xuXG4gIHByaXZhdGUgX3BhcmVudDogRGF0YUZsb3dOb2RlID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHVibGljIHJlYWRvbmx5IGRlYnVnTmFtZT86IHN0cmluZykge1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSB0aGlzIG5vZGUgd2l0aCBhIGRlZXAgY29weSBidXQgZG9uJ3QgY2xvbmUgbGlua3MgdG8gY2hpbGRyZW4gb3IgcGFyZW50cy5cbiAgICovXG4gIHB1YmxpYyBjbG9uZSgpOiBEYXRhRmxvd05vZGUge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGNsb25lIG5vZGUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb2YgZmllbGRzIHRoYXQgYXJlIGJlaW5nIGNyZWF0ZWQgYnkgdGhpcyBub2RlLlxuICAgKi9cbiAgcHVibGljIHByb2R1Y2VkRmllbGRzKCk6IFN0cmluZ1NldCB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgcHVibGljIGRlcGVuZGVudEZpZWxkcygpOiBTdHJpbmdTZXQge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIGdldCBwYXJlbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHBhcmVudCBvZiB0aGUgbm9kZSBhbmQgYWxzbyBhZGQgdGhpcyBub3QgdG8gdGhlIHBhcmVudCdzIGNoaWxkcmVuLlxuICAgKi9cbiAgc2V0IHBhcmVudChwYXJlbnQ6IERhdGFGbG93Tm9kZSkge1xuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICBwYXJlbnQuYWRkQ2hpbGQodGhpcyk7XG4gIH1cblxuICBnZXQgY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuO1xuICB9XG5cbiAgcHVibGljIG51bUNoaWxkcmVuKCkge1xuICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5sZW5ndGg7XG4gIH1cblxuICBwdWJsaWMgYWRkQ2hpbGQoY2hpbGQ6IERhdGFGbG93Tm9kZSkge1xuICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goY2hpbGQpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZUNoaWxkKG9sZENoaWxkOiBEYXRhRmxvd05vZGUpIHtcbiAgICB0aGlzLl9jaGlsZHJlbi5zcGxpY2UodGhpcy5fY2hpbGRyZW4uaW5kZXhPZihvbGRDaGlsZCksIDEpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBub2RlIGZyb20gdGhlIGRhdGFmbG93LlxuICAgKi9cbiAgcHVibGljIHJlbW92ZSgpIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuX2NoaWxkcmVuKSB7XG4gICAgICBjaGlsZC5wYXJlbnQgPSB0aGlzLl9wYXJlbnQ7XG4gICAgfVxuICAgIHRoaXMuX3BhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnQgYW5vdGhlciBub2RlIGFzIGEgcGFyZW50IG9mIHRoaXMgbm9kZS5cbiAgICovXG4gIHB1YmxpYyBpbnNlcnRBc1BhcmVudE9mKG90aGVyOiBEYXRhRmxvd05vZGUpIHtcbiAgICBjb25zdCBwYXJlbnQgPSBvdGhlci5wYXJlbnQ7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIG90aGVyLnBhcmVudCA9IHRoaXM7XG4gIH1cblxuICBwdWJsaWMgc3dhcFdpdGhQYXJlbnQoKSB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5fcGFyZW50O1xuICAgIGNvbnN0IG5ld1BhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG5cbiAgICAvLyByZWNvbm5lY3QgdGhlIGNoaWxkcmVuXG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLl9jaGlsZHJlbikge1xuICAgICAgY2hpbGQucGFyZW50ID0gcGFyZW50O1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSBvbGQgbGlua3NcbiAgICB0aGlzLl9jaGlsZHJlbiA9IFtdOyAgLy8gZXF1aXZhbGVudCB0byByZW1vdmluZyBldmVyeSBjaGlsZCBsaW5rIG9uZSBieSBvbmVcbiAgICBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgcGFyZW50LnBhcmVudC5yZW1vdmVDaGlsZChwYXJlbnQpO1xuXG5cbiAgICAvLyBzd2FwIHR3byBub2Rlc1xuICAgIHRoaXMucGFyZW50ID0gbmV3UGFyZW50O1xuICAgIHBhcmVudC5wYXJlbnQgPSB0aGlzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPdXRwdXROb2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHJpdmF0ZSBfc291cmNlOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfbmFtZTogc3RyaW5nO1xuXG4gIHB1YmxpYyBjbG9uZSgpOiB0aGlzIHtcbiAgICBjb25zdCBjbG9uZU9iaiA9IG5ldyAoPGFueT50aGlzLmNvbnN0cnVjdG9yKTtcbiAgICBjbG9uZU9iai5kZWJ1Z05hbWUgPSAnY2xvbmVfJyArIHRoaXMuZGVidWdOYW1lO1xuICAgIGNsb25lT2JqLl9zb3VyY2UgPSB0aGlzLl9zb3VyY2U7XG4gICAgY2xvbmVPYmouX25hbWUgPSAnY2xvbmVfJyArIHRoaXMuX25hbWU7XG4gICAgY2xvbmVPYmoudHlwZSA9IHRoaXMudHlwZTtcbiAgICBjbG9uZU9iai5yZWZDb3VudHMgPSB0aGlzLnJlZkNvdW50cztcbiAgICBjbG9uZU9iai5yZWZDb3VudHNbY2xvbmVPYmouX25hbWVdID0gMDtcbiAgICByZXR1cm4gY2xvbmVPYmo7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHNvdXJjZSBUaGUgbmFtZSBvZiB0aGUgc291cmNlLiBXaWxsIGNoYW5nZSBpbiBhc3NlbWJsZS5cbiAgICogQHBhcmFtIHR5cGUgVGhlIHR5cGUgb2YgdGhlIG91dHB1dCBub2RlLlxuICAgKiBAcGFyYW0gcmVmQ291bnRzIEEgZ2xvYmFsIHJlZiBjb3VudGVyIG1hcC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUZsb3dOb2RlLCBzb3VyY2U6IHN0cmluZywgcHVibGljIHJlYWRvbmx5IHR5cGU6IERhdGFTb3VyY2VUeXBlLCBwcml2YXRlIHJlYWRvbmx5IHJlZkNvdW50czogRGljdDxudW1iZXI+KSB7XG4gICAgc3VwZXIocGFyZW50LCBzb3VyY2UpO1xuXG4gICAgdGhpcy5fc291cmNlID0gdGhpcy5fbmFtZSA9IHNvdXJjZTtcblxuICAgIGlmICh0aGlzLnJlZkNvdW50cyAmJiAhKHRoaXMuX25hbWUgaW4gdGhpcy5yZWZDb3VudHMpKSB7XG4gICAgICB0aGlzLnJlZkNvdW50c1t0aGlzLl9uYW1lXSA9IDA7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlcXVlc3QgdGhlIGRhdGFzb3VyY2UgbmFtZSBhbmQgaW5jcmVhc2UgdGhlIHJlZiBjb3VudGVyLlxuICAgKlxuICAgKiBEdXJpbmcgdGhlIHBhcnNpbmcgcGhhc2UsIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNpbXBsZSBuYW1lIHN1Y2ggYXMgJ21haW4nIG9yICdyYXcnLlxuICAgKiBJdCBpcyBjcnVjaWFsIHRvIHJlcXVlc3QgdGhlIG5hbWUgZnJvbSBhbiBvdXRwdXQgbm9kZSB0byBtYXJrIGl0IGFzIGEgcmVxdWlyZWQgbm9kZS5cbiAgICogSWYgbm9ib2R5IGV2ZXIgcmVxdWVzdHMgdGhlIG5hbWUsIHRoaXMgZGF0YXNvdXJjZSB3aWxsIG5vdCBiZSBpbnN0YW50aWF0ZWQgaW4gdGhlIGFzc2VtYmxlIHBoYXNlLlxuICAgKlxuICAgKiBJbiB0aGUgYXNzZW1ibGUgcGhhc2UsIHRoaXMgd2lsbCByZXR1cm4gdGhlIGNvcnJlY3QgbmFtZS5cbiAgICovXG4gIHB1YmxpYyBnZXRTb3VyY2UoKSB7XG4gICAgdGhpcy5yZWZDb3VudHNbdGhpcy5fbmFtZV0rKztcbiAgICByZXR1cm4gdGhpcy5fc291cmNlO1xuICB9XG5cbiAgcHVibGljIGlzUmVxdWlyZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5yZWZDb3VudHNbdGhpcy5fbmFtZV07XG4gIH1cblxuICBwdWJsaWMgc2V0U291cmNlKHNvdXJjZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isScaleFieldDef, vgField } from '../../fielddef';\nimport { isSortArray } from '../../sort';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * We don't know what a calculate node depends on so we should never move it beyond anything that produces fields.\n */\nvar CalculateNode = /** @class */ (function (_super) {\n    tslib_1.__extends(CalculateNode, _super);\n    function CalculateNode(parent, transform) {\n        var _this = _super.call(this, parent) || this;\n        _this.transform = transform;\n        return _this;\n    }\n    CalculateNode.prototype.clone = function () {\n        return new CalculateNode(null, duplicate(this.transform));\n    };\n    CalculateNode.parseAllForSortIndex = function (parent, model) {\n        // get all the encoding with sort fields from model\n        model.forEachFieldDef(function (fieldDef, channel) {\n            if (isScaleFieldDef(fieldDef) && isSortArray(fieldDef.sort)) {\n                var transform = {\n                    calculate: CalculateNode.calculateExpressionFromSortField(fieldDef.field, fieldDef.sort),\n                    as: sortArrayIndexField(model, channel)\n                };\n                parent = new CalculateNode(parent, transform);\n            }\n        });\n        return parent;\n    };\n    CalculateNode.calculateExpressionFromSortField = function (field, sortFields) {\n        var expression = '';\n        var i;\n        for (i = 0; i < sortFields.length; i++) {\n            expression += \"datum.\" + field + \" === '\" + sortFields[i] + \"' ? \" + i + \" : \";\n        }\n        expression += i;\n        return expression;\n    };\n    CalculateNode.prototype.producedFields = function () {\n        var out = {};\n        out[this.transform.as] = true;\n        return out;\n    };\n    CalculateNode.prototype.assemble = function () {\n        return {\n            type: 'formula',\n            expr: this.transform.calculate,\n            as: this.transform.as\n        };\n    };\n    return CalculateNode;\n}(DataFlowNode));\nexport { CalculateNode };\nexport function sortArrayIndexField(model, channel) {\n    var fieldDef = model.fieldDef(channel);\n    return channel + \"_\" + vgField(fieldDef) + \"_sort_index\";\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsY3VsYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9jYWxjdWxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxlQUFlLEVBQWlCLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZFLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDdkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUtyQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXhDOztHQUVHO0FBQ0g7SUFBbUMseUNBQVk7SUFLN0MsdUJBQVksTUFBb0IsRUFBVSxTQUE2QjtRQUF2RSxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUNkO1FBRnlDLGVBQVMsR0FBVCxTQUFTLENBQW9COztJQUV2RSxDQUFDO0lBTk0sNkJBQUssR0FBWjtRQUNFLE9BQU8sSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBTWEsa0NBQW9CLEdBQWxDLFVBQW1DLE1BQW9CLEVBQUUsS0FBcUI7UUFDNUUsbURBQW1EO1FBQ25ELEtBQUssQ0FBQyxlQUFlLENBQUMsVUFBQyxRQUErQixFQUFFLE9BQXlCO1lBQy9FLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzNELElBQU0sU0FBUyxHQUF1QjtvQkFDcEMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxnQ0FBZ0MsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUM7b0JBQ3hGLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO2lCQUN4QyxDQUFDO2dCQUNGLE1BQU0sR0FBRyxJQUFJLGFBQWEsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDL0M7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFYSw4Q0FBZ0MsR0FBOUMsVUFBK0MsS0FBYSxFQUFFLFVBQW9CO1FBQ2hGLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQVMsQ0FBQztRQUNkLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QyxVQUFVLElBQUksV0FBUyxLQUFLLGNBQVMsVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFPLENBQUMsUUFBSyxDQUFDO1NBQ2pFO1FBQ0QsVUFBVSxJQUFJLENBQUMsQ0FBQztRQUNoQixPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRU0sc0NBQWMsR0FBckI7UUFDRSxJQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZixHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDOUIsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sZ0NBQVEsR0FBZjtRQUNFLE9BQU87WUFDTCxJQUFJLEVBQUUsU0FBUztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVM7WUFDOUIsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtTQUN0QixDQUFDO0lBQ0osQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTlDRCxDQUFtQyxZQUFZLEdBOEM5Qzs7QUFFRCxNQUFNLDhCQUE4QixLQUFxQixFQUFFLE9BQXlCO0lBQ2xGLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsT0FBVSxPQUFPLFNBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxnQkFBYSxDQUFDO0FBQ3RELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzU2NhbGVGaWVsZERlZiwgU2NhbGVGaWVsZERlZiwgdmdGaWVsZH0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtpc1NvcnRBcnJheX0gZnJvbSAnLi4vLi4vc29ydCc7XG5pbXBvcnQge2R1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnRm9ybXVsYVRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtNb2RlbFdpdGhGaWVsZH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHtTaW5nbGVEZWZDaGFubmVsfSBmcm9tICcuLy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtDYWxjdWxhdGVUcmFuc2Zvcm19IGZyb20gJy4vLi4vLi4vdHJhbnNmb3JtJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuL2RhdGFmbG93JztcblxuLyoqXG4gKiBXZSBkb24ndCBrbm93IHdoYXQgYSBjYWxjdWxhdGUgbm9kZSBkZXBlbmRzIG9uIHNvIHdlIHNob3VsZCBuZXZlciBtb3ZlIGl0IGJleW9uZCBhbnl0aGluZyB0aGF0IHByb2R1Y2VzIGZpZWxkcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENhbGN1bGF0ZU5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBDYWxjdWxhdGVOb2RlKG51bGwsIGR1cGxpY2F0ZSh0aGlzLnRyYW5zZm9ybSkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBEYXRhRmxvd05vZGUsIHByaXZhdGUgdHJhbnNmb3JtOiBDYWxjdWxhdGVUcmFuc2Zvcm0pIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwYXJzZUFsbEZvclNvcnRJbmRleChwYXJlbnQ6IERhdGFGbG93Tm9kZSwgbW9kZWw6IE1vZGVsV2l0aEZpZWxkKSB7XG4gICAgLy8gZ2V0IGFsbCB0aGUgZW5jb2Rpbmcgd2l0aCBzb3J0IGZpZWxkcyBmcm9tIG1vZGVsXG4gICAgbW9kZWwuZm9yRWFjaEZpZWxkRGVmKChmaWVsZERlZjogU2NhbGVGaWVsZERlZjxzdHJpbmc+LCBjaGFubmVsOiBTaW5nbGVEZWZDaGFubmVsKSA9PiB7XG4gICAgICBpZiAoaXNTY2FsZUZpZWxkRGVmKGZpZWxkRGVmKSAmJiBpc1NvcnRBcnJheShmaWVsZERlZi5zb3J0KSkge1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm06IENhbGN1bGF0ZVRyYW5zZm9ybSA9IHtcbiAgICAgICAgICBjYWxjdWxhdGU6IENhbGN1bGF0ZU5vZGUuY2FsY3VsYXRlRXhwcmVzc2lvbkZyb21Tb3J0RmllbGQoZmllbGREZWYuZmllbGQsIGZpZWxkRGVmLnNvcnQpLFxuICAgICAgICAgIGFzOiBzb3J0QXJyYXlJbmRleEZpZWxkKG1vZGVsLCBjaGFubmVsKVxuICAgICAgICB9O1xuICAgICAgICBwYXJlbnQgPSBuZXcgQ2FsY3VsYXRlTm9kZShwYXJlbnQsIHRyYW5zZm9ybSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcmVudDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY2FsY3VsYXRlRXhwcmVzc2lvbkZyb21Tb3J0RmllbGQoZmllbGQ6IHN0cmluZywgc29ydEZpZWxkczogc3RyaW5nW10pOiBzdHJpbmcge1xuICAgIGxldCBleHByZXNzaW9uID0gJyc7XG4gICAgbGV0IGk6IG51bWJlcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc29ydEZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcmVzc2lvbiArPSBgZGF0dW0uJHtmaWVsZH0gPT09ICcke3NvcnRGaWVsZHNbaV19JyA/ICR7aX0gOiBgO1xuICAgIH1cbiAgICBleHByZXNzaW9uICs9IGk7XG4gICAgcmV0dXJuIGV4cHJlc3Npb247XG4gIH1cblxuICBwdWJsaWMgcHJvZHVjZWRGaWVsZHMoKSB7XG4gICAgY29uc3Qgb3V0ID0ge307XG4gICAgb3V0W3RoaXMudHJhbnNmb3JtLmFzXSA9IHRydWU7XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0Zvcm11bGFUcmFuc2Zvcm0ge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAnZm9ybXVsYScsXG4gICAgICBleHByOiB0aGlzLnRyYW5zZm9ybS5jYWxjdWxhdGUsXG4gICAgICBhczogdGhpcy50cmFuc2Zvcm0uYXNcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb3J0QXJyYXlJbmRleEZpZWxkKG1vZGVsOiBNb2RlbFdpdGhGaWVsZCwgY2hhbm5lbDogU2luZ2xlRGVmQ2hhbm5lbCkge1xuICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICByZXR1cm4gYCR7Y2hhbm5lbH1fJHt2Z0ZpZWxkKGZpZWxkRGVmKX1fc29ydF9pbmRleGA7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { isScaleChannel } from '../../channel';\nimport { vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { differ, duplicate, keys } from '../../util';\nimport { binRequiresRange } from '../common';\nimport { DataFlowNode } from './dataflow';\nfunction addDimension(dims, channel, fieldDef) {\n    if (fieldDef.bin) {\n        dims[vgField(fieldDef, {})] = true;\n        dims[vgField(fieldDef, { binSuffix: 'end' })] = true;\n        if (binRequiresRange(fieldDef, channel)) {\n            dims[vgField(fieldDef, { binSuffix: 'range' })] = true;\n        }\n    }\n    else {\n        dims[vgField(fieldDef)] = true;\n    }\n    return dims;\n}\nfunction mergeMeasures(parentMeasures, childMeasures) {\n    for (var f in childMeasures) {\n        if (childMeasures.hasOwnProperty(f)) {\n            // when we merge a measure, we either have to add an aggregation operator or even a new field\n            var ops = childMeasures[f];\n            for (var op in ops) {\n                if (ops.hasOwnProperty(op)) {\n                    if (f in parentMeasures) {\n                        // add operator to existing measure field\n                        parentMeasures[f][op] = ops[op];\n                    }\n                    else {\n                        parentMeasures[f] = { op: ops[op] };\n                    }\n                }\n            }\n        }\n    }\n}\nvar AggregateNode = /** @class */ (function (_super) {\n    tslib_1.__extends(AggregateNode, _super);\n    /**\n     * @param dimensions string set for dimensions\n     * @param measures dictionary mapping field name => dict of aggregation functions and names to use\n     */\n    function AggregateNode(parent, dimensions, measures) {\n        var _this = _super.call(this, parent) || this;\n        _this.dimensions = dimensions;\n        _this.measures = measures;\n        return _this;\n    }\n    AggregateNode.prototype.clone = function () {\n        return new AggregateNode(null, tslib_1.__assign({}, this.dimensions), duplicate(this.measures));\n    };\n    AggregateNode.makeFromEncoding = function (parent, model) {\n        var isAggregate = false;\n        model.forEachFieldDef(function (fd) {\n            if (fd.aggregate) {\n                isAggregate = true;\n            }\n        });\n        var meas = {};\n        var dims = {};\n        if (!isAggregate) {\n            // no need to create this node if the model has no aggregation\n            return null;\n        }\n        model.forEachFieldDef(function (fieldDef, channel) {\n            var aggregate = fieldDef.aggregate, field = fieldDef.field;\n            if (aggregate) {\n                if (aggregate === 'count') {\n                    meas['*'] = meas['*'] || {};\n                    meas['*']['count'] = vgField(fieldDef);\n                }\n                else {\n                    meas[field] = meas[field] || {};\n                    meas[field][aggregate] = vgField(fieldDef);\n                    // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain\n                    if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {\n                        meas[field]['min'] = vgField({ field: field, aggregate: 'min' });\n                        meas[field]['max'] = vgField({ field: field, aggregate: 'max' });\n                    }\n                }\n            }\n            else {\n                addDimension(dims, channel, fieldDef);\n            }\n        });\n        if ((keys(dims).length + keys(meas).length) === 0) {\n            return null;\n        }\n        return new AggregateNode(parent, dims, meas);\n    };\n    AggregateNode.makeFromTransform = function (parent, t) {\n        var dims = {};\n        var meas = {};\n        for (var _i = 0, _a = t.aggregate; _i < _a.length; _i++) {\n            var s = _a[_i];\n            var op = s.op, field = s.field, as = s.as;\n            if (op) {\n                if (op === 'count') {\n                    meas['*'] = meas['*'] || {};\n                    meas['*']['count'] = as || vgField(s);\n                }\n                else {\n                    meas[field] = meas[field] || {};\n                    meas[field][op] = as || vgField(s);\n                }\n            }\n        }\n        for (var _b = 0, _c = t.groupby || []; _b < _c.length; _b++) {\n            var s = _c[_b];\n            dims[s] = true;\n        }\n        if ((keys(dims).length + keys(meas).length) === 0) {\n            return null;\n        }\n        return new AggregateNode(parent, dims, meas);\n    };\n    AggregateNode.prototype.merge = function (other) {\n        if (!differ(this.dimensions, other.dimensions)) {\n            mergeMeasures(this.measures, other.measures);\n            other.remove();\n        }\n        else {\n            log.debug('different dimensions, cannot merge');\n        }\n    };\n    AggregateNode.prototype.addDimensions = function (fields) {\n        var _this = this;\n        fields.forEach(function (f) { return _this.dimensions[f] = true; });\n    };\n    AggregateNode.prototype.dependentFields = function () {\n        var out = {};\n        keys(this.dimensions).forEach(function (f) { return out[f] = true; });\n        keys(this.measures).forEach(function (m) { return out[m] = true; });\n        return out;\n    };\n    AggregateNode.prototype.producedFields = function () {\n        var _this = this;\n        var out = {};\n        keys(this.measures).forEach(function (field) {\n            keys(_this.measures[field]).forEach(function (op) {\n                out[op + \"_\" + field] = true;\n            });\n        });\n        return out;\n    };\n    AggregateNode.prototype.assemble = function () {\n        var ops = [];\n        var fields = [];\n        var as = [];\n        for (var _i = 0, _a = keys(this.measures); _i < _a.length; _i++) {\n            var field = _a[_i];\n            for (var _b = 0, _c = keys(this.measures[field]); _b < _c.length; _b++) {\n                var op = _c[_b];\n                as.push(this.measures[field][op]);\n                ops.push(op);\n                fields.push(field);\n            }\n        }\n        var result = {\n            type: 'aggregate',\n            groupby: keys(this.dimensions),\n            ops: ops,\n            fields: fields,\n            as: as\n        };\n        return result;\n    };\n    return AggregateNode;\n}(DataFlowNode));\nexport { AggregateNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { COLUMN, ROW } from '../../channel';\nimport * as log from '../../log';\nimport { hasDiscreteDomain } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { assembleDomain, getFieldFromDomain } from '../scale/domain';\nimport { DataFlowNode } from './dataflow';\n/**\n * A node that helps us track what fields we are faceting by.\n */\nvar FacetNode = /** @class */ (function (_super) {\n    tslib_1.__extends(FacetNode, _super);\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    function FacetNode(parent, model, name, data) {\n        var _this = _super.call(this, parent) || this;\n        _this.model = model;\n        _this.name = name;\n        _this.data = data;\n        if (model.facet.column) {\n            _this.columnFields = [model.vgField(COLUMN)];\n            _this.columnName = model.getName('column_domain');\n            if (model.fieldDef(COLUMN).bin) {\n                _this.columnFields.push(model.vgField(COLUMN, { binSuffix: 'end' }));\n            }\n        }\n        if (model.facet.row) {\n            _this.rowFields = [model.vgField(ROW)];\n            _this.rowName = model.getName('row_domain');\n            if (model.fieldDef(ROW).bin) {\n                _this.rowFields.push(model.vgField(ROW, { binSuffix: 'end' }));\n            }\n        }\n        _this.childModel = model.child;\n        return _this;\n    }\n    Object.defineProperty(FacetNode.prototype, \"fields\", {\n        get: function () {\n            var fields = [];\n            if (this.columnFields) {\n                fields = fields.concat(this.columnFields);\n            }\n            if (this.rowFields) {\n                fields = fields.concat(this.rowFields);\n            }\n            return fields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The name to reference this source is its name.\n     */\n    FacetNode.prototype.getSource = function () {\n        return this.name;\n    };\n    FacetNode.prototype.getChildIndependentFieldsWithStep = function () {\n        var childIndependentFieldsWithStep = {};\n        for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {\n            var channel = _a[_i];\n            var childScaleComponent = this.childModel.component.scales[channel];\n            if (childScaleComponent && !childScaleComponent.merged) {\n                var type = childScaleComponent.get('type');\n                var range = childScaleComponent.get('range');\n                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                    var domain = assembleDomain(this.childModel, channel);\n                    var field = getFieldFromDomain(domain);\n                    if (field) {\n                        childIndependentFieldsWithStep[channel] = field;\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                    }\n                }\n            }\n        }\n        return childIndependentFieldsWithStep;\n    };\n    FacetNode.prototype.assembleRowColumnData = function (channel, crossedDataName, childIndependentFieldsWithStep) {\n        var aggregateChildField = {};\n        var childChannel = channel === 'row' ? 'y' : 'x';\n        if (childIndependentFieldsWithStep[childChannel]) {\n            if (crossedDataName) {\n                aggregateChildField = {\n                    // If there is a crossed data, calculate max\n                    fields: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]],\n                    ops: ['max'],\n                    // Although it is technically a max, just name it distinct so it's easier to refer to it\n                    as: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]]\n                };\n            }\n            else {\n                aggregateChildField = {\n                    // If there is no crossed data, just calculate distinct\n                    fields: [childIndependentFieldsWithStep[childChannel]],\n                    ops: ['distinct']\n                };\n            }\n        }\n        return {\n            name: channel === 'row' ? this.rowName : this.columnName,\n            // Use data from the crossed one if it exist\n            source: crossedDataName || this.data,\n            transform: [tslib_1.__assign({ type: 'aggregate', groupby: channel === 'row' ? this.rowFields : this.columnFields }, aggregateChildField)]\n        };\n    };\n    FacetNode.prototype.assemble = function () {\n        var data = [];\n        var crossedDataName = null;\n        var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n        if (this.columnName && this.rowName && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n            // Need to create a cross dataset to correctly calculate cardinality\n            crossedDataName = \"cross_\" + this.columnName + \"_\" + this.rowName;\n            var fields = [].concat(childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [], childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : []);\n            var ops = fields.map(function () { return 'distinct'; });\n            data.push({\n                name: crossedDataName,\n                source: this.data,\n                transform: [{\n                        type: 'aggregate',\n                        groupby: this.columnFields.concat(this.rowFields),\n                        fields: fields,\n                        ops: ops\n                    }]\n            });\n        }\n        if (this.columnName) {\n            data.push(this.assembleRowColumnData('column', crossedDataName, childIndependentFieldsWithStep));\n        }\n        if (this.rowName) {\n            data.push(this.assembleRowColumnData('row', crossedDataName, childIndependentFieldsWithStep));\n        }\n        return data;\n    };\n    return FacetNode;\n}(DataFlowNode));\nexport { FacetNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isScaleChannel } from '../../channel';\nimport { vgField as fieldRef } from '../../fielddef';\nimport { isPathMark } from '../../mark';\nimport { hasContinuousDomain } from '../../scale';\nimport { keys } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar FilterInvalidNode = /** @class */ (function (_super) {\n    tslib_1.__extends(FilterInvalidNode, _super);\n    function FilterInvalidNode(parent, fieldDefs) {\n        var _this = _super.call(this, parent) || this;\n        _this.fieldDefs = fieldDefs;\n        return _this;\n    }\n    FilterInvalidNode.prototype.clone = function () {\n        return new FilterInvalidNode(null, tslib_1.__assign({}, this.fieldDefs));\n    };\n    FilterInvalidNode.make = function (parent, model) {\n        var config = model.config, mark = model.mark;\n        if (config.invalidValues !== 'filter') {\n            return null;\n        }\n        var filter = model.reduceFieldDef(function (aggregator, fieldDef, channel) {\n            var scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);\n            if (scaleComponent) {\n                var scaleType = scaleComponent.get('type');\n                // While discrete domain scales can handle invalid values, continuous scales can't.\n                // Thus, for non-path marks, we have to filter null for scales with continuous domains.\n                // (For path marks, we will use \"defined\" property and skip these values instead.)\n                if (hasContinuousDomain(scaleType) && !fieldDef.aggregate && !isPathMark(mark)) {\n                    aggregator[fieldDef.field] = fieldDef;\n                }\n            }\n            return aggregator;\n        }, {});\n        if (!keys(filter).length) {\n            return null;\n        }\n        return new FilterInvalidNode(parent, filter);\n    };\n    Object.defineProperty(FilterInvalidNode.prototype, \"filter\", {\n        get: function () {\n            return this.fieldDefs;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // create the VgTransforms for each of the filtered fields\n    FilterInvalidNode.prototype.assemble = function () {\n        var _this = this;\n        var filters = keys(this.filter).reduce(function (vegaFilters, field) {\n            var fieldDef = _this.fieldDefs[field];\n            var ref = fieldRef(fieldDef, { expr: 'datum' });\n            if (fieldDef !== null) {\n                vegaFilters.push(ref + \" !== null\");\n                vegaFilters.push(\"!isNaN(\" + ref + \")\");\n            }\n            return vegaFilters;\n        }, []);\n        return filters.length > 0 ?\n            {\n                type: 'filter',\n                expr: filters.join(' && ')\n            } : null;\n    };\n    return FilterInvalidNode;\n}(DataFlowNode));\nexport { FilterInvalidNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyaW52YWxpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvZmlsdGVyaW52YWxpZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3QyxPQUFPLEVBQVcsT0FBTyxJQUFJLFFBQVEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzdELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDdEMsT0FBTyxFQUFDLG1CQUFtQixFQUFZLE1BQU0sYUFBYSxDQUFDO0FBQzNELE9BQU8sRUFBTyxJQUFJLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFHdEMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUV4QztJQUF1Qyw2Q0FBWTtJQUtqRCwyQkFBWSxNQUFvQixFQUFVLFNBQWlDO1FBQTNFLFlBQ0Msa0JBQU0sTUFBTSxDQUFDLFNBQ2I7UUFGeUMsZUFBUyxHQUFULFNBQVMsQ0FBd0I7O0lBRTNFLENBQUM7SUFOTSxpQ0FBSyxHQUFaO1FBQ0UsT0FBTyxJQUFJLGlCQUFpQixDQUFDLElBQUksdUJBQU0sSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFNYSxzQkFBSSxHQUFsQixVQUFtQixNQUFvQixFQUFFLEtBQWdCO1FBQ2hELElBQUEscUJBQU0sRUFBRSxpQkFBSSxDQUFVO1FBQzdCLElBQUksTUFBTSxDQUFDLGFBQWEsS0FBSyxRQUFRLEVBQUc7WUFDdEMsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBQyxVQUFrQyxFQUFFLFFBQVEsRUFBRSxPQUFPO1lBQ3hGLElBQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkYsSUFBSSxjQUFjLEVBQUU7Z0JBQ2xCLElBQU0sU0FBUyxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRzdDLG1GQUFtRjtnQkFDbkYsdUZBQXVGO2dCQUN2RixrRkFBa0Y7Z0JBQ2xGLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUM5RSxVQUFVLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQztpQkFDdkM7YUFDRjtZQUNELE9BQU8sVUFBVSxDQUFDO1FBQ3BCLENBQUMsRUFBRSxFQUE0QixDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELHNCQUFJLHFDQUFNO2FBQVY7WUFDRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFFRCwwREFBMEQ7SUFDbkQsb0NBQVEsR0FBZjtRQUFBLGlCQWlCQztRQWhCQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLFdBQVcsRUFBRSxLQUFLO1lBQzFELElBQU0sUUFBUSxHQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkMsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO1lBRWhELElBQUksUUFBUSxLQUFLLElBQUksRUFBRTtnQkFDckIsV0FBVyxDQUFDLElBQUksQ0FBSSxHQUFHLGNBQVcsQ0FBQyxDQUFDO2dCQUNwQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVUsR0FBRyxNQUFHLENBQUMsQ0FBQzthQUNwQztZQUNELE9BQU8sV0FBVyxDQUFDO1FBQ3JCLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVQLE9BQU8sT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMzQjtnQkFDSSxJQUFJLEVBQUUsUUFBUTtnQkFDZCxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDN0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1gsQ0FBQztJQUNILHdCQUFDO0FBQUQsQ0FBQyxBQTdERCxDQUF1QyxZQUFZLEdBNkRsRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTY2FsZUNoYW5uZWx9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtGaWVsZERlZiwgdmdGaWVsZCBhcyBmaWVsZFJlZn0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtpc1BhdGhNYXJrfSBmcm9tICcuLi8uLi9tYXJrJztcbmltcG9ydCB7aGFzQ29udGludW91c0RvbWFpbiwgU2NhbGVUeXBlfSBmcm9tICcuLi8uLi9zY2FsZSc7XG5pbXBvcnQge0RpY3QsIGtleXN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0ZpbHRlclRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtEYXRhRmxvd05vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuXG5leHBvcnQgY2xhc3MgRmlsdGVySW52YWxpZE5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBGaWx0ZXJJbnZhbGlkTm9kZShudWxsLCB7Li4udGhpcy5maWVsZERlZnN9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUZsb3dOb2RlLCBwcml2YXRlIGZpZWxkRGVmczogRGljdDxGaWVsZERlZjxzdHJpbmc+Pikge1xuICAgc3VwZXIocGFyZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWFrZShwYXJlbnQ6IERhdGFGbG93Tm9kZSwgbW9kZWw6IFVuaXRNb2RlbCk6IEZpbHRlckludmFsaWROb2RlIHtcbiAgICBjb25zdCB7Y29uZmlnLCBtYXJrfSA9IG1vZGVsO1xuICAgIGlmIChjb25maWcuaW52YWxpZFZhbHVlcyAhPT0gJ2ZpbHRlcicgKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBmaWx0ZXIgPSBtb2RlbC5yZWR1Y2VGaWVsZERlZigoYWdncmVnYXRvcjogRGljdDxGaWVsZERlZjxzdHJpbmc+PiwgZmllbGREZWYsIGNoYW5uZWwpID0+IHtcbiAgICAgIGNvbnN0IHNjYWxlQ29tcG9uZW50ID0gaXNTY2FsZUNoYW5uZWwoY2hhbm5lbCkgJiYgbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCk7XG4gICAgICBpZiAoc2NhbGVDb21wb25lbnQpIHtcbiAgICAgICAgY29uc3Qgc2NhbGVUeXBlID0gc2NhbGVDb21wb25lbnQuZ2V0KCd0eXBlJyk7XG5cblxuICAgICAgICAvLyBXaGlsZSBkaXNjcmV0ZSBkb21haW4gc2NhbGVzIGNhbiBoYW5kbGUgaW52YWxpZCB2YWx1ZXMsIGNvbnRpbnVvdXMgc2NhbGVzIGNhbid0LlxuICAgICAgICAvLyBUaHVzLCBmb3Igbm9uLXBhdGggbWFya3MsIHdlIGhhdmUgdG8gZmlsdGVyIG51bGwgZm9yIHNjYWxlcyB3aXRoIGNvbnRpbnVvdXMgZG9tYWlucy5cbiAgICAgICAgLy8gKEZvciBwYXRoIG1hcmtzLCB3ZSB3aWxsIHVzZSBcImRlZmluZWRcIiBwcm9wZXJ0eSBhbmQgc2tpcCB0aGVzZSB2YWx1ZXMgaW5zdGVhZC4pXG4gICAgICAgIGlmIChoYXNDb250aW51b3VzRG9tYWluKHNjYWxlVHlwZSkgJiYgIWZpZWxkRGVmLmFnZ3JlZ2F0ZSAmJiAhaXNQYXRoTWFyayhtYXJrKSkge1xuICAgICAgICAgIGFnZ3JlZ2F0b3JbZmllbGREZWYuZmllbGRdID0gZmllbGREZWY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhZ2dyZWdhdG9yO1xuICAgIH0sIHt9IGFzIERpY3Q8RmllbGREZWY8c3RyaW5nPj4pO1xuXG4gICAgaWYgKCFrZXlzKGZpbHRlcikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEZpbHRlckludmFsaWROb2RlKHBhcmVudCwgZmlsdGVyKTtcbiAgfVxuXG4gIGdldCBmaWx0ZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmllbGREZWZzO1xuICB9XG5cbiAgLy8gY3JlYXRlIHRoZSBWZ1RyYW5zZm9ybXMgZm9yIGVhY2ggb2YgdGhlIGZpbHRlcmVkIGZpZWxkc1xuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdGaWx0ZXJUcmFuc2Zvcm0ge1xuICAgIGNvbnN0IGZpbHRlcnMgPSBrZXlzKHRoaXMuZmlsdGVyKS5yZWR1Y2UoKHZlZ2FGaWx0ZXJzLCBmaWVsZCkgPT4ge1xuICAgICAgY29uc3QgZmllbGREZWYgPSB0aGlzLmZpZWxkRGVmc1tmaWVsZF07XG4gICAgICBjb25zdCByZWYgPSBmaWVsZFJlZihmaWVsZERlZiwge2V4cHI6ICdkYXR1bSd9KTtcblxuICAgICAgaWYgKGZpZWxkRGVmICE9PSBudWxsKSB7XG4gICAgICAgIHZlZ2FGaWx0ZXJzLnB1c2goYCR7cmVmfSAhPT0gbnVsbGApO1xuICAgICAgICB2ZWdhRmlsdGVycy5wdXNoKGAhaXNOYU4oJHtyZWZ9KWApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZlZ2FGaWx0ZXJzO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiBmaWx0ZXJzLmxlbmd0aCA+IDAgP1xuICAgIHtcbiAgICAgICAgdHlwZTogJ2ZpbHRlcicsXG4gICAgICAgIGV4cHI6IGZpbHRlcnMuam9pbignICYmICcpXG4gICAgfSA6IG51bGw7XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { isNumber, isString, toSet } from 'vega-util';\nimport { isCountingAggregateOp } from '../../aggregate';\nimport { isDateTime } from '../../datetime';\nimport { isNumberFieldDef, isScaleFieldDef, isTimeFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { forEachLeaf } from '../../logical';\nimport { isFieldEqualPredicate, isFieldOneOfPredicate, isFieldPredicate, isFieldRangePredicate } from '../../predicate';\nimport { isSortField } from '../../sort';\nimport { accessPathDepth, accessPathWithDatum, duplicate, keys, removePathFromField } from '../../util';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { Split } from '../split';\nimport { DataFlowNode } from './dataflow';\n/**\n * @param field The field.\n * @param parse What to parse the field as.\n */\nfunction parseExpression(field, parse) {\n    var f = accessPathWithDatum(field);\n    if (parse === 'number') {\n        return \"toNumber(\" + f + \")\";\n    }\n    else if (parse === 'boolean') {\n        return \"toBoolean(\" + f + \")\";\n    }\n    else if (parse === 'string') {\n        return \"toString(\" + f + \")\";\n    }\n    else if (parse === 'date') {\n        return \"toDate(\" + f + \")\";\n    }\n    else if (parse === 'flatten') {\n        return f;\n    }\n    else if (parse.indexOf('date:') === 0) {\n        var specifier = parse.slice(5, parse.length);\n        return \"timeParse(\" + f + \",\" + specifier + \")\";\n    }\n    else if (parse.indexOf('utc:') === 0) {\n        var specifier = parse.slice(4, parse.length);\n        return \"utcParse(\" + f + \",\" + specifier + \")\";\n    }\n    else {\n        log.warn(log.message.unrecognizedParse(parse));\n        return null;\n    }\n}\nvar ParseNode = /** @class */ (function (_super) {\n    tslib_1.__extends(ParseNode, _super);\n    function ParseNode(parent, parse) {\n        var _this = _super.call(this, parent) || this;\n        _this._parse = parse;\n        return _this;\n    }\n    ParseNode.prototype.clone = function () {\n        return new ParseNode(null, duplicate(this._parse));\n    };\n    /**\n     * Creates a parse node from a data.format.parse and updates ancestorParse.\n     */\n    ParseNode.makeExplicit = function (parent, model, ancestorParse) {\n        // Custom parse\n        var explicit = {};\n        var data = model.data;\n        if (data && data.format && data.format.parse) {\n            explicit = data.format.parse;\n        }\n        return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\n    };\n    ParseNode.makeImplicitFromFilterTransform = function (parent, transform, ancestorParse) {\n        var parse = {};\n        forEachLeaf(transform.filter, function (filter) {\n            if (isFieldPredicate(filter)) {\n                // Automatically add a parse node for filters with filter objects\n                var val = null;\n                // For EqualFilter, just use the equal property.\n                // For RangeFilter and OneOfFilter, all array members should have\n                // the same type, so we only use the first one.\n                if (isFieldEqualPredicate(filter)) {\n                    val = filter.equal;\n                }\n                else if (isFieldRangePredicate(filter)) {\n                    val = filter.range[0];\n                }\n                else if (isFieldOneOfPredicate(filter)) {\n                    val = (filter.oneOf || filter['in'])[0];\n                } // else -- for filter expression, we can't infer anything\n                if (val) {\n                    if (isDateTime(val)) {\n                        parse[filter.field] = 'date';\n                    }\n                    else if (isNumber(val)) {\n                        parse[filter.field] = 'number';\n                    }\n                    else if (isString(val)) {\n                        parse[filter.field] = 'string';\n                    }\n                }\n                if (filter.timeUnit) {\n                    parse[filter.field] = 'date';\n                }\n            }\n        });\n        if (keys(parse).length === 0) {\n            return null;\n        }\n        return this.makeWithAncestors(parent, {}, parse, ancestorParse);\n    };\n    /**\n     * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n     */\n    ParseNode.makeImplicitFromEncoding = function (parent, model, ancestorParse) {\n        var implicit = {};\n        if (isUnitModel(model) || isFacetModel(model)) {\n            // Parse encoded fields\n            model.forEachFieldDef(function (fieldDef) {\n                if (isTimeFieldDef(fieldDef)) {\n                    implicit[fieldDef.field] = 'date';\n                }\n                else if (isNumberFieldDef(fieldDef)) {\n                    if (!isCountingAggregateOp(fieldDef.aggregate)) {\n                        implicit[fieldDef.field] = 'number';\n                    }\n                }\n                else if (accessPathDepth(fieldDef.field) > 1) {\n                    // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n                    // (Parsing numbers / dates already flattens numeric and temporal fields.)\n                    if (!(fieldDef.field in implicit)) {\n                        implicit[fieldDef.field] = 'flatten';\n                    }\n                }\n                else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {\n                    // Flatten fields that we sort by but that are not otherwise flattened.\n                    if (!(fieldDef.sort.field in implicit)) {\n                        implicit[fieldDef.sort.field] = 'flatten';\n                    }\n                }\n            });\n        }\n        return this.makeWithAncestors(parent, {}, implicit, ancestorParse);\n    };\n    /**\n     * Creates a parse node from \"explicit\" parse and \"implicit\" parse and updates ancestorParse.\n     */\n    ParseNode.makeWithAncestors = function (parent, explicit, implicit, ancestorParse) {\n        // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \"derived\"). We also don't need to flatten a field that has already been parsed.\n        for (var _i = 0, _a = keys(implicit); _i < _a.length; _i++) {\n            var field = _a[_i];\n            var parsedAs = ancestorParse.getWithExplicit(field);\n            if (parsedAs.value !== undefined) {\n                // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\n                if (parsedAs.explicit || parsedAs.value === implicit[field] || parsedAs.value === 'derived' || implicit[field] === 'flatten') {\n                    delete implicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, implicit[field], parsedAs.value));\n                }\n            }\n        }\n        for (var _b = 0, _c = keys(explicit); _b < _c.length; _b++) {\n            var field = _c[_b];\n            var parsedAs = ancestorParse.get(field);\n            if (parsedAs !== undefined) {\n                // Don't parse a field again if it has been parsed with the same type already.\n                if (parsedAs === explicit[field]) {\n                    delete explicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, explicit[field], parsedAs));\n                }\n            }\n        }\n        var parse = new Split(explicit, implicit);\n        // add the format parse from this model so that children don't parse the same field again\n        ancestorParse.copyAll(parse);\n        // copy only non-null parses\n        var p = {};\n        for (var _d = 0, _e = keys(parse.combine()); _d < _e.length; _d++) {\n            var key = _e[_d];\n            var val = parse.get(key);\n            if (val !== null) {\n                p[key] = val;\n            }\n        }\n        if (keys(p).length === 0 || ancestorParse.parseNothing) {\n            return null;\n        }\n        return new ParseNode(parent, p);\n    };\n    Object.defineProperty(ParseNode.prototype, \"parse\", {\n        get: function () {\n            return this._parse;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ParseNode.prototype.merge = function (other) {\n        this._parse = tslib_1.__assign({}, this._parse, other.parse);\n        other.remove();\n    };\n    /**\n     * Assemble an object for Vega's format.parse property.\n     */\n    ParseNode.prototype.assembleFormatParse = function () {\n        var formatParse = {};\n        for (var _i = 0, _a = keys(this._parse); _i < _a.length; _i++) {\n            var field = _a[_i];\n            var p = this._parse[field];\n            if (accessPathDepth(field) === 1) {\n                formatParse[field] = p;\n            }\n        }\n        return formatParse;\n    };\n    // format parse depends and produces all fields in its parse\n    ParseNode.prototype.producedFields = function () {\n        return toSet(keys(this._parse));\n    };\n    ParseNode.prototype.dependentFields = function () {\n        return toSet(keys(this._parse));\n    };\n    ParseNode.prototype.assembleTransforms = function (onlyNested) {\n        var _this = this;\n        if (onlyNested === void 0) { onlyNested = false; }\n        return keys(this._parse)\n            .filter(function (field) { return onlyNested ? accessPathDepth(field) > 1 : true; })\n            .map(function (field) {\n            var expr = parseExpression(field, _this._parse[field]);\n            if (!expr) {\n                return null;\n            }\n            var formula = {\n                type: 'formula',\n                expr: expr,\n                as: removePathFromField(field) // Vega output is always flattened\n            };\n            return formula;\n        }).filter(function (t) { return t !== null; });\n    };\n    return ParseNode;\n}(DataFlowNode));\nexport { ParseNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isInlineData, isNamedData, isUrlData } from '../../data';\nimport { contains, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar SourceNode = /** @class */ (function (_super) {\n    tslib_1.__extends(SourceNode, _super);\n    function SourceNode(data) {\n        var _this = _super.call(this, null) || this;\n        data = data || { name: 'source' };\n        if (isInlineData(data)) {\n            _this._data = { values: data.values };\n        }\n        else if (isUrlData(data)) {\n            _this._data = { url: data.url };\n            if (!data.format) {\n                data.format = {};\n            }\n            if (!data.format || !data.format.type) {\n                // Extract extension from URL using snippet from\n                // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n                var defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n                if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\n                    defaultExtension = 'json';\n                }\n                // defaultExtension has type string but we ensure that it is DataFormatType above\n                data.format.type = defaultExtension;\n            }\n        }\n        else if (isNamedData(data)) {\n            _this._data = {};\n        }\n        // any dataset can be named\n        if (data.name) {\n            _this._name = data.name;\n        }\n        if (data.format) {\n            var _a = data.format, _b = _a.parse, parse = _b === void 0 ? null : _b, format = tslib_1.__rest(_a, [\"parse\"]);\n            _this._data.format = format;\n        }\n        return _this;\n    }\n    Object.defineProperty(SourceNode.prototype, \"data\", {\n        get: function () {\n            return this._data;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SourceNode.prototype.hasName = function () {\n        return !!this._name;\n    };\n    Object.defineProperty(SourceNode.prototype, \"dataName\", {\n        get: function () {\n            return this._name;\n        },\n        set: function (name) {\n            this._name = name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SourceNode.prototype, \"parent\", {\n        set: function (parent) {\n            throw new Error('Source nodes have to be roots.');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SourceNode.prototype.remove = function () {\n        throw new Error('Source nodes are roots and cannot be removed.');\n    };\n    /**\n     * Return a unique identifier for this data source.\n     */\n    SourceNode.prototype.hash = function () {\n        if (isInlineData(this._data)) {\n            if (!this._hash) {\n                // Hashing can be expensive for large inline datasets.\n                this._hash = hash(this._data);\n            }\n            return this._hash;\n        }\n        else if (isUrlData(this._data)) {\n            return hash([this._data.url, this._data.format]);\n        }\n        else {\n            return this._name;\n        }\n    };\n    SourceNode.prototype.assemble = function () {\n        return tslib_1.__assign({ name: this._name }, this._data, { transform: [] });\n    };\n    return SourceNode;\n}(DataFlowNode));\nexport { SourceNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9zb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBdUIsWUFBWSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDdEYsT0FBTyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFMUMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUV4QztJQUFnQyxzQ0FBWTtJQU8xQyxvQkFBWSxJQUFVO1FBQXRCLFlBQ0Usa0JBQU0sSUFBSSxDQUFDLFNBcUNaO1FBbkNDLElBQUksR0FBRyxJQUFJLElBQUksRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUM7UUFFaEMsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdEIsS0FBSSxDQUFDLEtBQUssR0FBRyxFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUM7U0FDcEM7YUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMxQixLQUFJLENBQUMsS0FBSyxHQUFHLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUMsQ0FBQztZQUU3QixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7YUFDbEI7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFO2dCQUNyQyxnREFBZ0Q7Z0JBQ2hELHdHQUF3RztnQkFDeEcsSUFBSSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMzRCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLEVBQUU7b0JBQzFFLGdCQUFnQixHQUFHLE1BQU0sQ0FBQztpQkFDM0I7Z0JBRUQsaUZBQWlGO2dCQUNqRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxnQkFBa0MsQ0FBQzthQUN2RDtTQUNGO2FBQU0sSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUIsS0FBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDakI7UUFFRCwyQkFBMkI7UUFDM0IsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3hCO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBTSxnQkFBdUMsRUFBdEMsYUFBWSxFQUFaLGlDQUFZLEVBQUUsc0NBQXdCLENBQUM7WUFDOUMsS0FBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1NBQzVCOztJQUNILENBQUM7SUFFRCxzQkFBSSw0QkFBSTthQUFSO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7OztPQUFBO0lBRU0sNEJBQU8sR0FBZDtRQUNFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELHNCQUFJLGdDQUFRO2FBQVo7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQzthQUVELFVBQWEsSUFBWTtZQUN2QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDOzs7T0FKQTtJQU1ELHNCQUFJLDhCQUFNO2FBQVYsVUFBVyxNQUFvQjtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7UUFDcEQsQ0FBQzs7O09BQUE7SUFFTSwyQkFBTSxHQUFiO1FBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7T0FFRztJQUNJLHlCQUFJLEdBQVg7UUFDRSxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7Z0JBQ2Ysc0RBQXNEO2dCQUN0RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDL0I7WUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDbkI7YUFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDaEMsT0FBTyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDbEQ7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNuQjtJQUNILENBQUM7SUFFTSw2QkFBUSxHQUFmO1FBQ0UsMEJBQ0UsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLElBQ2IsSUFBSSxDQUFDLEtBQUssSUFDYixTQUFTLEVBQUUsRUFBRSxJQUNiO0lBQ0osQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQS9GRCxDQUFnQyxZQUFZLEdBK0YzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGF0YSwgRGF0YUZvcm1hdFR5cGUsIGlzSW5saW5lRGF0YSwgaXNOYW1lZERhdGEsIGlzVXJsRGF0YX0gZnJvbSAnLi4vLi4vZGF0YSc7XG5pbXBvcnQge2NvbnRhaW5zLCBoYXNofSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdEYXRhfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cbmV4cG9ydCBjbGFzcyBTb3VyY2VOb2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHJpdmF0ZSBfZGF0YTogUGFydGlhbDxWZ0RhdGE+O1xuXG4gIHByaXZhdGUgX25hbWU6IHN0cmluZztcblxuICBwcml2YXRlIF9oYXNoOiBzdHJpbmcgfCBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoZGF0YTogRGF0YSkge1xuICAgIHN1cGVyKG51bGwpOyAgLy8gc291cmNlIGNhbm5vdCBoYXZlIHBhcmVudFxuXG4gICAgZGF0YSA9IGRhdGEgfHwge25hbWU6ICdzb3VyY2UnfTtcblxuICAgIGlmIChpc0lubGluZURhdGEoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSB7dmFsdWVzOiBkYXRhLnZhbHVlc307XG4gICAgfSBlbHNlIGlmIChpc1VybERhdGEoZGF0YSkpIHtcbiAgICAgIHRoaXMuX2RhdGEgPSB7dXJsOiBkYXRhLnVybH07XG5cbiAgICAgIGlmICghZGF0YS5mb3JtYXQpIHtcbiAgICAgICAgZGF0YS5mb3JtYXQgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkYXRhLmZvcm1hdCB8fCAhZGF0YS5mb3JtYXQudHlwZSkge1xuICAgICAgICAvLyBFeHRyYWN0IGV4dGVuc2lvbiBmcm9tIFVSTCB1c2luZyBzbmlwcGV0IGZyb21cbiAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82ODA5MjkvaG93LXRvLWV4dHJhY3QtZXh0ZW5zaW9uLWZyb20tZmlsZW5hbWUtc3RyaW5nLWluLWphdmFzY3JpcHRcbiAgICAgICAgbGV0IGRlZmF1bHRFeHRlbnNpb24gPSAvKD86XFwuKFteLl0rKSk/JC8uZXhlYyhkYXRhLnVybClbMV07XG4gICAgICAgIGlmICghY29udGFpbnMoWydqc29uJywgJ2NzdicsICd0c3YnLCAnZHN2JywgJ3RvcG9qc29uJ10sIGRlZmF1bHRFeHRlbnNpb24pKSB7XG4gICAgICAgICAgZGVmYXVsdEV4dGVuc2lvbiA9ICdqc29uJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlZmF1bHRFeHRlbnNpb24gaGFzIHR5cGUgc3RyaW5nIGJ1dCB3ZSBlbnN1cmUgdGhhdCBpdCBpcyBEYXRhRm9ybWF0VHlwZSBhYm92ZVxuICAgICAgICBkYXRhLmZvcm1hdC50eXBlID0gZGVmYXVsdEV4dGVuc2lvbiBhcyBEYXRhRm9ybWF0VHlwZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzTmFtZWREYXRhKGRhdGEpKSB7XG4gICAgICB0aGlzLl9kYXRhID0ge307XG4gICAgfVxuXG4gICAgLy8gYW55IGRhdGFzZXQgY2FuIGJlIG5hbWVkXG4gICAgaWYgKGRhdGEubmFtZSkge1xuICAgICAgdGhpcy5fbmFtZSA9IGRhdGEubmFtZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5mb3JtYXQpIHtcbiAgICAgIGNvbnN0IHtwYXJzZSA9IG51bGwsIC4uLmZvcm1hdH0gPSBkYXRhLmZvcm1hdDtcbiAgICAgIHRoaXMuX2RhdGEuZm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cbiAgfVxuXG4gIGdldCBkYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICB9XG5cbiAgcHVibGljIGhhc05hbWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5fbmFtZTtcbiAgfVxuXG4gIGdldCBkYXRhTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgfVxuXG4gIHNldCBkYXRhTmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgfVxuXG4gIHNldCBwYXJlbnQocGFyZW50OiBEYXRhRmxvd05vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvdXJjZSBub2RlcyBoYXZlIHRvIGJlIHJvb3RzLicpO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NvdXJjZSBub2RlcyBhcmUgcm9vdHMgYW5kIGNhbm5vdCBiZSByZW1vdmVkLicpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGlzIGRhdGEgc291cmNlLlxuICAgKi9cbiAgcHVibGljIGhhc2goKSB7XG4gICAgaWYgKGlzSW5saW5lRGF0YSh0aGlzLl9kYXRhKSkge1xuICAgICAgaWYgKCF0aGlzLl9oYXNoKSB7XG4gICAgICAgIC8vIEhhc2hpbmcgY2FuIGJlIGV4cGVuc2l2ZSBmb3IgbGFyZ2UgaW5saW5lIGRhdGFzZXRzLlxuICAgICAgICB0aGlzLl9oYXNoID0gaGFzaCh0aGlzLl9kYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLl9oYXNoO1xuICAgIH0gZWxzZSBpZiAoaXNVcmxEYXRhKHRoaXMuX2RhdGEpKSB7XG4gICAgICByZXR1cm4gaGFzaChbdGhpcy5fZGF0YS51cmwsIHRoaXMuX2RhdGEuZm9ybWF0XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0RhdGEge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLl9uYW1lLFxuICAgICAgLi4udGhpcy5fZGF0YSxcbiAgICAgIHRyYW5zZm9ybTogW11cbiAgICB9O1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { vgField } from '../../fielddef';\nimport { fieldExpr } from '../../timeunit';\nimport { duplicate, keys, vals } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar TimeUnitNode = /** @class */ (function (_super) {\n    tslib_1.__extends(TimeUnitNode, _super);\n    function TimeUnitNode(parent, formula) {\n        var _this = _super.call(this, parent) || this;\n        _this.formula = formula;\n        return _this;\n    }\n    TimeUnitNode.prototype.clone = function () {\n        return new TimeUnitNode(null, duplicate(this.formula));\n    };\n    TimeUnitNode.makeFromEncoding = function (parent, model) {\n        var formula = model.reduceFieldDef(function (timeUnitComponent, fieldDef) {\n            if (fieldDef.timeUnit) {\n                var f = vgField(fieldDef);\n                timeUnitComponent[f] = {\n                    as: f,\n                    timeUnit: fieldDef.timeUnit,\n                    field: fieldDef.field\n                };\n            }\n            return timeUnitComponent;\n        }, {});\n        if (keys(formula).length === 0) {\n            return null;\n        }\n        return new TimeUnitNode(parent, formula);\n    };\n    TimeUnitNode.makeFromTransform = function (parent, t) {\n        var _a;\n        return new TimeUnitNode(parent, (_a = {},\n            _a[t.field] = {\n                as: t.as,\n                timeUnit: t.timeUnit,\n                field: t.field\n            },\n            _a));\n    };\n    TimeUnitNode.prototype.merge = function (other) {\n        this.formula = tslib_1.__assign({}, this.formula, other.formula);\n        other.remove();\n    };\n    TimeUnitNode.prototype.producedFields = function () {\n        var out = {};\n        vals(this.formula).forEach(function (f) {\n            out[f.as] = true;\n        });\n        return out;\n    };\n    TimeUnitNode.prototype.dependentFields = function () {\n        var out = {};\n        vals(this.formula).forEach(function (f) {\n            out[f.field] = true;\n        });\n        return out;\n    };\n    TimeUnitNode.prototype.assemble = function () {\n        return vals(this.formula).map(function (c) {\n            return {\n                type: 'formula',\n                as: c.as,\n                expr: fieldExpr(c.timeUnit, c.field)\n            };\n        });\n    };\n    return TimeUnitNode;\n}(DataFlowNode));\nexport { TimeUnitNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXVuaXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL3RpbWV1bml0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFDLFNBQVMsRUFBVyxNQUFNLGdCQUFnQixDQUFDO0FBRW5ELE9BQU8sRUFBTyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUd2RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBU3hDO0lBQWtDLHdDQUFZO0lBSzVDLHNCQUFZLE1BQW9CLEVBQVUsT0FBZ0M7UUFBMUUsWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FDZDtRQUZ5QyxhQUFPLEdBQVAsT0FBTyxDQUF5Qjs7SUFFMUUsQ0FBQztJQU5NLDRCQUFLLEdBQVo7UUFDRSxPQUFPLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQU1hLDZCQUFnQixHQUE5QixVQUErQixNQUFvQixFQUFFLEtBQXFCO1FBQ3hFLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsVUFBQyxpQkFBb0MsRUFBRSxRQUFRO1lBQ2xGLElBQUksUUFBUSxDQUFDLFFBQVEsRUFBRTtnQkFDckIsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUM1QixpQkFBaUIsQ0FBQyxDQUFDLENBQUMsR0FBRztvQkFDckIsRUFBRSxFQUFFLENBQUM7b0JBQ0wsUUFBUSxFQUFFLFFBQVEsQ0FBQyxRQUFRO29CQUMzQixLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7aUJBQ3RCLENBQUM7YUFDSDtZQUNELE9BQU8saUJBQWlCLENBQUM7UUFDM0IsQ0FBQyxFQUFFLEVBQTZCLENBQUMsQ0FBQztRQUVsQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRWEsOEJBQWlCLEdBQS9CLFVBQWdDLE1BQW9CLEVBQUUsQ0FBb0I7O1FBQ3hFLE9BQU8sSUFBSSxZQUFZLENBQUMsTUFBTTtZQUM1QixHQUFDLENBQUMsQ0FBQyxLQUFLLElBQUc7Z0JBQ1QsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUNSLFFBQVEsRUFBRSxDQUFDLENBQUMsUUFBUTtnQkFDcEIsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLO2FBQ2Y7Z0JBQ0QsQ0FBQztJQUNMLENBQUM7SUFFTSw0QkFBSyxHQUFaLFVBQWEsS0FBbUI7UUFDOUIsSUFBSSxDQUFDLE9BQU8sd0JBQU8sSUFBSSxDQUFDLE9BQU8sRUFBSyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkQsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFTSxxQ0FBYyxHQUFyQjtRQUNFLElBQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztZQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNuQixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVNLHNDQUFlLEdBQXRCO1FBQ0UsSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBRWYsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDO1lBQzFCLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDO0lBRU0sK0JBQVEsR0FBZjtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO1lBQzdCLE9BQU87Z0JBQ0wsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO2dCQUNSLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDO2FBQ2YsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDSCxtQkFBQztBQUFELENBQUMsQUF6RUQsQ0FBa0MsWUFBWSxHQXlFN0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3ZnRmllbGR9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7ZmllbGRFeHByLCBUaW1lVW5pdH0gZnJvbSAnLi4vLi4vdGltZXVuaXQnO1xuaW1wb3J0IHtUaW1lVW5pdFRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdHJhbnNmb3JtJztcbmltcG9ydCB7RGljdCwgZHVwbGljYXRlLCBrZXlzLCB2YWxzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdGb3JtdWxhVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsV2l0aEZpZWxkfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cblxuZXhwb3J0IGludGVyZmFjZSBUaW1lVW5pdENvbXBvbmVudCB7XG4gIGFzOiBzdHJpbmc7XG4gIHRpbWVVbml0OiBUaW1lVW5pdDtcbiAgZmllbGQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFRpbWVVbml0Tm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFRpbWVVbml0Tm9kZShudWxsLCBkdXBsaWNhdGUodGhpcy5mb3JtdWxhKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHJpdmF0ZSBmb3JtdWxhOiBEaWN0PFRpbWVVbml0Q29tcG9uZW50Pikge1xuICAgIHN1cGVyKHBhcmVudCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG1ha2VGcm9tRW5jb2RpbmcocGFyZW50OiBEYXRhRmxvd05vZGUsIG1vZGVsOiBNb2RlbFdpdGhGaWVsZCkge1xuICAgIGNvbnN0IGZvcm11bGEgPSBtb2RlbC5yZWR1Y2VGaWVsZERlZigodGltZVVuaXRDb21wb25lbnQ6IFRpbWVVbml0Q29tcG9uZW50LCBmaWVsZERlZikgPT4ge1xuICAgICAgaWYgKGZpZWxkRGVmLnRpbWVVbml0KSB7XG4gICAgICAgIGNvbnN0IGYgPSB2Z0ZpZWxkKGZpZWxkRGVmKTtcbiAgICAgICAgdGltZVVuaXRDb21wb25lbnRbZl0gPSB7XG4gICAgICAgICAgYXM6IGYsXG4gICAgICAgICAgdGltZVVuaXQ6IGZpZWxkRGVmLnRpbWVVbml0LFxuICAgICAgICAgIGZpZWxkOiBmaWVsZERlZi5maWVsZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRpbWVVbml0Q29tcG9uZW50O1xuICAgIH0sIHt9IGFzIERpY3Q8VGltZVVuaXRDb21wb25lbnQ+KTtcblxuICAgIGlmIChrZXlzKGZvcm11bGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUaW1lVW5pdE5vZGUocGFyZW50LCBmb3JtdWxhKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbWFrZUZyb21UcmFuc2Zvcm0ocGFyZW50OiBEYXRhRmxvd05vZGUsIHQ6IFRpbWVVbml0VHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIG5ldyBUaW1lVW5pdE5vZGUocGFyZW50LCB7XG4gICAgICBbdC5maWVsZF06IHtcbiAgICAgICAgYXM6IHQuYXMsXG4gICAgICAgIHRpbWVVbml0OiB0LnRpbWVVbml0LFxuICAgICAgICBmaWVsZDogdC5maWVsZFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIG1lcmdlKG90aGVyOiBUaW1lVW5pdE5vZGUpIHtcbiAgICB0aGlzLmZvcm11bGEgPSB7Li4udGhpcy5mb3JtdWxhLCAuLi5vdGhlci5mb3JtdWxhfTtcbiAgICBvdGhlci5yZW1vdmUoKTtcbiAgfVxuXG4gIHB1YmxpYyBwcm9kdWNlZEZpZWxkcygpIHtcbiAgICBjb25zdCBvdXQgPSB7fTtcblxuICAgIHZhbHModGhpcy5mb3JtdWxhKS5mb3JFYWNoKGYgPT4ge1xuICAgICAgb3V0W2YuYXNdID0gdHJ1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBwdWJsaWMgZGVwZW5kZW50RmllbGRzKCkge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuXG4gICAgdmFscyh0aGlzLmZvcm11bGEpLmZvckVhY2goZiA9PiB7XG4gICAgICBvdXRbZi5maWVsZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpIHtcbiAgICByZXR1cm4gdmFscyh0aGlzLmZvcm11bGEpLm1hcChjID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdmb3JtdWxhJyxcbiAgICAgICAgYXM6IGMuYXMsXG4gICAgICAgIGV4cHI6IGZpZWxkRXhwcihjLnRpbWVVbml0LCBjLmZpZWxkKVxuICAgICAgfSBhcyBWZ0Zvcm11bGFUcmFuc2Zvcm07XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { hasIntersection, keys } from '../../util';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { ParseNode } from './formatparse';\nimport { SourceNode } from './source';\nimport { TimeUnitNode } from './timeunit';\n/**\n * Start optimization path at the leaves. Useful for merging up or removing things.\n *\n * If the callback returns true, the recursion continues.\n */\nexport function iterateFromLeaves(f) {\n    function optimizeNextFromLeaves(node) {\n        if (node instanceof SourceNode) {\n            return;\n        }\n        var next = node.parent;\n        if (f(node)) {\n            optimizeNextFromLeaves(next);\n        }\n    }\n    return optimizeNextFromLeaves;\n}\n/**\n * Move parse nodes up to forks.\n */\nexport function moveParseUp(node) {\n    var parent = node.parent;\n    // move parse up by merging or swapping\n    if (node instanceof ParseNode) {\n        if (parent instanceof SourceNode) {\n            return false;\n        }\n        if (parent.numChildren() > 1) {\n            // don't move parse further up but continue with parent.\n            return true;\n        }\n        if (parent instanceof ParseNode) {\n            parent.merge(node);\n        }\n        else {\n            // don't swap with nodes that produce something that the parse node depends on (e.g. lookup)\n            if (hasIntersection(parent.producedFields(), node.dependentFields())) {\n                return true;\n            }\n            node.swapWithParent();\n        }\n    }\n    return true;\n}\n/**\n * Repeatedly remove leaf nodes that are not output or facet nodes.\n * The reason is that we don't need subtrees that don't have any output nodes.\n * Facet nodes are needed for the row or column domains.\n */\nexport function removeUnusedSubtrees(node) {\n    if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {\n        // no need to continue with parent because it is output node or will have children (there was a fork)\n        return false;\n    }\n    else {\n        node.remove();\n    }\n    return true;\n}\n/**\n * Removes duplicate time unit nodes (as determined by the name of the\n * output field) that may be generated due to selections projected over\n * time units.\n */\nexport function removeDuplicateTimeUnits(leaf) {\n    var fields = {};\n    return iterateFromLeaves(function (node) {\n        if (node instanceof TimeUnitNode) {\n            var pfields = node.producedFields();\n            var dupe = keys(pfields).every(function (k) { return !!fields[k]; });\n            if (dupe) {\n                node.remove();\n            }\n            else {\n                fields = tslib_1.__assign({}, fields, pfields);\n            }\n        }\n        return true;\n    })(leaf);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW1pemVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvb3B0aW1pemVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDakQsT0FBTyxFQUFlLFVBQVUsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUNwRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ2xDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUNwQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBR3hDOzs7O0dBSUc7QUFDSCxNQUFNLDRCQUE0QixDQUFrQztJQUNsRSxnQ0FBZ0MsSUFBa0I7UUFDaEQsSUFBSSxJQUFJLFlBQVksVUFBVSxFQUFFO1lBQzlCLE9BQU87U0FDUjtRQUVELElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDekIsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDWCxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUM7SUFFRCxPQUFPLHNCQUFzQixDQUFDO0FBQ2hDLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sc0JBQXNCLElBQWtCO0lBQzVDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFM0IsdUNBQXVDO0lBQ3ZDLElBQUksSUFBSSxZQUFZLFNBQVMsRUFBRTtRQUM3QixJQUFJLE1BQU0sWUFBWSxVQUFVLEVBQUU7WUFDaEMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsRUFBRTtZQUM1Qix3REFBd0Q7WUFDeEQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksTUFBTSxZQUFZLFNBQVMsRUFBRTtZQUMvQixNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3BCO2FBQU07WUFDTCw0RkFBNEY7WUFDNUYsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxFQUFFO2dCQUNwRSxPQUFPLElBQUksQ0FBQzthQUNiO1lBRUQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0tBQ0Y7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSwrQkFBK0IsSUFBa0I7SUFDckQsSUFBSSxJQUFJLFlBQVksVUFBVSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLElBQUksSUFBSSxZQUFZLFNBQVMsRUFBRTtRQUNyRixxR0FBcUc7UUFDckcsT0FBTyxLQUFLLENBQUM7S0FDZDtTQUFNO1FBQ0wsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ2Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxtQ0FBbUMsSUFBa0I7SUFDekQsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLE9BQU8saUJBQWlCLENBQUMsVUFBQyxJQUFrQjtRQUMxQyxJQUFJLElBQUksWUFBWSxZQUFZLEVBQUU7WUFDaEMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3RDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO1lBRXJELElBQUksSUFBSSxFQUFFO2dCQUNSLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUNmO2lCQUFNO2dCQUNMLE1BQU0sd0JBQU8sTUFBTSxFQUFLLE9BQU8sQ0FBQyxDQUFDO2FBQ2xDO1NBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aGFzSW50ZXJzZWN0aW9uLCBrZXlzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlLCBPdXRwdXROb2RlfSBmcm9tICcuL2RhdGFmbG93JztcbmltcG9ydCB7RmFjZXROb2RlfSBmcm9tICcuL2ZhY2V0JztcbmltcG9ydCB7UGFyc2VOb2RlfSBmcm9tICcuL2Zvcm1hdHBhcnNlJztcbmltcG9ydCB7U291cmNlTm9kZX0gZnJvbSAnLi9zb3VyY2UnO1xuaW1wb3J0IHtUaW1lVW5pdE5vZGV9IGZyb20gJy4vdGltZXVuaXQnO1xuXG5cbi8qKlxuICogU3RhcnQgb3B0aW1pemF0aW9uIHBhdGggYXQgdGhlIGxlYXZlcy4gVXNlZnVsIGZvciBtZXJnaW5nIHVwIG9yIHJlbW92aW5nIHRoaW5ncy5cbiAqXG4gKiBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyB0cnVlLCB0aGUgcmVjdXJzaW9uIGNvbnRpbnVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGl0ZXJhdGVGcm9tTGVhdmVzKGY6IChub2RlOiBEYXRhRmxvd05vZGUpID0+IGJvb2xlYW4pIHtcbiAgZnVuY3Rpb24gb3B0aW1pemVOZXh0RnJvbUxlYXZlcyhub2RlOiBEYXRhRmxvd05vZGUpIHtcbiAgICBpZiAobm9kZSBpbnN0YW5jZW9mIFNvdXJjZU5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0ID0gbm9kZS5wYXJlbnQ7XG4gICAgaWYgKGYobm9kZSkpIHtcbiAgICAgIG9wdGltaXplTmV4dEZyb21MZWF2ZXMobmV4dCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9wdGltaXplTmV4dEZyb21MZWF2ZXM7XG59XG5cbi8qKlxuICogTW92ZSBwYXJzZSBub2RlcyB1cCB0byBmb3Jrcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vdmVQYXJzZVVwKG5vZGU6IERhdGFGbG93Tm9kZSkge1xuICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudDtcblxuICAvLyBtb3ZlIHBhcnNlIHVwIGJ5IG1lcmdpbmcgb3Igc3dhcHBpbmdcbiAgaWYgKG5vZGUgaW5zdGFuY2VvZiBQYXJzZU5vZGUpIHtcbiAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgU291cmNlTm9kZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChwYXJlbnQubnVtQ2hpbGRyZW4oKSA+IDEpIHtcbiAgICAgIC8vIGRvbid0IG1vdmUgcGFyc2UgZnVydGhlciB1cCBidXQgY29udGludWUgd2l0aCBwYXJlbnQuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgUGFyc2VOb2RlKSB7XG4gICAgICBwYXJlbnQubWVyZ2Uobm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRvbid0IHN3YXAgd2l0aCBub2RlcyB0aGF0IHByb2R1Y2Ugc29tZXRoaW5nIHRoYXQgdGhlIHBhcnNlIG5vZGUgZGVwZW5kcyBvbiAoZS5nLiBsb29rdXApXG4gICAgICBpZiAoaGFzSW50ZXJzZWN0aW9uKHBhcmVudC5wcm9kdWNlZEZpZWxkcygpLCBub2RlLmRlcGVuZGVudEZpZWxkcygpKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5zd2FwV2l0aFBhcmVudCgpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIFJlcGVhdGVkbHkgcmVtb3ZlIGxlYWYgbm9kZXMgdGhhdCBhcmUgbm90IG91dHB1dCBvciBmYWNldCBub2Rlcy5cbiAqIFRoZSByZWFzb24gaXMgdGhhdCB3ZSBkb24ndCBuZWVkIHN1YnRyZWVzIHRoYXQgZG9uJ3QgaGF2ZSBhbnkgb3V0cHV0IG5vZGVzLlxuICogRmFjZXQgbm9kZXMgYXJlIG5lZWRlZCBmb3IgdGhlIHJvdyBvciBjb2x1bW4gZG9tYWlucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVVudXNlZFN1YnRyZWVzKG5vZGU6IERhdGFGbG93Tm9kZSkge1xuICBpZiAobm9kZSBpbnN0YW5jZW9mIE91dHB1dE5vZGUgfHwgbm9kZS5udW1DaGlsZHJlbigpID4gMCB8fCBub2RlIGluc3RhbmNlb2YgRmFjZXROb2RlKSB7XG4gICAgLy8gbm8gbmVlZCB0byBjb250aW51ZSB3aXRoIHBhcmVudCBiZWNhdXNlIGl0IGlzIG91dHB1dCBub2RlIG9yIHdpbGwgaGF2ZSBjaGlsZHJlbiAodGhlcmUgd2FzIGEgZm9yaylcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5yZW1vdmUoKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBSZW1vdmVzIGR1cGxpY2F0ZSB0aW1lIHVuaXQgbm9kZXMgKGFzIGRldGVybWluZWQgYnkgdGhlIG5hbWUgb2YgdGhlXG4gKiBvdXRwdXQgZmllbGQpIHRoYXQgbWF5IGJlIGdlbmVyYXRlZCBkdWUgdG8gc2VsZWN0aW9ucyBwcm9qZWN0ZWQgb3ZlclxuICogdGltZSB1bml0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZVRpbWVVbml0cyhsZWFmOiBEYXRhRmxvd05vZGUpIHtcbiAgbGV0IGZpZWxkcyA9IHt9O1xuICByZXR1cm4gaXRlcmF0ZUZyb21MZWF2ZXMoKG5vZGU6IERhdGFGbG93Tm9kZSkgPT4ge1xuICAgIGlmIChub2RlIGluc3RhbmNlb2YgVGltZVVuaXROb2RlKSB7XG4gICAgICBjb25zdCBwZmllbGRzID0gbm9kZS5wcm9kdWNlZEZpZWxkcygpO1xuICAgICAgY29uc3QgZHVwZSA9IGtleXMocGZpZWxkcykuZXZlcnkoKGspID0+ICEhZmllbGRzW2tdKTtcblxuICAgICAgaWYgKGR1cGUpIHtcbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpZWxkcyA9IHsuLi5maWVsZHMsIC4uLnBmaWVsZHN9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9KShsZWFmKTtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { isArray, isString } from 'vega-util';\nimport { isFieldDef, vgField } from '../../fielddef';\nimport { duplicate } from '../../util';\nimport { sortParams } from '../common';\nimport { DataFlowNode } from './dataflow';\nfunction getStackByFields(model) {\n    return model.stack.stackBy.reduce(function (fields, by) {\n        var fieldDef = by.fieldDef;\n        var _field = vgField(fieldDef);\n        if (_field) {\n            fields.push(_field);\n        }\n        return fields;\n    }, []);\n}\nfunction isValidAsArray(as) {\n    return isArray(as) && as.every(function (s) { return isString(s); }) && as.length > 1;\n}\nvar StackNode = /** @class */ (function (_super) {\n    tslib_1.__extends(StackNode, _super);\n    function StackNode(parent, stack) {\n        var _this = _super.call(this, parent) || this;\n        _this._stack = stack;\n        return _this;\n    }\n    StackNode.prototype.clone = function () {\n        return new StackNode(null, duplicate(this._stack));\n    };\n    StackNode.makeFromTransform = function (parent, stackTransform) {\n        var stack = stackTransform.stack, groupby = stackTransform.groupby, as = stackTransform.as, _a = stackTransform.offset, offset = _a === void 0 ? 'zero' : _a;\n        var sortFields = [];\n        var sortOrder = [];\n        if (stackTransform.sort !== undefined) {\n            for (var _i = 0, _b = stackTransform.sort; _i < _b.length; _i++) {\n                var sortField = _b[_i];\n                sortFields.push(sortField.field);\n                sortOrder.push(sortField.order === undefined ? 'ascending' : sortField.order);\n            }\n        }\n        var sort = {\n            field: sortFields,\n            order: sortOrder,\n        };\n        var normalizedAs;\n        if (isValidAsArray(as)) {\n            normalizedAs = as;\n        }\n        else if (isString(as)) {\n            normalizedAs = [as, as + '_end'];\n        }\n        else {\n            normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\n        }\n        return new StackNode(parent, {\n            stackField: stack,\n            groupby: groupby,\n            offset: offset,\n            sort: sort,\n            facetby: [],\n            as: normalizedAs\n        });\n    };\n    StackNode.makeFromEncoding = function (parent, model) {\n        var stackProperties = model.stack;\n        if (!stackProperties) {\n            return null;\n        }\n        var dimensionFieldDef;\n        if (stackProperties.groupbyChannel) {\n            dimensionFieldDef = model.fieldDef(stackProperties.groupbyChannel);\n        }\n        var stackby = getStackByFields(model);\n        var orderDef = model.encoding.order;\n        var sort;\n        if (isArray(orderDef) || isFieldDef(orderDef)) {\n            sort = sortParams(orderDef);\n        }\n        else {\n            // default = descending by stackFields\n            // FIXME is the default here correct for binned fields?\n            sort = stackby.reduce(function (s, field) {\n                s.field.push(field);\n                s.order.push('descending');\n                return s;\n            }, { field: [], order: [] });\n        }\n        // Refactored to add \"as\" in the make phase so that we can get producedFields\n        // from the as property\n        var field = model.vgField(stackProperties.fieldChannel);\n        return new StackNode(parent, {\n            dimensionFieldDef: dimensionFieldDef,\n            stackField: field,\n            facetby: [],\n            stackby: stackby,\n            sort: sort,\n            offset: stackProperties.offset,\n            impute: stackProperties.impute,\n            as: [field + '_start', field + '_end']\n        });\n    };\n    Object.defineProperty(StackNode.prototype, \"stack\", {\n        get: function () {\n            return this._stack;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    StackNode.prototype.addDimensions = function (fields) {\n        this._stack.facetby = this._stack.facetby.concat(fields);\n    };\n    StackNode.prototype.dependentFields = function () {\n        var out = {};\n        out[this._stack.stackField] = true;\n        this.getGroupbyFields().forEach(function (f) { return out[f] = true; });\n        this._stack.facetby.forEach(function (f) { return out[f] = true; });\n        var field = this._stack.sort.field;\n        isArray(field) ? field.forEach(function (f) { return out[f] = true; }) : out[field] = true;\n        return out;\n    };\n    StackNode.prototype.producedFields = function () {\n        return this._stack.as.reduce(function (result, item) {\n            result[item] = true;\n            return result;\n        }, {});\n    };\n    StackNode.prototype.getGroupbyFields = function () {\n        var _a = this._stack, dimensionFieldDef = _a.dimensionFieldDef, impute = _a.impute, groupby = _a.groupby;\n        if (dimensionFieldDef) {\n            if (dimensionFieldDef.bin) {\n                if (impute) {\n                    // For binned group by field with impute, we calculate bin_mid\n                    // as we cannot impute two fields simultaneously\n                    return [vgField(dimensionFieldDef, { binSuffix: 'mid' })];\n                }\n                return [\n                    // For binned group by field without impute, we need both bin (start) and bin_end\n                    vgField(dimensionFieldDef, {}),\n                    vgField(dimensionFieldDef, { binSuffix: 'end' })\n                ];\n            }\n            return [vgField(dimensionFieldDef)];\n        }\n        return groupby || [];\n    };\n    StackNode.prototype.assemble = function () {\n        var transform = [];\n        var _a = this._stack, facetby = _a.facetby, dimensionFieldDef = _a.dimensionFieldDef, field = _a.stackField, stackby = _a.stackby, sort = _a.sort, offset = _a.offset, impute = _a.impute, as = _a.as;\n        // Impute\n        if (impute && dimensionFieldDef) {\n            var dimensionField = dimensionFieldDef ? vgField(dimensionFieldDef, { binSuffix: 'mid' }) : undefined;\n            if (dimensionFieldDef.bin) {\n                // As we can only impute one field at a time, we need to calculate\n                // mid point for a binned field\n                transform.push({\n                    type: 'formula',\n                    expr: '(' +\n                        vgField(dimensionFieldDef, { expr: 'datum' }) +\n                        '+' +\n                        vgField(dimensionFieldDef, { expr: 'datum', binSuffix: 'end' }) +\n                        ')/2',\n                    as: dimensionField\n                });\n            }\n            transform.push({\n                type: 'impute',\n                field: field,\n                groupby: stackby,\n                key: dimensionField,\n                method: 'value',\n                value: 0\n            });\n        }\n        // Stack\n        transform.push({\n            type: 'stack',\n            groupby: this.getGroupbyFields().concat(facetby),\n            field: field,\n            sort: sort,\n            as: as,\n            offset: offset\n        });\n        return transform;\n    };\n    return StackNode;\n}(DataFlowNode));\nexport { StackNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL3N0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsT0FBTyxFQUFFLFFBQVEsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUM1QyxPQUFPLEVBQVcsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRzdELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFckMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVyQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXhDLDBCQUEwQixLQUFnQjtJQUN4QyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQU0sRUFBRSxFQUFFO1FBQzNDLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUM7UUFFN0IsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pDLElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNyQjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsRUFBRSxFQUFjLENBQUMsQ0FBQztBQUNyQixDQUFDO0FBZ0RELHdCQUF3QixFQUFxQjtJQUMzQyxPQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFYLENBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLEdBQUUsQ0FBQyxDQUFDO0FBQ25FLENBQUM7QUFFRDtJQUErQixxQ0FBWTtJQU96QyxtQkFBWSxNQUFvQixFQUFFLEtBQXFCO1FBQXZELFlBQ0Usa0JBQU0sTUFBTSxD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QUNkLEtBQUssT0FBQTtnQkFDTCxPQUFPLEVBQUUsT0FBTztnQkFDaEIsR0FBRyxFQUFFLGNBQWM7Z0JBQ25CLE1BQU0sRUFBRSxPQUFPO2dCQUNmLEtBQUssRUFBRSxDQUFDO2FBQ1QsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxRQUFRO1FBQ1IsU0FBUyxDQUFDLElBQUksQ0FBQztZQUNiLElBQUksRUFBRSxPQUFPO1lBQ2IsT0FBTyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDaEQsS0FBSyxPQUFBO1lBQ0wsSUFBSSxNQUFBO1lBQ0osRUFBRSxJQUFBO1lBQ0YsTUFBTSxRQUFBO1NBQ1AsQ0FBQyxDQUFDO1FBRUgsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FBQyxBQXhMRCxDQUErQixZQUFZLEdBd0wxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNBcnJheSwgaXNTdHJpbmd9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge0ZpZWxkRGVmLCBpc0ZpZWxkRGVmLCB2Z0ZpZWxkfSBmcm9tICcuLi8uLi9maWVsZGRlZic7XG5pbXBvcnQge1N0YWNrT2Zmc2V0fSBmcm9tICcuLi8uLi9zdGFjayc7XG5pbXBvcnQge1N0YWNrVHJhbnNmb3JtfSBmcm9tICcuLi8uLi90cmFuc2Zvcm0nO1xuaW1wb3J0IHtkdXBsaWNhdGV9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0NvbXBhcmF0b3JPcmRlciwgVmdTb3J0LCBWZ1RyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtzb3J0UGFyYW1zfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4vLi4vdW5pdCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cbmZ1bmN0aW9uIGdldFN0YWNrQnlGaWVsZHMobW9kZWw6IFVuaXRNb2RlbCk6IHN0cmluZ1tdIHtcbiAgcmV0dXJuIG1vZGVsLnN0YWNrLnN0YWNrQnkucmVkdWNlKChmaWVsZHMsIGJ5KSA9PiB7XG4gICAgY29uc3QgZmllbGREZWYgPSBieS5maWVsZERlZjtcblxuICAgIGNvbnN0IF9maWVsZCA9IHZnRmllbGQoZmllbGREZWYpO1xuICAgIGlmIChfZmllbGQpIHtcbiAgICAgIGZpZWxkcy5wdXNoKF9maWVsZCk7XG4gICAgfVxuICAgIHJldHVybiBmaWVsZHM7XG4gIH0sIFtdIGFzIHN0cmluZ1tdKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGFja0NvbXBvbmVudCB7XG5cbiAgLyoqXG4gICAqIEZhY2V0ZWQgZmllbGQuXG4gICAqL1xuICBmYWNldGJ5OiBzdHJpbmdbXTtcblxuICBkaW1lbnNpb25GaWVsZERlZj86IEZpZWxkRGVmPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIFN0YWNrIG1lYXN1cmUncyBmaWVsZC4gVXNlZCBpbiBtYWtlRnJvbUVuY29kaW5nLlxuICAgKi9cbiAgc3RhY2tGaWVsZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBMZXZlbCBvZiBkZXRhaWwgZmllbGRzIGZvciBlYWNoIGxldmVsIGluIHRoZSBzdGFja2VkIGNoYXJ0cyBzdWNoIGFzIGNvbG9yIG9yIGRldGFpbC5cbiAgICogVXNlZCBpbiBtYWtlRnJvbUVuY29kaW5nLlxuICAgKi9cbiAgc3RhY2tieT86IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBGaWVsZCB0aGF0IGRldGVybWluZXMgb3JkZXIgb2YgbGV2ZWxzIGluIHRoZSBzdGFja2VkIGNoYXJ0cy5cbiAgICogVXNlZCBpbiBib3RoIGJ1dCBvcHRpb25hbCBpbiB0cmFuc2Zvcm0uXG4gICAqL1xuICBzb3J0OiBWZ1NvcnQ7XG5cbiAgLyoqIE1vZGUgZm9yIHN0YWNraW5nIG1hcmtzLlxuICAgKi9cbiAgb2Zmc2V0OiBTdGFja09mZnNldDtcblxuICAvKipcbiAgICogV2hldGhlciB0byBpbXB1dGUgdGhlIGRhdGEgYmVmb3JlIHN0YWNraW5nLiBVc2VkIG9ubHkgaW4gbWFrZUZyb21FbmNvZGluZy5cbiAgICovXG4gIGltcHV0ZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBkYXRhIGZpZWxkcyB0byBncm91cCBieS5cbiAgICovXG4gIGdyb3VwYnk/OiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIE91dHB1dCBmaWVsZCBuYW1lcyBvZiBlYWNoIHN0YWNrIGZpZWxkLlxuICAgKi9cbiAgYXM6IHN0cmluZ1tdO1xuXG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRBc0FycmF5KGFzOiBzdHJpbmdbXSB8IHN0cmluZyk6IGFzIGlzIHN0cmluZ1tdIHtcbiAgcmV0dXJuIGlzQXJyYXkoYXMpICYmIGFzLmV2ZXJ5KHMgPT4gaXNTdHJpbmcocykpICYmIGFzLmxlbmd0aCA+MTtcbn1cblxuZXhwb3J0IGNsYXNzIFN0YWNrTm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIHByaXZhdGUgX3N0YWNrOiBTdGFja0NvbXBvbmVudDtcblxuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBTdGFja05vZGUobnVsbCwgZHVwbGljYXRlKHRoaXMuX3N0YWNrKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgc3RhY2s6IFN0YWNrQ29tcG9uZW50KSB7XG4gICAgc3VwZXIocGFyZW50KTtcblxuICAgIHRoaXMuX3N0YWNrID0gc3RhY2s7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG1ha2VGcm9tVHJhbnNmb3JtKHBhcmVudDogRGF0YUZsb3dOb2RlLCBzdGFja1RyYW5zZm9ybTogU3RhY2tUcmFuc2Zvcm0pIHtcblxuICAgIGNvbnN0IHtzdGFjaywgZ3JvdXBieSwgYXMsIG9mZnNldD0nemVybyd9ID0gc3RhY2tUcmFuc2Zvcm07XG5cbiAgICBjb25zdCBzb3J0RmllbGRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHNvcnRPcmRlcjogVmdDb21wYXJhdG9yT3JkZXJbXSA9IFtdO1xuICAgIGlmIChzdGFja1RyYW5zZm9ybS5zb3J0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAoY29uc3Qgc29ydEZpZWxkIG9mIHN0YWNrVHJhbnNmb3JtLnNvcnQpIHtcbiAgICAgICAgc29ydEZpZWxkcy5wdXNoKHNvcnRGaWVsZC5maWVsZCk7XG4gICAgICAgIHNvcnRPcmRlci5wdXNoKHNvcnRGaWVsZC5vcmRlciA9PT0gdW5kZWZpbmVkID8gJ2FzY2VuZGluZycgOiBzb3J0RmllbGQub3JkZXIgYXMgVmdDb21wYXJhdG9yT3JkZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzb3J0OiBWZ1NvcnQgPSB7XG4gICAgICBmaWVsZDogc29ydEZpZWxkcyxcbiAgICAgIG9yZGVyOiBzb3J0T3JkZXIsXG4gICAgfTtcbiAgICBsZXQgbm9ybWFsaXplZEFzOiBBcnJheTxzdHJpbmc+O1xuICAgIGlmIChpc1ZhbGlkQXNBcnJheShhcykpIHtcbiAgICAgIG5vcm1hbGl6ZWRBcyA9IGFzO1xuICAgIH0gZWxzZSBpZihpc1N0cmluZyhhcykpIHtcbiAgICAgIG5vcm1hbGl6ZWRBcyA9IFthcywgYXMgKyAnX2VuZCddO1xuICAgIH0gZWxzZSB7XG4gICAgICBub3JtYWxpemVkQXMgPSBbc3RhY2tUcmFuc2Zvcm0uc3RhY2sgKyAnX3N0YXJ0Jywgc3RhY2tUcmFuc2Zvcm0uc3RhY2sgKyAnX2VuZCddO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgU3RhY2tOb2RlIChwYXJlbnQsIHtcbiAgICAgIHN0YWNrRmllbGQ6IHN0YWNrLFxuICAgICAgZ3JvdXBieSxcbiAgICAgIG9mZnNldCxcbiAgICAgIHNvcnQsXG4gICAgICBmYWNldGJ5OiBbXSxcbiAgICAgIGFzOiBub3JtYWxpemVkQXNcbiAgICB9KTtcblxuICB9XG4gIHB1YmxpYyBzdGF0aWMgbWFrZUZyb21FbmNvZGluZyhwYXJlbnQ6IERhdGFGbG93Tm9kZSwgbW9kZWw6IFVuaXRNb2RlbCkge1xuXG4gICAgY29uc3Qgc3RhY2tQcm9wZXJ0aWVzID0gbW9kZWwuc3RhY2s7XG5cbiAgICBpZiAoIXN0YWNrUHJvcGVydGllcykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IGRpbWVuc2lvbkZpZWxkRGVmOiBGaWVsZERlZjxzdHJpbmc+O1xuICAgIGlmIChzdGFja1Byb3BlcnRpZXMuZ3JvdXBieUNoYW5uZWwpIHtcbiAgICAgIGRpbWVuc2lvbkZpZWxkRGVmID0gbW9kZWwuZmllbGREZWYoc3RhY2tQcm9wZXJ0aWVzLmdyb3VwYnlDaGFubmVsKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdGFja2J5ID0gZ2V0U3RhY2tCeUZpZWxkcyhtb2RlbCk7XG4gICAgY29uc3Qgb3JkZXJEZWYgPSBtb2RlbC5lbmNvZGluZy5vcmRlcjtcblxuICAgIGxldCBzb3J0OiBWZ1NvcnQ7XG4gICAgaWYgKGlzQXJyYXkob3JkZXJEZWYpIHx8IGlzRmllbGREZWYob3JkZXJEZWYpKSB7XG4gICAgICBzb3J0ID0gc29ydFBhcmFtcyhvcmRlckRlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRlZmF1bHQgPSBkZXNjZW5kaW5nIGJ5IHN0YWNrRmllbGRzXG4gICAgICAvLyBGSVhNRSBpcyB0aGUgZGVmYXVsdCBoZXJlIGNvcnJlY3QgZm9yIGJpbm5lZCBmaWVsZHM/XG4gICAgICBzb3J0ID0gc3RhY2tieS5yZWR1Y2UoKHMsIGZpZWxkKSA9PiB7XG4gICAgICAgIHMuZmllbGQucHVzaChmaWVsZCk7XG4gICAgICAgIHMub3JkZXIucHVzaCgnZGVzY2VuZGluZycpO1xuICAgICAgICByZXR1cm4gcztcbiAgICAgIH0sIHtmaWVsZDpbXSwgb3JkZXI6IFtdfSk7XG4gICAgfVxuICAgIC8vIFJlZmFjdG9yZWQgdG8gYWRkIFwiYXNcIiBpbiB0aGUgbWFrZSBwaGFzZSBzbyB0aGF0IHdlIGNhbiBnZXQgcHJvZHVjZWRGaWVsZHNcbiAgICAvLyBmcm9tIHRoZSBhcyBwcm9wZXJ0eVxuICAgIGNvbnN0IGZpZWxkID0gbW9kZWwudmdGaWVsZChzdGFja1Byb3BlcnRpZXMuZmllbGRDaGFubmVsKTtcblxuICAgIHJldHVybiBuZXcgU3RhY2tOb2RlKHBhcmVudCwge1xuICAgICAgZGltZW5zaW9uRmllbGREZWYsXG4gICAgICBzdGFja0ZpZWxkOmZpZWxkLFxuICAgICAgZmFjZXRieTogW10sXG4gICAgICBzdGFja2J5LFxuICAgICAgc29ydCxcbiAgICAgIG9mZnNldDogc3RhY2tQcm9wZXJ0aWVzLm9mZnNldCxcbiAgICAgIGltcHV0ZTogc3RhY2tQcm9wZXJ0aWVzLmltcHV0ZSxcbiAgICAgIGFzOiBbZmllbGQgKyAnX3N0YXJ0JywgZmllbGQgKyAnX2VuZCddXG4gICAgfSk7XG4gIH1cblxuICBnZXQgc3RhY2soKTogU3RhY2tDb21wb25lbnQge1xuICAgIHJldHVybiB0aGlzLl9zdGFjaztcbiAgfVxuXG4gIHB1YmxpYyBhZGREaW1lbnNpb25zKGZpZWxkczogc3RyaW5nW10pIHtcbiAgICB0aGlzLl9zdGFjay5mYWNldGJ5ID0gdGhpcy5fc3RhY2suZmFjZXRieS5jb25jYXQoZmllbGRzKTtcbiAgfVxuXG4gIHB1YmxpYyBkZXBlbmRlbnRGaWVsZHMoKSB7XG4gICAgY29uc3Qgb3V0ID0ge307XG5cbiAgICBvdXRbdGhpcy5fc3RhY2suc3RhY2tGaWVsZF0gPSB0cnVlO1xuXG4gICAgdGhpcy5nZXRHcm91cGJ5RmllbGRzKCkuZm9yRWFjaChmID0+IG91dFtmXSA9IHRydWUpO1xuICAgIHRoaXMuX3N0YWNrLmZhY2V0YnkuZm9yRWFjaChmID0+IG91dFtmXSA9IHRydWUpO1xuICAgIGNvbnN0IGZpZWxkID0gdGhpcy5fc3RhY2suc29ydC5maWVsZDtcbiAgICBpc0FycmF5KGZpZWxkKSA/IGZpZWxkLmZvckVhY2goZiA9PiBvdXRbZl0gPSB0cnVlKSA6IG91dFtmaWVsZF0gPSB0cnVlO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHB1YmxpYyBwcm9kdWNlZEZpZWxkcygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhY2suYXMucmVkdWNlKChyZXN1bHQsIGl0ZW0pID0+IHtcbiAgICAgIHJlc3VsdFtpdGVtXSA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0R3JvdXBieUZpZWxkcygpIHtcbiAgICBjb25zdCB7ZGltZW5zaW9uRmllbGREZWYsIGltcHV0ZSwgZ3JvdXBieX0gPSB0aGlzLl9zdGFjaztcbiAgICBpZiAoZGltZW5zaW9uRmllbGREZWYpIHtcbiAgICAgIGlmIChkaW1lbnNpb25GaWVsZERlZi5iaW4pIHtcbiAgICAgICAgaWYgKGltcHV0ZSkge1xuICAgICAgICAgIC8vIEZvciBiaW5uZWQgZ3JvdXAgYnkgZmllbGQgd2l0aCBpbXB1dGUsIHdlIGNhbGN1bGF0ZSBiaW5fbWlkXG4gICAgICAgICAgLy8gYXMgd2UgY2Fubm90IGltcHV0ZSB0d28gZmllbGRzIHNpbXVsdGFuZW91c2x5XG4gICAgICAgICAgcmV0dXJuIFt2Z0ZpZWxkKGRpbWVuc2lvbkZpZWxkRGVmLCB7YmluU3VmZml4OiAnbWlkJ30pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIC8vIEZvciBiaW5uZWQgZ3JvdXAgYnkgZmllbGQgd2l0aG91dCBpbXB1dGUsIHdlIG5lZWQgYm90aCBiaW4gKHN0YXJ0KSBhbmQgYmluX2VuZFxuICAgICAgICAgIHZnRmllbGQoZGltZW5zaW9uRmllbGREZWYsIHt9KSxcbiAgICAgICAgICB2Z0ZpZWxkKGRpbWVuc2lvbkZpZWxkRGVmLCB7YmluU3VmZml4OiAnZW5kJ30pXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgICByZXR1cm4gW3ZnRmllbGQoZGltZW5zaW9uRmllbGREZWYpXTtcbiAgICB9XG4gICAgcmV0dXJuIGdyb3VwYnkgfHwgW107XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdUcmFuc2Zvcm1bXSB7XG4gICAgY29uc3QgdHJhbnNmb3JtOiBWZ1RyYW5zZm9ybVtdID0gW107XG4gICAgY29uc3Qge2ZhY2V0YnksIGRpbWVuc2lvbkZpZWxkRGVmLCBzdGFja0ZpZWxkOiBmaWVsZCwgc3RhY2tieSwgc29ydCwgb2Zmc2V0LCBpbXB1dGUsIGFzfSA9IHRoaXMuX3N0YWNrO1xuXG4gICAgICAvLyBJbXB1dGVcbiAgICBpZiAoaW1wdXRlICYmIGRpbWVuc2lvbkZpZWxkRGVmKSB7XG4gICAgICBjb25zdCBkaW1lbnNpb25GaWVsZCA9IGRpbWVuc2lvbkZpZWxkRGVmID8gdmdGaWVsZChkaW1lbnNpb25GaWVsZERlZiwge2JpblN1ZmZpeDogJ21pZCd9KTogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoZGltZW5zaW9uRmllbGREZWYuYmluKSB7XG4gICAgICAgIC8vIEFzIHdlIGNhbiBvbmx5IGltcHV0ZSBvbmUgZmllbGQgYXQgYSB0aW1lLCB3ZSBuZWVkIHRvIGNhbGN1bGF0ZVxuICAgICAgICAvLyBtaWQgcG9pbnQgZm9yIGEgYmlubmVkIGZpZWxkXG4gICAgICAgIHRyYW5zZm9ybS5wdXNoKHtcbiAgICAgICAgICB0eXBlOiAnZm9ybXVsYScsXG4gICAgICAgICAgZXhwcjogJygnICtcbiAgICAgICAgICAgIHZnRmllbGQoZGltZW5zaW9uRmllbGREZWYsIHtleHByOiAnZGF0dW0nfSkgK1xuICAgICAgICAgICAgJysnICtcbiAgICAgICAgICAgIHZnRmllbGQoZGltZW5zaW9uRmllbGREZWYsIHtleHByOiAnZGF0dW0nLCBiaW5TdWZmaXg6ICdlbmQnfSkgK1xuICAgICAgICAgICAgJykvMicsXG4gICAgICAgICAgYXM6IGRpbWVuc2lvbkZpZWxkXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0cmFuc2Zvcm0ucHVzaCh7XG4gICAgICAgIHR5cGU6ICdpbXB1dGUnLFxuICAgICAgICBmaWVsZCxcbiAgICAgICAgZ3JvdXBieTogc3RhY2tieSxcbiAgICAgICAga2V5OiBkaW1lbnNpb25GaWVsZCxcbiAgICAgICAgbWV0aG9kOiAndmFsdWUnLFxuICAgICAgICB2YWx1ZTogMFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gU3RhY2tcbiAgICB0cmFuc2Zvcm0ucHVzaCh7XG4gICAgICB0eXBlOiAnc3RhY2snLFxuICAgICAgZ3JvdXBieTogdGhpcy5nZXRHcm91cGJ5RmllbGRzKCkuY29uY2F0KGZhY2V0YnkpLFxuICAgICAgZmllbGQsXG4gICAgICBzb3J0LFxuICAgICAgYXMsXG4gICAgICBvZmZzZXRcbiAgICB9KTtcblxuICAgIHJldHVybiB0cmFuc2Zvcm07XG4gIH1cbn1cbiJdfQ==","import { MAIN } from '../../data';\nimport { every, flatten, keys, vals } from '../../util';\nimport { AggregateNode } from './aggregate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterInvalidNode } from './filterinvalid';\nimport * as optimizers from './optimizers';\nimport { StackNode } from './stack';\nexport var FACET_SCALE_PREFIX = 'scale_';\n/**\n * Clones the subtree and ignores output nodes except for the leafs, which are renamed.\n */\nfunction cloneSubtree(facet) {\n    function clone(node) {\n        if (!(node instanceof FacetNode)) {\n            var copy_1 = node.clone();\n            if (copy_1 instanceof OutputNode) {\n                var newName = FACET_SCALE_PREFIX + copy_1.getSource();\n                copy_1.setSource(newName);\n                facet.model.component.data.outputNodes[newName] = copy_1;\n            }\n            else if (copy_1 instanceof AggregateNode || copy_1 instanceof StackNode) {\n                copy_1.addDimensions(facet.fields);\n            }\n            flatten(node.children.map(clone)).forEach(function (n) { return n.parent = copy_1; });\n            return [copy_1];\n        }\n        return flatten(node.children.map(clone));\n    }\n    return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nfunction moveFacetDown(node) {\n    if (node instanceof FacetNode) {\n        if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n            // move down until we hit a fork or output node\n            var child = node.children[0];\n            if (child instanceof AggregateNode || child instanceof StackNode) {\n                child.addDimensions(node.fields);\n            }\n            child.swapWithParent();\n            moveFacetDown(node);\n        }\n        else {\n            // move main to facet\n            moveMainDownToFacet(node.model.component.data.main);\n            // replicate the subtree and place it before the facet's main node\n            var copy = flatten(node.children.map(cloneSubtree(node)));\n            copy.forEach(function (c) { return c.parent = node.model.component.data.main; });\n        }\n    }\n    else {\n        node.children.forEach(moveFacetDown);\n    }\n}\nfunction moveMainDownToFacet(node) {\n    if (node instanceof OutputNode && node.type === MAIN) {\n        if (node.numChildren() === 1) {\n            var child = node.children[0];\n            if (!(child instanceof FacetNode)) {\n                child.swapWithParent();\n                moveMainDownToFacet(node);\n            }\n        }\n    }\n}\n/**\n * Remove nodes that are not required starting from a root.\n */\nfunction removeUnnecessaryNodes(node) {\n    // remove empty null filter nodes\n    if (node instanceof FilterInvalidNode && every(vals(node.filter), function (f) { return f === null; })) {\n        node.remove();\n    }\n    // remove output nodes that are not required\n    if (node instanceof OutputNode && !node.isRequired()) {\n        node.remove();\n    }\n    node.children.forEach(removeUnnecessaryNodes);\n}\n/**\n * Return all leaf nodes.\n */\nfunction getLeaves(roots) {\n    var leaves = [];\n    function append(node) {\n        if (node.numChildren() === 0) {\n            leaves.push(node);\n        }\n        else {\n            node.children.forEach(append);\n        }\n    }\n    roots.forEach(append);\n    return leaves;\n}\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(dataComponent) {\n    var roots = vals(dataComponent.sources);\n    roots.forEach(removeUnnecessaryNodes);\n    // remove source nodes that don't have any children because they also don't have output nodes\n    roots = roots.filter(function (r) { return r.numChildren() > 0; });\n    getLeaves(roots).forEach(optimizers.iterateFromLeaves(optimizers.removeUnusedSubtrees));\n    roots = roots.filter(function (r) { return r.numChildren() > 0; });\n    getLeaves(roots).forEach(optimizers.iterateFromLeaves(optimizers.moveParseUp));\n    getLeaves(roots).forEach(optimizers.removeDuplicateTimeUnits);\n    roots.forEach(moveFacetDown);\n    keys(dataComponent.sources).forEach(function (s) {\n        if (dataComponent.sources[s].numChildren() === 0) {\n            delete dataComponent.sources[s];\n        }\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isString } from 'vega-util';\nimport { SHARED_DOMAIN_OP_INDEX } from '../../aggregate';\nimport { binToString, isBinParams } from '../../bin';\nimport { isScaleChannel } from '../../channel';\nimport { MAIN, RAW } from '../../data';\nimport { dateTimeExpr, isDateTime } from '../../datetime';\nimport { vgField } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, isBinScale, isSelectionDomain } from '../../scale';\nimport { isSortArray, isSortField } from '../../sort';\nimport * as util from '../../util';\nimport { isDataRefDomain, isDataRefUnionedDomain, isFieldRefUnionDomain } from '../../vega.schema';\nimport { binRequiresRange } from '../common';\nimport { sortArrayIndexField } from '../data/calculate';\nimport { FACET_SCALE_PREFIX } from '../data/optimize';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { SELECTION_DOMAIN } from '../selection/selection';\nexport function parseScaleDomain(model) {\n    if (isUnitModel(model)) {\n        parseUnitScaleDomain(model);\n    }\n    else {\n        parseNonUnitScaleDomain(model);\n    }\n}\nfunction parseUnitScaleDomain(model) {\n    var scales = model.specifiedScales;\n    var localScaleComponents = model.component.scales;\n    util.keys(localScaleComponents).forEach(function (channel) {\n        var specifiedScale = scales[channel];\n        var specifiedDomain = specifiedScale ? specifiedScale.domain : undefined;\n        var domains = parseDomainForChannel(model, channel);\n        var localScaleCmpt = localScaleComponents[channel];\n        localScaleCmpt.domains = domains;\n        if (isSelectionDomain(specifiedDomain)) {\n            // As scale parsing occurs before selection parsing, we use a temporary\n            // signal here and append the scale.domain definition. This is replaced\n            // with the correct domainRaw signal during scale assembly.\n            // For more information, see isRawSelectionDomain in selection.ts.\n            // FIXME: replace this with a special property in the scaleComponent\n            localScaleCmpt.set('domainRaw', {\n                signal: SELECTION_DOMAIN + util.hash(specifiedDomain)\n            }, true);\n        }\n        if (model.component.data.isFaceted) {\n            // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not\n            var facetParent = model;\n            while (!isFacetModel(facetParent) && facetParent.parent) {\n                facetParent = facetParent.parent;\n            }\n            var resolve = facetParent.component.resolve.scale[channel];\n            if (resolve === 'shared') {\n                for (var _i = 0, domains_1 = domains; _i < domains_1.length; _i++) {\n                    var domain = domains_1[_i];\n                    // Replace the scale domain with data output from a cloned subtree after the facet.\n                    if (isDataRefDomain(domain)) {\n                        // use data from cloned subtree (which is the same as data but with a prefix added once)\n                        domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');\n                    }\n                }\n            }\n        }\n    });\n}\nfunction parseNonUnitScaleDomain(model) {\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        parseScaleDomain(child);\n    }\n    var localScaleComponents = model.component.scales;\n    util.keys(localScaleComponents).forEach(function (channel) {\n        var domains;\n        var domainRaw = null;\n        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var childComponent = child.component.scales[channel];\n            if (childComponent) {\n                if (domains === undefined) {\n                    domains = childComponent.domains;\n                }\n                else {\n                    domains = domains.concat(childComponent.domains);\n                }\n                var dr = childComponent.get('domainRaw');\n                if (domainRaw && dr && domainRaw.signal !== dr.signal) {\n                    log.warn('The same selection must be used to override scale domains in a layered view.');\n                }\n                domainRaw = dr;\n            }\n        }\n        localScaleComponents[channel].domains = domains;\n        if (domainRaw) {\n            localScaleComponents[channel].set('domainRaw', domainRaw, true);\n        }\n    });\n}\n/**\n * Remove unaggregated domain if it is not applicable\n * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.\n */\nfunction normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {\n    if (domain === 'unaggregated') {\n        var _a = canUseUnaggregatedDomain(fieldDef, scaleType), valid = _a.valid, reason = _a.reason;\n        if (!valid) {\n            log.warn(reason);\n            return undefined;\n        }\n    }\n    else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {\n        // Apply config if domain is not specified.\n        var valid = canUseUnaggregatedDomain(fieldDef, scaleType).valid;\n        if (valid) {\n            return 'unaggregated';\n        }\n    }\n    return domain;\n}\nexport function parseDomainForChannel(model, channel) {\n    var scaleType = model.getScaleComponent(channel).get('type');\n    var domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.fieldDef(channel), scaleType, model.config.scale);\n    if (domain !== model.scaleDomain(channel)) {\n        model.specifiedScales[channel] = tslib_1.__assign({}, model.specifiedScales[channel], { domain: domain });\n    }\n    // If channel is either X or Y then union them with X2 & Y2 if they exist\n    if (channel === 'x' && model.channelHasField('x2')) {\n        if (model.channelHasField('x')) {\n            return parseSingleChannelDomain(scaleType, domain, model, 'x').concat(parseSingleChannelDomain(scaleType, domain, model, 'x2'));\n        }\n        else {\n            return parseSingleChannelDomain(scaleType, domain, model, 'x2');\n        }\n    }\n    else if (channel === 'y' && model.channelHasField('y2')) {\n        if (model.channelHasField('y')) {\n            return parseSingleChannelDomain(scaleType, domain, model, 'y').concat(parseSingleChannelDomain(scaleType, domain, model, 'y2'));\n        }\n        else {\n            return parseSingleChannelDomain(scaleType, domain, model, 'y2');\n        }\n    }\n    return parseSingleChannelDomain(scaleType, domain, model, channel);\n}\nfunction parseSingleChannelDomain(scaleType, domain, model, channel) {\n    var fieldDef = model.fieldDef(channel);\n    if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) { // explicit value\n        if (isDateTime(domain[0])) {\n            return domain.map(function (dt) {\n                return { signal: \"{data: \" + dateTimeExpr(dt, true) + \"}\" };\n            });\n        }\n        return [domain];\n    }\n    var stack = model.stack;\n    if (stack && channel === stack.fieldChannel) {\n        if (stack.offset === 'normalize') {\n            return [[0, 1]];\n        }\n        var data = model.requestDataName(MAIN);\n        return [{\n                data: data,\n                field: model.vgField(channel, { suffix: 'start' })\n            }, {\n                data: data,\n                field: model.vgField(channel, { suffix: 'end' })\n            }];\n    }\n    var sort = isScaleChannel(channel) ? domainSort(model, channel, scaleType) : undefined;\n    if (domain === 'unaggregated') {\n        var data = model.requestDataName(MAIN);\n        var field = fieldDef.field;\n        return [{\n                data: data,\n                field: vgField({ field: field, aggregate: 'min' })\n            }, {\n                data: data,\n                field: vgField({ field: field, aggregate: 'max' })\n            }];\n    }\n    else if (fieldDef.bin) { // bin\n        if (isBinScale(scaleType)) {\n            var signal = model.getName(binToString(fieldDef.bin) + \"_\" + fieldDef.field + \"_bins\");\n            return [{ signal: \"sequence(\" + signal + \".start, \" + signal + \".stop + \" + signal + \".step, \" + signal + \".step)\" }];\n        }\n        if (hasDiscreteDomain(scaleType)) {\n            // ordinal bin scale takes domain from bin_range, ordered by bin start\n            // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).\n            return [{\n                    // If sort by aggregation of a specified sort field, we need to use RAW table,\n                    // so we can aggregate values for the scale independently from the main aggregation.\n                    data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n                    // Use range if we added it and the scale does not support computing a range as a signal.\n                    field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? { binSuffix: 'range' } : {}),\n                    // we have to use a sort object if sort = true to make the sort correct by bin start\n                    sort: sort === true || !isSortField(sort) ? {\n                        field: model.vgField(channel, {}),\n                        op: 'min' // min or max doesn't matter since we sort by the start of the bin range\n                    } : sort\n                }];\n        }\n        else { // continuous scales\n            if (channel === 'x' || channel === 'y') {\n                if (isBinParams(fieldDef.bin) && fieldDef.bin.extent) {\n                    return [fieldDef.bin.extent];\n                }\n                // X/Y position have to include start and end for non-ordinal scale\n                var data = model.requestDataName(MAIN);\n                return [{\n                        data: data,\n                        field: model.vgField(channel, {})\n                    }, {\n                        data: data,\n                        field: model.vgField(channel, { binSuffix: 'end' })\n                    }];\n            }\n            else {\n                // TODO: use bin_mid\n                return [{\n                        data: model.requestDataName(MAIN),\n                        field: model.vgField(channel, {})\n                    }];\n            }\n        }\n    }\n    else if (sort) {\n        return [{\n                // If sort by aggregation of a specified sort field, we need to use RAW table,\n                // so we can aggregate values for the scale independently from the main aggregation.\n                data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n                field: model.vgField(channel),\n                sort: sort\n            }];\n    }\n    else {\n        return [{\n                data: model.requestDataName(MAIN),\n                field: model.vgField(channel)\n            }];\n    }\n}\nexport function domainSort(model, channel, scaleType) {\n    if (!hasDiscreteDomain(scaleType)) {\n        return undefined;\n    }\n    var fieldDef = model.fieldDef(channel);\n    var sort = fieldDef.sort;\n    // if the sort is specified with array, use the derived sort index field\n    if (isSortArray(sort)) {\n        return {\n            op: 'min',\n            field: sortArrayIndexField(model, channel),\n            order: 'ascending'\n        };\n    }\n    // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)\n    if (isSortField(sort)) {\n        // flatten nested fields\n        return tslib_1.__assign({}, sort, (sort.field ? { field: util.replacePathInField(sort.field) } : {}));\n    }\n    if (sort === 'descending') {\n        return {\n            op: 'min',\n            field: model.vgField(channel),\n            order: 'descending'\n        };\n    }\n    if (util.contains(['ascending', undefined /* default =ascending*/], sort)) {\n        return true;\n    }\n    // sort == null\n    return undefined;\n}\n/**\n * Determine if a scale can use unaggregated domain.\n * @return {Boolean} Returns true if all of the following conditons applies:\n * 1. `scale.domain` is `unaggregated`\n * 2. Aggregation function is not `count` or `sum`\n * 3. The scale is quantitative or time scale.\n */\nexport function canUseUnaggregatedDomain(fieldDef, scaleType) {\n    if (!fieldDef.aggregate) {\n        return {\n            valid: false,\n            reason: log.message.unaggregateDomainHasNoEffectForRawField(fieldDef)\n        };\n    }\n    if (!SHARED_DOMAIN_OP_INDEX[fieldDef.aggregate]) {\n        return {\n            valid: false,\n            reason: log.message.unaggregateDomainWithNonSharedDomainOp(fieldDef.aggregate)\n        };\n    }\n    if (fieldDef.type === 'quantitative') {\n        if (scaleType === 'log') {\n            return {\n                valid: false,\n                reason: log.message.unaggregatedDomainWithLogScale(fieldDef)\n            };\n        }\n    }\n    return { valid: true };\n}\n/**\n * Converts an array of domains to a single Vega scale domain.\n */\nexport function mergeDomains(domains) {\n    var uniqueDomains = util.unique(domains.map(function (domain) {\n        // ignore sort property when computing the unique domains\n        if (isDataRefDomain(domain)) {\n            var _s = domain.sort, domainWithoutSort = tslib_1.__rest(domain, [\"sort\"]);\n            return domainWithoutSort;\n        }\n        return domain;\n    }), util.hash);\n    var sorts = util.unique(domains.map(function (d) {\n        if (isDataRefDomain(d)) {\n            var s = d.sort;\n            if (s !== undefined && !util.isBoolean(s)) {\n                if (s.op === 'count') {\n                    // let's make sure that if op is count, we don't use a field\n                    delete s.field;\n                }\n                if (s.order === 'ascending') {\n                    // drop order: ascending as it is the default\n                    delete s.order;\n                }\n            }\n            return s;\n        }\n        return undefined;\n    }).filter(function (s) { return s !== undefined; }), util.hash);\n    if (uniqueDomains.length === 1) {\n        var domain = domains[0];\n        if (isDataRefDomain(domain) && sorts.length > 0) {\n            var sort_1 = sorts[0];\n            if (sorts.length > 1) {\n                log.warn(log.message.MORE_THAN_ONE_SORT);\n                sort_1 = true;\n            }\n            return tslib_1.__assign({}, domain, { sort: sort_1 });\n        }\n        return domain;\n    }\n    // only keep simple sort properties that work with unioned domains\n    var simpleSorts = util.unique(sorts.map(function (s) {\n        if (s === true) {\n            return s;\n        }\n        if (s.op === 'count') {\n            return s;\n        }\n        log.warn(log.message.domainSortDropped(s));\n        return true;\n    }), util.hash);\n    var sort = undefined;\n    if (simpleSorts.length === 1) {\n        sort = simpleSorts[0];\n    }\n    else if (simpleSorts.length > 1) {\n        log.warn(log.message.MORE_THAN_ONE_SORT);\n        sort = true;\n    }\n    var allData = util.unique(domains.map(function (d) {\n        if (isDataRefDomain(d)) {\n            return d.data;\n        }\n        return null;\n    }), function (x) { return x; });\n    if (allData.length === 1 && allData[0] !== null) {\n        // create a union domain of different fields with a single data source\n        var domain = tslib_1.__assign({ data: allData[0], fields: uniqueDomains.map(function (d) { return d.field; }) }, (sort ? { sort: sort } : {}));\n        return domain;\n    }\n    return tslib_1.__assign({ fields: uniqueDomains }, (sort ? { sort: sort } : {}));\n}\n/**\n * Return a field if a scale single field.\n * Return `undefined` otherwise.\n *\n */\nexport function getFieldFromDomain(domain) {\n    if (isDataRefDomain(domain) && isString(domain.field)) {\n        return domain.field;\n    }\n    else if (isDataRefUnionedDomain(domain)) {\n        var field = void 0;\n        for (var _i = 0, _a = domain.fields; _i < _a.length; _i++) {\n            var nonUnionDomain = _a[_i];\n            if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {\n                if (!field) {\n                    field = nonUnionDomain.field;\n                }\n                else if (field !== nonUnionDomain.field) {\n                    log.warn('Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect.');\n                    return field;\n                }\n            }\n        }\n        log.warn('Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect.');\n        return field;\n    }\n    else if (isFieldRefUnionDomain(domain)) {\n        log.warn('Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.');\n        var field = domain.fields[0];\n        return isString(field) ? field : undefined;\n    }\n    return undefined;\n}\nexport function assembleDomain(model, channel) {\n    var scaleComponent = model.component.scales[channel];\n    var domains = scaleComponent.domains.map(function (domain) {\n        // Correct references to data as the original domain's data was determined\n        // in parseScale, which happens before parseData. Thus the original data\n        // reference can be incorrect.\n        if (isDataRefDomain(domain)) {\n            domain.data = model.lookupDataSource(domain.data);\n        }\n        return domain;\n    });\n    // domains is an array that has to be merged into a single vega domain\n    return mergeDomains(domains);\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { keys } from '../../util';\nimport { isVgRangeStep, isVgSignalRef } from '../../vega.schema';\nimport { isConcatModel, isLayerModel, isRepeatModel } from '../model';\nimport { isRawSelectionDomain, selectionScaleDomain } from '../selection/selection';\nimport { assembleDomain } from './domain';\nexport function assembleScales(model) {\n    if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n        // For concat / layer / repeat, include scales of children too\n        return model.children.reduce(function (scales, child) {\n            return scales.concat(assembleScales(child));\n        }, assembleScalesForModel(model));\n    }\n    else {\n        // For facet, child scales would not be included in the parent's scope.\n        // For unit, there is no child.\n        return assembleScalesForModel(model);\n    }\n}\nexport function assembleScalesForModel(model) {\n    return keys(model.component.scales).reduce(function (scales, channel) {\n        var scaleComponent = model.component.scales[channel];\n        if (scaleComponent.merged) {\n            // Skipped merged scales\n            return scales;\n        }\n        var scale = scaleComponent.combine();\n        // need to separate const and non const object destruction\n        var domainRaw = scale.domainRaw, range = scale.range;\n        var name = scale.name, type = scale.type, _d = scale.domainRaw, _r = scale.range, otherScaleProps = tslib_1.__rest(scale, [\"name\", \"type\", \"domainRaw\", \"range\"]);\n        range = assembleScaleRange(range, name, model, channel);\n        // As scale parsing occurs before selection parsing, a temporary signal\n        // is used for domainRaw. Here, we detect if this temporary signal\n        // is set, and replace it with the correct domainRaw signal.\n        // For more information, see isRawSelectionDomain in selection.ts.\n        if (domainRaw && isRawSelectionDomain(domainRaw)) {\n            domainRaw = selectionScaleDomain(model, domainRaw);\n        }\n        scales.push(tslib_1.__assign({ name: name,\n            type: type, domain: assembleDomain(model, channel) }, (domainRaw ? { domainRaw: domainRaw } : {}), { range: range }, otherScaleProps));\n        return scales;\n    }, []);\n}\nexport function assembleScaleRange(scaleRange, scaleName, model, channel) {\n    // add signals to x/y range\n    if (channel === 'x' || channel === 'y') {\n        if (isVgRangeStep(scaleRange)) {\n            // For x/y range step, use a signal created in layout assemble instead of a constant range step.\n            return {\n                step: { signal: scaleName + '_step' }\n            };\n        }\n        else if (isArray(scaleRange) && scaleRange.length === 2) {\n            var r0 = scaleRange[0];\n            var r1 = scaleRange[1];\n            if (r0 === 0 && isVgSignalRef(r1)) {\n                // Replace width signal just in case it is renamed.\n                return [0, { signal: model.getSizeName(r1.signal) }];\n            }\n            else if (isVgSignalRef(r0) && r1 === 0) {\n                // Replace height signal just in case it is renamed.\n                return [{ signal: model.getSizeName(r0.signal) }, 0];\n            }\n        }\n    }\n    return scaleRange;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZW1ibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9zY2FsZS9hc3NlbWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUVsQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxhQUFhLEVBQUUsYUFBYSxFQUFtQixNQUFNLG1CQUFtQixDQUFDO0FBQ2pGLE9BQU8sRUFBQyxhQUFhLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBUSxNQUFNLFVBQVUsQ0FBQztBQUMzRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRixPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRXhDLE1BQU0seUJBQXlCLEtBQVk7SUFDekMsSUFBSSxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN2RSw4REFBOEQ7UUFDOUQsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFDLE1BQU0sRUFBRSxLQUFLO1lBQ3pDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM5QyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztLQUNuQztTQUFNO1FBQ0wsdUVBQXVFO1FBQ3ZFLCtCQUErQjtRQUMvQixPQUFPLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RDO0FBQ0gsQ0FBQztBQUVELE1BQU0saUNBQWlDLEtBQVk7SUFDL0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxNQUFpQixFQUFFLE9BQXFCO1FBQ2xGLElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRTtZQUN6Qix3QkFBd0I7WUFDeEIsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUVELElBQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUV2QywwREFBMEQ7UUFDckQsSUFBQSwyQkFBUyxFQUFFLG1CQUFLLENBQVU7UUFDeEIsSUFBQSxpQkFBSSxFQUFFLGlCQUFJLEVBQUUsb0JBQWEsRUFBRSxnQkFBUyxFQUFFLCtFQUFrQixDQUFVO1FBRXpFLEtBQUssR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV4RCx1RUFBdUU7UUFDdkUsa0VBQWtFO1FBQ2xFLDREQUE0RDtRQUM1RCxrRUFBa0U7UUFDbEUsSUFBSSxTQUFTLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEQsU0FBUyxHQUFHLG9CQUFvQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNwRDtRQUdELE1BQU0sQ0FBQyxJQUFJLG9CQUNULElBQUksTUFBQTtZQUNKLElBQUksTUFBQSxFQUNKLE1BQU0sRUFBRSxjQUFjLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxJQUNuQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxTQUFTLFdBQUEsRUFBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFDakMsS0FBSyxFQUFFLEtBQUssSUFDVCxlQUFlLEVBQ2xCLENBQUM7UUFFSCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLEVBQUUsRUFBZSxDQUFDLENBQUM7QUFDeEIsQ0FBQztBQUVELE1BQU0sNkJBQTZCLFVBQW1CLEVBQUUsU0FBaUIsRUFBRSxLQUFZLEVBQUUsT0FBZ0I7SUFDdkcsMkJBQTJCO0lBQzNCLElBQUksT0FBTyxLQUFLLEdBQUcsSUFBSSxPQUFPLEtBQUssR0FBRyxFQUFFO1FBQ3RDLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQzdCLGdHQUFnRztZQUNoRyxPQUFPO2dCQUNMLElBQUksRUFBRSxFQUFDLE1BQU0sRUFBRSxTQUFTLEdBQUcsT0FBTyxFQUFDO2FBQ3BDLENBQUM7U0FDSDthQUFNLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3pELElBQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QixJQUFNLEVBQUUsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDakMsbURBQW1EO2dCQUNuRCxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQzthQUNwRDtpQkFBTSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFO2dCQUN4QyxvREFBb0Q7Z0JBQ3BELE9BQU8sQ0FBQyxFQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3BEO1NBQ0Y7S0FDRjtJQUNELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzQXJyYXl9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge0NoYW5uZWwsIFNjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge2tleXN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtpc1ZnUmFuZ2VTdGVwLCBpc1ZnU2lnbmFsUmVmLCBWZ1JhbmdlLCBWZ1NjYWxlfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge2lzQ29uY2F0TW9kZWwsIGlzTGF5ZXJNb2RlbCwgaXNSZXBlYXRNb2RlbCwgTW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7aXNSYXdTZWxlY3Rpb25Eb21haW4sIHNlbGVjdGlvblNjYWxlRG9tYWlufSBmcm9tICcuLi9zZWxlY3Rpb24vc2VsZWN0aW9uJztcbmltcG9ydCB7YXNzZW1ibGVEb21haW59IGZyb20gJy4vZG9tYWluJztcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVzKG1vZGVsOiBNb2RlbCk6IFZnU2NhbGVbXSB7XG4gIGlmIChpc0xheWVyTW9kZWwobW9kZWwpIHx8IGlzQ29uY2F0TW9kZWwobW9kZWwpIHx8IGlzUmVwZWF0TW9kZWwobW9kZWwpKSB7XG4gICAgLy8gRm9yIGNvbmNhdCAvIGxheWVyIC8gcmVwZWF0LCBpbmNsdWRlIHNjYWxlcyBvZiBjaGlsZHJlbiB0b29cbiAgICByZXR1cm4gbW9kZWwuY2hpbGRyZW4ucmVkdWNlKChzY2FsZXMsIGNoaWxkKSA9PiB7XG4gICAgICByZXR1cm4gc2NhbGVzLmNvbmNhdChhc3NlbWJsZVNjYWxlcyhjaGlsZCkpO1xuICAgIH0sIGFzc2VtYmxlU2NhbGVzRm9yTW9kZWwobW9kZWwpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGb3IgZmFjZXQsIGNoaWxkIHNjYWxlcyB3b3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gdGhlIHBhcmVudCdzIHNjb3BlLlxuICAgIC8vIEZvciB1bml0LCB0aGVyZSBpcyBubyBjaGlsZC5cbiAgICByZXR1cm4gYXNzZW1ibGVTY2FsZXNGb3JNb2RlbChtb2RlbCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVzRm9yTW9kZWwobW9kZWw6IE1vZGVsKTogVmdTY2FsZVtdIHtcbiAgICByZXR1cm4ga2V5cyhtb2RlbC5jb21wb25lbnQuc2NhbGVzKS5yZWR1Y2UoKHNjYWxlczogVmdTY2FsZVtdLCBjaGFubmVsOiBTY2FsZUNoYW5uZWwpID0+IHtcbiAgICAgIGNvbnN0IHNjYWxlQ29tcG9uZW50ID0gbW9kZWwuY29tcG9uZW50LnNjYWxlc1tjaGFubmVsXTtcbiAgICAgIGlmIChzY2FsZUNvbXBvbmVudC5tZXJnZWQpIHtcbiAgICAgICAgLy8gU2tpcHBlZCBtZXJnZWQgc2NhbGVzXG4gICAgICAgIHJldHVybiBzY2FsZXM7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNjYWxlID0gc2NhbGVDb21wb25lbnQuY29tYmluZSgpO1xuXG4gICAgICAvLyBuZWVkIHRvIHNlcGFyYXRlIGNvbnN0IGFuZCBub24gY29uc3Qgb2JqZWN0IGRlc3RydWN0aW9uXG4gICAgICBsZXQge2RvbWFpblJhdywgcmFuZ2V9ID0gc2NhbGU7XG4gICAgICBjb25zdCB7bmFtZSwgdHlwZSwgZG9tYWluUmF3OiBfZCwgcmFuZ2U6IF9yLCAuLi5vdGhlclNjYWxlUHJvcHN9ID0gc2NhbGU7XG5cbiAgICAgIHJhbmdlID0gYXNzZW1ibGVTY2FsZVJhbmdlKHJhbmdlLCBuYW1lLCBtb2RlbCwgY2hhbm5lbCk7XG5cbiAgICAgIC8vIEFzIHNjYWxlIHBhcnNpbmcgb2NjdXJzIGJlZm9yZSBzZWxlY3Rpb24gcGFyc2luZywgYSB0ZW1wb3Jhcnkgc2lnbmFsXG4gICAgICAvLyBpcyB1c2VkIGZvciBkb21haW5SYXcuIEhlcmUsIHdlIGRldGVjdCBpZiB0aGlzIHRlbXBvcmFyeSBzaWduYWxcbiAgICAgIC8vIGlzIHNldCwgYW5kIHJlcGxhY2UgaXQgd2l0aCB0aGUgY29ycmVjdCBkb21haW5SYXcgc2lnbmFsLlxuICAgICAgLy8gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSBpc1Jhd1NlbGVjdGlvbkRvbWFpbiBpbiBzZWxlY3Rpb24udHMuXG4gICAgICBpZiAoZG9tYWluUmF3ICYmIGlzUmF3U2VsZWN0aW9uRG9tYWluKGRvbWFpblJhdykpIHtcbiAgICAgICAgZG9tYWluUmF3ID0gc2VsZWN0aW9uU2NhbGVEb21haW4obW9kZWwsIGRvbWFpblJhdyk7XG4gICAgICB9XG5cblxuICAgICAgc2NhbGVzLnB1c2goe1xuICAgICAgICBuYW1lLFxuICAgICAgICB0eXBlLFxuICAgICAgICBkb21haW46IGFzc2VtYmxlRG9tYWluKG1vZGVsLCBjaGFubmVsKSxcbiAgICAgICAgLi4uKGRvbWFpblJhdyA/IHtkb21haW5SYXd9IDoge30pLFxuICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgIC4uLm90aGVyU2NhbGVQcm9wc1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzY2FsZXM7XG4gICAgfSwgW10gYXMgVmdTY2FsZVtdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VtYmxlU2NhbGVSYW5nZShzY2FsZVJhbmdlOiBWZ1JhbmdlLCBzY2FsZU5hbWU6IHN0cmluZywgbW9kZWw6IE1vZGVsLCBjaGFubmVsOiBDaGFubmVsKSB7XG4gIC8vIGFkZCBzaWduYWxzIHRvIHgveSByYW5nZVxuICBpZiAoY2hhbm5lbCA9PT0gJ3gnIHx8IGNoYW5uZWwgPT09ICd5Jykge1xuICAgIGlmIChpc1ZnUmFuZ2VTdGVwKHNjYWxlUmFuZ2UpKSB7XG4gICAgICAvLyBGb3IgeC95IHJhbmdlIHN0ZXAsIHVzZSBhIHNpZ25hbCBjcmVhdGVkIGluIGxheW91dCBhc3NlbWJsZSBpbnN0ZWFkIG9mIGEgY29uc3RhbnQgcmFuZ2Ugc3RlcC5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0ZXA6IHtzaWduYWw6IHNjYWxlTmFtZSArICdfc3RlcCd9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheShzY2FsZVJhbmdlKSAmJiBzY2FsZVJhbmdlLmxlbmd0aCA9PT0gMikge1xuICAgICAgY29uc3QgcjAgPSBzY2FsZVJhbmdlWzBdO1xuICAgICAgY29uc3QgcjEgPSBzY2FsZVJhbmdlWzFdO1xuICAgICAgaWYgKHIwID09PSAwICYmIGlzVmdTaWduYWxSZWYocjEpKSB7XG4gICAgICAgIC8vIFJlcGxhY2Ugd2lkdGggc2lnbmFsIGp1c3QgaW4gY2FzZSBpdCBpcyByZW5hbWVkLlxuICAgICAgICByZXR1cm4gWzAsIHtzaWduYWw6IG1vZGVsLmdldFNpemVOYW1lKHIxLnNpZ25hbCl9XTtcbiAgICAgIH0gZWxzZSBpZiAoaXNWZ1NpZ25hbFJlZihyMCkgJiYgcjEgPT09IDApIHtcbiAgICAgICAgLy8gUmVwbGFjZSBoZWlnaHQgc2lnbmFsIGp1c3QgaW4gY2FzZSBpdCBpcyByZW5hbWVkLlxuICAgICAgICByZXR1cm4gW3tzaWduYWw6IG1vZGVsLmdldFNpemVOYW1lKHIwLnNpZ25hbCl9LCAwXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNjYWxlUmFuZ2U7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { Split } from '../split';\nvar ScaleComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(ScaleComponent, _super);\n    function ScaleComponent(name, typeWithExplicit) {\n        var _this = _super.call(this, {}, // no initial explicit property\n        { name: name } // name as initial implicit property\n        ) || this;\n        _this.merged = false;\n        _this.domains = [];\n        _this.setWithExplicit('type', typeWithExplicit);\n        return _this;\n    }\n    return ScaleComponent;\n}(Split));\nexport { ScaleComponent };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2NhbGUvY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFJQSxPQUFPLEVBQVcsS0FBSyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBU3pDO0lBQW9DLDBDQUEwQjtJQUs1RCx3QkFBWSxJQUFZLEVBQUUsZ0JBQXFDO1FBQS9ELFlBQ0Usa0JBQ0UsRUFBRSxFQUFNLCtCQUErQjtRQUN2QyxFQUFDLElBQUksTUFBQSxFQUFDLENBQUUsb0NBQW9DO1NBQzdDLFNBRUY7UUFWTSxZQUFNLEdBQUcsS0FBSyxDQUFDO1FBRWYsYUFBTyxHQUF1QixFQUFFLENBQUM7UUFPdEMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzs7SUFDakQsQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQVpELENBQW9DLEtBQUssR0FZeEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1NjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge1NjYWxlLCBTY2FsZVR5cGV9IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7T21pdH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnTm9uVW5pb25Eb21haW4sIFZnU2NhbGV9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7RXhwbGljaXQsIFNwbGl0fSBmcm9tICcuLi9zcGxpdCc7XG5cbi8qKlxuICogQWxsIFZnRG9tYWluIHByb3BlcnR5IGV4Y2VwdCBkb21haW4uXG4gKiAoV2UgZXhjbHVkZSBkb21haW4gYXMgd2UgaGF2ZSBhIHNwZWNpYWwgXCJkb21haW5zXCIgYXJyYXkgdGhhdCBhbGxvdyB1cyBtZXJnZSB0aGVtIGFsbCBhdCBvbmNlIGluIGFzc2VtYmxlLilcbiAqL1xuLy8gVE9ETzogYWxzbyBleGNsdWRlIGRvbWFpblJhdyBhbmQgcHJvcGVydHkgaW1wbGVtZW50IHRoZSByaWdodCBzY2FsZUNvbXBvbmVudCBmb3Igc2VsZWN0aW9uIGRvbWFpblxuZXhwb3J0IHR5cGUgU2NhbGVDb21wb25lbnRQcm9wcyA9IE9taXQ8VmdTY2FsZSwgJ2RvbWFpbic+O1xuXG5leHBvcnQgY2xhc3MgU2NhbGVDb21wb25lbnQgZXh0ZW5kcyBTcGxpdDxTY2FsZUNvbXBvbmVudFByb3BzPiB7XG4gIHB1YmxpYyBtZXJnZWQgPSBmYWxzZTtcblxuICBwdWJsaWMgZG9tYWluczogVmdOb25VbmlvbkRvbWFpbltdID0gW107XG5cbiAgY29uc3RydWN0b3IobmFtZTogc3RyaW5nLCB0eXBlV2l0aEV4cGxpY2l0OiBFeHBsaWNpdDxTY2FsZVR5cGU+KSB7XG4gICAgc3VwZXIoXG4gICAgICB7fSwgICAgIC8vIG5vIGluaXRpYWwgZXhwbGljaXQgcHJvcGVydHlcbiAgICAgIHtuYW1lfSAgLy8gbmFtZSBhcyBpbml0aWFsIGltcGxpY2l0IHByb3BlcnR5XG4gICAgKTtcbiAgICB0aGlzLnNldFdpdGhFeHBsaWNpdCgndHlwZScsIHR5cGVXaXRoRXhwbGljaXQpO1xuICB9XG59XG5cbi8vIFVzaW5nIE1hcHBlZCBUeXBlIHRvIGRlY2xhcmUgdHlwZSAoaHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svYWR2YW5jZWQtdHlwZXMuaHRtbCNtYXBwZWQtdHlwZXMpXG5leHBvcnQgdHlwZSBTY2FsZUNvbXBvbmVudEluZGV4ID0ge1tQIGluIFNjYWxlQ2hhbm5lbF0/OiBTY2FsZUNvbXBvbmVudH07XG5cbmV4cG9ydCB0eXBlIFNjYWxlSW5kZXggPSB7W1AgaW4gU2NhbGVDaGFubmVsXT86IFNjYWxlfTtcbiJdfQ==","import { isNumber } from 'vega-util';\nimport { COLOR, FILL, OPACITY, SCALE_CHANNELS, SHAPE, SIZE, STROKE, X, Y } from '../../channel';\nimport * as log from '../../log';\nimport { channelScalePropertyIncompatability, isExtendedScheme, scaleTypeSupportProperty, } from '../../scale';\nimport { hasContinuousDomain } from '../../scale';\nimport * as util from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { isUnitModel } from '../model';\nimport { makeExplicit, makeImplicit } from '../split';\nimport { parseNonUnitScaleProperty } from './properties';\nexport var RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];\nexport function parseScaleRange(model) {\n    if (isUnitModel(model)) {\n        parseUnitScaleRange(model);\n    }\n    else {\n        parseNonUnitScaleProperty(model, 'range');\n    }\n}\nfunction parseUnitScaleRange(model) {\n    var localScaleComponents = model.component.scales;\n    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n    SCALE_CHANNELS.forEach(function (channel) {\n        var localScaleCmpt = localScaleComponents[channel];\n        if (!localScaleCmpt) {\n            return;\n        }\n        var mergedScaleCmpt = model.getScaleComponent(channel);\n        var specifiedScale = model.specifiedScales[channel];\n        var fieldDef = model.fieldDef(channel);\n        // Read if there is a specified width/height\n        var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n        var sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;\n        var scaleType = mergedScaleCmpt.get('type');\n        // if autosize is fit, size cannot be data driven\n        var rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;\n        if (sizeType && model.fit && !sizeSpecified && rangeStep) {\n            log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n            sizeSpecified = true;\n        }\n        var xyRangeSteps = getXYRangeStep(model);\n        var rangeWithExplicit = parseRangeForChannel(channel, scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark, sizeSpecified, model.getName(sizeType), xyRangeSteps);\n        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    });\n}\nfunction getXYRangeStep(model) {\n    var xyRangeSteps = [];\n    var xScale = model.getScaleComponent('x');\n    var xRange = xScale && xScale.get('range');\n    if (xRange && isVgRangeStep(xRange) && isNumber(xRange.step)) {\n        xyRangeSteps.push(xRange.step);\n    }\n    var yScale = model.getScaleComponent('y');\n    var yRange = yScale && yScale.get('range');\n    if (yRange && isVgRangeStep(yRange) && isNumber(yRange.step)) {\n        xyRangeSteps.push(yRange.step);\n    }\n    return xyRangeSteps;\n}\n/**\n * Return mixins that includes one of the range properties (range, rangeStep, scheme).\n */\nexport function parseRangeForChannel(channel, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {\n    var noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;\n    // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n    for (var _i = 0, RANGE_PROPERTIES_1 = RANGE_PROPERTIES; _i < RANGE_PROPERTIES_1.length; _i++) {\n        var property = RANGE_PROPERTIES_1[_i];\n        if (specifiedScale[property] !== undefined) {\n            var supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\n            var channelIncompatability = channelScalePropertyIncompatability(channel, property);\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n            }\n            else if (channelIncompatability) { // channel\n                log.warn(channelIncompatability);\n            }\n            else {\n                switch (property) {\n                    case 'range':\n                        return makeExplicit(specifiedScale[property]);\n                    case 'scheme':\n                        return makeExplicit(parseScheme(specifiedScale[property]));\n                    case 'rangeStep':\n                        var rangeStep = specifiedScale[property];\n                        if (rangeStep !== null) {\n                            if (!sizeSpecified) {\n                                return makeExplicit({ step: rangeStep });\n                            }\n                            else {\n                                // If top-level size is specified, we ignore specified rangeStep.\n                                log.warn(log.message.rangeStepDropped(channel));\n                            }\n                        }\n                }\n            }\n        }\n    }\n    return makeImplicit(defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep));\n}\nfunction parseScheme(scheme) {\n    if (isExtendedScheme(scheme)) {\n        var r = { scheme: scheme.name };\n        if (scheme.count) {\n            r.count = scheme.count;\n        }\n        if (scheme.extent) {\n            r.extent = scheme.extent;\n        }\n        return r;\n    }\n    return { scheme: scheme };\n}\nexport function defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep) {\n    switch (channel) {\n        case X:\n        case Y:\n            if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {\n                if (channel === X && mark === 'text') {\n                    if (config.scale.textXRangeStep) {\n                        return { step: config.scale.textXRangeStep };\n                    }\n                }\n                else {\n                    if (config.scale.rangeStep) {\n                        return { step: config.scale.rangeStep };\n                    }\n                }\n            }\n            // If range step is null, use zero to width or height.\n            // Note that these range signals are temporary\n            // as they can be merged and renamed.\n            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n            // We will later replace these temporary names with\n            // the final name in assembleScaleRange()\n            if (channel === Y && hasContinuousDomain(scaleType)) {\n                // For y continuous scale, we have to start from the height as the bottom part has the max value.\n                return [{ signal: sizeSignal }, 0];\n            }\n            else {\n                return [0, { signal: sizeSignal }];\n            }\n        case SIZE:\n            // TODO: support custom rangeMin, rangeMax\n            var rangeMin = sizeRangeMin(mark, zero, config);\n            var rangeMax = sizeRangeMax(mark, xyRangeSteps, config);\n            return [rangeMin, rangeMax];\n        case SHAPE:\n            return 'symbol';\n        case COLOR:\n        case FILL:\n        case STROKE:\n            if (scaleType === 'ordinal') {\n                // Only nominal data uses ordinal scale by default\n                return type === 'nominal' ? 'category' : 'ordinal';\n            }\n            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n        case OPACITY:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n    throw new Error(\"Scale range undefined for channel \" + channel);\n}\nfunction sizeRangeMin(mark, zero, config) {\n    if (zero) {\n        return 0;\n    }\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            return config.scale.minBandSize;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.minStrokeWidth;\n        case 'text':\n            return config.scale.minFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\nfunction sizeRangeMax(mark, xyRangeSteps, config) {\n    var scaleConfig = config.scale;\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            if (config.scale.maxBandSize !== undefined) {\n                return config.scale.maxBandSize;\n            }\n            return minXYRangeStep(xyRangeSteps, config.scale) - 1;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.maxStrokeWidth;\n        case 'text':\n            return config.scale.maxFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            if (config.scale.maxSize) {\n                return config.scale.maxSize;\n            }\n            // FIXME this case totally should be refactored\n            var pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);\n            return (pointStep - 2) * (pointStep - 2);\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYRangeStep(xyRangeSteps, scaleConfig) {\n    if (xyRangeSteps.length > 0) {\n        return Math.min.apply(null, xyRangeSteps);\n    }\n    if (scaleConfig.rangeStep) {\n        return scaleConfig.rangeStep;\n    }\n    return 21; // FIXME: re-evaluate the default value here.\n}\n//# sourceMappingURL=data:application/json;base64,","import { X, Y } from '../../channel';\nimport * as log from '../../log';\nimport { channelScalePropertyIncompatability, hasContinuousDomain, isContinuousToContinuous, ScaleType, scaleTypeSupportProperty } from '../../scale';\nimport { contains, keys } from '../../util';\nimport * as util from '../../util';\nimport { isUnitModel } from '../model';\nimport { mergeValuesWithExplicit, tieBreakByComparing } from '../split';\nimport { parseScaleRange } from './range';\nexport function parseScaleProperty(model, property) {\n    if (isUnitModel(model)) {\n        parseUnitScaleProperty(model, property);\n    }\n    else {\n        parseNonUnitScaleProperty(model, property);\n    }\n}\nfunction parseUnitScaleProperty(model, property) {\n    var localScaleComponents = model.component.scales;\n    keys(localScaleComponents).forEach(function (channel) {\n        var specifiedScale = model.specifiedScales[channel];\n        var localScaleCmpt = localScaleComponents[channel];\n        var mergedScaleCmpt = model.getScaleComponent(channel);\n        var fieldDef = model.fieldDef(channel);\n        var config = model.config;\n        var specifiedValue = specifiedScale[property];\n        var sType = mergedScaleCmpt.get('type');\n        var supportedByScaleType = scaleTypeSupportProperty(sType, property);\n        var channelIncompatability = channelScalePropertyIncompatability(channel, property);\n        if (specifiedValue !== undefined) {\n            // If there is a specified value, check if it is compatible with scale type and channel\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(sType, property, channel));\n            }\n            else if (channelIncompatability) { // channel\n                log.warn(channelIncompatability);\n            }\n        }\n        if (supportedByScaleType && channelIncompatability === undefined) {\n            if (specifiedValue !== undefined) {\n                // copyKeyFromObject ensure type safety\n                localScaleCmpt.copyKeyFromObject(property, specifiedScale);\n            }\n            else {\n                var value = getDefaultValue(property, channel, fieldDef, mergedScaleCmpt.get('type'), mergedScaleCmpt.get('padding'), mergedScaleCmpt.get('paddingInner'), specifiedScale.domain, model.markDef, config);\n                if (value !== undefined) {\n                    localScaleCmpt.set(property, value, false);\n                }\n            }\n        }\n    });\n}\n// Note: This method is used in Voyager.\nexport function getDefaultValue(property, channel, fieldDef, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {\n    var scaleConfig = config.scale;\n    // If we have default rule-base, determine default value first\n    switch (property) {\n        case 'nice':\n            return nice(scaleType, channel, fieldDef);\n        case 'padding':\n            return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);\n        case 'paddingInner':\n            return paddingInner(scalePadding, channel, scaleConfig);\n        case 'paddingOuter':\n            return paddingOuter(scalePadding, channel, scaleType, scalePaddingInner, scaleConfig);\n        case 'reverse':\n            return reverse(scaleType, fieldDef.sort);\n        case 'zero':\n            return zero(channel, fieldDef, specifiedDomain, markDef);\n    }\n    // Otherwise, use scale config\n    return scaleConfig[property];\n}\nexport function parseNonUnitScaleProperty(model, property) {\n    var localScaleComponents = model.component.scales;\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        if (property === 'range') {\n            parseScaleRange(child);\n        }\n        else {\n            parseScaleProperty(child, property);\n        }\n    }\n    keys(localScaleComponents).forEach(function (channel) {\n        var valueWithExplicit;\n        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var childComponent = child.component.scales[channel];\n            if (childComponent) {\n                var childValueWithExplicit = childComponent.getWithExplicit(property);\n                valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing(function (v1, v2) {\n                    switch (property) {\n                        case 'range':\n                            // For range step, prefer larger step\n                            if (v1.step && v2.step) {\n                                return v1.step - v2.step;\n                            }\n                            return 0;\n                        // TODO: precedence rule for other properties\n                    }\n                    return 0;\n                }));\n            }\n        }\n        localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);\n    });\n}\nexport function nice(scaleType, channel, fieldDef) {\n    if (fieldDef.bin || util.contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {\n        return undefined;\n    }\n    return util.contains([X, Y], channel); // return true for quantitative X/Y unless binned\n}\nexport function padding(channel, scaleType, scaleConfig, fieldDef, markDef, barConfig) {\n    if (util.contains([X, Y], channel)) {\n        if (isContinuousToContinuous(scaleType)) {\n            if (scaleConfig.continuousPadding !== undefined) {\n                return scaleConfig.continuousPadding;\n            }\n            var type = markDef.type, orient = markDef.orient;\n            if (type === 'bar' && !fieldDef.bin) {\n                if ((orient === 'vertical' && channel === 'x') ||\n                    (orient === 'horizontal' && channel === 'y')) {\n                    return barConfig.continuousBandSize;\n                }\n            }\n        }\n        if (scaleType === ScaleType.POINT) {\n            return scaleConfig.pointPadding;\n        }\n    }\n    return undefined;\n}\nexport function paddingInner(paddingValue, channel, scaleConfig) {\n    if (paddingValue !== undefined) {\n        // If user has already manually specified \"padding\", no need to add default paddingInner.\n        return undefined;\n    }\n    if (util.contains([X, Y], channel)) {\n        // Padding is only set for X and Y by default.\n        // Basically it doesn't make sense to add padding for color and size.\n        // paddingOuter would only be called if it's a band scale, just return the default for bandScale.\n        return scaleConfig.bandPaddingInner;\n    }\n    return undefined;\n}\nexport function paddingOuter(paddingValue, channel, scaleType, paddingInnerValue, scaleConfig) {\n    if (paddingValue !== undefined) {\n        // If user has already manually specified \"padding\", no need to add default paddingOuter.\n        return undefined;\n    }\n    if (util.contains([X, Y], channel)) {\n        // Padding is only set for X and Y by default.\n        // Basically it doesn't make sense to add padding for color and size.\n        if (scaleType === ScaleType.BAND) {\n            if (scaleConfig.bandPaddingOuter !== undefined) {\n                return scaleConfig.bandPaddingOuter;\n            }\n            /* By default, paddingOuter is paddingInner / 2. The reason is that\n                size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).\n                and we want the width/height to be integer by default.\n                Note that step (by default) and cardinality are integers.) */\n            return paddingInnerValue / 2;\n        }\n    }\n    return undefined;\n}\nexport function reverse(scaleType, sort) {\n    if (hasContinuousDomain(scaleType) && sort === 'descending') {\n        // For continuous domain scales, Vega does not support domain sort.\n        // Thus, we reverse range instead if sort is descending\n        return true;\n    }\n    return undefined;\n}\nexport function zero(channel, fieldDef, specifiedScale, markDef) {\n    // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.\n    var hasCustomDomain = !!specifiedScale && specifiedScale !== 'unaggregated';\n    if (hasCustomDomain) {\n        return false;\n    }\n    // If there is no custom domain, return true only for the following cases:\n    // 1) using quantitative field with size\n    // While this can be either ratio or interval fields, our assumption is that\n    // ratio are more common.\n    if (channel === 'size' && fieldDef.type === 'quantitative') {\n        return true;\n    }\n    // 2) non-binned, quantitative x-scale or y-scale\n    // (For binning, we should not include zero by default because binning are calculated without zero.)\n    if (!fieldDef.bin && util.contains([X, Y], channel)) {\n        var orient = markDef.orient, type = markDef.type;\n        if (contains(['bar', 'area', 'line', 'trail'], type)) {\n            if ((orient === 'horizontal' && channel === 'y') ||\n                (orient === 'vertical' && channel === 'x')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydGllcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NjYWxlL3Byb3BlcnRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF3QixDQUFDLEVBQUUsQ0FBQyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRzFELE9BQU8sS0FBSyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBRWpDLE9BQU8sRUFBQyxtQ0FBbUMsRUFBVSxtQkFBbUIsRUFBRSx3QkFBd0IsRUFBZ0MsU0FBUyxFQUFFLHdCQUF3QixFQUFDLE1BQU0sYUFBYSxDQUFDO0FBRTFMLE9BQU8sRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQzFDLE9BQU8sS0FBSyxJQUFJLE1BQU0sWUFBWSxDQUFDO0FBRW5DLE9BQU8sRUFBQyxXQUFXLEVBQVEsTUFBTSxVQUFVLENBQUM7QUFDNUMsT0FBTyxFQUFXLHVCQUF1QixFQUFFLG1CQUFtQixFQUFDLE1BQU0sVUFBVSxDQUFDO0FBR2hGLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFeEMsTUFBTSw2QkFBNkIsS0FBWSxFQUFFLFFBQTZDO0lBQzVGLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLHNCQUFzQixDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztLQUN6QztTQUFNO1FBQ0wseUJBQXlCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0tBQzVDO0FBQ0gsQ0FBQztBQUVELGdDQUFnQyxLQUFnQixFQUFFLFFBQTZDO0lBQzdGLElBQU0sb0JBQW9CLEdBQXdCLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBRXpFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE9BQXFCO1FBQ3ZELElBQU0sY0FBYyxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxD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SSxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRTtZQUNwRCxJQUNFLENBQUMsTUFBTSxLQUFLLFlBQVksSUFBSSxPQUFPLEtBQUssR0FBRyxDQUFDO2dCQUM1QyxDQUFDLE1BQU0sS0FBSyxVQUFVLElBQUksT0FBTyxLQUFLLEdBQUcsQ0FBQyxFQUMxQztnQkFDQSxPQUFPLEtBQUssQ0FBQzthQUNkO1NBQ0Y7UUFFRCxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFubmVsLCBTY2FsZUNoYW5uZWwsIFgsIFl9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtDb25maWd9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQge0ZpZWxkRGVmLCBTY2FsZUZpZWxkRGVmfSBmcm9tICcuLi8uLi9maWVsZGRlZic7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vbG9nJztcbmltcG9ydCB7QmFyQ29uZmlnLCBNYXJrRGVmfSBmcm9tICcuLi8uLi9tYXJrJztcbmltcG9ydCB7Y2hhbm5lbFNjYWxlUHJvcGVydHlJbmNvbXBhdGFiaWxpdHksIERvbWFpbiwgaGFzQ29udGludW91c0RvbWFpbiwgaXNDb250aW51b3VzVG9Db250aW51b3VzLCBOaWNlVGltZSwgU2NhbGUsIFNjYWxlQ29uZmlnLCBTY2FsZVR5cGUsIHNjYWxlVHlwZVN1cHBvcnRQcm9wZXJ0eX0gZnJvbSAnLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtFbmNvZGluZ1NvcnRGaWVsZCwgU29ydE9yZGVyfSBmcm9tICcuLi8uLi9zb3J0JztcbmltcG9ydCB7Y29udGFpbnMsIGtleXN9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdTY2FsZX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtpc1VuaXRNb2RlbCwgTW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7RXhwbGljaXQsIG1lcmdlVmFsdWVzV2l0aEV4cGxpY2l0LCB0aWVCcmVha0J5Q29tcGFyaW5nfSBmcm9tICcuLi9zcGxpdCc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge1NjYWxlQ29tcG9uZW50LCBTY2FsZUNvbXBvbmVudEluZGV4LCBTY2FsZUNvbXBvbmVudFByb3BzfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge3BhcnNlU2NhbGVSYW5nZX0gZnJvbSAnLi9yYW5nZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNjYWxlUHJvcGVydHkobW9kZWw6IE1vZGVsLCBwcm9wZXJ0eToga2V5b2YgKFNjYWxlIHwgU2NhbGVDb21wb25lbnRQcm9wcykpIHtcbiAgaWYgKGlzVW5pdE1vZGVsKG1vZGVsKSkge1xuICAgIHBhcnNlVW5pdFNjYWxlUHJvcGVydHkobW9kZWwsIHByb3BlcnR5KTtcbiAgfSBlbHNlIHtcbiAgICBwYXJzZU5vblVuaXRTY2FsZVByb3BlcnR5KG1vZGVsLCBwcm9wZXJ0eSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VVbml0U2NhbGVQcm9wZXJ0eShtb2RlbDogVW5pdE1vZGVsLCBwcm9wZXJ0eToga2V5b2YgKFNjYWxlIHwgU2NhbGVDb21wb25lbnRQcm9wcykpIHtcbiAgY29uc3QgbG9jYWxTY2FsZUNvbXBvbmVudHM6IFNjYWxlQ29tcG9uZW50SW5kZXggPSBtb2RlbC5jb21wb25lbnQuc2NhbGVzO1xuXG4gIGtleXMobG9jYWxTY2FsZUNvbXBvbmVudHMpLmZvckVhY2goKGNoYW5uZWw6IFNjYWxlQ2hhbm5lbCkgPT4ge1xuICAgIGNvbnN0IHNwZWNpZmllZFNjYWxlID0gbW9kZWwuc3BlY2lmaWVkU2NhbGVzW2NoYW5uZWxdO1xuICAgIGNvbnN0IGxvY2FsU2NhbGVDbXB0ID0gbG9jYWxTY2FsZUNvbXBvbmVudHNbY2hhbm5lbF07XG4gICAgY29uc3QgbWVyZ2VkU2NhbGVDbXB0ID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCk7XG4gICAgY29uc3QgZmllbGREZWYgPSBtb2RlbC5maWVsZERlZihjaGFubmVsKTtcbiAgICBjb25zdCBjb25maWcgPSBtb2RlbC5jb25maWc7XG5cbiAgICBjb25zdCBzcGVjaWZpZWRWYWx1ZSA9IHNwZWNpZmllZFNjYWxlW3Byb3BlcnR5XTtcbiAgICBjb25zdCBzVHlwZSA9IG1lcmdlZFNjYWxlQ21wdC5nZXQoJ3R5cGUnKTtcblxuICAgIGNvbnN0IHN1cHBvcnRlZEJ5U2NhbGVUeXBlID0gc2NhbGVUeXBlU3VwcG9ydFByb3BlcnR5KHNUeXBlLCBwcm9wZXJ0eSk7XG4gICAgY29uc3QgY2hhbm5lbEluY29tcGF0YWJpbGl0eSA9IGNoYW5uZWxTY2FsZVByb3BlcnR5SW5jb21wYXRhYmlsaXR5KGNoYW5uZWwsIHByb3BlcnR5KTtcblxuICAgIGlmIChzcGVjaWZpZWRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBhIHNwZWNpZmllZCB2YWx1ZSwgY2hlY2sgaWYgaXQgaXMgY29tcGF0aWJsZSB3aXRoIHNjYWxlIHR5cGUgYW5kIGNoYW5uZWxcbiAgICAgIGlmICghc3VwcG9ydGVkQnlTY2FsZVR5cGUpIHtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2Uuc2NhbGVQcm9wZXJ0eU5vdFdvcmtXaXRoU2NhbGVUeXBlKHNUeXBlLCBwcm9wZXJ0eSwgY2hhbm5lbCkpO1xuICAgICAgfSBlbHNlIGlmIChjaGFubmVsSW5jb21wYXRhYmlsaXR5KSB7IC8vIGNoYW5uZWxcbiAgICAgICAgbG9nLndhcm4oY2hhbm5lbEluY29tcGF0YWJpbGl0eSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdXBwb3J0ZWRCeVNjYWxlVHlwZSAmJiBjaGFubmVsSW5jb21wYXRhYmlsaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChzcGVjaWZpZWRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIGNvcHlLZXlGcm9tT2JqZWN0IGVuc3VyZSB0eXBlIHNhZmV0eVxuICAgICAgICBsb2NhbFNjYWxlQ21wdC5jb3B5S2V5RnJvbU9iamVjdChwcm9wZXJ0eSwgc3BlY2lmaWVkU2NhbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXREZWZhdWx0VmFsdWUoXG4gICAgICAgICAgcHJvcGVydHksIGNoYW5uZWwsIGZpZWxkRGVmLFxuICAgICAgICAgIG1lcmdlZFNjYWxlQ21wdC5nZXQoJ3R5cGUnKSxcbiAgICAgICAgICBtZXJnZWRTY2FsZUNtcHQuZ2V0KCdwYWRkaW5nJyksXG4gICAgICAgICAgbWVyZ2VkU2NhbGVDbXB0LmdldCgncGFkZGluZ0lubmVyJyksXG4gICAgICAgICAgc3BlY2lmaWVkU2NhbGUuZG9tYWluLFxuICAgICAgICAgIG1vZGVsLm1hcmtEZWYsIGNvbmZpZ1xuICAgICAgICApO1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGxvY2FsU2NhbGVDbXB0LnNldChwcm9wZXJ0eSwgdmFsdWUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5cbi8vIE5vdGU6IFRoaXMgbWV0aG9kIGlzIHVzZWQgaW4gVm95YWdlci5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VmFsdWUoXG4gIHByb3BlcnR5OiBrZXlvZiBTY2FsZSwgY2hhbm5lbDogQ2hhbm5lbCwgZmllbGREZWY6IFNjYWxlRmllbGREZWY8c3RyaW5nPixcbiAgc2NhbGVUeXBlOiBTY2FsZVR5cGUsIHNjYWxlUGFkZGluZzogbnVtYmVyLCBzY2FsZVBhZGRpbmdJbm5lcjogbnVtYmVyLFxuICBzcGVjaWZpZWREb21haW46IFNjYWxlWydkb21haW4nXSwgbWFya0RlZjogTWFya0RlZiwgY29uZmlnOiBDb25maWcpIHtcbiAgY29uc3Qgc2NhbGVDb25maWcgPSBjb25maWcuc2NhbGU7XG5cbiAgLy8gSWYgd2UgaGF2ZSBkZWZhdWx0IHJ1bGUtYmFzZSwgZGV0ZXJtaW5lIGRlZmF1bHQgdmFsdWUgZmlyc3RcbiAgc3dpdGNoIChwcm9wZXJ0eSkge1xuICAgIGNhc2UgJ25pY2UnOlxuICAgICAgcmV0dXJuIG5pY2Uoc2NhbGVUeXBlLCBjaGFubmVsLCBmaWVsZERlZik7XG4gICAgY2FzZSAncGFkZGluZyc6XG4gICAgICByZXR1cm4gcGFkZGluZyhjaGFubmVsLCBzY2FsZVR5cGUsIHNjYWxlQ29uZmlnLCBmaWVsZERlZiwgbWFya0RlZiwgY29uZmlnLmJhcik7XG4gICAgY2FzZSAncGFkZGluZ0lubmVyJzpcbiAgICAgIHJldHVybiBwYWRkaW5nSW5uZXIoc2NhbGVQYWRkaW5nLCBjaGFubmVsLCBzY2FsZUNvbmZpZyk7XG4gICAgY2FzZSAncGFkZGluZ091dGVyJzpcbiAgICAgIHJldHVybiBwYWRkaW5nT3V0ZXIoc2NhbGVQYWRkaW5nLCBjaGFubmVsLCBzY2FsZVR5cGUsIHNjYWxlUGFkZGluZ0lubmVyLCBzY2FsZUNvbmZpZyk7XG4gICAgY2FzZSAncmV2ZXJzZSc6XG4gICAgICByZXR1cm4gcmV2ZXJzZShzY2FsZVR5cGUsIGZpZWxkRGVmLnNvcnQpO1xuICAgIGNhc2UgJ3plcm8nOlxuICAgICAgcmV0dXJuIHplcm8oY2hhbm5lbCwgZmllbGREZWYsIHNwZWNpZmllZERvbWFpbiwgbWFya0RlZik7XG4gIH1cbiAgLy8gT3RoZXJ3aXNlLCB1c2Ugc2NhbGUgY29uZmlnXG4gIHJldHVybiBzY2FsZUNvbmZpZ1twcm9wZXJ0eV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU5vblVuaXRTY2FsZVByb3BlcnR5KG1vZGVsOiBNb2RlbCwgcHJvcGVydHk6IGtleW9mIChTY2FsZSB8IFNjYWxlQ29tcG9uZW50UHJvcHMpKSB7XG4gIGNvbnN0IGxvY2FsU2NhbGVDb21wb25lbnRzOiBTY2FsZUNvbXBvbmVudEluZGV4ID0gbW9kZWwuY29tcG9uZW50LnNjYWxlcztcblxuICBmb3IgKGNvbnN0IGNoaWxkIG9mIG1vZGVsLmNoaWxkcmVuKSB7XG4gICAgaWYgKHByb3BlcnR5ID09PSAncmFuZ2UnKSB7XG4gICAgICBwYXJzZVNjYWxlUmFuZ2UoY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZVNjYWxlUHJvcGVydHkoY2hpbGQsIHByb3BlcnR5KTtcbiAgICB9XG4gIH1cblxuICBrZXlzKGxvY2FsU2NhbGVDb21wb25lbnRzKS5mb3JFYWNoKChjaGFubmVsOiBTY2FsZUNoYW5uZWwpID0+IHtcbiAgICBsZXQgdmFsdWVXaXRoRXhwbGljaXQ6IEV4cGxpY2l0PGFueT47XG5cbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIG1vZGVsLmNoaWxkcmVuKSB7XG4gICAgICBjb25zdCBjaGlsZENvbXBvbmVudCA9IGNoaWxkLmNvbXBvbmVudC5zY2FsZXNbY2hhbm5lbF07XG4gICAgICBpZiAoY2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgY29uc3QgY2hpbGRWYWx1ZVdpdGhFeHBsaWNpdCA9IGNoaWxkQ29tcG9uZW50LmdldFdpdGhFeHBsaWNpdChwcm9wZXJ0eSk7XG4gICAgICAgIHZhbHVlV2l0aEV4cGxpY2l0ID0gbWVyZ2VWYWx1ZXNXaXRoRXhwbGljaXQ8VmdTY2FsZSwgYW55PihcbiAgICAgICAgICB2YWx1ZVdpdGhFeHBsaWNpdCwgY2hpbGRWYWx1ZVdpdGhFeHBsaWNpdCxcbiAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICAnc2NhbGUnLFxuICAgICAgICAgIHRpZUJyZWFrQnlDb21wYXJpbmc8VmdTY2FsZSwgYW55PigodjEsIHYyKSA9PiB7XG4gICAgICAgICAgICBzd2l0Y2ggKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIGNhc2UgJ3JhbmdlJzpcbiAgICAgICAgICAgICAgICAvLyBGb3IgcmFuZ2Ugc3RlcCwgcHJlZmVyIGxhcmdlciBzdGVwXG4gICAgICAgICAgICAgICAgaWYgKHYxLnN0ZXAgJiYgdjIuc3RlcCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHYxLnN0ZXAgLSB2Mi5zdGVwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgICAgLy8gVE9ETzogcHJlY2VkZW5jZSBydWxlIGZvciBvdGhlciBwcm9wZXJ0aWVzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBsb2NhbFNjYWxlQ29tcG9uZW50c1tjaGFubmVsXS5zZXRXaXRoRXhwbGljaXQocHJvcGVydHksIHZhbHVlV2l0aEV4cGxpY2l0KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuaWNlKHNjYWxlVHlwZTogU2NhbGVUeXBlLCBjaGFubmVsOiBDaGFubmVsLCBmaWVsZERlZjogRmllbGREZWY8c3RyaW5nPik6IGJvb2xlYW4gfCBOaWNlVGltZSB7XG4gIGlmIChmaWVsZERlZi5iaW4gfHwgdXRpbC5jb250YWlucyhbU2NhbGVUeXBlLlRJTUUsIFNjYWxlVHlwZS5VVENdLCBzY2FsZVR5cGUpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gdXRpbC5jb250YWlucyhbWCwgWV0sIGNoYW5uZWwpOyAvLyByZXR1cm4gdHJ1ZSBmb3IgcXVhbnRpdGF0aXZlIFgvWSB1bmxlc3MgYmlubmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWRkaW5nKGNoYW5uZWw6IENoYW5uZWwsIHNjYWxlVHlwZTogU2NhbGVUeXBlLCBzY2FsZUNvbmZpZzogU2NhbGVDb25maWcsIGZpZWxkRGVmOiBGaWVsZERlZjxzdHJpbmc+LCBtYXJrRGVmOiBNYXJrRGVmLCBiYXJDb25maWc6IEJhckNvbmZpZykge1xuICBpZiAodXRpbC5jb250YWlucyhbWCwgWV0sIGNoYW5uZWwpKSB7XG4gICAgaWYgKGlzQ29udGludW91c1RvQ29udGludW91cyhzY2FsZVR5cGUpKSB7XG4gICAgICBpZiAoc2NhbGVDb25maWcuY29udGludW91c1BhZGRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc2NhbGVDb25maWcuY29udGludW91c1BhZGRpbmc7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHt0eXBlLCBvcmllbnR9ID0gbWFya0RlZjtcbiAgICAgIGlmICh0eXBlID09PSAnYmFyJyAmJiAhZmllbGREZWYuYmluKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAob3JpZW50ID09PSAndmVydGljYWwnICYmIGNoYW5uZWwgPT09ICd4JykgfHxcbiAgICAgICAgICAob3JpZW50ID09PSAnaG9yaXpvbnRhbCcgJiYgY2hhbm5lbCA9PT0gJ3knKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gYmFyQ29uZmlnLmNvbnRpbnVvdXNCYW5kU2l6ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzY2FsZVR5cGUgPT09IFNjYWxlVHlwZS5QT0lOVCkge1xuICAgICAgcmV0dXJuIHNjYWxlQ29uZmlnLnBvaW50UGFkZGluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhZGRpbmdJbm5lcihwYWRkaW5nVmFsdWU6IG51bWJlciwgY2hhbm5lbDogQ2hhbm5lbCwgc2NhbGVDb25maWc6IFNjYWxlQ29uZmlnKSB7XG4gIGlmIChwYWRkaW5nVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIElmIHVzZXIgaGFzIGFscmVhZHkgbWFudWFsbHkgc3BlY2lmaWVkIFwicGFkZGluZ1wiLCBubyBuZWVkIHRvIGFkZCBkZWZhdWx0IHBhZGRpbmdJbm5lci5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHV0aWwuY29udGFpbnMoW1gsIFldLCBjaGFubmVsKSkge1xuICAgIC8vIFBhZGRpbmcgaXMgb25seSBzZXQgZm9yIFggYW5kIFkgYnkgZGVmYXVsdC5cbiAgICAvLyBCYXNpY2FsbHkgaXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIGFkZCBwYWRkaW5nIGZvciBjb2xvciBhbmQgc2l6ZS5cblxuICAgIC8vIHBhZGRpbmdPdXRlciB3b3VsZCBvbmx5IGJlIGNhbGxlZCBpZiBpdCdzIGEgYmFuZCBzY2FsZSwganVzdCByZXR1cm4gdGhlIGRlZmF1bHQgZm9yIGJhbmRTY2FsZS5cbiAgICByZXR1cm4gc2NhbGVDb25maWcuYmFuZFBhZGRpbmdJbm5lcjtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFkZGluZ091dGVyKHBhZGRpbmdWYWx1ZTogbnVtYmVyLCBjaGFubmVsOiBDaGFubmVsLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSwgcGFkZGluZ0lubmVyVmFsdWU6IG51bWJlciwgc2NhbGVDb25maWc6IFNjYWxlQ29uZmlnKSB7XG4gIGlmIChwYWRkaW5nVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIElmIHVzZXIgaGFzIGFscmVhZHkgbWFudWFsbHkgc3BlY2lmaWVkIFwicGFkZGluZ1wiLCBubyBuZWVkIHRvIGFkZCBkZWZhdWx0IHBhZGRpbmdPdXRlci5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKHV0aWwuY29udGFpbnMoW1gsIFldLCBjaGFubmVsKSkge1xuICAgIC8vIFBhZGRpbmcgaXMgb25seSBzZXQgZm9yIFggYW5kIFkgYnkgZGVmYXVsdC5cbiAgICAvLyBCYXNpY2FsbHkgaXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIGFkZCBwYWRkaW5nIGZvciBjb2xvciBhbmQgc2l6ZS5cbiAgICBpZiAoc2NhbGVUeXBlID09PSBTY2FsZVR5cGUuQkFORCkge1xuICAgICAgaWYgKHNjYWxlQ29uZmlnLmJhbmRQYWRkaW5nT3V0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gc2NhbGVDb25maWcuYmFuZFBhZGRpbmdPdXRlcjtcbiAgICAgIH1cbiAgICAgIC8qIEJ5IGRlZmF1bHQsIHBhZGRpbmdPdXRlciBpcyBwYWRkaW5nSW5uZXIgLyAyLiBUaGUgcmVhc29uIGlzIHRoYXRcbiAgICAgICAgICBzaXplICh3aWR0aC9oZWlnaHQpID0gc3RlcCAqIChjYXJkaW5hbGl0eSAtIHBhZGRpbmdJbm5lciArIDIgKiBwYWRkaW5nT3V0ZXIpLlxuICAgICAgICAgIGFuZCB3ZSB3YW50IHRoZSB3aWR0aC9oZWlnaHQgdG8gYmUgaW50ZWdlciBieSBkZWZhdWx0LlxuICAgICAgICAgIE5vdGUgdGhhdCBzdGVwIChieSBkZWZhdWx0KSBhbmQgY2FyZGluYWxpdHkgYXJlIGludGVnZXJzLikgKi9cbiAgICAgIHJldHVybiBwYWRkaW5nSW5uZXJWYWx1ZSAvIDI7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXZlcnNlKHNjYWxlVHlwZTogU2NhbGVUeXBlLCBzb3J0OiBTb3J0T3JkZXIgfCBFbmNvZGluZ1NvcnRGaWVsZDxzdHJpbmc+IHwgc3RyaW5nW10pIHtcbiAgaWYgKGhhc0NvbnRpbnVvdXNEb21haW4oc2NhbGVUeXBlKSAmJiBzb3J0ID09PSAnZGVzY2VuZGluZycpIHtcbiAgICAvLyBGb3IgY29udGludW91cyBkb21haW4gc2NhbGVzLCBWZWdhIGRvZXMgbm90IHN1cHBvcnQgZG9tYWluIHNvcnQuXG4gICAgLy8gVGh1cywgd2UgcmV2ZXJzZSByYW5nZSBpbnN0ZWFkIGlmIHNvcnQgaXMgZGVzY2VuZGluZ1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB6ZXJvKGNoYW5uZWw6IENoYW5uZWwsIGZpZWxkRGVmOiBGaWVsZERlZjxzdHJpbmc+LCBzcGVjaWZpZWRTY2FsZTogRG9tYWluLCBtYXJrRGVmOiBNYXJrRGVmKSB7XG5cbiAgLy8gSWYgdXNlcnMgZXhwbGljaXRseSBwcm92aWRlIGEgZG9tYWluIHJhbmdlLCB3ZSBzaG91bGQgbm90IGF1Z21lbnQgemVybyBhcyB0aGF0IHdpbGwgYmUgdW5leHBlY3RlZC5cbiAgY29uc3QgaGFzQ3VzdG9tRG9tYWluID0gISFzcGVjaWZpZWRTY2FsZSAmJiBzcGVjaWZpZWRTY2FsZSAhPT0gJ3VuYWdncmVnYXRlZCc7XG4gIGlmIChoYXNDdXN0b21Eb21haW4pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBJZiB0aGVyZSBpcyBubyBjdXN0b20gZG9tYWluLCByZXR1cm4gdHJ1ZSBvbmx5IGZvciB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXG4gIC8vIDEpIHVzaW5nIHF1YW50aXRhdGl2ZSBmaWVsZCB3aXRoIHNpemVcbiAgLy8gV2hpbGUgdGhpcyBjYW4gYmUgZWl0aGVyIHJhdGlvIG9yIGludGVydmFsIGZpZWxkcywgb3VyIGFzc3VtcHRpb24gaXMgdGhhdFxuICAvLyByYXRpbyBhcmUgbW9yZSBjb21tb24uXG4gIGlmIChjaGFubmVsID09PSAnc2l6ZScgJiYgZmllbGREZWYudHlwZSA9PT0gJ3F1YW50aXRhdGl2ZScpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIDIpIG5vbi1iaW5uZWQsIHF1YW50aXRhdGl2ZSB4LXNjYWxlIG9yIHktc2NhbGVcbiAgLy8gKEZvciBiaW5uaW5nLCB3ZSBzaG91bGQgbm90IGluY2x1ZGUgemVybyBieSBkZWZhdWx0IGJlY2F1c2UgYmlubmluZyBhcmUgY2FsY3VsYXRlZCB3aXRob3V0IHplcm8uKVxuICBpZiAoIWZpZWxkRGVmLmJpbiAmJiB1dGlsLmNvbnRhaW5zKFtYLCBZXSwgY2hhbm5lbCkpIHtcbiAgICBjb25zdCB7b3JpZW50LCB0eXBlfSA9IG1hcmtEZWY7XG4gICAgaWYgKGNvbnRhaW5zKFsnYmFyJywgJ2FyZWEnLCAnbGluZScsICd0cmFpbCddLCB0eXBlKSkge1xuICAgICAgaWYgKFxuICAgICAgICAob3JpZW50ID09PSAnaG9yaXpvbnRhbCcgJiYgY2hhbm5lbCA9PT0gJ3knKSB8fFxuICAgICAgICAob3JpZW50ID09PSAndmVydGljYWwnICYmIGNoYW5uZWwgPT09ICd4JylcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl19","import { isColorChannel, isScaleChannel, rangeType } from '../../channel';\nimport * as log from '../../log';\nimport { channelSupportScaleType, scaleTypeSupportDataType } from '../../scale';\nimport * as util from '../../util';\n/**\n * Determine if there is a specified scale type and if it is appropriate,\n * or determine default type if type is unspecified or inappropriate.\n */\n// NOTE: CompassQL uses this method.\nexport function scaleType(specifiedType, channel, fieldDef, mark, scaleConfig) {\n    var defaultScaleType = defaultType(channel, fieldDef, mark, scaleConfig);\n    if (!isScaleChannel(channel)) {\n        // There is no scale for these channels\n        return null;\n    }\n    if (specifiedType !== undefined) {\n        // Check if explicitly specified scale type is supported by the channel\n        if (!channelSupportScaleType(channel, specifiedType)) {\n            log.warn(log.message.scaleTypeNotWorkWithChannel(channel, specifiedType, defaultScaleType));\n            return defaultScaleType;\n        }\n        // Check if explicitly specified scale type is supported by the data type\n        if (!scaleTypeSupportDataType(specifiedType, fieldDef.type, fieldDef.bin)) {\n            log.warn(log.message.scaleTypeNotWorkWithFieldDef(specifiedType, defaultScaleType));\n            return defaultScaleType;\n        }\n        return specifiedType;\n    }\n    return defaultScaleType;\n}\n/**\n * Determine appropriate default scale type.\n */\n// NOTE: Voyager uses this method.\nfunction defaultType(channel, fieldDef, mark, scaleConfig) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n            if (isColorChannel(channel) || rangeType(channel) === 'discrete') {\n                if (channel === 'shape' && fieldDef.type === 'ordinal') {\n                    log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));\n                }\n                return 'ordinal';\n            }\n            if (util.contains(['x', 'y'], channel)) {\n                if (util.contains(['rect', 'bar', 'rule'], mark)) {\n                    // The rect/bar mark should fit into a band.\n                    // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\n                    return 'band';\n                }\n                if (mark === 'bar') {\n                    return 'band';\n                }\n            }\n            // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\n            return 'point';\n        case 'temporal':\n            if (isColorChannel(channel)) {\n                return 'sequential';\n            }\n            else if (rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            return 'time';\n        case 'quantitative':\n            if (isColorChannel(channel)) {\n                if (fieldDef.bin) {\n                    return 'bin-ordinal';\n                }\n                // Use `sequential` as the default color scale for continuous data\n                // since it supports both array range and scheme range.\n                return 'sequential';\n            }\n            else if (rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            // x and y use a linear scale because selections don't work with bin scales.\n            // Binned scales apply discretization but pan/zoom apply transformations to a [min, max] extent domain.\n            if (fieldDef.bin && channel !== 'x' && channel !== 'y') {\n                return 'bin-linear';\n            }\n            return 'linear';\n        case 'latitude':\n        case 'longitude':\n        case 'geojson':\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach this */\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n//# sourceMappingURL=data:application/json;base64,","import { SCALE_CHANNELS, SHAPE, X, Y } from '../../channel';\nimport { getFieldDef, hasConditionalFieldDef, isFieldDef } from '../../fielddef';\nimport { GEOSHAPE } from '../../mark';\nimport { NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES, scaleCompatible, scaleTypePrecedence, } from '../../scale';\nimport { GEOJSON } from '../../type';\nimport { keys } from '../../util';\nimport { isUnitModel } from '../model';\nimport { defaultScaleResolve } from '../resolve';\nimport { mergeValuesWithExplicit, tieBreakByComparing } from '../split';\nimport { ScaleComponent } from './component';\nimport { parseScaleDomain } from './domain';\nimport { parseScaleProperty } from './properties';\nimport { parseScaleRange } from './range';\nimport { scaleType } from './type';\nexport function parseScale(model) {\n    parseScaleCore(model);\n    parseScaleDomain(model);\n    for (var _i = 0, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1 = NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES; _i < NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1.length; _i++) {\n        var prop = NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES_1[_i];\n        parseScaleProperty(model, prop);\n    }\n    // range depends on zero\n    parseScaleRange(model);\n}\nexport function parseScaleCore(model) {\n    if (isUnitModel(model)) {\n        model.component.scales = parseUnitScaleCore(model);\n    }\n    else {\n        model.component.scales = parseNonUnitScaleCore(model);\n    }\n}\n/**\n * Parse scales for all channels of a model.\n */\nfunction parseUnitScaleCore(model) {\n    var encoding = model.encoding, config = model.config, mark = model.mark;\n    return SCALE_CHANNELS.reduce(function (scaleComponents, channel) {\n        var fieldDef;\n        var specifiedScale = undefined;\n        var channelDef = encoding[channel];\n        // Don't generate scale for shape of geoshape\n        if (isFieldDef(channelDef) && mark === GEOSHAPE &&\n            channel === SHAPE && channelDef.type === GEOJSON) {\n            return scaleComponents;\n        }\n        if (isFieldDef(channelDef)) {\n            fieldDef = channelDef;\n            specifiedScale = channelDef.scale;\n        }\n        else if (hasConditionalFieldDef(channelDef)) {\n            fieldDef = channelDef.condition;\n            specifiedScale = channelDef.condition['scale']; // We use ['scale'] since we know that channel here has scale for sure\n        }\n        else if (channel === X) {\n            fieldDef = getFieldDef(encoding.x2);\n        }\n        else if (channel === Y) {\n            fieldDef = getFieldDef(encoding.y2);\n        }\n        if (fieldDef && specifiedScale !== null && specifiedScale !== false) {\n            specifiedScale = specifiedScale || {};\n            var specifiedScaleType = specifiedScale.type;\n            var sType = scaleType(specifiedScale.type, channel, fieldDef, mark, config.scale);\n            scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), { value: sType, explicit: specifiedScaleType === sType });\n        }\n        return scaleComponents;\n    }, {});\n}\nvar scaleTypeTieBreaker = tieBreakByComparing(function (st1, st2) { return (scaleTypePrecedence(st1) - scaleTypePrecedence(st2)); });\nfunction parseNonUnitScaleCore(model) {\n    var scaleComponents = model.component.scales = {};\n    var scaleTypeWithExplicitIndex = {};\n    var resolve = model.component.resolve;\n    var _loop_1 = function (child) {\n        parseScaleCore(child);\n        // Instead of always merging right away -- check if it is compatible to merge first!\n        keys(child.component.scales).forEach(function (channel) {\n            // if resolve is undefined, set default first\n            resolve.scale[channel] = resolve.scale[channel] || defaultScaleResolve(channel, model);\n            if (resolve.scale[channel] === 'shared') {\n                var explicitScaleType = scaleTypeWithExplicitIndex[channel];\n                var childScaleType = child.component.scales[channel].getWithExplicit('type');\n                if (explicitScaleType) {\n                    if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {\n                        // merge scale component if type are compatible\n                        scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);\n                    }\n                    else {\n                        // Otherwise, update conflicting channel to be independent\n                        resolve.scale[channel] = 'independent';\n                        // Remove from the index so they don't get merged\n                        delete scaleTypeWithExplicitIndex[channel];\n                    }\n                }\n                else {\n                    scaleTypeWithExplicitIndex[channel] = childScaleType;\n                }\n            }\n        });\n    };\n    // Parse each child scale and determine if a particular channel can be merged.\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        _loop_1(child);\n    }\n    // Merge each channel listed in the index\n    keys(scaleTypeWithExplicitIndex).forEach(function (channel) {\n        // Create new merged scale component\n        var name = model.scaleName(channel, true);\n        var typeWithExplicit = scaleTypeWithExplicitIndex[channel];\n        scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit);\n        // rename each child and mark them as merged\n        for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            var childScale = child.component.scales[channel];\n            if (childScale) {\n                child.renameScale(childScale.get('name'), name);\n                childScale.merged = true;\n            }\n        }\n    });\n    return scaleComponents;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isString } from 'vega-util';\nimport { isChannel, isScaleChannel } from '../channel';\nimport { forEach, reduce } from '../encoding';\nimport { getFieldDef, vgField } from '../fielddef';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { isFacetSpec } from '../spec';\nimport { extractTitleConfig } from '../title';\nimport { normalizeTransform } from '../transform';\nimport { contains, keys, varName } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { assembleAxes } from './axis/assemble';\nimport { getHeaderGroups, getTitleGroup, HEADER_CHANNELS } from './layout/header';\nimport { sizeExpr } from './layoutsize/assemble';\nimport { assembleLegends } from './legend/assemble';\nimport { parseLegend } from './legend/parse';\nimport { assembleProjections } from './projection/assemble';\nimport { parseProjection } from './projection/parse';\nimport { assembleScales } from './scale/assemble';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { parseScale } from './scale/parse';\nimport { Split } from './split';\nvar NameMap = /** @class */ (function () {\n    function NameMap() {\n        this.nameMap = {};\n    }\n    NameMap.prototype.rename = function (oldName, newName) {\n        this.nameMap[oldName] = newName;\n    };\n    NameMap.prototype.has = function (name) {\n        return this.nameMap[name] !== undefined;\n    };\n    NameMap.prototype.get = function (name) {\n        // If the name appears in the _nameMap, we need to read its new name.\n        // We have to loop over the dict just in case the new name also gets renamed.\n        while (this.nameMap[name] && name !== this.nameMap[name]) {\n            name = this.nameMap[name];\n        }\n        return name;\n    };\n    return NameMap;\n}());\nexport { NameMap };\n/*\n  We use type guards instead of `instanceof` as `instanceof` makes\n  different parts of the compiler depend on the actual implementation of\n  the model classes, which in turn depend on different parts of the compiler.\n  Thus, `instanceof` leads to circular dependency problems.\n\n  On the other hand, type guards only make different parts of the compiler\n  depend on the type of the model classes, but not the actual implementation.\n*/\nexport function isUnitModel(model) {\n    return model && model.type === 'unit';\n}\nexport function isFacetModel(model) {\n    return model && model.type === 'facet';\n}\nexport function isRepeatModel(model) {\n    return model && model.type === 'repeat';\n}\nexport function isConcatModel(model) {\n    return model && model.type === 'concat';\n}\nexport function isLayerModel(model) {\n    return model && model.type === 'layer';\n}\nvar Model = /** @class */ (function () {\n    function Model(spec, parent, parentGivenName, config, repeater, resolve) {\n        var _this = this;\n        this.children = [];\n        /**\n         * Corrects the data references in marks after assemble.\n         */\n        this.correctDataNames = function (mark) {\n            // TODO: make this correct\n            // for normal data references\n            if (mark.from && mark.from.data) {\n                mark.from.data = _this.lookupDataSource(mark.from.data);\n            }\n            // for access to facet data\n            if (mark.from && mark.from.facet && mark.from.facet.data) {\n                mark.from.facet.data = _this.lookupDataSource(mark.from.facet.data);\n            }\n            return mark;\n        };\n        this.parent = parent;\n        this.config = config;\n        this.repeater = repeater;\n        // If name is not provided, always use parent's givenName to avoid name conflicts.\n        this.name = spec.name || parentGivenName;\n        this.title = isString(spec.title) ? { text: spec.title } : spec.title;\n        // Shared name maps\n        this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n        this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n        this.layoutSizeNameMap = parent ? parent.layoutSizeNameMap : new NameMap();\n        this.data = spec.data;\n        this.description = spec.description;\n        this.transforms = normalizeTransform(spec.transform || []);\n        this.component = {\n            data: {\n                sources: parent ? parent.component.data.sources : {},\n                outputNodes: parent ? parent.component.data.outputNodes : {},\n                outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n                // data is faceted if the spec is a facet spec or the parent has faceted data and no data is defined\n                isFaceted: isFacetSpec(spec) || (parent && parent.component.data.isFaceted && !spec.data)\n            },\n            layoutSize: new Split(),\n            layoutHeaders: { row: {}, column: {} },\n            mark: null,\n            resolve: tslib_1.__assign({ scale: {}, axis: {}, legend: {} }, (resolve || {})),\n            selection: null,\n            scales: null,\n            projection: null,\n            axes: {},\n            legends: {},\n        };\n    }\n    Object.defineProperty(Model.prototype, \"width\", {\n        get: function () {\n            return this.getSizeSignalRef('width');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Model.prototype, \"height\", {\n        get: function () {\n            return this.getSizeSignalRef('height');\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Model.prototype.initSize = function (size) {\n        var width = size.width, height = size.height;\n        if (width) {\n            this.component.layoutSize.set('width', width, true);\n        }\n        if (height) {\n            this.component.layoutSize.set('height', height, true);\n        }\n    };\n    Model.prototype.parse = function () {\n        this.parseScale();\n        this.parseLayoutSize(); // depends on scale\n        this.renameTopLevelLayoutSize();\n        this.parseSelection();\n        this.parseProjection();\n        this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n        this.parseAxisAndHeader(); // depends on scale and layout size\n        this.parseLegend(); // depends on scale, markDef\n        this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n    };\n    Model.prototype.parseScale = function () {\n        parseScale(this);\n    };\n    Model.prototype.parseProjection = function () {\n        parseProjection(this);\n    };\n    /**\n     * Rename top-level spec's size to be just width / height, ignoring model name.\n     * This essentially merges the top-level spec's width/height signals with the width/height signals\n     * to help us reduce redundant signals declaration.\n     */\n    Model.prototype.renameTopLevelLayoutSize = function () {\n        if (this.getName('width') !== 'width') {\n            this.renameLayoutSize(this.getName('width'), 'width');\n        }\n        if (this.getName('height') !== 'height') {\n            this.renameLayoutSize(this.getName('height'), 'height');\n        }\n    };\n    Model.prototype.parseLegend = function () {\n        parseLegend(this);\n    };\n    Model.prototype.assembleGroupStyle = function () {\n        if (this.type === 'unit' || this.type === 'layer') {\n            return 'cell';\n        }\n        return undefined;\n    };\n    Model.prototype.assembleLayoutSize = function () {\n        if (this.type === 'unit' || this.type === 'layer') {\n            return {\n                width: this.getSizeSignalRef('width'),\n                height: this.getSizeSignalRef('height')\n            };\n        }\n        return undefined;\n    };\n    Model.prototype.assembleHeaderMarks = function () {\n        var layoutHeaders = this.component.layoutHeaders;\n        var headerMarks = [];\n        for (var _i = 0, HEADER_CHANNELS_1 = HEADER_CHANNELS; _i < HEADER_CHANNELS_1.length; _i++) {\n            var channel = HEADER_CHANNELS_1[_i];\n            if (layoutHeaders[channel].title) {\n                headerMarks.push(getTitleGroup(this, channel));\n            }\n        }\n        for (var _a = 0, HEADER_CHANNELS_2 = HEADER_CHANNELS; _a < HEADER_CHANNELS_2.length; _a++) {\n            var channel = HEADER_CHANNELS_2[_a];\n            headerMarks = headerMarks.concat(getHeaderGroups(this, channel));\n        }\n        return headerMarks;\n    };\n    Model.prototype.assembleAxes = function () {\n        return assembleAxes(this.component.axes, this.config);\n    };\n    Model.prototype.assembleLegends = function () {\n        return assembleLegends(this);\n    };\n    Model.prototype.assembleProjections = function () {\n        return assembleProjections(this);\n    };\n    Model.prototype.assembleTitle = function () {\n        var title = tslib_1.__assign({}, extractTitleConfig(this.config.title).nonMark, this.title);\n        if (title.text) {\n            if (!contains(['unit', 'layer'], this.type)) {\n                // As described in https://github.com/vega/vega-lite/issues/2875:\n                // Due to vega/vega#960 (comment), we only support title's anchor for unit and layered spec for now.\n                if (title.anchor && title.anchor !== 'start') {\n                    log.warn(log.message.cannotSetTitleAnchor(this.type));\n                }\n                title.anchor = 'start';\n            }\n            return keys(title).length > 0 ? title : undefined;\n        }\n        return undefined;\n    };\n    /**\n     * Assemble the mark group for this model.  We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n     */\n    Model.prototype.assembleGroup = function (signals) {\n        if (signals === void 0) { signals = []; }\n        var group = {};\n        signals = signals.concat(this.assembleSelectionSignals());\n        if (signals.length > 0) {\n            group.signals = signals;\n        }\n        var layout = this.assembleLayout();\n        if (layout) {\n            group.layout = layout;\n        }\n        group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());\n        // Only include scales if this spec is top-level or if parent is facet.\n        // (Otherwise, it will be merged with upper-level's scope.)\n        var scales = (!this.parent || isFacetModel(this.parent)) ? assembleScales(this) : [];\n        if (scales.length > 0) {\n            group.scales = scales;\n        }\n        var axes = this.assembleAxes();\n        if (axes.length > 0) {\n            group.axes = axes;\n        }\n        var legends = this.assembleLegends();\n        if (legends.length > 0) {\n            group.legends = legends;\n        }\n        return group;\n    };\n    Model.prototype.hasDescendantWithFieldOnChannel = function (channel) {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            if (isUnitModel(child)) {\n                if (child.channelHasField(channel)) {\n                    return true;\n                }\n            }\n            else {\n                if (child.hasDescendantWithFieldOnChannel(channel)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    Model.prototype.getName = function (text) {\n        return varName((this.name ? this.name + '_' : '') + text);\n    };\n    /**\n     * Request a data source name for the given data source type and mark that data source as required. This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n     */\n    Model.prototype.requestDataName = function (name) {\n        var fullName = this.getName(name);\n        // Increase ref count. This is critical because otherwise we won't create a data source.\n        // We also increase the ref counts on OutputNode.getSource() calls.\n        var refCounts = this.component.data.outputNodeRefCounts;\n        refCounts[fullName] = (refCounts[fullName] || 0) + 1;\n        return fullName;\n    };\n    Model.prototype.getSizeSignalRef = function (sizeType) {\n        if (isFacetModel(this.parent)) {\n            var channel = sizeType === 'width' ? 'x' : 'y';\n            var scaleComponent = this.component.scales[channel];\n            if (scaleComponent && !scaleComponent.merged) { // independent scale\n                var type = scaleComponent.get('type');\n                var range = scaleComponent.get('range');\n                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                    var scaleName = scaleComponent.get('name');\n                    var domain = assembleDomain(this, channel);\n                    var field = getFieldFromDomain(domain);\n                    if (field) {\n                        var fieldRef = vgField({ aggregate: 'distinct', field: field }, { expr: 'datum' });\n                        return {\n                            signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n                        };\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                        return null;\n                    }\n                }\n            }\n        }\n        return {\n            signal: this.layoutSizeNameMap.get(this.getName(sizeType))\n        };\n    };\n    /**\n     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n     */\n    Model.prototype.lookupDataSource = function (name) {\n        var node = this.component.data.outputNodes[name];\n        if (!node) {\n            // Name not found in map so let's just return what we got.\n            // This can happen if we already have the correct name.\n            return name;\n        }\n        return node.getSource();\n    };\n    Model.prototype.getSizeName = function (oldSizeName) {\n        return this.layoutSizeNameMap.get(oldSizeName);\n    };\n    Model.prototype.renameLayoutSize = function (oldName, newName) {\n        this.layoutSizeNameMap.rename(oldName, newName);\n    };\n    Model.prototype.renameScale = function (oldName, newName) {\n        this.scaleNameMap.rename(oldName, newName);\n    };\n    Model.prototype.renameProjection = function (oldName, newName) {\n        this.projectionNameMap.rename(oldName, newName);\n    };\n    /**\n     * @return scale name for a given channel after the scale has been parsed and named.\n     */\n    Model.prototype.scaleName = function (originalScaleName, parse) {\n        if (parse) {\n            // During the parse phase always return a value\n            // No need to refer to rename map because a scale can't be renamed\n            // before it has the original name.\n            return this.getName(originalScaleName);\n        }\n        // If there is a scale for the channel, it should either\n        // be in the scale component or exist in the name map\n        if (\n        // If there is a scale for the channel, there should be a local scale component for it\n        (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||\n            // in the scale name map (the scale get merged by its parent)\n            this.scaleNameMap.has(this.getName(originalScaleName))) {\n            return this.scaleNameMap.get(this.getName(originalScaleName));\n        }\n        return undefined;\n    };\n    /**\n     * @return projection name after the projection has been parsed and named.\n     */\n    Model.prototype.projectionName = function (parse) {\n        if (parse) {\n            // During the parse phase always return a value\n            // No need to refer to rename map because a projection can't be renamed\n            // before it has the original name.\n            return this.getName('projection');\n        }\n        if ((this.component.projection && !this.component.projection.merged) || this.projectionNameMap.has(this.getName('projection'))) {\n            return this.projectionNameMap.get(this.getName('projection'));\n        }\n        return undefined;\n    };\n    /**\n     * Traverse a model's hierarchy to get the scale component for a particular channel.\n     */\n    Model.prototype.getScaleComponent = function (channel) {\n        /* istanbul ignore next: This is warning for debugging test */\n        if (!this.component.scales) {\n            throw new Error('getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().');\n        }\n        var localScaleComponent = this.component.scales[channel];\n        if (localScaleComponent && !localScaleComponent.merged) {\n            return localScaleComponent;\n        }\n        return (this.parent ? this.parent.getScaleComponent(channel) : undefined);\n    };\n    /**\n     * Traverse a model's hierarchy to get a particular selection component.\n     */\n    Model.prototype.getSelectionComponent = function (variableName, origName) {\n        var sel = this.component.selection[variableName];\n        if (!sel && this.parent) {\n            sel = this.parent.getSelectionComponent(variableName, origName);\n        }\n        if (!sel) {\n            throw new Error(log.message.selectionNotFound(origName));\n        }\n        return sel;\n    };\n    return Model;\n}());\nexport { Model };\n/** Abstract class for UnitModel and FacetModel.  Both of which can contain fieldDefs as a part of its own specification. */\nvar ModelWithField = /** @class */ (function (_super) {\n    tslib_1.__extends(ModelWithField, _super);\n    function ModelWithField() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /** Get \"field\" reference for vega */\n    ModelWithField.prototype.vgField = function (channel, opt) {\n        if (opt === void 0) { opt = {}; }\n        var fieldDef = this.fieldDef(channel);\n        if (!fieldDef) {\n            return undefined;\n        }\n        return vgField(fieldDef, opt);\n    };\n    ModelWithField.prototype.reduceFieldDef = function (f, init, t) {\n        return reduce(this.getMapping(), function (acc, cd, c) {\n            var fieldDef = getFieldDef(cd);\n            if (fieldDef) {\n                return f(acc, fieldDef, c);\n            }\n            return acc;\n        }, init, t);\n    };\n    ModelWithField.prototype.forEachFieldDef = function (f, t) {\n        forEach(this.getMapping(), function (cd, c) {\n            var fieldDef = getFieldDef(cd);\n            if (fieldDef) {\n                f(fieldDef, c);\n            }\n        }, t);\n    };\n    return ModelWithField;\n}(Model));\nexport { ModelWithField };\n//# sourceMappingURL=data:application/json;base64,","import { stringValue } from 'vega-util';\nimport { X, Y } from '../../../channel';\nimport * as log from '../../../log';\nimport { hasContinuousDomain, isBinScale } from '../../../scale';\nimport { channelSignalName } from '../selection';\nvar scaleBindings = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'interval' && selCmpt.resolve === 'global' &&\n            selCmpt.bind && selCmpt.bind === 'scales';\n    },\n    parse: function (model, selDef, selCmpt) {\n        var bound = selCmpt.scales = [];\n        selCmpt.project.forEach(function (p) {\n            var channel = p.channel;\n            var scale = model.getScaleComponent(channel);\n            var scaleType = scale ? scale.get('type') : undefined;\n            if (!scale || !hasContinuousDomain(scaleType) || isBinScale(scaleType)) {\n                log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);\n                return;\n            }\n            scale.set('domainRaw', { signal: channelSignalName(selCmpt, channel, 'data') }, true);\n            bound.push(channel);\n            // Bind both x/y for diag plot of repeated views.\n            if (model.repeater && model.repeater.row === model.repeater.column) {\n                var scale2 = model.getScaleComponent(channel === X ? Y : X);\n                scale2.set('domainRaw', { signal: channelSignalName(selCmpt, channel, 'data') }, true);\n            }\n        });\n    },\n    topLevelSignals: function (model, selCmpt, signals) {\n        // Top-level signals are only needed when coordinating composed views.\n        if (!model.parent) {\n            return signals;\n        }\n        var channels = selCmpt.scales.filter(function (channel) {\n            return !(signals.filter(function (s) { return s.name === channelSignalName(selCmpt, channel, 'data'); }).length);\n        });\n        return signals.concat(channels.map(function (channel) {\n            return { name: channelSignalName(selCmpt, channel, 'data') };\n        }));\n    },\n    signals: function (model, selCmpt, signals) {\n        // Nested signals need only push to top-level signals when within composed views.\n        if (model.parent) {\n            selCmpt.scales.forEach(function (channel) {\n                var signal = signals.filter(function (s) { return s.name === channelSignalName(selCmpt, channel, 'data'); })[0];\n                signal.push = 'outer';\n                delete signal.value;\n                delete signal.update;\n            });\n        }\n        return signals;\n    }\n};\nexport default scaleBindings;\nexport function domain(model, channel) {\n    var scale = stringValue(model.scaleName(channel));\n    return \"domain(\" + scale + \")\";\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NhbGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvc2NhbGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFVLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMvQyxPQUFPLEtBQUssR0FBRyxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUMsbUJBQW1CLEVBQUUsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFL0QsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sY0FBYyxDQUFDO0FBSS9DLElBQU0sYUFBYSxHQUFxQjtJQUN0QyxHQUFHLEVBQUUsVUFBUyxPQUFPO1FBQ25CLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxRQUFRO1lBQ2hFLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7SUFDOUMsQ0FBQztJQUVELEtBQUssRUFBRSxVQUFTLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTztRQUNwQyxJQUFNLEtBQUssR0FBYyxPQUFPLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUU3QyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUM7WUFDaEMsSUFBTSxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUMxQixJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDL0MsSUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFFeEQsSUFBSSxD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QUFDO0lBQ3BELE9BQU8sWUFBVSxLQUFLLE1BQUcsQ0FBQztBQUM1QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHJpbmdWYWx1ZX0gZnJvbSAndmVnYS11dGlsJztcbmltcG9ydCB7Q2hhbm5lbCwgWCwgWX0gZnJvbSAnLi4vLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vLi4vbG9nJztcbmltcG9ydCB7aGFzQ29udGludW91c0RvbWFpbiwgaXNCaW5TY2FsZX0gZnJvbSAnLi4vLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uLy4uL3VuaXQnO1xuaW1wb3J0IHtjaGFubmVsU2lnbmFsTmFtZX0gZnJvbSAnLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7VHJhbnNmb3JtQ29tcGlsZXJ9IGZyb20gJy4vdHJhbnNmb3Jtcyc7XG5cblxuY29uc3Qgc2NhbGVCaW5kaW5nczpUcmFuc2Zvcm1Db21waWxlciA9IHtcbiAgaGFzOiBmdW5jdGlvbihzZWxDbXB0KSB7XG4gICAgcmV0dXJuIHNlbENtcHQudHlwZSA9PT0gJ2ludGVydmFsJyAmJiBzZWxDbXB0LnJlc29sdmUgPT09ICdnbG9iYWwnICYmXG4gICAgICBzZWxDbXB0LmJpbmQgJiYgc2VsQ21wdC5iaW5kID09PSAnc2NhbGVzJztcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24obW9kZWwsIHNlbERlZiwgc2VsQ21wdCkge1xuICAgIGNvbnN0IGJvdW5kOiBDaGFubmVsW10gPSBzZWxDbXB0LnNjYWxlcyA9IFtdO1xuXG4gICAgc2VsQ21wdC5wcm9qZWN0LmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgY29uc3QgY2hhbm5lbCA9IHAuY2hhbm5lbDtcbiAgICAgIGNvbnN0IHNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCk7XG4gICAgICBjb25zdCBzY2FsZVR5cGUgPSBzY2FsZSA/IHNjYWxlLmdldCgndHlwZScpIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoIXNjYWxlIHx8ICFoYXNDb250aW51b3VzRG9tYWluKHNjYWxlVHlwZSkgfHwgaXNCaW5TY2FsZShzY2FsZVR5cGUpKSB7XG4gICAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLlNDQUxFX0JJTkRJTkdTX0NPTlRJTlVPVVMpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHNjYWxlLnNldCgnZG9tYWluUmF3Jywge3NpZ25hbDogY2hhbm5lbFNpZ25hbE5hbWUoc2VsQ21wdCwgY2hhbm5lbCwgJ2RhdGEnKX0sIHRydWUpO1xuICAgICAgYm91bmQucHVzaChjaGFubmVsKTtcblxuICAgICAgLy8gQmluZCBib3RoIHgveSBmb3IgZGlhZyBwbG90IG9mIHJlcGVhdGVkIHZpZXdzLlxuICAgICAgaWYgKG1vZGVsLnJlcGVhdGVyICYmIG1vZGVsLnJlcGVhdGVyLnJvdyA9PT0gbW9kZWwucmVwZWF0ZXIuY29sdW1uKSB7XG4gICAgICAgIGNvbnN0IHNjYWxlMiA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwgPT09IFggPyBZIDogWCk7XG4gICAgICAgIHNjYWxlMi5zZXQoJ2RvbWFpblJhdycsIHtzaWduYWw6IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJyl9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICB0b3BMZXZlbFNpZ25hbHM6IGZ1bmN0aW9uKG1vZGVsLCBzZWxDbXB0LCBzaWduYWxzKSB7XG4gICAgLy8gVG9wLWxldmVsIHNpZ25hbHMgYXJlIG9ubHkgbmVlZGVkIHdoZW4gY29vcmRpbmF0aW5nIGNvbXBvc2VkIHZpZXdzLlxuICAgIGlmICghbW9kZWwucGFyZW50KSB7XG4gICAgICByZXR1cm4gc2lnbmFscztcbiAgICB9XG5cbiAgICBjb25zdCBjaGFubmVscyA9IHNlbENtcHQuc2NhbGVzLmZpbHRlcigoY2hhbm5lbCkgPT4ge1xuICAgICAgcmV0dXJuICEoc2lnbmFscy5maWx0ZXIocyA9PiBzLm5hbWUgPT09IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJykpLmxlbmd0aCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2lnbmFscy5jb25jYXQoY2hhbm5lbHMubWFwKChjaGFubmVsKSA9PiB7XG4gICAgICByZXR1cm4ge25hbWU6IGNoYW5uZWxTaWduYWxOYW1lKHNlbENtcHQsIGNoYW5uZWwsICdkYXRhJyl9O1xuICAgIH0pKTtcbiAgfSxcblxuICBzaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIC8vIE5lc3RlZCBzaWduYWxzIG5lZWQgb25seSBwdXNoIHRvIHRvcC1sZXZlbCBzaWduYWxzIHdoZW4gd2l0aGluIGNvbXBvc2VkIHZpZXdzLlxuICAgIGlmIChtb2RlbC5wYXJlbnQpIHtcbiAgICAgIHNlbENtcHQuc2NhbGVzLmZvckVhY2goY2hhbm5lbCA9PiB7XG4gICAgICAgIGNvbnN0IHNpZ25hbCA9IHNpZ25hbHMuZmlsdGVyKHMgPT4gcy5uYW1lID09PSBjaGFubmVsU2lnbmFsTmFtZShzZWxDbXB0LCBjaGFubmVsLCAnZGF0YScpKVswXTtcblxuICAgICAgICBzaWduYWwucHVzaCA9ICdvdXRlcic7XG4gICAgICAgIGRlbGV0ZSBzaWduYWwudmFsdWU7XG4gICAgICAgIGRlbGV0ZSBzaWduYWwudXBkYXRlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNpZ25hbHM7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNjYWxlQmluZGluZ3M7XG5cbmV4cG9ydCBmdW5jdGlvbiBkb21haW4obW9kZWw6IFVuaXRNb2RlbCwgY2hhbm5lbDogQ2hhbm5lbCkge1xuICBjb25zdCBzY2FsZSA9IHN0cmluZ1ZhbHVlKG1vZGVsLnNjYWxlTmFtZShjaGFubmVsKSk7XG4gIHJldHVybiBgZG9tYWluKCR7c2NhbGV9KWA7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { warn } from '../../log';\nimport { hasContinuousDomain, isBinScale } from '../../scale';\nimport { keys } from '../../util';\nimport { channelSignalName, positionalProjections, STORE, TUPLE, unitName, } from './selection';\nimport scales from './transforms/scales';\nexport var BRUSH = '_brush';\nexport var SCALE_TRIGGER = '_scale_trigger';\nvar interval = {\n    predicate: 'vlInterval',\n    scaleDomain: 'vlIntervalDomain',\n    signals: function (model, selCmpt) {\n        var name = selCmpt.name;\n        var hasScales = scales.has(selCmpt);\n        var signals = [];\n        var intervals = [];\n        var tupleTriggers = [];\n        var scaleTriggers = [];\n        if (selCmpt.translate && !hasScales) {\n            var filterExpr_1 = \"!event.item || event.item.mark.name !== \" + stringValue(name + BRUSH);\n            events(selCmpt, function (_, evt) {\n                var filters = evt.between[0].filter || (evt.between[0].filter = []);\n                if (filters.indexOf(filterExpr_1) < 0) {\n                    filters.push(filterExpr_1);\n                }\n            });\n        }\n        selCmpt.project.forEach(function (p) {\n            var channel = p.channel;\n            if (channel !== X && channel !== Y) {\n                warn('Interval selections only support x and y encoding channels.');\n                return;\n            }\n            var cs = channelSignals(model, selCmpt, channel);\n            var dname = channelSignalName(selCmpt, channel, 'data');\n            var vname = channelSignalName(selCmpt, channel, 'visual');\n            var scaleStr = stringValue(model.scaleName(channel));\n            var scaleType = model.getScaleComponent(channel).get('type');\n            var toNum = hasContinuousDomain(scaleType) ? '+' : '';\n            signals.push.apply(signals, cs);\n            tupleTriggers.push(dname);\n            intervals.push(\"{encoding: \" + stringValue(channel) + \", \" +\n                (\"field: \" + stringValue(p.field) + \", extent: \" + dname + \"}\"));\n            scaleTriggers.push({\n                scaleName: model.scaleName(channel),\n                expr: \"(!isArray(\" + dname + \") || \" +\n                    (\"(\" + toNum + \"invert(\" + scaleStr + \", \" + vname + \")[0] === \" + toNum + dname + \"[0] && \") +\n                    (toNum + \"invert(\" + scaleStr + \", \" + vname + \")[1] === \" + toNum + dname + \"[1]))\")\n            });\n        });\n        // Proxy scale reactions to ensure that an infinite loop doesn't occur\n        // when an interval selection filter touches the scale.\n        if (!hasScales) {\n            signals.push({\n                name: name + SCALE_TRIGGER,\n                update: scaleTriggers.map(function (t) { return t.expr; }).join(' && ') +\n                    (\" ? \" + (name + SCALE_TRIGGER) + \" : {}\")\n            });\n        }\n        // Only add an interval to the store if it has valid data extents. Data extents\n        // are set to null if pixel extents are equal to account for intervals over\n        // ordinal/nominal domains which, when inverted, will still produce a valid datum.\n        return signals.concat({\n            name: name + TUPLE,\n            on: [{\n                    events: tupleTriggers.map(function (t) { return ({ signal: t }); }),\n                    update: tupleTriggers.join(' && ') +\n                        (\" ? {unit: \" + unitName(model) + \", intervals: [\" + intervals.join(', ') + \"]} : null\")\n                }]\n        });\n    },\n    modifyExpr: function (model, selCmpt) {\n        var tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' +\n            (selCmpt.resolve === 'global' ? 'true' : \"{unit: \" + unitName(model) + \"}\");\n    },\n    marks: function (model, selCmpt, marks) {\n        var name = selCmpt.name;\n        var _a = positionalProjections(selCmpt), xi = _a.xi, yi = _a.yi;\n        var store = \"data(\" + stringValue(selCmpt.name + STORE) + \")\";\n        // Do not add a brush if we're binding to scales.\n        if (scales.has(selCmpt)) {\n            return marks;\n        }\n        var update = {\n            x: xi !== null ? { signal: name + \"_x[0]\" } : { value: 0 },\n            y: yi !== null ? { signal: name + \"_y[0]\" } : { value: 0 },\n            x2: xi !== null ? { signal: name + \"_x[1]\" } : { field: { group: 'width' } },\n            y2: yi !== null ? { signal: name + \"_y[1]\" } : { field: { group: 'height' } }\n        };\n        // If the selection is resolved to global, only a single interval is in\n        // the store. Wrap brush mark's encodings with a production rule to test\n        // this based on the `unit` property. Hide the brush mark if it corresponds\n        // to a unit different from the one in the store.\n        if (selCmpt.resolve === 'global') {\n            for (var _i = 0, _b = keys(update); _i < _b.length; _i++) {\n                var key = _b[_i];\n                update[key] = [tslib_1.__assign({ test: store + \".length && \" + store + \"[0].unit === \" + unitName(model) }, update[key]), { value: 0 }];\n            }\n        }\n        // Two brush marks ensure that fill colors and other aesthetic choices do\n        // not interefere with the core marks, but that the brushed region can still\n        // be interacted with (e.g., dragging it around).\n        var _c = selCmpt.mark, fill = _c.fill, fillOpacity = _c.fillOpacity, stroke = tslib_1.__rest(_c, [\"fill\", \"fillOpacity\"]);\n        var vgStroke = keys(stroke).reduce(function (def, k) {\n            def[k] = [{\n                    test: [\n                        xi !== null && name + \"_x[0] !== \" + name + \"_x[1]\",\n                        yi != null && name + \"_y[0] !== \" + name + \"_y[1]\",\n                    ].filter(function (x) { return x; }).join(' && '),\n                    value: stroke[k]\n                }, { value: null }];\n            return def;\n        }, {});\n        return [{\n                name: name + BRUSH + '_bg',\n                type: 'rect',\n                clip: true,\n                encode: {\n                    enter: {\n                        fill: { value: fill },\n                        fillOpacity: { value: fillOpacity }\n                    },\n                    update: update\n                }\n            }].concat(marks, {\n            name: name + BRUSH,\n            type: 'rect',\n            clip: true,\n            encode: {\n                enter: {\n                    fill: { value: 'transparent' }\n                },\n                update: tslib_1.__assign({}, update, vgStroke)\n            }\n        });\n    }\n};\nexport default interval;\n/**\n * Returns the visual and data signals for an interval selection.\n */\nfunction channelSignals(model, selCmpt, channel) {\n    var vname = channelSignalName(selCmpt, channel, 'visual');\n    var dname = channelSignalName(selCmpt, channel, 'data');\n    var hasScales = scales.has(selCmpt);\n    var scaleName = model.scaleName(channel);\n    var scaleStr = stringValue(scaleName);\n    var scale = model.getScaleComponent(channel);\n    var scaleType = scale ? scale.get('type') : undefined;\n    var size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;\n    var coord = channel + \"(unit)\";\n    var on = events(selCmpt, function (def, evt) {\n        return def.concat({ events: evt.between[0], update: \"[\" + coord + \", \" + coord + \"]\" }, // Brush Start\n        { events: evt, update: \"[\" + vname + \"[0], clamp(\" + coord + \", 0, \" + size + \")]\" } // Brush End\n        );\n    });\n    // React to pan/zooms of continuous scales. Non-continuous scales\n    // (bin-linear, band, point) cannot be pan/zoomed and any other changes\n    // to their domains (e.g., filtering) should clear the brushes.\n    on.push({\n        events: { signal: selCmpt.name + SCALE_TRIGGER },\n        update: hasContinuousDomain(scaleType) && !isBinScale(scaleType) ?\n            \"[scale(\" + scaleStr + \", \" + dname + \"[0]), scale(\" + scaleStr + \", \" + dname + \"[1])]\" : \"[0, 0]\"\n    });\n    return hasScales ? [{ name: dname, on: [] }] : [{\n            name: vname, value: [], on: on\n        }, {\n            name: dname,\n            on: [{ events: { signal: vname }, update: vname + \"[0] === \" + vname + \"[1] ? null : invert(\" + scaleStr + \", \" + vname + \")\" }]\n        }];\n}\nfunction events(selCmpt, cb) {\n    return selCmpt.events.reduce(function (on, evt) {\n        if (!evt.between) {\n            warn(evt + \" is not an ordered event stream for interval selections\");\n            return on;\n        }\n        return cb(on, evt);\n    }, []);\n}\n//# sourceMappingURL=data:application/json;base64,","import * as log from '../../../log';\nimport { isPathMark } from '../../../mark';\nimport { positionalProjections } from '../selection';\nvar VORONOI = 'voronoi';\nvar nearest = {\n    has: function (selCmpt) {\n        return selCmpt.type !== 'interval' && selCmpt.nearest;\n    },\n    marks: function (model, selCmpt, marks) {\n        var _a = positionalProjections(selCmpt), x = _a.x, y = _a.y;\n        var markType = model.mark;\n        if (isPathMark(markType)) {\n            log.warn(log.message.nearestNotSupportForContinuous(markType));\n            return marks;\n        }\n        var cellDef = {\n            name: model.getName(VORONOI),\n            type: 'path',\n            from: { data: model.getName('marks') },\n            encode: {\n                enter: {\n                    fill: { value: 'transparent' },\n                    strokeWidth: { value: 0.35 },\n                    stroke: { value: 'transparent' },\n                    isVoronoi: { value: true }\n                }\n            },\n            transform: [{\n                    type: 'voronoi',\n                    x: { expr: (x || (!x && !y)) ? 'datum.datum.x || 0' : '0' },\n                    y: { expr: (y || (!x && !y)) ? 'datum.datum.y || 0' : '0' },\n                    size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n                }]\n        };\n        var index = 0;\n        var exists = false;\n        marks.forEach(function (mark, i) {\n            var name = mark.name || '';\n            if (name === model.component.mark[0].name) {\n                index = i;\n            }\n            else if (name.indexOf(VORONOI) >= 0) {\n                exists = true;\n            }\n        });\n        if (!exists) {\n            marks.splice(index + 1, 0, cellDef);\n        }\n        return marks;\n    }\n};\nexport default nearest;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVhcmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL25lYXJlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFHbkQsSUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDO0FBRTFCLElBQU0sT0FBTyxHQUFxQjtJQUNoQyxHQUFHLEVBQUUsVUFBUyxPQUFPO1FBQ25CLE9BQU8sT0FBTyxDQUFDLElBQUksS0FBSyxVQUFVLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUN4RCxDQUFDO0lBRUQsS0FBSyxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLO1FBQzdCLElBQUEsbUNBQXVDLEVBQXRDLFFBQUMsRUFBRSxRQUFDLENBQW1DO1FBQzlDLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDNUIsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLDhCQUE4QixDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0QsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQU0sT0FBTyxHQUFHO1lBQ2QsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1lBQzVCLElBQUksRUFBRSxNQUFNO1lBQ1osSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUM7WUFDcEMsTUFBTSxFQUFFO2dCQUNOLEtBQUssRUFBRTtvQkFDTCxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsYUFBYSxFQUFDO29CQUM1QixXQUFXLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDO29CQUMxQixNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsYUFBYSxFQUFDO29CQUM5QixTQUFTLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDO2lCQUN6QjthQUNGO1lBQ0QsU0FBUyxFQUFFLENBQUM7b0JBQ1YsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFDO29CQUN6RCxDQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUM7b0JBQ3pELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzFFLENBQUM7U0FDSCxDQUFDO1FBRUYsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ25CLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUUsQ0FBQztZQUNwQixJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUM3QixJQUFJLElBQUksS0FBSyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ3pDLEtBQUssR0FBRyxDQUFDLENBQUM7YUFDWDtpQkFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNyQyxNQUFNLEdBQUcsSUFBSSxDQUFDO2FBQ2Y7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0NBQ0YsQ0FBQztBQUVGLGVBQWUsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uLy4uL2xvZyc7XG5pbXBvcnQge2lzUGF0aE1hcmt9IGZyb20gJy4uLy4uLy4uL21hcmsnO1xuaW1wb3J0IHtwb3NpdGlvbmFsUHJvamVjdGlvbnN9IGZyb20gJy4uL3NlbGVjdGlvbic7XG5pbXBvcnQge1RyYW5zZm9ybUNvbXBpbGVyfSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5jb25zdCBWT1JPTk9JID0gJ3Zvcm9ub2knO1xuXG5jb25zdCBuZWFyZXN0OlRyYW5zZm9ybUNvbXBpbGVyID0ge1xuICBoYXM6IGZ1bmN0aW9uKHNlbENtcHQpIHtcbiAgICByZXR1cm4gc2VsQ21wdC50eXBlICE9PSAnaW50ZXJ2YWwnICYmIHNlbENtcHQubmVhcmVzdDtcbiAgfSxcblxuICBtYXJrczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIG1hcmtzKSB7XG4gICAgY29uc3Qge3gsIHl9ID0gcG9zaXRpb25hbFByb2plY3Rpb25zKHNlbENtcHQpO1xuICAgIGNvbnN0IG1hcmtUeXBlID0gbW9kZWwubWFyaztcbiAgICBpZiAoaXNQYXRoTWFyayhtYXJrVHlwZSkpIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLm5lYXJlc3ROb3RTdXBwb3J0Rm9yQ29udGludW91cyhtYXJrVHlwZSkpO1xuICAgICAgcmV0dXJuIG1hcmtzO1xuICAgIH1cblxuICAgIGNvbnN0IGNlbGxEZWYgPSB7XG4gICAgICBuYW1lOiBtb2RlbC5nZXROYW1lKFZPUk9OT0kpLFxuICAgICAgdHlwZTogJ3BhdGgnLFxuICAgICAgZnJvbToge2RhdGE6IG1vZGVsLmdldE5hbWUoJ21hcmtzJyl9LFxuICAgICAgZW5jb2RlOiB7XG4gICAgICAgIGVudGVyOiB7XG4gICAgICAgICAgZmlsbDoge3ZhbHVlOiAndHJhbnNwYXJlbnQnfSxcbiAgICAgICAgICBzdHJva2VXaWR0aDoge3ZhbHVlOiAwLjM1fSxcbiAgICAgICAgICBzdHJva2U6IHt2YWx1ZTogJ3RyYW5zcGFyZW50J30sXG4gICAgICAgICAgaXNWb3Jvbm9pOiB7dmFsdWU6IHRydWV9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFuc2Zvcm06IFt7XG4gICAgICAgIHR5cGU6ICd2b3Jvbm9pJyxcbiAgICAgICAgeDoge2V4cHI6ICh4IHx8ICgheCAmJiAheSkpID8gJ2RhdHVtLmRhdHVtLnggfHwgMCcgOiAnMCd9LFxuICAgICAgICB5OiB7ZXhwcjogKHkgfHwgKCF4ICYmICF5KSkgPyAnZGF0dW0uZGF0dW0ueSB8fCAwJyA6ICcwJ30sXG4gICAgICAgIHNpemU6IFttb2RlbC5nZXRTaXplU2lnbmFsUmVmKCd3aWR0aCcpLCBtb2RlbC5nZXRTaXplU2lnbmFsUmVmKCdoZWlnaHQnKV1cbiAgICAgIH1dXG4gICAgfTtcblxuICAgIGxldCBpbmRleCA9IDA7XG4gICAgbGV0IGV4aXN0cyA9IGZhbHNlO1xuICAgIG1hcmtzLmZvckVhY2goKG1hcmssIGkpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBtYXJrLm5hbWUgfHwgJyc7XG4gICAgICBpZiAobmFtZSA9PT0gbW9kZWwuY29tcG9uZW50Lm1hcmtbMF0ubmFtZSkge1xuICAgICAgICBpbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUuaW5kZXhPZihWT1JPTk9JKSA+PSAwKSB7XG4gICAgICAgIGV4aXN0cyA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWV4aXN0cykge1xuICAgICAgbWFya3Muc3BsaWNlKGluZGV4ICsgMSwgMCwgY2VsbERlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcmtzO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBuZWFyZXN0O1xuIl19","import { stringValue } from 'vega-util';\nimport { accessPathWithDatum } from '../../util';\nimport { TUPLE, unitName } from './selection';\nimport nearest from './transforms/nearest';\nexport function signals(model, selCmpt) {\n    var proj = selCmpt.project;\n    var datum = nearest.has(selCmpt) ?\n        '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n    var bins = [];\n    var encodings = proj.map(function (p) { return stringValue(p.channel); }).filter(function (e) { return e; }).join(', ');\n    var fields = proj.map(function (p) { return stringValue(p.field); }).join(', ');\n    var values = proj.map(function (p) {\n        var channel = p.channel;\n        var fieldDef = model.fieldDef(channel);\n        // Binned fields should capture extents, for a range test against the raw field.\n        return (fieldDef && fieldDef.bin) ? (bins.push(p.field),\n            \"[\" + accessPathWithDatum(model.vgField(channel, {}), datum) + \", \" +\n                (accessPathWithDatum(model.vgField(channel, { binSuffix: 'end' }), datum) + \"]\")) :\n            \"\" + accessPathWithDatum(p.field, datum);\n    }).join(', ');\n    // Only add a discrete selection to the store if a datum is present _and_\n    // the interaction isn't occurring on a group mark. This guards against\n    // polluting interactive state with invalid values in faceted displays\n    // as the group marks are also data-driven. We force the update to account\n    // for constant null states but varying toggles (e.g., shift-click in\n    // whitespace followed by a click in whitespace; the store should only\n    // be cleared on the second click).\n    return [{\n            name: selCmpt.name + TUPLE,\n            value: {},\n            on: [{\n                    events: selCmpt.events,\n                    update: \"datum && item().mark.marktype !== 'group' ? \" +\n                        (\"{unit: \" + unitName(model) + \", encodings: [\" + encodings + \"], \") +\n                        (\"fields: [\" + fields + \"], values: [\" + values + \"]\") +\n                        (bins.length ? ', ' + bins.map(function (b) { return stringValue('bin_' + b) + \": 1\"; }).join(', ') : '') +\n                        '} : null',\n                    force: true\n                }]\n        }];\n}\nvar multi = {\n    predicate: 'vlMulti',\n    scaleDomain: 'vlMultiDomain',\n    signals: signals,\n    modifyExpr: function (model, selCmpt) {\n        var tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' +\n            (selCmpt.resolve === 'global' ? 'null' : \"{unit: \" + unitName(model) + \"}\");\n    }\n};\nexport default multi;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9zZWxlY3Rpb24vbXVsdGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUV0QyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFL0MsT0FBTyxFQUF3QyxLQUFLLEVBQUUsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ25GLE9BQU8sT0FBTyxNQUFNLHNCQUFzQixDQUFDO0FBRTNDLE1BQU0sa0JBQWtCLEtBQWdCLEVBQUUsT0FBMkI7SUFDbkUsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUM3QixJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDbEMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUN2RCxJQUFNLElBQUksR0FBYSxFQUFFLENBQUM7SUFDMUIsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLFdBQVcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQXRCLENBQXNCLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RGLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDO1FBQ3hCLElBQU0sT0FBTyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDMUIsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxnRkFBZ0Y7UUFDaEYsT0FBTyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBQ3JELE1BQUksbUJBQW1CLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLE9BQUk7aUJBQ3ZELG1CQUFtQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQUcsQ0FBQSxDQUFDLENBQUMsQ0FBQztZQUNuRixLQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFHLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWQseUVBQXlFO0lBQ3pFLHVFQUF1RTtJQUN2RSxzRUFBc0U7SUFDdEUsMEVBQTBFO0lBQzFFLHFFQUFxRTtJQUNyRSxzRUFBc0U7SUFDdEUsbUNBQW1DO0lBQ25DLE9BQU8sQ0FBQztZQUNOLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUs7WUFDMUIsS0FBSyxFQUFFLEVBQUU7WUFDVCxFQUFFLEVBQUUsQ0FBQztvQkFDSCxNQUFNLEVBQUUsT0FBTyxDQUFDLE1BQU07b0JBQ3RCLE1BQU0sRUFBRSw4Q0FBOEM7eUJBQ3BELFlBQVUsUUFBUSxDQUFDLEtBQUssQ0FBQyxzQkFBaUIsU0FBUyxRQUFLLENBQUE7eUJBQ3hELGNBQVksTUFBTSxvQkFBZSxNQUFNLE1BQUcsQ0FBQTt3QkFDMUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFHLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLFFBQUssRUFBL0IsQ0FBK0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO3dCQUN2RixVQUFVO29CQUNaLEtBQUssRUFBRSxJQUFJO2lCQUNaLENBQUM7U0FDSCxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsSUFBTSxLQUFLLEdBQXFCO0lBQzlCLFNBQVMsRUFBRSxTQUFTO0lBQ3BCLFdBQVcsRUFBRSxlQUFlO0lBRTVCLE9BQU8sRUFBRSxPQUFPO0lBRWhCLFVBQVUsRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPO1FBQ2pDLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLE9BQU8sR0FBRyxHQUFHLElBQUk7WUFDZixDQUFDLE9BQU8sQ0FBQyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFlBQVUsUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFHLENBQUMsQ0FBQztJQUMzRSxDQUFDO0NBQ0YsQ0FBQztBQUVGLGVBQWUsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzdHJpbmdWYWx1ZX0gZnJvbSAndmVnYS11dGlsJztcblxuaW1wb3J0IHthY2Nlc3NQYXRoV2l0aERhdHVtfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7U2VsZWN0aW9uQ29tcGlsZXIsIFNlbGVjdGlvbkNvbXBvbmVudCwgVFVQTEUsIHVuaXROYW1lfSBmcm9tICcuL3NlbGVjdGlvbic7XG5pbXBvcnQgbmVhcmVzdCBmcm9tICcuL3RyYW5zZm9ybXMvbmVhcmVzdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWxzKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCkge1xuICBjb25zdCBwcm9qID0gc2VsQ21wdC5wcm9qZWN0O1xuICBjb25zdCBkYXR1bSA9IG5lYXJlc3QuaGFzKHNlbENtcHQpID9cbiAgICAnKGl0ZW0oKS5pc1Zvcm9ub2kgPyBkYXR1bS5kYXR1bSA6IGRhdHVtKScgOiAnZGF0dW0nO1xuICBjb25zdCBiaW5zOiBzdHJpbmdbXSA9IFtdO1xuICBjb25zdCBlbmNvZGluZ3MgPSBwcm9qLm1hcCgocCkgPT4gc3RyaW5nVmFsdWUocC5jaGFubmVsKSkuZmlsdGVyKChlKSA9PiBlKS5qb2luKCcsICcpO1xuICBjb25zdCBmaWVsZHMgPSBwcm9qLm1hcCgocCkgPT4gc3RyaW5nVmFsdWUocC5maWVsZCkpLmpvaW4oJywgJyk7XG4gIGNvbnN0IHZhbHVlcyA9IHByb2oubWFwKChwKSA9PiB7XG4gICAgY29uc3QgY2hhbm5lbCA9IHAuY2hhbm5lbDtcbiAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICAgIC8vIEJpbm5lZCBmaWVsZHMgc2hvdWxkIGNhcHR1cmUgZXh0ZW50cywgZm9yIGEgcmFuZ2UgdGVzdCBhZ2FpbnN0IHRoZSByYXcgZmllbGQuXG4gICAgcmV0dXJuIChmaWVsZERlZiAmJiBmaWVsZERlZi5iaW4pID8gKGJpbnMucHVzaChwLmZpZWxkKSxcbiAgICAgIGBbJHthY2Nlc3NQYXRoV2l0aERhdHVtKG1vZGVsLnZnRmllbGQoY2hhbm5lbCwge30pLCBkYXR1bSl9LCBgICtcbiAgICAgICAgICBgJHthY2Nlc3NQYXRoV2l0aERhdHVtKG1vZGVsLnZnRmllbGQoY2hhbm5lbCwge2JpblN1ZmZpeDogJ2VuZCd9KSwgZGF0dW0pfV1gKSA6XG4gICAgICBgJHthY2Nlc3NQYXRoV2l0aERhdHVtKHAuZmllbGQsIGRhdHVtKX1gO1xuICB9KS5qb2luKCcsICcpO1xuXG4gIC8vIE9ubHkgYWRkIGEgZGlzY3JldGUgc2VsZWN0aW9uIHRvIHRoZSBzdG9yZSBpZiBhIGRhdHVtIGlzIHByZXNlbnQgX2FuZF9cbiAgLy8gdGhlIGludGVyYWN0aW9uIGlzbid0IG9jY3VycmluZyBvbiBhIGdyb3VwIG1hcmsuIFRoaXMgZ3VhcmRzIGFnYWluc3RcbiAgLy8gcG9sbHV0aW5nIGludGVyYWN0aXZlIHN0YXRlIHdpdGggaW52YWxpZCB2YWx1ZXMgaW4gZmFjZXRlZCBkaXNwbGF5c1xuICAvLyBhcyB0aGUgZ3JvdXAgbWFya3MgYXJlIGFsc28gZGF0YS1kcml2ZW4uIFdlIGZvcmNlIHRoZSB1cGRhdGUgdG8gYWNjb3VudFxuICAvLyBmb3IgY29uc3RhbnQgbnVsbCBzdGF0ZXMgYnV0IHZhcnlpbmcgdG9nZ2xlcyAoZS5nLiwgc2hpZnQtY2xpY2sgaW5cbiAgLy8gd2hpdGVzcGFjZSBmb2xsb3dlZCBieSBhIGNsaWNrIGluIHdoaXRlc3BhY2U7IHRoZSBzdG9yZSBzaG91bGQgb25seVxuICAvLyBiZSBjbGVhcmVkIG9uIHRoZSBzZWNvbmQgY2xpY2spLlxuICByZXR1cm4gW3tcbiAgICBuYW1lOiBzZWxDbXB0Lm5hbWUgKyBUVVBMRSxcbiAgICB2YWx1ZToge30sXG4gICAgb246IFt7XG4gICAgICBldmVudHM6IHNlbENtcHQuZXZlbnRzLFxuICAgICAgdXBkYXRlOiBgZGF0dW0gJiYgaXRlbSgpLm1hcmsubWFya3R5cGUgIT09ICdncm91cCcgPyBgICtcbiAgICAgICAgYHt1bml0OiAke3VuaXROYW1lKG1vZGVsKX0sIGVuY29kaW5nczogWyR7ZW5jb2RpbmdzfV0sIGAgK1xuICAgICAgICBgZmllbGRzOiBbJHtmaWVsZHN9XSwgdmFsdWVzOiBbJHt2YWx1ZXN9XWAgK1xuICAgICAgICAoYmlucy5sZW5ndGggPyAnLCAnICsgYmlucy5tYXAoKGIpID0+IGAke3N0cmluZ1ZhbHVlKCdiaW5fJyArIGIpfTogMWApLmpvaW4oJywgJykgOiAnJykgK1xuICAgICAgICAnfSA6IG51bGwnLFxuICAgICAgZm9yY2U6IHRydWVcbiAgICB9XVxuICB9XTtcbn1cblxuY29uc3QgbXVsdGk6U2VsZWN0aW9uQ29tcGlsZXIgPSB7XG4gIHByZWRpY2F0ZTogJ3ZsTXVsdGknLFxuICBzY2FsZURvbWFpbjogJ3ZsTXVsdGlEb21haW4nLFxuXG4gIHNpZ25hbHM6IHNpZ25hbHMsXG5cbiAgbW9kaWZ5RXhwcjogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQpIHtcbiAgICBjb25zdCB0cGwgPSBzZWxDbXB0Lm5hbWUgKyBUVVBMRTtcbiAgICByZXR1cm4gdHBsICsgJywgJyArXG4gICAgICAoc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyA/ICdudWxsJyA6IGB7dW5pdDogJHt1bml0TmFtZShtb2RlbCl9fWApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtdWx0aTtcbiJdfQ==","import { stringValue } from 'vega-util';\nimport { signals as multiSignals } from './multi';\nimport { STORE, TUPLE, unitName } from './selection';\nvar single = {\n    predicate: 'vlSingle',\n    scaleDomain: 'vlSingleDomain',\n    signals: multiSignals,\n    topLevelSignals: function (model, selCmpt, signals) {\n        var hasSignal = signals.filter(function (s) { return s.name === selCmpt.name; });\n        var data = \"data(\" + stringValue(selCmpt.name + STORE) + \")\";\n        var values = data + \"[0].values\";\n        return hasSignal.length ? signals : signals.concat({\n            name: selCmpt.name,\n            update: data + \".length && {\" +\n                selCmpt.project.map(function (p, i) { return p.field + \": \" + values + \"[\" + i + \"]\"; }).join(', ') + '}'\n        });\n    },\n    modifyExpr: function (model, selCmpt) {\n        var tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' +\n            (selCmpt.resolve === 'global' ? 'true' : \"{unit: \" + unitName(model) + \"}\");\n    }\n};\nexport default single;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3NpbmdsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE9BQU8sRUFBQyxPQUFPLElBQUksWUFBWSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBQ2hELE9BQU8sRUFBb0IsS0FBSyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFHdEUsSUFBTSxNQUFNLEdBQXFCO0lBQy9CLFNBQVMsRUFBRSxVQUFVO0lBQ3JCLFdBQVcsRUFBRSxnQkFBZ0I7SUFFN0IsT0FBTyxFQUFFLFlBQVk7SUFFckIsZUFBZSxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxPQUFPO1FBQy9DLElBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLEVBQXZCLENBQXVCLENBQUMsQ0FBQztRQUNqRSxJQUFNLElBQUksR0FBRyxVQUFRLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFHLENBQUM7UUFDMUQsSUFBTSxNQUFNLEdBQU0sSUFBSSxlQUFZLENBQUM7UUFDbkMsT0FBTyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDakQsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1lBQ2xCLE1BQU0sRUFBSyxJQUFJLGlCQUFjO2dCQUMzQixPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBRyxDQUFDLENBQUMsS0FBSyxVQUFLLE1BQU0sU0FBSSxDQUFDLE1BQUcsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHO1NBQ2hGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxVQUFVLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTztRQUNqQyxJQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQyxPQUFPLEdBQUcsR0FBRyxJQUFJO1lBQ2YsQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFVLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBRyxDQUFDLENBQUM7SUFDM0UsQ0FBQztDQUNGLENBQUM7QUFFRixlQUFlLE1BQU0sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c3RyaW5nVmFsdWV9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5cbmltcG9ydCB7c2lnbmFscyBhcyBtdWx0aVNpZ25hbHN9IGZyb20gJy4vbXVsdGknO1xuaW1wb3J0IHtTZWxlY3Rpb25Db21waWxlciwgU1RPUkUsIFRVUExFLCB1bml0TmFtZX0gZnJvbSAnLi9zZWxlY3Rpb24nO1xuXG5cbmNvbnN0IHNpbmdsZTpTZWxlY3Rpb25Db21waWxlciA9IHtcbiAgcHJlZGljYXRlOiAndmxTaW5nbGUnLFxuICBzY2FsZURvbWFpbjogJ3ZsU2luZ2xlRG9tYWluJyxcblxuICBzaWduYWxzOiBtdWx0aVNpZ25hbHMsXG5cbiAgdG9wTGV2ZWxTaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIGNvbnN0IGhhc1NpZ25hbCA9IHNpZ25hbHMuZmlsdGVyKChzKSA9PiBzLm5hbWUgPT09IHNlbENtcHQubmFtZSk7XG4gICAgY29uc3QgZGF0YSA9IGBkYXRhKCR7c3RyaW5nVmFsdWUoc2VsQ21wdC5uYW1lICsgU1RPUkUpfSlgO1xuICAgIGNvbnN0IHZhbHVlcyA9IGAke2RhdGF9WzBdLnZhbHVlc2A7XG4gICAgcmV0dXJuIGhhc1NpZ25hbC5sZW5ndGggPyBzaWduYWxzIDogc2lnbmFscy5jb25jYXQoe1xuICAgICAgbmFtZTogc2VsQ21wdC5uYW1lLFxuICAgICAgdXBkYXRlOiBgJHtkYXRhfS5sZW5ndGggJiYge2AgK1xuICAgICAgICBzZWxDbXB0LnByb2plY3QubWFwKChwLCBpKSA9PiBgJHtwLmZpZWxkfTogJHt2YWx1ZXN9WyR7aX1dYCkuam9pbignLCAnKSArICd9J1xuICAgIH0pO1xuICB9LFxuXG4gIG1vZGlmeUV4cHI6IGZ1bmN0aW9uKG1vZGVsLCBzZWxDbXB0KSB7XG4gICAgY29uc3QgdHBsID0gc2VsQ21wdC5uYW1lICsgVFVQTEU7XG4gICAgcmV0dXJuIHRwbCArICcsICcgK1xuICAgICAgKHNlbENtcHQucmVzb2x2ZSA9PT0gJ2dsb2JhbCcgPyAndHJ1ZScgOiBge3VuaXQ6ICR7dW5pdE5hbWUobW9kZWwpfX1gKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgc2luZ2xlO1xuIl19","import { stringValue } from 'vega-util';\nimport { accessPathWithDatum, varName } from '../../../util';\nimport { TUPLE } from '../selection';\nimport nearest from './nearest';\nvar inputBindings = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'single' && selCmpt.resolve === 'global' &&\n            selCmpt.bind && selCmpt.bind !== 'scales';\n    },\n    topLevelSignals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var proj = selCmpt.project;\n        var bind = selCmpt.bind;\n        var datum = nearest.has(selCmpt) ?\n            '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n        proj.forEach(function (p) {\n            var sgname = varName(name + \"_\" + p.field);\n            var hasSignal = signals.filter(function (s) { return s.name === sgname; });\n            if (!hasSignal.length) {\n                signals.unshift({\n                    name: sgname,\n                    value: '',\n                    on: [{\n                            events: selCmpt.events,\n                            update: \"datum && item().mark.marktype !== 'group' ? \" + accessPathWithDatum(p.field, datum) + \" : null\"\n                        }],\n                    bind: bind[p.field] || bind[p.channel] || bind\n                });\n            }\n        });\n        return signals;\n    },\n    signals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var proj = selCmpt.project;\n        var signal = signals.filter(function (s) { return s.name === name + TUPLE; })[0];\n        var fields = proj.map(function (p) { return stringValue(p.field); }).join(', ');\n        var values = proj.map(function (p) { return varName(name + \"_\" + p.field); });\n        if (values.length) {\n            signal.update = values.join(' && ') + \" ? {fields: [\" + fields + \"], values: [\" + values.join(', ') + \"]} : null\";\n        }\n        delete signal.value;\n        delete signal.on;\n        return signals;\n    }\n};\nexport default inputBindings;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvaW5wdXRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDdEMsT0FBTyxFQUFDLG1CQUFtQixFQUFFLE9BQU8sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzRCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ25DLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUloQyxJQUFNLGFBQWEsR0FBcUI7SUFDdEMsR0FBRyxFQUFFLFVBQVMsT0FBTztRQUNuQixPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEtBQUssUUFBUTtZQUM5RCxPQUFPLENBQUMsSUFBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0lBQzlDLENBQUM7SUFFRCxlQUFlLEVBQUUsVUFBUyxLQUFLLEVBQUUsT0FBTyxFQUFFLE9BQU87UUFDL0MsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDMUIsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLDBDQUEwQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFFdkQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFTLENBQUM7WUFDckIsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFJLElBQUksU0FBSSxDQUFDLENBQUMsS0FBTyxDQUFDLENBQUM7WUFDN0MsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssTUFBTSxFQUFqQixDQUFpQixDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3JCLE9BQU8sQ0FBQyxPQUFPLENBQUM7b0JBQ2QsSUFBSSxFQUFFLE1BQU07b0JBQ1osS0FBSyxFQUFFLEVBQUU7b0JBQ1QsRUFBRSxFQUFFLENBQUM7NEJBQ0gsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNOzRCQUN0QixNQUFNLEVBQUUsaURBQStDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLFlBQVM7eUJBQ3BHLENBQUM7b0JBQ0YsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJO2lCQUMvQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVELE9BQU8sRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTztRQUN2QyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQzFCLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxHQUFHLEtBQUssRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hFLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxPQUFPLENBQUksSUFBSSxTQUFJLENBQUMsQ0FBQyxLQUFPLENBQUMsRUFBN0IsQ0FBNkIsQ0FBQyxDQUFDO1FBRTlELElBQUksTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNqQixNQUFNLENBQUMsTUFBTSxHQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFnQixNQUFNLG9CQUFlLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQVcsQ0FBQztTQUN6RztRQUVELE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQztRQUNwQixPQUFPLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFFakIsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztDQUNGLENBQUM7QUFFRixlQUFlLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c3RyaW5nVmFsdWV9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5pbXBvcnQge2FjY2Vzc1BhdGhXaXRoRGF0dW0sIHZhck5hbWV9IGZyb20gJy4uLy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtUVVBMRX0gZnJvbSAnLi4vc2VsZWN0aW9uJztcbmltcG9ydCBuZWFyZXN0IGZyb20gJy4vbmVhcmVzdCc7XG5pbXBvcnQge1RyYW5zZm9ybUNvbXBpbGVyfSBmcm9tICcuL3RyYW5zZm9ybXMnO1xuXG5cbmNvbnN0IGlucHV0QmluZGluZ3M6VHJhbnNmb3JtQ29tcGlsZXIgPSB7XG4gIGhhczogZnVuY3Rpb24oc2VsQ21wdCkge1xuICAgIHJldHVybiBzZWxDbXB0LnR5cGUgPT09ICdzaW5nbGUnICYmIHNlbENtcHQucmVzb2x2ZSA9PT0gJ2dsb2JhbCcgJiZcbiAgICAgIHNlbENtcHQuYmluZCAmJiBzZWxDbXB0LmJpbmQgIT09ICdzY2FsZXMnO1xuICB9LFxuXG4gIHRvcExldmVsU2lnbmFsczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpIHtcbiAgICBjb25zdCBuYW1lID0gc2VsQ21wdC5uYW1lO1xuICAgIGNvbnN0IHByb2ogPSBzZWxDbXB0LnByb2plY3Q7XG4gICAgY29uc3QgYmluZCA9IHNlbENtcHQuYmluZDtcbiAgICBjb25zdCBkYXR1bSA9IG5lYXJlc3QuaGFzKHNlbENtcHQpID9cbiAgICAgICcoaXRlbSgpLmlzVm9yb25vaSA/IGRhdHVtLmRhdHVtIDogZGF0dW0pJyA6ICdkYXR1bSc7XG5cbiAgICBwcm9qLmZvckVhY2goZnVuY3Rpb24ocCkge1xuICAgICAgY29uc3Qgc2duYW1lID0gdmFyTmFtZShgJHtuYW1lfV8ke3AuZmllbGR9YCk7XG4gICAgICBjb25zdCBoYXNTaWduYWwgPSBzaWduYWxzLmZpbHRlcigocykgPT4gcy5uYW1lID09PSBzZ25hbWUpO1xuICAgICAgaWYgKCFoYXNTaWduYWwubGVuZ3RoKSB7XG4gICAgICAgIHNpZ25hbHMudW5zaGlmdCh7XG4gICAgICAgICAgbmFtZTogc2duYW1lLFxuICAgICAgICAgIHZhbHVlOiAnJyxcbiAgICAgICAgICBvbjogW3tcbiAgICAgICAgICAgIGV2ZW50czogc2VsQ21wdC5ldmVudHMsXG4gICAgICAgICAgICB1cGRhdGU6IGBkYXR1bSAmJiBpdGVtKCkubWFyay5tYXJrdHlwZSAhPT0gJ2dyb3VwJyA/ICR7YWNjZXNzUGF0aFdpdGhEYXR1bShwLmZpZWxkLCBkYXR1bSl9IDogbnVsbGBcbiAgICAgICAgICB9XSxcbiAgICAgICAgICBiaW5kOiBiaW5kW3AuZmllbGRdIHx8IGJpbmRbcC5jaGFubmVsXSB8fCBiaW5kXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpZ25hbHM7XG4gIH0sXG5cbiAgc2lnbmFsczogZnVuY3Rpb24obW9kZWwsIHNlbENtcHQsIHNpZ25hbHMpIHtcbiAgICBjb25zdCBuYW1lID0gc2VsQ21wdC5uYW1lO1xuICAgIGNvbnN0IHByb2ogPSBzZWxDbXB0LnByb2plY3Q7XG4gICAgY29uc3Qgc2lnbmFsID0gc2lnbmFscy5maWx0ZXIoKHMpID0+IHMubmFtZSA9PT0gbmFtZSArIFRVUExFKVswXTtcbiAgICBjb25zdCBmaWVsZHMgPSBwcm9qLm1hcCgocCkgPT4gc3RyaW5nVmFsdWUocC5maWVsZCkpLmpvaW4oJywgJyk7XG4gICAgY29uc3QgdmFsdWVzID0gcHJvai5tYXAoKHApID0+IHZhck5hbWUoYCR7bmFtZX1fJHtwLmZpZWxkfWApKTtcblxuICAgIGlmICh2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICBzaWduYWwudXBkYXRlID0gYCR7dmFsdWVzLmpvaW4oJyAmJiAnKX0gPyB7ZmllbGRzOiBbJHtmaWVsZHN9XSwgdmFsdWVzOiBbJHt2YWx1ZXMuam9pbignLCAnKX1dfSA6IG51bGxgO1xuICAgIH1cblxuICAgIGRlbGV0ZSBzaWduYWwudmFsdWU7XG4gICAgZGVsZXRlIHNpZ25hbC5vbjtcblxuICAgIHJldHVybiBzaWduYWxzO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbnB1dEJpbmRpbmdzO1xuIl19","import * as log from '../../../log';\nimport { keys } from '../../../util';\nimport { TimeUnitNode } from '../../data/timeunit';\nvar project = {\n    has: function (selDef) {\n        var def = selDef;\n        return def.fields !== undefined || def.encodings !== undefined;\n    },\n    parse: function (model, selDef, selCmpt) {\n        var channels = {};\n        var timeUnits = {};\n        // TODO: find a possible channel mapping for these fields.\n        (selDef.fields || []).forEach(function (field) { return channels[field] = null; });\n        (selDef.encodings || []).forEach(function (channel) {\n            var fieldDef = model.fieldDef(channel);\n            if (fieldDef) {\n                if (fieldDef.timeUnit) {\n                    var tuField = model.vgField(channel);\n                    channels[tuField] = channel;\n                    // Construct TimeUnitComponents which will be combined into a\n                    // TimeUnitNode. This node may need to be inserted into the\n                    // dataflow if the selection is used across views that do not\n                    // have these time units defined.\n                    timeUnits[tuField] = {\n                        as: tuField,\n                        field: fieldDef.field,\n                        timeUnit: fieldDef.timeUnit\n                    };\n                }\n                else {\n                    channels[fieldDef.field] = channel;\n                }\n            }\n            else {\n                log.warn(log.message.cannotProjectOnChannelWithoutField(channel));\n            }\n        });\n        var projection = selCmpt.project || (selCmpt.project = []);\n        for (var field in channels) {\n            if (channels.hasOwnProperty(field)) {\n                projection.push({ field: field, channel: channels[field] });\n            }\n        }\n        var fields = selCmpt.fields || (selCmpt.fields = {});\n        projection.filter(function (p) { return p.channel; }).forEach(function (p) { return fields[p.channel] = p.field; });\n        if (keys(timeUnits).length) {\n            selCmpt.timeUnit = new TimeUnitNode(null, timeUnits);\n        }\n    }\n};\nexport default project;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL3Byb2plY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFFcEMsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuQyxPQUFPLEVBQW9CLFlBQVksRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBSXBFLElBQU0sT0FBTyxHQUFzQjtJQUNqQyxHQUFHLEVBQUUsVUFBUyxNQUF5QztRQUNyRCxJQUFNLEdBQUcsR0FBRyxNQUFzQixDQUFDO1FBQ25DLE9BQU8sR0FBRyxDQUFDLE1BQU0sS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLFNBQVMsS0FBSyxTQUFTLENBQUM7SUFDakUsQ0FBQztJQUVELEtBQUssRUFBRSxVQUFTLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTztRQUNwQyxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBTSxTQUFTLEdBQXVDLEVBQUUsQ0FBQztRQUV6RCwwREFBMEQ7UUFDMUQsQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssSUFBSyxPQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLEVBQXRCLENBQXNCLENBQUMsQ0FBQztRQUVqRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBeUI7WUFDekQsSUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxJQUFJLFFBQVEsRUFBRTtnQkFDWixJQUFJLFFBQVEsQ0FBQyxRQUFRLEVBQUU7b0JBQ3JCLElBQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQ3ZDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxPQUFPLENBQUM7b0JBRTVCLDZEQUE2RDtvQkFDN0QsMkRBQTJEO29CQUMzRCw2REFBNkQ7b0JBQzdELGlDQUFpQztvQkFDakMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHO3dCQUNuQixFQUFFLEVBQUUsT0FBTzt3QkFDWCxLQUFLLEVBQUUsUUFBUSxDQUFDLEtBQUs7d0JBQ3JCLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtxQkFDNUIsQ0FBQztpQkFDSDtxQkFBTTtvQkFDTCxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQztpQkFDcEM7YUFDRjtpQkFBTTtnQkFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsa0NBQWtDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQzthQUNuRTtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDN0QsS0FBSyxJQUFNLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDNUIsSUFBSSxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNsQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQzthQUMzRDtTQUNGO1FBRUQsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdkQsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsQ0FBQyxPQUFPLEVBQVQsQ0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUEzQixDQUEyQixDQUFDLENBQUM7UUFFaEYsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQzFCLE9BQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQztDQUNGLENBQUM7QUFFRixlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2luZ2xlRGVmQ2hhbm5lbH0gZnJvbSAnLi4vLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vLi4vbG9nJztcbmltcG9ydCB7U2VsZWN0aW9uRGVmfSBmcm9tICcuLi8uLi8uLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHtrZXlzfSBmcm9tICcuLi8uLi8uLi91dGlsJztcbmltcG9ydCB7VGltZVVuaXRDb21wb25lbnQsIFRpbWVVbml0Tm9kZX0gZnJvbSAnLi4vLi4vZGF0YS90aW1ldW5pdCc7XG5pbXBvcnQge1NlbGVjdGlvbkNvbXBvbmVudH0gZnJvbSAnLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7VHJhbnNmb3JtQ29tcGlsZXJ9IGZyb20gJy4vdHJhbnNmb3Jtcyc7XG5cbmNvbnN0IHByb2plY3Q6IFRyYW5zZm9ybUNvbXBpbGVyID0ge1xuICBoYXM6IGZ1bmN0aW9uKHNlbERlZjogU2VsZWN0aW9uQ29tcG9uZW50IHwgU2VsZWN0aW9uRGVmKSB7XG4gICAgY29uc3QgZGVmID0gc2VsRGVmIGFzIFNlbGVjdGlvbkRlZjtcbiAgICByZXR1cm4gZGVmLmZpZWxkcyAhPT0gdW5kZWZpbmVkIHx8IGRlZi5lbmNvZGluZ3MgIT09IHVuZGVmaW5lZDtcbiAgfSxcblxuICBwYXJzZTogZnVuY3Rpb24obW9kZWwsIHNlbERlZiwgc2VsQ21wdCkge1xuICAgIGNvbnN0IGNoYW5uZWxzID0ge307XG4gICAgY29uc3QgdGltZVVuaXRzOiB7W2tleTogc3RyaW5nXTogVGltZVVuaXRDb21wb25lbnR9ID0ge307XG5cbiAgICAvLyBUT0RPOiBmaW5kIGEgcG9zc2libGUgY2hhbm5lbCBtYXBwaW5nIGZvciB0aGVzZSBmaWVsZHMuXG4gICAgKHNlbERlZi5maWVsZHMgfHwgW10pLmZvckVhY2goKGZpZWxkKSA9PiBjaGFubmVsc1tmaWVsZF0gPSBudWxsKTtcblxuICAgIChzZWxEZWYuZW5jb2RpbmdzIHx8IFtdKS5mb3JFYWNoKChjaGFubmVsOiBTaW5nbGVEZWZDaGFubmVsKSA9PiB7XG4gICAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuICAgICAgaWYgKGZpZWxkRGVmKSB7XG4gICAgICAgIGlmIChmaWVsZERlZi50aW1lVW5pdCkge1xuICAgICAgICAgIGNvbnN0IHR1RmllbGQgPSBtb2RlbC52Z0ZpZWxkKGNoYW5uZWwpO1xuICAgICAgICAgIGNoYW5uZWxzW3R1RmllbGRdID0gY2hhbm5lbDtcblxuICAgICAgICAgIC8vIENvbnN0cnVjdCBUaW1lVW5pdENvbXBvbmVudHMgd2hpY2ggd2lsbCBiZSBjb21iaW5lZCBpbnRvIGFcbiAgICAgICAgICAvLyBUaW1lVW5pdE5vZGUuIFRoaXMgbm9kZSBtYXkgbmVlZCB0byBiZSBpbnNlcnRlZCBpbnRvIHRoZVxuICAgICAgICAgIC8vIGRhdGFmbG93IGlmIHRoZSBzZWxlY3Rpb24gaXMgdXNlZCBhY3Jvc3Mgdmlld3MgdGhhdCBkbyBub3RcbiAgICAgICAgICAvLyBoYXZlIHRoZXNlIHRpbWUgdW5pdHMgZGVmaW5lZC5cbiAgICAgICAgICB0aW1lVW5pdHNbdHVGaWVsZF0gPSB7XG4gICAgICAgICAgICBhczogdHVGaWVsZCxcbiAgICAgICAgICAgIGZpZWxkOiBmaWVsZERlZi5maWVsZCxcbiAgICAgICAgICAgIHRpbWVVbml0OiBmaWVsZERlZi50aW1lVW5pdFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbm5lbHNbZmllbGREZWYuZmllbGRdID0gY2hhbm5lbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuY2Fubm90UHJvamVjdE9uQ2hhbm5lbFdpdGhvdXRGaWVsZChjaGFubmVsKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBwcm9qZWN0aW9uID0gc2VsQ21wdC5wcm9qZWN0IHx8IChzZWxDbXB0LnByb2plY3QgPSBbXSk7XG4gICAgZm9yIChjb25zdCBmaWVsZCBpbiBjaGFubmVscykge1xuICAgICAgaWYgKGNoYW5uZWxzLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xuICAgICAgICBwcm9qZWN0aW9uLnB1c2goe2ZpZWxkOiBmaWVsZCwgY2hhbm5lbDogY2hhbm5lbHNbZmllbGRdfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZmllbGRzID0gc2VsQ21wdC5maWVsZHMgfHwgKHNlbENtcHQuZmllbGRzID0ge30pO1xuICAgIHByb2plY3Rpb24uZmlsdGVyKChwKSA9PiBwLmNoYW5uZWwpLmZvckVhY2goKHApID0+IGZpZWxkc1twLmNoYW5uZWxdID0gcC5maWVsZCk7XG5cbiAgICBpZiAoa2V5cyh0aW1lVW5pdHMpLmxlbmd0aCkge1xuICAgICAgc2VsQ21wdC50aW1lVW5pdCA9IG5ldyBUaW1lVW5pdE5vZGUobnVsbCwgdGltZVVuaXRzKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHByb2plY3Q7XG4iXX0=","import { TUPLE, unitName } from '../selection';\nvar TOGGLE = '_toggle';\nvar toggle = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'multi' && selCmpt.toggle;\n    },\n    signals: function (model, selCmpt, signals) {\n        return signals.concat({\n            name: selCmpt.name + TOGGLE,\n            value: false,\n            on: [{ events: selCmpt.events, update: selCmpt.toggle }]\n        });\n    },\n    modifyExpr: function (model, selCmpt, expr) {\n        var tpl = selCmpt.name + TUPLE;\n        var signal = selCmpt.name + TOGGLE;\n        return signal + \" ? null : \" + tpl + \", \" +\n            (selCmpt.resolve === 'global' ?\n                signal + \" ? null : true, \" :\n                signal + \" ? null : {unit: \" + unitName(model) + \"}, \") +\n            (signal + \" ? \" + tpl + \" : null\");\n    }\n};\nexport default toggle;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvc2VsZWN0aW9uL3RyYW5zZm9ybXMvdG9nZ2xlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBQyxLQUFLLEVBQUUsUUFBUSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBSTdDLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQztBQUV6QixJQUFNLE1BQU0sR0FBcUI7SUFDL0IsR0FBRyxFQUFFLFVBQVMsT0FBTztRQUNuQixPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDcEQsQ0FBQztJQUVELE9BQU8sRUFBRSxVQUFTLEtBQUssRUFBRSxPQUFPLEVBQUUsT0FBTztRQUN2QyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFDcEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTTtZQUMzQixLQUFLLEVBQUUsS0FBSztZQUNaLEVBQUUsRUFBRSxDQUFDLEVBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNLEVBQUMsQ0FBQztTQUN2RCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVSxFQUFFLFVBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJO1FBQ3ZDLElBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBQ2pDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBRXJDLE9BQVUsTUFBTSxrQkFBYSxHQUFHLE9BQUk7WUFDbEMsQ0FBQyxPQUFPLENBQUMsT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDO2dCQUMxQixNQUFNLHFCQUFrQixDQUFDLENBQUM7Z0JBQzFCLE1BQU0seUJBQW9CLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBSyxDQUFDO2FBQ2pELE1BQU0sV0FBTSxHQUFHLFlBQVMsQ0FBQSxDQUFDO0lBQ2hDLENBQUM7Q0FDRixDQUFDO0FBRUYsZUFBZSxNQUFNLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7VFVQTEUsIHVuaXROYW1lfSBmcm9tICcuLi9zZWxlY3Rpb24nO1xuaW1wb3J0IHtUcmFuc2Zvcm1Db21waWxlcn0gZnJvbSAnLi90cmFuc2Zvcm1zJztcblxuXG5jb25zdCBUT0dHTEUgPSAnX3RvZ2dsZSc7XG5cbmNvbnN0IHRvZ2dsZTpUcmFuc2Zvcm1Db21waWxlciA9IHtcbiAgaGFzOiBmdW5jdGlvbihzZWxDbXB0KSB7XG4gICAgcmV0dXJuIHNlbENtcHQudHlwZSA9PT0gJ211bHRpJyAmJiBzZWxDbXB0LnRvZ2dsZTtcbiAgfSxcblxuICBzaWduYWxzOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgc2lnbmFscykge1xuICAgIHJldHVybiBzaWduYWxzLmNvbmNhdCh7XG4gICAgICBuYW1lOiBzZWxDbXB0Lm5hbWUgKyBUT0dHTEUsXG4gICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICBvbjogW3tldmVudHM6IHNlbENtcHQuZXZlbnRzLCB1cGRhdGU6IHNlbENtcHQudG9nZ2xlfV1cbiAgICB9KTtcbiAgfSxcblxuICBtb2RpZnlFeHByOiBmdW5jdGlvbihtb2RlbCwgc2VsQ21wdCwgZXhwcikge1xuICAgIGNvbnN0IHRwbCA9IHNlbENtcHQubmFtZSArIFRVUExFO1xuICAgIGNvbnN0IHNpZ25hbCA9IHNlbENtcHQubmFtZSArIFRPR0dMRTtcblxuICAgIHJldHVybiBgJHtzaWduYWx9ID8gbnVsbCA6ICR7dHBsfSwgYCArXG4gICAgICAoc2VsQ21wdC5yZXNvbHZlID09PSAnZ2xvYmFsJyA/XG4gICAgICAgIGAke3NpZ25hbH0gPyBudWxsIDogdHJ1ZSwgYCA6XG4gICAgICAgIGAke3NpZ25hbH0gPyBudWxsIDoge3VuaXQ6ICR7dW5pdE5hbWUobW9kZWwpfX0sIGApICtcbiAgICAgIGAke3NpZ25hbH0gPyAke3RwbH0gOiBudWxsYDtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdG9nZ2xlO1xuIl19","import { selector as parseSelector } from 'vega-event-selector';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport { channelSignalName, positionalProjections } from '../selection';\nimport scalesCompiler, { domain } from './scales';\nvar ANCHOR = '_translate_anchor';\nvar DELTA = '_translate_delta';\nvar translate = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'interval' && selCmpt.translate;\n    },\n    signals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var hasScales = scalesCompiler.has(selCmpt);\n        var anchor = name + ANCHOR;\n        var _a = positionalProjections(selCmpt), x = _a.x, y = _a.y;\n        var events = parseSelector(selCmpt.translate, 'scope');\n        if (!hasScales) {\n            events = events.map(function (e) { return (e.between[0].markname = name + INTERVAL_BRUSH, e); });\n        }\n        signals.push({\n            name: anchor,\n            value: {},\n            on: [{\n                    events: events.map(function (e) { return e.between[0]; }),\n                    update: '{x: x(unit), y: y(unit)' +\n                        (x !== null ? ', extent_x: ' + (hasScales ? domain(model, X) :\n                            \"slice(\" + channelSignalName(selCmpt, 'x', 'visual') + \")\") : '') +\n                        (y !== null ? ', extent_y: ' + (hasScales ? domain(model, Y) :\n                            \"slice(\" + channelSignalName(selCmpt, 'y', 'visual') + \")\") : '') + '}'\n                }]\n        }, {\n            name: name + DELTA,\n            value: {},\n            on: [{\n                    events: events,\n                    update: \"{x: \" + anchor + \".x - x(unit), y: \" + anchor + \".y - y(unit)}\"\n                }]\n        });\n        if (x !== null) {\n            onDelta(model, selCmpt, X, 'width', signals);\n        }\n        if (y !== null) {\n            onDelta(model, selCmpt, Y, 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default translate;\nfunction onDelta(model, selCmpt, channel, size, signals) {\n    var name = selCmpt.name;\n    var hasScales = scalesCompiler.has(selCmpt);\n    var signal = signals.filter(function (s) {\n        return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n    })[0];\n    var anchor = name + ANCHOR;\n    var delta = name + DELTA;\n    var sizeSg = model.getSizeSignalRef(size).signal;\n    var scaleCmpt = model.getScaleComponent(channel);\n    var scaleType = scaleCmpt.get('type');\n    var sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n    var extent = anchor + \".extent_\" + channel;\n    var offset = \"\" + sign + delta + \".\" + channel + \" / \" + (hasScales ? \"\" + sizeSg : \"span(\" + extent + \")\");\n    var panFn = !hasScales ? 'panLinear' :\n        scaleType === 'log' ? 'panLog' :\n            scaleType === 'pow' ? 'panPow' : 'panLinear';\n    var update = panFn + \"(\" + extent + \", \" + offset +\n        (hasScales && scaleType === 'pow' ? \", \" + (scaleCmpt.get('exponent') || 1) : '') + ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : \"clampRange(\" + update + \", 0, \" + sizeSg + \")\"\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import { selector as parseSelector } from 'vega-event-selector';\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport { channelSignalName, positionalProjections } from '../selection';\nimport { default as scalesCompiler, domain } from './scales';\nvar ANCHOR = '_zoom_anchor';\nvar DELTA = '_zoom_delta';\nvar zoom = {\n    has: function (selCmpt) {\n        return selCmpt.type === 'interval' && selCmpt.zoom;\n    },\n    signals: function (model, selCmpt, signals) {\n        var name = selCmpt.name;\n        var hasScales = scalesCompiler.has(selCmpt);\n        var delta = name + DELTA;\n        var _a = positionalProjections(selCmpt), x = _a.x, y = _a.y;\n        var sx = stringValue(model.scaleName(X));\n        var sy = stringValue(model.scaleName(Y));\n        var events = parseSelector(selCmpt.zoom, 'scope');\n        if (!hasScales) {\n            events = events.map(function (e) { return (e.markname = name + INTERVAL_BRUSH, e); });\n        }\n        signals.push({\n            name: name + ANCHOR,\n            on: [{\n                    events: events,\n                    update: !hasScales ? \"{x: x(unit), y: y(unit)}\" :\n                        '{' + [\n                            (sx ? \"x: invert(\" + sx + \", x(unit))\" : ''),\n                            (sy ? \"y: invert(\" + sy + \", y(unit))\" : '')\n                        ].filter(function (expr) { return !!expr; }).join(', ') + '}'\n                }]\n        }, {\n            name: delta,\n            on: [{\n                    events: events,\n                    force: true,\n                    update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n                }]\n        });\n        if (x !== null) {\n            onDelta(model, selCmpt, 'x', 'width', signals);\n        }\n        if (y !== null) {\n            onDelta(model, selCmpt, 'y', 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default zoom;\nfunction onDelta(model, selCmpt, channel, size, signals) {\n    var name = selCmpt.name;\n    var hasScales = scalesCompiler.has(selCmpt);\n    var signal = signals.filter(function (s) {\n        return s.name === channelSignalName(selCmpt, channel, hasScales ? 'data' : 'visual');\n    })[0];\n    var sizeSg = model.getSizeSignalRef(size).signal;\n    var scaleCmpt = model.getScaleComponent(channel);\n    var scaleType = scaleCmpt.get('type');\n    var base = hasScales ? domain(model, channel) : signal.name;\n    var delta = name + DELTA;\n    var anchor = \"\" + name + ANCHOR + \".\" + channel;\n    var zoomFn = !hasScales ? 'zoomLinear' :\n        scaleType === 'log' ? 'zoomLog' :\n            scaleType === 'pow' ? 'zoomPow' : 'zoomLinear';\n    var update = zoomFn + \"(\" + base + \", \" + anchor + \", \" + delta +\n        (hasScales && scaleType === 'pow' ? \", \" + (scaleCmpt.get('exponent') || 1) : '') + ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : \"clampRange(\" + update + \", 0, \" + sizeSg + \")\"\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import inputs from './inputs';\nimport nearest from './nearest';\nimport project from './project';\nimport scales from './scales';\nimport toggle from './toggle';\nimport translate from './translate';\nimport zoom from './zoom';\nvar compilers = { project: project, toggle: toggle, scales: scales,\n    translate: translate, zoom: zoom, inputs: inputs, nearest: nearest };\nexport function forEachTransform(selCmpt, cb) {\n    for (var t in compilers) {\n        if (compilers[t].has(selCmpt)) {\n            cb(compilers[t]);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3Jtcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21waWxlL3NlbGVjdGlvbi90cmFuc2Zvcm1zL3RyYW5zZm9ybXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLE9BQU8sTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxPQUFPLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUM5QixPQUFPLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDOUIsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sSUFBSSxNQUFNLFFBQVEsQ0FBQztBQUMxQixJQUFNLFNBQVMsR0FBNEIsRUFBQyxPQUFPLFNBQUEsRUFBRSxNQUFNLFFBQUEsRUFBRSxNQUFNLFFBQUE7SUFDakUsU0FBUyxXQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUUsTUFBTSxRQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUMsQ0FBQztBQUVwQyxNQUFNLDJCQUEyQixPQUEyQixFQUFFLEVBQW1DO0lBQy9GLEtBQUssSUFBTSxDQUFDLElBQUksU0FBUyxFQUFFO1FBQ3pCLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM3QixFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1NlbGVjdGlvbkRlZn0gZnJvbSAnLi4vLi4vLi4vc2VsZWN0aW9uJztcbmltcG9ydCB7RGljdH0gZnJvbSAnLi4vLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnU2lnbmFsfSBmcm9tICcuLi8uLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuLi8uLi9tb2RlbCc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vLi4vdW5pdCc7XG5pbXBvcnQge1NlbGVjdGlvbkNvbXBvbmVudH0gZnJvbSAnLi4vc2VsZWN0aW9uJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zZm9ybUNvbXBpbGVyIHtcbiAgaGFzOiAoc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50IHwgU2VsZWN0aW9uRGVmKSA9PiBib29sZWFuO1xuICBwYXJzZT86IChtb2RlbDogVW5pdE1vZGVsLCBkZWY6IFNlbGVjdGlvbkRlZiwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50KSA9PiB2b2lkO1xuICBzaWduYWxzPzogKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCwgc2lnbmFsczogVmdTaWduYWxbXSkgPT4gVmdTaWduYWxbXTtcbiAgdG9wTGV2ZWxTaWduYWxzPzogKG1vZGVsOiBNb2RlbCwgc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50LCBzaWduYWxzOiBWZ1NpZ25hbFtdKSA9PiBWZ1NpZ25hbFtdO1xuICBtb2RpZnlFeHByPzogKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6IFNlbGVjdGlvbkNvbXBvbmVudCwgZXhwcjogc3RyaW5nKSA9PiBzdHJpbmc7XG4gIG1hcmtzPzogKG1vZGVsOiBVbml0TW9kZWwsIHNlbENtcHQ6U2VsZWN0aW9uQ29tcG9uZW50LCBtYXJrczogYW55W10pID0+IGFueVtdO1xufVxuXG5pbXBvcnQgaW5wdXRzIGZyb20gJy4vaW5wdXRzJztcbmltcG9ydCBuZWFyZXN0IGZyb20gJy4vbmVhcmVzdCc7XG5pbXBvcnQgcHJvamVjdCBmcm9tICcuL3Byb2plY3QnO1xuaW1wb3J0IHNjYWxlcyBmcm9tICcuL3NjYWxlcyc7XG5pbXBvcnQgdG9nZ2xlIGZyb20gJy4vdG9nZ2xlJztcbmltcG9ydCB0cmFuc2xhdGUgZnJvbSAnLi90cmFuc2xhdGUnO1xuaW1wb3J0IHpvb20gZnJvbSAnLi96b29tJztcbmNvbnN0IGNvbXBpbGVyczogRGljdDxUcmFuc2Zvcm1Db21waWxlcj4gPSB7cHJvamVjdCwgdG9nZ2xlLCBzY2FsZXMsXG4gIHRyYW5zbGF0ZSwgem9vbSwgaW5wdXRzLCBuZWFyZXN0fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZvckVhY2hUcmFuc2Zvcm0oc2VsQ21wdDogU2VsZWN0aW9uQ29tcG9uZW50LCBjYjogKHR4OiBUcmFuc2Zvcm1Db21waWxlcikgPT4gdm9pZCkge1xuICBmb3IgKGNvbnN0IHQgaW4gY29tcGlsZXJzKSB7XG4gICAgaWYgKGNvbXBpbGVyc1t0XS5oYXMoc2VsQ21wdCkpIHtcbiAgICAgIGNiKGNvbXBpbGVyc1t0XSk7XG4gICAgfVxuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { selector as parseSelector } from 'vega-event-selector';\nimport { isString, stringValue } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { warn } from '../../log';\nimport { SELECTION_ID } from '../../selection';\nimport { accessPathWithDatum, logicalExpr, varName } from '../../util';\nimport { isFacetModel, isUnitModel } from '../model';\nimport intervalCompiler from './interval';\nimport multiCompiler from './multi';\nimport singleCompiler from './single';\nimport { forEachTransform } from './transforms/transforms';\nexport var STORE = '_store';\nexport var TUPLE = '_tuple';\nexport var MODIFY = '_modify';\nexport var SELECTION_DOMAIN = '_selection_domain_';\nexport function parseUnitSelection(model, selDefs) {\n    var selCmpts = {};\n    var selectionConfig = model.config.selection;\n    var _loop_1 = function (name_1) {\n        if (!selDefs.hasOwnProperty(name_1)) {\n            return \"continue\";\n        }\n        var selDef = selDefs[name_1];\n        var cfg = selectionConfig[selDef.type];\n        // Set default values from config if a property hasn't been specified,\n        // or if it is true. E.g., \"translate\": true should use the default\n        // event handlers for translate. However, true may be a valid value for\n        // a property (e.g., \"nearest\": true).\n        for (var key in cfg) {\n            // A selection should contain either `encodings` or `fields`, only use\n            // default values for these two values if neither of them is specified.\n            if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {\n                continue;\n            }\n            if (key === 'mark') {\n                selDef[key] = tslib_1.__assign({}, cfg[key], selDef[key]);\n            }\n            if (selDef[key] === undefined || selDef[key] === true) {\n                selDef[key] = cfg[key] || selDef[key];\n            }\n        }\n        name_1 = varName(name_1);\n        var selCmpt = selCmpts[name_1] = tslib_1.__assign({}, selDef, { name: name_1, events: isString(selDef.on) ? parseSelector(selDef.on, 'scope') : selDef.on });\n        forEachTransform(selCmpt, function (txCompiler) {\n            if (txCompiler.parse) {\n                txCompiler.parse(model, selDef, selCmpt);\n            }\n        });\n    };\n    for (var name_1 in selDefs) {\n        _loop_1(name_1);\n    }\n    return selCmpts;\n}\nexport function assembleUnitSelectionSignals(model, signals) {\n    forEachSelection(model, function (selCmpt, selCompiler) {\n        var name = selCmpt.name;\n        var modifyExpr = selCompiler.modifyExpr(model, selCmpt);\n        signals.push.apply(signals, selCompiler.signals(model, selCmpt));\n        forEachTransform(selCmpt, function (txCompiler) {\n            if (txCompiler.signals) {\n                signals = txCompiler.signals(model, selCmpt, signals);\n            }\n            if (txCompiler.modifyExpr) {\n                modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);\n            }\n        });\n        signals.push({\n            name: name + MODIFY,\n            on: [{\n                    events: { signal: name + TUPLE },\n                    update: \"modify(\" + stringValue(selCmpt.name + STORE) + \", \" + modifyExpr + \")\"\n                }]\n        });\n    });\n    var facetModel = getFacetModel(model);\n    if (signals.length && facetModel) {\n        var name_2 = stringValue(facetModel.getName('cell'));\n        signals.unshift({\n            name: 'facet',\n            value: {},\n            on: [{\n                    events: parseSelector('mousemove', 'scope'),\n                    update: \"isTuple(facet) ? facet : group(\" + name_2 + \").datum\"\n                }]\n        });\n    }\n    return signals;\n}\nexport function assembleTopLevelSignals(model, signals) {\n    var needsUnit = false;\n    forEachSelection(model, function (selCmpt, selCompiler) {\n        if (selCompiler.topLevelSignals) {\n            signals = selCompiler.topLevelSignals(model, selCmpt, signals);\n        }\n        forEachTransform(selCmpt, function (txCompiler) {\n            if (txCompiler.topLevelSignals) {\n                signals = txCompiler.topLevelSignals(model, selCmpt, signals);\n            }\n        });\n        needsUnit = true;\n    });\n    if (needsUnit) {\n        var hasUnit = signals.filter(function (s) { return s.name === 'unit'; });\n        if (!(hasUnit.length)) {\n            signals.unshift({\n                name: 'unit',\n                value: {},\n                on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]\n            });\n        }\n    }\n    return signals;\n}\nexport function assembleUnitSelectionData(model, data) {\n    forEachSelection(model, function (selCmpt) {\n        var contains = data.filter(function (d) { return d.name === selCmpt.name + STORE; });\n        if (!contains.length) {\n            data.push({ name: selCmpt.name + STORE });\n        }\n    });\n    return data;\n}\nexport function assembleUnitSelectionMarks(model, marks) {\n    forEachSelection(model, function (selCmpt, selCompiler) {\n        marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;\n        forEachTransform(selCmpt, function (txCompiler) {\n            if (txCompiler.marks) {\n                marks = txCompiler.marks(model, selCmpt, marks);\n            }\n        });\n    });\n    return marks;\n}\nexport function assembleLayerSelectionMarks(model, marks) {\n    model.children.forEach(function (child) {\n        if (isUnitModel(child)) {\n            marks = assembleUnitSelectionMarks(child, marks);\n        }\n    });\n    return marks;\n}\nexport function selectionPredicate(model, selections, dfnode) {\n    var stores = [];\n    function expr(name) {\n        var vname = varName(name);\n        var selCmpt = model.getSelectionComponent(vname, name);\n        var store = stringValue(vname + STORE);\n        if (selCmpt.timeUnit) {\n            var child = dfnode || model.component.data.raw;\n            var tunode = selCmpt.timeUnit.clone();\n            if (child.parent) {\n                tunode.insertAsParentOf(child);\n            }\n            else {\n                child.parent = tunode;\n            }\n        }\n        if (selCmpt.empty !== 'none') {\n            stores.push(store);\n        }\n        return compiler(selCmpt.type).predicate + (\"(\" + store + \", datum\") +\n            (selCmpt.resolve === 'global' ? ')' : \", \" + stringValue(selCmpt.resolve) + \")\");\n    }\n    var predicateStr = logicalExpr(selections, expr);\n    return (stores.length\n        ? '!(' + stores.map(function (s) { return \"length(data(\" + s + \"))\"; }).join(' || ') + ') || '\n        : '') + (\"(\" + predicateStr + \")\");\n}\n// Selections are parsed _after_ scales. If a scale domain is set to\n// use a selection, the SELECTION_DOMAIN constant is used as the\n// domainRaw.signal during scale.parse and then replaced with the necessary\n// selection expression function during scale.assemble. To not pollute the\n// type signatures to account for this setup, the selection domain definition\n// is coerced to a string and appended to SELECTION_DOMAIN.\nexport function isRawSelectionDomain(domainRaw) {\n    return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;\n}\nexport function selectionScaleDomain(model, domainRaw) {\n    var selDomain = JSON.parse(domainRaw.signal.replace(SELECTION_DOMAIN, ''));\n    var name = varName(selDomain.selection);\n    var selCmpt = model.component.selection && model.component.selection[name];\n    if (selCmpt) {\n        warn('Use \"bind\": \"scales\" to setup a binding for scales and selections within the same view.');\n    }\n    else {\n        selCmpt = model.getSelectionComponent(name, selDomain.selection);\n        if (!selDomain.encoding && !selDomain.field) {\n            selDomain.field = selCmpt.project[0].field;\n            if (selCmpt.project.length > 1) {\n                warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' +\n                    (\"Using \\\"field\\\": \" + stringValue(selDomain.field) + \".\"));\n            }\n        }\n        return {\n            signal: compiler(selCmpt.type).scaleDomain +\n                (\"(\" + stringValue(name + STORE) + \", \" + stringValue(selDomain.encoding || null) + \", \") +\n                stringValue(selDomain.field || null) +\n                (selCmpt.resolve === 'global' ? ')' : \", \" + stringValue(selCmpt.resolve) + \")\")\n        };\n    }\n    return { signal: 'null' };\n}\n// Utility functions\nfunction forEachSelection(model, cb) {\n    var selections = model.component.selection;\n    for (var name_3 in selections) {\n        if (selections.hasOwnProperty(name_3)) {\n            var sel = selections[name_3];\n            cb(sel, compiler(sel.type));\n        }\n    }\n}\nfunction compiler(type) {\n    switch (type) {\n        case 'single':\n            return singleCompiler;\n        case 'multi':\n            return multiCompiler;\n        case 'interval':\n            return intervalCompiler;\n    }\n    return null;\n}\nfunction getFacetModel(model) {\n    var parent = model.parent;\n    while (parent) {\n        if (isFacetModel(parent)) {\n            break;\n        }\n        parent = parent.parent;\n    }\n    return parent;\n}\nexport function unitName(model) {\n    var name = stringValue(model.name);\n    var facet = getFacetModel(model);\n    if (facet) {\n        name += (facet.facet.row ? \" + '_' + (\" + accessPathWithDatum(facet.vgField('row'), 'facet') + \")\" : '')\n            + (facet.facet.column ? \" + '_' + (\" + accessPathWithDatum(facet.vgField('column'), 'facet') + \")\" : '');\n    }\n    return name;\n}\nexport function requiresSelectionId(model) {\n    var identifier = false;\n    forEachSelection(model, function (selCmpt) {\n        identifier = identifier || selCmpt.project.some(function (proj) { return proj.field === SELECTION_ID; });\n    });\n    return identifier;\n}\nexport function channelSignalName(selCmpt, channel, range) {\n    var sgNames = selCmpt._signalNames || (selCmpt._signalNames = {});\n    if (sgNames[channel] && sgNames[channel][range]) {\n        return sgNames[channel][range];\n    }\n    sgNames[channel] = sgNames[channel] || {};\n    var basename = varName(selCmpt.name + '_' + (range === 'visual' ? channel : selCmpt.fields[channel]));\n    var name = basename;\n    var counter = 1;\n    while (sgNames[name]) {\n        name = basename + \"_\" + counter++;\n    }\n    return (sgNames[name] = sgNames[channel][range] = name);\n}\nexport function positionalProjections(selCmpt) {\n    var x = null;\n    var xi = null;\n    var y = null;\n    var yi = null;\n    selCmpt.project.forEach(function (p, i) {\n        if (p.channel === X) {\n            x = p;\n            xi = i;\n        }\n        else if (p.channel === Y) {\n            y = p;\n            yi = i;\n        }\n    });\n    return { x: x, xi: xi, y: y, yi: yi };\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray, isString } from 'vega-util';\nimport { selectionPredicate } from './compile/selection/selection';\nimport { dateTimeExpr, isDateTime } from './datetime';\nimport { vgField } from './fielddef';\nimport { fieldExpr as timeUnitFieldExpr, getLocalTimeUnit, isLocalSingleTimeUnit, isUtcSingleTimeUnit, normalizeTimeUnit } from './timeunit';\nimport { logicalExpr } from './util';\nexport function isSelectionPredicate(predicate) {\n    return predicate && predicate['selection'];\n}\nexport function isFieldEqualPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.equal !== undefined;\n}\nexport function isFieldLTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lt !== undefined;\n}\nexport function isFieldLTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lte !== undefined;\n}\nexport function isFieldGTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gt !== undefined;\n}\nexport function isFieldGTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gte !== undefined;\n}\nexport function isFieldRangePredicate(predicate) {\n    if (predicate && predicate.field) {\n        if (isArray(predicate.range) && predicate.range.length === 2) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isFieldOneOfPredicate(predicate) {\n    return predicate && !!predicate.field && (isArray(predicate.oneOf) ||\n        isArray(predicate.in) // backward compatibility\n    );\n}\nexport function isFieldPredicate(predicate) {\n    return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);\n}\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model, filterOp, node) {\n    return logicalExpr(filterOp, function (predicate) {\n        if (isString(predicate)) {\n            return predicate;\n        }\n        else if (isSelectionPredicate(predicate)) {\n            return selectionPredicate(model, predicate.selection, node);\n        }\n        else { // Filter Object\n            return fieldFilterExpression(predicate);\n        }\n    });\n}\n// This method is used by Voyager.  Do not change its behavior without changing Voyager.\nexport function fieldFilterExpression(predicate, useInRange) {\n    if (useInRange === void 0) { useInRange = true; }\n    var fieldExpr = predicate.timeUnit ?\n        // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n        // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n        // TODO: support utc\n        ('time(' + timeUnitFieldExpr(predicate.timeUnit, predicate.field) + ')') :\n        vgField(predicate, { expr: 'datum' });\n    if (isFieldEqualPredicate(predicate)) {\n        return fieldExpr + '===' + valueExpr(predicate.equal, predicate.timeUnit);\n    }\n    else if (isFieldLTPredicate(predicate)) {\n        var upper = predicate.lt;\n        return fieldExpr + \"<\" + valueExpr(upper, predicate.timeUnit);\n    }\n    else if (isFieldGTPredicate(predicate)) {\n        var lower = predicate.gt;\n        return fieldExpr + \">\" + valueExpr(lower, predicate.timeUnit);\n    }\n    else if (isFieldLTEPredicate(predicate)) {\n        var upper = predicate.lte;\n        return fieldExpr + \"<=\" + valueExpr(upper, predicate.timeUnit);\n    }\n    else if (isFieldGTEPredicate(predicate)) {\n        var lower = predicate.gte;\n        return fieldExpr + \">=\" + valueExpr(lower, predicate.timeUnit);\n    }\n    else if (isFieldOneOfPredicate(predicate)) {\n        // \"oneOf\" was formerly \"in\" -- so we need to add backward compatibility\n        var oneOf = predicate.oneOf || predicate['in'];\n        return 'indexof([' +\n            oneOf.map(function (v) { return valueExpr(v, predicate.timeUnit); }).join(',') +\n            '], ' + fieldExpr + ') !== -1';\n    }\n    else if (isFieldRangePredicate(predicate)) {\n        var lower = predicate.range[0];\n        var upper = predicate.range[1];\n        if (lower !== null && upper !== null && useInRange) {\n            return 'inrange(' + fieldExpr + ', [' +\n                valueExpr(lower, predicate.timeUnit) + ', ' +\n                valueExpr(upper, predicate.timeUnit) + '])';\n        }\n        var exprs = [];\n        if (lower !== null) {\n            exprs.push(fieldExpr + \" >= \" + valueExpr(lower, predicate.timeUnit));\n        }\n        if (upper !== null) {\n            exprs.push(fieldExpr + \" <= \" + valueExpr(upper, predicate.timeUnit));\n        }\n        return exprs.length > 0 ? exprs.join(' && ') : 'true';\n    }\n    /* istanbul ignore next: it should never reach here */\n    throw new Error(\"Invalid field predicate: \" + JSON.stringify(predicate));\n}\nfunction valueExpr(v, timeUnit) {\n    if (isDateTime(v)) {\n        var expr = dateTimeExpr(v, true);\n        return 'time(' + expr + ')';\n    }\n    if (isLocalSingleTimeUnit(timeUnit)) {\n        var datetime = {};\n        datetime[timeUnit] = v;\n        var expr = dateTimeExpr(datetime, true);\n        return 'time(' + expr + ')';\n    }\n    else if (isUtcSingleTimeUnit(timeUnit)) {\n        return valueExpr(v, getLocalTimeUnit(timeUnit));\n    }\n    return JSON.stringify(v);\n}\nexport function normalizePredicate(f) {\n    if (isFieldPredicate(f) && f.timeUnit) {\n        return tslib_1.__assign({}, f, { timeUnit: normalizeTimeUnit(f.timeUnit) });\n    }\n    return f;\n}\n//# sourceMappingURL=data:application/json;base64,","import { normalizeLogicalOperand } from './logical';\nimport { normalizePredicate } from './predicate';\nexport function isFilter(t) {\n    return t['filter'] !== undefined;\n}\nexport function isLookup(t) {\n    return t['lookup'] !== undefined;\n}\nexport function isWindow(t) {\n    return t['window'] !== undefined;\n}\nexport function isCalculate(t) {\n    return t['calculate'] !== undefined;\n}\nexport function isBin(t) {\n    return !!t['bin'];\n}\nexport function isTimeUnit(t) {\n    return t['timeUnit'] !== undefined;\n}\nexport function isAggregate(t) {\n    return t['aggregate'] !== undefined;\n}\nexport function isStack(t) {\n    return t['stack'] !== undefined;\n}\nexport function normalizeTransform(transform) {\n    return transform.map(function (t) {\n        if (isFilter(t)) {\n            return {\n                filter: normalizeLogicalOperand(t.filter, normalizePredicate)\n            };\n        }\n        return t;\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { binToString } from '../../bin';\nimport { normalizeBin, vgField } from '../../fielddef';\nimport { duplicate, flatten, keys, vals } from '../../util';\nimport { binFormatExpression, binRequiresRange } from '../common';\nimport { isUnitModel } from '../model';\nimport { DataFlowNode } from './dataflow';\nfunction rangeFormula(model, fieldDef, channel, config) {\n    if (binRequiresRange(fieldDef, channel)) {\n        // read format from axis or legend, if there is no format then use config.numberFormat\n        var guide = isUnitModel(model) ? (model.axis(channel) || model.legend(channel) || {}) : {};\n        var startField = vgField(fieldDef, { expr: 'datum', });\n        var endField = vgField(fieldDef, { expr: 'datum', binSuffix: 'end' });\n        return {\n            formulaAs: vgField(fieldDef, { binSuffix: 'range' }),\n            formula: binFormatExpression(startField, endField, guide.format, config)\n        };\n    }\n    return {};\n}\nfunction binKey(bin, field) {\n    return binToString(bin) + \"_\" + field;\n}\nfunction getSignalsFromModel(model, key) {\n    return {\n        signal: model.getName(key + \"_bins\"),\n        extentSignal: model.getName(key + \"_extent\")\n    };\n}\nfunction isBinTransform(t) {\n    return 'as' in t;\n}\nfunction createBinComponent(t, model) {\n    var as;\n    if (isBinTransform(t)) {\n        as = [t.as, t.as + \"_end\"];\n    }\n    else {\n        as = [vgField(t, {}), vgField(t, { binSuffix: 'end' })];\n    }\n    var bin = normalizeBin(t.bin, undefined) || {};\n    var key = binKey(bin, t.field);\n    var _a = getSignalsFromModel(model, key), signal = _a.signal, extentSignal = _a.extentSignal;\n    var binComponent = tslib_1.__assign({ bin: bin, field: t.field, as: as }, signal ? { signal: signal } : {}, extentSignal ? { extentSignal: extentSignal } : {});\n    return { key: key, binComponent: binComponent };\n}\nvar BinNode = /** @class */ (function (_super) {\n    tslib_1.__extends(BinNode, _super);\n    function BinNode(parent, bins) {\n        var _this = _super.call(this, parent) || this;\n        _this.bins = bins;\n        return _this;\n    }\n    BinNode.prototype.clone = function () {\n        return new BinNode(null, duplicate(this.bins));\n    };\n    BinNode.makeFromEncoding = function (parent, model) {\n        var bins = model.reduceFieldDef(function (binComponentIndex, fieldDef, channel) {\n            if (fieldDef.bin) {\n                var _a = createBinComponent(fieldDef, model), key = _a.key, binComponent = _a.binComponent;\n                binComponentIndex[key] = tslib_1.__assign({}, binComponent, binComponentIndex[key], rangeFormula(model, fieldDef, channel, model.config));\n            }\n            return binComponentIndex;\n        }, {});\n        if (keys(bins).length === 0) {\n            return null;\n        }\n        return new BinNode(parent, bins);\n    };\n    /**\n     * Creates a bin node from BinTransform.\n     * The optional parameter should provide\n     */\n    BinNode.makeFromTransform = function (parent, t, model) {\n        var _a;\n        var _b = createBinComponent(t, model), key = _b.key, binComponent = _b.binComponent;\n        return new BinNode(parent, (_a = {},\n            _a[key] = binComponent,\n            _a));\n    };\n    BinNode.prototype.merge = function (other) {\n        this.bins = tslib_1.__assign({}, this.bins, other.bins);\n        other.remove();\n    };\n    BinNode.prototype.producedFields = function () {\n        var out = {};\n        vals(this.bins).forEach(function (c) {\n            c.as.forEach(function (f) { return out[f] = true; });\n        });\n        return out;\n    };\n    BinNode.prototype.dependentFields = function () {\n        var out = {};\n        vals(this.bins).forEach(function (c) {\n            out[c.field] = true;\n        });\n        return out;\n    };\n    BinNode.prototype.assemble = function () {\n        return flatten(vals(this.bins).map(function (bin) {\n            var transform = [];\n            var binTrans = tslib_1.__assign({ type: 'bin', field: bin.field, as: bin.as, signal: bin.signal }, bin.bin);\n            if (!bin.bin.extent && bin.extentSignal) {\n                transform.push({\n                    type: 'extent',\n                    field: bin.field,\n                    signal: bin.extentSignal\n                });\n                binTrans.extent = { signal: bin.extentSignal };\n            }\n            transform.push(binTrans);\n            if (bin.formula) {\n                transform.push({\n                    type: 'formula',\n                    expr: bin.formula,\n                    as: bin.formulaAs\n                });\n            }\n            return transform;\n        }));\n    };\n    return BinNode;\n}(DataFlowNode));\nexport { BinNode };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { expression } from '../../predicate';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar FilterNode = /** @class */ (function (_super) {\n    tslib_1.__extends(FilterNode, _super);\n    function FilterNode(parent, model, filter) {\n        var _this = _super.call(this, parent) || this;\n        _this.model = model;\n        _this.filter = filter;\n        _this.expr = expression(_this.model, _this.filter, _this);\n        return _this;\n    }\n    FilterNode.prototype.clone = function () {\n        return new FilterNode(null, this.model, duplicate(this.filter));\n    };\n    FilterNode.prototype.assemble = function () {\n        return {\n            type: 'filter',\n            expr: this.expr\n        };\n    };\n    return FilterNode;\n}(DataFlowNode));\nexport { FilterNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBQyxVQUFVLEVBQVksTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBR3JDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFeEM7SUFBZ0Msc0NBQVk7SUFNMUMsb0JBQVksTUFBb0IsRUFBbUIsS0FBWSxFQUFVLE1BQWlDO1FBQTFHLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBRWQ7UUFIa0QsV0FBSyxHQUFMLEtBQUssQ0FBTztRQUFVLFlBQU0sR0FBTixNQUFNLENBQTJCO1FBRXhHLEtBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLEtBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSSxDQUFDLE1BQU0sRUFBRSxLQUFJLENBQUMsQ0FBQzs7SUFDeEQsQ0FBQztJQVBNLDBCQUFLLEdBQVo7UUFDRSxPQUFPLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBT00sNkJBQVEsR0FBZjtRQUNFLE9BQU87WUFDTCxJQUFJLEVBQUUsUUFBUTtZQUNkLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNoQixDQUFDO0lBQ0osQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQWpCRCxDQUFnQyxZQUFZLEdBaUIzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TG9naWNhbE9wZXJhbmR9IGZyb20gJy4uLy4uL2xvZ2ljYWwnO1xuaW1wb3J0IHtleHByZXNzaW9uLCBQcmVkaWNhdGV9IGZyb20gJy4uLy4uL3ByZWRpY2F0ZSc7XG5pbXBvcnQge2R1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnRmlsdGVyVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cbmV4cG9ydCBjbGFzcyBGaWx0ZXJOb2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHJpdmF0ZSBleHByOiBzdHJpbmc7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEZpbHRlck5vZGUobnVsbCwgdGhpcy5tb2RlbCwgZHVwbGljYXRlKHRoaXMuZmlsdGVyKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHJpdmF0ZSByZWFkb25seSBtb2RlbDogTW9kZWwsIHByaXZhdGUgZmlsdGVyOiBMb2dpY2FsT3BlcmFuZDxQcmVkaWNhdGU+KSB7XG4gICAgc3VwZXIocGFyZW50KTtcbiAgICB0aGlzLmV4cHIgPSBleHByZXNzaW9uKHRoaXMubW9kZWwsIHRoaXMuZmlsdGVyLCB0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZSgpOiBWZ0ZpbHRlclRyYW5zZm9ybSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdmaWx0ZXInLFxuICAgICAgZXhwcjogdGhpcy5leHByXG4gICAgfTtcbiAgfVxufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { GEOJSON } from '../../type';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar GeoJSONNode = /** @class */ (function (_super) {\n    tslib_1.__extends(GeoJSONNode, _super);\n    function GeoJSONNode(parent, fields, geojson, signal) {\n        var _this = _super.call(this, parent) || this;\n        _this.fields = fields;\n        _this.geojson = geojson;\n        _this.signal = signal;\n        return _this;\n    }\n    GeoJSONNode.prototype.clone = function () {\n        return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n    };\n    GeoJSONNode.parseAll = function (parent, model) {\n        var geoJsonCounter = 0;\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(function (coordinates) {\n            var pair = coordinates.map(function (channel) { return model.channelHasField(channel) ? model.fieldDef(channel).field : undefined; });\n            if (pair[0] || pair[1]) {\n                parent = new GeoJSONNode(parent, pair, null, model.getName(\"geojson_\" + geoJsonCounter++));\n            }\n        });\n        if (model.channelHasField(SHAPE)) {\n            var fieldDef = model.fieldDef(SHAPE);\n            if (fieldDef.type === GEOJSON) {\n                parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(\"geojson_\" + geoJsonCounter++));\n            }\n        }\n        return parent;\n    };\n    GeoJSONNode.prototype.assemble = function () {\n        return tslib_1.__assign({ type: 'geojson' }, (this.fields ? { fields: this.fields } : {}), (this.geojson ? { geojson: this.geojson } : {}), { signal: this.signal });\n    };\n    return GeoJSONNode;\n}(DataFlowNode));\nexport { GeoJSONNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvanNvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL2RhdGEvZ2VvanNvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFxQixRQUFRLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3BHLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFlBQVksQ0FBQztBQUdyQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXhDO0lBQWlDLHVDQUFZO0lBNEIzQyxxQkFBWSxNQUFvQixFQUFVLE1BQWlCLEVBQVUsT0FBZ0IsRUFBVSxNQUFlO1FBQTlHLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBQ2Q7UUFGeUMsWUFBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLGFBQU8sR0FBUCxPQUFPLENBQVM7UUFBVSxZQUFNLEdBQU4sTUFBTSxDQUFTOztJQUU5RyxDQUFDO0lBN0JNLDJCQUFLLEdBQVo7UUFDRSxPQUFPLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFYSxvQkFBUSxHQUF0QixVQUF1QixNQUFvQixFQUFFLEtBQWdCO1FBQzNELElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQztRQUV2QixDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsV0FBaUM7WUFDekYsSUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FDMUIsVUFBQSxPQUFPLElBQUksT0FBQSxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUExRSxDQUEwRSxDQUN0RixDQUFDO1lBRUYsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN0QixNQUFNLEdBQUcsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxhQUFXLGNBQWMsRUFBSSxDQUFDLENBQUMsQ0FBQzthQUM1RjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2hDLElBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkMsSUFBSSxRQUFRLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtnQkFDN0IsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQVcsY0FBYyxFQUFJLENBQUMsQ0FBQyxDQUFDO2FBQ3RHO1NBQ0Y7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBTU0sOEJBQVEsR0FBZjtRQUNFLDBCQUNFLElBQUksRUFBRSxTQUFTLElBQ1osQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUMxQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQ2hELE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxJQUNuQjtJQUNKLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUF4Q0QsQ0FBaUMsWUFBWSxHQXdDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0dlb1Bvc2l0aW9uQ2hhbm5lbCwgTEFUSVRVREUsIExBVElUVURFMiwgTE9OR0lUVURFLCBMT05HSVRVREUyLCBTSEFQRX0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0dFT0pTT059IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHtkdXBsaWNhdGV9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0dlb0pTT05UcmFuc2Zvcm19IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7RGF0YUZsb3dOb2RlfSBmcm9tICcuL2RhdGFmbG93JztcblxuZXhwb3J0IGNsYXNzIEdlb0pTT05Ob2RlIGV4dGVuZHMgRGF0YUZsb3dOb2RlIHtcbiAgcHVibGljIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgR2VvSlNPTk5vZGUobnVsbCwgZHVwbGljYXRlKHRoaXMuZmllbGRzKSwgdGhpcy5nZW9qc29uLCB0aGlzLnNpZ25hbCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHBhcnNlQWxsKHBhcmVudDogRGF0YUZsb3dOb2RlLCBtb2RlbDogVW5pdE1vZGVsKTogRGF0YUZsb3dOb2RlIHtcbiAgICBsZXQgZ2VvSnNvbkNvdW50ZXIgPSAwO1xuXG4gICAgW1tMT05HSVRVREUsIExBVElUVURFXSwgW0xPTkdJVFVERTIsIExBVElUVURFMl1dLmZvckVhY2goKGNvb3JkaW5hdGVzOiBHZW9Qb3NpdGlvbkNoYW5uZWxbXSkgPT4ge1xuICAgICAgY29uc3QgcGFpciA9IGNvb3JkaW5hdGVzLm1hcChcbiAgICAgICAgY2hhbm5lbCA9PiBtb2RlbC5jaGFubmVsSGFzRmllbGQoY2hhbm5lbCkgPyBtb2RlbC5maWVsZERlZihjaGFubmVsKS5maWVsZCA6IHVuZGVmaW5lZFxuICAgICAgKTtcblxuICAgICAgaWYgKHBhaXJbMF0gfHwgcGFpclsxXSkge1xuICAgICAgICBwYXJlbnQgPSBuZXcgR2VvSlNPTk5vZGUocGFyZW50LCBwYWlyLCBudWxsLCBtb2RlbC5nZXROYW1lKGBnZW9qc29uXyR7Z2VvSnNvbkNvdW50ZXIrK31gKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAobW9kZWwuY2hhbm5lbEhhc0ZpZWxkKFNIQVBFKSkge1xuICAgICAgY29uc3QgZmllbGREZWYgPSBtb2RlbC5maWVsZERlZihTSEFQRSk7XG4gICAgICBpZiAoZmllbGREZWYudHlwZSA9PT0gR0VPSlNPTikge1xuICAgICAgICBwYXJlbnQgPSBuZXcgR2VvSlNPTk5vZGUocGFyZW50LCBudWxsLCBmaWVsZERlZi5maWVsZCwgbW9kZWwuZ2V0TmFtZShgZ2VvanNvbl8ke2dlb0pzb25Db3VudGVyKyt9YCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwYXJlbnQ7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHJpdmF0ZSBmaWVsZHM/OiBzdHJpbmdbXSwgcHJpdmF0ZSBnZW9qc29uPzogc3RyaW5nLCBwcml2YXRlIHNpZ25hbD86IHN0cmluZykge1xuICAgIHN1cGVyKHBhcmVudCk7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdHZW9KU09OVHJhbnNmb3JtIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ2dlb2pzb24nLFxuICAgICAgLi4uKHRoaXMuZmllbGRzID8ge2ZpZWxkczogdGhpcy5maWVsZHN9IDoge30pLFxuICAgICAgLi4uKHRoaXMuZ2VvanNvbiA/IHtnZW9qc29uOiB0aGlzLmdlb2pzb259IDoge30pLFxuICAgICAgc2lnbmFsOiB0aGlzLnNpZ25hbFxuICAgIH07XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2 } from '../../channel';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\nvar GeoPointNode = /** @class */ (function (_super) {\n    tslib_1.__extends(GeoPointNode, _super);\n    function GeoPointNode(parent, projection, fields, as) {\n        var _this = _super.call(this, parent) || this;\n        _this.projection = projection;\n        _this.fields = fields;\n        _this.as = as;\n        return _this;\n    }\n    GeoPointNode.prototype.clone = function () {\n        return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n    };\n    GeoPointNode.parseAll = function (parent, model) {\n        if (!model.projectionName()) {\n            return parent;\n        }\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(function (coordinates) {\n            var pair = coordinates.map(function (channel) { return model.channelHasField(channel) ? model.fieldDef(channel).field : undefined; });\n            var suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n            if (pair[0] || pair[1]) {\n                parent = new GeoPointNode(parent, model.projectionName(), pair, [model.getName('x' + suffix), model.getName('y' + suffix)]);\n            }\n        });\n        return parent;\n    };\n    GeoPointNode.prototype.assemble = function () {\n        return {\n            type: 'geopoint',\n            projection: this.projection,\n            fields: this.fields,\n            as: this.as\n        };\n    };\n    return GeoPointNode;\n}(DataFlowNode));\nexport { GeoPointNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvcG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2dlb3BvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQXFCLFFBQVEsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3RixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBR3JDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFHeEM7SUFBa0Msd0NBQVk7SUFLNUMsc0JBQVksTUFBb0IsRUFBVSxVQUFrQixFQUFVLE1BQWdCLEVBQVUsRUFBWTtRQUE1RyxZQUNFLGtCQUFNLE1BQU0sQ0FBQyxTQUNkO1FBRnlDLGdCQUFVLEdBQVYsVUFBVSxDQUFRO1FBQVUsWUFBTSxHQUFOLE1BQU0sQ0FBVTtRQUFVLFFBQUUsR0FBRixFQUFFLENBQVU7O0lBRTVHLENBQUM7SUFOTSw0QkFBSyxHQUFaO1FBQ0UsT0FBTyxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBTWEscUJBQVEsR0FBdEIsVUFBdUIsTUFBb0IsRUFBRSxLQUFnQjtRQUMzRCxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxFQUFFO1lBQzNCLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFFRCxDQUFDLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsV0FBaUM7WUFDekYsSUFBTSxJQUFJLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FDMUIsVUFBQSxPQUFPLElBQUksT0FBQSxLQUFLLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUExRSxDQUEwRSxDQUN0RixDQUFDO1lBRUYsSUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFFeEQsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN0QixNQUFNLEdBQUcsSUFBSSxZQUFZLENBQ3ZCLE1BQU0sRUFDTixLQUFLLENBQUMsY0FBYyxFQUFFLEVBQ3RCLElBQUksRUFDSixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQzNELENBQUM7YUFDSDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVNLCtCQUFRLEdBQWY7UUFDRSxPQUFPO1lBQ0wsSUFBSSxFQUFFLFVBQVU7WUFDaEIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUU7U0FDWixDQUFDO0lBQ0osQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQTFDRCxDQUFrQyxZQUFZLEdBMEM3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7R2VvUG9zaXRpb25DaGFubmVsLCBMQVRJVFVERSwgTEFUSVRVREUyLCBMT05HSVRVREUsIExPTkdJVFVERTJ9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtkdXBsaWNhdGV9IGZyb20gJy4uLy4uL3V0aWwnO1xuaW1wb3J0IHtWZ0dlb1BvaW50VHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cblxuZXhwb3J0IGNsYXNzIEdlb1BvaW50Tm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEdlb1BvaW50Tm9kZShudWxsLCB0aGlzLnByb2plY3Rpb24sIGR1cGxpY2F0ZSh0aGlzLmZpZWxkcyksIGR1cGxpY2F0ZSh0aGlzLmFzKSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwYXJlbnQ6IERhdGFGbG93Tm9kZSwgcHJpdmF0ZSBwcm9qZWN0aW9uOiBzdHJpbmcsIHByaXZhdGUgZmllbGRzOiBzdHJpbmdbXSwgcHJpdmF0ZSBhczogc3RyaW5nW10pIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwYXJzZUFsbChwYXJlbnQ6IERhdGFGbG93Tm9kZSwgbW9kZWw6IFVuaXRNb2RlbCk6IERhdGFGbG93Tm9kZSB7XG4gICAgaWYgKCFtb2RlbC5wcm9qZWN0aW9uTmFtZSgpKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cblxuICAgIFtbTE9OR0lUVURFLCBMQVRJVFVERV0sIFtMT05HSVRVREUyLCBMQVRJVFVERTJdXS5mb3JFYWNoKChjb29yZGluYXRlczogR2VvUG9zaXRpb25DaGFubmVsW10pID0+IHtcbiAgICAgIGNvbnN0IHBhaXIgPSBjb29yZGluYXRlcy5tYXAoXG4gICAgICAgIGNoYW5uZWwgPT4gbW9kZWwuY2hhbm5lbEhhc0ZpZWxkKGNoYW5uZWwpID8gbW9kZWwuZmllbGREZWYoY2hhbm5lbCkuZmllbGQgOiB1bmRlZmluZWRcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN1ZmZpeCA9IGNvb3JkaW5hdGVzWzBdID09PSBMT05HSVRVREUyID8gJzInIDogJyc7XG5cbiAgICAgIGlmIChwYWlyWzBdIHx8IHBhaXJbMV0pIHtcbiAgICAgICAgcGFyZW50ID0gbmV3IEdlb1BvaW50Tm9kZShcbiAgICAgICAgICBwYXJlbnQsXG4gICAgICAgICAgbW9kZWwucHJvamVjdGlvbk5hbWUoKSxcbiAgICAgICAgICBwYWlyLFxuICAgICAgICAgIFttb2RlbC5nZXROYW1lKCd4JyArIHN1ZmZpeCksIG1vZGVsLmdldE5hbWUoJ3knICsgc3VmZml4KV1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwYXJlbnQ7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdHZW9Qb2ludFRyYW5zZm9ybSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdnZW9wb2ludCcsXG4gICAgICBwcm9qZWN0aW9uOiB0aGlzLnByb2plY3Rpb24sXG4gICAgICBmaWVsZHM6IHRoaXMuZmllbGRzLFxuICAgICAgYXM6IHRoaXMuYXNcbiAgICB9O1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { SELECTION_ID } from '../../selection';\nimport { DataFlowNode } from './dataflow';\nvar IdentifierNode = /** @class */ (function (_super) {\n    tslib_1.__extends(IdentifierNode, _super);\n    function IdentifierNode(parent) {\n        return _super.call(this, parent) || this;\n    }\n    IdentifierNode.prototype.clone = function () {\n        return new IdentifierNode(null);\n    };\n    IdentifierNode.prototype.producedFields = function () {\n        var _a;\n        return _a = {}, _a[SELECTION_ID] = true, _a;\n    };\n    IdentifierNode.prototype.assemble = function () {\n        return { type: 'identifier', as: SELECTION_ID };\n    };\n    return IdentifierNode;\n}(DataFlowNode));\nexport { IdentifierNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZW50aWZpZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2luZGVudGlmaWVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFHN0MsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFlBQVksQ0FBQztBQUV4QztJQUFvQywwQ0FBWTtJQUs5Qyx3QkFBWSxNQUFvQjtlQUM5QixrQkFBTSxNQUFNLENBQUM7SUFDZixDQUFDO0lBTk0sOEJBQUssR0FBWjtRQUNFLE9BQU8sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQU1NLHVDQUFjLEdBQXJCOztRQUNFLGdCQUFRLEdBQUMsWUFBWSxJQUFHLElBQUksS0FBRTtJQUNoQyxDQUFDO0lBRU0saUNBQVEsR0FBZjtRQUNFLE9BQU8sRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUMsQ0FBQztJQUNoRCxDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBaEJELENBQW9DLFlBQVksR0FnQi9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTRUxFQ1RJT05fSUR9IGZyb20gJy4uLy4uL3NlbGVjdGlvbic7XG5pbXBvcnQge1N0cmluZ1NldH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnSWRlbnRpZmllclRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtEYXRhRmxvd05vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuXG5leHBvcnQgY2xhc3MgSWRlbnRpZmllck5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBJZGVudGlmaWVyTm9kZShudWxsKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUZsb3dOb2RlKSB7XG4gICAgc3VwZXIocGFyZW50KTtcbiAgfVxuXG4gIHB1YmxpYyBwcm9kdWNlZEZpZWxkcygpOiBTdHJpbmdTZXQge1xuICAgIHJldHVybiB7W1NFTEVDVElPTl9JRF06IHRydWV9O1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnSWRlbnRpZmllclRyYW5zZm9ybSB7XG4gICAgcmV0dXJuIHt0eXBlOiAnaWRlbnRpZmllcicsIGFzOiBTRUxFQ1RJT05fSUR9O1xuICB9XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { Split } from '../split';\n/**\n * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)\n * about how fields have been parsed or whether they have been derived in a transforms. We use this to not parse the\n * same field again (or differently).\n */\nvar AncestorParse = /** @class */ (function (_super) {\n    tslib_1.__extends(AncestorParse, _super);\n    function AncestorParse(explicit, implicit, parseNothing) {\n        if (explicit === void 0) { explicit = {}; }\n        if (implicit === void 0) { implicit = {}; }\n        if (parseNothing === void 0) { parseNothing = false; }\n        var _this = _super.call(this, explicit, implicit) || this;\n        _this.explicit = explicit;\n        _this.implicit = implicit;\n        _this.parseNothing = parseNothing;\n        return _this;\n    }\n    AncestorParse.prototype.clone = function () {\n        var clone = _super.prototype.clone.call(this);\n        clone.parseNothing = this.parseNothing;\n        return clone;\n    };\n    return AncestorParse;\n}(Split));\nexport { AncestorParse };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBa0QvQjs7OztHQUlHO0FBQ0g7SUFBbUMseUNBQW1CO0lBQ3BELHVCQUNrQixRQUFvQyxFQUNwQyxRQUFvQyxFQUM3QyxZQUFvQjtRQUZYLHlCQUFBLEVBQUEsYUFBb0M7UUFDcEMseUJBQUEsRUFBQSxhQUFvQztRQUM3Qyw2QkFBQSxFQUFBLG9CQUFvQjtRQUg3QixZQUtFLGtCQUFNLFFBQVEsRUFBRSxRQUFRLENBQUMsU0FDMUI7UUFMaUIsY0FBUSxHQUFSLFFBQVEsQ0FBNEI7UUFDcEMsY0FBUSxHQUFSLFFBQVEsQ0FBNEI7UUFDN0Msa0JBQVksR0FBWixZQUFZLENBQVE7O0lBRzdCLENBQUM7SUFFTSw2QkFBSyxHQUFaO1FBQ0UsSUFBTSxLQUFLLEdBQUcsaUJBQU0sS0FBSyxXQUFtQixDQUFDO1FBQzdDLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUN2QyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFDSCxvQkFBQztBQUFELENBQUMsQUFkRCxDQUFtQyxLQUFLLEdBY3ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaWN0fSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7U3BsaXR9IGZyb20gJy4uL3NwbGl0JztcbmltcG9ydCB7T3V0cHV0Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5pbXBvcnQge0ZhY2V0Tm9kZX0gZnJvbSAnLi9mYWNldCc7XG5pbXBvcnQge1NvdXJjZU5vZGV9IGZyb20gJy4vc291cmNlJztcblxuZXhwb3J0IGludGVyZmFjZSBEYXRhQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIEEgZGljdGlvbmFyeSBvZiBzb3VyY2VzIGluZGV4ZWQgYnkgYSBoYXNoLlxuICAgKi9cbiAgc291cmNlczogRGljdDxTb3VyY2VOb2RlPjtcblxuICAvKipcbiAgICogUmVnaXN0cnkgb2Ygb3V0cHV0IG5vZGVzLlxuICAgKi9cbiAgb3V0cHV0Tm9kZXM6IERpY3Q8T3V0cHV0Tm9kZSB8IEZhY2V0Tm9kZT47XG5cbiAgLyoqXG4gICAqIEhvdyBvZnRlbiBpcyBhbiBvdXRwdXQgbm9kZSB1c2VkLiBJZiBpdCBpcyBub3QgdXNlZCwgd2UgZG9uJ3QgbmVlZCB0b1xuICAgKiBpbnN0YW50aWF0ZSBpdCBpbiB0aGUgYXNzZW1ibGUgc3RlcC5cbiAgICovXG4gIG91dHB1dE5vZGVSZWZDb3VudHM6IERpY3Q8bnVtYmVyPjtcblxuICAvKipcbiAgICogVGhlIG91dHB1dCBub2RlIGJlZm9yZSBhZ2dyZWdhdGlvbi5cbiAgICovXG4gIHJhdz86IE91dHB1dE5vZGU7XG5cbiAgLyoqXG4gICAqIFRoZSBtYWluIG91dHB1dCBub2RlLlxuICAgKi9cbiAgbWFpbj86IE91dHB1dE5vZGU7XG5cbiAgLyoqXG4gICAqIEZvciBmYWNldHMsIHdlIHN0b3JlIHRoZSByZWZlcmVuY2UgdG8gdGhlIHJvb3Qgbm9kZS5cbiAgICovXG4gIGZhY2V0Um9vdD86IEZhY2V0Tm9kZTtcblxuICAvKipcbiAgICogVHJ1ZSBpZiB0aGUgZGF0YSBmb3IgdGhpcyBtb2RlbCBpcyBmYWNldGVkLlxuICAgKiBBIGRhdGFzZXQgaXMgZmFjZXRlZCBpZiBhIHBhcmVudCBtb2RlbCBpcyBhIGZhY2V0IGFuZCBubyBuZXcgZGF0YXNldCBpc1xuICAgKiBkZWZpbmVkICh3aGljaCB3b3VsZCBtYWtlIHRoZSBkYXRhIHVuZmFjZXRlZCBhZ2FpbikuXG4gICAqL1xuICBpc0ZhY2V0ZWQ6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFBhcnNlIHByb3BlcnRpZXMgcGFzc2VkIGRvd24gZnJvbSBhbmNlc3RvcnMuIEhlbHBzIHVzIHRvIGtlZXAgdHJhY2sgb2Ygd2hhdCBoYXMgYmVlbiBwYXJzZWQgb3IgaXMgZGVyaXZlZC5cbiAgICovXG4gIGFuY2VzdG9yUGFyc2U/OiBBbmNlc3RvclBhcnNlO1xufVxuXG4vKipcbiAqIENsYXNzIHRvIHRyYWNrIGludGVyZXN0aW5nIHByb3BlcnRpZXMgKHNlZSBodHRwczovLzE1NzIxLmNvdXJzZXMuY3MuY211LmVkdS9zcHJpbmcyMDE2L3BhcGVycy9ncmFlZmUtaWVlZTE5OTUucGRmKVxuICogYWJvdXQgaG93IGZpZWxkcyBoYXZlIGJlZW4gcGFyc2VkIG9yIHdoZXRoZXIgdGhleSBoYXZlIGJlZW4gZGVyaXZlZCBpbiBhIHRyYW5zZm9ybXMuIFdlIHVzZSB0aGlzIHRvIG5vdCBwYXJzZSB0aGVcbiAqIHNhbWUgZmllbGQgYWdhaW4gKG9yIGRpZmZlcmVudGx5KS5cbiAqL1xuZXhwb3J0IGNsYXNzIEFuY2VzdG9yUGFyc2UgZXh0ZW5kcyBTcGxpdDxEaWN0PHN0cmluZz4+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGV4cGxpY2l0OiBQYXJ0aWFsPERpY3Q8c3RyaW5nPj4gPSB7fSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW1wbGljaXQ6IFBhcnRpYWw8RGljdDxzdHJpbmc+PiA9IHt9LFxuICAgIHB1YmxpYyBwYXJzZU5vdGhpbmcgPSBmYWxzZVxuICApIHtcbiAgICBzdXBlcihleHBsaWNpdCwgaW1wbGljaXQpO1xuICB9XG5cbiAgcHVibGljIGNsb25lKCk6IEFuY2VzdG9yUGFyc2Uge1xuICAgIGNvbnN0IGNsb25lID0gc3VwZXIuY2xvbmUoKSBhcyBBbmNlc3RvclBhcnNlO1xuICAgIGNsb25lLnBhcnNlTm90aGluZyA9IHRoaXMucGFyc2VOb3RoaW5nO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { isString, toSet } from 'vega-util';\nimport * as log from '../../log';\nimport { DataFlowNode, OutputNode } from './dataflow';\nimport { SourceNode } from './source';\nvar LookupNode = /** @class */ (function (_super) {\n    tslib_1.__extends(LookupNode, _super);\n    function LookupNode(parent, transform, secondary) {\n        var _this = _super.call(this, parent) || this;\n        _this.transform = transform;\n        _this.secondary = secondary;\n        return _this;\n    }\n    LookupNode.make = function (parent, model, transform, counter) {\n        var sources = model.component.data.sources;\n        var s = new SourceNode(transform.from.data);\n        var fromSource = sources[s.hash()];\n        if (!fromSource) {\n            sources[s.hash()] = s;\n            fromSource = s;\n        }\n        var fromOutputName = model.getName(\"lookup_\" + counter);\n        var fromOutputNode = new OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);\n        model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n        return new LookupNode(parent, transform, fromOutputNode.getSource());\n    };\n    LookupNode.prototype.producedFields = function () {\n        return toSet(this.transform.from.fields || ((this.transform.as instanceof Array) ? this.transform.as : [this.transform.as]));\n    };\n    LookupNode.prototype.assemble = function () {\n        var foreign;\n        if (this.transform.from.fields) {\n            // lookup a few fields and add create a flat output\n            foreign = tslib_1.__assign({ values: this.transform.from.fields }, this.transform.as ? { as: ((this.transform.as instanceof Array) ? this.transform.as : [this.transform.as]) } : {});\n        }\n        else {\n            // lookup full record and nest it\n            var asName = this.transform.as;\n            if (!isString(asName)) {\n                log.warn(log.message.NO_FIELDS_NEEDS_AS);\n                asName = '_lookup';\n            }\n            foreign = {\n                as: [asName]\n            };\n        }\n        return tslib_1.__assign({ type: 'lookup', from: this.secondary, key: this.transform.from.key, fields: [this.transform.lookup] }, foreign, (this.transform.default ? { default: this.transform.default } : {}));\n    };\n    return LookupNode;\n}(DataFlowNode));\nexport { LookupNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS9sb29rdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUUsS0FBSyxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sS0FBSyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBS2pDLE9BQU8sRUFBQyxZQUFZLEVBQUUsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3BELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFcEM7SUFBZ0Msc0NBQVk7SUFDMUMsb0JBQVksTUFBb0IsRUFBa0IsU0FBMEIsRUFBa0IsU0FBaUI7UUFBL0csWUFDRSxrQkFBTSxNQUFNLENBQUMsU0FDZDtRQUZpRCxlQUFTLEdBQVQsU0FBUyxDQUFpQjtRQUFrQixlQUFTLEdBQVQsU0FBUyxDQUFROztJQUUvRyxDQUFDO0lBRWEsZUFBSSxHQUFsQixVQUFtQixNQUFvQixFQUFFLEtBQVksRUFBRSxTQUEwQixFQUFFLE9BQWU7UUFDaEcsSUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzdDLElBQU0sQ0FBQyxHQUFHLElBQUksVUFBVSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUMsSUFBSSxVQUFVLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLFVBQVUsR0FBRyxDQUFDLENBQUM7U0FDaEI7UUFFRCxJQUFNLGNBQWMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVUsT0FBUyxDQUFDLENBQUM7UUFDMUQsSUFBTSxjQUFjLEdBQUcsSUFBSSxVQUFVLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUV0SCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLEdBQUcsY0FBYyxDQUFDO1FBRWxFLE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxjQUFjLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRU0sbUNBQWMsR0FBckI7UUFDRSxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvSCxDQUFDO0lBRU0sNkJBQVEsR0FBZjtRQUNFLElBQUksT0FBbUMsQ0FBQztRQUV4QyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM5QixtREFBbUQ7WUFDbkQsT0FBTyxzQkFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNwSCxDQUFDO1NBQ0g7YUFBTTtZQUNMLGlDQUFpQztZQUNqQyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztnQkFDekMsTUFBTSxHQUFHLFNBQVMsQ0FBQzthQUNwQjtZQUVELE9BQU8sR0FBRztnQkFDUixFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUM7YUFDYixDQUFDO1NBQ0g7UUFFRCwwQkFDRSxJQUFJLEVBQUUsUUFBUSxFQUNkLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUNwQixHQUFHLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUM1QixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUM1QixPQUFPLEVBQ1AsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQ3BFO0lBQ0osQ0FBQztJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQXpERCxDQUFnQyxZQUFZLEdBeUQzQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNTdHJpbmcsIHRvU2V0fSBmcm9tICd2ZWdhLXV0aWwnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uL2xvZyc7XG5pbXBvcnQge0xvb2t1cFRyYW5zZm9ybX0gZnJvbSAnLi4vLi4vdHJhbnNmb3JtJztcbmltcG9ydCB7U3RyaW5nU2V0fSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdMb29rdXBUcmFuc2Zvcm19IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4uL21vZGVsJztcbmltcG9ydCB7RGF0YUZsb3dOb2RlLCBPdXRwdXROb2RlfSBmcm9tICcuL2RhdGFmbG93JztcbmltcG9ydCB7U291cmNlTm9kZX0gZnJvbSAnLi9zb3VyY2UnO1xuXG5leHBvcnQgY2xhc3MgTG9va3VwTm9kZSBleHRlbmRzIERhdGFGbG93Tm9kZSB7XG4gIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUZsb3dOb2RlLCBwdWJsaWMgcmVhZG9ubHkgdHJhbnNmb3JtOiBMb29rdXBUcmFuc2Zvcm0sIHB1YmxpYyByZWFkb25seSBzZWNvbmRhcnk6IHN0cmluZykge1xuICAgIHN1cGVyKHBhcmVudCk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIG1ha2UocGFyZW50OiBEYXRhRmxvd05vZGUsIG1vZGVsOiBNb2RlbCwgdHJhbnNmb3JtOiBMb29rdXBUcmFuc2Zvcm0sIGNvdW50ZXI6IG51bWJlcikge1xuICAgIGNvbnN0IHNvdXJjZXMgPSBtb2RlbC5jb21wb25lbnQuZGF0YS5zb3VyY2VzO1xuICAgIGNvbnN0IHMgPSBuZXcgU291cmNlTm9kZSh0cmFuc2Zvcm0uZnJvbS5kYXRhKTtcbiAgICBsZXQgZnJvbVNvdXJjZSA9IHNvdXJjZXNbcy5oYXNoKCldO1xuICAgIGlmICghZnJvbVNvdXJjZSkge1xuICAgICAgc291cmNlc1tzLmhhc2goKV0gPSBzO1xuICAgICAgZnJvbVNvdXJjZSA9IHM7XG4gICAgfVxuXG4gICAgY29uc3QgZnJvbU91dHB1dE5hbWUgPSBtb2RlbC5nZXROYW1lKGBsb29rdXBfJHtjb3VudGVyfWApO1xuICAgIGNvbnN0IGZyb21PdXRwdXROb2RlID0gbmV3IE91dHB1dE5vZGUoZnJvbVNvdXJjZSwgZnJvbU91dHB1dE5hbWUsICdsb29rdXAnLCBtb2RlbC5jb21wb25lbnQuZGF0YS5vdXRwdXROb2RlUmVmQ291bnRzKTtcblxuICAgIG1vZGVsLmNvbXBvbmVudC5kYXRhLm91dHB1dE5vZGVzW2Zyb21PdXRwdXROYW1lXSA9IGZyb21PdXRwdXROb2RlO1xuXG4gICAgcmV0dXJuIG5ldyBMb29rdXBOb2RlKHBhcmVudCwgdHJhbnNmb3JtLCBmcm9tT3V0cHV0Tm9kZS5nZXRTb3VyY2UoKSk7XG4gIH1cblxuICBwdWJsaWMgcHJvZHVjZWRGaWVsZHMoKTogU3RyaW5nU2V0IHtcbiAgICByZXR1cm4gdG9TZXQodGhpcy50cmFuc2Zvcm0uZnJvbS5maWVsZHMgfHwgKCh0aGlzLnRyYW5zZm9ybS5hcyBpbnN0YW5jZW9mIEFycmF5KSA/IHRoaXMudHJhbnNmb3JtLmFzIDogW3RoaXMudHJhbnNmb3JtLmFzXSkpO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCk6IFZnTG9va3VwVHJhbnNmb3JtIHtcbiAgICBsZXQgZm9yZWlnbjogUGFydGlhbDxWZ0xvb2t1cFRyYW5zZm9ybT47XG5cbiAgICBpZiAodGhpcy50cmFuc2Zvcm0uZnJvbS5maWVsZHMpIHtcbiAgICAgIC8vIGxvb2t1cCBhIGZldyBmaWVsZHMgYW5kIGFkZCBjcmVhdGUgYSBmbGF0IG91dHB1dFxuICAgICAgZm9yZWlnbiA9IHtcbiAgICAgICAgdmFsdWVzOiB0aGlzLnRyYW5zZm9ybS5mcm9tLmZpZWxkcyxcbiAgICAgICAgLi4uIHRoaXMudHJhbnNmb3JtLmFzID8ge2FzOiAoKHRoaXMudHJhbnNmb3JtLmFzIGluc3RhbmNlb2YgQXJyYXkpID8gdGhpcy50cmFuc2Zvcm0uYXMgOiBbdGhpcy50cmFuc2Zvcm0uYXNdKX0gOiB7fVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbG9va3VwIGZ1bGwgcmVjb3JkIGFuZCBuZXN0IGl0XG4gICAgICBsZXQgYXNOYW1lID0gdGhpcy50cmFuc2Zvcm0uYXM7XG4gICAgICBpZiAoIWlzU3RyaW5nKGFzTmFtZSkpIHtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2UuTk9fRklFTERTX05FRURTX0FTKTtcbiAgICAgICAgYXNOYW1lID0gJ19sb29rdXAnO1xuICAgICAgfVxuXG4gICAgICBmb3JlaWduID0ge1xuICAgICAgICBhczogW2FzTmFtZV1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdsb29rdXAnLFxuICAgICAgZnJvbTogdGhpcy5zZWNvbmRhcnksXG4gICAgICBrZXk6IHRoaXMudHJhbnNmb3JtLmZyb20ua2V5LFxuICAgICAgZmllbGRzOiBbdGhpcy50cmFuc2Zvcm0ubG9va3VwXSxcbiAgICAgIC4uLmZvcmVpZ24sXG4gICAgICAuLi4odGhpcy50cmFuc2Zvcm0uZGVmYXVsdCA/IHtkZWZhdWx0OiB0aGlzLnRyYW5zZm9ybS5kZWZhdWx0fSA6IHt9KVxuICAgIH07XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { vgField } from '../../fielddef';\nimport { duplicate } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the window transform nodes\n */\nvar WindowTransformNode = /** @class */ (function (_super) {\n    tslib_1.__extends(WindowTransformNode, _super);\n    function WindowTransformNode(parent, transform) {\n        var _this = _super.call(this, parent) || this;\n        _this.transform = transform;\n        return _this;\n    }\n    WindowTransformNode.prototype.clone = function () {\n        return new WindowTransformNode(this.parent, duplicate(this.transform));\n    };\n    WindowTransformNode.prototype.producedFields = function () {\n        var _this = this;\n        var out = {};\n        this.transform.window.forEach(function (windowFieldDef) {\n            out[_this.getDefaultName(windowFieldDef)] = true;\n        });\n        return out;\n    };\n    WindowTransformNode.prototype.getDefaultName = function (windowFieldDef) {\n        return windowFieldDef.as || vgField(windowFieldDef);\n    };\n    WindowTransformNode.prototype.assemble = function () {\n        var fields = [];\n        var ops = [];\n        var as = [];\n        var params = [];\n        for (var _i = 0, _a = this.transform.window; _i < _a.length; _i++) {\n            var window_1 = _a[_i];\n            ops.push(window_1.op);\n            as.push(this.getDefaultName(window_1));\n            params.push(window_1.param === undefined ? null : window_1.param);\n            fields.push(window_1.field === undefined ? null : window_1.field);\n        }\n        var frame = this.transform.frame;\n        var groupby = this.transform.groupby;\n        var sortFields = [];\n        var sortOrder = [];\n        if (this.transform.sort !== undefined) {\n            for (var _b = 0, _c = this.transform.sort; _b < _c.length; _b++) {\n                var sortField = _c[_b];\n                sortFields.push(sortField.field);\n                sortOrder.push(sortField.order === undefined ? null : sortField.order);\n            }\n        }\n        var sort = {\n            field: sortFields,\n            order: sortOrder,\n        };\n        var ignorePeers = this.transform.ignorePeers;\n        var result = {\n            type: 'window',\n            params: params,\n            as: as,\n            ops: ops,\n            fields: fields,\n            sort: sort,\n        };\n        if (ignorePeers !== undefined) {\n            result.ignorePeers = ignorePeers;\n        }\n        if (groupby !== undefined) {\n            result.groupby = groupby;\n        }\n        if (frame !== undefined) {\n            result.frame = frame;\n        }\n        return result;\n    };\n    return WindowTransformNode;\n}(DataFlowNode));\nexport { WindowTransformNode };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvZGF0YS93aW5kb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV2QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRXJDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFeEM7O0dBRUc7QUFDSDtJQUF5QywrQ0FBWTtJQUtuRCw2QkFBWSxNQUFvQixFQUFVLFNBQTBCO1FBQXBFLFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBQ2Q7UUFGeUMsZUFBUyxHQUFULFNBQVMsQ0FBaUI7O0lBRXBFLENBQUM7SUFOTSxtQ0FBSyxHQUFaO1FBQ0ksT0FBTyxJQUFJLG1CQUFtQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFNTSw0Q0FBYyxHQUFyQjtRQUFBLGlCQU9DO1FBTkMsSUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUEsY0FBYztZQUMxQyxHQUFHLENBQUMsS0FBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNsRCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVPLDRDQUFjLEdBQXRCLFVBQXVCLGNBQThCO1FBQ25ELE9BQU8sY0FBYyxDQUFDLEVBQUUsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVNLHNDQUFRLEdBQWY7UUFDRSxJQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7UUFDNUIsSUFBTSxHQUFHLEdBQW1DLEVBQUUsQ0FBQztRQUMvQyxJQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEIsS0FBcUIsVUFBcUIsRUFBckIsS0FBQSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBckIsY0FBcUIsRUFBckIsSUFBcUIsRUFBRTtZQUF2QyxJQUFNLFFBQU0sU0FBQTtZQUNmLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQy9EO1FBRUQsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDbkMsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDdkMsSUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLElBQU0sU0FBUyxHQUF3QixFQUFFLENBQUM7UUFDMUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDckMsS0FBd0IsVUFBbUIsRUFBbkIsS0FBQSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBbkIsY0FBbUIsRUFBbkIsSUFBbUIsRUFBRTtnQkFBeEMsSUFBTSxTQUFTLFNBQUE7Z0JBQ2xCLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNqQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUEwQixDQUFDLENBQUM7YUFDN0Y7U0FDRjtRQUNELElBQU0sSUFBSSxHQUFpQjtZQUN6QixLQUFLLEVBQUUsVUFBVTtZQUNqQixLQUFLLEVBQUUsU0FBUztTQUNqQixDQUFDO1FBQ0YsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFFL0MsSUFBTSxNQUFNLEdBQXNCO1lBQ2hDLElBQUksRUFBRSxRQUFRO1lBQ2QsTUFBTSxRQUFBO1lBQ04sRUFBRSxJQUFBO1lBQ0YsR0FBRyxLQUFBO1lBQ0gsTUFBTSxRQUFBO1lBQ04sSUFBSSxNQUFBO1NBQ0wsQ0FBQztRQUVGLElBQUksV0FBVyxLQUFLLFNBQVMsRUFBRTtZQUM3QixNQUFNLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztTQUNsQztRQUVELElBQUksT0FBTyxLQUFLLFNBQVMsRUFBRTtZQUN6QixNQUFNLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztTQUMxQjtRQUVELElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUN0QjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDSCwwQkFBQztBQUFELENBQUMsQUF6RUQsQ0FBeUMsWUFBWSxHQXlFcEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FnZ3JlZ2F0ZU9wfSBmcm9tICd2ZWdhJztcbmltcG9ydCB7dmdGaWVsZH0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtXaW5kb3dGaWVsZERlZiwgV2luZG93T25seU9wLCBXaW5kb3dUcmFuc2Zvcm19IGZyb20gJy4uLy4uL3RyYW5zZm9ybSc7XG5pbXBvcnQge2R1cGxpY2F0ZX0gZnJvbSAnLi4vLi4vdXRpbCc7XG5pbXBvcnQge1ZnQ29tcGFyYXRvciwgVmdDb21wYXJhdG9yT3JkZXIsIFZnV2luZG93VHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge0RhdGFGbG93Tm9kZX0gZnJvbSAnLi9kYXRhZmxvdyc7XG5cbi8qKlxuICogQSBjbGFzcyBmb3IgdGhlIHdpbmRvdyB0cmFuc2Zvcm0gbm9kZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFdpbmRvd1RyYW5zZm9ybU5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwdWJsaWMgY2xvbmUoKSB7XG4gICAgICByZXR1cm4gbmV3IFdpbmRvd1RyYW5zZm9ybU5vZGUodGhpcy5wYXJlbnQsIGR1cGxpY2F0ZSh0aGlzLnRyYW5zZm9ybSkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBEYXRhRmxvd05vZGUsIHByaXZhdGUgdHJhbnNmb3JtOiBXaW5kb3dUcmFuc2Zvcm0pIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuICB9XG5cbiAgcHVibGljIHByb2R1Y2VkRmllbGRzKCkge1xuICAgIGNvbnN0IG91dCA9IHt9O1xuICAgIHRoaXMudHJhbnNmb3JtLndpbmRvdy5mb3JFYWNoKHdpbmRvd0ZpZWxkRGVmID0+IHtcbiAgICAgIG91dFt0aGlzLmdldERlZmF1bHROYW1lKHdpbmRvd0ZpZWxkRGVmKV0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RGVmYXVsdE5hbWUod2luZG93RmllbGREZWY6IFdpbmRvd0ZpZWxkRGVmKTogc3RyaW5nIHtcbiAgICByZXR1cm4gd2luZG93RmllbGREZWYuYXMgfHwgdmdGaWVsZCh3aW5kb3dGaWVsZERlZik7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGUoKTogVmdXaW5kb3dUcmFuc2Zvcm0ge1xuICAgIGNvbnN0IGZpZWxkczogc3RyaW5nW10gPSBbXTtcbiAgICBjb25zdCBvcHM6IChBZ2dyZWdhdGVPcCB8IFdpbmRvd09ubHlPcClbXSA9IFtdO1xuICAgIGNvbnN0IGFzID0gW107XG4gICAgY29uc3QgcGFyYW1zID0gW107XG4gICAgZm9yIChjb25zdCB3aW5kb3cgb2YgdGhpcy50cmFuc2Zvcm0ud2luZG93KSB7XG4gICAgICBvcHMucHVzaCh3aW5kb3cub3ApO1xuICAgICAgYXMucHVzaCh0aGlzLmdldERlZmF1bHROYW1lKHdpbmRvdykpO1xuICAgICAgcGFyYW1zLnB1c2god2luZG93LnBhcmFtID09PSB1bmRlZmluZWQgPyBudWxsIDogd2luZG93LnBhcmFtKTtcbiAgICAgIGZpZWxkcy5wdXNoKHdpbmRvdy5maWVsZCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHdpbmRvdy5maWVsZCk7XG4gICAgfVxuXG4gICAgY29uc3QgZnJhbWUgPSB0aGlzLnRyYW5zZm9ybS5mcmFtZTtcbiAgICBjb25zdCBncm91cGJ5ID0gdGhpcy50cmFuc2Zvcm0uZ3JvdXBieTtcbiAgICBjb25zdCBzb3J0RmllbGRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHNvcnRPcmRlcjogVmdDb21wYXJhdG9yT3JkZXJbXSA9IFtdO1xuICAgIGlmICh0aGlzLnRyYW5zZm9ybS5zb3J0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAoY29uc3Qgc29ydEZpZWxkIG9mIHRoaXMudHJhbnNmb3JtLnNvcnQpIHtcbiAgICAgICAgc29ydEZpZWxkcy5wdXNoKHNvcnRGaWVsZC5maWVsZCk7XG4gICAgICAgIHNvcnRPcmRlci5wdXNoKHNvcnRGaWVsZC5vcmRlciA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IHNvcnRGaWVsZC5vcmRlciBhcyBWZ0NvbXBhcmF0b3JPcmRlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNvcnQ6IFZnQ29tcGFyYXRvciA9IHtcbiAgICAgIGZpZWxkOiBzb3J0RmllbGRzLFxuICAgICAgb3JkZXI6IHNvcnRPcmRlcixcbiAgICB9O1xuICAgIGNvbnN0IGlnbm9yZVBlZXJzID0gdGhpcy50cmFuc2Zvcm0uaWdub3JlUGVlcnM7XG5cbiAgICBjb25zdCByZXN1bHQ6IFZnV2luZG93VHJhbnNmb3JtID0ge1xuICAgICAgdHlwZTogJ3dpbmRvdycsXG4gICAgICBwYXJhbXMsXG4gICAgICBhcyxcbiAgICAgIG9wcyxcbiAgICAgIGZpZWxkcyxcbiAgICAgIHNvcnQsXG4gICAgfTtcblxuICAgIGlmIChpZ25vcmVQZWVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHQuaWdub3JlUGVlcnMgPSBpZ25vcmVQZWVycztcbiAgICB9XG5cbiAgICBpZiAoZ3JvdXBieSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHQuZ3JvdXBieSA9IGdyb3VwYnk7XG4gICAgfVxuXG4gICAgaWYgKGZyYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc3VsdC5mcmFtZSA9IGZyYW1lO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { MAIN, RAW } from '../../data';\nimport * as log from '../../log';\nimport { isAggregate, isBin, isCalculate, isFilter, isLookup, isStack, isTimeUnit, isWindow } from '../../transform';\nimport { keys } from '../../util';\nimport { isFacetModel, isLayerModel, isUnitModel } from '../model';\nimport { requiresSelectionId } from '../selection/selection';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { IdentifierNode } from './indentifier';\nimport { AncestorParse } from './index';\nimport { LookupNode } from './lookup';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\nfunction parseRoot(model, sources) {\n    if (model.data || !model.parent) {\n        // if the model defines a data source or is the root, create a source node\n        var source = new SourceNode(model.data);\n        var hash = source.hash();\n        if (hash in sources) {\n            // use a reference if we already have a source\n            return sources[hash];\n        }\n        else {\n            // otherwise add a new one\n            sources[hash] = source;\n            return source;\n        }\n    }\n    else {\n        // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\n        return model.parent.component.data.facetRoot ? model.parent.component.data.facetRoot : model.parent.component.data.main;\n    }\n}\n/**\n * Parses a transforms array into a chain of connected dataflow nodes.\n */\nexport function parseTransformArray(head, model, ancestorParse) {\n    var lookupCounter = 0;\n    model.transforms.forEach(function (t) {\n        if (isCalculate(t)) {\n            head = new CalculateNode(head, t);\n            ancestorParse.set(t.as, 'derived', false);\n        }\n        else if (isFilter(t)) {\n            head = ParseNode.makeImplicitFromFilterTransform(head, t, ancestorParse) || head;\n            head = new FilterNode(head, model, t.filter);\n        }\n        else if (isBin(t)) {\n            head = BinNode.makeFromTransform(head, t, model);\n            ancestorParse.set(t.as, 'number', false);\n        }\n        else if (isTimeUnit(t)) {\n            head = TimeUnitNode.makeFromTransform(head, t);\n            ancestorParse.set(t.as, 'date', false);\n        }\n        else if (isAggregate(t)) {\n            var agg = head = AggregateNode.makeFromTransform(head, t);\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n            for (var _i = 0, _a = keys(agg.producedFields()); _i < _a.length; _i++) {\n                var field = _a[_i];\n                ancestorParse.set(field, 'derived', false);\n            }\n        }\n        else if (isLookup(t)) {\n            var lookup = head = LookupNode.make(head, model, t, lookupCounter++);\n            for (var _b = 0, _c = keys(lookup.producedFields()); _b < _c.length; _b++) {\n                var field = _c[_b];\n                ancestorParse.set(field, 'derived', false);\n            }\n        }\n        else if (isWindow(t)) {\n            var window_1 = head = new WindowTransformNode(head, t);\n            for (var _d = 0, _e = keys(window_1.producedFields()); _d < _e.length; _d++) {\n                var field = _e[_d];\n                ancestorParse.set(field, 'derived', false);\n            }\n        }\n        else if (isStack(t)) {\n            var stack = head = StackNode.makeFromTransform(head, t);\n            for (var _f = 0, _g = keys(stack.producedFields()); _f < _g.length; _f++) {\n                var field = _g[_f];\n                ancestorParse.set(field, 'derived', false);\n            }\n        }\n        else {\n            log.warn(log.message.invalidTransformIgnored(t));\n            return;\n        }\n    });\n    return head;\n}\n/*\nDescription of the dataflow (http://asciiflow.com/):\n     +--------+\n     | Source |\n     +---+----+\n         |\n         v\n     FormatParse\n     (explicit)\n         |\n         v\n     Transforms\n(Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)\n         |\n         v\n     FormatParse\n     (implicit)\n         |\n         v\n Binning (in `encoding`)\n         |\n         v\n Timeunit (in `encoding`)\n         |\n         v\nFormula From Sort Array\n         |\n         v\n      +--+--+\n      | Raw |\n      +-----+\n         |\n         v\n  Aggregate (in `encoding`)\n         |\n         v\n  Stack (in `encoding`)\n         |\n         v\n  Invalid Filter\n         |\n         v\n   +----------+\n   |   Main   |\n   +----------+\n         |\n         v\n     +-------+\n     | Facet |----> \"column\", \"column-layout\", and \"row\"\n     +-------+\n         |\n         v\n  ...Child data...\n*/\nexport function parseData(model) {\n    var head = parseRoot(model, model.component.data.sources);\n    var _a = model.component.data, outputNodes = _a.outputNodes, outputNodeRefCounts = _a.outputNodeRefCounts;\n    var ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();\n    // format.parse: null means disable parsing\n    if (model.data && model.data.format && model.data.format.parse === null) {\n        ancestorParse.parseNothing = true;\n    }\n    head = ParseNode.makeExplicit(head, model, ancestorParse) || head;\n    // Default discrete selections require an identifier transform to\n    // uniquely identify data points as the _id field is volatile. Add\n    // this transform at the head of our pipeline such that the identifier\n    // field is available for all subsequent datasets. Additional identifier\n    // transforms will be necessary when new tuples are constructed\n    // (e.g., post-aggregation).\n    if (requiresSelectionId(model) && (isUnitModel(model) || isLayerModel(model))) {\n        head = new IdentifierNode(head);\n    }\n    // HACK: This is equivalent for merging bin extent for union scale.\n    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\n    var parentIsLayer = model.parent && isLayerModel(model.parent);\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (parentIsLayer) {\n            head = BinNode.makeFromEncoding(head, model) || head;\n        }\n    }\n    if (model.transforms.length > 0) {\n        head = parseTransformArray(head, model, ancestorParse);\n    }\n    head = ParseNode.makeImplicitFromEncoding(head, model, ancestorParse) || head;\n    if (isUnitModel(model)) {\n        head = GeoJSONNode.parseAll(head, model);\n        head = GeoPointNode.parseAll(head, model);\n    }\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (!parentIsLayer) {\n            head = BinNode.makeFromEncoding(head, model) || head;\n        }\n        head = TimeUnitNode.makeFromEncoding(head, model) || head;\n        head = CalculateNode.parseAllForSortIndex(head, model);\n    }\n    // add an output node pre aggregation\n    var rawName = model.getName(RAW);\n    var raw = new OutputNode(head, rawName, RAW, outputNodeRefCounts);\n    outputNodes[rawName] = raw;\n    head = raw;\n    if (isUnitModel(model)) {\n        var agg = AggregateNode.makeFromEncoding(head, model);\n        if (agg) {\n            head = agg;\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n        }\n        head = StackNode.makeFromEncoding(head, model) || head;\n    }\n    if (isUnitModel(model)) {\n        head = FilterInvalidNode.make(head, model) || head;\n    }\n    // output node for marks\n    var mainName = model.getName(MAIN);\n    var main = new OutputNode(head, mainName, MAIN, outputNodeRefCounts);\n    outputNodes[mainName] = main;\n    head = main;\n    // add facet marker\n    var facetRoot = null;\n    if (isFacetModel(model)) {\n        var facetName = model.getName('facet');\n        facetRoot = new FacetNode(head, model, facetName, main.getSource());\n        outputNodes[facetName] = facetRoot;\n        head = facetRoot;\n    }\n    return tslib_1.__assign({}, model.component.data, { outputNodes: outputNodes,\n        outputNodeRefCounts: outputNodeRefCounts,\n        raw: raw,\n        main: main,\n        facetRoot: facetRoot,\n        ancestorParse: ancestorParse });\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { keys } from '../util';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { Model } from './model';\nvar BaseConcatModel = /** @class */ (function (_super) {\n    tslib_1.__extends(BaseConcatModel, _super);\n    function BaseConcatModel(spec, parent, parentGivenName, config, repeater, resolve) {\n        return _super.call(this, spec, parent, parentGivenName, config, repeater, resolve) || this;\n    }\n    BaseConcatModel.prototype.parseData = function () {\n        this.component.data = parseData(this);\n        this.children.forEach(function (child) {\n            child.parseData();\n        });\n    };\n    BaseConcatModel.prototype.parseSelection = function () {\n        var _this = this;\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        var _loop_1 = function (child) {\n            child.parseSelection();\n            keys(child.component.selection).forEach(function (key) {\n                _this.component.selection[key] = child.component.selection[key];\n            });\n        };\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            _loop_1(child);\n        }\n    };\n    BaseConcatModel.prototype.parseMarkGroup = function () {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parseMarkGroup();\n        }\n    };\n    BaseConcatModel.prototype.parseAxisAndHeader = function () {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parseAxisAndHeader();\n        }\n        // TODO(#2415): support shared axes\n    };\n    BaseConcatModel.prototype.assembleSelectionTopLevelSignals = function (signals) {\n        return this.children.reduce(function (sg, child) { return child.assembleSelectionTopLevelSignals(sg); }, signals);\n    };\n    BaseConcatModel.prototype.assembleSelectionSignals = function () {\n        this.children.forEach(function (child) { return child.assembleSelectionSignals(); });\n        return [];\n    };\n    BaseConcatModel.prototype.assembleLayoutSignals = function () {\n        return this.children.reduce(function (signals, child) {\n            return signals.concat(child.assembleLayoutSignals());\n        }, assembleLayoutSignals(this));\n    };\n    BaseConcatModel.prototype.assembleSelectionData = function (data) {\n        return this.children.reduce(function (db, child) { return child.assembleSelectionData(db); }, data);\n    };\n    BaseConcatModel.prototype.assembleMarks = function () {\n        // only children have marks\n        return this.children.map(function (child) {\n            var title = child.assembleTitle();\n            var style = child.assembleGroupStyle();\n            var layoutSizeEncodeEntry = child.assembleLayoutSize();\n            return tslib_1.__assign({ type: 'group', name: child.getName('group') }, (title ? { title: title } : {}), (style ? { style: style } : {}), (layoutSizeEncodeEntry ? {\n                encode: {\n                    update: layoutSizeEncodeEntry\n                }\n            } : {}), child.assembleGroup());\n        });\n    };\n    return BaseConcatModel;\n}(Model));\nexport { BaseConcatModel };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZWNvbmNhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL2Jhc2Vjb25jYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUdBLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFN0IsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRzlCO0lBQThDLDJDQUFLO0lBQ2pELHlCQUFZLElBQWMsRUFBRSxNQUFhLEVBQUUsZUFBdUIsRUFBRSxNQUFjLEVBQUUsUUFBdUIsRUFBRSxPQUFnQjtlQUMzSCxrQkFBTSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQztJQUNqRSxDQUFDO0lBRU0sbUNBQVMsR0FBaEI7UUFDRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLO1lBQzFCLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDTSx3Q0FBYyxHQUFyQjtRQUFBLGlCQVdDO1FBVkMsbUVBQW1FO1FBQ25FLGlFQUFpRTtRQUNqRSxtRUFBbUU7UUFDbkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO2dDQUNuQixLQUFLO1lBQ2QsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUc7Z0JBQzFDLEtBQUksQ0FBQyxTQUFTLENBQUMs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LEVBQUUsRUFDeEI7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDSCxzQkFBQztBQUFELENBQUMsQUE3RUQsQ0FBOEMsS0FBSyxHQTZFbEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCB7UmVzb2x2ZX0gZnJvbSAnLi4vcmVzb2x2ZSc7XG5pbXBvcnQge0Jhc2VTcGVjfSBmcm9tICcuLi9zcGVjJztcbmltcG9ydCB7a2V5c30gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQge1ZnRGF0YSwgVmdTaWduYWx9IGZyb20gJy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7cGFyc2VEYXRhfSBmcm9tICcuL2RhdGEvcGFyc2UnO1xuaW1wb3J0IHthc3NlbWJsZUxheW91dFNpZ25hbHN9IGZyb20gJy4vbGF5b3V0c2l6ZS9hc3NlbWJsZSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuL21vZGVsJztcbmltcG9ydCB7UmVwZWF0ZXJWYWx1ZX0gZnJvbSAnLi9yZXBlYXRlcic7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQ29uY2F0TW9kZWwgZXh0ZW5kcyBNb2RlbCB7XG4gIGNvbnN0cnVjdG9yKHNwZWM6IEJhc2VTcGVjLCBwYXJlbnQ6IE1vZGVsLCBwYXJlbnRHaXZlbk5hbWU6IHN0cmluZywgY29uZmlnOiBDb25maWcsIHJlcGVhdGVyOiBSZXBlYXRlclZhbHVlLCByZXNvbHZlOiBSZXNvbHZlKSB7XG4gICAgc3VwZXIoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIGNvbmZpZywgcmVwZWF0ZXIsIHJlc29sdmUpO1xuICB9XG5cbiAgcHVibGljIHBhcnNlRGF0YSgpIHtcbiAgICB0aGlzLmNvbXBvbmVudC5kYXRhID0gcGFyc2VEYXRhKHRoaXMpO1xuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIGNoaWxkLnBhcnNlRGF0YSgpO1xuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBwYXJzZVNlbGVjdGlvbigpIHtcbiAgICAvLyBNZXJnZSBzZWxlY3Rpb25zIHVwIHRoZSBoaWVyYXJjaHkgc28gdGhhdCB0aGV5IG1heSBiZSByZWZlcmVuY2VkXG4gICAgLy8gYWNyb3NzIHVuaXQgc3BlY3MuIFBlcnNpc3QgdGhlaXIgZGVmaW5pdGlvbnMgd2l0aGluIGVhY2ggY2hpbGRcbiAgICAvLyB0byBhc3NlbWJsZSBzaWduYWxzIHdoaWNoIHJlbWFpbiB3aXRoaW4gb3V0cHV0IFZlZ2EgdW5pdCBncm91cHMuXG4gICAgdGhpcy5jb21wb25lbnQuc2VsZWN0aW9uID0ge307XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICBjaGlsZC5wYXJzZVNlbGVjdGlvbigpO1xuICAgICAga2V5cyhjaGlsZC5jb21wb25lbnQuc2VsZWN0aW9uKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgdGhpcy5jb21wb25lbnQuc2VsZWN0aW9uW2tleV0gPSBjaGlsZC5jb21wb25lbnQuc2VsZWN0aW9uW2tleV07XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcGFyc2VNYXJrR3JvdXAoKSB7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICBjaGlsZC5wYXJzZU1hcmtHcm91cCgpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwYXJzZUF4aXNBbmRIZWFkZXIoKSB7XG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICBjaGlsZC5wYXJzZUF4aXNBbmRIZWFkZXIoKTtcbiAgICB9XG5cbiAgICAvLyBUT0RPKCMyNDE1KTogc3VwcG9ydCBzaGFyZWQgYXhlc1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlU2VsZWN0aW9uVG9wTGV2ZWxTaWduYWxzKHNpZ25hbHM6IGFueVtdKTogVmdTaWduYWxbXSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ucmVkdWNlKChzZywgY2hpbGQpID0+IGNoaWxkLmFzc2VtYmxlU2VsZWN0aW9uVG9wTGV2ZWxTaWduYWxzKHNnKSwgc2lnbmFscyk7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVTZWxlY3Rpb25TaWduYWxzKCk6IFZnU2lnbmFsW10ge1xuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IGNoaWxkLmFzc2VtYmxlU2VsZWN0aW9uU2lnbmFscygpKTtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVMYXlvdXRTaWduYWxzKCk6IFZnU2lnbmFsW10ge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLnJlZHVjZSgoc2lnbmFscywgY2hpbGQpID0+IHtcbiAgICAgIHJldHVybiBzaWduYWxzLmNvbmNhdChjaGlsZC5hc3NlbWJsZUxheW91dFNpZ25hbHMoKSk7XG4gICAgfSwgYXNzZW1ibGVMYXlvdXRTaWduYWxzKHRoaXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZVNlbGVjdGlvbkRhdGEoZGF0YTogVmdEYXRhW10pOiBWZ0RhdGFbXSB7XG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ucmVkdWNlKChkYiwgY2hpbGQpID0+IGNoaWxkLmFzc2VtYmxlU2VsZWN0aW9uRGF0YShkYiksIGRhdGEpO1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlTWFya3MoKTogYW55W10ge1xuICAgIC8vIG9ubHkgY2hpbGRyZW4gaGF2ZSBtYXJrc1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLm1hcChjaGlsZCA9PiB7XG4gICAgICBjb25zdCB0aXRsZSA9IGNoaWxkLmFzc2VtYmxlVGl0bGUoKTtcbiAgICAgIGNvbnN0IHN0eWxlID0gY2hpbGQuYXNzZW1ibGVHcm91cFN0eWxlKCk7XG4gICAgICBjb25zdCBsYXlvdXRTaXplRW5jb2RlRW50cnkgPSBjaGlsZC5hc3NlbWJsZUxheW91dFNpemUoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdncm91cCcsXG4gICAgICAgIG5hbWU6IGNoaWxkLmdldE5hbWUoJ2dyb3VwJyksXG4gICAgICAgIC4uLih0aXRsZSA/IHt0aXRsZX0gOiB7fSksXG4gICAgICAgIC4uLihzdHlsZSA/IHtzdHlsZX0gOiB7fSksXG4gICAgICAgIC4uLihsYXlvdXRTaXplRW5jb2RlRW50cnkgPyB7XG4gICAgICAgICAgZW5jb2RlOiB7XG4gICAgICAgICAgICB1cGRhdGU6IGxheW91dFNpemVFbmNvZGVFbnRyeVxuICAgICAgICAgIH1cbiAgICAgICAgfSA6IHt9KSxcbiAgICAgICAgLi4uY2hpbGQuYXNzZW1ibGVHcm91cCgpXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG59XG4iXX0=","import { defaultScaleConfig, hasDiscreteDomain } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { mergeValuesWithExplicit } from '../split';\nexport function parseLayerLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    var layoutSizeCmpt = model.component.layoutSize;\n    layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n    layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\nexport var parseRepeatLayoutSize = parseLayerLayoutSize;\nexport function parseConcatLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    var layoutSizeCmpt = model.component.layoutSize;\n    var sizeTypeToMerge = model.isVConcat ? 'width' : 'height';\n    layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n}\nexport function parseChildrenLayoutSize(model) {\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        child.parseLayoutSize();\n    }\n}\nfunction parseNonUnitLayoutSizeForChannel(model, sizeType) {\n    var channel = sizeType === 'width' ? 'x' : 'y';\n    var resolve = model.component.resolve;\n    var mergedSize;\n    // Try to merge layout size\n    for (var _i = 0, _a = model.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n        var childSize = child.component.layoutSize.getWithExplicit(sizeType);\n        var scaleResolve = resolve.scale[channel];\n        if (scaleResolve === 'independent' && childSize.value === 'range-step') {\n            // Do not merge independent scales with range-step as their size depends\n            // on the scale domains, which can be different between scales.\n            mergedSize = undefined;\n            break;\n        }\n        if (mergedSize) {\n            if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n                // For independent scale, only merge if all the sizes are the same.\n                // If the values are different, abandon the merge!\n                mergedSize = undefined;\n                break;\n            }\n            mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n        }\n        else {\n            mergedSize = childSize;\n        }\n    }\n    if (mergedSize) {\n        // If merged, rename size and set size of all children.\n        for (var _b = 0, _c = model.children; _b < _c.length; _b++) {\n            var child = _c[_b];\n            model.renameLayoutSize(child.getName(sizeType), model.getName(sizeType));\n            child.component.layoutSize.set(sizeType, 'merged', false);\n        }\n        return mergedSize;\n    }\n    else {\n        // Otherwise, there is no merged size.\n        return {\n            explicit: false,\n            value: undefined\n        };\n    }\n}\nexport function parseUnitLayoutSize(model) {\n    var layoutSizeComponent = model.component.layoutSize;\n    if (!layoutSizeComponent.explicit.width) {\n        var width = defaultUnitSize(model, 'width');\n        layoutSizeComponent.set('width', width, false);\n    }\n    if (!layoutSizeComponent.explicit.height) {\n        var height = defaultUnitSize(model, 'height');\n        layoutSizeComponent.set('height', height, false);\n    }\n}\nfunction defaultUnitSize(model, sizeType) {\n    var channel = sizeType === 'width' ? 'x' : 'y';\n    var config = model.config;\n    var scaleComponent = model.getScaleComponent(channel);\n    if (scaleComponent) {\n        var scaleType = scaleComponent.get('type');\n        var range = scaleComponent.get('range');\n        if (hasDiscreteDomain(scaleType) && isVgRangeStep(range)) {\n            // For discrete domain with range.step, use dynamic width/height\n            return 'range-step';\n        }\n        else {\n            return config.view[sizeType];\n        }\n    }\n    else if (model.hasProjection) {\n        return config.view[sizeType];\n    }\n    else {\n        // No scale - set default size\n        if (sizeType === 'width' && model.mark === 'text') {\n            // width for text mark without x-field is a bit wider than typical range step\n            return config.scale.textXRangeStep;\n        }\n        // Set width/height equal to rangeStep config or if rangeStep is null, use value from default scale config.\n        return config.scale.rangeStep || defaultScaleConfig.rangeStep;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as log from '../log';\nimport { isVConcatSpec } from '../spec';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nvar ConcatModel = /** @class */ (function (_super) {\n    tslib_1.__extends(ConcatModel, _super);\n    function ConcatModel(spec, parent, parentGivenName, repeater, config) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, spec.resolve) || this;\n        _this.type = 'concat';\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n        }\n        _this.isVConcat = isVConcatSpec(spec);\n        _this.children = (isVConcatSpec(spec) ? spec.vconcat : spec.hconcat).map(function (child, i) {\n            return buildModel(child, _this, _this.getName('concat_' + i), undefined, repeater, config, false);\n        });\n        return _this;\n    }\n    ConcatModel.prototype.parseLayoutSize = function () {\n        parseConcatLayoutSize(this);\n    };\n    ConcatModel.prototype.parseAxisGroup = function () {\n        return null;\n    };\n    ConcatModel.prototype.assembleLayout = function () {\n        // TODO: allow customization\n        return tslib_1.__assign({ padding: { row: 10, column: 10 }, offset: 10 }, (this.isVConcat ? { columns: 1 } : {}), { bounds: 'full', \n            // Use align each so it can work with multiple plots with different size\n            align: 'each' });\n    };\n    return ConcatModel;\n}(BaseConcatModel));\nexport { ConcatModel };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBpbGUvY29uY2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQztBQUM5QixPQUFPLEVBQUMsYUFBYSxFQUF1QixNQUFNLFNBQVMsQ0FBQztBQUU1RCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFJekQ7SUFBaUMsdUNBQWU7SUFPOUMscUJBQVksSUFBMEIsRUFBRSxNQUFhLEVBQUUsZUFBdUIsRUFBRSxRQUF1QixFQUFFLE1BQWM7UUFBdkgsWUFDRSxrQkFBTSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FXckU7UUFsQmUsVUFBSSxHQUFhLFFBQVEsQ0FBQztRQVN4QyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsRUFBRTtZQUMvRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUNoRDtRQUVELEtBQUksQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJDLEtBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxLQUFLLEVBQUUsQ0FBQztZQUMvRSxPQUFPLFVBQVUsQ0FBQyxLQUFLLEVBQUUsS0FBSSxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xHLENBQUMsQ0FBQyxDQUFDOztJQUNMLENBQUM7SUFFTSxxQ0FBZSxHQUF0QjtRQUNFLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFHTSxvQ0FBYyxHQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVNLG9DQUFjLEdBQXJCO1FBQ0UsNEJBQTRCO1FBQzVCLDBCQUNFLE9BQU8sRUFBRSxFQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBQyxFQUM5QixNQUFNLEVBQUUsRUFBRSxJQUNQLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUN2QyxNQUFNLEVBQUUsTUFBTTtZQUNkLHdFQUF3RTtZQUN4RSxLQUFLLEVBQUUsTUFBTSxJQUNiO0lBQ0osQ0FBQztJQUNILGtCQUFDO0FBQUQsQ0FBQyxBQXpDRCxDQUFpQyxlQUFlLEdBeUMvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uL2xvZyc7XG5pbXBvcnQge2lzVkNvbmNhdFNwZWMsIE5vcm1hbGl6ZWRDb25jYXRTcGVjfSBmcm9tICcuLi9zcGVjJztcbmltcG9ydCB7VmdMYXlvdXR9IGZyb20gJy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7QmFzZUNvbmNhdE1vZGVsfSBmcm9tICcuL2Jhc2Vjb25jYXQnO1xuaW1wb3J0IHtidWlsZE1vZGVsfSBmcm9tICcuL2J1aWxkbW9kZWwnO1xuaW1wb3J0IHtwYXJzZUNvbmNhdExheW91dFNpemV9IGZyb20gJy4vbGF5b3V0c2l6ZS9wYXJzZSc7XG5pbXBvcnQge01vZGVsfSBmcm9tICcuL21vZGVsJztcbmltcG9ydCB7UmVwZWF0ZXJWYWx1ZX0gZnJvbSAnLi9yZXBlYXRlcic7XG5cbmV4cG9ydCBjbGFzcyBDb25jYXRNb2RlbCBleHRlbmRzIEJhc2VDb25jYXRNb2RlbCB7XG4gIHB1YmxpYyByZWFkb25seSB0eXBlOiAnY29uY2F0JyA9ICdjb25jYXQnO1xuXG4gIHB1YmxpYyByZWFkb25seSBjaGlsZHJlbjogTW9kZWxbXTtcblxuICBwdWJsaWMgcmVhZG9ubHkgaXNWQ29uY2F0OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHNwZWM6IE5vcm1hbGl6ZWRDb25jYXRTcGVjLCBwYXJlbnQ6IE1vZGVsLCBwYXJlbnRHaXZlbk5hbWU6IHN0cmluZywgcmVwZWF0ZXI6IFJlcGVhdGVyVmFsdWUsIGNvbmZpZzogQ29uZmlnKSB7XG4gICAgc3VwZXIoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIGNvbmZpZywgcmVwZWF0ZXIsIHNwZWMucmVzb2x2ZSk7XG5cbiAgICBpZiAoc3BlYy5yZXNvbHZlICYmIHNwZWMucmVzb2x2ZS5heGlzICYmIChzcGVjLnJlc29sdmUuYXhpcy54ID09PSAnc2hhcmVkJyB8fCBzcGVjLnJlc29sdmUuYXhpcy55ID09PSAnc2hhcmVkJykpIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLkNPTkNBVF9DQU5OT1RfU0hBUkVfQVhJUyk7XG4gICAgfVxuXG4gICAgdGhpcy5pc1ZDb25jYXQgPSBpc1ZDb25jYXRTcGVjKHNwZWMpO1xuXG4gICAgdGhpcy5jaGlsZHJlbiA9IChpc1ZDb25jYXRTcGVjKHNwZWMpID8gc3BlYy52Y29uY2F0IDogc3BlYy5oY29uY2F0KS5tYXAoKGNoaWxkLCBpKSA9PiB7XG4gICAgICByZXR1cm4gYnVpbGRNb2RlbChjaGlsZCwgdGhpcywgdGhpcy5nZXROYW1lKCdjb25jYXRfJyArIGkpLCB1bmRlZmluZWQsIHJlcGVhdGVyLCBjb25maWcsIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBwYXJzZUxheW91dFNpemUoKSB7XG4gICAgcGFyc2VDb25jYXRMYXlvdXRTaXplKHRoaXMpO1xuICB9XG5cblxuICBwdWJsaWMgcGFyc2VBeGlzR3JvdXAoKTogdm9pZCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwdWJsaWMgYXNzZW1ibGVMYXlvdXQoKTogVmdMYXlvdXQge1xuICAgIC8vIFRPRE86IGFsbG93IGN1c3RvbWl6YXRpb25cbiAgICByZXR1cm4ge1xuICAgICAgcGFkZGluZzoge3JvdzogMTAsIGNvbHVtbjogMTB9LFxuICAgICAgb2Zmc2V0OiAxMCxcbiAgICAgIC4uLih0aGlzLmlzVkNvbmNhdCA/IHtjb2x1bW5zOiAxfSA6IHt9KSxcbiAgICAgIGJvdW5kczogJ2Z1bGwnLFxuICAgICAgLy8gVXNlIGFsaWduIGVhY2ggc28gaXQgY2FuIHdvcmsgd2l0aCBtdWx0aXBsZSBwbG90cyB3aXRoIGRpZmZlcmVudCBzaXplXG4gICAgICBhbGlnbjogJ2VhY2gnXG4gICAgfTtcbiAgfVxufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { isUrlData } from '../../data';\nimport { vals } from '../../util';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { IdentifierNode } from './indentifier';\nimport { LookupNode } from './lookup';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\n/**\n * Print debug information for dataflow tree.\n */\n// tslint:disable-next-line\nfunction debug(node) {\n    console.log(\"\" + node.constructor.name + (node.debugName ? \" (\" + node.debugName + \")\" : '') + \" -> \" + (node.children.map(function (c) {\n        return \"\" + c.constructor.name + (c.debugName ? \" (\" + c.debugName + \")\" : '');\n    })));\n    console.log(node);\n    node.children.forEach(debug);\n}\nfunction makeWalkTree(data) {\n    // to name datasources\n    var datasetIndex = 0;\n    /**\n     * Recursively walk down the tree.\n     */\n    function walkTree(node, dataSource) {\n        if (node instanceof SourceNode) {\n            // If the source is a named data source or a data source with values, we need\n            // to put it in a different data source. Otherwise, Vega may override the data.\n            if (!isUrlData(node.data)) {\n                data.push(dataSource);\n                var newData = {\n                    name: null,\n                    source: dataSource.name,\n                    transform: []\n                };\n                dataSource = newData;\n            }\n        }\n        if (node instanceof ParseNode) {\n            if (node.parent instanceof SourceNode && !dataSource.source) {\n                // If node's parent is a root source and the data source does not refer to another data source, use normal format parse\n                dataSource.format = tslib_1.__assign({}, dataSource.format || {}, { parse: node.assembleFormatParse() });\n                // add calculates for all nested fields\n                dataSource.transform = dataSource.transform.concat(node.assembleTransforms(true));\n            }\n            else {\n                // Otherwise use Vega expression to parse\n                dataSource.transform = dataSource.transform.concat(node.assembleTransforms());\n            }\n        }\n        if (node instanceof FacetNode) {\n            if (!dataSource.name) {\n                dataSource.name = \"data_\" + datasetIndex++;\n            }\n            if (!dataSource.source || dataSource.transform.length > 0) {\n                data.push(dataSource);\n                node.data = dataSource.name;\n            }\n            else {\n                node.data = dataSource.source;\n            }\n            node.assemble().forEach(function (d) { return data.push(d); });\n            // break here because the rest of the tree has to be taken care of by the facet.\n            return;\n        }\n        if (node instanceof FilterNode ||\n            node instanceof CalculateNode ||\n            node instanceof GeoPointNode ||\n            node instanceof GeoJSONNode ||\n            node instanceof AggregateNode ||\n            node instanceof LookupNode ||\n            node instanceof WindowTransformNode ||\n            node instanceof IdentifierNode) {\n            dataSource.transform.push(node.assemble());\n        }\n        if (node instanceof FilterInvalidNode ||\n            node instanceof BinNode ||\n            node instanceof TimeUnitNode ||\n            node instanceof StackNode) {\n            dataSource.transform = dataSource.transform.concat(node.assemble());\n        }\n        if (node instanceof AggregateNode) {\n            if (!dataSource.name) {\n                dataSource.name = \"data_\" + datasetIndex++;\n            }\n        }\n        if (node instanceof OutputNode) {\n            if (dataSource.source && dataSource.transform.length === 0) {\n                node.setSource(dataSource.source);\n            }\n            else if (node.parent instanceof OutputNode) {\n                // Note that an output node may be required but we still do not assemble a\n                // separate data source for it.\n                node.setSource(dataSource.name);\n            }\n            else {\n                if (!dataSource.name) {\n                    dataSource.name = \"data_\" + datasetIndex++;\n                }\n                // Here we set the name of the datasource we generated. From now on\n                // other assemblers can use it.\n                node.setSource(dataSource.name);\n                // if this node has more than one child, we will add a datasource automatically\n                if (node.numChildren() === 1) {\n                    data.push(dataSource);\n                    var newData = {\n                        name: null,\n                        source: dataSource.name,\n                        transform: []\n                    };\n                    dataSource = newData;\n                }\n            }\n        }\n        switch (node.numChildren()) {\n            case 0:\n                // done\n                if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {\n                    // do not push empty datasources that are simply references\n                    data.push(dataSource);\n                }\n                break;\n            case 1:\n                walkTree(node.children[0], dataSource);\n                break;\n            default:\n                if (!dataSource.name) {\n                    dataSource.name = \"data_\" + datasetIndex++;\n                }\n                var source_1 = dataSource.name;\n                if (!dataSource.source || dataSource.transform.length > 0) {\n                    data.push(dataSource);\n                }\n                else {\n                    source_1 = dataSource.source;\n                }\n                node.children.forEach(function (child) {\n                    var newData = {\n                        name: null,\n                        source: source_1,\n                        transform: []\n                    };\n                    walkTree(child, newData);\n                });\n                break;\n        }\n    }\n    return walkTree;\n}\n/**\n * Assemble data sources that are derived from faceted data.\n */\nexport function assembleFacetData(root) {\n    var data = [];\n    var walkTree = makeWalkTree(data);\n    root.children.forEach(function (child) { return walkTree(child, {\n        source: root.name,\n        name: null,\n        transform: []\n    }); });\n    return data;\n}\n/**\n * Create Vega Data array from a given compiled model and append all of them to the given array\n *\n * @param  model\n * @param  data array\n * @return modified data array\n */\nexport function assembleRootData(dataComponent, datasets) {\n    var roots = vals(dataComponent.sources);\n    var data = [];\n    // roots.forEach(debug);\n    var walkTree = makeWalkTree(data);\n    var sourceIndex = 0;\n    roots.forEach(function (root) {\n        // assign a name if the source does not have a name yet\n        if (!root.hasName()) {\n            root.dataName = \"source_\" + sourceIndex++;\n        }\n        var newData = root.assemble();\n        walkTree(root, newData);\n    });\n    // remove empty transform arrays for cleaner output\n    data.forEach(function (d) {\n        if (d.transform.length === 0) {\n            delete d.transform;\n        }\n    });\n    // move sources without transforms (the ones that are potentially used in lookups) to the beginning\n    var whereTo = 0;\n    for (var i = 0; i < data.length; i++) {\n        var d = data[i];\n        if ((d.transform || []).length === 0 && !d.source) {\n            data.splice(whereTo++, 0, data.splice(i, 1)[0]);\n        }\n    }\n    // now fix the from references in lookup transforms\n    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n        var d = data_1[_i];\n        for (var _a = 0, _b = d.transform || []; _a < _b.length; _a++) {\n            var t = _b[_a];\n            if (t.type === 'lookup') {\n                t.from = dataComponent.outputNodes[t.from].getSource();\n            }\n        }\n    }\n    // inline values for datasets that are in the datastore\n    for (var _c = 0, data_2 = data; _c < data_2.length; _c++) {\n        var d = data_2[_c];\n        if (d.name in datasets) {\n            d.values = datasets[d.name];\n        }\n    }\n    return data;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { hasConditionalFieldDef, isConditionalDef, isFieldDef, isRepeatRef } from '../fielddef';\nimport * as log from '../log';\nimport { isSortField } from '../sort';\nexport function replaceRepeaterInFacet(facet, repeater) {\n    return replaceRepeater(facet, repeater);\n}\nexport function replaceRepeaterInEncoding(encoding, repeater) {\n    return replaceRepeater(encoding, repeater);\n}\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\nfunction replaceRepeat(o, repeater) {\n    if (isRepeatRef(o.field)) {\n        if (o.field.repeat in repeater) {\n            // any needed to calm down ts compiler\n            return tslib_1.__assign({}, o, { field: repeater[o.field.repeat] });\n        }\n        else {\n            log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n            return undefined;\n        }\n    }\n    return o;\n}\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\nfunction replaceRepeaterInFieldDef(fieldDef, repeater) {\n    fieldDef = replaceRepeat(fieldDef, repeater);\n    if (fieldDef === undefined) {\n        // the field def should be ignored\n        return undefined;\n    }\n    if (fieldDef.sort && isSortField(fieldDef.sort)) {\n        var sort = replaceRepeat(fieldDef.sort, repeater);\n        fieldDef = tslib_1.__assign({}, fieldDef, (sort ? { sort: sort } : {}));\n    }\n    return fieldDef;\n}\nfunction replaceRepeaterInChannelDef(channelDef, repeater) {\n    if (isFieldDef(channelDef)) {\n        var fd = replaceRepeaterInFieldDef(channelDef, repeater);\n        if (fd) {\n            return fd;\n        }\n        else if (isConditionalDef(channelDef)) {\n            return { condition: channelDef.condition };\n        }\n    }\n    else {\n        if (hasConditionalFieldDef(channelDef)) {\n            var fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n            if (fd) {\n                return tslib_1.__assign({}, channelDef, { condition: fd });\n            }\n            else {\n                var condition = channelDef.condition, channelDefWithoutCondition = tslib_1.__rest(channelDef, [\"condition\"]);\n                return channelDefWithoutCondition;\n            }\n        }\n        return channelDef;\n    }\n    return undefined;\n}\nfunction replaceRepeater(mapping, repeater) {\n    var out = {};\n    for (var channel in mapping) {\n        if (mapping.hasOwnProperty(channel)) {\n            var channelDef = mapping[channel];\n            if (isArray(channelDef)) {\n                // array cannot have condition\n                out[channel] = channelDef.map(function (cd) { return replaceRepeaterInChannelDef(cd, repeater); })\n                    .filter(function (cd) { return cd; });\n            }\n            else {\n                var cd = replaceRepeaterInChannelDef(channelDef, repeater);\n                if (cd) {\n                    out[channel] = cd;\n                }\n            }\n        }\n    }\n    return out;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { COLUMN, ROW } from '../channel';\nimport { reduce } from '../encoding';\nimport { normalize, title as fieldDefTitle, vgField } from '../fielddef';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { contains } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { assembleAxis } from './axis/assemble';\nimport { buildModel } from './buildmodel';\nimport { assembleFacetData } from './data/assemble';\nimport { parseData } from './data/parse';\nimport { getHeaderType } from './layout/header';\nimport { parseChildrenLayoutSize } from './layoutsize/parse';\nimport { ModelWithField } from './model';\nimport { replaceRepeaterInFacet } from './repeater';\nimport { parseGuideResolve } from './resolve';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nvar FacetModel = /** @class */ (function (_super) {\n    tslib_1.__extends(FacetModel, _super);\n    function FacetModel(spec, parent, parentGivenName, repeater, config) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, spec.resolve) || this;\n        _this.type = 'facet';\n        _this.child = buildModel(spec.spec, _this, _this.getName('child'), undefined, repeater, config, false);\n        _this.children = [_this.child];\n        var facet = replaceRepeaterInFacet(spec.facet, repeater);\n        _this.facet = _this.initFacet(facet);\n        return _this;\n    }\n    FacetModel.prototype.initFacet = function (facet) {\n        // clone to prevent side effect to the original spec\n        return reduce(facet, function (normalizedFacet, fieldDef, channel) {\n            if (!contains([ROW, COLUMN], channel)) {\n                // Drop unsupported channel\n                log.warn(log.message.incompatibleChannel(channel, 'facet'));\n                return normalizedFacet;\n            }\n            if (fieldDef.field === undefined) {\n                log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                return normalizedFacet;\n            }\n            // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n            normalizedFacet[channel] = normalize(fieldDef, channel);\n            return normalizedFacet;\n        }, {});\n    };\n    FacetModel.prototype.channelHasField = function (channel) {\n        return !!this.facet[channel];\n    };\n    FacetModel.prototype.fieldDef = function (channel) {\n        return this.facet[channel];\n    };\n    FacetModel.prototype.parseData = function () {\n        this.component.data = parseData(this);\n        this.child.parseData();\n    };\n    FacetModel.prototype.parseLayoutSize = function () {\n        parseChildrenLayoutSize(this);\n    };\n    FacetModel.prototype.parseSelection = function () {\n        // As a facet has a single child, the selection components are the same.\n        // The child maintains its selections to assemble signals, which remain\n        // within its unit.\n        this.child.parseSelection();\n        this.component.selection = this.child.component.selection;\n    };\n    FacetModel.prototype.parseMarkGroup = function () {\n        this.child.parseMarkGroup();\n    };\n    FacetModel.prototype.parseAxisAndHeader = function () {\n        this.child.parseAxisAndHeader();\n        this.parseHeader('column');\n        this.parseHeader('row');\n        this.mergeChildAxis('x');\n        this.mergeChildAxis('y');\n    };\n    FacetModel.prototype.parseHeader = function (channel) {\n        if (this.channelHasField(channel)) {\n            var fieldDef = this.facet[channel];\n            var header = fieldDef.header || {};\n            var title = fieldDef.title !== undefined ? fieldDef.title :\n                header.title !== undefined ? header.title : fieldDefTitle(fieldDef, this.config);\n            if (this.child.component.layoutHeaders[channel].title) {\n                // merge title with child to produce \"Title / Subtitle / Sub-subtitle\"\n                title += ' / ' + this.child.component.layoutHeaders[channel].title;\n                this.child.component.layoutHeaders[channel].title = null;\n            }\n            this.component.layoutHeaders[channel] = {\n                title: title,\n                facetFieldDef: fieldDef,\n                // TODO: support adding label to footer as well\n                header: [this.makeHeaderComponent(channel, true)]\n            };\n        }\n    };\n    FacetModel.prototype.makeHeaderComponent = function (channel, labels) {\n        var sizeType = channel === 'row' ? 'height' : 'width';\n        return {\n            labels: labels,\n            sizeSignal: this.child.component.layoutSize.get(sizeType) ? this.child.getSizeSignalRef(sizeType) : undefined,\n            axes: []\n        };\n    };\n    FacetModel.prototype.mergeChildAxis = function (channel) {\n        var child = this.child;\n        if (child.component.axes[channel]) {\n            var _a = this.component, layoutHeaders = _a.layoutHeaders, resolve = _a.resolve;\n            resolve.axis[channel] = parseGuideResolve(resolve, channel);\n            if (resolve.axis[channel] === 'shared') {\n                // For shared axis, move the axes to facet's header or footer\n                var headerChannel = channel === 'x' ? 'column' : 'row';\n                var layoutHeader = layoutHeaders[headerChannel];\n                for (var _i = 0, _b = child.component.axes[channel]; _i < _b.length; _i++) {\n                    var axisComponent = _b[_i];\n                    var headerType = getHeaderType(axisComponent.get('orient'));\n                    layoutHeader[headerType] = layoutHeader[headerType] ||\n                        [this.makeHeaderComponent(headerChannel, false)];\n                    var mainAxis = assembleAxis(axisComponent, 'main', this.config, { header: true });\n                    // LayoutHeader no longer keep track of property precedence, thus let's combine.\n                    layoutHeader[headerType][0].axes.push(mainAxis);\n                    axisComponent.mainExtracted = true;\n                }\n            }\n            else {\n                // Otherwise do nothing for independent axes\n            }\n        }\n    };\n    FacetModel.prototype.assembleSelectionTopLevelSignals = function (signals) {\n        return this.child.assembleSelectionTopLevelSignals(signals);\n    };\n    FacetModel.prototype.assembleSelectionSignals = function () {\n        this.child.assembleSelectionSignals();\n        return [];\n    };\n    FacetModel.prototype.assembleSelectionData = function (data) {\n        return this.child.assembleSelectionData(data);\n    };\n    FacetModel.prototype.getLayoutBandMixins = function (headerType) {\n        var bandMixins = {};\n        var bandType = headerType === 'header' ? 'headerBand' : 'footerBand';\n        for (var _i = 0, _a = ['row', 'column']; _i < _a.length; _i++) {\n            var channel = _a[_i];\n            var layoutHeaderComponent = this.component.layoutHeaders[channel];\n            var headerComponent = layoutHeaderComponent[headerType];\n            if (headerComponent && headerComponent[0]) {\n                var sizeType = channel === 'row' ? 'height' : 'width';\n                if (!this.child.component.layoutSize.get(sizeType)) {\n                    // If facet child does not have size signal, then apply headerBand\n                    bandMixins[bandType] = bandMixins[bandType] || {};\n                    bandMixins[bandType][channel] = 0.5;\n                }\n            }\n        }\n        return bandMixins;\n    };\n    FacetModel.prototype.assembleLayout = function () {\n        var columns = this.channelHasField('column') ? this.columnDistinctSignal() : 1;\n        // TODO: determine default align based on shared / independent scales\n        return tslib_1.__assign({ padding: { row: 10, column: 10 } }, this.getLayoutBandMixins('header'), this.getLayoutBandMixins('footer'), { \n            // TODO: support offset for rowHeader/rowFooter/rowTitle/columnHeader/columnFooter/columnTitle\n            offset: 10, columns: columns, bounds: 'full', align: 'all' });\n    };\n    FacetModel.prototype.assembleLayoutSignals = function () {\n        // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.\n        return this.child.assembleLayoutSignals();\n    };\n    FacetModel.prototype.columnDistinctSignal = function () {\n        if (this.parent && (this.parent instanceof FacetModel)) {\n            // For nested facet, we will add columns to group mark instead\n            // See discussion in https://github.com/vega/vega/issues/952\n            // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n            return undefined;\n        }\n        else {\n            // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.\n            var facetLayoutDataName = this.getName('column_domain');\n            return { signal: \"length(data('\" + facetLayoutDataName + \"'))\" };\n        }\n    };\n    FacetModel.prototype.assembleGroup = function (signals) {\n        if (this.parent && (this.parent instanceof FacetModel)) {\n            // Provide number of columns for layout.\n            // See discussion in https://github.com/vega/vega/issues/952\n            // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n            return tslib_1.__assign({}, (this.channelHasField('column') ? {\n                encode: {\n                    update: {\n                        // TODO(https://github.com/vega/vega-lite/issues/2759):\n                        // Correct the signal for facet of concat of facet_column\n                        columns: { field: vgField(this.facet.column, { prefix: 'distinct' }) }\n                    }\n                }\n            } : {}), _super.prototype.assembleGroup.call(this, signals));\n        }\n        return _super.prototype.assembleGroup.call(this, signals);\n    };\n    /**\n     * Aggregate cardinality for calculating size\n     */\n    FacetModel.prototype.getCardinalityAggregateForChild = function () {\n        var fields = [];\n        var ops = [];\n        if (this.child instanceof FacetModel) {\n            if (this.child.channelHasField('column')) {\n                fields.push(vgField(this.child.facet.column));\n                ops.push('distinct');\n            }\n        }\n        else {\n            for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {\n                var channel = _a[_i];\n                var childScaleComponent = this.child.component.scales[channel];\n                if (childScaleComponent && !childScaleComponent.merged) {\n                    var type = childScaleComponent.get('type');\n                    var range = childScaleComponent.get('range');\n                    if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                        var domain = assembleDomain(this.child, channel);\n                        var field = getFieldFromDomain(domain);\n                        if (field) {\n                            fields.push(field);\n                            ops.push('distinct');\n                        }\n                        else {\n                            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                        }\n                    }\n                }\n            }\n        }\n        return fields.length ? { fields: fields, ops: ops } : undefined;\n    };\n    FacetModel.prototype.assembleMarks = function () {\n        var _a = this, child = _a.child, facet = _a.facet;\n        var facetRoot = this.component.data.facetRoot;\n        var data = assembleFacetData(facetRoot);\n        // If we facet by two dimensions, we need to add a cross operator to the aggregation\n        // so that we create all groups\n        var hasRow = this.channelHasField(ROW);\n        var hasColumn = this.channelHasField(COLUMN);\n        var layoutSizeEncodeEntry = child.assembleLayoutSize();\n        var aggregateMixins = {};\n        if (hasRow && hasColumn) {\n            aggregateMixins.aggregate = { cross: true };\n        }\n        var cardinalityAggregateForChild = this.getCardinalityAggregateForChild();\n        if (cardinalityAggregateForChild) {\n            aggregateMixins.aggregate = tslib_1.__assign({}, aggregateMixins.aggregate, cardinalityAggregateForChild);\n        }\n        var title = child.assembleTitle();\n        var style = child.assembleGroupStyle();\n        var markGroup = tslib_1.__assign({ name: this.getName('cell'), type: 'group' }, (title ? { title: title } : {}), (style ? { style: style } : {}), { from: {\n                facet: tslib_1.__assign({ name: facetRoot.name, data: facetRoot.data, groupby: [].concat(hasRow ? [this.vgField(ROW)] : [], hasColumn ? [this.vgField(COLUMN)] : []) }, aggregateMixins)\n            }, sort: {\n                field: [].concat(hasRow ? [this.vgField(ROW, { expr: 'datum', })] : [], hasColumn ? [this.vgField(COLUMN, { expr: 'datum' })] : []),\n                order: [].concat(hasRow ? [(facet.row.sort) || 'ascending'] : [], hasColumn ? [(facet.column.sort) || 'ascending'] : [])\n            } }, (data.length > 0 ? { data: data } : {}), (layoutSizeEncodeEntry ? { encode: { update: layoutSizeEncodeEntry } } : {}), child.assembleGroup());\n        return [markGroup];\n    };\n    FacetModel.prototype.getMapping = function () {\n        return this.facet;\n    };\n    return FacetModel;\n}(ModelWithField));\nexport { FacetModel };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { duplicate } from '../../util';\nimport { Split } from '../split';\nfunction isFalseOrNull(v) {\n    return v === false || v === null;\n}\nvar AxisComponent = /** @class */ (function (_super) {\n    tslib_1.__extends(AxisComponent, _super);\n    function AxisComponent(explicit, implicit, mainExtracted) {\n        if (explicit === void 0) { explicit = {}; }\n        if (implicit === void 0) { implicit = {}; }\n        if (mainExtracted === void 0) { mainExtracted = false; }\n        var _this = _super.call(this) || this;\n        _this.explicit = explicit;\n        _this.implicit = implicit;\n        _this.mainExtracted = mainExtracted;\n        return _this;\n    }\n    AxisComponent.prototype.clone = function () {\n        return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\n    };\n    AxisComponent.prototype.hasAxisPart = function (part) {\n        // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\n        if (part === 'axis') { // always has the axis container part\n            return true;\n        }\n        if (part === 'grid' || part === 'title') {\n            return !!this.get(part);\n        }\n        // Other parts are enabled by default, so they should not be false or null.\n        return !isFalseOrNull(this.get(part));\n    };\n    return AxisComponent;\n}(Split));\nexport { AxisComponent };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvYXhpcy9jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBQyxTQUFTLEVBQU8sTUFBTSxZQUFZLENBQUM7QUFFM0MsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUcvQix1QkFBdUIsQ0FBaUI7SUFDdEMsT0FBTyxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUM7QUFDbkMsQ0FBQztBQU9EO0lBQW1DLHlDQUF5QjtJQUMxRCx1QkFDa0IsUUFBMEMsRUFDMUMsUUFBMEMsRUFDbkQsYUFBcUI7UUFGWix5QkFBQSxFQUFBLGFBQTBDO1FBQzFDLHlCQUFBLEVBQUEsYUFBMEM7UUFDbkQsOEJBQUEsRUFBQSxxQkFBcUI7UUFIOUIsWUFLRSxpQkFBTyxTQUNSO1FBTGlCLGNBQVEsR0FBUixRQUFRLENBQWtDO1FBQzFDLGNBQVEsR0FBUixRQUFRLENBQWtDO1FBQ25ELG1CQUFhLEdBQWIsYUFBYSxDQUFROztJQUc5QixDQUFDO0lBRU0sNkJBQUssR0FBWjtRQUNFLE9BQU8sSUFBSSxhQUFhLENBQ3RCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQ3hCLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FDN0MsQ0FBQztJQUNKLENBQUM7SUFFTSxtQ0FBVyxHQUFsQixVQUFtQixJQUFjO1FBQy9CLDJHQUEyRztRQUUzRyxJQUFJLElBQUksS0FBSyxNQUFNLEVBQUUsRUFBRSxxQ0FBcUM7WUFDMUQsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksSUFBSSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO1lBQ3ZDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekI7UUFDRCwyRUFBMkU7UUFDM0UsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTdCRCxDQUFtQyxLQUFLLEdBNkJ2QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXhpcywgQXhpc1BhcnR9IGZyb20gJy4uLy4uL2F4aXMnO1xuaW1wb3J0IHtGaWVsZERlZkJhc2V9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7ZHVwbGljYXRlLCBPbWl0fSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7VmdBeGlzfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge1NwbGl0fSBmcm9tICcuLi9zcGxpdCc7XG5cblxuZnVuY3Rpb24gaXNGYWxzZU9yTnVsbCh2OiBib29sZWFuIHwgbnVsbCkge1xuICByZXR1cm4gdiA9PT0gZmFsc2UgfHwgdiA9PT0gbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgQXhpc0NvbXBvbmVudFByb3BzID0gT21pdDxWZ0F4aXMsICd0aXRsZSc+ICYge1xuXG4gIHRpdGxlOiBzdHJpbmcgfCBGaWVsZERlZkJhc2U8c3RyaW5nPltdO1xufTtcblxuZXhwb3J0IGNsYXNzIEF4aXNDb21wb25lbnQgZXh0ZW5kcyBTcGxpdDxBeGlzQ29tcG9uZW50UHJvcHM+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGV4cGxpY2l0OiBQYXJ0aWFsPEF4aXNDb21wb25lbnRQcm9wcz4gPSB7fSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW1wbGljaXQ6IFBhcnRpYWw8QXhpc0NvbXBvbmVudFByb3BzPiA9IHt9LFxuICAgIHB1YmxpYyBtYWluRXh0cmFjdGVkID0gZmFsc2VcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IEF4aXNDb21wb25lbnQoXG4gICAgICBkdXBsaWNhdGUodGhpcy5leHBsaWNpdCksXG4gICAgICBkdXBsaWNhdGUodGhpcy5pbXBsaWNpdCksIHRoaXMubWFpbkV4dHJhY3RlZFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgaGFzQXhpc1BhcnQocGFydDogQXhpc1BhcnQpIHtcbiAgICAvLyBGSVhNRShodHRwczovL2dpdGh1Yi5jb20vdmVnYS92ZWdhLWxpdGUvaXNzdWVzLzI1NTIpIHRoaXMgbWV0aG9kIGNhbiBiZSB3cm9uZyBpZiB1c2VycyB1c2UgYSBWZWdhIHRoZW1lLlxuXG4gICAgaWYgKHBhcnQgPT09ICdheGlzJykgeyAvLyBhbHdheXMgaGFzIHRoZSBheGlzIGNvbnRhaW5lciBwYXJ0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocGFydCA9PT0gJ2dyaWQnIHx8IHBhcnQgPT09ICd0aXRsZScpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuZ2V0KHBhcnQpO1xuICAgIH1cbiAgICAvLyBPdGhlciBwYXJ0cyBhcmUgZW5hYmxlZCBieSBkZWZhdWx0LCBzbyB0aGV5IHNob3VsZCBub3QgYmUgZmFsc2Ugb3IgbnVsbC5cbiAgICByZXR1cm4gIWlzRmFsc2VPck51bGwodGhpcy5nZXQocGFydCkpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXhpc0NvbXBvbmVudEluZGV4IHtcbiAgeD86IEF4aXNDb21wb25lbnRbXTtcbiAgeT86IEF4aXNDb21wb25lbnRbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBeGlzSW5kZXgge1xuICB4PzogQXhpcztcbiAgeT86IEF4aXM7XG59XG4iXX0=","export function getAxisConfig(property, config, channel, orient, scaleType) {\n    if (orient === void 0) { orient = ''; }\n    // configTypes to loop, starting from higher precedence\n    var configTypes = (scaleType === 'band' ? ['axisBand'] : []).concat([\n        channel === 'x' ? 'axisX' : 'axisY',\n        'axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1),\n        'axis'\n    ]);\n    for (var _i = 0, configTypes_1 = configTypes; _i < configTypes_1.length; _i++) {\n        var configType = configTypes_1[_i];\n        if (config[configType] && config[configType][property] !== undefined) {\n            return config[configType][property];\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvYXhpcy9jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsTUFBTSx3QkFBd0IsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsT0FBNkIsRUFBRSxNQUFtQixFQUFFLFNBQW9CO0lBQXpDLHVCQUFBLEVBQUEsV0FBbUI7SUFDaEgsdURBQXVEO0lBQ3ZELElBQU0sV0FBVyxHQUFHLENBQUMsU0FBUyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3BFLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTztRQUNuQyxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDNUQsTUFBTTtLQUNQLENBQUMsQ0FBQztJQUNILEtBQXlCLFVBQVcsRUFBWCwyQkFBVyxFQUFYLHlCQUFXLEVBQVgsSUFBVyxFQUFFO1FBQWpDLElBQU0sVUFBVSxvQkFBQTtRQUNuQixJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQ3BFLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3JDO0tBQ0Y7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQb3NpdGlvblNjYWxlQ2hhbm5lbH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7U2NhbGVUeXBlfSBmcm9tICcuLi8uLi9zY2FsZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBeGlzQ29uZmlnKHByb3BlcnR5OiBzdHJpbmcsIGNvbmZpZzogQ29uZmlnLCBjaGFubmVsOiBQb3NpdGlvblNjYWxlQ2hhbm5lbCwgb3JpZW50OiBzdHJpbmcgPSAnJywgc2NhbGVUeXBlOiBTY2FsZVR5cGUpIHtcbiAgLy8gY29uZmlnVHlwZXMgdG8gbG9vcCwgc3RhcnRpbmcgZnJvbSBoaWdoZXIgcHJlY2VkZW5jZVxuICBjb25zdCBjb25maWdUeXBlcyA9IChzY2FsZVR5cGUgPT09ICdiYW5kJyA/IFsnYXhpc0JhbmQnXSA6IFtdKS5jb25jYXQoW1xuICAgIGNoYW5uZWwgPT09ICd4JyA/ICdheGlzWCcgOiAnYXhpc1knLFxuICAgICdheGlzJyArIG9yaWVudC5zdWJzdHIoMCwxKS50b1VwcGVyQ2FzZSgpICsgb3JpZW50LnN1YnN0cigxKSwgLy8gYXhpc1RvcCwgYXhpc0JvdHRvbSwgLi4uXG4gICAgJ2F4aXMnXG4gIF0pO1xuICBmb3IgKGNvbnN0IGNvbmZpZ1R5cGUgb2YgY29uZmlnVHlwZXMpIHtcbiAgICBpZiAoY29uZmlnW2NvbmZpZ1R5cGVdICYmIGNvbmZpZ1tjb25maWdUeXBlXVtwcm9wZXJ0eV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNvbmZpZ1tjb25maWdUeXBlXVtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { X } from '../../channel';\nimport { isTimeFieldDef } from '../../fielddef';\nimport { ScaleType } from '../../scale';\nimport { NOMINAL, ORDINAL } from '../../type';\nimport { contains, keys } from '../../util';\nimport { timeFormatExpression } from '../common';\nimport { getAxisConfig } from './config';\nexport function labels(model, channel, specifiedLabelsSpec, orient) {\n    var fieldDef = model.fieldDef(channel) ||\n        (channel === 'x' ? model.fieldDef('x2') :\n            channel === 'y' ? model.fieldDef('y2') :\n                undefined);\n    var axis = model.axis(channel);\n    var config = model.config;\n    var labelsSpec = {};\n    // Text\n    if (isTimeFieldDef(fieldDef)) {\n        var isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n        var expr = timeFormatExpression('datum.value', fieldDef.timeUnit, axis.format, config.axis.shortTimeLabels, config.timeFormat, isUTCScale);\n        if (expr) {\n            labelsSpec.text = { signal: expr };\n        }\n    }\n    // Label Angle\n    var angle = getAxisConfig('labelAngle', model.config, channel, orient, model.getScaleComponent(channel).get('type'));\n    if (angle === undefined) {\n        angle = labelAngle(axis, channel, fieldDef);\n        if (angle) {\n            labelsSpec.angle = { value: angle };\n        }\n    }\n    if (angle !== undefined) {\n        var align = labelAlign(angle, orient);\n        if (align) {\n            labelsSpec.align = { value: align };\n        }\n        labelsSpec.baseline = labelBaseline(angle, orient);\n    }\n    labelsSpec = tslib_1.__assign({}, labelsSpec, specifiedLabelsSpec);\n    return keys(labelsSpec).length === 0 ? undefined : labelsSpec;\n}\nexport function labelBaseline(angle, orient) {\n    if (orient === 'top' || orient === 'bottom') {\n        if (angle <= 45 || 315 <= angle) {\n            return { value: orient === 'top' ? 'bottom' : 'top' };\n        }\n        else if (135 <= angle && angle <= 225) {\n            return { value: orient === 'top' ? 'top' : 'bottom' };\n        }\n        else {\n            return { value: 'middle' };\n        }\n    }\n    else {\n        if ((angle <= 45 || 315 <= angle) || (135 <= angle && angle <= 225)) {\n            return { value: 'middle' };\n        }\n        else if (45 <= angle && angle <= 135) {\n            return { value: orient === 'left' ? 'top' : 'bottom' };\n        }\n        else {\n            return { value: orient === 'left' ? 'bottom' : 'top' };\n        }\n    }\n}\nexport function labelAngle(axis, channel, fieldDef) {\n    if (axis.labelAngle !== undefined) {\n        // Make angle within [0,360)\n        return ((axis.labelAngle % 360) + 360) % 360;\n    }\n    else {\n        if (channel === X && contains([NOMINAL, ORDINAL], fieldDef.type)) {\n            return 270;\n        }\n    }\n    return undefined;\n}\nexport function labelAlign(angle, orient) {\n    angle = ((angle % 360) + 360) % 360;\n    if (orient === 'top' || orient === 'bottom') {\n        if (angle % 180 === 0) {\n            return 'center';\n        }\n        else if (0 < angle && angle < 180) {\n            return orient === 'top' ? 'right' : 'left';\n        }\n        else {\n            return orient === 'top' ? 'left' : 'right';\n        }\n    }\n    else {\n        if ((angle + 90) % 180 === 0) {\n            return 'center';\n        }\n        else if (90 <= angle && angle < 270) {\n            return orient === 'left' ? 'left' : 'right';\n        }\n        else {\n            return orient === 'left' ? 'right' : 'left';\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBpbGUvYXhpcy9lbmNvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBZ0MsQ0FBQyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBVyxjQUFjLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQzVDLE9BQU8sRUFBQyxRQUFRLEVBQUUsSUFBSSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBRTFDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUUvQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRXZDLE1BQU0saUJBQWlCLEtBQWdCLEVBQUUsT0FBNkIsRUFBRSxtQkFBd0IsRUFBRSxNQUFrQjtJQUNsSCxJQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUN0QyxDQUNFLE9BQU8sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN4QyxPQUFPLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3hDLFNBQVMsQ0FDVixDQUFDO0lBQ0osSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQyxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBRTVCLElBQUksVUFBVSxHQUFRLEVBQUUsQ0FBQztJQUV6QixPQUFPO0lBQ1AsSUFBSSxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFD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Q0Y7U0FBTTtRQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsRUFBRTtZQUM1QixPQUFPLFFBQVEsQ0FBQztTQUNqQjthQUFNLElBQUksRUFBRSxJQUFJLEtBQUssSUFBSSxLQUFLLEdBQUcsR0FBRyxFQUFFO1lBQ3JDLE9BQU8sTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7U0FDN0M7YUFBTTtZQUNMLE9BQU8sTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7U0FDN0M7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0F4aXN9IGZyb20gJy4uLy4uL2F4aXMnO1xuaW1wb3J0IHtDaGFubmVsLCBQb3NpdGlvblNjYWxlQ2hhbm5lbCwgWH0gZnJvbSAnLi4vLi4vY2hhbm5lbCc7XG5pbXBvcnQge0ZpZWxkRGVmLCBpc1RpbWVGaWVsZERlZn0gZnJvbSAnLi4vLi4vZmllbGRkZWYnO1xuaW1wb3J0IHtTY2FsZVR5cGV9IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7Tk9NSU5BTCwgT1JESU5BTH0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQge2NvbnRhaW5zLCBrZXlzfSBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7QXhpc09yaWVudCwgSG9yaXpvbnRhbEFsaWdufSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge3RpbWVGb3JtYXRFeHByZXNzaW9ufSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtnZXRBeGlzQ29uZmlnfSBmcm9tICcuL2NvbmZpZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBsYWJlbHMobW9kZWw6IFVuaXRNb2RlbCwgY2hhbm5lbDogUG9zaXRpb25TY2FsZUNoYW5uZWwsIHNwZWNpZmllZExhYmVsc1NwZWM6IGFueSwgb3JpZW50OiBBeGlzT3JpZW50KSB7XG4gIGNvbnN0IGZpZWxkRGVmID0gbW9kZWwuZmllbGREZWYoY2hhbm5lbCkgfHxcbiAgICAoXG4gICAgICBjaGFubmVsID09PSAneCcgPyBtb2RlbC5maWVsZERlZigneDInKSA6XG4gICAgICBjaGFubmVsID09PSAneScgPyBtb2RlbC5maWVsZERlZigneTInKSA6XG4gICAgICB1bmRlZmluZWRcbiAgICApO1xuICBjb25zdCBheGlzID0gbW9kZWwuYXhpcyhjaGFubmVsKTtcbiAgY29uc3QgY29uZmlnID0gbW9kZWwuY29uZmlnO1xuXG4gIGxldCBsYWJlbHNTcGVjOiBhbnkgPSB7fTtcblxuICAvLyBUZXh0XG4gIGlmIChpc1RpbWVGaWVsZERlZihmaWVsZERlZikpIHtcbiAgICBjb25zdCBpc1VUQ1NjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoY2hhbm5lbCkuZ2V0KCd0eXBlJykgPT09IFNjYWxlVHlwZS5VVEM7XG5cbiAgICBjb25zdCBleHByID0gdGltZUZvcm1hdEV4cHJlc3Npb24oJ2RhdHVtLnZhbHVlJywgZmllbGREZWYudGltZVVuaXQsIGF4aXMuZm9ybWF0LCBjb25maWcuYXhpcy5zaG9ydFRpbWVMYWJlbHMsIGNvbmZpZy50aW1lRm9ybWF0LCBpc1VUQ1NjYWxlKTtcblxuICAgIGlmIChleHByKSB7XG4gICAgICBsYWJlbHNTcGVjLnRleHQgPSB7c2lnbmFsOiBleHByfTtcbiAgICB9XG4gIH1cblxuICAvLyBMYWJlbCBBbmdsZVxuICBsZXQgYW5nbGUgPSBnZXRBeGlzQ29uZmlnKCdsYWJlbEFuZ2xlJywgbW9kZWwuY29uZmlnLCBjaGFubmVsLCBvcmllbnQsIG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwpLmdldCgndHlwZScpKTtcbiAgaWYgKGFuZ2xlID09PSB1bmRlZmluZWQpIHtcbiAgICBhbmdsZSA9IGxhYmVsQW5nbGUoYXhpcywgY2hhbm5lbCwgZmllbGREZWYpO1xuICAgIGlmIChhbmdsZSkge1xuICAgICAgbGFiZWxzU3BlYy5hbmdsZSA9IHt2YWx1ZTogYW5nbGV9O1xuICAgIH1cbiAgfVxuXG4gIGlmIChhbmdsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3QgYWxpZ24gPSBsYWJlbEFsaWduKGFuZ2xlLCBvcmllbnQpO1xuICAgIGlmIChhbGlnbikge1xuICAgICAgbGFiZWxzU3BlYy5hbGlnbiA9IHt2YWx1ZTogYWxpZ259O1xuICAgIH1cblxuICAgIGxhYmVsc1NwZWMuYmFzZWxpbmUgPSBsYWJlbEJhc2VsaW5lKGFuZ2xlLCBvcmllbnQpO1xuICB9XG5cbiAgbGFiZWxzU3BlYyA9IHtcbiAgICAuLi5sYWJlbHNTcGVjLFxuICAgIC4uLnNwZWNpZmllZExhYmVsc1NwZWNcbiAgfTtcblxuICByZXR1cm4ga2V5cyhsYWJlbHNTcGVjKS5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiBsYWJlbHNTcGVjO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbGFiZWxCYXNlbGluZShhbmdsZTogbnVtYmVyLCBvcmllbnQ6IEF4aXNPcmllbnQpIHtcbiAgaWYgKG9yaWVudCA9PT0gJ3RvcCcgfHwgb3JpZW50ID09PSAnYm90dG9tJykge1xuICAgIGlmIChhbmdsZSA8PSA0NSB8fCAzMTUgPD0gYW5nbGUpIHtcbiAgICAgIHJldHVybiB7dmFsdWU6IG9yaWVudCA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnfTtcbiAgICB9IGVsc2UgaWYgKDEzNSA8PSBhbmdsZSAmJiBhbmdsZSA8PSAyMjUpIHtcbiAgICAgIHJldHVybiB7dmFsdWU6IG9yaWVudCA9PT0gJ3RvcCcgPyAndG9wJzogJ2JvdHRvbSd9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge3ZhbHVlOiAnbWlkZGxlJ307XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICgoYW5nbGUgPD0gNDUgfHwgMzE1IDw9IGFuZ2xlKSB8fCAoMTM1IDw9IGFuZ2xlICYmIGFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgIHJldHVybiB7dmFsdWU6ICdtaWRkbGUnfTtcbiAgICB9IGVsc2UgaWYgKDQ1IDw9IGFuZ2xlICYmIGFuZ2xlIDw9IDEzNSkge1xuICAgICAgcmV0dXJuIHt2YWx1ZTogb3JpZW50ID09PSAnbGVmdCcgPyAndG9wJyA6ICdib3R0b20nfTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHt2YWx1ZTogb3JpZW50ID09PSAnbGVmdCcgPyAnYm90dG9tJyA6ICd0b3AnfTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxhYmVsQW5nbGUoYXhpczogQXhpcywgY2hhbm5lbDogQ2hhbm5lbCwgZmllbGREZWY6IEZpZWxkRGVmPHN0cmluZz4pIHtcbiAgaWYgKGF4aXMubGFiZWxBbmdsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gTWFrZSBhbmdsZSB3aXRoaW4gWzAsMzYwKVxuICAgIHJldHVybiAoKGF4aXMubGFiZWxBbmdsZSAlIDM2MCkgKyAzNjApICUgMzYwO1xuICB9IGVsc2Uge1xuICAgIGlmIChjaGFubmVsID09PSBYICYmIGNvbnRhaW5zKFtOT01JTkFMLCBPUkRJTkFMXSwgZmllbGREZWYudHlwZSkpIHtcbiAgICAgIHJldHVybiAyNzA7XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsYWJlbEFsaWduKGFuZ2xlOiBudW1iZXIsIG9yaWVudDogQXhpc09yaWVudCk6IEhvcml6b250YWxBbGlnbiB7XG4gIGFuZ2xlID0gKChhbmdsZSAlIDM2MCkgKyAzNjApICUgMzYwO1xuICBpZiAob3JpZW50ID09PSAndG9wJyB8fCBvcmllbnQgPT09ICdib3R0b20nKSB7XG4gICAgaWYgKGFuZ2xlICUgMTgwID09PSAwKSB7XG4gICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgfSBlbHNlIGlmICgwIDwgYW5nbGUgJiYgYW5nbGUgPCAxODApIHtcbiAgICAgIHJldHVybiBvcmllbnQgPT09ICd0b3AnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9yaWVudCA9PT0gJ3RvcCcgPyAnbGVmdCcgOiAncmlnaHQnO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoKGFuZ2xlICsgOTApICUgMTgwID09PSAwKSB7XG4gICAgICByZXR1cm4gJ2NlbnRlcic7XG4gICAgfSBlbHNlIGlmICg5MCA8PSBhbmdsZSAmJiBhbmdsZSA8IDI3MCkge1xuICAgICAgcmV0dXJuIG9yaWVudCA9PT0gJ2xlZnQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG9yaWVudCA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICB9XG4gIH1cbn1cblxuIl19","import { truncate } from 'vega-util';\nimport { binToString } from '../../bin';\nimport { X, Y } from '../../channel';\nimport { dateTimeExpr, isDateTime } from '../../datetime';\nimport { title as fieldDefTitle } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, isSelectionDomain } from '../../scale';\nimport { QUANTITATIVE } from '../../type';\nimport { contains } from '../../util';\n// TODO: we need to refactor this method after we take care of config refactoring\n/**\n * Default rules for whether to show a grid should be shown for a channel.\n * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned\n */\nexport function grid(scaleType, fieldDef) {\n    return !hasDiscreteDomain(scaleType) && !fieldDef.bin;\n}\nexport function gridScale(model, channel) {\n    var gridChannel = channel === 'x' ? 'y' : 'x';\n    if (model.getScaleComponent(gridChannel)) {\n        return model.scaleName(gridChannel);\n    }\n    return undefined;\n}\nexport function labelFlush(fieldDef, channel, specifiedAxis) {\n    if (specifiedAxis.labelFlush !== undefined) {\n        return specifiedAxis.labelFlush;\n    }\n    if (channel === 'x' && contains(['quantitative', 'temporal'], fieldDef.type)) {\n        return true;\n    }\n    return undefined;\n}\nexport function labelOverlap(fieldDef, specifiedAxis, channel, scaleType) {\n    if (specifiedAxis.labelOverlap !== undefined) {\n        return specifiedAxis.labelOverlap;\n    }\n    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are\n    if (fieldDef.type !== 'nominal') {\n        if (scaleType === 'log') {\n            return 'greedy';\n        }\n        return true;\n    }\n    return undefined;\n}\nexport function orient(channel) {\n    switch (channel) {\n        case X:\n            return 'bottom';\n        case Y:\n            return 'left';\n    }\n    /* istanbul ignore next: This should never happen. */\n    throw new Error(log.message.INVALID_CHANNEL_FOR_AXIS);\n}\nexport function tickCount(channel, fieldDef, scaleType, size) {\n    if (!hasDiscreteDomain(scaleType) && scaleType !== 'log' && !contains(['month', 'hours', 'day', 'quarter'], fieldDef.timeUnit)) {\n        if (fieldDef.bin) {\n            // for binned data, we don't want more ticks than maxbins\n            return { signal: \"ceil(\" + size.signal + \"/20)\" };\n        }\n        return { signal: \"ceil(\" + size.signal + \"/40)\" };\n    }\n    return undefined;\n}\nexport function title(maxLength, fieldDef, config) {\n    // if not defined, automatically determine axis title from field def\n    var fieldTitle = fieldDefTitle(fieldDef, config);\n    return maxLength ? truncate(fieldTitle, maxLength) : fieldTitle;\n}\nexport function values(specifiedAxis, model, fieldDef, channel) {\n    var vals = specifiedAxis.values;\n    if (specifiedAxis.values && isDateTime(vals[0])) {\n        return vals.map(function (dt) {\n            // normalize = true as end user won't put 0 = January\n            return { signal: dateTimeExpr(dt, true) };\n        });\n    }\n    if (!vals && fieldDef.bin && fieldDef.type === QUANTITATIVE) {\n        var domain = model.scaleDomain(channel);\n        if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) { // explicit value\n            return vals;\n        }\n        var signal = model.getName(binToString(fieldDef.bin) + \"_\" + fieldDef.field + \"_bins\");\n        return { signal: \"sequence(\" + signal + \".start, \" + signal + \".stop + \" + signal + \".step, \" + signal + \".step)\" };\n    }\n    return vals;\n}\n//# sourceMappingURL=data:application/json;base64,","import { AXIS_PARTS, isAxisProperty, VG_AXIS_PROPERTIES } from '../../axis';\nimport { POSITION_SCALE_CHANNELS, X, Y } from '../../channel';\nimport { toFieldDefBase } from '../../fielddef';\nimport { keys } from '../../util';\nimport { getSpecifiedOrDefaultValue, guideEncodeEntry, mergeTitle, mergeTitleComponent, mergeTitleFieldDefs, numberFormat } from '../common';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, mergeValuesWithExplicit } from '../split';\nimport { AxisComponent } from './component';\nimport { getAxisConfig } from './config';\nimport * as encode from './encode';\nimport * as properties from './properties';\nexport function parseUnitAxis(model) {\n    return POSITION_SCALE_CHANNELS.reduce(function (axis, channel) {\n        if (model.component.scales[channel] && model.axis(channel)) {\n            axis[channel] = [parseAxis(channel, model)];\n        }\n        return axis;\n    }, {});\n}\nvar OPPOSITE_ORIENT = {\n    bottom: 'top',\n    top: 'bottom',\n    left: 'right',\n    right: 'left'\n};\nexport function parseLayerAxis(model) {\n    var _a = model.component, axes = _a.axes, resolve = _a.resolve;\n    var axisCount = { top: 0, bottom: 0, right: 0, left: 0 };\n    for (var _i = 0, _b = model.children; _i < _b.length; _i++) {\n        var child = _b[_i];\n        child.parseAxisAndHeader();\n        for (var _c = 0, _d = keys(child.component.axes); _c < _d.length; _c++) {\n            var channel = _d[_c];\n            resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n            if (resolve.axis[channel] === 'shared') {\n                // If the resolve says shared (and has not been overridden)\n                // We will try to merge and see if there is a conflict\n                axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n                if (!axes[channel]) {\n                    // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n                    // Thus, mark axis as independent and remove the axis component.\n                    resolve.axis[channel] = 'independent';\n                    delete axes[channel];\n                }\n            }\n        }\n    }\n    // Move axes to layer's axis component and merge shared axes\n    for (var _e = 0, _f = [X, Y]; _e < _f.length; _e++) {\n        var channel = _f[_e];\n        for (var _g = 0, _h = model.children; _g < _h.length; _g++) {\n            var child = _h[_g];\n            if (!child.component.axes[channel]) {\n                // skip if the child does not have a particular axis\n                continue;\n            }\n            if (resolve.axis[channel] === 'independent') {\n                // If axes are independent, concat the axisComponent array.\n                axes[channel] = (axes[channel] || []).concat(child.component.axes[channel]);\n                // Automatically adjust orient\n                for (var _j = 0, _k = child.component.axes[channel]; _j < _k.length; _j++) {\n                    var axisComponent = _k[_j];\n                    var _l = axisComponent.getWithExplicit('orient'), orient = _l.value, explicit = _l.explicit;\n                    if (axisCount[orient] > 0 && !explicit) {\n                        // Change axis orient if the number do not match\n                        var oppositeOrient = OPPOSITE_ORIENT[orient];\n                        if (axisCount[orient] > axisCount[oppositeOrient]) {\n                            axisComponent.set('orient', oppositeOrient, false);\n                        }\n                    }\n                    axisCount[orient]++;\n                    // TODO(https://github.com/vega/vega-lite/issues/2634): automaticaly add extra offset?\n                }\n            }\n            // After merging, make sure to remove axes from child\n            delete child.component.axes[channel];\n        }\n    }\n}\nfunction mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\n    if (mergedAxisCmpts) {\n        // FIXME: this is a bit wrong once we support multiple axes\n        if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n            return undefined; // Cannot merge axis component with different number of axes.\n        }\n        var length_1 = mergedAxisCmpts.length;\n        for (var i = 0; i < length_1; i++) {\n            var merged = mergedAxisCmpts[i];\n            var child = childAxisCmpts[i];\n            if ((!!merged) !== (!!child)) {\n                return undefined;\n            }\n            else if (merged && child) {\n                var mergedOrient = merged.getWithExplicit('orient');\n                var childOrient = child.getWithExplicit('orient');\n                if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n                    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n                    // Cannot merge due to inconsistent orient\n                    return undefined;\n                }\n                else {\n                    mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n                }\n            }\n        }\n    }\n    else {\n        // For first one, return a copy of the child\n        return childAxisCmpts.map(function (axisComponent) { return axisComponent.clone(); });\n    }\n    return mergedAxisCmpts;\n}\nfunction mergeAxisComponent(merged, child) {\n    var _loop_1 = function (prop) {\n        var mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', \n        // Tie breaker function\n        function (v1, v2) {\n            switch (prop) {\n                case 'title':\n                    return mergeTitleComponent(v1, v2);\n                case 'gridScale':\n                    return {\n                        explicit: v1.explicit,\n                        value: v1.value || v2.value\n                    };\n            }\n            return defaultTieBreaker(v1, v2, prop, 'axis');\n        });\n        merged.setWithExplicit(prop, mergedValueWithExplicit);\n    };\n    for (var _i = 0, VG_AXIS_PROPERTIES_1 = VG_AXIS_PROPERTIES; _i < VG_AXIS_PROPERTIES_1.length; _i++) {\n        var prop = VG_AXIS_PROPERTIES_1[_i];\n        _loop_1(prop);\n    }\n    return merged;\n}\nfunction getFieldDefTitle(model, channel) {\n    var channel2 = channel === 'x' ? 'x2' : 'y2';\n    var fieldDef = model.fieldDef(channel);\n    var fieldDef2 = model.fieldDef(channel2);\n    var title1 = fieldDef ? fieldDef.title : undefined;\n    var title2 = fieldDef2 ? fieldDef2.title : undefined;\n    if (title1 && title2) {\n        return mergeTitle(title1, title2);\n    }\n    else if (title1) {\n        return title1;\n    }\n    else if (title2) {\n        return title2;\n    }\n    else if (title1 !== undefined) { // falsy value to disable config\n        return title1;\n    }\n    else if (title2 !== undefined) { // falsy value to disable config\n        return title2;\n    }\n    return undefined;\n}\nfunction parseAxis(channel, model) {\n    var axis = model.axis(channel);\n    var axisComponent = new AxisComponent();\n    // 1.2. Add properties\n    VG_AXIS_PROPERTIES.forEach(function (property) {\n        var value = getProperty(property, axis, channel, model);\n        if (value !== undefined) {\n            var explicit = \n            // specified axis.values is already respected, but may get transformed.\n            property === 'values' ? !!axis.values :\n                // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n                property === 'encode' ? !!axis.encoding || !!axis.labelAngle :\n                    // title can be explicit if fieldDef.title is set\n                    property === 'title' && value === getFieldDefTitle(model, channel) ? true :\n                        // Otherwise, things are explicit if the returned value matches the specified property\n                        value === axis[property];\n            var configValue = getAxisConfig(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type'));\n            // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n            if (explicit || configValue === undefined) {\n                // Do not apply implicit rule if there is a config value\n                axisComponent.set(property, value, explicit);\n            }\n            else if (property === 'grid' && configValue) {\n                // Grid is an exception because we need to set grid = true to generate another grid axis\n                axisComponent.set(property, configValue, false);\n            }\n        }\n    });\n    // 2) Add guide encode definition groups\n    var axisEncoding = axis.encoding || {};\n    var axisEncode = AXIS_PARTS.reduce(function (e, part) {\n        if (!axisComponent.hasAxisPart(part)) {\n            // No need to create encode for a disabled part.\n            return e;\n        }\n        var axisEncodingPart = guideEncodeEntry(axisEncoding[part] || {}, model);\n        var value = part === 'labels' ?\n            encode.labels(model, channel, axisEncodingPart, axisComponent.get('orient')) :\n            axisEncodingPart;\n        if (value !== undefined && keys(value).length > 0) {\n            e[part] = { update: value };\n        }\n        return e;\n    }, {});\n    // FIXME: By having encode as one property, we won't have fine grained encode merging.\n    if (keys(axisEncode).length > 0) {\n        axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n    }\n    return axisComponent;\n}\nfunction getProperty(property, specifiedAxis, channel, model) {\n    var fieldDef = model.fieldDef(channel);\n    switch (property) {\n        case 'scale':\n            return model.scaleName(channel);\n        case 'gridScale':\n            return properties.gridScale(model, channel);\n        case 'format':\n            // We don't include temporal field here as we apply format in encode block\n            return numberFormat(fieldDef, specifiedAxis.format, model.config);\n        case 'grid': {\n            var scaleType = model.getScaleComponent(channel).get('type');\n            return getSpecifiedOrDefaultValue(specifiedAxis.grid, properties.grid(scaleType, fieldDef));\n        }\n        case 'labelFlush':\n            return properties.labelFlush(fieldDef, channel, specifiedAxis);\n        case 'labelOverlap': {\n            var scaleType = model.getScaleComponent(channel).get('type');\n            return properties.labelOverlap(fieldDef, specifiedAxis, channel, scaleType);\n        }\n        case 'orient':\n            return getSpecifiedOrDefaultValue(specifiedAxis.orient, properties.orient(channel));\n        case 'tickCount': {\n            var scaleType = model.getScaleComponent(channel).get('type');\n            var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n            var size = sizeType ? model.getSizeSignalRef(sizeType)\n                : undefined;\n            return getSpecifiedOrDefaultValue(specifiedAxis.tickCount, properties.tickCount(channel, fieldDef, scaleType, size));\n        }\n        case 'title':\n            var channel2 = channel === 'x' ? 'x2' : 'y2';\n            var fieldDef2 = model.fieldDef(channel2);\n            // Keep undefined so we use default if title is unspecified.\n            // For other falsy value, keep them so we will hide the title.\n            var fieldDefTitle = getFieldDefTitle(model, channel);\n            var specifiedTitle = fieldDefTitle !== undefined ? fieldDefTitle :\n                specifiedAxis.title === undefined ? undefined : specifiedAxis.title;\n            return getSpecifiedOrDefaultValue(specifiedTitle, \n            // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n            mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : []));\n        case 'values':\n            return properties.values(specifiedAxis, model, fieldDef, channel);\n    }\n    // Otherwise, return specified property.\n    return isAxisProperty(property) ? specifiedAxis[property] : undefined;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { isAggregate } from '../../encoding';\nimport { isContinuous, isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { AREA, BAR, CIRCLE, isMarkDef, LINE, POINT, RECT, RULE, SQUARE, TEXT, TICK } from '../../mark';\nimport { QUANTITATIVE, TEMPORAL } from '../../type';\nimport { contains } from '../../util';\nimport { getMarkConfig } from '../common';\nexport function normalizeMarkDef(mark, encoding, config) {\n    var markDef = isMarkDef(mark) ? tslib_1.__assign({}, mark) : { type: mark };\n    // set orient, which can be overridden by rules as sometimes the specified orient is invalid.\n    var specifiedOrient = markDef.orient || getMarkConfig('orient', markDef, config);\n    markDef.orient = orient(markDef.type, encoding, specifiedOrient);\n    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {\n        log.warn(log.message.orientOverridden(markDef.orient, specifiedOrient));\n    }\n    // set opacity and filled if not specified in mark config\n    var specifiedOpacity = markDef.opacity !== undefined ? markDef.opacity : getMarkConfig('opacity', markDef, config);\n    if (specifiedOpacity === undefined) {\n        markDef.opacity = defaultOpacity(markDef.type, encoding);\n    }\n    var specifiedFilled = markDef.filled;\n    if (specifiedFilled === undefined) {\n        markDef.filled = filled(markDef, config);\n    }\n    return markDef;\n}\nfunction defaultOpacity(mark, encoding) {\n    if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {\n        // point-based marks\n        if (!isAggregate(encoding)) {\n            return 0.7;\n        }\n    }\n    return undefined;\n}\nfunction filled(markDef, config) {\n    var filledConfig = getMarkConfig('filled', markDef, config);\n    var mark = markDef.type;\n    return filledConfig !== undefined ? filledConfig : mark !== POINT && mark !== LINE && mark !== RULE;\n}\nfunction orient(mark, encoding, specifiedOrient) {\n    switch (mark) {\n        case POINT:\n        case CIRCLE:\n        case SQUARE:\n        case TEXT:\n        case RECT:\n            // orient is meaningless for these marks.\n            return undefined;\n    }\n    var yIsRange = encoding.y2;\n    var xIsRange = encoding.x2;\n    switch (mark) {\n        case BAR:\n            if (yIsRange || xIsRange) {\n                // Ranged bar does not always have clear orientation, so we allow overriding\n                if (specifiedOrient) {\n                    return specifiedOrient;\n                }\n                // If y is range and x is non-range, non-bin Q, y is likely a prebinned field\n                var xDef = encoding.x;\n                if (!xIsRange && isFieldDef(xDef) && xDef.type === QUANTITATIVE && !xDef.bin) {\n                    return 'horizontal';\n                }\n                // If x is range and y is non-range, non-bin Q, x is likely a prebinned field\n                var yDef = encoding.y;\n                if (!yIsRange && isFieldDef(yDef) && yDef.type === QUANTITATIVE && !yDef.bin) {\n                    return 'vertical';\n                }\n            }\n        /* tslint:disable */\n        case RULE: // intentionally fall through\n            // return undefined for line segment rule and bar with both axis ranged\n            if (xIsRange && yIsRange) {\n                return undefined;\n            }\n        case AREA: // intentionally fall through\n            // If there are range for both x and y, y (vertical) has higher precedence.\n            if (yIsRange) {\n                return 'vertical';\n            }\n            else if (xIsRange) {\n                return 'horizontal';\n            }\n            else if (mark === RULE) {\n                if (encoding.x && !encoding.y) {\n                    return 'vertical';\n                }\n                else if (encoding.y && !encoding.x) {\n                    return 'horizontal';\n                }\n            }\n        case LINE: // intentional fall through\n        case TICK: // Tick is opposite to bar, line, area and never have ranged mark.\n            /* tslint:enable */\n            var xIsContinuous = isFieldDef(encoding.x) && isContinuous(encoding.x);\n            var yIsContinuous = isFieldDef(encoding.y) && isContinuous(encoding.y);\n            if (xIsContinuous && !yIsContinuous) {\n                return mark !== 'tick' ? 'horizontal' : 'vertical';\n            }\n            else if (!xIsContinuous && yIsContinuous) {\n                return mark !== 'tick' ? 'vertical' : 'horizontal';\n            }\n            else if (xIsContinuous && yIsContinuous) {\n                var xDef = encoding.x; // we can cast here since they are surely fieldDef\n                var yDef = encoding.y;\n                var xIsTemporal = xDef.type === TEMPORAL;\n                var yIsTemporal = yDef.type === TEMPORAL;\n                // temporal without timeUnit is considered continuous, but better serves as dimension\n                if (xIsTemporal && !yIsTemporal) {\n                    return mark !== 'tick' ? 'vertical' : 'horizontal';\n                }\n                else if (!xIsTemporal && yIsTemporal) {\n                    return mark !== 'tick' ? 'horizontal' : 'vertical';\n                }\n                if (!xDef.aggregate && yDef.aggregate) {\n                    return mark !== 'tick' ? 'vertical' : 'horizontal';\n                }\n                else if (xDef.aggregate && !yDef.aggregate) {\n                    return mark !== 'tick' ? 'horizontal' : 'vertical';\n                }\n                if (specifiedOrient) {\n                    // When ambiguous, use user specified one.\n                    return specifiedOrient;\n                }\n                if (!(mark === LINE && encoding.order)) {\n                    // Except for connected scatterplot, we should log warning for unclear orientation of QxQ plots.\n                    log.warn(log.message.unclearOrientContinuous(mark));\n                }\n                return 'vertical';\n            }\n            else {\n                // For Discrete x Discrete case, return undefined.\n                log.warn(log.message.unclearOrientDiscreteOrEmpty(mark));\n                return undefined;\n            }\n    }\n    return 'vertical';\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as mixins from './mixins';\nexport var area = {\n    vgMark: 'area',\n    encodeEntry: function (model) {\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'include' }), mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin', model.markDef.orient === 'horizontal' ? 'x2' : 'y2'), mixins.defined(model));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJlYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvYXJlYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFHbkMsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQzVCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFDLENBQUMsRUFDbEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsQ0FBQyxFQUM3QyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzdDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQzlGLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3hCO0lBQ0osQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5cblxuZXhwb3J0IGNvbnN0IGFyZWE6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAnYXJlYScsXG4gIGVuY29kZUVudHJ5OiAobW9kZWw6IFVuaXRNb2RlbCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2lnbm9yZScsIG9yaWVudDogJ2luY2x1ZGUnfSksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneCcsIG1vZGVsLCAnemVyb09yTWluJyksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneScsIG1vZGVsLCAnemVyb09yTWluJyksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbjIobW9kZWwsICd6ZXJvT3JNaW4nLCBtb2RlbC5tYXJrRGVmLm9yaWVudCA9PT0gJ2hvcml6b250YWwnID8gJ3gyJyA6ICd5MicpLFxuICAgICAgLi4ubWl4aW5zLmRlZmluZWQobW9kZWwpXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { isNumber } from 'vega-util';\nimport { X, Y } from '../../channel';\nimport { isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport { isVgRangeStep } from '../../vega.schema';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var bar = {\n    vgMark: 'rect',\n    encodeEntry: function (model) {\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), x(model), y(model));\n    }\n};\nfunction x(model) {\n    var config = model.config, encoding = model.encoding, markDef = model.markDef, width = model.width;\n    var orient = markDef.orient;\n    var sizeDef = encoding.size;\n    var xDef = encoding.x;\n    var x2Def = encoding.x2;\n    var xScaleName = model.scaleName(X);\n    var xScale = model.getScaleComponent(X);\n    // x, x2, and width -- we must specify two of these in all conditions\n    if (orient === 'horizontal' || x2Def) {\n        return tslib_1.__assign({}, mixins.pointPosition('x', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin', 'x2'));\n    }\n    else { // vertical\n        if (isFieldDef(xDef)) {\n            var xScaleType = xScale.get('type');\n            if (xDef.bin && !sizeDef && !hasDiscreteDomain(xScaleType)) {\n                return mixins.binnedPosition(xDef, 'x', model.scaleName('x'), markDef.binSpacing === undefined ? config.bar.binSpacing : markDef.binSpacing, xScale.get('reverse'));\n            }\n            else {\n                if (xScaleType === ScaleType.BAND) {\n                    return mixins.bandPosition(xDef, 'x', model);\n                }\n            }\n        }\n        // sized bin, normal point-ordinal axis, quantitative x-axis, or no x\n        return mixins.centeredBandPosition('x', model, tslib_1.__assign({}, ref.mid(width)), defaultSizeRef(markDef, xScaleName, xScale, config));\n    }\n}\nfunction y(model) {\n    var config = model.config, encoding = model.encoding, height = model.height, markDef = model.markDef;\n    var orient = markDef.orient;\n    var sizeDef = encoding.size;\n    var yDef = encoding.y;\n    var y2Def = encoding.y2;\n    var yScaleName = model.scaleName(Y);\n    var yScale = model.getScaleComponent(Y);\n    // y, y2 & height -- we must specify two of these in all conditions\n    if (orient === 'vertical' || y2Def) {\n        return tslib_1.__assign({}, mixins.pointPosition('y', model, 'zeroOrMin'), mixins.pointPosition2(model, 'zeroOrMin', 'y2'));\n    }\n    else {\n        if (isFieldDef(yDef)) {\n            var yScaleType = yScale.get('type');\n            if (yDef.bin && !sizeDef && !hasDiscreteDomain(yScaleType)) {\n                return mixins.binnedPosition(yDef, 'y', model.scaleName('y'), markDef.binSpacing === undefined ? config.bar.binSpacing : markDef.binSpacing, yScale.get('reverse'));\n            }\n            else if (yScaleType === ScaleType.BAND) {\n                return mixins.bandPosition(yDef, 'y', model);\n            }\n        }\n        return mixins.centeredBandPosition('y', model, ref.mid(height), defaultSizeRef(markDef, yScaleName, yScale, config));\n    }\n}\nfunction defaultSizeRef(markDef, scaleName, scale, config) {\n    if (markDef.size !== undefined) {\n        return { value: markDef.size };\n    }\n    else if (config.bar.discreteBandSize) {\n        return { value: config.bar.discreteBandSize };\n    }\n    else if (scale) {\n        var scaleType = scale.get('type');\n        if (scaleType === ScaleType.POINT) {\n            var scaleRange = scale.get('range');\n            if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n                return { value: scaleRange.step - 1 };\n            }\n            log.warn(log.message.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL);\n        }\n        else if (scaleType === ScaleType.BAND) {\n            return ref.bandRef(scaleName);\n        }\n        else { // non-ordinal scale\n            return { value: config.bar.continuousBandSize };\n        }\n    }\n    else if (config.scale.rangeStep && config.scale.rangeStep !== null) {\n        return { value: config.scale.rangeStep - 1 };\n    }\n    return { value: 20 };\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as mixins from './mixins';\nimport { isFieldDef, vgField } from '../../fielddef';\nimport { GEOJSON } from '../../type';\nexport var geoshape = {\n    vgMark: 'shape',\n    encodeEntry: function (model) {\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }));\n    },\n    postEncodingTransform: function (model) {\n        var encoding = model.encoding;\n        var shapeDef = encoding.shape;\n        var transform = tslib_1.__assign({ type: 'geoshape', projection: model.projectionName() }, (shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON ? { field: vgField(shapeDef, { expr: 'datum' }) } : {}));\n        return [transform];\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2Vvc2hhcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9tYXJrL2dlb3NoYXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUVuQyxPQUFPLEVBQUMsVUFBVSxFQUFFLE9BQU8sRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25ELE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFJbkMsTUFBTSxDQUFDLElBQU0sUUFBUSxHQUFpQjtJQUNwQyxNQUFNLEVBQUUsT0FBTztJQUNmLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQzVCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDcEU7SUFDSixDQUFDO0lBQ0QscUJBQXFCLEVBQUUsVUFBQyxLQUFnQjtRQUMvQixJQUFBLHlCQUFRLENBQVU7UUFDekIsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUVoQyxJQUFNLFNBQVMsc0JBQ2IsSUFBSSxFQUFFLFVBQVUsRUFDaEIsVUFBVSxFQUFFLEtBQUssQ0FBQyxjQUFjLEVBQUUsSUFFL0IsQ0FBQyxRQUFRLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQ3RILENBQUM7UUFDRixPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDckIsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuXG5pbXBvcnQge2lzRmllbGREZWYsIHZnRmllbGR9IGZyb20gJy4uLy4uL2ZpZWxkZGVmJztcbmltcG9ydCB7R0VPSlNPTn0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQge1ZnR2VvU2hhcGVUcmFuc2Zvcm0sIFZnUG9zdEVuY29kaW5nVHJhbnNmb3JtfSBmcm9tICcuLi8uLi92ZWdhLnNjaGVtYSc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNvbnN0IGdlb3NoYXBlOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ3NoYXBlJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5iYXNlRW5jb2RlRW50cnkobW9kZWwsIHtzaXplOiAnaWdub3JlJywgb3JpZW50OiAnaWdub3JlJ30pXG4gICAgfTtcbiAgfSxcbiAgcG9zdEVuY29kaW5nVHJhbnNmb3JtOiAobW9kZWw6IFVuaXRNb2RlbCk6IFZnUG9zdEVuY29kaW5nVHJhbnNmb3JtW10gPT4ge1xuICAgIGNvbnN0IHtlbmNvZGluZ30gPSBtb2RlbDtcbiAgICBjb25zdCBzaGFwZURlZiA9IGVuY29kaW5nLnNoYXBlO1xuXG4gICAgY29uc3QgdHJhbnNmb3JtOiBWZ0dlb1NoYXBlVHJhbnNmb3JtID0ge1xuICAgICAgdHlwZTogJ2dlb3NoYXBlJyxcbiAgICAgIHByb2plY3Rpb246IG1vZGVsLnByb2plY3Rpb25OYW1lKCksXG4gICAgICAvLyBhczogJ3NoYXBlJyxcbiAgICAgIC4uLihzaGFwZURlZiAmJiBpc0ZpZWxkRGVmKHNoYXBlRGVmKSAmJiBzaGFwZURlZi50eXBlID09PSBHRU9KU09OID8ge2ZpZWxkOiB2Z0ZpZWxkKHNoYXBlRGVmLCB7ZXhwcjogJ2RhdHVtJ30pfSA6IHt9KVxuICAgIH07XG4gICAgcmV0dXJuIFt0cmFuc2Zvcm1dO1xuICB9XG59O1xuIl19","import * as tslib_1 from \"tslib\";\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var line = {\n    vgMark: 'line',\n    encodeEntry: function (model) {\n        var width = model.width, height = model.height;\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth' // VL's line size is strokeWidth\n        }), mixins.defined(model));\n    }\n};\nexport var trail = {\n    vgMark: 'trail',\n    encodeEntry: function (model) {\n        var width = model.width, height = model.height;\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), mixins.defined(model));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUM7QUFFbEMsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQ3JCLElBQUEsbUJBQUssRUFBRSxxQkFBTSxDQUFVO1FBRTlCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDakUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDaEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO1lBQ25DLFNBQVMsRUFBRSxhQUFhLENBQUUsZ0NBQWdDO1NBQzNELENBQUMsRUFDQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN4QjtJQUNKLENBQUM7Q0FDRixDQUFDO0FBR0YsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFpQjtJQUNqQyxNQUFNLEVBQUUsT0FBTztJQUNmLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQ3JCLElBQUEsbUJBQUssRUFBRSxxQkFBTSxDQUFVO1FBRTlCLDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDbEUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDaEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDakQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3hCO0lBQ0osQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cbmV4cG9ydCBjb25zdCBsaW5lOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ2xpbmUnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBtb2RlbDtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2lnbm9yZScsIG9yaWVudDogJ2lnbm9yZSd9KSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsIHJlZi5taWQod2lkdGgpKSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd5JywgbW9kZWwsIHJlZi5taWQoaGVpZ2h0KSksXG4gICAgICAuLi5taXhpbnMubm9uUG9zaXRpb24oJ3NpemUnLCBtb2RlbCwge1xuICAgICAgICB2Z0NoYW5uZWw6ICdzdHJva2VXaWR0aCcgIC8vIFZMJ3MgbGluZSBzaXplIGlzIHN0cm9rZVdpZHRoXG4gICAgICB9KSxcbiAgICAgIC4uLm1peGlucy5kZWZpbmVkKG1vZGVsKVxuICAgIH07XG4gIH1cbn07XG5cblxuZXhwb3J0IGNvbnN0IHRyYWlsOiBNYXJrQ29tcGlsZXIgPSB7XG4gIHZnTWFyazogJ3RyYWlsJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gbW9kZWw7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwge3NpemU6ICdpbmNsdWRlJywgb3JpZW50OiAnaWdub3JlJ30pLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgcmVmLm1pZCh3aWR0aCkpLFxuICAgICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3knLCBtb2RlbCwgcmVmLm1pZChoZWlnaHQpKSxcbiAgICAgIC4uLm1peGlucy5ub25Qb3NpdGlvbignc2l6ZScsIG1vZGVsKSxcbiAgICAgIC4uLm1peGlucy5kZWZpbmVkKG1vZGVsKVxuICAgIH07XG4gIH1cbn07XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nfunction encodeEntry(model, fixedShape) {\n    var config = model.config, width = model.width, height = model.height;\n    return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'include', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.nonPosition('size', model), shapeMixins(model, config, fixedShape));\n}\nexport function shapeMixins(model, config, fixedShape) {\n    if (fixedShape) {\n        return { shape: { value: fixedShape } };\n    }\n    return mixins.nonPosition('shape', model, { defaultValue: getMarkConfig('shape', model.markDef, config) });\n}\nexport var point = {\n    vgMark: 'symbol',\n    encodeEntry: function (model) {\n        return encodeEntry(model);\n    }\n};\nexport var circle = {\n    vgMark: 'symbol',\n    encodeEntry: function (model) {\n        return encodeEntry(model, 'circle');\n    }\n};\nexport var square = {\n    vgMark: 'symbol',\n    encodeEntry: function (model) {\n        return encodeEntry(model, 'square');\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9tYXJrL3BvaW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBR3hDLE9BQU8sS0FBSyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sS0FBSyxHQUFHLE1BQU0sWUFBWSxDQUFDO0FBR2xDLHFCQUFxQixLQUFnQixFQUFFLFVBQWdDO0lBQzlELElBQUEscUJBQU0sRUFBRSxtQkFBSyxFQUFFLHFCQUFNLENBQVU7SUFFdEMsNEJBQ0ssTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsQ0FBQyxFQUNsRSxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNoRCxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUNqRCxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFDakMsV0FBVyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsVUFBVSxDQUFDLEVBQ3pDO0FBQ0osQ0FBQztBQUVELE1BQU0sc0JBQXNCLEtBQWdCLEVBQUUsTUFBYyxFQUFFLFVBQWdDO0lBQzVGLElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxFQUFDLEtBQUssRUFBRSxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUMsRUFBQyxDQUFDO0tBQ3JDO0lBQ0QsT0FBTyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsRUFBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBVyxFQUFDLENBQUMsQ0FBQztBQUNySCxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQU0sS0FBSyxHQUFpQjtJQUNqQyxNQUFNLEVBQUUsUUFBUTtJQUNoQixXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUM1QixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLE1BQU0sR0FBaUI7SUFDbEMsTUFBTSxFQUFFLFFBQVE7SUFDaEIsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDNUIsT0FBTyxXQUFXLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sTUFBTSxHQUFpQjtJQUNsQyxNQUFNLEVBQUUsUUFBUTtJQUNoQixXQUFXLEVBQUUsVUFBQyxLQUFnQjtRQUM1QixPQUFPLFdBQVcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7VmdFbmNvZGVFbnRyeX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtnZXRNYXJrQ29uZmlnfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuaW1wb3J0ICogYXMgcmVmIGZyb20gJy4vdmFsdWVyZWYnO1xuXG5cbmZ1bmN0aW9uIGVuY29kZUVudHJ5KG1vZGVsOiBVbml0TW9kZWwsIGZpeGVkU2hhcGU/OiAnY2lyY2xlJyB8ICdzcXVhcmUnKSB7XG4gIGNvbnN0IHtjb25maWcsIHdpZHRoLCBoZWlnaHR9ID0gbW9kZWw7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2luY2x1ZGUnLCBvcmllbnQ6ICdpZ25vcmUnfSksXG4gICAgLi4ubWl4aW5zLnBvaW50UG9zaXRpb24oJ3gnLCBtb2RlbCwgcmVmLm1pZCh3aWR0aCkpLFxuICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd5JywgbW9kZWwsIHJlZi5taWQoaGVpZ2h0KSksXG4gICAgLi4ubWl4aW5zLm5vblBvc2l0aW9uKCdzaXplJywgbW9kZWwpLFxuICAgIC4uLnNoYXBlTWl4aW5zKG1vZGVsLCBjb25maWcsIGZpeGVkU2hhcGUpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhcGVNaXhpbnMobW9kZWw6IFVuaXRNb2RlbCwgY29uZmlnOiBDb25maWcsIGZpeGVkU2hhcGU/OiAnY2lyY2xlJyB8ICdzcXVhcmUnKTogVmdFbmNvZGVFbnRyeSB7XG4gIGlmIChmaXhlZFNoYXBlKSB7XG4gICAgcmV0dXJuIHtzaGFwZToge3ZhbHVlOiBmaXhlZFNoYXBlfX07XG4gIH1cbiAgcmV0dXJuIG1peGlucy5ub25Qb3NpdGlvbignc2hhcGUnLCBtb2RlbCwge2RlZmF1bHRWYWx1ZTogZ2V0TWFya0NvbmZpZygnc2hhcGUnLCBtb2RlbC5tYXJrRGVmLCBjb25maWcpIGFzIHN0cmluZ30pO1xufVxuXG5leHBvcnQgY29uc3QgcG9pbnQ6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAnc3ltYm9sJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIGVuY29kZUVudHJ5KG1vZGVsKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IGNpcmNsZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdzeW1ib2wnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICByZXR1cm4gZW5jb2RlRW50cnkobW9kZWwsICdjaXJjbGUnKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHNxdWFyZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdzeW1ib2wnLFxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICByZXR1cm4gZW5jb2RlRW50cnkobW9kZWwsICdzcXVhcmUnKTtcbiAgfVxufTtcbiJdfQ==","import * as tslib_1 from \"tslib\";\nimport { X, Y } from '../../channel';\nimport { isFieldDef } from '../../fielddef';\nimport * as log from '../../log';\nimport { RECT } from '../../mark';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport * as mixins from './mixins';\nexport var rect = {\n    vgMark: 'rect',\n    encodeEntry: function (model) {\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), x(model), y(model));\n    }\n};\nexport function x(model) {\n    var xDef = model.encoding.x;\n    var x2Def = model.encoding.x2;\n    var xScale = model.getScaleComponent(X);\n    var xScaleType = xScale ? xScale.get('type') : undefined;\n    if (isFieldDef(xDef) && xDef.bin && !x2Def) {\n        return mixins.binnedPosition(xDef, 'x', model.scaleName('x'), 0, xScale.get('reverse'));\n    }\n    else if (isFieldDef(xDef) && xScale && hasDiscreteDomain(xScaleType)) {\n        /* istanbul ignore else */\n        if (xScaleType === ScaleType.BAND) {\n            return mixins.bandPosition(xDef, 'x', model);\n        }\n        else {\n            // We don't support rect mark with point/ordinal scale\n            throw new Error(log.message.scaleTypeNotWorkWithMark(RECT, xScaleType));\n        }\n    }\n    else { // continuous scale or no scale\n        return tslib_1.__assign({}, mixins.pointPosition('x', model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', 'x2'));\n    }\n}\nexport function y(model) {\n    var yDef = model.encoding.y;\n    var y2Def = model.encoding.y2;\n    var yScale = model.getScaleComponent(Y);\n    var yScaleType = yScale ? yScale.get('type') : undefined;\n    if (isFieldDef(yDef) && yDef.bin && !y2Def) {\n        return mixins.binnedPosition(yDef, 'y', model.scaleName('y'), 0, yScale.get('reverse'));\n    }\n    else if (isFieldDef(yDef) && yScale && hasDiscreteDomain(yScaleType)) {\n        /* istanbul ignore else */\n        if (yScaleType === ScaleType.BAND) {\n            return mixins.bandPosition(yDef, 'y', model);\n        }\n        else {\n            // We don't support rect mark with point/ordinal scale\n            throw new Error(log.message.scaleTypeNotWorkWithMark(RECT, yScaleType));\n        }\n    }\n    else { // continuous scale or no scale\n        return tslib_1.__assign({}, mixins.pointPosition('y', model, 'zeroOrMax'), mixins.pointPosition2(model, 'zeroOrMin', 'y2'));\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvcmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLENBQUMsRUFBRSxDQUFDLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sS0FBSyxHQUFHLE1BQU0sV0FBVyxDQUFDO0FBQ2pDLE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDaEMsT0FBTyxFQUFDLGlCQUFpQixFQUFFLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUl6RCxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUVuQyxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQWlCO0lBQ2hDLE1BQU0sRUFBRSxNQUFNO0lBQ2QsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDNUIsNEJBQ0ssTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsQ0FBQyxFQUNqRSxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ1IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUNYO0lBQ0osQ0FBQztDQUNGLENBQUM7QUFFRixNQUFNLFlBQVksS0FBZ0I7SUFDaEMsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUIsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDaEMsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRTNELElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDMUMsT0FBTyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0tBQ3pGO1NBQU0sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxJQUFJLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3RFLDBCQUEwQjtRQUMxQixJQUFJLFVBQVUsS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO1lBQ2pDLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzlDO2FBQU07WUFDTCxzREFBc0Q7WUFDdEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ3pFO0tBQ0Y7U0FBTSxFQUFFLCtCQUErQjtRQUN0Qyw0QkFDSyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzdDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFDbEQ7S0FDSDtBQUNILENBQUM7QUFFRCxNQUFNLFlBQVksS0FBZ0I7SUFDaEMsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUIsSUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDaEMsSUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFDLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRTNELElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDMUMsT0FBTyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0tBQ3pGO1NBQU0sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxJQUFJLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQ3RFLDBCQUEwQjtRQUMxQixJQUFJLFVBQVUsS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFFO1lBQ2pDLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzlDO2FBQU07WUFDTCxzREFBc0Q7WUFDdEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ3pFO0tBQ0Y7U0FBTSxFQUFFLCtCQUErQjtRQUN0Qyw0QkFDSyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQzdDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFDbEQ7S0FDSDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1gsIFl9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtpc0ZpZWxkRGVmfSBmcm9tICcuLi8uLi9maWVsZGRlZic7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vbG9nJztcbmltcG9ydCB7UkVDVH0gZnJvbSAnLi4vLi4vbWFyayc7XG5pbXBvcnQge2hhc0Rpc2NyZXRlRG9tYWluLCBTY2FsZVR5cGV9IGZyb20gJy4uLy4uL3NjYWxlJztcbmltcG9ydCB7VmdFbmNvZGVFbnRyeX0gZnJvbSAnLi4vLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuXG5leHBvcnQgY29uc3QgcmVjdDogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdyZWN0JyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5iYXNlRW5jb2RlRW50cnkobW9kZWwsIHtzaXplOiAnaWdub3JlJywgb3JpZW50OiAnaWdub3JlJ30pLFxuICAgICAgLi4ueChtb2RlbCksXG4gICAgICAuLi55KG1vZGVsKSxcbiAgICB9O1xuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24geChtb2RlbDogVW5pdE1vZGVsKTogVmdFbmNvZGVFbnRyeSB7XG4gIGNvbnN0IHhEZWYgPSBtb2RlbC5lbmNvZGluZy54O1xuICBjb25zdCB4MkRlZiA9IG1vZGVsLmVuY29kaW5nLngyO1xuICBjb25zdCB4U2NhbGUgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudChYKTtcbiAgY29uc3QgeFNjYWxlVHlwZSA9IHhTY2FsZSA/IHhTY2FsZS5nZXQoJ3R5cGUnKSA6IHVuZGVmaW5lZDtcblxuICBpZiAoaXNGaWVsZERlZih4RGVmKSAmJiB4RGVmLmJpbiAmJiAheDJEZWYpIHtcbiAgICByZXR1cm4gbWl4aW5zLmJpbm5lZFBvc2l0aW9uKHhEZWYsICd4JywgbW9kZWwuc2NhbGVOYW1lKCd4JyksIDAsIHhTY2FsZS5nZXQoJ3JldmVyc2UnKSk7XG4gIH0gZWxzZSBpZiAoaXNGaWVsZERlZih4RGVmKSAmJiB4U2NhbGUgJiYgaGFzRGlzY3JldGVEb21haW4oeFNjYWxlVHlwZSkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh4U2NhbGVUeXBlID09PSBTY2FsZVR5cGUuQkFORCkge1xuICAgICAgcmV0dXJuIG1peGlucy5iYW5kUG9zaXRpb24oeERlZiwgJ3gnLCBtb2RlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgcmVjdCBtYXJrIHdpdGggcG9pbnQvb3JkaW5hbCBzY2FsZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGxvZy5tZXNzYWdlLnNjYWxlVHlwZU5vdFdvcmtXaXRoTWFyayhSRUNULCB4U2NhbGVUeXBlKSk7XG4gICAgfVxuICB9IGVsc2UgeyAvLyBjb250aW51b3VzIHNjYWxlIG9yIG5vIHNjYWxlXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsICd6ZXJvT3JNYXgnKSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uMihtb2RlbCwgJ3plcm9Pck1pbicsICd4MicpXG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24geShtb2RlbDogVW5pdE1vZGVsKTogVmdFbmNvZGVFbnRyeSB7XG4gIGNvbnN0IHlEZWYgPSBtb2RlbC5lbmNvZGluZy55O1xuICBjb25zdCB5MkRlZiA9IG1vZGVsLmVuY29kaW5nLnkyO1xuICBjb25zdCB5U2NhbGUgPSBtb2RlbC5nZXRTY2FsZUNvbXBvbmVudChZKTtcbiAgY29uc3QgeVNjYWxlVHlwZSA9IHlTY2FsZSA/IHlTY2FsZS5nZXQoJ3R5cGUnKSA6IHVuZGVmaW5lZDtcblxuICBpZiAoaXNGaWVsZERlZih5RGVmKSAmJiB5RGVmLmJpbiAmJiAheTJEZWYpIHtcbiAgICByZXR1cm4gbWl4aW5zLmJpbm5lZFBvc2l0aW9uKHlEZWYsICd5JywgbW9kZWwuc2NhbGVOYW1lKCd5JyksIDAsIHlTY2FsZS5nZXQoJ3JldmVyc2UnKSk7XG4gIH0gZWxzZSBpZiAoaXNGaWVsZERlZih5RGVmKSAmJiB5U2NhbGUgJiYgaGFzRGlzY3JldGVEb21haW4oeVNjYWxlVHlwZSkpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh5U2NhbGVUeXBlID09PSBTY2FsZVR5cGUuQkFORCkge1xuICAgICAgcmV0dXJuIG1peGlucy5iYW5kUG9zaXRpb24oeURlZiwgJ3knLCBtb2RlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIGRvbid0IHN1cHBvcnQgcmVjdCBtYXJrIHdpdGggcG9pbnQvb3JkaW5hbCBzY2FsZVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGxvZy5tZXNzYWdlLnNjYWxlVHlwZU5vdFdvcmtXaXRoTWFyayhSRUNULCB5U2NhbGVUeXBlKSk7XG4gICAgfVxuICB9IGVsc2UgeyAvLyBjb250aW51b3VzIHNjYWxlIG9yIG5vIHNjYWxlXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd5JywgbW9kZWwsICd6ZXJvT3JNYXgnKSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uMihtb2RlbCwgJ3plcm9Pck1pbicsICd5MicpXG4gICAgfTtcbiAgfVxufVxuIl19","import * as tslib_1 from \"tslib\";\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var rule = {\n    vgMark: 'rule',\n    encodeEntry: function (model) {\n        var _config = model.config, markDef = model.markDef, width = model.width, height = model.height;\n        var orient = markDef.orient;\n        if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n            // Show nothing if we have none of x, y, lat, and long.\n            return {};\n        }\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, orient === 'horizontal' ? 'zeroOrMin' : ref.mid(width)), mixins.pointPosition('y', model, orient === 'vertical' ? 'zeroOrMin' : ref.mid(height)), (orient !== 'vertical' ? mixins.pointPosition2(model, 'zeroOrMax', 'x2') : {}), (orient !== 'horizontal' ? mixins.pointPosition2(model, 'zeroOrMax', 'y2') : {}), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth',\n            defaultValue: markDef.size\n        }));\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvcnVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxLQUFLLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxZQUFZLENBQUM7QUFFbEMsTUFBTSxDQUFDLElBQU0sSUFBSSxHQUFpQjtJQUNoQyxNQUFNLEVBQUUsTUFBTTtJQUNkLFdBQVcsRUFBRSxVQUFDLEtBQWdCO1FBQ3JCLElBQUEsc0JBQWUsRUFBRSx1QkFBTyxFQUFFLG1CQUFLLEVBQUUscUJBQU0sQ0FBVTtRQUN4RCxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBRTlCLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUNuRyx1REFBdUQ7WUFDdkQsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELDRCQUNLLE1BQU0sQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEVBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFDLENBQUMsRUFDakUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sS0FBSyxZQUFZLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUN4RixNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBR3ZGLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFHOUUsQ0FBQyxNQUFNLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUVoRixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7WUFDbkMsU0FBUyxFQUFFLGFBQWE7WUFDeEIsWUFBWSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1NBQzNCLENBQUMsRUFDRjtJQUNKLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtNYXJrQ29tcGlsZXJ9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBtaXhpbnMgZnJvbSAnLi9taXhpbnMnO1xuaW1wb3J0ICogYXMgcmVmIGZyb20gJy4vdmFsdWVyZWYnO1xuXG5leHBvcnQgY29uc3QgcnVsZTogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdydWxlJyxcbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qge2NvbmZpZzogX2NvbmZpZywgbWFya0RlZiwgd2lkdGgsIGhlaWdodH0gPSBtb2RlbDtcbiAgICBjb25zdCBvcmllbnQgPSBtYXJrRGVmLm9yaWVudDtcblxuICAgIGlmICghbW9kZWwuZW5jb2RpbmcueCAmJiAhbW9kZWwuZW5jb2RpbmcueSAmJiAhbW9kZWwuZW5jb2RpbmcubGF0aXR1ZGUgJiYgIW1vZGVsLmVuY29kaW5nLmxvbmdpdHVkZSkge1xuICAgICAgLy8gU2hvdyBub3RoaW5nIGlmIHdlIGhhdmUgbm9uZSBvZiB4LCB5LCBsYXQsIGFuZCBsb25nLlxuICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi5taXhpbnMuYmFzZUVuY29kZUVudHJ5KG1vZGVsLCB7c2l6ZTogJ2lnbm9yZScsIG9yaWVudDogJ2lnbm9yZSd9KSxcbiAgICAgIC4uLm1peGlucy5wb2ludFBvc2l0aW9uKCd4JywgbW9kZWwsIG9yaWVudCA9PT0gJ2hvcml6b250YWwnID8gJ3plcm9Pck1pbicgOiByZWYubWlkKHdpZHRoKSksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneScsIG1vZGVsLCBvcmllbnQgPT09ICd2ZXJ0aWNhbCcgPyAnemVyb09yTWluJyA6IHJlZi5taWQoaGVpZ2h0KSksXG5cbiAgICAgIC8vIGluY2x1ZGUgeDIgZm9yIGhvcml6b250YWwgb3IgbGluZSBzZWdtZW50IHJ1bGVcbiAgICAgIC4uLihvcmllbnQgIT09ICd2ZXJ0aWNhbCcgPyBtaXhpbnMucG9pbnRQb3NpdGlvbjIobW9kZWwsICd6ZXJvT3JNYXgnLCAneDInKSA6IHt9KSxcblxuICAgICAgLy8gaW5jbHVkZSB5MiBmb3IgdmVydGljYWwgb3IgbGluZSBzZWdtZW50IHJ1bGVcbiAgICAgIC4uLihvcmllbnQgIT09ICdob3Jpem9udGFsJyA/IG1peGlucy5wb2ludFBvc2l0aW9uMihtb2RlbCwgJ3plcm9Pck1heCcsICd5MicpIDoge30pLFxuXG4gICAgICAuLi5taXhpbnMubm9uUG9zaXRpb24oJ3NpemUnLCBtb2RlbCwge1xuICAgICAgICB2Z0NoYW5uZWw6ICdzdHJva2VXaWR0aCcsICAvLyBWTCdzIHJ1bGUgc2l6ZSBpcyBzdHJva2VXaWR0aFxuICAgICAgICBkZWZhdWx0VmFsdWU6IG1hcmtEZWYuc2l6ZVxuICAgICAgfSlcbiAgICB9O1xuICB9XG59O1xuIl19","import * as tslib_1 from \"tslib\";\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var text = {\n    vgMark: 'text',\n    encodeEntry: function (model) {\n        var config = model.config, encoding = model.encoding, width = model.width, height = model.height, markDef = model.markDef;\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width)), mixins.pointPosition('y', model, ref.mid(height)), mixins.text(model), mixins.nonPosition('size', model, tslib_1.__assign({}, (markDef.size ? { defaultValue: markDef.size } : {}), { vgChannel: 'fontSize' // VL's text size is fontSize\n         })), mixins.valueIfDefined('align', align(model.markDef, encoding, config)));\n    }\n};\nfunction align(markDef, encoding, config) {\n    var a = markDef.align || getMarkConfig('align', markDef, config);\n    if (a === undefined) {\n        return 'center';\n    }\n    // If there is a config, Vega-parser will process this already.\n    return undefined;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvdGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUd4QyxPQUFPLEtBQUssTUFBTSxNQUFNLFVBQVUsQ0FBQztBQUNuQyxPQUFPLEtBQUssR0FBRyxNQUFNLFlBQVksQ0FBQztBQUdsQyxNQUFNLENBQUMsSUFBTSxJQUFJLEdBQWlCO0lBQ2hDLE1BQU0sRUFBRSxNQUFNO0lBRWQsV0FBVyxFQUFFLFVBQUMsS0FBZ0I7UUFDckIsSUFBQSxxQkFBTSxFQUFFLHlCQUFRLEVBQUUsbUJBQUssRUFBRSxxQkFBTSxFQUFFLHVCQUFPLENBQVU7UUFFekQsNEJBQ0ssTUFBTSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUMsQ0FBQyxFQUNqRSxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNoRCxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUNsQixNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLHVCQUM5QixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQ3JELFNBQVMsRUFBRSxVQUFVLENBQUUsNkJBQTZCO1lBQ3BELEVBQ0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQ3pFO0lBQ0osQ0FBQztDQUNGLENBQUM7QUFDRixlQUFlLE9BQWdCLEVBQUUsUUFBMEIsRUFBRSxNQUFjO0lBQ3pFLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLElBQUksYUFBYSxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkUsSUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO1FBQ25CLE9BQU8sUUFBUSxDQUFDO0tBQ2pCO0lBQ0QsK0RBQStEO0lBQy9ELE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbmZpZ30gZnJvbSAnLi4vLi4vY29uZmlnJztcbmltcG9ydCB7RW5jb2Rpbmd9IGZyb20gJy4uLy4uL2VuY29kaW5nJztcbmltcG9ydCB7TWFya0RlZn0gZnJvbSAnLi4vLi4vbWFyayc7XG5pbXBvcnQge2dldE1hcmtDb25maWd9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQge1VuaXRNb2RlbH0gZnJvbSAnLi4vdW5pdCc7XG5pbXBvcnQge01hcmtDb21waWxlcn0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCAqIGFzIG1peGlucyBmcm9tICcuL21peGlucyc7XG5pbXBvcnQgKiBhcyByZWYgZnJvbSAnLi92YWx1ZXJlZic7XG5cblxuZXhwb3J0IGNvbnN0IHRleHQ6IE1hcmtDb21waWxlciA9IHtcbiAgdmdNYXJrOiAndGV4dCcsXG5cbiAgZW5jb2RlRW50cnk6IChtb2RlbDogVW5pdE1vZGVsKSA9PiB7XG4gICAgY29uc3Qge2NvbmZpZywgZW5jb2RpbmcsIHdpZHRoLCBoZWlnaHQsIG1hcmtEZWZ9ID0gbW9kZWw7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ubWl4aW5zLmJhc2VFbmNvZGVFbnRyeShtb2RlbCwge3NpemU6ICdpZ25vcmUnLCBvcmllbnQ6ICdpZ25vcmUnfSksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneCcsIG1vZGVsLCByZWYubWlkKHdpZHRoKSksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneScsIG1vZGVsLCByZWYubWlkKGhlaWdodCkpLFxuICAgICAgLi4ubWl4aW5zLnRleHQobW9kZWwpLFxuICAgICAgLi4ubWl4aW5zLm5vblBvc2l0aW9uKCdzaXplJywgbW9kZWwsIHtcbiAgICAgICAgLi4uKG1hcmtEZWYuc2l6ZSA/IHtkZWZhdWx0VmFsdWU6IG1hcmtEZWYuc2l6ZX0gOiB7fSksXG4gICAgICAgIHZnQ2hhbm5lbDogJ2ZvbnRTaXplJyAgLy8gVkwncyB0ZXh0IHNpemUgaXMgZm9udFNpemVcbiAgICAgIH0pLFxuICAgICAgLi4ubWl4aW5zLnZhbHVlSWZEZWZpbmVkKCdhbGlnbicsIGFsaWduKG1vZGVsLm1hcmtEZWYsIGVuY29kaW5nLCBjb25maWcpKVxuICAgIH07XG4gIH1cbn07XG5mdW5jdGlvbiBhbGlnbihtYXJrRGVmOiBNYXJrRGVmLCBlbmNvZGluZzogRW5jb2Rpbmc8c3RyaW5nPiwgY29uZmlnOiBDb25maWcpIHtcbiAgY29uc3QgYSA9IG1hcmtEZWYuYWxpZ24gfHwgZ2V0TWFya0NvbmZpZygnYWxpZ24nLCBtYXJrRGVmLCBjb25maWcpO1xuICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuICdjZW50ZXInO1xuICB9XG4gIC8vIElmIHRoZXJlIGlzIGEgY29uZmlnLCBWZWdhLXBhcnNlciB3aWxsIHByb2Nlc3MgdGhpcyBhbHJlYWR5LlxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { isVgRangeStep } from '../../vega.schema';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport var tick = {\n    vgMark: 'rect',\n    encodeEntry: function (model) {\n        var _a;\n        var config = model.config, markDef = model.markDef, width = model.width, height = model.height;\n        var orient = markDef.orient;\n        var vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n        var vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\n        return tslib_1.__assign({}, mixins.baseEncodeEntry(model, { size: 'ignore', orient: 'ignore' }), mixins.pointPosition('x', model, ref.mid(width), 'xc'), mixins.pointPosition('y', model, ref.mid(height), 'yc'), mixins.nonPosition('size', model, {\n            defaultValue: defaultSize(model),\n            vgChannel: vgSizeChannel\n        }), (_a = {}, _a[vgThicknessChannel] = { value: markDef.thickness || config.tick.thickness }, _a));\n    }\n};\nfunction defaultSize(model) {\n    var config = model.config, markDef = model.markDef;\n    var orient = markDef.orient;\n    var scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\n    if (markDef.size !== undefined) {\n        return markDef.size;\n    }\n    else if (config.tick.bandSize !== undefined) {\n        return config.tick.bandSize;\n    }\n    else {\n        var scaleRange = scale ? scale.get('range') : undefined;\n        var rangeStep = scaleRange && isVgRangeStep(scaleRange) ?\n            scaleRange.step :\n            config.scale.rangeStep;\n        if (typeof rangeStep !== 'number') {\n            // FIXME consolidate this log\n            throw new Error('Function does not handle non-numeric rangeStep');\n        }\n        return rangeStep / 1.5;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGljay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21waWxlL21hcmsvdGljay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBR2hELE9BQU8sS0FBSyxNQUFNLE1BQU0sVUFBVSxDQUFDO0FBQ25DLE9BQU8sS0FBSyxHQUFHLE1BQU0sWUFBWSxDQUFDO0FBR2xDLE1BQU0sQ0FBQyxJQUFNLElBQUksR0FBaUI7SUFDaEMsTUFBTSxFQUFFLE1BQU07SUFFZCxXQUFXLEVBQUUsVUFBQyxLQUFnQjs7UUFDckIsSUFBQSxxQkFBTSxFQUFFLHVCQUFPLEVBQUUsbUJBQUssRUFBRSxxQkFBTSxDQUFVO1FBQy9DLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFFOUIsSUFBTSxhQUFhLEdBQUcsTUFBTSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDbkUsSUFBTSxrQkFBa0IsR0FBRyxNQUFNLEtBQUssWUFBWSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUV4RSw0QkFDSyxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBQyxDQUFDLEVBRWpFLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUN0RCxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLENBQUMsRUFHdkQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFO1lBQ25DLFlBQVksRUFBRSxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQ2hDLFNBQVMsRUFBRSxhQUFhO1NBQ3pCLENBQUMsZUFDRCxrQkFBa0IsSUFBRyxFQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLE9BQ3pFO0lBQ0osQ0FBQztDQUNGLENBQUM7QUFFRixxQkFBcUIsS0FBZ0I7SUFDNUIsSUFBQSxxQkFBTSxFQUFFLHVCQUFPLENBQVU7SUFDaEMsSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztJQUM5QixJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsTUFBTSxLQUFLLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUzRSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO1FBQzlCLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQztLQUNyQjtTQUFNLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO1FBQzdDLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDN0I7U0FBTTtRQUNMLElBQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQzFELElBQU0sU0FBUyxHQUFHLFVBQVUsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUN6RCxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakIsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDekIsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDakMsNkJBQTZCO1lBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0RBQWdELENBQUMsQ0FBQztTQUNuRTtRQUNELE9BQU8sU0FBUyxHQUFHLEdBQUcsQ0FBQztLQUN4QjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lzVmdSYW5nZVN0ZXB9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7VW5pdE1vZGVsfSBmcm9tICcuLi91bml0JztcbmltcG9ydCB7TWFya0NvbXBpbGVyfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0ICogYXMgbWl4aW5zIGZyb20gJy4vbWl4aW5zJztcbmltcG9ydCAqIGFzIHJlZiBmcm9tICcuL3ZhbHVlcmVmJztcblxuXG5leHBvcnQgY29uc3QgdGljazogTWFya0NvbXBpbGVyID0ge1xuICB2Z01hcms6ICdyZWN0JyxcblxuICBlbmNvZGVFbnRyeTogKG1vZGVsOiBVbml0TW9kZWwpID0+IHtcbiAgICBjb25zdCB7Y29uZmlnLCBtYXJrRGVmLCB3aWR0aCwgaGVpZ2h0fSA9IG1vZGVsO1xuICAgIGNvbnN0IG9yaWVudCA9IG1hcmtEZWYub3JpZW50O1xuXG4gICAgY29uc3QgdmdTaXplQ2hhbm5lbCA9IG9yaWVudCA9PT0gJ2hvcml6b250YWwnID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIGNvbnN0IHZnVGhpY2tuZXNzQ2hhbm5lbCA9IG9yaWVudCA9PT0gJ2hvcml6b250YWwnID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1peGlucy5iYXNlRW5jb2RlRW50cnkobW9kZWwsIHtzaXplOiAnaWdub3JlJywgb3JpZW50OiAnaWdub3JlJ30pLFxuXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneCcsIG1vZGVsLCByZWYubWlkKHdpZHRoKSwgJ3hjJyksXG4gICAgICAuLi5taXhpbnMucG9pbnRQb3NpdGlvbigneScsIG1vZGVsLCByZWYubWlkKGhlaWdodCksICd5YycpLFxuXG4gICAgICAvLyBzaXplIC8gdGhpY2tuZXNzID0+IHdpZHRoIC8gaGVpZ2h0XG4gICAgICAuLi5taXhpbnMubm9uUG9zaXRpb24oJ3NpemUnLCBtb2RlbCwge1xuICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRTaXplKG1vZGVsKSxcbiAgICAgICAgdmdDaGFubmVsOiB2Z1NpemVDaGFubmVsXG4gICAgICB9KSxcbiAgICAgIFt2Z1RoaWNrbmVzc0NoYW5uZWxdOiB7dmFsdWU6IG1hcmtEZWYudGhpY2tuZXNzIHx8IGNvbmZpZy50aWNrLnRoaWNrbmVzc30sXG4gICAgfTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZGVmYXVsdFNpemUobW9kZWw6IFVuaXRNb2RlbCk6IG51bWJlciB7XG4gIGNvbnN0IHtjb25maWcsIG1hcmtEZWZ9ID0gbW9kZWw7XG4gIGNvbnN0IG9yaWVudCA9IG1hcmtEZWYub3JpZW50O1xuICBjb25zdCBzY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KG9yaWVudCA9PT0gJ2hvcml6b250YWwnID8gJ3gnIDogJ3knKTtcblxuICBpZiAobWFya0RlZi5zaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbWFya0RlZi5zaXplO1xuICB9IGVsc2UgaWYgKGNvbmZpZy50aWNrLmJhbmRTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gY29uZmlnLnRpY2suYmFuZFNpemU7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2NhbGVSYW5nZSA9IHNjYWxlID8gc2NhbGUuZ2V0KCdyYW5nZScpIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHJhbmdlU3RlcCA9IHNjYWxlUmFuZ2UgJiYgaXNWZ1JhbmdlU3RlcChzY2FsZVJhbmdlKSA/XG4gICAgICBzY2FsZVJhbmdlLnN0ZXAgOlxuICAgICAgY29uZmlnLnNjYWxlLnJhbmdlU3RlcDtcbiAgICBpZiAodHlwZW9mIHJhbmdlU3RlcCAhPT0gJ251bWJlcicpIHtcbiAgICAgIC8vIEZJWE1FIGNvbnNvbGlkYXRlIHRoaXMgbG9nXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIGRvZXMgbm90IGhhbmRsZSBub24tbnVtZXJpYyByYW5nZVN0ZXAnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJhbmdlU3RlcCAvIDEuNTtcbiAgfVxufVxuIl19","import * as tslib_1 from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { MAIN } from '../../data';\nimport { isAggregate } from '../../encoding';\nimport { getFieldDef, isFieldDef, isValueDef, vgField } from '../../fielddef';\nimport { AREA, isPathMark, LINE, TRAIL } from '../../mark';\nimport { isSortField } from '../../sort';\nimport { contains, keys } from '../../util';\nimport { getStyles, sortParams } from '../common';\nimport { area } from './area';\nimport { bar } from './bar';\nimport { geoshape } from './geoshape';\nimport { line, trail } from './line';\nimport { circle, point, square } from './point';\nimport { rect } from './rect';\nimport { rule } from './rule';\nimport { text } from './text';\nimport { tick } from './tick';\nvar markCompiler = {\n    area: area,\n    bar: bar,\n    circle: circle,\n    geoshape: geoshape,\n    line: line,\n    point: point,\n    rect: rect,\n    rule: rule,\n    square: square,\n    text: text,\n    tick: tick,\n    trail: trail\n};\nexport function parseMarkGroup(model) {\n    if (contains([LINE, AREA, TRAIL], model.mark)) {\n        return parsePathMark(model);\n    }\n    else {\n        return getMarkGroups(model);\n    }\n}\nvar FACETED_PATH_PREFIX = 'faceted_path_';\nfunction parsePathMark(model) {\n    var details = pathGroupingFields(model.mark, model.encoding);\n    var pathMarks = getMarkGroups(model, {\n        // If has subfacet for line/area group, need to use faceted data from below.\n        fromPrefix: (details.length > 0 ? FACETED_PATH_PREFIX : '')\n    });\n    if (details.length > 0) { // have level of details - need to facet line into subgroups\n        // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\n        return [{\n                name: model.getName('pathgroup'),\n                type: 'group',\n                from: {\n                    facet: {\n                        name: FACETED_PATH_PREFIX + model.requestDataName(MAIN),\n                        data: model.requestDataName(MAIN),\n                        groupby: details,\n                    }\n                },\n                encode: {\n                    update: {\n                        width: { field: { group: 'width' } },\n                        height: { field: { group: 'height' } }\n                    }\n                },\n                marks: pathMarks\n            }];\n    }\n    else {\n        return pathMarks;\n    }\n}\nexport function getSort(model) {\n    var encoding = model.encoding, stack = model.stack, mark = model.mark, markDef = model.markDef;\n    var order = encoding.order;\n    if (!isArray(order) && isValueDef(order)) {\n        return undefined;\n    }\n    else if ((isArray(order) || isFieldDef(order)) && !stack) {\n        // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\n        return sortParams(order, { expr: 'datum' });\n    }\n    else if (isPathMark(mark)) {\n        // For both line and area, we sort values based on dimension by default\n        var dimensionChannelDef = encoding[markDef.orient === 'horizontal' ? 'y' : 'x'];\n        if (isFieldDef(dimensionChannelDef)) {\n            var s = dimensionChannelDef.sort;\n            var sortField = isSortField(s) ?\n                vgField({\n                    // FIXME: this op might not already exist?\n                    // FIXME: what if dimensionChannel (x or y) contains custom domain?\n                    aggregate: isAggregate(model.encoding) ? s.op : undefined,\n                    field: s.field\n                }, { expr: 'datum' }) :\n                vgField(dimensionChannelDef, {\n                    // For stack with imputation, we only have bin_mid\n                    binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\n                    expr: 'datum'\n                });\n            return {\n                field: sortField,\n                order: 'descending'\n            };\n        }\n        return undefined;\n    }\n    return undefined;\n}\nfunction getMarkGroups(model, opt) {\n    if (opt === void 0) { opt = { fromPrefix: '' }; }\n    var mark = model.mark;\n    var clip = model.markDef.clip !== undefined ?\n        !!model.markDef.clip : scaleClip(model);\n    var style = getStyles(model.markDef);\n    var key = model.encoding.key;\n    var sort = getSort(model);\n    var postEncodingTransform = markCompiler[mark].postEncodingTransform ? markCompiler[mark].postEncodingTransform(model) : null;\n    return [tslib_1.__assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {}), (style ? { style: style } : {}), (key ? { key: { field: key.field } } : {}), (sort ? { sort: sort } : {}), { from: { data: opt.fromPrefix + model.requestDataName(MAIN) }, encode: {\n                update: markCompiler[mark].encodeEntry(model)\n            } }, (postEncodingTransform ? {\n            transform: postEncodingTransform\n        } : {}))];\n}\n/**\n * Returns list of path grouping fields\n * that the model's spec contains.\n */\nexport function pathGroupingFields(mark, encoding) {\n    return keys(encoding).reduce(function (details, channel) {\n        switch (channel) {\n            // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group\n            case 'x':\n            case 'y':\n            case 'order':\n            case 'tooltip':\n            case 'href':\n            case 'x2':\n            case 'y2':\n            case 'latitude':\n            case 'longitude':\n            case 'latitude2':\n            case 'longitude2':\n            // TODO: case 'cursor':\n            // text, shape, shouldn't be a part of line/trail/area\n            case 'text':\n            case 'shape':\n                return details;\n            case 'detail':\n            case 'key':\n                var channelDef = encoding[channel];\n                if (channelDef) {\n                    (isArray(channelDef) ? channelDef : [channelDef]).forEach(function (fieldDef) {\n                        if (!fieldDef.aggregate) {\n                            details.push(vgField(fieldDef, {}));\n                        }\n                    });\n                }\n                return details;\n            case 'size':\n                if (mark === 'trail') {\n                    // For trail, size should not group trail lines.\n                    return details;\n                }\n            // For line, it should group lines.\n            /* tslint:disable */\n            // intentional fall through\n            case 'color':\n            case 'fill':\n            case 'stroke':\n            case 'opacity':\n                // TODO strokeDashOffset:\n                /* tslint:enable */\n                var fieldDef = getFieldDef(encoding[channel]);\n                if (fieldDef && !fieldDef.aggregate) {\n                    details.push(vgField(fieldDef, {}));\n                }\n                return details;\n            default:\n                throw new Error(\"Bug: Channel \" + channel + \" unimplemented for line mark\");\n        }\n    }, []);\n}\n/**\n * If scales are bound to interval selections, we want to automatically clip\n * marks to account for panning/zooming interactions. We identify bound scales\n * by the domainRaw property, which gets added during scale parsing.\n */\nfunction scaleClip(model) {\n    var xScale = model.getScaleComponent('x');\n    var yScale = model.getScaleComponent('y');\n    return (xScale && xScale.get('domainRaw')) ||\n        (yScale && yScale.get('domainRaw')) ? true : false;\n}\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport { GEOPOSITION_CHANNELS, NONPOSITION_SCALE_CHANNELS, SCALE_CHANNELS, X, Y } from '../channel';\nimport * as vlEncoding from '../encoding';\nimport { normalizeEncoding } from '../encoding';\nimport { getFieldDef, hasConditionalFieldDef, isFieldDef } from '../fielddef';\nimport { GEOSHAPE, isMarkDef } from '../mark';\nimport { stack } from '../stack';\nimport { duplicate } from '../util';\nimport { parseUnitAxis } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseUnitLayoutSize } from './layoutsize/parse';\nimport { normalizeMarkDef } from './mark/init';\nimport { parseMarkGroup } from './mark/mark';\nimport { isLayerModel, ModelWithField } from './model';\nimport { replaceRepeaterInEncoding } from './repeater';\nimport { assembleTopLevelSignals, assembleUnitSelectionData, assembleUnitSelectionMarks, assembleUnitSelectionSignals, parseUnitSelection } from './selection/selection';\n/**\n * Internal model of Vega-Lite specification for the compiler.\n */\nvar UnitModel = /** @class */ (function (_super) {\n    tslib_1.__extends(UnitModel, _super);\n    function UnitModel(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {\n        if (parentGivenSize === void 0) { parentGivenSize = {}; }\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, undefined) || this;\n        _this.fit = fit;\n        _this.type = 'unit';\n        _this.specifiedScales = {};\n        _this.specifiedAxes = {};\n        _this.specifiedLegends = {};\n        _this.specifiedProjection = {};\n        _this.selection = {};\n        _this.children = [];\n        _this.initSize(tslib_1.__assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {})));\n        var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n        var encoding = _this.encoding = normalizeEncoding(replaceRepeaterInEncoding(spec.encoding || {}, repeater), mark);\n        _this.markDef = normalizeMarkDef(spec.mark, encoding, config);\n        // calculate stack properties\n        _this.stack = stack(mark, encoding, _this.config.stack);\n        _this.specifiedScales = _this.initScales(mark, encoding);\n        _this.specifiedAxes = _this.initAxes(encoding);\n        _this.specifiedLegends = _this.initLegend(encoding);\n        _this.specifiedProjection = spec.projection;\n        // Selections will be initialized upon parse.\n        _this.selection = spec.selection;\n        return _this;\n    }\n    Object.defineProperty(UnitModel.prototype, \"hasProjection\", {\n        get: function () {\n            var encoding = this.encoding;\n            var isGeoShapeMark = this.mark === GEOSHAPE;\n            var hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(function (channel) { return isFieldDef(encoding[channel]); });\n            return isGeoShapeMark || hasGeoPosition;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Return specified Vega-lite scale domain for a particular channel\n     * @param channel\n     */\n    UnitModel.prototype.scaleDomain = function (channel) {\n        var scale = this.specifiedScales[channel];\n        return scale ? scale.domain : undefined;\n    };\n    UnitModel.prototype.axis = function (channel) {\n        return this.specifiedAxes[channel];\n    };\n    UnitModel.prototype.legend = function (channel) {\n        return this.specifiedLegends[channel];\n    };\n    UnitModel.prototype.initScales = function (mark, encoding) {\n        return SCALE_CHANNELS.reduce(function (scales, channel) {\n            var fieldDef;\n            var specifiedScale;\n            var channelDef = encoding[channel];\n            if (isFieldDef(channelDef)) {\n                fieldDef = channelDef;\n                specifiedScale = channelDef.scale;\n            }\n            else if (hasConditionalFieldDef(channelDef)) {\n                fieldDef = channelDef.condition;\n                specifiedScale = channelDef.condition['scale'];\n            }\n            else if (channel === 'x') {\n                fieldDef = getFieldDef(encoding.x2);\n            }\n            else if (channel === 'y') {\n                fieldDef = getFieldDef(encoding.y2);\n            }\n            if (fieldDef) {\n                scales[channel] = specifiedScale || {};\n            }\n            return scales;\n        }, {});\n    };\n    UnitModel.prototype.initAxes = function (encoding) {\n        return [X, Y].reduce(function (_axis, channel) {\n            // Position Axis\n            // TODO: handle ConditionFieldDef\n            var channelDef = encoding[channel];\n            if (isFieldDef(channelDef) ||\n                (channel === X && isFieldDef(encoding.x2)) ||\n                (channel === Y && isFieldDef(encoding.y2))) {\n                var axisSpec = isFieldDef(channelDef) ? channelDef.axis : null;\n                // We no longer support false in the schema, but we keep false here for backward compatibility.\n                if (axisSpec !== null && axisSpec !== false) {\n                    _axis[channel] = tslib_1.__assign({}, axisSpec);\n                }\n            }\n            return _axis;\n        }, {});\n    };\n    UnitModel.prototype.initLegend = function (encoding) {\n        return NONPOSITION_SCALE_CHANNELS.reduce(function (_legend, channel) {\n            var channelDef = encoding[channel];\n            if (channelDef) {\n                var legend = isFieldDef(channelDef) ? channelDef.legend :\n                    (hasConditionalFieldDef(channelDef)) ? channelDef.condition['legend'] : null;\n                if (legend !== null && legend !== false) {\n                    _legend[channel] = tslib_1.__assign({}, legend);\n                }\n            }\n            return _legend;\n        }, {});\n    };\n    UnitModel.prototype.parseData = function () {\n        this.component.data = parseData(this);\n    };\n    UnitModel.prototype.parseLayoutSize = function () {\n        parseUnitLayoutSize(this);\n    };\n    UnitModel.prototype.parseSelection = function () {\n        this.component.selection = parseUnitSelection(this, this.selection);\n    };\n    UnitModel.prototype.parseMarkGroup = function () {\n        this.component.mark = parseMarkGroup(this);\n    };\n    UnitModel.prototype.parseAxisAndHeader = function () {\n        this.component.axes = parseUnitAxis(this);\n    };\n    UnitModel.prototype.assembleSelectionTopLevelSignals = function (signals) {\n        return assembleTopLevelSignals(this, signals);\n    };\n    UnitModel.prototype.assembleSelectionSignals = function () {\n        return assembleUnitSelectionSignals(this, []);\n    };\n    UnitModel.prototype.assembleSelectionData = function (data) {\n        return assembleUnitSelectionData(this, data);\n    };\n    UnitModel.prototype.assembleLayout = function () {\n        return null;\n    };\n    UnitModel.prototype.assembleLayoutSignals = function () {\n        return assembleLayoutSignals(this);\n    };\n    UnitModel.prototype.assembleMarks = function () {\n        var marks = this.component.mark || [];\n        // If this unit is part of a layer, selections should augment\n        // all in concert rather than each unit individually. This\n        // ensures correct interleaving of clipping and brushed marks.\n        if (!this.parent || !isLayerModel(this.parent)) {\n            marks = assembleUnitSelectionMarks(this, marks);\n        }\n        return marks.map(this.correctDataNames);\n    };\n    UnitModel.prototype.assembleLayoutSize = function () {\n        return {\n            width: this.getSizeSignalRef('width'),\n            height: this.getSizeSignalRef('height')\n        };\n    };\n    UnitModel.prototype.getMapping = function () {\n        return this.encoding;\n    };\n    UnitModel.prototype.toSpec = function (excludeConfig, excludeData) {\n        var encoding = duplicate(this.encoding);\n        var spec;\n        spec = {\n            mark: this.markDef,\n            encoding: encoding\n        };\n        if (!excludeConfig) {\n            spec.config = duplicate(this.config);\n        }\n        if (!excludeData) {\n            spec.data = duplicate(this.data);\n        }\n        // remove defaults\n        return spec;\n    };\n    Object.defineProperty(UnitModel.prototype, \"mark\", {\n        get: function () {\n            return this.markDef.type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    UnitModel.prototype.channelHasField = function (channel) {\n        return vlEncoding.channelHasField(this.encoding, channel);\n    };\n    UnitModel.prototype.fieldDef = function (channel) {\n        var channelDef = this.encoding[channel];\n        return getFieldDef(channelDef);\n    };\n    return UnitModel;\n}(ModelWithField));\nexport { UnitModel };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { flatten, keys } from '../util';\nimport { parseLayerAxis } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseLayerLayoutSize } from './layoutsize/parse';\nimport { assembleLegends } from './legend/assemble';\nimport { Model } from './model';\nimport { assembleLayerSelectionMarks } from './selection/selection';\nimport { UnitModel } from './unit';\nvar LayerModel = /** @class */ (function (_super) {\n    tslib_1.__extends(LayerModel, _super);\n    function LayerModel(spec, parent, parentGivenName, parentGivenSize, repeater, config, fit) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeater, spec.resolve) || this;\n        _this.type = 'layer';\n        var layoutSize = tslib_1.__assign({}, parentGivenSize, (spec.width ? { width: spec.width } : {}), (spec.height ? { height: spec.height } : {}));\n        _this.initSize(layoutSize);\n        _this.children = spec.layer.map(function (layer, i) {\n            if (isLayerSpec(layer)) {\n                return new LayerModel(layer, _this, _this.getName('layer_' + i), layoutSize, repeater, config, fit);\n            }\n            if (isUnitSpec(layer)) {\n                return new UnitModel(layer, _this, _this.getName('layer_' + i), layoutSize, repeater, config, fit);\n            }\n            throw new Error(log.message.INVALID_SPEC);\n        });\n        return _this;\n    }\n    LayerModel.prototype.parseData = function () {\n        this.component.data = parseData(this);\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parseData();\n        }\n    };\n    LayerModel.prototype.parseLayoutSize = function () {\n        parseLayerLayoutSize(this);\n    };\n    LayerModel.prototype.parseSelection = function () {\n        var _this = this;\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        var _loop_1 = function (child) {\n            child.parseSelection();\n            keys(child.component.selection).forEach(function (key) {\n                _this.component.selection[key] = child.component.selection[key];\n            });\n        };\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            _loop_1(child);\n        }\n    };\n    LayerModel.prototype.parseMarkGroup = function () {\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            child.parseMarkGroup();\n        }\n    };\n    LayerModel.prototype.parseAxisAndHeader = function () {\n        parseLayerAxis(this);\n    };\n    LayerModel.prototype.assembleSelectionTopLevelSignals = function (signals) {\n        return this.children.reduce(function (sg, child) { return child.assembleSelectionTopLevelSignals(sg); }, signals);\n    };\n    // TODO: Support same named selections across children.\n    LayerModel.prototype.assembleSelectionSignals = function () {\n        return this.children.reduce(function (signals, child) {\n            return signals.concat(child.assembleSelectionSignals());\n        }, []);\n    };\n    LayerModel.prototype.assembleLayoutSignals = function () {\n        return this.children.reduce(function (signals, child) {\n            return signals.concat(child.assembleLayoutSignals());\n        }, assembleLayoutSignals(this));\n    };\n    LayerModel.prototype.assembleSelectionData = function (data) {\n        return this.children.reduce(function (db, child) { return child.assembleSelectionData(db); }, data);\n    };\n    LayerModel.prototype.assembleTitle = function () {\n        var title = _super.prototype.assembleTitle.call(this);\n        if (title) {\n            return title;\n        }\n        // If title does not provide layer, look into children\n        for (var _i = 0, _a = this.children; _i < _a.length; _i++) {\n            var child = _a[_i];\n            title = child.assembleTitle();\n            if (title) {\n                return title;\n            }\n        }\n        return undefined;\n    };\n    LayerModel.prototype.assembleLayout = function () {\n        return null;\n    };\n    LayerModel.prototype.assembleMarks = function () {\n        return assembleLayerSelectionMarks(this, flatten(this.children.map(function (child) {\n            return child.assembleMarks();\n        })));\n    };\n    LayerModel.prototype.assembleLegends = function () {\n        return this.children.reduce(function (legends, child) {\n            return legends.concat(child.assembleLegends());\n        }, assembleLegends(this));\n    };\n    return LayerModel;\n}(Model));\nexport { LayerModel };\n//# sourceMappingURL=data:application/json;base64,","import * as tslib_1 from \"tslib\";\nimport * as log from '../log';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseRepeatLayoutSize } from './layoutsize/parse';\nvar RepeatModel = /** @class */ (function (_super) {\n    tslib_1.__extends(RepeatModel, _super);\n    function RepeatModel(spec, parent, parentGivenName, repeatValues, config) {\n        var _this = _super.call(this, spec, parent, parentGivenName, config, repeatValues, spec.resolve) || this;\n        _this.type = 'repeat';\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);\n        }\n        _this.repeat = spec.repeat;\n        _this.children = _this._initChildren(spec, _this.repeat, repeatValues, config);\n        return _this;\n    }\n    RepeatModel.prototype._initChildren = function (spec, repeat, repeater, config) {\n        var children = [];\n        var row = repeat.row || [repeater ? repeater.row : null];\n        var column = repeat.column || [repeater ? repeater.column : null];\n        // cross product\n        for (var _i = 0, row_1 = row; _i < row_1.length; _i++) {\n            var rowField = row_1[_i];\n            for (var _a = 0, column_1 = column; _a < column_1.length; _a++) {\n                var columnField = column_1[_a];\n                var name_1 = (rowField ? '_' + rowField : '') + (columnField ? '_' + columnField : '');\n                var childRepeat = {\n                    row: rowField,\n                    column: columnField\n                };\n                children.push(buildModel(spec.spec, this, this.getName('child' + name_1), undefined, childRepeat, config, false));\n            }\n        }\n        return children;\n    };\n    RepeatModel.prototype.parseLayoutSize = function () {\n        parseRepeatLayoutSize(this);\n    };\n    RepeatModel.prototype.assembleLayout = function () {\n        // TODO: allow customization\n        return {\n            padding: { row: 10, column: 10 },\n            offset: 10,\n            columns: this.repeat && this.repeat.column ? this.repeat.column.length : 1,\n            bounds: 'full',\n            align: 'all'\n        };\n    };\n    return RepeatModel;\n}(BaseConcatModel));\nexport { RepeatModel };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBpbGUvcmVwZWF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEtBQUssR0FBRyxNQUFNLFFBQVEsQ0FBQztBQUk5QixPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFDeEMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFJekQ7SUFBaUMsdUNBQWU7SUFNOUMscUJBQVksSUFBMEIsRUFBRSxNQUFhLEVBQUUsZUFBdUIsRUFBRSxZQUEyQixFQUFFLE1BQWM7UUFBM0gsWUFDRSxrQkFBTSxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsU0FRekU7UUFkZSxVQUFJLEdBQWEsUUFBUSxDQUFDO1FBUXhDLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxFQUFFO1lBQy9HLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsS0FBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFCLEtBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7O0lBQzlFLENBQUM7SUFFTyxtQ0FBYSxHQUFyQixVQUFzQixJQUEwQixFQUFFLE1BQWMsRUFBRSxRQUF1QixFQUFFLE1BQWM7UUFDdkcsSUFBTSxRQUFRLEdBQVksRUFBRSxDQUFDO1FBQzdCLElBQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNELElBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBFLGdCQUFnQjtRQUNoQixLQUF1QixVQUFHLEVBQUgsV0FBRyxFQUFILGlCQUFHLEVBQUgsSUFBRyxFQUFFO1lBQXZCLElBQU0sUUFBUSxZQUFBO1lBQ2pCLEtBQTBCLFVBQU0sRUFBTixpQkFBTSxFQUFOLG9CQUFNLEVBQU4sSUFBTSxFQUFFO2dCQUE3QixJQUFNLFdBQVcsZUFBQTtnQkFDcEIsSUFBTSxNQUFJLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFFdkYsSUFBTSxXQUFXLEdBQUc7b0JBQ2xCLEdBQUcsRUFBRSxRQUFRO29CQUNiLE1BQU0sRUFBRSxXQUFXO2lCQUNwQixDQUFDO2dCQUVGLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLE1BQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDakg7U0FDRjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTSxxQ0FBZSxHQUF0QjtRQUNFLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFTSxvQ0FBYyxHQUFyQjtRQUNFLDRCQUE0QjtRQUM1QixPQUFPO1lBQ0wsT0FBTyxFQUFFLEVBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFDO1lBQzlCLE1BQU0sRUFBRSxFQUFFO1lBQ1YsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxRSxNQUFNLEVBQUUsTUFBTTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQztJQUNKLENBQUM7SUFDSCxrQkFBQztBQUFELENBQUMsQUFyREQsQ0FBaUMsZUFBZSxHQXFEL0MiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uL2xvZyc7XG5pbXBvcnQge1JlcGVhdH0gZnJvbSAnLi4vcmVwZWF0JztcbmltcG9ydCB7Tm9ybWFsaXplZFJlcGVhdFNwZWN9IGZyb20gJy4uL3NwZWMnO1xuaW1wb3J0IHtWZ0xheW91dH0gZnJvbSAnLi4vdmVnYS5zY2hlbWEnO1xuaW1wb3J0IHtCYXNlQ29uY2F0TW9kZWx9IGZyb20gJy4vYmFzZWNvbmNhdCc7XG5pbXBvcnQge2J1aWxkTW9kZWx9IGZyb20gJy4vYnVpbGRtb2RlbCc7XG5pbXBvcnQge3BhcnNlUmVwZWF0TGF5b3V0U2l6ZX0gZnJvbSAnLi9sYXlvdXRzaXplL3BhcnNlJztcbmltcG9ydCB7TW9kZWx9IGZyb20gJy4vbW9kZWwnO1xuaW1wb3J0IHtSZXBlYXRlclZhbHVlfSBmcm9tICcuL3JlcGVhdGVyJztcblxuZXhwb3J0IGNsYXNzIFJlcGVhdE1vZGVsIGV4dGVuZHMgQmFzZUNvbmNhdE1vZGVsIHtcbiAgcHVibGljIHJlYWRvbmx5IHR5cGU6ICdyZXBlYXQnID0gJ3JlcGVhdCc7XG4gIHB1YmxpYyByZWFkb25seSByZXBlYXQ6IFJlcGVhdDtcblxuICBwdWJsaWMgcmVhZG9ubHkgY2hpbGRyZW46IE1vZGVsW107XG5cbiAgY29uc3RydWN0b3Ioc3BlYzogTm9ybWFsaXplZFJlcGVhdFNwZWMsIHBhcmVudDogTW9kZWwsIHBhcmVudEdpdmVuTmFtZTogc3RyaW5nLCByZXBlYXRWYWx1ZXM6IFJlcGVhdGVyVmFsdWUsIGNvbmZpZzogQ29uZmlnKSB7XG4gICAgc3VwZXIoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIGNvbmZpZywgcmVwZWF0VmFsdWVzLCBzcGVjLnJlc29sdmUpO1xuXG4gICAgaWYgKHNwZWMucmVzb2x2ZSAmJiBzcGVjLnJlc29sdmUuYXhpcyAmJiAoc3BlYy5yZXNvbHZlLmF4aXMueCA9PT0gJ3NoYXJlZCcgfHwgc3BlYy5yZXNvbHZlLmF4aXMueSA9PT0gJ3NoYXJlZCcpKSB7XG4gICAgICBsb2cud2Fybihsb2cubWVzc2FnZS5SRVBFQVRfQ0FOTk9UX1NIQVJFX0FYSVMpO1xuICAgIH1cblxuICAgIHRoaXMucmVwZWF0ID0gc3BlYy5yZXBlYXQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuX2luaXRDaGlsZHJlbihzcGVjLCB0aGlzLnJlcGVhdCwgcmVwZWF0VmFsdWVzLCBjb25maWcpO1xuICB9XG5cbiAgcHJpdmF0ZSBfaW5pdENoaWxkcmVuKHNwZWM6IE5vcm1hbGl6ZWRSZXBlYXRTcGVjLCByZXBlYXQ6IFJlcGVhdCwgcmVwZWF0ZXI6IFJlcGVhdGVyVmFsdWUsIGNvbmZpZzogQ29uZmlnKTogTW9kZWxbXSB7XG4gICAgY29uc3QgY2hpbGRyZW46IE1vZGVsW10gPSBbXTtcbiAgICBjb25zdCByb3cgPSByZXBlYXQucm93IHx8IFtyZXBlYXRlciA/IHJlcGVhdGVyLnJvdyA6IG51bGxdO1xuICAgIGNvbnN0IGNvbHVtbiA9IHJlcGVhdC5jb2x1bW4gfHwgW3JlcGVhdGVyID8gcmVwZWF0ZXIuY29sdW1uIDogbnVsbF07XG5cbiAgICAvLyBjcm9zcyBwcm9kdWN0XG4gICAgZm9yIChjb25zdCByb3dGaWVsZCBvZiByb3cpIHtcbiAgICAgIGZvciAoY29uc3QgY29sdW1uRmllbGQgb2YgY29sdW1uKSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSAocm93RmllbGQgPyAnXycgKyByb3dGaWVsZCA6ICcnKSArIChjb2x1bW5GaWVsZCA/ICdfJyArIGNvbHVtbkZpZWxkIDogJycpO1xuXG4gICAgICAgIGNvbnN0IGNoaWxkUmVwZWF0ID0ge1xuICAgICAgICAgIHJvdzogcm93RmllbGQsXG4gICAgICAgICAgY29sdW1uOiBjb2x1bW5GaWVsZFxuICAgICAgICB9O1xuXG4gICAgICAgIGNoaWxkcmVuLnB1c2goYnVpbGRNb2RlbChzcGVjLnNwZWMsIHRoaXMsIHRoaXMuZ2V0TmFtZSgnY2hpbGQnICsgbmFtZSksIHVuZGVmaW5lZCwgY2hpbGRSZXBlYXQsIGNvbmZpZywgZmFsc2UpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cblxuICBwdWJsaWMgcGFyc2VMYXlvdXRTaXplKCkge1xuICAgIHBhcnNlUmVwZWF0TGF5b3V0U2l6ZSh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3NlbWJsZUxheW91dCgpOiBWZ0xheW91dCB7XG4gICAgLy8gVE9ETzogYWxsb3cgY3VzdG9taXphdGlvblxuICAgIHJldHVybiB7XG4gICAgICBwYWRkaW5nOiB7cm93OiAxMCwgY29sdW1uOiAxMH0sXG4gICAgICBvZmZzZXQ6IDEwLFxuICAgICAgY29sdW1uczogdGhpcy5yZXBlYXQgJiYgdGhpcy5yZXBlYXQuY29sdW1uID8gdGhpcy5yZXBlYXQuY29sdW1uLmxlbmd0aCA6IDEsXG4gICAgICBib3VuZHM6ICdmdWxsJyxcbiAgICAgIGFsaWduOiAnYWxsJ1xuICAgIH07XG4gIH1cbn1cbiJdfQ==","import * as log from '../log';\nimport { isConcatSpec, isFacetSpec, isLayerSpec, isRepeatSpec, isUnitSpec } from '../spec';\nimport { ConcatModel } from './concat';\nimport { FacetModel } from './facet';\nimport { LayerModel } from './layer';\nimport { RepeatModel } from './repeat';\nimport { UnitModel } from './unit';\nexport function buildModel(spec, parent, parentGivenName, unitSize, repeater, config, fit) {\n    if (isFacetSpec(spec)) {\n        return new FacetModel(spec, parent, parentGivenName, repeater, config);\n    }\n    if (isLayerSpec(spec)) {\n        return new LayerModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n    }\n    if (isUnitSpec(spec)) {\n        return new UnitModel(spec, parent, parentGivenName, unitSize, repeater, config, fit);\n    }\n    if (isRepeatSpec(spec)) {\n        return new RepeatModel(spec, parent, parentGivenName, repeater, config);\n    }\n    if (isConcatSpec(spec)) {\n        return new ConcatModel(spec, parent, parentGivenName, repeater, config);\n    }\n    throw new Error(log.message.INVALID_SPEC);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRtb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21waWxlL2J1aWxkbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxLQUFLLEdBQUcsTUFBTSxRQUFRLENBQUM7QUFDOUIsT0FBTyxFQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQW1DLE1BQU0sU0FBUyxDQUFDO0FBQzNILE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDckMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRW5DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFckMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQUVqQyxNQUFNLHFCQUFxQixJQUFvQixFQUFFLE1BQWEsRUFBRSxlQUF1QixFQUNyRixRQUEwQixFQUFFLFFBQXVCLEVBQUUsTUFBYyxFQUFFLEdBQVk7SUFDakYsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDckIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDeEU7SUFFRCxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNyQixPQUFPLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0tBQ3ZGO0lBRUQsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDcEIsT0FBTyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN0RjtJQUVELElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0tBQ3pFO0lBRUQsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdEIsT0FBTyxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDekU7SUFFRCxNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uZmlnfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uL2xvZyc7XG5pbXBvcnQge2lzQ29uY2F0U3BlYywgaXNGYWNldFNwZWMsIGlzTGF5ZXJTcGVjLCBpc1JlcGVhdFNwZWMsIGlzVW5pdFNwZWMsIExheW91dFNpemVNaXhpbnMsIE5vcm1hbGl6ZWRTcGVjfSBmcm9tICcuLi9zcGVjJztcbmltcG9ydCB7Q29uY2F0TW9kZWx9IGZyb20gJy4vY29uY2F0JztcbmltcG9ydCB7RmFjZXRNb2RlbH0gZnJvbSAnLi9mYWNldCc7XG5pbXBvcnQge0xheWVyTW9kZWx9IGZyb20gJy4vbGF5ZXInO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQge1JlcGVhdE1vZGVsfSBmcm9tICcuL3JlcGVhdCc7XG5pbXBvcnQge1JlcGVhdGVyVmFsdWV9IGZyb20gJy4vcmVwZWF0ZXInO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4vdW5pdCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZE1vZGVsKHNwZWM6IE5vcm1hbGl6ZWRTcGVjLCBwYXJlbnQ6IE1vZGVsLCBwYXJlbnRHaXZlbk5hbWU6IHN0cmluZyxcbiAgdW5pdFNpemU6IExheW91dFNpemVNaXhpbnMsIHJlcGVhdGVyOiBSZXBlYXRlclZhbHVlLCBjb25maWc6IENvbmZpZywgZml0OiBib29sZWFuKTogTW9kZWwge1xuICBpZiAoaXNGYWNldFNwZWMoc3BlYykpIHtcbiAgICByZXR1cm4gbmV3IEZhY2V0TW9kZWwoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIHJlcGVhdGVyLCBjb25maWcpO1xuICB9XG5cbiAgaWYgKGlzTGF5ZXJTcGVjKHNwZWMpKSB7XG4gICAgcmV0dXJuIG5ldyBMYXllck1vZGVsKHNwZWMsIHBhcmVudCwgcGFyZW50R2l2ZW5OYW1lLCB1bml0U2l6ZSwgcmVwZWF0ZXIsIGNvbmZpZywgZml0KTtcbiAgfVxuXG4gIGlmIChpc1VuaXRTcGVjKHNwZWMpKSB7XG4gICAgcmV0dXJuIG5ldyBVbml0TW9kZWwoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIHVuaXRTaXplLCByZXBlYXRlciwgY29uZmlnLCBmaXQpO1xuICB9XG5cbiAgaWYgKGlzUmVwZWF0U3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBuZXcgUmVwZWF0TW9kZWwoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIHJlcGVhdGVyLCBjb25maWcpO1xuICB9XG5cbiAgaWYgKGlzQ29uY2F0U3BlYyhzcGVjKSkge1xuICAgIHJldHVybiBuZXcgQ29uY2F0TW9kZWwoc3BlYywgcGFyZW50LCBwYXJlbnRHaXZlbk5hbWUsIHJlcGVhdGVyLCBjb25maWcpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGxvZy5tZXNzYWdlLklOVkFMSURfU1BFQyk7XG59XG4iXX0=","import * as tslib_1 from \"tslib\";\nimport { initConfig, stripAndRedirectConfig } from '../config';\nimport * as vlFieldDef from '../fielddef';\nimport * as log from '../log';\nimport { isLayerSpec, isUnitSpec, normalize } from '../spec';\nimport { extractTopLevelProperties, normalizeAutoSize } from '../toplevelprops';\nimport { keys, mergeDeep } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\nimport { optimizeDataflow } from './data/optimize';\n/**\n * Vega-Lite's main function, for compiling Vega-lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n */\nexport function compile(inputSpec, opt) {\n    if (opt === void 0) { opt = {}; }\n    // 0. Augment opt with default opts\n    if (opt.logger) {\n        // set the singleton logger to the provided logger\n        log.set(opt.logger);\n    }\n    if (opt.fieldTitle) {\n        // set the singleton field title formatter\n        vlFieldDef.setTitleFormatter(opt.fieldTitle);\n    }\n    try {\n        // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n        var config = initConfig(mergeDeep({}, opt.config, inputSpec.config));\n        // 2. Normalize: Convert input spec -> normalized spec\n        // - Decompose all extended unit specs into composition of unit spec.  For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n        var spec = normalize(inputSpec, config);\n        // - Normalize autosize to be a autosize properties object.\n        var autosize = normalizeAutoSize(inputSpec.autosize, config.autosize, isLayerSpec(spec) || isUnitSpec(spec));\n        // 3. Build Model: normalized spec -> Model (a tree structure)\n        // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n        // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.\n        var model = buildModel(spec, null, '', undefined, undefined, config, autosize.type === 'fit');\n        // 4 Parse: Model --> Model with components\n        // Note that components = intermediate representations that are equivalent to Vega specs.\n        // We need these intermediate representation because we need to merge many visualizaiton \"components\" like projections, scales, axes, and legends.\n        // We will later convert these components into actual Vega specs in the assemble phase.\n        // In this phase, we do a bottom-up traversal over the whole tree to\n        // parse for each type of components once (e.g., data, layout, mark, scale).\n        // By doing bottom-up traversal, we start parsing components of unit specs and\n        // then merge child components of parent composite specs.\n        //\n        // Please see inside model.parse() for order of different components parsed.\n        model.parse();\n        // 5. Optimize the dataflow.  This will modify the data component of the model.\n        optimizeDataflow(model.component.data);\n        // 6. Assemble: convert model components --> Vega Spec.\n        return assembleTopLevelModel(model, getTopLevelProperties(inputSpec, config, autosize));\n    }\n    finally {\n        // Reset the singleton logger if a logger is provided\n        if (opt.logger) {\n            log.reset();\n        }\n        // Reset the singleton field title formatter if provided\n        if (opt.fieldTitle) {\n            vlFieldDef.resetTitleFormatter();\n        }\n    }\n}\nfunction getTopLevelProperties(topLevelSpec, config, autosize) {\n    return tslib_1.__assign({ autosize: keys(autosize).length === 1 && autosize.type ? autosize.type : autosize }, extractTopLevelProperties(config), extractTopLevelProperties(topLevelSpec));\n}\n/*\n * Assemble the top-level model.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(model, topLevelProperties) {\n    // TODO: change type to become VgSpec\n    // Config with Vega-Lite only config removed.\n    var vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n    var data = [].concat(model.assembleSelectionData([]), \n    // only assemble data in the root\n    assembleRootData(model.component.data, topLevelProperties.datasets || {}));\n    delete topLevelProperties.datasets;\n    var projections = model.assembleProjections();\n    var title = model.assembleTitle();\n    var style = model.assembleGroupStyle();\n    var layoutSignals = model.assembleLayoutSignals();\n    // move width and height signals with values to top level\n    layoutSignals = layoutSignals.filter(function (signal) {\n        if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n            topLevelProperties[signal.name] = +signal.value;\n            return false;\n        }\n        return true;\n    });\n    var output = tslib_1.__assign({ $schema: 'https://vega.github.io/schema/vega/v3.json' }, (model.description ? { description: model.description } : {}), topLevelProperties, (title ? { title: title } : {}), (style ? { style: style } : {}), { data: data }, (projections.length > 0 ? { projections: projections } : {}), model.assembleGroup(layoutSignals.concat(model.assembleSelectionTopLevelSignals([]))), (vgConfig ? { config: vgConfig } : {}));\n    return {\n        spec: output\n        // TODO: add warning / errors here\n    };\n}\n//# sourceMappingURL=data:application/json;base64,","import { toSet } from 'vega-util';\nimport { isMarkDef } from './mark';\nimport { BAR } from './mark';\n/**\n * Required Encoding Channels for each mark type\n */\nexport var DEFAULT_REQUIRED_CHANNEL_MAP = {\n    text: ['text'],\n    line: ['x', 'y'],\n    trail: ['x', 'y'],\n    area: ['x', 'y']\n};\n/**\n * Supported Encoding Channel for each mark type\n */\nexport var DEFAULT_SUPPORTED_CHANNEL_TYPE = {\n    bar: toSet(['row', 'column', 'x', 'y', 'size', 'color', 'fill', 'stroke', 'detail']),\n    line: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'color', 'detail']),\n    trail: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'color', 'detail', 'size']),\n    area: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'detail']),\n    tick: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'detail']),\n    circle: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail']),\n    square: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail']),\n    point: toSet(['row', 'column', 'x', 'y', 'color', 'fill', 'stroke', 'size', 'detail', 'shape']),\n    geoshape: toSet(['row', 'column', 'color', 'fill', 'stroke', 'detail', 'shape']),\n    text: toSet(['row', 'column', 'size', 'color', 'fill', 'stroke', 'text']) // TODO(#724) revise\n};\n// TODO: consider if we should add validate method and\n// requires ZSchema in the main vega-lite repo\n/**\n * Further check if encoding mapping of a spec is invalid and\n * return error if it is invalid.\n *\n * This checks if\n * (1) all the required encoding channels for the mark type are specified\n * (2) all the specified encoding channels are supported by the mark type\n * @param  {[type]} spec [description]\n * @param  {RequiredChannelMap = DefaultRequiredChannelMap}  requiredChannelMap\n * @param  {SupportedChannelMap = DefaultSupportedChannelMap} supportedChannelMap\n * @return {String} Return one reason why the encoding is invalid,\n *                  or null if the encoding is valid.\n */\nexport function getEncodingMappingError(spec, requiredChannelMap, supportedChannelMap) {\n    if (requiredChannelMap === void 0) { requiredChannelMap = DEFAULT_REQUIRED_CHANNEL_MAP; }\n    if (supportedChannelMap === void 0) { supportedChannelMap = DEFAULT_SUPPORTED_CHANNEL_TYPE; }\n    var mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n    var encoding = spec.encoding;\n    var requiredChannels = requiredChannelMap[mark];\n    var supportedChannels = supportedChannelMap[mark];\n    for (var i in requiredChannels) { // all required channels are in encoding`\n        if (!(requiredChannels[i] in encoding)) {\n            return 'Missing encoding channel \\\"' + requiredChannels[i] +\n                '\\\" for mark \\\"' + mark + '\\\"';\n        }\n    }\n    for (var channel in encoding) { // all channels in encoding are supported\n        if (!supportedChannels[channel]) {\n            return 'Encoding channel \\\"' + channel +\n                '\\\" is not supported by mark type \\\"' + mark + '\\\"';\n        }\n    }\n    if (mark === BAR && !encoding.x && !encoding.y) {\n        return 'Missing both x and y for bar';\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["stringValue","Error","error","array","require$$0","require$$1","isArray","tslib_1.__assign","stringify","stableStringify","key","isBoolean","tslib_1.__rest","TEXT","field","log.warn","log.message","boxplot.BOXPLOT_STYLES","normalize","defaultConfig","mark.defaultMarkConfig","mark.defaultBarConfig","mark.defaultTickConfig","defaultSelectionConfig","compositeMark.normalize","vlEncoding.fieldDefs","fieldDefs","parseSelector","title","fieldDefTitle","bin","text","ref.midPoint","ref.text","ref.fieldRef","ref.bandRef","ref.bin","ref.getOffset","ref.stackable","ref.getDefaultRef","ref.stackable2","tslib_1.__extends","mixins.color","vals","type","properties.values","properties.type","log.debug","fieldRef","optimizers.iterateFromLeaves","optimizers.removeUnusedSubtrees","optimizers.moveParseUp","optimizers.removeDuplicateTimeUnits","util.keys","util.hash","util.isBoolean","util.replacePathInField","util.contains","util.unique","zero","defaultType","domain","scales","multiSignals","signals","scalesCompiler","INTERVAL_BRUSH","ANCHOR","DELTA","zoom","onDelta","inputs","contains","singleCompiler","multiCompiler","intervalCompiler","fieldExpr","timeUnitFieldExpr","isTimeUnit","isAggregate","hash","labels","labelAlign","labelBaseline","values","orient","getProperty","encode.labels","properties.gridScale","properties.grid","properties.labelFlush","properties.labelOverlap","properties.orient","properties.tickCount","mixins.baseEncodeEntry","mixins.pointPosition","mixins.pointPosition2","mixins.defined","mixins.binnedPosition","mixins.bandPosition","mixins.centeredBandPosition","ref.mid","mixins.nonPosition","x","y","mixins.text","mixins.valueIfDefined","vlEncoding.channelHasField","log.set","vlFieldDef.setTitleFormatter","log.reset","vlFieldDef.resetTitleFormatter"],"mappings":"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"}