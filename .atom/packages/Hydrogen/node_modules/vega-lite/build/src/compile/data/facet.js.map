{"version":3,"file":"facet.js","sourceRoot":"","sources":["../../../../src/compile/data/facet.ts"],"names":[],"mappings":"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","sourcesContent":["import {AggregateOp} from 'vega';\nimport {isArray} from 'vega-util';\nimport {isBinning} from '../../bin';\nimport {COLUMN, FACET_CHANNELS, ROW, ScaleChannel} from '../../channel';\nimport {vgField} from '../../channeldef';\nimport * as log from '../../log';\nimport {hasDiscreteDomain} from '../../scale';\nimport {DEFAULT_SORT_OP, EncodingSortField, isSortField} from '../../sort';\nimport {hash} from '../../util';\nimport {isVgRangeStep, VgData} from '../../vega.schema';\nimport {FacetModel} from '../facet';\nimport {HEADER_CHANNELS, HEADER_TYPES} from '../header/component';\nimport {Model} from '../model';\nimport {assembleDomain, getFieldFromDomain} from '../scale/domain';\nimport {sortArrayIndexField} from './calculate';\nimport {DataFlowNode} from './dataflow';\n\ninterface ChildIndependentFieldsWithStep {\n  x?: string;\n  y?: string;\n}\n\ninterface FacetChannelInfo {\n  name: string;\n  fields: string[];\n  sortField?: EncodingSortField<string>;\n\n  sortIndexField?: string;\n}\n\n/**\n * A node that helps us track what fields we are faceting by.\n */\nexport class FacetNode extends DataFlowNode {\n  private readonly column: FacetChannelInfo;\n\n  private readonly row: FacetChannelInfo;\n\n  private readonly facet: FacetChannelInfo;\n\n  private readonly childModel: Model;\n\n  /**\n   * @param model The facet model.\n   * @param name The name that this facet source will have.\n   * @param data The source data for this facet data.\n   */\n  public constructor(\n    parent: DataFlowNode,\n    public readonly model: FacetModel,\n    public readonly name: string,\n    public data: string\n  ) {\n    super(parent);\n\n    for (const channel of FACET_CHANNELS) {\n      const fieldDef = model.facet[channel];\n      if (fieldDef) {\n        const {bin, sort} = fieldDef;\n        this[channel] = {\n          name: model.getName(`${channel}_domain`),\n          fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, {binSuffix: 'end'})] : [])],\n          ...(isSortField(sort)\n            ? {sortField: sort}\n            : isArray(sort)\n            ? {sortIndexField: sortArrayIndexField(fieldDef, channel)}\n            : {})\n        };\n      }\n    }\n    this.childModel = model.child;\n  }\n\n  public hash() {\n    let out = `Facet`;\n\n    for (const channel of FACET_CHANNELS) {\n      if (this[channel]) {\n        out += ` ${channel.charAt(0)}:${hash(this[channel])}`;\n      }\n    }\n\n    return out;\n  }\n\n  get fields() {\n    const f: string[] = [];\n\n    for (const channel of FACET_CHANNELS) {\n      if (this[channel] && this[channel].fields) {\n        f.push(...this[channel].fields);\n      }\n    }\n    return f;\n  }\n\n  /**\n   * The name to reference this source is its name.\n   */\n  public getSource() {\n    return this.name;\n  }\n\n  private getChildIndependentFieldsWithStep() {\n    const childIndependentFieldsWithStep: ChildIndependentFieldsWithStep = {};\n\n    for (const channel of ['x', 'y'] as ScaleChannel[]) {\n      const childScaleComponent = this.childModel.component.scales[channel];\n      if (childScaleComponent && !childScaleComponent.merged) {\n        // independent scale\n        const type = childScaleComponent.get('type');\n        const range = childScaleComponent.get('range');\n\n        if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n          const domain = assembleDomain(this.childModel, channel);\n          const field = getFieldFromDomain(domain);\n          if (field) {\n            childIndependentFieldsWithStep[channel] = field;\n          } else {\n            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n          }\n        }\n      }\n    }\n\n    return childIndependentFieldsWithStep;\n  }\n\n  private assembleRowColumnHeaderData(\n    channel: 'row' | 'column' | 'facet',\n    crossedDataName: string,\n    childIndependentFieldsWithStep: ChildIndependentFieldsWithStep\n  ): VgData {\n    const childChannel = {row: 'y', column: 'x'}[channel];\n\n    const fields: string[] = [];\n    const ops: AggregateOp[] = [];\n    const as: string[] = [];\n\n    if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {\n      if (crossedDataName) {\n        // If there is a crossed data, calculate max\n        fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n\n        ops.push('max');\n      } else {\n        // If there is no crossed data, just calculate distinct\n        fields.push(childIndependentFieldsWithStep[childChannel]);\n        ops.push('distinct');\n      }\n      // Although it is technically a max, just name it distinct so it's easier to refer to it\n      as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n    }\n\n    const {sortField, sortIndexField} = this[channel];\n    if (sortField) {\n      const {op = DEFAULT_SORT_OP, field} = sortField;\n      fields.push(field);\n      ops.push(op);\n      as.push(vgField(sortField, {forAs: true}));\n    } else if (sortIndexField) {\n      fields.push(sortIndexField);\n      ops.push('max');\n      as.push(sortIndexField);\n    }\n\n    return {\n      name: this[channel].name,\n      // Use data from the crossed one if it exist\n      source: crossedDataName || this.data,\n      transform: [\n        {\n          type: 'aggregate',\n          groupby: this[channel].fields,\n          ...(fields.length\n            ? {\n                fields,\n                ops,\n                as\n              }\n            : {})\n        }\n      ]\n    };\n  }\n\n  private assembleFacetHeaderData(childIndependentFieldsWithStep: ChildIndependentFieldsWithStep) {\n    const {columns} = this.model.layout;\n    const {layoutHeaders} = this.model.component;\n    const data: VgData[] = [];\n\n    const hasSharedAxis: {row?: true; column?: true} = {};\n    for (const headerChannel of HEADER_CHANNELS) {\n      for (const headerType of HEADER_TYPES) {\n        const headers = (layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType]) || [];\n        for (const header of headers) {\n          if (header.axes && header.axes.length > 0) {\n            hasSharedAxis[headerChannel] = true;\n            break;\n          }\n        }\n      }\n\n      if (hasSharedAxis[headerChannel]) {\n        const cardinality = `length(data(\"${this.facet.name}\"))`;\n\n        const stop =\n          headerChannel === 'row'\n            ? columns\n              ? {signal: `ceil(${cardinality} / ${columns})`}\n              : 1\n            : columns\n            ? {signal: `min(${cardinality}, ${columns})`}\n            : {signal: cardinality};\n\n        data.push({\n          name: `${this.facet.name}_${headerChannel}`,\n          transform: [\n            {\n              type: 'sequence',\n              start: 0,\n              stop\n            }\n          ]\n        });\n      }\n    }\n\n    const {row, column} = hasSharedAxis;\n\n    if (row || column) {\n      data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));\n    }\n\n    return data;\n  }\n\n  public assemble() {\n    const data: VgData[] = [];\n    let crossedDataName = null;\n    const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n\n    const {column, row, facet} = this;\n\n    if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n      // Need to create a cross dataset to correctly calculate cardinality\n      crossedDataName = `cross_${this.column.name}_${this.row.name}`;\n\n      const fields: string[] = [].concat(\n        childIndependentFieldsWithStep.x || [],\n        childIndependentFieldsWithStep.y || []\n      );\n      const ops = fields.map((): AggregateOp => 'distinct');\n\n      data.push({\n        name: crossedDataName,\n        source: this.data,\n        transform: [\n          {\n            type: 'aggregate',\n            groupby: this.fields,\n            fields,\n            ops\n          }\n        ]\n      });\n    }\n\n    for (const channel of [COLUMN, ROW]) {\n      if (this[channel]) {\n        data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));\n      }\n    }\n\n    if (facet) {\n      const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);\n      if (facetData) {\n        data.push(...facetData);\n      }\n    }\n\n    return data;\n  }\n}\n"]}