{"version":3,"file":"common.js","sourceRoot":"","sources":["../../../../src/compile/header/common.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,QAAQ,EAAE,eAAe,EAAC,MAAM,YAAY,CAAC;AAGrD;;GAEG;AACH,MAAM,UAAU,gBAAgB,CAAC,OAAqB,EAAE,MAAc;IACpE,IAAI,QAAQ,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE,MAAM,CAAC,EAAE;QACvC,OAAO,QAAQ,CAAC;KACjB;SAAM,IAAI,QAAQ,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,MAAM,CAAC,EAAE;QAC9C,OAAO,KAAK,CAAC;KACd;IACD,OAAO,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC;AAC9C,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,IAAO,EACP,aAAoC,EACpC,MAAc,EACd,OAAqB;IAErB,MAAM,oBAAoB,GACxB,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;IAEzG,OAAO,eAAe,CACpB,aAAa,IAAI,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAC9E,oBAAoB,CAAC,IAAI,CAAC,EAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CACpB,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,UAA4B,EAC5B,aAAoC,EACpC,MAAc,EACd,OAAqB;IAErB,MAAM,KAAK,GAAG,EAAE,CAAC;IACjB,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;QAC7B,MAAM,KAAK,GAAG,iBAAiB,CAAC,IAAI,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACtE,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;SACrB;KACF;IACD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import {Orient} from 'vega';\nimport {FacetChannel} from '../../channel';\nimport {Config} from '../../config';\nimport {Header} from '../../header';\nimport {FacetFieldDef} from '../../spec/facet';\nimport {contains, getFirstDefined} from '../../util';\nimport {HeaderChannel} from './component';\n\n/**\n * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n */\nexport function getHeaderChannel(channel: FacetChannel, orient: Orient): HeaderChannel {\n  if (contains(['top', 'bottom'], orient)) {\n    return 'column';\n  } else if (contains(['left', 'right'], orient)) {\n    return 'row';\n  }\n  return channel === 'row' ? 'row' : 'column';\n}\n\nexport function getHeaderProperty<P extends keyof Header>(\n  prop: P,\n  facetFieldDef: FacetFieldDef<string>,\n  config: Config,\n  channel: FacetChannel\n): Header[P] {\n  const headerSpecificConfig =\n    channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n\n  return getFirstDefined(\n    facetFieldDef && facetFieldDef.header ? facetFieldDef.header[prop] : undefined,\n    headerSpecificConfig[prop],\n    config.header[prop]\n  );\n}\n\nexport function getHeaderProperties(\n  properties: (keyof Header)[],\n  facetFieldDef: FacetFieldDef<string>,\n  config: Config,\n  channel: FacetChannel\n): Header {\n  const props = {};\n  for (const prop of properties) {\n    const value = getHeaderProperty(prop, facetFieldDef, config, channel);\n    if (value !== undefined) {\n      props[prop] = value;\n    }\n  }\n  return props;\n}\n"]}