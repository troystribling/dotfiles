{"version":3,"file":"assemble.js","sourceRoot":"","sources":["../../../../src/compile/scale/assemble.ts"],"names":[],"mappings":"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","sourcesContent":["import {Channel, ScaleChannel} from '../../channel';\nimport {keys} from '../../util';\nimport {isVgRangeStep, VgRange, VgScale} from '../../vega.schema';\nimport {isConcatModel, isLayerModel, isRepeatModel, Model} from '../model';\nimport {isRawSelectionDomain} from '../selection';\nimport {assembleSelectionScaleDomain} from '../selection/assemble';\nimport {assembleDomain} from './domain';\n\nexport function assembleScales(model: Model): VgScale[] {\n  if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n    // For concat / layer / repeat, include scales of children too\n    return model.children.reduce((scales, child) => {\n      return scales.concat(assembleScales(child));\n    }, assembleScalesForModel(model));\n  } else {\n    // For facet, child scales would not be included in the parent's scope.\n    // For unit, there is no child.\n    return assembleScalesForModel(model);\n  }\n}\n\nexport function assembleScalesForModel(model: Model): VgScale[] {\n  return keys(model.component.scales).reduce(\n    (scales: VgScale[], channel: ScaleChannel) => {\n      const scaleComponent = model.component.scales[channel];\n      if (scaleComponent.merged) {\n        // Skipped merged scales\n        return scales;\n      }\n\n      const scale = scaleComponent.combine();\n\n      // need to separate const and non const object destruction\n      let {domainRaw} = scale;\n      const {name, type, domains: _d, domainRaw: _dr, range: _r, ...otherScaleProps} = scale;\n\n      const range = assembleScaleRange(scale.range, name, channel);\n\n      // As scale parsing occurs before selection parsing, a temporary signal\n      // is used for domainRaw. Here, we detect if this temporary signal\n      // is set, and replace it with the correct domainRaw signal.\n      // For more information, see isRawSelectionDomain in selection.ts.\n      if (domainRaw && isRawSelectionDomain(domainRaw)) {\n        domainRaw = assembleSelectionScaleDomain(model, domainRaw);\n      }\n\n      const domain = assembleDomain(model, channel);\n\n      scales.push({\n        name,\n        type,\n        ...(domain ? {domain} : {}),\n        ...(domainRaw ? {domainRaw} : {}),\n        range: range,\n        ...otherScaleProps\n      });\n\n      return scales;\n    },\n    [] as VgScale[]\n  );\n}\n\nexport function assembleScaleRange(scaleRange: VgRange, scaleName: string, channel: Channel): VgRange {\n  // add signals to x/y range\n  if (channel === 'x' || channel === 'y') {\n    if (isVgRangeStep(scaleRange)) {\n      // For x/y range step, use a signal created in layout assemble instead of a constant range step.\n      return {\n        step: {signal: scaleName + '_step'}\n      };\n    }\n  }\n  return scaleRange;\n}\n"]}