{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/compile/selection/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,WAAW,EAAC,MAAM,WAAW,CAAC;AACtC,OAAO,EAAC,cAAc,EAAC,MAAM,eAAe,CAAC;AAC7C,OAAO,EAEL,YAAY,EAKb,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAC,mBAAmB,EAAO,MAAM,YAAY,CAAC;AAGrD,OAAO,EAAC,YAAY,EAAQ,MAAM,UAAU,CAAC;AAE7C,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,OAAO,MAAM,MAAM,UAAU,CAAC;AAG9B,MAAM,CAAC,MAAM,KAAK,GAAG,QAAQ,CAAC;AAC9B,MAAM,CAAC,MAAM,KAAK,GAAG,QAAQ,CAAC;AAC9B,MAAM,CAAC,MAAM,MAAM,GAAG,SAAS,CAAC;AAChC,MAAM,CAAC,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;AACrD,MAAM,CAAC,MAAM,oBAAoB,GAAG,oBAAoB,CAAC;AAqCzD,MAAM,SAAS,GAA4B,EAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAC,CAAC;AAErE,MAAM,UAAU,gBAAgB,CAC9B,KAAY,EACZ,EAAyE;IAEzE,MAAM,UAAU,GAAG,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC;IAC7C,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;QAC7B,IAAI,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;YAC7B,EAAE,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;SAC9B;KACF;AACH,CAAC;AAED,SAAS,aAAa,CAAC,KAAY;IACjC,IAAI,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IAC1B,OAAO,MAAM,EAAE;QACb,IAAI,YAAY,CAAC,MAAM,CAAC,EAAE;YACxB,MAAM;SACP;QACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;KACxB;IAED,OAAO,MAAoB,CAAC;AAC9B,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,KAAY;IACnC,IAAI,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACnC,MAAM,UAAU,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC;IACxC,IAAI,UAAU,EAAE;QACd,MAAM,EAAC,KAAK,EAAC,GAAG,UAAU,CAAC;QAC3B,KAAK,MAAM,OAAO,IAAI,cAAc,EAAE;YACpC,IAAI,KAAK,CAAC,OAAO,CAAC,EAAE;gBAClB,IAAI,IAAI,eAAe,OAAO,SAAS,mBAAmB,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC;aACrG;SACF;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,KAAY;IAC9C,IAAI,UAAU,GAAG,KAAK,CAAC;IACvB,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;QAChC,UAAU,GAAG,UAAU,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC,CAAC;IAC7F,CAAC,CAAC,CAAC;IACH,OAAO,UAAU,CAAC;AACpB,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,SAAoB;IACvD,OAAO,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AACzD,CAAC","sourcesContent":["import {Binding, NewSignal, SignalRef} from 'vega';\nimport {stringValue} from 'vega-util';\nimport {FACET_CHANNELS} from '../../channel';\nimport {\n  BrushConfig,\n  SELECTION_ID,\n  SelectionInit,\n  SelectionInitInterval,\n  SelectionResolution,\n  SelectionType\n} from '../../selection';\nimport {accessPathWithDatum, Dict} from '../../util';\nimport {EventStream} from '../../vega.schema';\nimport {FacetModel} from '../facet';\nimport {isFacetModel, Model} from '../model';\nimport {UnitModel} from '../unit';\nimport interval from './interval';\nimport multi from './multi';\nimport single from './single';\nimport {SelectionProjection, SelectionProjectionComponent} from './transforms/project';\n\nexport const STORE = '_store';\nexport const TUPLE = '_tuple';\nexport const MODIFY = '_modify';\nexport const SELECTION_DOMAIN = '_selection_domain_';\nexport const VL_SELECTION_RESOLVE = 'vlSelectionResolve';\n\nexport interface SelectionComponent<T extends SelectionType = SelectionType> {\n  name: string;\n  type: T;\n\n  // Use conditional typing (https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html)\n  // so we have stricter type of init (as the type of init depends on selection type)\n  init?: (T extends 'interval'\n    ? SelectionInitInterval\n    : T extends 'single'\n    ? SelectionInit\n    : SelectionInit | SelectionInit[])[]; // multi\n  events: EventStream;\n  // predicate?: string;\n  bind?: 'scales' | Binding | Dict<Binding>;\n  resolve: SelectionResolution;\n  empty: 'all' | 'none';\n  mark?: BrushConfig;\n\n  // Transforms\n  project?: SelectionProjectionComponent;\n  scales?: SelectionProjection[];\n  toggle?: any;\n  translate?: any;\n  zoom?: any;\n  nearest?: any;\n  clear?: any;\n}\n\nexport interface SelectionCompiler<T extends SelectionType = SelectionType> {\n  signals: (model: UnitModel, selCmpt: SelectionComponent<T>) => NewSignal[];\n  topLevelSignals?: (model: Model, selCmpt: SelectionComponent<T>, signals: NewSignal[]) => NewSignal[];\n  modifyExpr: (model: UnitModel, selCmpt: SelectionComponent<T>) => string;\n  marks?: (model: UnitModel, selCmpt: SelectionComponent<T>, marks: any[]) => any[];\n}\n\nconst compilers: Dict<SelectionCompiler> = {single, multi, interval};\n\nexport function forEachSelection(\n  model: Model,\n  cb: (selCmpt: SelectionComponent, selCompiler: SelectionCompiler) => void\n) {\n  const selections = model.component.selection;\n  for (const name in selections) {\n    if (selections.hasOwnProperty(name)) {\n      const sel = selections[name];\n      cb(sel, compilers[sel.type]);\n    }\n  }\n}\n\nfunction getFacetModel(model: Model): FacetModel {\n  let parent = model.parent;\n  while (parent) {\n    if (isFacetModel(parent)) {\n      break;\n    }\n    parent = parent.parent;\n  }\n\n  return parent as FacetModel;\n}\n\nexport function unitName(model: Model) {\n  let name = stringValue(model.name);\n  const facetModel = getFacetModel(model);\n  if (facetModel) {\n    const {facet} = facetModel;\n    for (const channel of FACET_CHANNELS) {\n      if (facet[channel]) {\n        name += ` + '__facet_${channel}_' + (${accessPathWithDatum(facetModel.vgField(channel), 'facet')})`;\n      }\n    }\n  }\n  return name;\n}\n\nexport function requiresSelectionId(model: Model) {\n  let identifier = false;\n  forEachSelection(model, selCmpt => {\n    identifier = identifier || selCmpt.project.items.some(proj => proj.field === SELECTION_ID);\n  });\n  return identifier;\n}\n\nexport function isRawSelectionDomain(domainRaw: SignalRef) {\n  return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;\n}\n"]}