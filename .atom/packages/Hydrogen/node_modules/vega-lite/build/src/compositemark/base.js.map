{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/compositemark/base.ts"],"names":[],"mappings":"AAAA,OAAO,EAAiB,WAAW,EAAC,MAAM,SAAS,CAAC;AAIpD,OAAO,EAAkB,UAAU,EAAqB,MAAM,cAAc,CAAC;AAI7E,MAAM,OAAO,uBAAuB;IAClC,YACS,IAAY,EACZ,GASiB;QAVjB,SAAI,GAAJ,IAAI,CAAQ;QACZ,QAAG,GAAH,GAAG,CASc;IACvB,CAAC;IAEG,eAAe,CAAC,IAA2B;QAChD,IAAI,UAAU,CAAC,IAAI,CAAC,EAAE;YACpB,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC;SAC7C;QACD,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["import {GenericMarkDef, getMarkType} from '../mark';\nimport {NonFacetUnitNormalizer, Normalize, NormalizerParams} from '../normalize/base';\nimport {GenericSpec} from '../spec/index';\nimport {GenericLayerSpec, NormalizedLayerSpec} from '../spec/layer';\nimport {GenericUnitSpec, isUnitSpec, NormalizedUnitSpec} from '../spec/unit';\n\nexport type CompositeMarkUnitSpec<M extends string> = GenericUnitSpec<any, M | GenericMarkDef<M>>;\n\nexport class CompositeMarkNormalizer<M extends string> implements NonFacetUnitNormalizer<CompositeMarkUnitSpec<M>> {\n  constructor(\n    public name: string,\n    public run: (\n      spec: CompositeMarkUnitSpec<M>,\n      params: NormalizerParams,\n      normalize: Normalize<\n        // Input of the normalize method\n        GenericUnitSpec<any, any> | GenericLayerSpec<any>,\n        // Output of the normalize method\n        NormalizedLayerSpec | NormalizedUnitSpec\n      >\n    ) => NormalizedLayerSpec\n  ) {}\n\n  public hasMatchingType(spec: GenericSpec<any, any>): spec is CompositeMarkUnitSpec<M> {\n    if (isUnitSpec(spec)) {\n      return getMarkType(spec.mark) === this.name;\n    }\n    return false;\n  }\n}\n"]}