{"version":3,"file":"boxplot.js","sourceRoot":"","sources":["../../../src/compositemark/boxplot.ts"],"names":[],"mappings":"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","sourcesContent":["import {Orientation} from 'vega';\nimport {isNumber, isObject} from 'vega-util';\nimport {PositionFieldDef, TextFieldDef, TextFieldDefWithCondition, TextValueDefWithCondition} from '../channeldef';\nimport {Config} from '../config';\nimport {Encoding, extractTransformsFromEncoding} from '../encoding';\nimport * as log from '../log';\nimport {isMarkDef, MarkDef} from '../mark';\nimport {NormalizerParams} from '../normalize';\nimport {GenericUnitSpec, NormalizedLayerSpec, NormalizedUnitSpec} from '../spec';\nimport {AggregatedFieldDef, CalculateTransform, JoinAggregateTransform, Transform} from '../transform';\nimport {Flag, getFirstDefined, keys} from '../util';\nimport {CompositeMarkNormalizer} from './base';\nimport {\n  compositeMarkContinuousAxis,\n  compositeMarkOrient,\n  filterTooltipWithAggregatedField,\n  GenericCompositeMarkDef,\n  getCompositeMarkTooltip,\n  makeCompositeAggregatePartFactory,\n  partLayerMixins,\n  PartsMixins\n} from './common';\n\nexport const BOXPLOT: 'boxplot' = 'boxplot';\nexport type BoxPlot = typeof BOXPLOT;\n\nexport type BoxPlotPart = 'box' | 'median' | 'outliers' | 'rule' | 'ticks';\n\nconst BOXPLOT_PART_INDEX: Flag<BoxPlotPart> = {\n  box: 1,\n  median: 1,\n  outliers: 1,\n  rule: 1,\n  ticks: 1\n};\n\nexport const BOXPLOT_PARTS = keys(BOXPLOT_PART_INDEX);\n\nexport type BoxPlotPartsMixins = PartsMixins<BoxPlotPart>;\n\nexport interface BoxPlotConfig extends BoxPlotPartsMixins {\n  /** Size of the box and median tick of a box plot */\n  size?: number;\n\n  /**\n   * The extent of the whiskers. Available options include:\n   * - `\"min-max\"`: min and max are the lower and upper whiskers respectively.\n   * - A number representing multiple of the interquartile range.  This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).\n   *\n   * __Default value:__ `1.5`.\n   */\n  extent?: 'min-max' | number;\n}\n\nexport type BoxPlotDef = GenericCompositeMarkDef<BoxPlot> &\n  BoxPlotConfig & {\n    /**\n     * Type of the mark.  For box plots, this should always be `\"boxplot\"`.\n     * [boxplot](https://vega.github.io/vega-lite/docs/boxplot.html)\n     */\n    type: BoxPlot;\n\n    /**\n     * Orientation of the box plot.  This is normally automatically determined based on types of fields on x and y channels. However, an explicit `orient` be specified when the orientation is ambiguous.\n     *\n     * __Default value:__ `\"vertical\"`.\n     */\n    orient?: Orientation;\n  };\n\nexport interface BoxPlotConfigMixins {\n  /**\n   * Box Config\n   */\n  boxplot?: BoxPlotConfig;\n}\n\nexport const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);\n\nexport function getBoxPlotType(extent: number | 'min-max') {\n  if (isNumber(extent)) {\n    return 'tukey';\n  }\n  // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`.  However, I'm not exposing this for now.\n  return extent;\n}\n\nexport function normalizeBoxPlot(\n  spec: GenericUnitSpec<Encoding<string>, BoxPlot | BoxPlotDef>,\n  {config}: NormalizerParams\n): NormalizedLayerSpec {\n  // TODO: use selection\n  const {mark, encoding: _encoding, selection, projection: _p, ...outerSpec} = spec;\n  const markDef: BoxPlotDef = isMarkDef(mark) ? mark : {type: mark};\n\n  // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n  if (selection) {\n    log.warn(log.message.selectionNotSupported('boxplot'));\n  }\n\n  const extent = markDef.extent || config.boxplot.extent;\n  const sizeValue = getFirstDefined(markDef.size, config.boxplot.size);\n  const boxPlotType = getBoxPlotType(extent);\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    groupby,\n    aggregate,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    customTooltipWithoutAggregatedField\n  } = boxParams(spec, extent, config);\n\n  const {color, size, ...encodingWithoutSizeColorAndContinuousAxis} = encodingWithoutContinuousAxis;\n\n  const makeBoxPlotPart = (sharedEncoding: Encoding<string>) => {\n    return makeCompositeAggregatePartFactory<BoxPlotPartsMixins>(\n      markDef,\n      continuousAxis,\n      continuousAxisChannelDef,\n      sharedEncoding,\n      config.boxplot\n    );\n  };\n\n  const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\n  const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\n  const makeBoxPlotMidTick = makeBoxPlotPart({...encodingWithoutSizeColorAndContinuousAxis, ...(size ? {size} : {})});\n\n  const fiveSummaryTooltipEncoding: Encoding<string> = getCompositeMarkTooltip(\n    [\n      {fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_', titlePrefix: 'Max'},\n      {fieldPrefix: 'upper_box_', titlePrefix: 'Q3'},\n      {fieldPrefix: 'mid_box_', titlePrefix: 'Median'},\n      {fieldPrefix: 'lower_box_', titlePrefix: 'Q1'},\n      {fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_', titlePrefix: 'Min'}\n    ],\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis\n  );\n\n  // ## Whisker Layers\n\n  const endTick: MarkDef = {type: 'tick', color: 'black', opacity: 1, orient: ticksOrient};\n  const whiskerTooltipEncoding: Encoding<string> =\n    boxPlotType === 'min-max'\n      ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker\n      : // for tukey / k-IQR, just show upper/lower-whisker\n        getCompositeMarkTooltip(\n          [\n            {fieldPrefix: 'upper_whisker_', titlePrefix: 'Upper Whisker'},\n            {fieldPrefix: 'lower_whisker_', titlePrefix: 'Lower Whisker'}\n          ],\n          continuousAxisChannelDef,\n          encodingWithoutContinuousAxis\n        );\n\n  const whiskerLayers = [\n    ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: 'rule',\n      positionPrefix: 'lower_whisker',\n      endPositionPrefix: 'lower_box',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'rule',\n      mark: 'rule',\n      positionPrefix: 'upper_box',\n      endPositionPrefix: 'upper_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'lower_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    }),\n    ...makeBoxPlotExtent({\n      partName: 'ticks',\n      mark: endTick,\n      positionPrefix: 'upper_whisker',\n      extraEncoding: whiskerTooltipEncoding\n    })\n  ];\n\n  // ## Box Layers\n\n  // TODO: support hiding certain mark parts\n  const boxLayers: NormalizedUnitSpec[] = [\n    ...(boxPlotType !== 'tukey' ? whiskerLayers : []),\n    ...makeBoxPlotBox({\n      partName: 'box',\n      mark: {type: 'bar', ...(sizeValue ? {size: sizeValue} : {})},\n      positionPrefix: 'lower_box',\n      endPositionPrefix: 'upper_box',\n      extraEncoding: fiveSummaryTooltipEncoding\n    }),\n    ...makeBoxPlotMidTick({\n      partName: 'median',\n      mark: {\n        type: 'tick',\n        ...(isObject(config.boxplot.median) && config.boxplot.median.color ? {color: config.boxplot.median.color} : {}),\n        ...(sizeValue ? {size: sizeValue} : {}),\n        orient: ticksOrient\n      },\n      positionPrefix: 'mid_box',\n      extraEncoding: fiveSummaryTooltipEncoding\n    })\n  ];\n\n  // ## Filtered Layers\n\n  let filteredLayersMixins: NormalizedUnitSpec | NormalizedLayerSpec;\n\n  if (boxPlotType !== 'min-max') {\n    const lowerBoxExpr = `datum[\"lower_box_${continuousAxisChannelDef.field}\"]`;\n    const upperBoxExpr = `datum[\"upper_box_${continuousAxisChannelDef.field}\"]`;\n    const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;\n    const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;\n    const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;\n    const fieldExpr = `datum[\"${continuousAxisChannelDef.field}\"]`;\n\n    const joinaggregateTransform: JoinAggregateTransform = {\n      joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),\n      groupby\n    };\n\n    let filteredWhiskerSpec: NormalizedLayerSpec = undefined;\n    if (boxPlotType === 'tukey') {\n      filteredWhiskerSpec = {\n        transform: [\n          {\n            filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`\n          },\n          {\n            aggregate: [\n              {\n                op: 'min',\n                field: continuousAxisChannelDef.field,\n                as: 'lower_whisker_' + continuousAxisChannelDef.field\n              },\n              {\n                op: 'max',\n                field: continuousAxisChannelDef.field,\n                as: 'upper_whisker_' + continuousAxisChannelDef.field\n              },\n              // preserve lower_box / upper_box\n              {\n                op: 'min',\n                field: 'lower_box_' + continuousAxisChannelDef.field,\n                as: 'lower_box_' + continuousAxisChannelDef.field\n              },\n              {\n                op: 'max',\n                field: 'upper_box_' + continuousAxisChannelDef.field,\n                as: 'upper_box_' + continuousAxisChannelDef.field\n              },\n              ...aggregate\n            ],\n            groupby\n          }\n        ],\n        layer: whiskerLayers\n      };\n    }\n\n    const {tooltip, ...encodingWithoutSizeColorContinuousAxisAndTooltip} = encodingWithoutSizeColorAndContinuousAxis;\n    const outlierLayersMixins = partLayerMixins<BoxPlotPartsMixins>(markDef, 'outliers', config.boxplot, {\n      transform: [{filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})`}],\n      mark: 'point',\n      encoding: {\n        [continuousAxis]: {\n          field: continuousAxisChannelDef.field,\n          type: continuousAxisChannelDef.type\n        },\n        ...encodingWithoutSizeColorContinuousAxisAndTooltip,\n        ...(customTooltipWithoutAggregatedField ? {tooltip: customTooltipWithoutAggregatedField} : {})\n      }\n    })[0];\n\n    if (outlierLayersMixins && filteredWhiskerSpec) {\n      filteredLayersMixins = {\n        transform: [joinaggregateTransform],\n        layer: [outlierLayersMixins, filteredWhiskerSpec]\n      };\n    } else if (outlierLayersMixins) {\n      filteredLayersMixins = outlierLayersMixins;\n      filteredLayersMixins.transform.unshift(joinaggregateTransform);\n    } else if (filteredWhiskerSpec) {\n      filteredLayersMixins = filteredWhiskerSpec;\n      filteredLayersMixins.transform.unshift(joinaggregateTransform);\n    }\n  }\n\n  if (filteredLayersMixins) {\n    // tukey box plot with outliers included\n    return {\n      ...outerSpec,\n      layer: [\n        ...(filteredLayersMixins ? [filteredLayersMixins] : []),\n        {\n          // boxplot\n          transform,\n          layer: boxLayers\n        }\n      ]\n    };\n  }\n  return {\n    ...outerSpec,\n    transform: (outerSpec.transform || []).concat(transform),\n    layer: boxLayers\n  };\n}\n\nfunction boxParamsQuartiles(continousAxisField: string): AggregatedFieldDef[] {\n  return [\n    {\n      op: 'q1',\n      field: continousAxisField,\n      as: 'lower_box_' + continousAxisField\n    },\n    {\n      op: 'q3',\n      field: continousAxisField,\n      as: 'upper_box_' + continousAxisField\n    }\n  ];\n}\n\nfunction boxParams(\n  spec: GenericUnitSpec<Encoding<string>, BoxPlot | BoxPlotDef>,\n  extent: 'min-max' | number,\n  config: Config\n): {\n  transform: Transform[];\n  groupby: string[];\n  aggregate: AggregatedFieldDef[];\n  continuousAxisChannelDef: PositionFieldDef<string>;\n  continuousAxis: 'x' | 'y';\n  encodingWithoutContinuousAxis: Encoding<string>;\n  ticksOrient: Orientation;\n  customTooltipWithoutAggregatedField:\n    | TextFieldDefWithCondition<string>\n    | TextValueDefWithCondition<string>\n    | TextFieldDef<string>[];\n} {\n  const orient = compositeMarkOrient(spec, BOXPLOT);\n  const {continuousAxisChannelDef, continuousAxis} = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\n  const continuousFieldName: string = continuousAxisChannelDef.field;\n\n  const boxPlotType = getBoxPlotType(extent);\n\n  const boxplotSpecificAggregate: AggregatedFieldDef[] = [\n    ...boxParamsQuartiles(continuousFieldName),\n    {\n      op: 'median',\n      field: continuousFieldName,\n      as: 'mid_box_' + continuousFieldName\n    },\n    {\n      op: 'min',\n      field: continuousFieldName,\n      as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName\n    },\n    {\n      op: 'max',\n      field: continuousFieldName,\n      as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName\n    }\n  ];\n\n  const postAggregateCalculates: CalculateTransform[] =\n    boxPlotType === 'min-max' || boxPlotType === 'tukey'\n      ? []\n      : [\n          // This is for the  original k-IQR, which we do not expose\n          {\n            calculate: `datum[\"upper_box_${continuousFieldName}\"] - datum[\"lower_box_${continuousFieldName}\"]`,\n            as: 'iqr_' + continuousFieldName\n          },\n          {\n            calculate: `min(datum[\"upper_box_${continuousFieldName}\"] + datum[\"iqr_${continuousFieldName}\"] * ${extent}, datum[\"max_${continuousFieldName}\"])`,\n            as: 'upper_whisker_' + continuousFieldName\n          },\n          {\n            calculate: `max(datum[\"lower_box_${continuousFieldName}\"] - datum[\"iqr_${continuousFieldName}\"] * ${extent}, datum[\"min_${continuousFieldName}\"])`,\n            as: 'lower_whisker_' + continuousFieldName\n          }\n        ];\n\n  const {[continuousAxis]: oldContinuousAxisChannelDef, ...oldEncodingWithoutContinuousAxis} = spec.encoding;\n  const {customTooltipWithoutAggregatedField, filteredEncoding} = filterTooltipWithAggregatedField(\n    oldEncodingWithoutContinuousAxis\n  );\n\n  const {bins, timeUnits, aggregate, groupby, encoding: encodingWithoutContinuousAxis} = extractTransformsFromEncoding(\n    filteredEncoding,\n    config\n  );\n\n  const ticksOrient: Orientation = orient === 'vertical' ? 'horizontal' : 'vertical';\n\n  return {\n    transform: [\n      ...bins,\n      ...timeUnits,\n      {\n        aggregate: [...aggregate, ...boxplotSpecificAggregate],\n        groupby\n      },\n      ...postAggregateCalculates\n    ],\n    groupby,\n    aggregate,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    ticksOrient,\n    customTooltipWithoutAggregatedField\n  };\n}\n"]}