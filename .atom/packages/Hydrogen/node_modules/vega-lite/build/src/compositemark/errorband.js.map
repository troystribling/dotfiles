{"version":3,"file":"errorband.js","sourceRoot":"","sources":["../../../src/compositemark/errorband.ts"],"names":[],"mappings":"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","sourcesContent":["import {Orientation} from 'vega';\nimport {Field} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport * as log from '../log';\nimport {MarkDef} from '../mark';\nimport {NormalizerParams} from '../normalize/index';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {Flag, keys} from '../util';\nimport {Interpolate} from '../vega.schema';\nimport {CompositeMarkNormalizer} from './base';\nimport {GenericCompositeMarkDef, makeCompositeAggregatePartFactory, PartsMixins} from './common';\nimport {ErrorBarCenter, ErrorBarExtent, errorBarParams, ErrorEncoding} from './errorbar';\n\nexport type ErrorBandUnitSpec<\n  EE = {} // extra encoding parameter (for faceted composite unit spec)\n> = GenericUnitSpec<ErrorEncoding<Field> & EE, ErrorBand | ErrorBandDef>;\n\nexport const ERRORBAND: 'errorband' = 'errorband';\nexport type ErrorBand = typeof ERRORBAND;\n\nexport type ErrorBandPart = 'band' | 'borders';\n\nconst ERRORBAND_PART_INDEX: Flag<ErrorBandPart> = {\n  band: 1,\n  borders: 1\n};\n\nexport const ERRORBAND_PARTS = keys(ERRORBAND_PART_INDEX);\n\nexport type ErrorBandPartsMixins = PartsMixins<ErrorBandPart>;\n\nexport interface ErrorBandConfig extends ErrorBandPartsMixins {\n  /**\n   * The center of the error band. Available options include:\n   * - `\"mean\"`: the mean of the data points.\n   * - `\"median\"`: the median of the data points.\n   *\n   * __Default value:__ `\"mean\"`.\n   * @hide\n   */\n\n  // center is not needed right now but will be added back to the schema if future features require it.\n  center?: ErrorBarCenter;\n\n  /**\n   * The extent of the band. Available options include:\n   * - `\"ci\"`: Extend the band to the confidence interval of the mean.\n   * - `\"stderr\"`: The size of band are set to the value of standard error, extending from the mean.\n   * - `\"stdev\"`: The size of band are set to the value of standard deviation, extending from the mean.\n   * - `\"iqr\"`: Extend the band to the q1 and q3.\n   *\n   * __Default value:__ `\"stderr\"`.\n   */\n  extent?: ErrorBarExtent;\n\n  /**\n   * The line interpolation method for the error band. One of the following:\n   * - `\"linear\"`: piecewise linear segments, as in a polyline.\n   * - `\"linear-closed\"`: close the linear segments to form a polygon.\n   * - `\"step\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.\n   * - `\"step-before\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.\n   * - `\"step-after\"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.\n   * - `\"basis\"`: a B-spline, with control point duplication on the ends.\n   * - `\"basis-open\"`: an open B-spline; may not intersect the start or end.\n   * - `\"basis-closed\"`: a closed B-spline, as in a loop.\n   * - `\"cardinal\"`: a Cardinal spline, with control point duplication on the ends.\n   * - `\"cardinal-open\"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n   * - `\"cardinal-closed\"`: a closed Cardinal spline, as in a loop.\n   * - `\"bundle\"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n   * - `\"monotone\"`: cubic interpolation that preserves monotonicity in y.\n   */\n  interpolate?: Interpolate;\n\n  /**\n   * The tension parameter for the interpolation type of the error band.\n   * @minimum 0\n   * @maximum 1\n   */\n  tension?: number;\n}\n\nexport type ErrorBandDef = GenericCompositeMarkDef<ErrorBand> &\n  ErrorBandConfig & {\n    /**\n     * Orientation of the error band. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined.\n     */\n    orient?: Orientation;\n  };\n\nexport interface ErrorBandConfigMixins {\n  /**\n   * ErrorBand Config\n   */\n  errorband?: ErrorBandConfig;\n}\n\nexport const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\n\nexport function normalizeErrorBand(\n  spec: GenericUnitSpec<Encoding<string>, ErrorBand | ErrorBandDef>,\n  {config}: NormalizerParams\n): NormalizedLayerSpec {\n  const {\n    transform,\n    continuousAxisChannelDef,\n    continuousAxis,\n    encodingWithoutContinuousAxis,\n    markDef,\n    outerSpec,\n    tooltipEncoding\n  } = errorBarParams(spec, ERRORBAND, config);\n  const errorBandDef: ErrorBandDef = markDef;\n\n  const makeErrorBandPart = makeCompositeAggregatePartFactory<ErrorBandPartsMixins>(\n    errorBandDef,\n    continuousAxis,\n    continuousAxisChannelDef,\n    encodingWithoutContinuousAxis,\n    config.errorband\n  );\n\n  const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n\n  let bandMark: MarkDef = {type: is2D ? 'area' : 'rect'};\n  let bordersMark: MarkDef = {type: is2D ? 'line' : 'rule'};\n  const interpolate = {\n    ...(errorBandDef.interpolate ? {interpolate: errorBandDef.interpolate} : {}),\n    ...(errorBandDef.tension && errorBandDef.interpolate ? {interpolate: errorBandDef.tension} : {})\n  };\n\n  if (is2D) {\n    bandMark = {\n      ...bandMark,\n      ...interpolate\n    };\n    bordersMark = {\n      ...bordersMark,\n      ...interpolate\n    };\n  } else if (errorBandDef.interpolate) {\n    log.warn(log.message.errorBand1DNotSupport('interpolate'));\n  } else if (errorBandDef.tension) {\n    log.warn(log.message.errorBand1DNotSupport('tension'));\n  }\n\n  return {\n    ...outerSpec,\n    transform,\n    layer: [\n      ...makeErrorBandPart({\n        partName: 'band',\n        mark: bandMark,\n        positionPrefix: 'lower',\n        endPositionPrefix: 'upper',\n        extraEncoding: tooltipEncoding\n      }),\n      ...makeErrorBandPart({\n        partName: 'borders',\n        mark: bordersMark,\n        positionPrefix: 'lower',\n        extraEncoding: tooltipEncoding\n      }),\n      ...makeErrorBandPart({\n        partName: 'borders',\n        mark: bordersMark,\n        positionPrefix: 'upper',\n        extraEncoding: tooltipEncoding\n      })\n    ]\n  };\n}\n"]}