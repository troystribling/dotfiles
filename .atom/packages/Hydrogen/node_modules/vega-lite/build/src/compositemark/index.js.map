{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/compositemark/index.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,IAAI,EAAC,MAAM,SAAS,CAAC;AAC7B,OAAO,EAAC,uBAAuB,EAAC,MAAM,QAAQ,CAAC;AAC/C,OAAO,EAAC,OAAO,EAAW,aAAa,EAAmC,gBAAgB,EAAC,MAAM,WAAW,CAAC;AAC7G,OAAO,EACL,SAAS,EAET,eAAe,EAGf,kBAAkB,EACnB,MAAM,aAAa,CAAC;AACrB,OAAO,EACL,QAAQ,EAER,cAAc,EAId,iBAAiB,EAClB,MAAM,YAAY,CAAC;AAWpB;;GAEG;AACH,MAAM,qBAAqB,GAKvB,EAAE,CAAC;AAEP,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,GAA+B,EAAE,KAAe;IAChF,MAAM,UAAU,GAAG,IAAI,uBAAuB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IAC1D,qBAAqB,CAAC,IAAI,CAAC,GAAG,EAAC,UAAU,EAAE,KAAK,EAAC,CAAC;AACpD,CAAC;AAED,MAAM,UAAU,MAAM,CAAC,IAAY;IACjC,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACrC,CAAC;AAOD,MAAM,UAAU,oBAAoB;IAClC,OAAO,IAAI,CAAC,qBAAqB,CAAC,CAAC;AACrC,CAAC;AAQD,GAAG,CAAC,OAAO,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;AAC9C,GAAG,CAAC,QAAQ,EAAE,iBAAiB,EAAE,cAAc,CAAC,CAAC;AACjD,GAAG,CAAC,SAAS,EAAE,kBAAkB,EAAE,eAAe,CAAC,CAAC","sourcesContent":["import {Field} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport {NormalizerParams} from '../normalize/index';\nimport {GenericUnitSpec, NormalizedLayerSpec} from '../spec';\nimport {EncodingFacetMapping} from '../spec/facet';\nimport {keys} from '../util';\nimport {CompositeMarkNormalizer} from './base';\nimport {BOXPLOT, BoxPlot, BOXPLOT_PARTS, BoxPlotConfigMixins, BoxPlotDef, normalizeBoxPlot} from './boxplot';\nimport {\n  ERRORBAND,\n  ErrorBand,\n  ERRORBAND_PARTS,\n  ErrorBandConfigMixins,\n  ErrorBandDef,\n  normalizeErrorBand\n} from './errorband';\nimport {\n  ERRORBAR,\n  ErrorBar,\n  ERRORBAR_PARTS,\n  ErrorBarConfigMixins,\n  ErrorBarDef,\n  ErrorExtraEncoding,\n  normalizeErrorBar\n} from './errorbar';\n\nexport {BoxPlotConfig} from './boxplot';\nexport {ErrorBandConfigMixins} from './errorband';\nexport {ErrorBarConfigMixins} from './errorbar';\n\nexport type CompositeMarkNormalizerRun = (\n  spec: GenericUnitSpec<any, any>,\n  params: NormalizerParams\n) => NormalizedLayerSpec;\n\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry: {\n  [mark: string]: {\n    normalizer: CompositeMarkNormalizer<any>;\n    parts: string[];\n  };\n} = {};\n\nexport function add(mark: string, run: CompositeMarkNormalizerRun, parts: string[]) {\n  const normalizer = new CompositeMarkNormalizer(mark, run);\n  compositeMarkRegistry[mark] = {normalizer, parts};\n}\n\nexport function remove(mark: string) {\n  delete compositeMarkRegistry[mark];\n}\n\nexport type CompositeEncoding = Encoding<Field> & ErrorExtraEncoding<Field>;\nexport type FacetedCompositeEncoding = Encoding<Field> & ErrorExtraEncoding<Field> & EncodingFacetMapping<Field>;\n\nexport type CompositeMark = BoxPlot | ErrorBar | ErrorBand;\n\nexport function getAllCompositeMarks() {\n  return keys(compositeMarkRegistry);\n}\n\nexport type CompositeMarkDef = BoxPlotDef | ErrorBarDef | ErrorBandDef;\n\nexport type CompositeAggregate = BoxPlot | ErrorBar | ErrorBand;\n\nexport interface CompositeMarkConfigMixins extends BoxPlotConfigMixins, ErrorBarConfigMixins, ErrorBandConfigMixins {}\n\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n"]}