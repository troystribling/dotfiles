{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/normalize/base.ts"],"names":[],"mappings":"","sourcesContent":["import {Config} from '../config';\nimport {Encoding} from '../encoding';\nimport {Projection} from '../projection';\nimport {GenericSpec, NormalizedSpec} from '../spec/index';\nimport {GenericLayerSpec, NormalizedLayerSpec} from '../spec/layer';\nimport {GenericUnitSpec, NormalizedUnitSpec} from '../spec/unit';\n\nexport type Normalize<S extends GenericSpec<any, any>, NS extends NormalizedSpec> = (\n  spec: S,\n  params: NormalizerParams\n) => NS;\n\nexport interface ExtraNormalizer<\n  S extends GenericSpec<any, any>, // Input type\n  O extends NormalizedSpec, // Output Type\n  SN extends GenericSpec<any, any> = S // input to additional normalization\n> {\n  name: string;\n  hasMatchingType: (spec: GenericSpec<any, any>, config: Config) => spec is S;\n\n  run(spec: S, params: NormalizerParams, normalize: Normalize<SN, O>): O;\n}\n\nexport type NonFacetUnitNormalizer<S extends GenericUnitSpec<any, any>> = ExtraNormalizer<\n  S,\n  NormalizedUnitSpec | NormalizedLayerSpec,\n  GenericUnitSpec<any, any> | GenericLayerSpec<any>\n>;\n\nexport type NormalizeLayerOrUnit = Normalize<\n  GenericUnitSpec<any, any> | GenericLayerSpec<any>,\n  NormalizedUnitSpec | NormalizedLayerSpec\n>;\n\nexport interface NormalizerParams {\n  config: Config;\n  parentEncoding?: Encoding<any>;\n  parentProjection?: Projection;\n}\n"]}