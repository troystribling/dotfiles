{"version":3,"file":"pathoverlay.js","sourceRoot":"","sources":["../../../src/normalize/pathoverlay.ts"],"names":[],"mappings":"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","sourcesContent":["import {isObject} from 'vega-util';\nimport {Field} from '../channeldef';\nimport {Config} from '../config';\nimport {Encoding} from '../encoding';\nimport {AreaConfig, isMarkDef, LineConfig, Mark, MarkConfig, MarkDef} from '../mark';\nimport {GenericUnitSpec, NormalizedUnitSpec} from '../spec';\nimport {isUnitSpec} from '../spec/unit';\nimport {stack} from '../stack';\nimport {keys, omit, pick} from '../util';\nimport {NonFacetUnitNormalizer, NormalizeLayerOrUnit, NormalizerParams} from './base';\n\ntype UnitSpecWithPathOverlay = GenericUnitSpec<Encoding<string>, Mark | MarkDef<'line' | 'area' | 'rule' | 'trail'>>;\n\nfunction dropLineAndPoint(markDef: MarkDef): MarkDef | Mark {\n  const {point: _point, line: _line, ...mark} = markDef;\n\n  return keys(mark).length > 1 ? mark : mark.type;\n}\n\nfunction dropLineAndPointFromConfig(config: Config) {\n  for (const mark of ['line', 'area', 'rule', 'trail']) {\n    if (config[mark]) {\n      config = {\n        ...config,\n        [mark]: omit(config[mark], ['point', 'line'])\n      };\n    }\n  }\n  return config;\n}\n\nfunction getPointOverlay(markDef: MarkDef, markConfig: LineConfig = {}, encoding: Encoding<Field>): MarkConfig {\n  if (markDef.point === 'transparent') {\n    return {opacity: 0};\n  } else if (markDef.point) {\n    // truthy : true or object\n    return isObject(markDef.point) ? markDef.point : {};\n  } else if (markDef.point !== undefined) {\n    // false or null\n    return null;\n  } else {\n    // undefined (not disabled)\n    if (markConfig.point || encoding.shape) {\n      // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\n      return isObject(markConfig.point) ? markConfig.point : {};\n    }\n    // markDef.point is defined as falsy\n    return undefined;\n  }\n}\n\nfunction getLineOverlay(markDef: MarkDef, markConfig: AreaConfig = {}): MarkConfig {\n  if (markDef.line) {\n    // true or object\n    return markDef.line === true ? {} : markDef.line;\n  } else if (markDef.line !== undefined) {\n    // false or null\n    return null;\n  } else {\n    // undefined (not disabled)\n    if (markConfig.line) {\n      // enable line overlay if config[mark].line is truthy\n      return markConfig.line === true ? {} : markConfig.line;\n    }\n    // markDef.point is defined as falsy\n    return undefined;\n  }\n}\n\nexport class PathOverlayNormalizer implements NonFacetUnitNormalizer<UnitSpecWithPathOverlay> {\n  public name = 'path-overlay';\n  public hasMatchingType(spec: GenericUnitSpec<any, Mark | MarkDef>, config: Config): spec is UnitSpecWithPathOverlay {\n    if (isUnitSpec(spec)) {\n      const {mark, encoding} = spec;\n      const markDef = isMarkDef(mark) ? mark : {type: mark};\n      switch (markDef.type) {\n        case 'line':\n        case 'rule':\n        case 'trail':\n          return !!getPointOverlay(markDef, config[markDef.type], encoding);\n        case 'area':\n          return (\n            // false / null are also included as we want to remove the properties\n            !!getPointOverlay(markDef, config[markDef.type], encoding) ||\n            !!getLineOverlay(markDef, config[markDef.type])\n          );\n      }\n    }\n    return false;\n  }\n  public run(spec: UnitSpecWithPathOverlay, params: NormalizerParams, normalize: NormalizeLayerOrUnit) {\n    const {config} = params;\n    const {selection, projection, encoding, mark, ...outerSpec} = spec;\n    const markDef: MarkDef = isMarkDef(mark) ? mark : {type: mark};\n\n    const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\n    const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\n\n    const layer: NormalizedUnitSpec[] = [\n      {\n        ...(selection ? {selection} : {}),\n        // Do not include point / line overlay in the normalize spec\n        mark: dropLineAndPoint({\n          ...markDef,\n          // make area mark translucent by default\n          // TODO: extract this 0.7 to be shared with default opacity for point/tick/...\n          ...(markDef.type === 'area' ? {opacity: 0.7} : {})\n        }),\n        // drop shape from encoding as this might be used to trigger point overlay\n        encoding: omit(encoding, ['shape'])\n      }\n    ];\n\n    // FIXME: determine rules for applying selections.\n\n    // Need to copy stack config to overlayed layer\n    const stackProps = stack(markDef, encoding, config ? config.stack : undefined);\n\n    let overlayEncoding = encoding;\n    if (stackProps) {\n      const {fieldChannel: stackFieldChannel, offset} = stackProps;\n      overlayEncoding = {\n        ...encoding,\n        [stackFieldChannel]: {\n          ...encoding[stackFieldChannel],\n          ...(offset ? {stack: offset} : {})\n        }\n      };\n    }\n\n    if (lineOverlay) {\n      layer.push({\n        ...(projection ? {projection} : {}),\n        mark: {\n          type: 'line',\n          ...pick(markDef, ['clip', 'interpolate', 'tension', 'tooltip']),\n          ...lineOverlay\n        },\n        encoding: overlayEncoding\n      });\n    }\n    if (pointOverlay) {\n      layer.push({\n        ...(projection ? {projection} : {}),\n        mark: {\n          type: 'point',\n          opacity: 1,\n          filled: true,\n          ...pick(markDef, ['clip', 'tooltip']),\n          ...pointOverlay\n        },\n        encoding: overlayEncoding\n      });\n    }\n\n    return normalize(\n      {\n        ...outerSpec,\n        layer\n      },\n      {\n        ...params,\n        config: dropLineAndPointFromConfig(config)\n      }\n    );\n  }\n}\n"]}