{"version":3,"file":"selection.js","sourceRoot":"","sources":["../../src/selection.ts"],"names":[],"mappings":"AAMA,MAAM,CAAC,MAAM,YAAY,GAAG,SAAS,CAAC;AA2OtC,MAAM,UAAU,mBAAmB,CAAC,CAAe;IACjD,OAAO,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC;AAC/B,CAAC;AA4BD,MAAM,CAAC,MAAM,aAAa,GAAoB;IAC5C,MAAM,EAAE;QACN,EAAE,EAAE,OAAO;QACX,MAAM,EAAE,CAAC,YAAY,CAAC;QACtB,OAAO,EAAE,QAAQ;QACjB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,UAAU;KAClB;IACD,KAAK,EAAE;QACL,EAAE,EAAE,OAAO;QACX,MAAM,EAAE,CAAC,YAAY,CAAC;QACtB,MAAM,EAAE,gBAAgB;QACxB,OAAO,EAAE,QAAQ;QACjB,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,UAAU;KAClB;IACD,QAAQ,EAAE;QACR,EAAE,EAAE,iDAAiD;QACrD,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;QACrB,SAAS,EAAE,iDAAiD;QAC5D,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAC;QACzD,OAAO,EAAE,QAAQ;QACjB,KAAK,EAAE,UAAU;KAClB;CACF,CAAC","sourcesContent":["import {Binding, Color} from 'vega';\nimport {SingleDefUnitChannel} from './channel';\nimport {FieldName} from './channeldef';\nimport {DateTime} from './datetime';\nimport {EventStream} from './vega.schema';\n\nexport const SELECTION_ID = '_vgsid_';\nexport type SelectionType = 'single' | 'multi' | 'interval';\nexport type SelectionResolution = 'global' | 'union' | 'intersect';\n\nexport type SelectionInit = boolean | number | string | DateTime;\nexport type SelectionInitInterval = [boolean, boolean] | [number, number] | [string, string] | [DateTime, DateTime];\n\nexport interface SelectionInitMapping {\n  [key: string]: SelectionInit;\n}\nexport interface SelectionInitIntervalMapping {\n  [key: string]: SelectionInitInterval;\n}\n\nexport interface BaseSelectionConfig {\n  /**\n   * Clears the selection, emptying it of all values. Can be an\n   * [EventStream](https://vega.github.io/vega/docs/event-streams/) or `false` to disable.\n   *\n   * __Default value:__ `dblclick`.\n   *\n   * __See also:__ [`clear`](https://vega.github.io/vega-lite/docs/clear.html) documentation.\n   */\n  clear?: EventStream | boolean;\n\n  /**\n   * A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.\n   * For interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters).\n   */\n  on?: EventStream;\n  /**\n   * With layered and multi-view displays, a strategy that determines how\n   * selections' data queries are resolved when applied in a filter transform,\n   * conditional encoding rule, or scale domain.\n   *\n   * __See also:__ [`resolve`](https://vega.github.io/vega-lite/docs/selection-resolve.html) documentation.\n   */\n  resolve?: SelectionResolution;\n\n  // TODO(https://github.com/vega/vega-lite/issues/2596).\n  // predicate?: string;\n  // domain?: SelectionDomain;\n\n  /**\n   * An array of encoding channels. The corresponding data field values\n   * must match for a data tuple to fall within the selection.\n   *\n   * __See also:__ [`encodings`](https://vega.github.io/vega-lite/docs/project.html) documentation.\n   */\n  encodings?: SingleDefUnitChannel[];\n\n  /**\n   * An array of field names whose values must match for a data tuple to\n   * fall within the selection.\n   *\n   * __See also:__ [`fields`](https://vega.github.io/vega-lite/docs/project.html) documentation.\n   */\n  fields?: FieldName[];\n\n  /**\n   * By default, `all` data values are considered to lie within an empty selection.\n   * When set to `none`, empty selections contain no data values.\n   */\n  empty?: 'all' | 'none';\n}\n\nexport interface SingleSelectionConfig extends BaseSelectionConfig {\n  /**\n   * Establish a two-way binding between a single selection and input elements\n   * (also known as dynamic query widgets). A binding takes the form of\n   * Vega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind)\n   * or can be a mapping between projected field/encodings and binding definitions.\n   *\n   * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.\n   */\n  bind?: Binding | {[key: string]: Binding};\n\n  /**\n   * When true, an invisible voronoi diagram is computed to accelerate discrete\n   * selection. The data value _nearest_ the mouse cursor is added to the selection.\n   *\n   * __See also:__ [`nearest`](https://vega.github.io/vega-lite/docs/nearest.html) documentation.\n   */\n  nearest?: boolean;\n\n  /**\n   * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and initial values.\n   *\n   * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.\n   */\n  init?: SelectionInitMapping;\n}\n\nexport interface MultiSelectionConfig extends BaseSelectionConfig {\n  /**\n   * Controls whether data values should be toggled or only ever inserted into\n   * multi selections. Can be `true`, `false` (for insertion only), or a\n   * [Vega expression](https://vega.github.io/vega/docs/expressions/).\n   *\n   * __Default value:__ `true`, which corresponds to `event.shiftKey` (i.e.,\n   * data values are toggled when a user interacts with the shift-key pressed).\n   *\n   * __See also:__ [`toggle`](https://vega.github.io/vega-lite/docs/toggle.html) documentation.\n   */\n  toggle?: string | boolean;\n\n  /**\n   * When true, an invisible voronoi diagram is computed to accelerate discrete\n   * selection. The data value _nearest_ the mouse cursor is added to the selection.\n   *\n   * __See also:__ [`nearest`](https://vega.github.io/vega-lite/docs/nearest.html) documentation.\n   */\n  nearest?: boolean;\n\n  /**\n   * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and an initial\n   * value (or array of values).\n   *\n   * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.\n   */\n  init?: SelectionInitMapping | SelectionInitMapping[];\n}\n\nexport interface BrushConfig {\n  /**\n   * The fill color of the interval mark.\n   *\n   * __Default value:__ `#333333`\n   *\n   */\n  fill?: Color;\n  /**\n   * The fill opacity of the interval mark (a value between 0 and 1).\n   *\n   * __Default value:__ `0.125`\n   */\n  fillOpacity?: number;\n  /**\n   * The stroke color of the interval mark.\n   *\n   * __Default value:__ `#ffffff`\n   */\n  stroke?: Color;\n  /**\n   * The stroke opacity of the interval mark (a value between 0 and 1).\n   */\n  strokeOpacity?: number;\n  /**\n   * The stroke width of the interval mark.\n   */\n  strokeWidth?: number;\n  /**\n   * An array of alternating stroke and space lengths,\n   * for creating dashed or dotted lines.\n   */\n  strokeDash?: number[];\n  /**\n   * The offset (in pixels) with which to begin drawing the stroke dash array.\n   */\n  strokeDashOffset?: number;\n}\n\nexport interface IntervalSelectionConfig extends BaseSelectionConfig {\n  /**\n   * When truthy, allows a user to interactively move an interval selection\n   * back-and-forth. Can be `true`, `false` (to disable panning), or a\n   * [Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)\n   * which must include a start and end event to trigger continuous panning.\n   *\n   * __Default value:__ `true`, which corresponds to\n   * `[mousedown, window:mouseup] > window:mousemove!` which corresponds to\n   * clicks and dragging within an interval selection to reposition it.\n   *\n   * __See also:__ [`translate`](https://vega.github.io/vega-lite/docs/translate.html) documentation.\n   */\n  translate?: string | boolean;\n\n  /**\n   * When truthy, allows a user to interactively resize an interval selection.\n   * Can be `true`, `false` (to disable zooming), or a [Vega event stream\n   * definition](https://vega.github.io/vega/docs/event-streams/). Currently,\n   * only `wheel` events are supported.\n   *\n   * __Default value:__ `true`, which corresponds to `wheel!`.\n   *\n   * __See also:__ [`zoom`](https://vega.github.io/vega-lite/docs/zoom.html) documentation.\n   */\n  zoom?: string | boolean;\n\n  /**\n   * Establishes a two-way binding between the interval selection and the scales\n   * used within the same view. This allows a user to interactively pan and\n   * zoom the view.\n   *\n   * __See also:__ [`bind`](https://vega.github.io/vega-lite/docs/bind.html) documentation.\n   */\n  bind?: 'scales';\n\n  /**\n   * An interval selection also adds a rectangle mark to depict the\n   * extents of the interval. The `mark` property can be used to customize the\n   * appearance of the mark.\n   *\n   * __See also:__ [`mark`](https://vega.github.io/vega-lite/docs/selection-mark.html) documentation.\n   */\n  mark?: BrushConfig;\n\n  /**\n   * Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and arrays of\n   * initial values.\n   *\n   * __See also:__ [`init`](https://vega.github.io/vega-lite/docs/init.html) documentation.\n   */\n  init?: SelectionInitIntervalMapping;\n}\n\nexport interface BaseSelectionDef<T extends 'single' | 'multi' | 'interval'> {\n  /**\n   * Determines the default event processing and data query for the selection. Vega-Lite currently supports three selection types:\n   *\n   * - `single` -- to select a single discrete data value on `click`.\n   * - `multi` -- to select multiple discrete data value; the first value is selected on `click` and additional values toggled on shift-`click`.\n   * - `interval` -- to select a continuous range of data values on `drag`.\n   */\n  type: T;\n}\n\nexport interface SingleSelection extends BaseSelectionDef<'single'>, SingleSelectionConfig {}\n\nexport interface MultiSelection extends BaseSelectionDef<'multi'>, MultiSelectionConfig {}\n\nexport interface IntervalSelection extends BaseSelectionDef<'interval'>, IntervalSelectionConfig {}\n\nexport type SelectionDef = SingleSelection | MultiSelection | IntervalSelection;\n\nexport function isIntervalSelection(s: SelectionDef): s is IntervalSelection {\n  return s.type === 'interval';\n}\n\nexport interface SelectionConfig {\n  /**\n   * The default definition for a [`single`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\n   *  for a single selection definition (except `type`) may be specified here.\n   *\n   * For instance, setting `single` to `{\"on\": \"dblclick\"}` populates single selections on double-click by default.\n   */\n  single?: SingleSelectionConfig;\n  /**\n   * The default definition for a [`multi`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\n   * for a multi selection definition (except `type`) may be specified here.\n   *\n   * For instance, setting `multi` to `{\"toggle\": \"event.altKey\"}` adds additional values to\n   * multi selections when clicking with the alt-key pressed by default.\n   */\n  multi?: MultiSelectionConfig;\n  /**\n   * The default definition for an [`interval`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\n   * for an interval selection definition (except `type`) may be specified here.\n   *\n   * For instance, setting `interval` to `{\"translate\": false}` disables the ability to move\n   * interval selections by default.\n   */\n  interval?: IntervalSelectionConfig;\n}\n\nexport const defaultConfig: SelectionConfig = {\n  single: {\n    on: 'click',\n    fields: [SELECTION_ID],\n    resolve: 'global',\n    empty: 'all',\n    clear: 'dblclick'\n  },\n  multi: {\n    on: 'click',\n    fields: [SELECTION_ID],\n    toggle: 'event.shiftKey',\n    resolve: 'global',\n    empty: 'all',\n    clear: 'dblclick'\n  },\n  interval: {\n    on: '[mousedown, window:mouseup] > window:mousemove!',\n    encodings: ['x', 'y'],\n    translate: '[mousedown, window:mouseup] > window:mousemove!',\n    zoom: 'wheel!',\n    mark: {fill: '#333', fillOpacity: 0.125, stroke: 'white'},\n    resolve: 'global',\n    clear: 'dblclick'\n  }\n};\n"]}