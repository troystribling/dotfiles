{"version":3,"file":"transformextract.js","sourceRoot":"","sources":["../../src/transformextract.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,6BAA6B,EAAC,MAAM,YAAY,CAAC;AAEzD,OAAO,EAAC,UAAU,EAAC,MAAM,YAAY,CAAC;AAGtC,MAAM,sBAAuB,SAAQ,UAAuD;IACnF,OAAO,CAAC,IAA+B,EAAE,EAAC,MAAM,EAAmB;QACxE,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,MAAM,EAAC,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,aAAa,EAAC,GAAG,IAAI,CAAC;YAC/D,MAAM,EAAC,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,EAAC,GAAG,6BAA6B,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;YAE3G,MAAM,SAAS,GAAG;gBAChB,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;gBACvC,GAAG,IAAI;gBACP,GAAG,SAAS;gBACZ,GAAG,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAC,SAAS,EAAE,OAAO,EAAC,CAAC,CAAC;aACrD,CAAC;YAEF,yBACK,IAAI,EACJ,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAC,SAAS,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAC5C,QAAQ,IACR;SACH;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CACF;AAED,MAAM,SAAS,GAAG,IAAI,sBAAsB,EAAE,CAAC;AAE/C;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAAC,IAAoB,EAAE,MAAc;IACpE,OAAO,SAAS,CAAC,GAAG,CAAC,IAAI,EAAE,EAAC,MAAM,EAAC,CAAC,CAAC;AACvC,CAAC","sourcesContent":["import {Config} from './config';\nimport {extractTransformsFromEncoding} from './encoding';\nimport {NormalizedSpec} from './spec';\nimport {SpecMapper} from './spec/map';\nimport {GenericUnitSpec} from './spec/unit';\n\nclass TransformExtractMapper extends SpecMapper<{config: Config}, GenericUnitSpec<any, any>> {\n  public mapUnit(spec: GenericUnitSpec<any, any>, {config}: {config: Config}) {\n    if (spec.encoding) {\n      const {encoding: oldEncoding, transform: oldTransforms} = spec;\n      const {bins, timeUnits, aggregate, groupby, encoding} = extractTransformsFromEncoding(oldEncoding, config);\n\n      const transform = [\n        ...(oldTransforms ? oldTransforms : []),\n        ...bins,\n        ...timeUnits,\n        ...(!aggregate.length ? [] : [{aggregate, groupby}])\n      ];\n\n      return {\n        ...spec,\n        ...(transform.length > 0 ? {transform} : {}),\n        encoding\n      };\n    } else {\n      return spec;\n    }\n  }\n}\n\nconst extractor = new TransformExtractMapper();\n\n/**\n * Modifies spec extracting transformations from encoding and moving them to the transforms array\n */\nexport function extractTransforms(spec: NormalizedSpec, config: Config): NormalizedSpec {\n  return extractor.map(spec, {config});\n}\n"]}