/// <reference path="../typings/datalib.d.ts" />
export { keys, extend, duplicate, isArray, vals, truncate, toMap, isObject, isString, isNumber, isBoolean } from 'datalib/src/util';
export declare function pick(obj: any, props: string[]): {};
export declare function range(start: number, stop?: number, step?: number): Array<number>;
export declare function omit(obj: any, props: string[]): any;
export declare function hash(a: any): string;
export declare function contains<T>(array: Array<T>, item: T): boolean;
export declare function without<T>(array: Array<T>, excludedItems: Array<T>): T[];
export declare function union<T>(array: Array<T>, other: Array<T>): T[];
export declare function forEach(obj: any, f: (a, d, k, o) => any, thisArg?: any): void;
export declare function reduce(obj: any, f: (a, i, d, k, o) => any, init: any, thisArg?: any): any;
export declare function map(obj: any, f: (a, d, k, o) => any, thisArg?: any): any;
export declare function some<T>(arr: Array<T>, f: (d: T, k?, i?) => boolean): boolean;
export declare function every<T>(arr: Array<T>, f: (d: T, k?, i?) => boolean): boolean;
export declare function flatten(arrays: any[]): any;
export declare function mergeDeep(dest: any, ...src: any[]): any;
export declare function unique<T>(values: T[], f?: (item: T) => string): any[];
export declare function warning(message: any): void;
export declare function error(message: any): void;
export interface Dict<T> {
    [key: string]: T;
}
export declare type StringSet = Dict<boolean>;
export declare function differ<T>(dict: Dict<T>, other: Dict<T>): boolean;
