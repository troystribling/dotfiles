@import "ui-variables";
@import "syntax-variables";

.terminal-pane {
  background-color: @pane-item-background-color;

  // The 'fit' extension that resizes the terminal character grid
  // based on the window dimensions makes this odd. Empirically,
  // padding applied to .terminal is subtracted on all sides by 'fit'
  // when calculating how many rows and columns to create, but does
  // not affect (?) the top-left placement of the rectangle, while
  // padding applied to .terminal-pane affects the top-left placement
  // of terminal text, but 'fit' ignores this when determining rows
  // and columns, so bottom and right here have no effect. Keeping the
  // 'padding' value in sync between .terminal-pane and .terminal seems
  // to be the simplest way to achieve a specific padding.
  padding: @component-padding / 2;
}

html .terminal {
  background-color: transparent;
  color: @text-color;
  font-family: Menlo, courier-new, courier, monospace;
  padding: @component-padding / 2;

  // Background
  .xterm-viewport {
    background-color: transparent;
    // Elevates .xterm-viewport above .xterm-screen so that scrollbars are
    // clickable.
    z-index: 1;
  }

  // Bump z-index's for other layers appropriately, !important to override
  // xterm's CSS.
  .xterm-text-layer {
    z-index: 2 !important;
  }

  .xterm-selection-layer {
    z-index: 3 !important;
  }

  .xterm-link-layer {
    z-index: 4 !important;
  }

  .xterm-cursor-layer {
    z-index: 5 !important;
  }
}

// Set terminal-pane z-index to 0 so terminal is in its own stacking context
.terminal-pane {
  z-index: 0;
}
