'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.serializeValue = serializeValue;
exports.serializeAnnotation = serializeAnnotation;
exports.default = serialize;

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var _marked = /*#__PURE__*/_regenerator2.default.mark(iterArray),
    _marked2 = /*#__PURE__*/_regenerator2.default.mark(iterObject);

function serializeString(s) {
    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 80;

    // Full string
    // Abbreviated to $maxlen i.e. "Vincent Driess..." [truncated]
    var ser = JSON.stringify(s);
    if (ser.length <= width) {
        return ser;
    }

    // Cut off a bit
    var truncated = s.substring(0, width - 15) + '...';
    ser = JSON.stringify(truncated) + ' [truncated]';
    return ser;
}

function iterArray(arr, prefix) {
    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, _serializeAnnotation, _serializeAnnotation2, ser, ann;

    return _regenerator2.default.wrap(function iterArray$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    if (!(arr.length === 0)) {
                        _context.next = 4;
                        break;
                    }

                    _context.next = 3;
                    return '[]';

                case 3:
                    return _context.abrupt('return');

                case 4:
                    _context.next = 6;
                    return '[';

                case 6:
                    _iteratorNormalCompletion = true;
                    _didIteratorError = false;
                    _iteratorError = undefined;
                    _context.prev = 9;
                    _iterator = arr[Symbol.iterator]();

                case 11:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                        _context.next = 22;
                        break;
                    }

                    item = _step.value;
                    _serializeAnnotation = serializeAnnotation(item, prefix + _utils.INDENT), _serializeAnnotation2 = _slicedToArray(_serializeAnnotation, 2), ser = _serializeAnnotation2[0], ann = _serializeAnnotation2[1];
                    _context.next = 16;
                    return prefix + _utils.INDENT + ser + ',';

                case 16:
                    if (!(ann !== undefined)) {
                        _context.next = 19;
                        break;
                    }

                    _context.next = 19;
                    return (0, _utils.indent)(ann, prefix + _utils.INDENT);

                case 19:
                    _iteratorNormalCompletion = true;
                    _context.next = 11;
                    break;

                case 22:
                    _context.next = 28;
                    break;

                case 24:
                    _context.prev = 24;
                    _context.t0 = _context['catch'](9);
                    _didIteratorError = true;
                    _iteratorError = _context.t0;

                case 28:
                    _context.prev = 28;
                    _context.prev = 29;

                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }

                case 31:
                    _context.prev = 31;

                    if (!_didIteratorError) {
                        _context.next = 34;
                        break;
                    }

                    throw _iteratorError;

                case 34:
                    return _context.finish(31);

                case 35:
                    return _context.finish(28);

                case 36:
                    _context.next = 38;
                    return prefix + ']';

                case 38:
                case 'end':
                    return _context.stop();
            }
        }
    }, _marked, this, [[9, 24, 28, 36], [29,, 31, 35]]);
}

function serializeArray(value, hasAnnotations, prefix) {
    // TODO: Inspect 'hasAnnotations' and decide whether to inline or expand serialize
    return [].concat(_toConsumableArray(iterArray(value, prefix))).join('\n');
}

function iterObject(pairs, prefix) {
    var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, pair, key, value, kser, valPrefix, _serializeAnnotation3, _serializeAnnotation4, vser, vann;

    return _regenerator2.default.wrap(function iterObject$(_context2) {
        while (1) {
            switch (_context2.prev = _context2.next) {
                case 0:
                    if (!(pairs.length === 0)) {
                        _context2.next = 4;
                        break;
                    }

                    _context2.next = 3;
                    return '{}';

                case 3:
                    return _context2.abrupt('return');

                case 4:
                    _context2.next = 6;
                    return '{';

                case 6:
                    _iteratorNormalCompletion2 = true;
                    _didIteratorError2 = false;
                    _iteratorError2 = undefined;
                    _context2.prev = 9;
                    _iterator2 = pairs[Symbol.iterator]();

                case 11:
                    if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                        _context2.next = 26;
                        break;
                    }

                    pair = _step2.value;
                    key = pair.key;
                    value = pair.value;
                    kser = serializeValue(key);
                    valPrefix = prefix + _utils.INDENT + ' '.repeat(kser.length + 2);
                    _serializeAnnotation3 = serializeAnnotation(value, prefix + _utils.INDENT), _serializeAnnotation4 = _slicedToArray(_serializeAnnotation3, 2), vser = _serializeAnnotation4[0], vann = _serializeAnnotation4[1];
                    _context2.next = 20;
                    return prefix + _utils.INDENT + kser + ': ' + vser + ',';

                case 20:
                    if (!(vann !== undefined)) {
                        _context2.next = 23;
                        break;
                    }

                    _context2.next = 23;
                    return (0, _utils.indent)(vann, valPrefix);

                case 23:
                    _iteratorNormalCompletion2 = true;
                    _context2.next = 11;
                    break;

                case 26:
                    _context2.next = 32;
                    break;

                case 28:
                    _context2.prev = 28;
                    _context2.t0 = _context2['catch'](9);
                    _didIteratorError2 = true;
                    _iteratorError2 = _context2.t0;

                case 32:
                    _context2.prev = 32;
                    _context2.prev = 33;

                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }

                case 35:
                    _context2.prev = 35;

                    if (!_didIteratorError2) {
                        _context2.next = 38;
                        break;
                    }

                    throw _iteratorError2;

                case 38:
                    return _context2.finish(35);

                case 39:
                    return _context2.finish(32);

                case 40:
                    _context2.next = 42;
                    return prefix + '}';

                case 42:
                case 'end':
                    return _context2.stop();
            }
        }
    }, _marked2, this, [[9, 28, 32, 40], [33,, 35, 39]]);
}

function serializeObject(pairs, hasAnnotations, prefix) {
    return [].concat(_toConsumableArray(iterObject(pairs, prefix))).join('\n');
}

function serializeValue(value) {
    // istanbul ignore else
    if (typeof value === 'string') {
        return serializeString(value);
    } else if (typeof value === 'number' || typeof value === 'boolean') {
        return value.toString();
    } else if (value === null) {
        return 'null';
    } else if (value === undefined) {
        return 'undefined';
    } else if (value instanceof Date) {
        return 'new Date(' + JSON.stringify(value.toISOString()) + ')';
    } else {
        return '(unserializable)';
    }
}

function serializeAnnotation(ann) {
    var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    var serialized = void 0;
    if (ann.type === 'ArrayAnnotation') {
        serialized = serializeArray(ann.items, ann.hasAnnotation, prefix);
    } else if (ann.type === 'ObjectAnnotation') {
        serialized = serializeObject(ann.pairs, ann.hasAnnotation, prefix);
    } else {
        serialized = serializeValue(ann.value);
    }

    var annotation = ann.annotation;
    if (annotation !== undefined) {
        var sep = '^'.repeat((0, _utils.isMultiline)(serialized) ? 1 : serialized.length);
        return [serialized, [sep, annotation].join((0, _utils.isMultiline)(annotation) ? '\n' : ' ')];
    } else {
        return [serialized, undefined];
    }
}

function serialize(ann) {
    var _serializeAnnotation5 = serializeAnnotation(ann),
        _serializeAnnotation6 = _slicedToArray(_serializeAnnotation5, 2),
        serialized = _serializeAnnotation6[0],
        annotation = _serializeAnnotation6[1];

    if (annotation !== undefined) {
        return serialized + '\n' + annotation;
    } else {
        return '' + serialized;
    }
}