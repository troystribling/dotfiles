'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

exports.default = summarize;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _marked = /*#__PURE__*/_regenerator2.default.mark(iterSummarize);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Walks the annotation tree and emits the annotation's key path within the
 * object tree, and the message as a series of messages (array of strings).
 */
function iterSummarize(ann, keypath) {
    var items, index, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ann, pairs, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, pair, annotation, prefix;

    return _regenerator2.default.wrap(function iterSummarize$(_context) {
        while (1) {
            switch (_context.prev = _context.next) {
                case 0:
                    if (!(ann.type === 'ArrayAnnotation')) {
                        _context.next = 30;
                        break;
                    }

                    items = ann.items;
                    index = 0;
                    _iteratorNormalCompletion = true;
                    _didIteratorError = false;
                    _iteratorError = undefined;
                    _context.prev = 6;
                    _iterator = items[Symbol.iterator]();

                case 8:
                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                        _context.next = 14;
                        break;
                    }

                    _ann = _step.value;
                    return _context.delegateYield(iterSummarize(_ann, [].concat(_toConsumableArray(keypath), [index++])), 't0', 11);

                case 11:
                    _iteratorNormalCompletion = true;
                    _context.next = 8;
                    break;

                case 14:
                    _context.next = 20;
                    break;

                case 16:
                    _context.prev = 16;
                    _context.t1 = _context['catch'](6);
                    _didIteratorError = true;
                    _iteratorError = _context.t1;

                case 20:
                    _context.prev = 20;
                    _context.prev = 21;

                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }

                case 23:
                    _context.prev = 23;

                    if (!_didIteratorError) {
                        _context.next = 26;
                        break;
                    }

                    throw _iteratorError;

                case 26:
                    return _context.finish(23);

                case 27:
                    return _context.finish(20);

                case 28:
                    _context.next = 57;
                    break;

                case 30:
                    if (!(ann.type === 'ObjectAnnotation')) {
                        _context.next = 57;
                        break;
                    }

                    pairs = ann.pairs;
                    _iteratorNormalCompletion2 = true;
                    _didIteratorError2 = false;
                    _iteratorError2 = undefined;
                    _context.prev = 35;
                    _iterator2 = pairs[Symbol.iterator]();

                case 37:
                    if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                        _context.next = 43;
                        break;
                    }

                    pair = _step2.value;
                    return _context.delegateYield(iterSummarize(pair.value, [].concat(_toConsumableArray(keypath), [pair.key])), 't2', 40);

                case 40:
                    _iteratorNormalCompletion2 = true;
                    _context.next = 37;
                    break;

                case 43:
                    _context.next = 49;
                    break;

                case 45:
                    _context.prev = 45;
                    _context.t3 = _context['catch'](35);
                    _didIteratorError2 = true;
                    _iteratorError2 = _context.t3;

                case 49:
                    _context.prev = 49;
                    _context.prev = 50;

                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }

                case 52:
                    _context.prev = 52;

                    if (!_didIteratorError2) {
                        _context.next = 55;
                        break;
                    }

                    throw _iteratorError2;

                case 55:
                    return _context.finish(52);

                case 56:
                    return _context.finish(49);

                case 57:
                    annotation = ann.annotation;

                    if (annotation) {
                        _context.next = 60;
                        break;
                    }

                    return _context.abrupt('return');

                case 60:
                    prefix = void 0;

                    if (keypath.length === 0) {
                        prefix = '';
                    } else if (keypath.length === 1) {
                        prefix = typeof keypath[0] === 'number' ? 'Value at index ' + keypath[0] + ': ' : 'Value at key ' + JSON.stringify(keypath[0]) + ': ';
                    } else {
                        prefix = 'Value at keypath ' + keypath.map(function (x) {
                            return x.toString();
                        }).join('.') + ': ';
                    }
                    _context.next = 64;
                    return '' + prefix + annotation;

                case 64:
                case 'end':
                    return _context.stop();
            }
        }
    }, _marked, this, [[6, 16, 20, 28], [21,, 23, 27], [35, 45, 49, 57], [50,, 52, 56]]);
}

/**
 * Walks the annotation tree and emits the annotation's key path within the
 * object tree, and the message as a series of messages (array of strings).
 */
function summarize(ann) {
    var keypath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    return [].concat(_toConsumableArray(iterSummarize(ann, keypath)));
}