'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mapping = mapping;

var _debrief = require('debrief');

var _lemons = require('lemons');

var _object = require('./object');

var _utils = require('./utils');

/**
 * Given an object, will decode a Map of string keys to whatever values.
 *
 * For example, given a decoder for a Person, we can verify a Person lookup
 * table structure (of type Map<string, Person>) like so:
 *
 *   mapping(person)
 *
 */
function mapping(decoder) {
    return (0, _utils.compose)(_object.pojo, function (blob) {
        var tuples = [];
        var errors = [];

        Object.keys(blob).forEach(function (key) {
            var value = blob[key];
            var result = decoder(value);
            try {
                var okValue = result.unwrap();
                if (errors.length === 0) {
                    tuples.push([key, okValue]);
                }
            } catch (e) {
                /* istanbul ignore else */
                if ((0, _debrief.isAnnotation)(e)) {
                    tuples.length = 0; // Clear the tuples array
                    errors.push([key, e]);
                } else {
                    // Otherwise, simply rethrow it
                    /* istanbul ignore next */
                    throw e;
                }
            }
        });

        if (errors.length > 0) {
            return (0, _lemons.Err)((0, _debrief.annotateFields)(blob, errors));
        } else {
            return (0, _lemons.Ok)(new Map(tuples));
        }
    });
}