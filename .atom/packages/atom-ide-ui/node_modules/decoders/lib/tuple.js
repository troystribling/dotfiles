'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.tuple2 = tuple2;

var _debrief = require('debrief');

var _lemons = require('lemons');

/**
 * Builds a Decoder that returns Ok for 2-tuples of [T1, T2], given Decoders
 * for T1 and T2.  Err otherwise.
 */
function tuple2(decoder1, decoder2) {
    return function (blobs) {
        if (!Array.isArray(blobs)) {
            return (0, _lemons.Err)((0, _debrief.annotate)(blobs, 'Must be an array'));
        }

        if (blobs.length !== 2) {
            return (0, _lemons.Err)((0, _debrief.annotate)(blobs, 'Must be a 2-tuple'));
        }

        var _blobs = _slicedToArray(blobs, 2),
            blob1 = _blobs[0],
            blob2 = _blobs[1];

        var t1 = decoder1(blob1);
        return t1.dispatch(function (value1) {
            var t2 = decoder2(blob2);
            return t2.dispatch(function (value2) {
                return (0, _lemons.Ok)([value1, value2]);
            }, function (err) {
                return (0, _lemons.Err)((0, _debrief.annotate)([blob1, err]));
            });
        }, function (err) {
            return (0, _lemons.Err)((0, _debrief.annotate)([err, blob2]));
        });
    };
}