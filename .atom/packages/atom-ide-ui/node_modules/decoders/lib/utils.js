'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDate = undefined;
exports.map = map;
exports.compose = compose;
exports.predicate = predicate;

var _debrief = require('debrief');

var _lemons = require('lemons');

/**
 * This uses duck typing to check whether this is a Date instance.  Since
 * `instanceof` checks are unreliable across stack frames (that information
 * might get lost by the JS runtime), we'll have to reside to either this
 * duck typing, or use something like:
 *
 *     Object.prototype.toString.call(date) === '[object Date]'
 *
 * But in this case, I chose the faster check.
 */
var isDate = exports.isDate = function isDate(value) {
  return !!value && typeof value.getMonth === 'function';
};

/**
 * Given a decoder T and a mapping function from T's to V's, returns a decoder
 * for V's.  This is useful to change the original input data.
 */
function map(decoder, mapper) {
  return compose(decoder, function (x) {
    return (0, _lemons.Ok)(mapper(x));
  });
}

/**
 * Compose two decoders by passing the result of the first into the second.
 * The second decoder may assume as its input type the output type of the first
 * decoder (so it's not necessary to accept the typical "any").  This is useful
 * for "narrowing down" the checks.  For example, if you want to write
 * a decoder for positive numbers, you can compose it from an existing decoder
 * for any number, and a decoder that, assuming a number, checks if it's
 * positive.  Very often combined with the predicate() helper as the second
 * argument.
 */
function compose(decoder, next) {
  return function (blob) {
    return decoder(blob).andThen(next);
  };
}

/**
 * Factory function returning a Decoder<T>, given a predicate function that
 * accepts/rejects the input of type T.
 */
function predicate(predicate, msg) {
  return function (value) {
    return predicate(value) ? (0, _lemons.Ok)(value) : (0, _lemons.Err)((0, _debrief.annotate)(value, msg));
  };
}