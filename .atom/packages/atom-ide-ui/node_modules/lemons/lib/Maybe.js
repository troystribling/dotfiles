'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//  strict

/**
 * Maybe value
 *     = Just value
 *     | Nothing
 */

var Just = 'Just';
var Nothing = 'Nothing';

// prettier-ignore

/**
 * Represents a union type that's either a legit value or an error:
 *
 *     Maybe value
 *         = Just value
 *         | Nothing
 *
 */
var Maybe = function () {

    /**
     * **Do not call this constructor directly!**  Use either `Maybe.just()` or
     * `Maybe.nothing()` to construct a new Maybe instance.
     */
    function Maybe(m) {
        _classCallCheck(this, Maybe);

        this._m = m;
    }

    /**
     * Create a new Maybe instance representing a value.
     */


    _createClass(Maybe, [{
        key: 'toString',
        value: function toString() {
            var m = this._m;
            return m.type === Just ? 'Just(' + String(m.value) + ')' : 'Nothing';
        }
    }, {
        key: 'isJust',
        value: function isJust() {
            return this._m.type === Just;
        }
    }, {
        key: 'isNothing',
        value: function isNothing() {
            return this._m.type === Nothing;
        }
    }, {
        key: 'withDefault',
        value: function withDefault(defaultValue) {
            var m = this._m;
            return m.type === Just ? m.value : defaultValue;
        }
    }, {
        key: 'value',
        value: function value() {
            var m = this._m;
            return m.type === Just ? m.value : undefined;
        }

        /**
         * Unwrap the value from this Maybe instance if this is a "Just" result.
         * Otherwise, will throw a runtime exception.
         */

    }, {
        key: 'unwrap',
        value: function unwrap() {
            var m = this._m;
            if (m.type === Just) {
                return m.value;
            } else {
                throw new Error('Cannot unwrap a Nothing');
            }
        }
    }, {
        key: 'dispatch',
        value: function dispatch(justCallback, nothingCallback) {
            var m = this._m;
            return m.type === Just ? justCallback(m.value) : nothingCallback();
        }
    }], [{
        key: 'just',
        value: function just(value) {
            return new Maybe({ type: Just, value: value });
        }

        /**
         * Create a new Maybe instance representing no value.
         */

    }, {
        key: 'nothing',
        value: function nothing() {
            return new Maybe({ type: Nothing });
        }
    }]);

    return Maybe;
}();

exports.default = Maybe;


var _Just = function _Just(value) {
    return Maybe.just(value);
};
var _Nothing = function _Nothing() {
    return Maybe.nothing();
};

// prettier-ignore
exports.Just = _Just;
exports.Nothing = _Nothing;