/* @flow */

export type ArgvOrCommandLine = string[] | string;

export type ProcessEnv = {
  +[key: string]: string;
}

export interface ITerminal {
  +process: string;
  +ptyName: string;
  +pid: number;
  write(data: string): void;
  resize(cols: number, rows: number): void;
  destroy(): void;
  kill(signal?: string): void;
  setEncoding(encoding: string): void;
  resume(): void;
  pause(): void;

  // pty.js sets the encoding, so Buffer should not be used
  once(event: 'data', listener: (chunk: string) => void): ITerminal;
  on(event: 'data', listener: (chunk: string) => void): ITerminal;
  addListener(event: 'data', listener: (chunk: string) => void): ITerminal;
  removeListener(event: 'data', listener: (chunk: string) => void): ITerminal;
  removeAllListeners(event: 'data'): ITerminal;
  listenerCount(event: 'data'): number;
  listeners(event: 'data'): Array<(chunk: string) => void>;

  once(event: 'end', listener: () => void): ITerminal;
  on(event: 'end', listener: () => void): ITerminal;
  addListener(event: 'end', listener: () => void): ITerminal;
  removeListener(event: 'end', listener: () => void): ITerminal;
  removeAllListeners(event: 'end'): ITerminal;
  listenerCount(event: 'end'): number;
  listeners(event: 'end'): Array<() => void>;

  // The current pty.js only works on unix, so we can expect signal to be defined
  once(event: 'exit',
    listener: (code: number, signal: number) => void): ITerminal;
  on(event: 'exit',
    listener: (code: number, signal: number) => void): ITerminal;
  addListener(event: 'exit',
    listener: (code: number, signal: number) => void): ITerminal;
  removeListener(event: 'exit',
    listener: (code: number, signal: number) => void): ITerminal;
  removeAllListeners(event: 'exit'): ITerminal;
  listenerCount(event: 'exit'): number;
  listeners(event: 'exit'): Array<(code: number, signal: number) => void>;

  once(event: 'close', listener: () => void): ITerminal;
  on(event: 'close', listener: () => void): ITerminal;
  addListener(event: 'close', listener: () => void): ITerminal;
  removeListener(event: 'close', listener: () => void): ITerminal;
  removeAllListeners(event: 'close'): ITerminal;
  listenerCount(event: 'close'): number;
  listeners(event: 'close'): Array<() => void>;

  once(event: 'error', listener: (err: {code?: string}) => void): ITerminal;
  on(event: 'error', listener: (err: {code?: string}) => void): ITerminal;
  addListener(event: 'error',
    listener: (err: {code?: string}) => void): ITerminal;
  removeListener(event: 'error',
    listener: (err: {code?: string}) => void): ITerminal;
  removeAllListeners(event: 'error'): ITerminal;
  listenerCount(event: 'error'): number;
  listeners(event: 'error'): Array<(err: {code?: string}) => void>;
}

export interface IPtyForkOptions {
  name?: string;
  cols?: number;
  rows?: number;
  cwd?: string;
  env?: ProcessEnv;
  uid?: number;
  gid?: number;
}
export interface IPtyOpenOptions {
  cols?: number;
  rows?: number;
}

declare export function spawn(
  file?: string,
  args?: ArgvOrCommandLine,
  opt?: IPtyForkOptions): ITerminal;
declare export function fork(
  file?: string,
  args?: ArgvOrCommandLine,
  opt?: IPtyForkOptions): ITerminal;
declare export function createTerminal(
  file?: string,
  args?: ArgvOrCommandLine,
  opt?: IPtyForkOptions): ITerminal;
declare export function open(options: IPtyOpenOptions): ITerminal;
