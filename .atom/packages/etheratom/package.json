{
  "_args": [
    [
      {
        "raw": "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
        "spec": "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
        "type": "local"
      },
      "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/apm-install-dir-1171111-39192-jj149t.xgjeb3xr"
    ]
  ],
  "_from": "../d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
  "_id": "etheratom@3.1.2",
  "_inCache": true,
  "_location": "/etheratom",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
    "spec": "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
  "_shasum": "ec8346ae545f11fa1b64e0a7732cd7581c9e3810",
  "_shrinkwrap": null,
  "_spec": "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/d-1171111-39192-19zsmzt.lalhctmx6r/package.tgz",
  "_where": "/private/var/folders/yy/_89bmmc93s19ddmj035tt75xvs915f/T/apm-install-dir-1171111-39192-jj149t.xgjeb3xr",
  "activationCommands": {
    "atom-workspace": [
      "eth-interface:activate",
      "eth-interface:toggle"
    ],
    "atom-text-editor[data-grammar~=\"solidity\"]:not([mini])": [
      "eth-interface:compile"
    ]
  },
  "activationHooks": [
    "core:loaded-shell-environment"
  ],
  "bugs": {
    "url": "https://github.com/0mkara/etheratom/issues"
  },
  "configSchema": {
    "rpcAddress": {
      "title": "Ethereum instance",
      "description": "Point to local ethereum instance",
      "type": "string",
      "default": "http://localhost:8545/",
      "order": 1
    },
    "compileOnSave": {
      "title": "Compile Solidity on Save",
      "description": "Compile solidity code each time a file is saved",
      "type": "boolean",
      "default": true,
      "order": 2
    },
    "executionEnv": {
      "title": "Environment selection",
      "description": "Choose between VM and Web3 endpoint",
      "type": "string",
      "default": "solcjs",
      "enum": [
        "solcjs",
        "web3"
      ],
      "order": 3
    }
  },
  "dependencies": {
    "atom-message-panel": "^1.2.7",
    "atom-package-deps": "^4.6.0",
    "etch": "^0.8.0",
    "etch-octicon": "^0.1.0",
    "ethereumjs-abi": "^0.6.4",
    "ethereumjs-account": "^2.0.4",
    "ethereumjs-block": "^1.5.0",
    "ethereumjs-tx": "^1.2.5",
    "ethereumjs-util": "^5.1.1",
    "ethereumjs-vm": "^2.0.2",
    "merkle-patricia-tree": "^2.1.2",
    "react": "^15.4.2",
    "react-addons-update": "^15.4.2",
    "react-dom": "^15.4.2",
    "solc": "^0.4.11",
    "web3": "^0.18.2"
  },
  "description": "Solidity compilation and Ethereum contract execution interface for hackable atom editor.",
  "devDependencies": {},
  "engines": {
    "atom": ">=1.0.0 <2.0.0"
  },
  "homepage": "https://github.com/0mkara/etheratom#readme",
  "keywords": [
    "ethereum",
    "solidity",
    "web3",
    "ethereumjs"
  ],
  "license": "MIT",
  "main": "./lib/ethereum-interface",
  "name": "etheratom",
  "optionalDependencies": {},
  "package-deps": [
    "linter-solidity",
    "atom-solidity-linter"
  ],
  "readme": "# Etheratom - compile and deploy solidity code from atom editor\n\nEtheratom is a package for hackable Atom editor. Is uses web3js to interact with an Ethereum node.\n\n![A screenshot of Etheratom package](https://cloud.githubusercontent.com/assets/13261372/20199663/2d000048-a7d2-11e6-9eb6-222200442f5c.png)\n\n# Requirements\n\nTo run and compile using Etheratom, it is now __not required to have a local ethereum node running and compilers installed__. New version adds support to solc and ethereumjs to compile and run solidity codes without running a local node.\n\n*Note: Currently only solidity compiler is supported.*\n\n[Ethereum client installation instruction](https://www.ethereum.org/cli)\n\nStart geth node using following command\n\n    geth --rpc --rpcapi=\"db,eth,net,web3,personal\" --rpcport \"8545\" --rpcaddr \"127.0.0.1\" --rpccorsdomain \"localhost\" console\n\nCheck if solidity compiler is installed\n\n    eth.getCompilers()\n\nIf solidity compiler is installed output will be similar\n\n    I0523 16:34:48.950510 common/compiler/solidity.go:114] solc, the solidity compiler commandline interface\n    Version: 0.3.0-0/Release-Linux/g++/Interpreter linked to libethereum-1.2.2-0/Release-Linux/g++/Interpreter\n\n    path: /usr/bin/solc\n    []\n\n# Installation\n\n## Install from source\n\nClone git repository\n\n    git clone https://gitlab.com/0mkara/etheratom.git\n    cd etheratom\n\nInstall as atom package\n\n    apm link .\n    apm install\n\n## Install using atom-package-manager\n\nYou need to install\n\n* [Etheratom](https://atom.io/packages/etheratom) (`apm install etheratom`)\n\n# Configuration\n\nAssuming you have a local geth client running and rpc api listening on http://127.0.0.1:8545/\n\n1. Go to package settings and set rpc address.\n\n    ![etheratom package config](https://cloud.githubusercontent.com/assets/13261372/15468216/9989115e-2100-11e6-8dd5-e02fb9459ab6.gif)\n\n2. Restart atom\n\n# Usage\n\nActivate Etheratom package `ctrl+alt+e`\n\nCompile solidity code `ctrl+alt+c`\n\nAfter deploying your code hit **Create** button to create and mine it\n\nAlso you can select between **Javascript VM** and an actual running **Ethereum node**.\n\n![New panel features](https://cloud.githubusercontent.com/assets/13261372/20199656/227e5a52-a7d2-11e6-95f5-ec7fb16b4564.png)\n\nOnce contract is mined you will see buttons with function names to call those functions\n\n# Expectations\n\nThis is aimed to provide a front-end for Ethereum node. This interacts with Ethereum node via web3js. In future this project expects to support and provide all web3js commands required specifically for compiling solidity codes and execute them.\n\n\n# Self promotion\n\nI have put my efforts to this project. I hope this package has helped my fellow ethereum developers.\nI am a MEAN stack developer. Also comfortable with ReactJS, meteor, golang. I am currently lookming for a decent paid job. If you are looking for a developer consider contacting me.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/0mkara/etheratom.git"
  },
  "scripts": {
    "postinstall": "node ./formatSolc.js"
  },
  "version": "3.1.2"
}
