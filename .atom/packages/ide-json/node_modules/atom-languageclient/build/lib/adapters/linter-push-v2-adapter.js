Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Public: Listen to diagnostics messages from the language server and publish them
// to the user by way of the Linter Push (Indie) v2 API supported by Atom IDE UI.
let LinterPushV2Adapter = class LinterPushV2Adapter {

  // Public: Create a new {LinterPushV2Adapter} that will listen for diagnostics
  // via the supplied {LanguageClientConnection}.
  //
  // * `connection` A {LanguageClientConnection} to the language server that will provide diagnostics.
  constructor(connection) {
    this._diagnosticMap = new Map();
    this._indies = new Set();

    connection.onPublishDiagnostics(this.captureDiagnostics.bind(this));
  }

  // Public: Attach this {LinterPushV2Adapter} to a given {V2IndieDelegate} registry.
  //
  // * `indie` A {V2IndieDelegate} that wants to receive messages.
  attach(indie) {
    this._indies.add(indie);
    this._diagnosticMap.forEach((value, key) => indie.setMessages(key, value));
    indie.onDidDestroy(() => {
      this._indies.delete(indie);
    });
  }

  // Public: Capture the diagnostics sent from a langguage server, convert them to the
  // Linter V2 format and forward them on to any attached {V2IndieDelegate}s.
  //
  // * `params` The {PublishDiagnosticsParams} received from the language server that should
  //            be captured and forwarded on to any attached {V2IndieDelegate}s.
  captureDiagnostics(params) {
    const path = _convert2.default.uriToPath(params.uri);
    const messages = params.diagnostics.map(d => this.diagnosticToV2Message(path, d));
    this._diagnosticMap.set(path, messages);
    this._indies.forEach(i => i.setMessages(path, messages));
  }

  // Public: Convert a single {Diagnostic} received from a language server into a single
  // {V2Message} expected by the Linter V2 API.
  //
  // * `path` A string representing the path of the file the diagnostic belongs to.
  // * `diagnostics` A {Diagnostic} object received from the language server.
  //
  // Returns a {V2Message} equivalent to the {Diagnostic} object supplied by the language server.
  diagnosticToV2Message(path, diagnostic) {
    return {
      location: {
        file: path,
        position: _convert2.default.lsRangeToAtomRange(diagnostic.range)
      },
      excerpt: diagnostic.message,
      linterName: diagnostic.source,
      severity: LinterPushV2Adapter.diagnosticSeverityToSeverity(diagnostic.severity || -1)
    };
  }

  // Public: Convert a diagnostic severity number obtained from the language server into
  // the textual equivalent for a Linter {V2Message}.
  //
  // * `severity` A number representing the severity of the diagnostic.
  //
  // Returns a string of 'error', 'warning' or 'info' depending on the severity.
  static diagnosticSeverityToSeverity(severity) {
    switch (severity) {
      case _languageclient.DiagnosticSeverity.Error:
        return 'error';
      case _languageclient.DiagnosticSeverity.Warning:
        return 'warning';
      case _languageclient.DiagnosticSeverity.Information:
      case _languageclient.DiagnosticSeverity.Hint:
      default:
        return 'info';
    }
  }
};
exports.default = LinterPushV2Adapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9saW50ZXItcHVzaC12Mi1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIkxpbnRlclB1c2hWMkFkYXB0ZXIiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb24iLCJfZGlhZ25vc3RpY01hcCIsIk1hcCIsIl9pbmRpZXMiLCJTZXQiLCJvblB1Ymxpc2hEaWFnbm9zdGljcyIsImNhcHR1cmVEaWFnbm9zdGljcyIsImJpbmQiLCJhdHRhY2giLCJpbmRpZSIsImFkZCIsImZvckVhY2giLCJ2YWx1ZSIsImtleSIsInNldE1lc3NhZ2VzIiwib25EaWREZXN0cm95IiwiZGVsZXRlIiwicGFyYW1zIiwicGF0aCIsInVyaVRvUGF0aCIsInVyaSIsIm1lc3NhZ2VzIiwiZGlhZ25vc3RpY3MiLCJtYXAiLCJkIiwiZGlhZ25vc3RpY1RvVjJNZXNzYWdlIiwic2V0IiwiaSIsImRpYWdub3N0aWMiLCJsb2NhdGlvbiIsImZpbGUiLCJwb3NpdGlvbiIsImxzUmFuZ2VUb0F0b21SYW5nZSIsInJhbmdlIiwiZXhjZXJwdCIsIm1lc3NhZ2UiLCJsaW50ZXJOYW1lIiwic291cmNlIiwic2V2ZXJpdHkiLCJkaWFnbm9zdGljU2V2ZXJpdHlUb1NldmVyaXR5IiwiRXJyb3IiLCJXYXJuaW5nIiwiSW5mb3JtYXRpb24iLCJIaW50Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBOztBQU1BOzs7Ozs7QUFFQTtBQUNBO0lBQ3FCQSxtQixHQUFOLE1BQU1BLG1CQUFOLENBQTBCOztBQUl2QztBQUNBO0FBQ0E7QUFDQTtBQUNBQyxjQUFZQyxVQUFaLEVBQWtEO0FBQUEsU0FQbERDLGNBT2tELEdBUEssSUFBSUMsR0FBSixFQU9MO0FBQUEsU0FObERDLE9BTWtELEdBTlgsSUFBSUMsR0FBSixFQU1XOztBQUNoREosZUFBV0ssb0JBQVgsQ0FBZ0MsS0FBS0Msa0JBQUwsQ0FBd0JDLElBQXhCLENBQTZCLElBQTdCLENBQWhDO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0FDLFNBQU9DLEtBQVAsRUFBNEM7QUFDMUMsU0FBS04sT0FBTCxDQUFhTyxHQUFiLENBQWlCRCxLQUFqQjtBQUNBLFNBQUtSLGNBQUwsQ0FBb0JVLE9BQXBCLENBQTRCLENBQUNDLEtBQUQsRUFBUUMsR0FBUixLQUFnQkosTUFBTUssV0FBTixDQUFrQkQsR0FBbEIsRUFBdUJELEtBQXZCLENBQTVDO0FBQ0FILFVBQU1NLFlBQU4sQ0FBbUIsTUFBTTtBQUN2QixXQUFLWixPQUFMLENBQWFhLE1BQWIsQ0FBb0JQLEtBQXBCO0FBQ0QsS0FGRDtBQUdEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUgscUJBQW1CVyxNQUFuQixFQUEyRDtBQUN6RCxVQUFNQyxPQUFPLGtCQUFRQyxTQUFSLENBQWtCRixPQUFPRyxHQUF6QixDQUFiO0FBQ0EsVUFBTUMsV0FBV0osT0FBT0ssV0FBUCxDQUFtQkMsR0FBbkIsQ0FBdUJDLEtBQUssS0FBS0MscUJBQUwsQ0FBMkJQLElBQTNCLEVBQWlDTSxDQUFqQyxDQUE1QixDQUFqQjtBQUNBLFNBQUt2QixjQUFMLENBQW9CeUIsR0FBcEIsQ0FBd0JSLElBQXhCLEVBQThCRyxRQUE5QjtBQUNBLFNBQUtsQixPQUFMLENBQWFRLE9BQWIsQ0FBcUJnQixLQUFLQSxFQUFFYixXQUFGLENBQWNJLElBQWQsRUFBb0JHLFFBQXBCLENBQTFCO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUksd0JBQXNCUCxJQUF0QixFQUFvQ1UsVUFBcEMsRUFBOEU7QUFDNUUsV0FBTztBQUNMQyxnQkFBVTtBQUNSQyxjQUFNWixJQURFO0FBRVJhLGtCQUFVLGtCQUFRQyxrQkFBUixDQUEyQkosV0FBV0ssS0FBdEM7QUFGRixPQURMO0FBS0xDLGVBQVNOLFdBQVdPLE9BTGY7QUFNTEMsa0JBQVlSLFdBQVdTLE1BTmxCO0FBT0xDLGdCQUFVeEMsb0JBQW9CeUMsNEJBQXBCLENBQWlEWCxXQUFXVSxRQUFYLElBQXVCLENBQUMsQ0FBekU7QUFQTCxLQUFQO0FBU0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBT0MsNEJBQVAsQ0FBb0NELFFBQXBDLEVBQW9GO0FBQ2xGLFlBQVFBLFFBQVI7QUFDRSxXQUFLLG1DQUFtQkUsS0FBeEI7QUFDRSxlQUFPLE9BQVA7QUFDRixXQUFLLG1DQUFtQkMsT0FBeEI7QUFDRSxlQUFPLFNBQVA7QUFDRixXQUFLLG1DQUFtQkMsV0FBeEI7QUFDQSxXQUFLLG1DQUFtQkMsSUFBeEI7QUFDQTtBQUNFLGVBQU8sTUFBUDtBQVJKO0FBVUQ7QUF2RXNDLEM7a0JBQXBCN0MsbUIiLCJmaWxlIjoibGludGVyLXB1c2gtdjItYWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XHJcblxyXG5pbXBvcnQge1xyXG4gIERpYWdub3N0aWNTZXZlcml0eSxcclxuICBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXHJcbiAgdHlwZSBEaWFnbm9zdGljLFxyXG4gIHR5cGUgUHVibGlzaERpYWdub3N0aWNzUGFyYW1zLFxyXG59IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcclxuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XHJcblxyXG4vLyBQdWJsaWM6IExpc3RlbiB0byBkaWFnbm9zdGljcyBtZXNzYWdlcyBmcm9tIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgYW5kIHB1Ymxpc2ggdGhlbVxyXG4vLyB0byB0aGUgdXNlciBieSB3YXkgb2YgdGhlIExpbnRlciBQdXNoIChJbmRpZSkgdjIgQVBJIHN1cHBvcnRlZCBieSBBdG9tIElERSBVSS5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGludGVyUHVzaFYyQWRhcHRlciB7XHJcbiAgX2RpYWdub3N0aWNNYXA6IE1hcDxzdHJpbmcsIEFycmF5PGxpbnRlciRWMk1lc3NhZ2U+PiA9IG5ldyBNYXAoKTtcclxuICBfaW5kaWVzOiBTZXQ8bGludGVyJFYySW5kaWVEZWxlZ2F0ZT4gPSBuZXcgU2V0KCk7XHJcblxyXG4gIC8vIFB1YmxpYzogQ3JlYXRlIGEgbmV3IHtMaW50ZXJQdXNoVjJBZGFwdGVyfSB0aGF0IHdpbGwgbGlzdGVuIGZvciBkaWFnbm9zdGljc1xyXG4gIC8vIHZpYSB0aGUgc3VwcGxpZWQge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbn0uXHJcbiAgLy9cclxuICAvLyAqIGBjb25uZWN0aW9uYCBBIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCB3aWxsIHByb3ZpZGUgZGlhZ25vc3RpY3MuXHJcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uKSB7XHJcbiAgICBjb25uZWN0aW9uLm9uUHVibGlzaERpYWdub3N0aWNzKHRoaXMuY2FwdHVyZURpYWdub3N0aWNzLmJpbmQodGhpcykpO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBBdHRhY2ggdGhpcyB7TGludGVyUHVzaFYyQWRhcHRlcn0gdG8gYSBnaXZlbiB7VjJJbmRpZURlbGVnYXRlfSByZWdpc3RyeS5cclxuICAvL1xyXG4gIC8vICogYGluZGllYCBBIHtWMkluZGllRGVsZWdhdGV9IHRoYXQgd2FudHMgdG8gcmVjZWl2ZSBtZXNzYWdlcy5cclxuICBhdHRhY2goaW5kaWU6IGxpbnRlciRWMkluZGllRGVsZWdhdGUpOiB2b2lkIHtcclxuICAgIHRoaXMuX2luZGllcy5hZGQoaW5kaWUpO1xyXG4gICAgdGhpcy5fZGlhZ25vc3RpY01hcC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiBpbmRpZS5zZXRNZXNzYWdlcyhrZXksIHZhbHVlKSk7XHJcbiAgICBpbmRpZS5vbkRpZERlc3Ryb3koKCkgPT4ge1xyXG4gICAgICB0aGlzLl9pbmRpZXMuZGVsZXRlKGluZGllKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBDYXB0dXJlIHRoZSBkaWFnbm9zdGljcyBzZW50IGZyb20gYSBsYW5nZ3VhZ2Ugc2VydmVyLCBjb252ZXJ0IHRoZW0gdG8gdGhlXHJcbiAgLy8gTGludGVyIFYyIGZvcm1hdCBhbmQgZm9yd2FyZCB0aGVtIG9uIHRvIGFueSBhdHRhY2hlZCB7VjJJbmRpZURlbGVnYXRlfXMuXHJcbiAgLy9cclxuICAvLyAqIGBwYXJhbXNgIFRoZSB7UHVibGlzaERpYWdub3N0aWNzUGFyYW1zfSByZWNlaXZlZCBmcm9tIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCBzaG91bGRcclxuICAvLyAgICAgICAgICAgIGJlIGNhcHR1cmVkIGFuZCBmb3J3YXJkZWQgb24gdG8gYW55IGF0dGFjaGVkIHtWMkluZGllRGVsZWdhdGV9cy5cclxuICBjYXB0dXJlRGlhZ25vc3RpY3MocGFyYW1zOiBQdWJsaXNoRGlhZ25vc3RpY3NQYXJhbXMpOiB2b2lkIHtcclxuICAgIGNvbnN0IHBhdGggPSBDb252ZXJ0LnVyaVRvUGF0aChwYXJhbXMudXJpKTtcclxuICAgIGNvbnN0IG1lc3NhZ2VzID0gcGFyYW1zLmRpYWdub3N0aWNzLm1hcChkID0+IHRoaXMuZGlhZ25vc3RpY1RvVjJNZXNzYWdlKHBhdGgsIGQpKTtcclxuICAgIHRoaXMuX2RpYWdub3N0aWNNYXAuc2V0KHBhdGgsIG1lc3NhZ2VzKTtcclxuICAgIHRoaXMuX2luZGllcy5mb3JFYWNoKGkgPT4gaS5zZXRNZXNzYWdlcyhwYXRoLCBtZXNzYWdlcykpO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBDb252ZXJ0IGEgc2luZ2xlIHtEaWFnbm9zdGljfSByZWNlaXZlZCBmcm9tIGEgbGFuZ3VhZ2Ugc2VydmVyIGludG8gYSBzaW5nbGVcclxuICAvLyB7VjJNZXNzYWdlfSBleHBlY3RlZCBieSB0aGUgTGludGVyIFYyIEFQSS5cclxuICAvL1xyXG4gIC8vICogYHBhdGhgIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcGF0aCBvZiB0aGUgZmlsZSB0aGUgZGlhZ25vc3RpYyBiZWxvbmdzIHRvLlxyXG4gIC8vICogYGRpYWdub3N0aWNzYCBBIHtEaWFnbm9zdGljfSBvYmplY3QgcmVjZWl2ZWQgZnJvbSB0aGUgbGFuZ3VhZ2Ugc2VydmVyLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIHtWMk1lc3NhZ2V9IGVxdWl2YWxlbnQgdG8gdGhlIHtEaWFnbm9zdGljfSBvYmplY3Qgc3VwcGxpZWQgYnkgdGhlIGxhbmd1YWdlIHNlcnZlci5cclxuICBkaWFnbm9zdGljVG9WMk1lc3NhZ2UocGF0aDogc3RyaW5nLCBkaWFnbm9zdGljOiBEaWFnbm9zdGljKTogbGludGVyJFYyTWVzc2FnZSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBsb2NhdGlvbjoge1xyXG4gICAgICAgIGZpbGU6IHBhdGgsXHJcbiAgICAgICAgcG9zaXRpb246IENvbnZlcnQubHNSYW5nZVRvQXRvbVJhbmdlKGRpYWdub3N0aWMucmFuZ2UpLFxyXG4gICAgICB9LFxyXG4gICAgICBleGNlcnB0OiBkaWFnbm9zdGljLm1lc3NhZ2UsXHJcbiAgICAgIGxpbnRlck5hbWU6IGRpYWdub3N0aWMuc291cmNlLFxyXG4gICAgICBzZXZlcml0eTogTGludGVyUHVzaFYyQWRhcHRlci5kaWFnbm9zdGljU2V2ZXJpdHlUb1NldmVyaXR5KGRpYWdub3N0aWMuc2V2ZXJpdHkgfHwgLTEpLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogQ29udmVydCBhIGRpYWdub3N0aWMgc2V2ZXJpdHkgbnVtYmVyIG9idGFpbmVkIGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlciBpbnRvXHJcbiAgLy8gdGhlIHRleHR1YWwgZXF1aXZhbGVudCBmb3IgYSBMaW50ZXIge1YyTWVzc2FnZX0uXHJcbiAgLy9cclxuICAvLyAqIGBzZXZlcml0eWAgQSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBzZXZlcml0eSBvZiB0aGUgZGlhZ25vc3RpYy5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSBzdHJpbmcgb2YgJ2Vycm9yJywgJ3dhcm5pbmcnIG9yICdpbmZvJyBkZXBlbmRpbmcgb24gdGhlIHNldmVyaXR5LlxyXG4gIHN0YXRpYyBkaWFnbm9zdGljU2V2ZXJpdHlUb1NldmVyaXR5KHNldmVyaXR5OiBudW1iZXIpOiAnZXJyb3InIHwgJ3dhcm5pbmcnIHwgJ2luZm8nIHtcclxuICAgIHN3aXRjaCAoc2V2ZXJpdHkpIHtcclxuICAgICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3I6XHJcbiAgICAgICAgcmV0dXJuICdlcnJvcic7XHJcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmc6XHJcbiAgICAgICAgcmV0dXJuICd3YXJuaW5nJztcclxuICAgICAgY2FzZSBEaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb246XHJcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkhpbnQ6XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuICdpbmZvJztcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19