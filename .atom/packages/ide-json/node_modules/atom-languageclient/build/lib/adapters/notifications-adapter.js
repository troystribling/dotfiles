Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

// Public: Adapts Atom's user notifications to those of the language server protocol.
let NotificationsAdapter = class NotificationsAdapter {
  // Public: Attach to a {LanguageClientConnection} to recieve events indicating
  // when user notifications should be displayed.
  static attach(connection, name) {
    connection.onShowMessage(m => NotificationsAdapter.onShowMessage(m, name));
    connection.onShowMessageRequest(m => NotificationsAdapter.onShowMessageRequest(m, name));
  }

  static onShowMessageRequest(params, name) {
    return new Promise((resolve, reject) => {
      const options = {
        dismissable: true,
        detail: name
      };
      if (params.actions) {
        options.buttons = params.actions.map(a => ({
          text: a.title,
          onDidClick: () => {
            resolve(a);
            if (notification != null) {
              notification.dismiss();
            }
          }
        }));
      }

      const notification = addNotificationForMessage(params.type, params.message, {
        dismissable: true,
        detail: name
      });

      if (notification != null) {
        notification.onDidDismiss(() => {
          resolve(null);
        });
      }
    });
  }

  // Public: Show a notification message using the Atom notifications API.
  //
  // * `params` The {ShowMessageParams} received from the language server
  //            indicating the details of the notification to be displayed.
  // * `name`   The name of the language server so the user can identify the
  //            context of the message.
  static onShowMessage(params, name) {
    addNotificationForMessage(params.type, params.message, {
      dismissable: true,
      detail: name
    });
  }

  // Public: Convert a {MessageActionItem} from the language server into an
  // equivalent {NotificationButton} within Atom.
  //
  // * `actionItem` The {MessageActionItem} to be converted.
  //
  // Returns a {NotificationButton} equivalent to the {MessageActionItem} given.
  static actionItemToNotificationButton(actionItem) {
    return {
      text: actionItem.title
    };
  }
};
exports.default = NotificationsAdapter;


function addNotificationForMessage(messageType, message, options) {
  switch (messageType) {
    case _languageclient.MessageType.Error:
      return atom.notifications.addError(message, options);
    case _languageclient.MessageType.Warning:
      return atom.notifications.addWarning(message, options);
    case _languageclient.MessageType.Log:
      // console.log(params.message);
      return null;
    case _languageclient.MessageType.Info:
    default:
      return atom.notifications.addInfo(message, options);
  }
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9ub3RpZmljYXRpb25zLWFkYXB0ZXIuanMiXSwibmFtZXMiOlsiTm90aWZpY2F0aW9uc0FkYXB0ZXIiLCJhdHRhY2giLCJjb25uZWN0aW9uIiwibmFtZSIsIm9uU2hvd01lc3NhZ2UiLCJtIiwib25TaG93TWVzc2FnZVJlcXVlc3QiLCJwYXJhbXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9wdGlvbnMiLCJkaXNtaXNzYWJsZSIsImRldGFpbCIsImFjdGlvbnMiLCJidXR0b25zIiwibWFwIiwiYSIsInRleHQiLCJ0aXRsZSIsIm9uRGlkQ2xpY2siLCJub3RpZmljYXRpb24iLCJkaXNtaXNzIiwiYWRkTm90aWZpY2F0aW9uRm9yTWVzc2FnZSIsInR5cGUiLCJtZXNzYWdlIiwib25EaWREaXNtaXNzIiwiYWN0aW9uSXRlbVRvTm90aWZpY2F0aW9uQnV0dG9uIiwiYWN0aW9uSXRlbSIsIm1lc3NhZ2VUeXBlIiwiRXJyb3IiLCJhdG9tIiwibm90aWZpY2F0aW9ucyIsImFkZEVycm9yIiwiV2FybmluZyIsImFkZFdhcm5pbmciLCJMb2ciLCJJbmZvIiwiYWRkSW5mbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7QUFRQTtJQUNxQkEsb0IsR0FBTixNQUFNQSxvQkFBTixDQUEyQjtBQUN4QztBQUNBO0FBQ0EsU0FBT0MsTUFBUCxDQUFjQyxVQUFkLEVBQW9EQyxJQUFwRCxFQUFrRTtBQUNoRUQsZUFBV0UsYUFBWCxDQUF5QkMsS0FBS0wscUJBQXFCSSxhQUFyQixDQUFtQ0MsQ0FBbkMsRUFBc0NGLElBQXRDLENBQTlCO0FBQ0FELGVBQVdJLG9CQUFYLENBQWdDRCxLQUFLTCxxQkFBcUJNLG9CQUFyQixDQUEwQ0QsQ0FBMUMsRUFBNkNGLElBQTdDLENBQXJDO0FBQ0Q7O0FBRUQsU0FBT0csb0JBQVAsQ0FBNEJDLE1BQTVCLEVBQThESixJQUE5RCxFQUF5RztBQUN2RyxXQUFPLElBQUlLLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdEMsWUFBTUMsVUFBb0M7QUFDeENDLHFCQUFhLElBRDJCO0FBRXhDQyxnQkFBUVY7QUFGZ0MsT0FBMUM7QUFJQSxVQUFJSSxPQUFPTyxPQUFYLEVBQW9CO0FBQ2xCSCxnQkFBUUksT0FBUixHQUFrQlIsT0FBT08sT0FBUCxDQUFlRSxHQUFmLENBQW1CQyxNQUFNO0FBQ3pDQyxnQkFBTUQsRUFBRUUsS0FEaUM7QUFFekNDLHNCQUFZLE1BQU07QUFDaEJYLG9CQUFRUSxDQUFSO0FBQ0EsZ0JBQUlJLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QkEsMkJBQWFDLE9BQWI7QUFDRDtBQUNGO0FBUHdDLFNBQU4sQ0FBbkIsQ0FBbEI7QUFTRDs7QUFFRCxZQUFNRCxlQUFlRSwwQkFBMEJoQixPQUFPaUIsSUFBakMsRUFBdUNqQixPQUFPa0IsT0FBOUMsRUFBdUQ7QUFDMUViLHFCQUFhLElBRDZEO0FBRTFFQyxnQkFBUVY7QUFGa0UsT0FBdkQsQ0FBckI7O0FBS0EsVUFBSWtCLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QkEscUJBQWFLLFlBQWIsQ0FBMEIsTUFBTTtBQUM5QmpCLGtCQUFRLElBQVI7QUFDRCxTQUZEO0FBR0Q7QUFDRixLQTNCTSxDQUFQO0FBNEJEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU9MLGFBQVAsQ0FBcUJHLE1BQXJCLEVBQWdESixJQUFoRCxFQUFvRTtBQUNsRW9CLDhCQUEwQmhCLE9BQU9pQixJQUFqQyxFQUF1Q2pCLE9BQU9rQixPQUE5QyxFQUF1RDtBQUNyRGIsbUJBQWEsSUFEd0M7QUFFckRDLGNBQVFWO0FBRjZDLEtBQXZEO0FBSUQ7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBT3dCLDhCQUFQLENBQXNDQyxVQUF0QyxFQUE4RjtBQUM1RixXQUFPO0FBQ0xWLFlBQU1VLFdBQVdUO0FBRFosS0FBUDtBQUdEO0FBOUR1QyxDO2tCQUFyQm5CLG9COzs7QUFpRXJCLFNBQVN1Qix5QkFBVCxDQUNFTSxXQURGLEVBRUVKLE9BRkYsRUFHRWQsT0FIRixFQUlzQjtBQUNwQixVQUFRa0IsV0FBUjtBQUNFLFNBQUssNEJBQVlDLEtBQWpCO0FBQ0UsYUFBT0MsS0FBS0MsYUFBTCxDQUFtQkMsUUFBbkIsQ0FBNEJSLE9BQTVCLEVBQXFDZCxPQUFyQyxDQUFQO0FBQ0YsU0FBSyw0QkFBWXVCLE9BQWpCO0FBQ0UsYUFBT0gsS0FBS0MsYUFBTCxDQUFtQkcsVUFBbkIsQ0FBOEJWLE9BQTlCLEVBQXVDZCxPQUF2QyxDQUFQO0FBQ0YsU0FBSyw0QkFBWXlCLEdBQWpCO0FBQ0U7QUFDQSxhQUFPLElBQVA7QUFDRixTQUFLLDRCQUFZQyxJQUFqQjtBQUNBO0FBQ0UsYUFBT04sS0FBS0MsYUFBTCxDQUFtQk0sT0FBbkIsQ0FBMkJiLE9BQTNCLEVBQW9DZCxPQUFwQyxDQUFQO0FBVko7QUFZRCIsImZpbGUiOiJub3RpZmljYXRpb25zLWFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IHtcclxuICBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXHJcbiAgTWVzc2FnZVR5cGUsXHJcbiAgdHlwZSBNZXNzYWdlQWN0aW9uSXRlbSxcclxuICB0eXBlIFNob3dNZXNzYWdlUGFyYW1zLFxyXG4gIHR5cGUgU2hvd01lc3NhZ2VSZXF1ZXN0UGFyYW1zLFxyXG59IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcclxuXHJcbi8vIFB1YmxpYzogQWRhcHRzIEF0b20ncyB1c2VyIG5vdGlmaWNhdGlvbnMgdG8gdGhvc2Ugb2YgdGhlIGxhbmd1YWdlIHNlcnZlciBwcm90b2NvbC5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90aWZpY2F0aW9uc0FkYXB0ZXIge1xyXG4gIC8vIFB1YmxpYzogQXR0YWNoIHRvIGEge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbn0gdG8gcmVjaWV2ZSBldmVudHMgaW5kaWNhdGluZ1xyXG4gIC8vIHdoZW4gdXNlciBub3RpZmljYXRpb25zIHNob3VsZCBiZSBkaXNwbGF5ZWQuXHJcbiAgc3RhdGljIGF0dGFjaChjb25uZWN0aW9uOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIG5hbWU6IHN0cmluZykge1xyXG4gICAgY29ubmVjdGlvbi5vblNob3dNZXNzYWdlKG0gPT4gTm90aWZpY2F0aW9uc0FkYXB0ZXIub25TaG93TWVzc2FnZShtLCBuYW1lKSk7XHJcbiAgICBjb25uZWN0aW9uLm9uU2hvd01lc3NhZ2VSZXF1ZXN0KG0gPT4gTm90aWZpY2F0aW9uc0FkYXB0ZXIub25TaG93TWVzc2FnZVJlcXVlc3QobSwgbmFtZSkpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIG9uU2hvd01lc3NhZ2VSZXF1ZXN0KHBhcmFtczogU2hvd01lc3NhZ2VSZXF1ZXN0UGFyYW1zLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPD9NZXNzYWdlQWN0aW9uSXRlbT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3Qgb3B0aW9uczogYXRvbSROb3RpZmljYXRpb25PcHRpb25zID0ge1xyXG4gICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxyXG4gICAgICAgIGRldGFpbDogbmFtZSxcclxuICAgICAgfTtcclxuICAgICAgaWYgKHBhcmFtcy5hY3Rpb25zKSB7XHJcbiAgICAgICAgb3B0aW9ucy5idXR0b25zID0gcGFyYW1zLmFjdGlvbnMubWFwKGEgPT4gKHtcclxuICAgICAgICAgIHRleHQ6IGEudGl0bGUsXHJcbiAgICAgICAgICBvbkRpZENsaWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoYSk7XHJcbiAgICAgICAgICAgIGlmIChub3RpZmljYXRpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgIG5vdGlmaWNhdGlvbi5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBub3RpZmljYXRpb24gPSBhZGROb3RpZmljYXRpb25Gb3JNZXNzYWdlKHBhcmFtcy50eXBlLCBwYXJhbXMubWVzc2FnZSwge1xyXG4gICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxyXG4gICAgICAgIGRldGFpbDogbmFtZSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAobm90aWZpY2F0aW9uICE9IG51bGwpIHtcclxuICAgICAgICBub3RpZmljYXRpb24ub25EaWREaXNtaXNzKCgpID0+IHtcclxuICAgICAgICAgIHJlc29sdmUobnVsbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBTaG93IGEgbm90aWZpY2F0aW9uIG1lc3NhZ2UgdXNpbmcgdGhlIEF0b20gbm90aWZpY2F0aW9ucyBBUEkuXHJcbiAgLy9cclxuICAvLyAqIGBwYXJhbXNgIFRoZSB7U2hvd01lc3NhZ2VQYXJhbXN9IHJlY2VpdmVkIGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlclxyXG4gIC8vICAgICAgICAgICAgaW5kaWNhdGluZyB0aGUgZGV0YWlscyBvZiB0aGUgbm90aWZpY2F0aW9uIHRvIGJlIGRpc3BsYXllZC5cclxuICAvLyAqIGBuYW1lYCAgIFRoZSBuYW1lIG9mIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgc28gdGhlIHVzZXIgY2FuIGlkZW50aWZ5IHRoZVxyXG4gIC8vICAgICAgICAgICAgY29udGV4dCBvZiB0aGUgbWVzc2FnZS5cclxuICBzdGF0aWMgb25TaG93TWVzc2FnZShwYXJhbXM6IFNob3dNZXNzYWdlUGFyYW1zLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGFkZE5vdGlmaWNhdGlvbkZvck1lc3NhZ2UocGFyYW1zLnR5cGUsIHBhcmFtcy5tZXNzYWdlLCB7XHJcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxyXG4gICAgICBkZXRhaWw6IG5hbWUsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogQ29udmVydCBhIHtNZXNzYWdlQWN0aW9uSXRlbX0gZnJvbSB0aGUgbGFuZ3VhZ2Ugc2VydmVyIGludG8gYW5cclxuICAvLyBlcXVpdmFsZW50IHtOb3RpZmljYXRpb25CdXR0b259IHdpdGhpbiBBdG9tLlxyXG4gIC8vXHJcbiAgLy8gKiBgYWN0aW9uSXRlbWAgVGhlIHtNZXNzYWdlQWN0aW9uSXRlbX0gdG8gYmUgY29udmVydGVkLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIHtOb3RpZmljYXRpb25CdXR0b259IGVxdWl2YWxlbnQgdG8gdGhlIHtNZXNzYWdlQWN0aW9uSXRlbX0gZ2l2ZW4uXHJcbiAgc3RhdGljIGFjdGlvbkl0ZW1Ub05vdGlmaWNhdGlvbkJ1dHRvbihhY3Rpb25JdGVtOiBNZXNzYWdlQWN0aW9uSXRlbSk6IGF0b20kTm90aWZpY2F0aW9uQnV0dG9uIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRleHQ6IGFjdGlvbkl0ZW0udGl0bGUsXHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYWRkTm90aWZpY2F0aW9uRm9yTWVzc2FnZShcclxuICBtZXNzYWdlVHlwZTogbnVtYmVyLFxyXG4gIG1lc3NhZ2U6IHN0cmluZyxcclxuICBvcHRpb25zOiBhdG9tJE5vdGlmaWNhdGlvbk9wdGlvbnMsXHJcbik6ID9hdG9tJE5vdGlmaWNhdGlvbiB7XHJcbiAgc3dpdGNoIChtZXNzYWdlVHlwZSkge1xyXG4gICAgY2FzZSBNZXNzYWdlVHlwZS5FcnJvcjpcclxuICAgICAgcmV0dXJuIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihtZXNzYWdlLCBvcHRpb25zKTtcclxuICAgIGNhc2UgTWVzc2FnZVR5cGUuV2FybmluZzpcclxuICAgICAgcmV0dXJuIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKG1lc3NhZ2UsIG9wdGlvbnMpO1xyXG4gICAgY2FzZSBNZXNzYWdlVHlwZS5Mb2c6XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKHBhcmFtcy5tZXNzYWdlKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICBjYXNlIE1lc3NhZ2VUeXBlLkluZm86XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gYXRvbS5ub3RpZmljYXRpb25zLmFkZEluZm8obWVzc2FnZSwgb3B0aW9ucyk7XHJcbiAgfVxyXG59XHJcbiJdfQ==