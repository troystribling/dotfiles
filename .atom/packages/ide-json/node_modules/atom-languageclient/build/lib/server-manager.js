Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ServerManager = undefined;

require('./logger');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _languageclient = require('./languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _atom = require('atom');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Manages the language server lifecycles and their associated objects necessary
// for adapting them to Atom and Atom IDE UI.


// The necessary elements for a server that has started or is starting.
let ServerManager = exports.ServerManager = class ServerManager {

  constructor(startServer, logger, startForEditor) {
    this._activeServers = [];
    this._startingServerPromises = new Map();
    this._editorToServer = new Map();
    this._normalizedProjectPaths = [];

    this._startServer = startServer;
    this._logger = logger;
    this._startForEditor = startForEditor;
    this.updateNormalizedProjectPaths();
    this._disposable = new _atom.CompositeDisposable();
    this._disposable.add(atom.project.onDidChangePaths(this.projectPathsChanged.bind(this)));
    this._disposable.add(atom.textEditors.observe(this.observeTextEditors.bind(this)));
  }

  dispose() {
    this.stopAllServers();
    this._disposable.dispose();
  }

  observeTextEditors(editor) {
    // Track grammar changes for opened editors
    const listener = editor.observeGrammar(grammar => this._handleGrammarChange(editor));
    this._disposable.add(editor.onDidDestroy(() => listener.dispose()));
    // Try to see if editor can have LS connected to it
    this._handleTextEditor(editor);
  }

  _handleTextEditor(editor) {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (!_this._editorToServer.has(editor)) {
        // editor hasn't been processed yet, so process it by allocating LS for it if necessary
        const server = yield _this.getServer(editor, { shouldStart: true });
        if (server != null) {
          // There LS for the editor (either started now and already running)
          _this._editorToServer.set(editor, server);
          _this._disposable.add(editor.onDidDestroy(function () {
            _this._editorToServer.delete(editor);
            _this.stopUnusedServers();
          }));
        }
      }
    })();
  }

  _handleGrammarChange(editor) {
    if (this._startForEditor(editor)) {
      // If editor is interesting for LS process the editor further to attempt to start LS if needed
      this._handleTextEditor(editor);
    } else {
      // Editor is not supported by the LS
      const server = this._editorToServer.get(editor);
      // If LS is running for the unsupported editor then disconnect the editor from LS and shut down LS if necessary
      if (server) {
        // LS is up for unsupported server
        if (server.docSyncAdapter) {
          const syncAdapter = server.docSyncAdapter.getEditorSyncAdapter(editor);
          if (syncAdapter) {
            // Immitate editor close to disconnect LS from the editor
            syncAdapter.didDestroy();
          }
        }
        // Remove editor from the cache
        this._editorToServer.delete(editor);
        // Shut down LS if it's used by any other editor
        this.stopUnusedServers();
      }
    }
  }

  getActiveServers() {
    return this._activeServers.slice();
  }

  getServer(textEditor, { shouldStart } = { shouldStart: false }) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      const finalProjectPath = _this2.determineProjectPath(textEditor);
      if (finalProjectPath == null) {
        // Files not yet saved have no path
        return null;
      }

      const foundActiveServer = _this2._activeServers.find(function (s) {
        return finalProjectPath === s.projectPath;
      });
      if (foundActiveServer) {
        return foundActiveServer;
      }

      const startingPromise = _this2._startingServerPromises.get(finalProjectPath);
      if (startingPromise) {
        return startingPromise;
      }

      return shouldStart && _this2._startForEditor(textEditor) ? yield _this2.startServer(finalProjectPath) : null;
    })();
  }

  startServer(projectPath) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      _this3._logger.debug(`Server starting "${projectPath}"`);
      const startingPromise = _this3._startServer(projectPath);
      _this3._startingServerPromises.set(projectPath, startingPromise);
      const startedActiveServer = yield startingPromise;
      _this3._activeServers.push(startedActiveServer);
      _this3._startingServerPromises.delete(projectPath);
      _this3._logger.debug(`Server started "${projectPath}"`);
      return startedActiveServer;
    })();
  }

  stopUnusedServers() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const usedServers = new Set(_this4._editorToServer.values());
      const unusedServers = _this4._activeServers.filter(function (s) {
        return !usedServers.has(s);
      });
      if (unusedServers.length > 0) {
        _this4._logger.debug(`Stopping ${unusedServers.length} unused servers`);
        yield Promise.all(unusedServers.map(function (s) {
          return _this4.stopServer(s);
        }));
      }
    })();
  }

  stopAllServers() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      yield Promise.all(_this5._activeServers.map(function (s) {
        return _this5.stopServer(s);
      }));
    })();
  }

  stopServer(server) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      _this6._logger.debug(`Server stopping "${server.projectPath}"`);
      // Immediately remove the server to prevent further usage.
      // If we re-open the file after this point, we'll get a new server.
      const serverIndex = _this6._activeServers.indexOf(server);
      _this6._activeServers.splice(serverIndex, 1);
      server.disposable.dispose();
      yield server.connection.shutdown();
      server.process.kill();
      _this6._logger.debug(`Server stopped "${server.projectPath}"`);
    })();
  }

  determineProjectPath(textEditor) {
    const filePath = textEditor.getPath();
    if (filePath == null) {
      return null;
    }
    return this._normalizedProjectPaths.find(d => filePath.startsWith(d));
  }

  updateNormalizedProjectPaths() {
    this._normalizedProjectPaths = atom.project.getDirectories().map(d => this.normalizePath(d.getPath()));
  }

  normalizePath(projectPath) {
    return !projectPath.endsWith(_path2.default.sep) ? _path2.default.join(projectPath, _path2.default.sep) : projectPath;
  }

  projectPathsChanged(projectPaths) {
    const pathsSet = new Set(projectPaths.map(this.normalizePath));
    const serversToStop = this._activeServers.filter(s => !pathsSet.has(s.projectPath));
    Promise.all(serversToStop.map(s => this.stopServer(s)));
    this.updateNormalizedProjectPaths();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,