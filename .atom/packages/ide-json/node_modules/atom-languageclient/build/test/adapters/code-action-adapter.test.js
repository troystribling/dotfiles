var _atom = require('atom');

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _codeActionAdapter = require('../../lib/adapters/code-action-adapter');

var _codeActionAdapter2 = _interopRequireDefault(_codeActionAdapter);

var _linterPushV2Adapter = require('../../lib/adapters/linter-push-v2-adapter');

var _linterPushV2Adapter2 = _interopRequireDefault(_linterPushV2Adapter);

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('CodeActionAdapter', () => {
  describe('canAdapt', () => {
    it('returns true if range formatting is supported', () => {
      const result = _codeActionAdapter2.default.canAdapt({
        codeActionProvider: true
      });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false it no formatting supported', () => {
      const result = _codeActionAdapter2.default.canAdapt({});
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('getCodeActions', () => {
    it('fetches code actions from the connection', async () => {
      const connection = (0, _helpers.createSpyConnection)();
      const languageClient = new ls.LanguageClientConnection(connection);
      const testCommand = {
        command: 'testCommand',
        title: 'Test Command',
        arguments: ['a', 'b']
      };
      _sinon2.default.stub(languageClient, 'codeAction').returns(Promise.resolve([testCommand]));
      _sinon2.default.spy(languageClient, 'executeCommand');

      const linterAdapter = new _linterPushV2Adapter2.default(languageClient);
      _sinon2.default.stub(linterAdapter, 'getDiagnosticCode').returns('test code');

      const testPath = '/test.txt';
      const actions = await _codeActionAdapter2.default.getCodeActions(languageClient, { codeActionProvider: true }, linterAdapter, (0, _helpers.createFakeEditor)(testPath), new _atom.Range([1, 2], [3, 4]), [{
        filePath: testPath,
        type: 'Error',
        text: 'test message',
        range: new _atom.Range([1, 2], [3, 3]),
        providerName: 'test linter'
      }]);

      (0, _chai.expect)(languageClient.codeAction.called).to.be.true;
      const args = languageClient.codeAction.getCalls()[0].args;
      const params = args[0];
      (0, _chai.expect)(params.textDocument.uri).to.equal('file://' + testPath);
      (0, _chai.expect)(params.range).to.deep.equal({
        start: { line: 1, character: 2 },
        end: { line: 3, character: 4 }
      });
      (0, _chai.expect)(params.context.diagnostics).to.deep.equal([{
        range: {
          start: { line: 1, character: 2 },
          end: { line: 3, character: 3 }
        },
        severity: ls.DiagnosticSeverity.Error,
        code: 'test code',
        source: 'test linter',
        message: 'test message'
      }]);

      (0, _chai.expect)(actions.length).to.equal(1);
      const codeAction = actions[0];
      (0, _chai.expect)((await codeAction.getTitle())).to.equal('Test Command');
      await codeAction.apply();
      (0, _chai.expect)(languageClient.executeCommand.called).to.be.true;
      (0, _chai.expect)(languageClient.executeCommand.getCalls()[0].args).to.deep.equal([{
        command: 'testCommand',
        arguments: ['a', 'b']
      }]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,