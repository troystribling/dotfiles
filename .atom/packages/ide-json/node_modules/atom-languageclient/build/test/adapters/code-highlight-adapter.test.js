var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _atom = require('atom');

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _codeHighlightAdapter = require('../../lib/adapters/code-highlight-adapter');

var _codeHighlightAdapter2 = _interopRequireDefault(_codeHighlightAdapter);

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('CodeHighlightAdapter', () => {
  let fakeEditor;
  let connection;

  beforeEach(() => {
    connection = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    fakeEditor = (0, _helpers.createFakeEditor)();
  });

  describe('canAdapt', () => {
    it('returns true if document highlights are supported', () => {
      const result = _codeHighlightAdapter2.default.canAdapt({
        documentHighlightProvider: true
      });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false it no formatting supported', () => {
      const result = _codeHighlightAdapter2.default.canAdapt({});
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('highlight', () => {
    it('highlights some ranges', _asyncToGenerator(function* () {
      const highlightStub = _sinon2.default.stub(connection, 'documentHighlight').returns(Promise.resolve([{
        range: {
          start: { line: 0, character: 1 },
          end: { line: 0, character: 2 }
        }
      }]));
      const result = yield _codeHighlightAdapter2.default.highlight(connection, { documentHighlightProvider: true }, fakeEditor, new _atom.Point(0, 0));
      (0, _chai.expect)(highlightStub.called).to.be.true;

      (0, _assert2.default)(result != null);
      (0, _chai.expect)(result.length).to.equal(1);
      (0, _chai.expect)(result[0].isEqual(new _atom.Range([0, 1], [0, 2]))).to.be.true;
    }));

    it('throws if document highlights are not supported', _asyncToGenerator(function* () {
      const result = yield _codeHighlightAdapter2.default.highlight(connection, {}, fakeEditor, new _atom.Point(0, 0)).catch(function (err) {
        return err;
      });
      (0, _chai.expect)(result).to.be.an.instanceof(Error);
      (0, _assert2.default)(result instanceof Error);
      (0, _chai.expect)(result.message).to.equal('Must have the documentHighlight capability');
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvY29kZS1oaWdobGlnaHQtYWRhcHRlci50ZXN0LmpzIl0sIm5hbWVzIjpbImxzIiwiZGVzY3JpYmUiLCJmYWtlRWRpdG9yIiwiY29ubmVjdGlvbiIsImJlZm9yZUVhY2giLCJMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24iLCJpdCIsInJlc3VsdCIsImNhbkFkYXB0IiwiZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciIsInRvIiwiYmUiLCJ0cnVlIiwiZmFsc2UiLCJoaWdobGlnaHRTdHViIiwic3R1YiIsInJldHVybnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJhbmdlIiwic3RhcnQiLCJsaW5lIiwiY2hhcmFjdGVyIiwiZW5kIiwiaGlnaGxpZ2h0IiwiY2FsbGVkIiwibGVuZ3RoIiwiZXF1YWwiLCJpc0VxdWFsIiwiY2F0Y2giLCJlcnIiLCJhbiIsImluc3RhbmNlb2YiLCJFcnJvciIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiJBQUVBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7SUFBWUEsRTs7QUFDWjs7OztBQUNBOzs7Ozs7OztBQUVBQyxTQUFTLHNCQUFULEVBQWlDLE1BQU07QUFDckMsTUFBSUMsVUFBSjtBQUNBLE1BQUlDLFVBQUo7O0FBRUFDLGFBQVcsTUFBTTtBQUNmRCxpQkFBYSxJQUFJSCxHQUFHSyx3QkFBUCxDQUFnQyxtQ0FBaEMsQ0FBYjtBQUNBSCxpQkFBYSxnQ0FBYjtBQUNELEdBSEQ7O0FBS0FELFdBQVMsVUFBVCxFQUFxQixNQUFNO0FBQ3pCSyxPQUFHLG1EQUFILEVBQXdELE1BQU07QUFDNUQsWUFBTUMsU0FBUywrQkFBcUJDLFFBQXJCLENBQThCO0FBQzNDQyxtQ0FBMkI7QUFEZ0IsT0FBOUIsQ0FBZjtBQUdBLHdCQUFPRixNQUFQLEVBQWVHLEVBQWYsQ0FBa0JDLEVBQWxCLENBQXFCQyxJQUFyQjtBQUNELEtBTEQ7O0FBT0FOLE9BQUcsMENBQUgsRUFBK0MsTUFBTTtBQUNuRCxZQUFNQyxTQUFTLCtCQUFxQkMsUUFBckIsQ0FBOEIsRUFBOUIsQ0FBZjtBQUNBLHdCQUFPRCxNQUFQLEVBQWVHLEVBQWYsQ0FBa0JDLEVBQWxCLENBQXFCRSxLQUFyQjtBQUNELEtBSEQ7QUFJRCxHQVpEOztBQWNBWixXQUFTLFdBQVQsRUFBc0IsTUFBTTtBQUMxQkssT0FBRyx3QkFBSCxvQkFBNkIsYUFBWTtBQUN2QyxZQUFNUSxnQkFBZ0IsZ0JBQU1DLElBQU4sQ0FBV1osVUFBWCxFQUF1QixtQkFBdkIsRUFBNENhLE9BQTVDLENBQ3BCQyxRQUFRQyxPQUFSLENBQWdCLENBQ2Q7QUFDRUMsZUFBTztBQUNMQyxpQkFBTyxFQUFDQyxNQUFNLENBQVAsRUFBVUMsV0FBVyxDQUFyQixFQURGO0FBRUxDLGVBQUssRUFBQ0YsTUFBTSxDQUFQLEVBQVVDLFdBQVcsQ0FBckI7QUFGQTtBQURULE9BRGMsQ0FBaEIsQ0FEb0IsQ0FBdEI7QUFVQSxZQUFNZixTQUFTLE1BQU0sK0JBQXFCaUIsU0FBckIsQ0FDbkJyQixVQURtQixFQUVuQixFQUFDTSwyQkFBMkIsSUFBNUIsRUFGbUIsRUFHbkJQLFVBSG1CLEVBSW5CLGdCQUFVLENBQVYsRUFBYSxDQUFiLENBSm1CLENBQXJCO0FBTUEsd0JBQU9ZLGNBQWNXLE1BQXJCLEVBQTZCZixFQUE3QixDQUFnQ0MsRUFBaEMsQ0FBbUNDLElBQW5DOztBQUVBLDRCQUFVTCxVQUFVLElBQXBCO0FBQ0Esd0JBQU9BLE9BQU9tQixNQUFkLEVBQXNCaEIsRUFBdEIsQ0FBeUJpQixLQUF6QixDQUErQixDQUEvQjtBQUNBLHdCQUFPcEIsT0FBTyxDQUFQLEVBQVVxQixPQUFWLENBQWtCLGdCQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBVixFQUFrQixDQUFDLENBQUQsRUFBSSxDQUFKLENBQWxCLENBQWxCLENBQVAsRUFBcURsQixFQUFyRCxDQUF3REMsRUFBeEQsQ0FBMkRDLElBQTNEO0FBQ0QsS0F0QkQ7O0FBd0JBTixPQUFHLGlEQUFILG9CQUFzRCxhQUFZO0FBQ2hFLFlBQU1DLFNBQVMsTUFBTSwrQkFBcUJpQixTQUFyQixDQUErQnJCLFVBQS9CLEVBQTJDLEVBQTNDLEVBQStDRCxVQUEvQyxFQUEyRCxnQkFBVSxDQUFWLEVBQWEsQ0FBYixDQUEzRCxFQUE0RTJCLEtBQTVFLENBQ25CO0FBQUEsZUFBT0MsR0FBUDtBQUFBLE9BRG1CLENBQXJCO0FBR0Esd0JBQU92QixNQUFQLEVBQWVHLEVBQWYsQ0FBa0JDLEVBQWxCLENBQXFCb0IsRUFBckIsQ0FBd0JDLFVBQXhCLENBQW1DQyxLQUFuQztBQUNBLDRCQUFVMUIsa0JBQWtCMEIsS0FBNUI7QUFDQSx3QkFBTzFCLE9BQU8yQixPQUFkLEVBQXVCeEIsRUFBdkIsQ0FBMEJpQixLQUExQixDQUFnQyw0Q0FBaEM7QUFDRCxLQVBEO0FBUUQsR0FqQ0Q7QUFrQ0QsQ0F6REQiLCJmaWxlIjoiY29kZS1oaWdobGlnaHQtYWRhcHRlci50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcclxuXHJcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0IHtQb2ludCwgUmFuZ2V9IGZyb20gJ2F0b20nO1xyXG5pbXBvcnQge2V4cGVjdH0gZnJvbSAnY2hhaSc7XHJcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XHJcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCBDb2RlSGlnaGxpZ2h0QWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvY29kZS1oaWdobGlnaHQtYWRhcHRlcic7XHJcbmltcG9ydCB7Y3JlYXRlU3B5Q29ubmVjdGlvbiwgY3JlYXRlRmFrZUVkaXRvcn0gZnJvbSAnLi4vaGVscGVycy5qcyc7XHJcblxyXG5kZXNjcmliZSgnQ29kZUhpZ2hsaWdodEFkYXB0ZXInLCAoKSA9PiB7XHJcbiAgbGV0IGZha2VFZGl0b3I7XHJcbiAgbGV0IGNvbm5lY3Rpb247XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgY29ubmVjdGlvbiA9IG5ldyBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb24oY3JlYXRlU3B5Q29ubmVjdGlvbigpKTtcclxuICAgIGZha2VFZGl0b3IgPSBjcmVhdGVGYWtlRWRpdG9yKCk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdjYW5BZGFwdCcsICgpID0+IHtcclxuICAgIGl0KCdyZXR1cm5zIHRydWUgaWYgZG9jdW1lbnQgaGlnaGxpZ2h0cyBhcmUgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBDb2RlSGlnaGxpZ2h0QWRhcHRlci5jYW5BZGFwdCh7XHJcbiAgICAgICAgZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlcjogdHJ1ZSxcclxuICAgICAgfSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLnRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgncmV0dXJucyBmYWxzZSBpdCBubyBmb3JtYXR0aW5nIHN1cHBvcnRlZCcsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gQ29kZUhpZ2hsaWdodEFkYXB0ZXIuY2FuQWRhcHQoe30pO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS5mYWxzZTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnaGlnaGxpZ2h0JywgKCkgPT4ge1xyXG4gICAgaXQoJ2hpZ2hsaWdodHMgc29tZSByYW5nZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGhpZ2hsaWdodFN0dWIgPSBzaW5vbi5zdHViKGNvbm5lY3Rpb24sICdkb2N1bWVudEhpZ2hsaWdodCcpLnJldHVybnMoXHJcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgICBzdGFydDoge2xpbmU6IDAsIGNoYXJhY3RlcjogMX0sXHJcbiAgICAgICAgICAgICAgZW5kOiB7bGluZTogMCwgY2hhcmFjdGVyOiAyfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IENvZGVIaWdobGlnaHRBZGFwdGVyLmhpZ2hsaWdodChcclxuICAgICAgICBjb25uZWN0aW9uLFxyXG4gICAgICAgIHtkb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyOiB0cnVlfSxcclxuICAgICAgICBmYWtlRWRpdG9yLFxyXG4gICAgICAgIG5ldyBQb2ludCgwLCAwKSxcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KGhpZ2hsaWdodFN0dWIuY2FsbGVkKS50by5iZS50cnVlO1xyXG5cclxuICAgICAgaW52YXJpYW50KHJlc3VsdCAhPSBudWxsKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5sZW5ndGgpLnRvLmVxdWFsKDEpO1xyXG4gICAgICBleHBlY3QocmVzdWx0WzBdLmlzRXF1YWwobmV3IFJhbmdlKFswLCAxXSwgWzAsIDJdKSkpLnRvLmJlLnRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgndGhyb3dzIGlmIGRvY3VtZW50IGhpZ2hsaWdodHMgYXJlIG5vdCBzdXBwb3J0ZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IENvZGVIaWdobGlnaHRBZGFwdGVyLmhpZ2hsaWdodChjb25uZWN0aW9uLCB7fSwgZmFrZUVkaXRvciwgbmV3IFBvaW50KDAsIDApKS5jYXRjaChcclxuICAgICAgICBlcnIgPT4gZXJyLFxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS5hbi5pbnN0YW5jZW9mKEVycm9yKTtcclxuICAgICAgaW52YXJpYW50KHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5tZXNzYWdlKS50by5lcXVhbCgnTXVzdCBoYXZlIHRoZSBkb2N1bWVudEhpZ2hsaWdodCBjYXBhYmlsaXR5Jyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==