var _linterPushV2Adapter = require('../../lib/adapters/linter-push-v2-adapter');

var _linterPushV2Adapter2 = _interopRequireDefault(_linterPushV2Adapter);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _chai = require('chai');

var _atom = require('atom');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const messageUrl = 'dummy';
const messageSolutions = ['dummy'];

class CustomLinterPushV2Adapter extends _linterPushV2Adapter2.default {
  diagnosticToV2Message(path, diagnostic) {
    const message = super.diagnosticToV2Message(path, diagnostic);
    message.url = messageUrl;
    message.solutions = messageSolutions;
    return message;
  }
}

describe('CustomLinterPushV2Adapter', () => {
  describe('diagnosticToMessage', () => {
    it('converts Diagnostic and path to a linter$Message', () => {
      const filePath = '/a/b/c/d';
      const diagnostic = {
        message: 'This is a message',
        range: {
          start: { line: 1, character: 2 },
          end: { line: 3, character: 4 }
        },
        source: 'source',
        code: 'code',
        severity: ls.DiagnosticSeverity.Information,
        type: ls.DiagnosticSeverity.Information
      };

      const connection = { onPublishDiagnostics() {} };
      const adapter = new CustomLinterPushV2Adapter(connection);
      const result = adapter.diagnosticToV2Message(filePath, diagnostic);

      (0, _chai.expect)(result.excerpt).equals(diagnostic.message);
      (0, _chai.expect)(result.linterName).equals(diagnostic.source);
      (0, _chai.expect)(result.location.file).equals(filePath);
      (0, _chai.expect)(result.location.position).deep.equals(new _atom.Range(new _atom.Point(1, 2), new _atom.Point(3, 4)));
      (0, _chai.expect)(result.severity).equals('info');
      (0, _chai.expect)(result.url).equals(messageUrl);
      (0, _chai.expect)(result.solutions).deep.equals(messageSolutions);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvY3VzdG9tLWxpbnRlci1wdXNoLXYyLWFkYXB0ZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJscyIsIm1lc3NhZ2VVcmwiLCJtZXNzYWdlU29sdXRpb25zIiwiQ3VzdG9tTGludGVyUHVzaFYyQWRhcHRlciIsImRpYWdub3N0aWNUb1YyTWVzc2FnZSIsInBhdGgiLCJkaWFnbm9zdGljIiwibWVzc2FnZSIsInVybCIsInNvbHV0aW9ucyIsImRlc2NyaWJlIiwiaXQiLCJmaWxlUGF0aCIsInJhbmdlIiwic3RhcnQiLCJsaW5lIiwiY2hhcmFjdGVyIiwiZW5kIiwic291cmNlIiwiY29kZSIsInNldmVyaXR5IiwiRGlhZ25vc3RpY1NldmVyaXR5IiwiSW5mb3JtYXRpb24iLCJ0eXBlIiwiY29ubmVjdGlvbiIsIm9uUHVibGlzaERpYWdub3N0aWNzIiwiYWRhcHRlciIsInJlc3VsdCIsImV4Y2VycHQiLCJlcXVhbHMiLCJsaW50ZXJOYW1lIiwibG9jYXRpb24iLCJmaWxlIiwicG9zaXRpb24iLCJkZWVwIl0sIm1hcHBpbmdzIjoiQUFFQTs7OztBQUNBOztJQUFZQSxFOztBQUNaOztBQUNBOzs7Ozs7QUFFQSxNQUFNQyxhQUFhLE9BQW5CO0FBQ0EsTUFBTUMsbUJBQStCLENBQUMsT0FBRCxDQUFyQzs7QUFFQSxNQUFNQyx5QkFBTix1Q0FBNEQ7QUFDMURDLHdCQUFzQkMsSUFBdEIsRUFBNEJDLFVBQTVCLEVBQXdDO0FBQ3RDLFVBQU1DLFVBQVUsTUFBTUgscUJBQU4sQ0FBNEJDLElBQTVCLEVBQWtDQyxVQUFsQyxDQUFoQjtBQUNBQyxZQUFRQyxHQUFSLEdBQWNQLFVBQWQ7QUFDQU0sWUFBUUUsU0FBUixHQUFvQlAsZ0JBQXBCO0FBQ0EsV0FBT0ssT0FBUDtBQUNEO0FBTnlEOztBQVM1REcsU0FBUywyQkFBVCxFQUFzQyxNQUFNO0FBQzFDQSxXQUFTLHFCQUFULEVBQWdDLE1BQU07QUFDcENDLE9BQUcsa0RBQUgsRUFBdUQsTUFBTTtBQUMzRCxZQUFNQyxXQUFXLFVBQWpCO0FBQ0EsWUFBTU4sYUFBNEI7QUFDaENDLGlCQUFTLG1CQUR1QjtBQUVoQ00sZUFBTztBQUNMQyxpQkFBTyxFQUFDQyxNQUFNLENBQVAsRUFBVUMsV0FBVyxDQUFyQixFQURGO0FBRUxDLGVBQUssRUFBQ0YsTUFBTSxDQUFQLEVBQVVDLFdBQVcsQ0FBckI7QUFGQSxTQUZ5QjtBQU1oQ0UsZ0JBQVEsUUFOd0I7QUFPaENDLGNBQU0sTUFQMEI7QUFRaENDLGtCQUFVcEIsR0FBR3FCLGtCQUFILENBQXNCQyxXQVJBO0FBU2hDQyxjQUFNdkIsR0FBR3FCLGtCQUFILENBQXNCQztBQVRJLE9BQWxDOztBQVlBLFlBQU1FLGFBQWtCLEVBQUNDLHVCQUF1QixDQUFFLENBQTFCLEVBQXhCO0FBQ0EsWUFBTUMsVUFBVSxJQUFJdkIseUJBQUosQ0FBOEJxQixVQUE5QixDQUFoQjtBQUNBLFlBQU1HLFNBQVNELFFBQVF0QixxQkFBUixDQUE4QlEsUUFBOUIsRUFBd0NOLFVBQXhDLENBQWY7O0FBRUEsd0JBQU9xQixPQUFPQyxPQUFkLEVBQXVCQyxNQUF2QixDQUE4QnZCLFdBQVdDLE9BQXpDO0FBQ0Esd0JBQU9vQixPQUFPRyxVQUFkLEVBQTBCRCxNQUExQixDQUFpQ3ZCLFdBQVdZLE1BQTVDO0FBQ0Esd0JBQU9TLE9BQU9JLFFBQVAsQ0FBZ0JDLElBQXZCLEVBQTZCSCxNQUE3QixDQUFvQ2pCLFFBQXBDO0FBQ0Esd0JBQU9lLE9BQU9JLFFBQVAsQ0FBZ0JFLFFBQXZCLEVBQWlDQyxJQUFqQyxDQUFzQ0wsTUFBdEMsQ0FBNkMsZ0JBQVUsZ0JBQVUsQ0FBVixFQUFhLENBQWIsQ0FBVixFQUEyQixnQkFBVSxDQUFWLEVBQWEsQ0FBYixDQUEzQixDQUE3QztBQUNBLHdCQUFPRixPQUFPUCxRQUFkLEVBQXdCUyxNQUF4QixDQUErQixNQUEvQjtBQUNBLHdCQUFPRixPQUFPbkIsR0FBZCxFQUFtQnFCLE1BQW5CLENBQTBCNUIsVUFBMUI7QUFDQSx3QkFBTzBCLE9BQU9sQixTQUFkLEVBQXlCeUIsSUFBekIsQ0FBOEJMLE1BQTlCLENBQXFDM0IsZ0JBQXJDO0FBQ0QsS0F6QkQ7QUEwQkQsR0EzQkQ7QUE0QkQsQ0E3QkQiLCJmaWxlIjoiY3VzdG9tLWxpbnRlci1wdXNoLXYyLWFkYXB0ZXIudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XHJcblxyXG5pbXBvcnQgTGludGVyUHVzaFYyQWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvbGludGVyLXB1c2gtdjItYWRhcHRlcic7XHJcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCB7ZXhwZWN0fSBmcm9tICdjaGFpJztcclxuaW1wb3J0IHtQb2ludCwgUmFuZ2V9IGZyb20gJ2F0b20nO1xyXG5cclxuY29uc3QgbWVzc2FnZVVybCA9ICdkdW1teSc7XHJcbmNvbnN0IG1lc3NhZ2VTb2x1dGlvbnM6IEFycmF5PGFueT4gPSBbJ2R1bW15J107XHJcblxyXG5jbGFzcyBDdXN0b21MaW50ZXJQdXNoVjJBZGFwdGVyIGV4dGVuZHMgTGludGVyUHVzaFYyQWRhcHRlciB7XHJcbiAgZGlhZ25vc3RpY1RvVjJNZXNzYWdlKHBhdGgsIGRpYWdub3N0aWMpIHtcclxuICAgIGNvbnN0IG1lc3NhZ2UgPSBzdXBlci5kaWFnbm9zdGljVG9WMk1lc3NhZ2UocGF0aCwgZGlhZ25vc3RpYyk7XHJcbiAgICBtZXNzYWdlLnVybCA9IG1lc3NhZ2VVcmw7XHJcbiAgICBtZXNzYWdlLnNvbHV0aW9ucyA9IG1lc3NhZ2VTb2x1dGlvbnM7XHJcbiAgICByZXR1cm4gbWVzc2FnZTtcclxuICB9XHJcbn1cclxuXHJcbmRlc2NyaWJlKCdDdXN0b21MaW50ZXJQdXNoVjJBZGFwdGVyJywgKCkgPT4ge1xyXG4gIGRlc2NyaWJlKCdkaWFnbm9zdGljVG9NZXNzYWdlJywgKCkgPT4ge1xyXG4gICAgaXQoJ2NvbnZlcnRzIERpYWdub3N0aWMgYW5kIHBhdGggdG8gYSBsaW50ZXIkTWVzc2FnZScsICgpID0+IHtcclxuICAgICAgY29uc3QgZmlsZVBhdGggPSAnL2EvYi9jL2QnO1xyXG4gICAgICBjb25zdCBkaWFnbm9zdGljOiBscy5EaWFnbm9zdGljID0ge1xyXG4gICAgICAgIG1lc3NhZ2U6ICdUaGlzIGlzIGEgbWVzc2FnZScsXHJcbiAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgIHN0YXJ0OiB7bGluZTogMSwgY2hhcmFjdGVyOiAyfSxcclxuICAgICAgICAgIGVuZDoge2xpbmU6IDMsIGNoYXJhY3RlcjogNH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzb3VyY2U6ICdzb3VyY2UnLFxyXG4gICAgICAgIGNvZGU6ICdjb2RlJyxcclxuICAgICAgICBzZXZlcml0eTogbHMuRGlhZ25vc3RpY1NldmVyaXR5LkluZm9ybWF0aW9uLFxyXG4gICAgICAgIHR5cGU6IGxzLkRpYWdub3N0aWNTZXZlcml0eS5JbmZvcm1hdGlvbixcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb246IGFueSA9IHtvblB1Ymxpc2hEaWFnbm9zdGljcygpIHt9fTtcclxuICAgICAgY29uc3QgYWRhcHRlciA9IG5ldyBDdXN0b21MaW50ZXJQdXNoVjJBZGFwdGVyKGNvbm5lY3Rpb24pO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhZGFwdGVyLmRpYWdub3N0aWNUb1YyTWVzc2FnZShmaWxlUGF0aCwgZGlhZ25vc3RpYyk7XHJcblxyXG4gICAgICBleHBlY3QocmVzdWx0LmV4Y2VycHQpLmVxdWFscyhkaWFnbm9zdGljLm1lc3NhZ2UpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LmxpbnRlck5hbWUpLmVxdWFscyhkaWFnbm9zdGljLnNvdXJjZSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQubG9jYXRpb24uZmlsZSkuZXF1YWxzKGZpbGVQYXRoKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5sb2NhdGlvbi5wb3NpdGlvbikuZGVlcC5lcXVhbHMobmV3IFJhbmdlKG5ldyBQb2ludCgxLCAyKSwgbmV3IFBvaW50KDMsIDQpKSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuc2V2ZXJpdHkpLmVxdWFscygnaW5mbycpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnVybCkuZXF1YWxzKG1lc3NhZ2VVcmwpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnNvbHV0aW9ucykuZGVlcC5lcXVhbHMobWVzc2FnZVNvbHV0aW9ucyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==