var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _atom = require('atom');

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _datatipAdapter = require('../../lib/adapters/datatip-adapter');

var _datatipAdapter2 = _interopRequireDefault(_datatipAdapter);

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('DatatipAdapter', () => {
  let fakeEditor;
  let connection;

  beforeEach(() => {
    global.sinon = _sinon2.default.sandbox.create();
    connection = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    fakeEditor = (0, _helpers.createFakeEditor)();
  });
  afterEach(() => {
    global.sinon.restore();
  });

  describe('canAdapt', () => {
    it('returns true if hoverProvider is supported', () => {
      const result = _datatipAdapter2.default.canAdapt({ hoverProvider: true });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false if hoverProvider not supported', () => {
      const result = _datatipAdapter2.default.canAdapt({});
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('getDatatip', () => {
    it('calls LSP document/hover at the given position', async () => {
      _sinon2.default.stub(connection, 'hover').resolves({
        range: {
          start: { line: 0, character: 1 },
          end: { line: 0, character: 2 }
        },
        contents: ['test', { language: 'testlang', value: 'test snippet' }]
      });

      const grammarSpy = _sinon2.default.spy(atom.grammars, 'grammarForScopeName');

      const datatipAdapter = new _datatipAdapter2.default();
      const datatip = await datatipAdapter.getDatatip(connection, fakeEditor, new _atom.Point(0, 0));
      (0, _chai.expect)(datatip).to.be.ok;
      (0, _assert2.default)(datatip != null);

      (0, _chai.expect)(datatip.range.start.row).equal(0);
      (0, _chai.expect)(datatip.range.start.column).equal(1);
      (0, _chai.expect)(datatip.range.end.row).equal(0);
      (0, _chai.expect)(datatip.range.end.column).equal(2);

      (0, _chai.expect)(datatip.markedStrings).to.have.lengthOf(2);
      (0, _chai.expect)(datatip.markedStrings[0]).eql({ type: 'markdown', value: 'test' });

      const snippet = datatip.markedStrings[1];
      (0, _chai.expect)(snippet.type).equal('snippet');
      (0, _assert2.default)(snippet.type === 'snippet');
      (0, _chai.expect)(snippet.grammar.scopeName).equal('text.plain.null-grammar');
      (0, _chai.expect)(snippet.value).equal('test snippet');

      (0, _chai.expect)(grammarSpy.calledWith('source.testlang')).to.be.true;
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvZGF0YXRpcC1hZGFwdGVyLnRlc3QuanMiXSwibmFtZXMiOlsibHMiLCJkZXNjcmliZSIsImZha2VFZGl0b3IiLCJjb25uZWN0aW9uIiwiYmVmb3JlRWFjaCIsImdsb2JhbCIsInNpbm9uIiwic2FuZGJveCIsImNyZWF0ZSIsIkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbiIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJpdCIsInJlc3VsdCIsImNhbkFkYXB0IiwiaG92ZXJQcm92aWRlciIsInRvIiwiYmUiLCJ0cnVlIiwiZmFsc2UiLCJzdHViIiwicmVzb2x2ZXMiLCJyYW5nZSIsInN0YXJ0IiwibGluZSIsImNoYXJhY3RlciIsImVuZCIsImNvbnRlbnRzIiwibGFuZ3VhZ2UiLCJ2YWx1ZSIsImdyYW1tYXJTcHkiLCJzcHkiLCJhdG9tIiwiZ3JhbW1hcnMiLCJkYXRhdGlwQWRhcHRlciIsImRhdGF0aXAiLCJnZXREYXRhdGlwIiwib2siLCJyb3ciLCJlcXVhbCIsImNvbHVtbiIsIm1hcmtlZFN0cmluZ3MiLCJoYXZlIiwibGVuZ3RoT2YiLCJlcWwiLCJ0eXBlIiwic25pcHBldCIsImdyYW1tYXIiLCJzY29wZU5hbWUiLCJjYWxsZWRXaXRoIl0sIm1hcHBpbmdzIjoiQUFFQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7O0lBQVlBLEU7O0FBQ1o7Ozs7QUFDQTs7Ozs7O0FBRUFDLFNBQVMsZ0JBQVQsRUFBMkIsTUFBTTtBQUMvQixNQUFJQyxVQUFKO0FBQ0EsTUFBSUMsVUFBSjs7QUFFQUMsYUFBVyxNQUFNO0FBQ2ZDLFdBQU9DLEtBQVAsR0FBZSxnQkFBTUMsT0FBTixDQUFjQyxNQUFkLEVBQWY7QUFDQUwsaUJBQWEsSUFBSUgsR0FBR1Msd0JBQVAsQ0FBZ0MsbUNBQWhDLENBQWI7QUFDQVAsaUJBQWEsZ0NBQWI7QUFDRCxHQUpEO0FBS0FRLFlBQVUsTUFBTTtBQUNkTCxXQUFPQyxLQUFQLENBQWFLLE9BQWI7QUFD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dGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IGludmFyaWFudCBmcm9tICdhc3NlcnQnO1xyXG5pbXBvcnQge1BvaW50fSBmcm9tICdhdG9tJztcclxuaW1wb3J0IHtleHBlY3R9IGZyb20gJ2NoYWknO1xyXG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xyXG5pbXBvcnQgKiBhcyBscyBmcm9tICcuLi8uLi9saWIvbGFuZ3VhZ2VjbGllbnQnO1xyXG5pbXBvcnQgRGF0YXRpcEFkYXB0ZXIgZnJvbSAnLi4vLi4vbGliL2FkYXB0ZXJzL2RhdGF0aXAtYWRhcHRlcic7XHJcbmltcG9ydCB7Y3JlYXRlU3B5Q29ubmVjdGlvbiwgY3JlYXRlRmFrZUVkaXRvcn0gZnJvbSAnLi4vaGVscGVycy5qcyc7XHJcblxyXG5kZXNjcmliZSgnRGF0YXRpcEFkYXB0ZXInLCAoKSA9PiB7XHJcbiAgbGV0IGZha2VFZGl0b3I7XHJcbiAgbGV0IGNvbm5lY3Rpb247XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgZ2xvYmFsLnNpbm9uID0gc2lub24uc2FuZGJveC5jcmVhdGUoKTtcclxuICAgIGNvbm5lY3Rpb24gPSBuZXcgbHMuTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uKGNyZWF0ZVNweUNvbm5lY3Rpb24oKSk7XHJcbiAgICBmYWtlRWRpdG9yID0gY3JlYXRlRmFrZUVkaXRvcigpO1xyXG4gIH0pO1xyXG4gIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICBnbG9iYWwuc2lub24ucmVzdG9yZSgpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnY2FuQWRhcHQnLCAoKSA9PiB7XHJcbiAgICBpdCgncmV0dXJucyB0cnVlIGlmIGhvdmVyUHJvdmlkZXIgaXMgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBEYXRhdGlwQWRhcHRlci5jYW5BZGFwdCh7aG92ZXJQcm92aWRlcjogdHJ1ZX0pO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS50cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3JldHVybnMgZmFsc2UgaWYgaG92ZXJQcm92aWRlciBub3Qgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBEYXRhdGlwQWRhcHRlci5jYW5BZGFwdCh7fSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmZhbHNlO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdnZXREYXRhdGlwJywgKCkgPT4ge1xyXG4gICAgaXQoJ2NhbGxzIExTUCBkb2N1bWVudC9ob3ZlciBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIHNpbm9uLnN0dWIoY29ubmVjdGlvbiwgJ2hvdmVyJykucmVzb2x2ZXMoe1xyXG4gICAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgICBzdGFydDoge2xpbmU6IDAsIGNoYXJhY3RlcjogMX0sXHJcbiAgICAgICAgICBlbmQ6IHtsaW5lOiAwLCBjaGFyYWN0ZXI6IDJ9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udGVudHM6IFsndGVzdCcsIHtsYW5ndWFnZTogJ3Rlc3RsYW5nJywgdmFsdWU6ICd0ZXN0IHNuaXBwZXQnfV0sXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc3QgZ3JhbW1hclNweSA9IHNpbm9uLnNweShhdG9tLmdyYW1tYXJzLCAnZ3JhbW1hckZvclNjb3BlTmFtZScpO1xyXG5cclxuICAgICAgY29uc3QgZGF0YXRpcEFkYXB0ZXIgPSBuZXcgRGF0YXRpcEFkYXB0ZXIoKTtcclxuICAgICAgY29uc3QgZGF0YXRpcCA9IGF3YWl0IGRhdGF0aXBBZGFwdGVyLmdldERhdGF0aXAoY29ubmVjdGlvbiwgZmFrZUVkaXRvciwgbmV3IFBvaW50KDAsIDApKTtcclxuICAgICAgZXhwZWN0KGRhdGF0aXApLnRvLmJlLm9rO1xyXG4gICAgICBpbnZhcmlhbnQoZGF0YXRpcCAhPSBudWxsKTtcclxuXHJcbiAgICAgIGV4cGVjdChkYXRhdGlwLnJhbmdlLnN0YXJ0LnJvdykuZXF1YWwoMCk7XHJcbiAgICAgIGV4cGVjdChkYXRhdGlwLnJhbmdlLnN0YXJ0LmNvbHVtbikuZXF1YWwoMSk7XHJcbiAgICAgIGV4cGVjdChkYXRhdGlwLnJhbmdlLmVuZC5yb3cpLmVxdWFsKDApO1xyXG4gICAgICBleHBlY3QoZGF0YXRpcC5yYW5nZS5lbmQuY29sdW1uKS5lcXVhbCgyKTtcclxuXHJcbiAgICAgIGV4cGVjdChkYXRhdGlwLm1hcmtlZFN0cmluZ3MpLnRvLmhhdmUubGVuZ3RoT2YoMik7XHJcbiAgICAgIGV4cGVjdChkYXRhdGlwLm1hcmtlZFN0cmluZ3NbMF0pLmVxbCh7dHlwZTogJ21hcmtkb3duJywgdmFsdWU6ICd0ZXN0J30pO1xyXG5cclxuICAgICAgY29uc3Qgc25pcHBldCA9IGRhdGF0aXAubWFya2VkU3RyaW5nc1sxXTtcclxuICAgICAgZXhwZWN0KHNuaXBwZXQudHlwZSkuZXF1YWwoJ3NuaXBwZXQnKTtcclxuICAgICAgaW52YXJpYW50KHNuaXBwZXQudHlwZSA9PT0gJ3NuaXBwZXQnKTtcclxuICAgICAgZXhwZWN0KHNuaXBwZXQuZ3JhbW1hci5zY29wZU5hbWUpLmVxdWFsKCd0ZXh0LnBsYWluLm51bGwtZ3JhbW1hcicpO1xyXG4gICAgICBleHBlY3Qoc25pcHBldC52YWx1ZSkuZXF1YWwoJ3Rlc3Qgc25pcHBldCcpO1xyXG5cclxuICAgICAgZXhwZWN0KGdyYW1tYXJTcHkuY2FsbGVkV2l0aCgnc291cmNlLnRlc3RsYW5nJykpLnRvLmJlLnRydWU7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==