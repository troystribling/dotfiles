var _autoLanguageclient = require('../lib/auto-languageclient');

var _autoLanguageclient2 = _interopRequireDefault(_autoLanguageclient);

var _chai = require('chai');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('AutoLanguageClient', () => {
  describe('shouldSyncForEditor', () => {
    let CustomAutoLanguageClient = class CustomAutoLanguageClient extends _autoLanguageclient2.default {
      getGrammarScopes() {
        return ['Java', 'Python'];
      }
    };


    const client = new CustomAutoLanguageClient();

    function mockEditor(uri, scopeName) {
      return {
        getURI: () => uri,
        getGrammar: () => {
          return { scopeName };
        }
      };
    }

    it('selects documents in project and in supported language', () => {
      const editor = mockEditor('/path/to/somewhere', client.getGrammarScopes()[0]);
      (0, _chai.expect)(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(true);
    });

    it('does not select documents outside of project', () => {
      const editor = mockEditor('/path/to/elsewhere/file', client.getGrammarScopes()[0]);
      (0, _chai.expect)(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
    });

    it('does not select documents in unsupported language', () => {
      const editor = mockEditor('/path/to/somewhere', client.getGrammarScopes()[0] + '-dummy');
      (0, _chai.expect)(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
    });

    it('does not select documents in unsupported language outside of project', () => {
      const editor = mockEditor('/path/to/elsewhere/file', client.getGrammarScopes()[0] + '-dummy');
      (0, _chai.expect)(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvYXV0by1sYW5ndWFnZWNsaWVudC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiQ3VzdG9tQXV0b0xhbmd1YWdlQ2xpZW50IiwiZ2V0R3JhbW1hclNjb3BlcyIsImNsaWVudCIsIm1vY2tFZGl0b3IiLCJ1cmkiLCJzY29wZU5hbWUiLCJnZXRVUkkiLCJnZXRHcmFtbWFyIiwiaXQiLCJlZGl0b3IiLCJzaG91bGRTeW5jRm9yRWRpdG9yIiwiZXF1YWxzIl0sIm1hcHBpbmdzIjoiQUFFQTs7OztBQUNBOzs7O0FBRUFBLFNBQVMsb0JBQVQsRUFBK0IsTUFBTTtBQUNuQ0EsV0FBUyxxQkFBVCxFQUFnQyxNQUFNO0FBQUEsUUFDOUJDLHdCQUQ4QixHQUNwQyxNQUFNQSx3QkFBTixzQ0FBMEQ7QUFDeERDLHlCQUFtQjtBQUNqQixlQUFPLENBQUMsTUFBRCxFQUFTLFFBQVQsQ0FBUDtBQUNEO0FBSHVELEtBRHRCOzs7QUFPcEMsVUFBTUMsU0FBUyxJQUFJRix3QkFBSixFQUFmOztBQUVBLGFBQVNHLFVBQVQsQ0FBb0JDLEdBQXBCLEVBQXlCQyxTQUF6QixFQUF5QztBQUN2QyxhQUFPO0FBQ0xDLGdCQUFRLE1BQU1GLEdBRFQ7QUFFTEcsb0JBQVksTUFBTTtBQUNoQixpQkFBTyxFQUFDRixTQUFELEVBQVA7QUFDRDtBQUpJLE9BQVA7QUFNRDs7QUFFREcsT0FBRyx3REFBSCxFQUE2RCxNQUFNO0FBQ2pFLFlBQU1DLFNBQVNOLFdBQVcsb0JBQVgsRUFBaUNELE9BQU9ELGdCQUFQLEdBQTBCLENBQTFCLENBQWpDLENBQWY7QUFDQSx3QkFBT0MsT0FBT1EsbUJBQVAsQ0FBMkJELE1BQTNCLEVBQW1DLG9CQUFuQyxDQUFQLEVBQWlFRSxNQUFqRSxDQUF3RSxJQUF4RTtBQUNELEtBSEQ7O0FBS0FILE9BQUcsOENBQUgsRUFBbUQsTUFBTTtBQUN2RCxZQUFNQyxTQUFTTixXQUFXLHlCQUFYLEVBQXNDRCxPQUFPRCxnQkFBUCxHQUEwQixDQUExQixDQUF0QyxDQUFmO0FBQ0Esd0JBQU9DLE9BQU9RLG1CQUFQLENBQTJCRCxNQUEzQixFQUFtQyxvQkFBbkMsQ0FBUCxFQUFpRUUsTUFBakUsQ0FBd0UsS0FBeEU7QUFDRCxLQUhEOztBQUtBSCxPQUFHLG1EQUFILEVBQXdELE1BQU07QUFDNUQsWUFBTUMsU0FBU04sV0FBVyxvQkFBWCxFQUFpQ0QsT0FBT0QsZ0JBQVAsR0FBMEIsQ0FBMUIsSUFBK0IsUUFBaEUsQ0FBZjtBQUNBLHdCQUFPQyxPQUFPUSxtQkFBUCxDQUEyQkQsTUFBM0IsRUFBbUMsb0JBQW5DLENBQVAsRUFBaUVFLE1BQWpFLENBQXdFLEtBQXhFO0FBQ0QsS0FIRDs7QUFLQUgsT0FBRyxzRUFBSCxFQUEyRSxNQUFNO0FBQy9FLFlBQU1DLFNBQVNOLFdBQVcseUJBQVgsRUFBc0NELE9BQU9ELGdCQUFQLEdBQTBCLENBQTFCLElBQStCLFFBQXJFLENBQWY7QUFDQSx3QkFBT0MsT0FBT1EsbUJBQVAsQ0FBMkJELE1BQTNCLEVBQW1DLG9CQUFuQyxDQUFQLEVBQWlFRSxNQUFqRSxDQUF3RSxLQUF4RTtBQUNELEtBSEQ7QUFJRCxHQXJDRDtBQXNDRCxDQXZDRCIsImZpbGUiOiJhdXRvLWxhbmd1YWdlY2xpZW50LnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IEF1dG9MYW5ndWFnZUNsaWVudCBmcm9tICcuLi9saWIvYXV0by1sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCB7ZXhwZWN0fSBmcm9tICdjaGFpJztcclxuXHJcbmRlc2NyaWJlKCdBdXRvTGFuZ3VhZ2VDbGllbnQnLCAoKSA9PiB7XHJcbiAgZGVzY3JpYmUoJ3Nob3VsZFN5bmNGb3JFZGl0b3InLCAoKSA9PiB7XHJcbiAgICBjbGFzcyBDdXN0b21BdXRvTGFuZ3VhZ2VDbGllbnQgZXh0ZW5kcyBBdXRvTGFuZ3VhZ2VDbGllbnQge1xyXG4gICAgICBnZXRHcmFtbWFyU2NvcGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbJ0phdmEnLCAnUHl0aG9uJ107XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgQ3VzdG9tQXV0b0xhbmd1YWdlQ2xpZW50KCk7XHJcblxyXG4gICAgZnVuY3Rpb24gbW9ja0VkaXRvcih1cmksIHNjb3BlTmFtZSk6IGFueSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0VVJJOiAoKSA9PiB1cmksXHJcbiAgICAgICAgZ2V0R3JhbW1hcjogKCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtzY29wZU5hbWV9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaXQoJ3NlbGVjdHMgZG9jdW1lbnRzIGluIHByb2plY3QgYW5kIGluIHN1cHBvcnRlZCBsYW5ndWFnZScsICgpID0+IHtcclxuICAgICAgY29uc3QgZWRpdG9yID0gbW9ja0VkaXRvcignL3BhdGgvdG8vc29tZXdoZXJlJywgY2xpZW50LmdldEdyYW1tYXJTY29wZXMoKVswXSk7XHJcbiAgICAgIGV4cGVjdChjbGllbnQuc2hvdWxkU3luY0ZvckVkaXRvcihlZGl0b3IsICcvcGF0aC90by9zb21ld2hlcmUnKSkuZXF1YWxzKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RvZXMgbm90IHNlbGVjdCBkb2N1bWVudHMgb3V0c2lkZSBvZiBwcm9qZWN0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBlZGl0b3IgPSBtb2NrRWRpdG9yKCcvcGF0aC90by9lbHNld2hlcmUvZmlsZScsIGNsaWVudC5nZXRHcmFtbWFyU2NvcGVzKClbMF0pO1xyXG4gICAgICBleHBlY3QoY2xpZW50LnNob3VsZFN5bmNGb3JFZGl0b3IoZWRpdG9yLCAnL3BhdGgvdG8vc29tZXdoZXJlJykpLmVxdWFscyhmYWxzZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnZG9lcyBub3Qgc2VsZWN0IGRvY3VtZW50cyBpbiB1bnN1cHBvcnRlZCBsYW5ndWFnZScsICgpID0+IHtcclxuICAgICAgY29uc3QgZWRpdG9yID0gbW9ja0VkaXRvcignL3BhdGgvdG8vc29tZXdoZXJlJywgY2xpZW50LmdldEdyYW1tYXJTY29wZXMoKVswXSArICctZHVtbXknKTtcclxuICAgICAgZXhwZWN0KGNsaWVudC5zaG91bGRTeW5jRm9yRWRpdG9yKGVkaXRvciwgJy9wYXRoL3RvL3NvbWV3aGVyZScpKS5lcXVhbHMoZmFsc2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RvZXMgbm90IHNlbGVjdCBkb2N1bWVudHMgaW4gdW5zdXBwb3J0ZWQgbGFuZ3VhZ2Ugb3V0c2lkZSBvZiBwcm9qZWN0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBlZGl0b3IgPSBtb2NrRWRpdG9yKCcvcGF0aC90by9lbHNld2hlcmUvZmlsZScsIGNsaWVudC5nZXRHcmFtbWFyU2NvcGVzKClbMF0gKyAnLWR1bW15Jyk7XHJcbiAgICAgIGV4cGVjdChjbGllbnQuc2hvdWxkU3luY0ZvckVkaXRvcihlZGl0b3IsICcvcGF0aC90by9zb21ld2hlcmUnKSkuZXF1YWxzKGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19