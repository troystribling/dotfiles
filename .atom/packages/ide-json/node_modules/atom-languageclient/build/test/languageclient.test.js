var _languageclient = require('../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _logger = require('../lib/logger');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

var _helpers = require('./helpers.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

describe('LanguageClientConnection', () => {
  beforeEach(() => {
    global.sinon = _sinon2.default.sandbox.create();
  });
  afterEach(() => {
    global.sinon.restore();
  });

  it('listens to the RPC connection it is given', () => {
    const rpc = (0, _helpers.createSpyConnection)();

    new ls.LanguageClientConnection(rpc, new _logger.NullLogger());
    (0, _chai.expect)(rpc.listen.called).equals(true);
  });

  it('disposes of the connection when it is disposed', () => {
    const rpc = (0, _helpers.createSpyConnection)();
    const lc = new ls.LanguageClientConnection(rpc, new _logger.NullLogger());
    (0, _chai.expect)(rpc.dispose.called).equals(false);
    lc.dispose();
    (0, _chai.expect)(rpc.dispose.called).equals(true);
  });

  describe('send requests', () => {
    const textDocumentPositionParams = {
      textDocument: { uri: 'file:///1/z80.asm' },
      position: { line: 24, character: 32 }
    };
    let lc;

    beforeEach(() => {
      lc = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)(), new _logger.NullLogger());
      _sinon2.default.spy(lc, '_sendRequest');
    });

    it('sends a request for initialize', async () => {
      const params = { capabilities: {} };
      await lc.initialize(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('initialize');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for shutdown', async () => {
      await lc.shutdown();

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('shutdown');
    });

    it('sends a request for completion', async () => {
      await lc.completion(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/completion');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    });

    it('sends a request for completionItemResolve', async () => {
      const completionItem = { label: 'abc' };
      await lc.completionItemResolve(completionItem);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('completionItem/resolve');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(completionItem);
    });

    it('sends a request for hover', async () => {
      await lc.hover(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/hover');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    });

    it('sends a request for signatureHelp', async () => {
      await lc.signatureHelp(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/signatureHelp');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    });

    it('sends a request for gotoDefinition', async () => {
      await lc.gotoDefinition(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/definition');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    });

    it('sends a request for findReferences', async () => {
      await lc.findReferences(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/references');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    });

    it('sends a request for documentHighlight', async () => {
      await lc.documentHighlight(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/documentHighlight');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    });

    it('sends a request for documentSymbol', async () => {
      await lc.documentSymbol(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/documentSymbol');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    });

    it('sends a request for workspaceSymbol', async () => {
      const params = { query: 'something' };
      await lc.workspaceSymbol(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('workspace/symbol');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for codeAction', async () => {
      const params = {
        textDocument: textDocumentPositionParams.textDocument,
        range: {
          start: { line: 1, character: 1 },
          end: { line: 24, character: 32 }
        },
        context: { diagnostics: [] }
      };
      await lc.codeAction(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/codeAction');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for codeLens', async () => {
      const params = {
        textDocument: textDocumentPositionParams.textDocument
      };
      await lc.codeLens(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/codeLens');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for codeLensResolve', async () => {
      const params = {
        range: {
          start: { line: 1, character: 1 },
          end: { line: 24, character: 32 }
        }
      };
      await lc.codeLensResolve(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('codeLens/resolve');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for documentLink', async () => {
      const params = {
        textDocument: textDocumentPositionParams.textDocument
      };
      await lc.documentLink(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/documentLink');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for documentLinkResolve', async () => {
      const params = {
        range: {
          start: { line: 1, character: 1 },
          end: { line: 24, character: 32 }
        },
        target: 'abc.def.ghi'
      };
      await lc.documentLinkResolve(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('documentLink/resolve');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for documentFormatting', async () => {
      const params = {
        textDocument: textDocumentPositionParams.textDocument,
        options: { tabSize: 6, insertSpaces: true, someValue: 'optional' }
      };
      await lc.documentFormatting(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/formatting');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for documentRangeFormatting', async () => {
      const params = {
        textDocument: textDocumentPositionParams.textDocument,
        range: {
          start: { line: 1, character: 1 },
          end: { line: 24, character: 32 }
        },
        options: { tabSize: 6, insertSpaces: true, someValue: 'optional' }
      };
      await lc.documentRangeFormatting(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/rangeFormatting');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for documentOnTypeFormatting', async () => {
      const params = {
        textDocument: textDocumentPositionParams.textDocument,
        position: { line: 1, character: 1 },
        ch: '}',
        options: { tabSize: 6, insertSpaces: true, someValue: 'optional' }
      };
      await lc.documentOnTypeFormatting(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/onTypeFormatting');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });

    it('sends a request for rename', async () => {
      const params = {
        textDocument: { uri: 'file:///a/b.txt' },
        position: { line: 1, character: 2 },
        newName: 'abstractConstructorFactory'
      };
      await lc.rename(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/rename');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    });
  });

  describe('send notifications', () => {
    const textDocumentItem = {
      uri: 'file:///best/bits.js',
      languageId: 'javascript',
      text: 'function a() { return "b"; };',
      version: 1
    };
    const versionedTextDocumentIdentifier = {
      uri: 'file:///best/bits.js',
      languageId: 'javascript',
      text: 'function a() { return "b"; };',
      version: 1
    };

    let lc;

    beforeEach(() => {
      lc = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)(), new _logger.NullLogger());
      _sinon2.default.stub(lc, '_sendNotification');
    });

    it('exit sends notification', () => {
      lc.exit();

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('exit');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args.length).equals(1);
    });

    it('initialized sends notification', () => {
      lc.initialized();

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('initialized');
      const expected = {};
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).to.deep.equal(expected);
    });

    it('didChangeConfiguration sends notification', () => {
      const params = {
        settings: { a: { b: 'c' } }
      };
      lc.didChangeConfiguration(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('workspace/didChangeConfiguration');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didOpenTextDocument sends notification', () => {
      const params = {
        textDocument: textDocumentItem
      };
      lc.didOpenTextDocument(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('textDocument/didOpen');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didChangeTextDocument sends notification', () => {
      const params = {
        textDocument: versionedTextDocumentIdentifier,
        contentChanges: []
      };
      lc.didChangeTextDocument(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('textDocument/didChange');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didCloseTextDocument sends notification', () => {
      const params = {
        textDocument: textDocumentItem
      };
      lc.didCloseTextDocument(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('textDocument/didClose');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didSaveTextDocument sends notification', () => {
      const params = {
        textDocument: textDocumentItem
      };
      lc.didSaveTextDocument(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('textDocument/didSave');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didChangeWatchedFiles sends notification', () => {
      const params = { changes: [] };
      lc.didChangeWatchedFiles(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('workspace/didChangeWatchedFiles');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });
  });

  describe('notification methods', () => {
    let lc;
    const eventMap = {};

    beforeEach(() => {
      lc = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)(), new _logger.NullLogger());
      _sinon2.default.stub(lc, '_onNotification').callsFake((message, callback) => {
        eventMap[message.method] = callback;
      });
    });

    it('onShowMessage calls back on window/showMessage', () => {
      let called = false;
      lc.onShowMessage(() => {
        called = true;
      });
      eventMap['window/showMessage']();
      (0, _chai.expect)(called).equals(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,