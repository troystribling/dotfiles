var _languageclient = require('../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _logger = require('../lib/logger');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

var _helpers = require('./helpers.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('LanguageClientConnection', () => {
  beforeEach(() => {
    global.sinon = _sinon2.default.sandbox.create();
  });
  afterEach(() => {
    global.sinon.restore();
  });

  it('listens to the RPC connection it is given', () => {
    const rpc = (0, _helpers.createSpyConnection)();

    new ls.LanguageClientConnection(rpc, new _logger.NullLogger());
    (0, _chai.expect)(rpc.listen.called).equals(true);
  });

  it('disposes of the connection when it is disposed', () => {
    const rpc = (0, _helpers.createSpyConnection)();
    const lc = new ls.LanguageClientConnection(rpc, new _logger.NullLogger());
    (0, _chai.expect)(rpc.dispose.called).equals(false);
    lc.dispose();
    (0, _chai.expect)(rpc.dispose.called).equals(true);
  });

  describe('send requests', () => {
    const textDocumentPositionParams = {
      textDocument: { uri: 'file:///1/z80.asm' },
      position: { line: 24, character: 32 }
    };
    let lc;

    beforeEach(() => {
      lc = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)(), new _logger.NullLogger());
      _sinon2.default.spy(lc, '_sendRequest');
    });

    it('sends a request for initialize', _asyncToGenerator(function* () {
      const params = { capabilities: {} };
      yield lc.initialize(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('initialize');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for shutdown', _asyncToGenerator(function* () {
      yield lc.shutdown();

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('shutdown');
    }));

    it('sends a request for completion', _asyncToGenerator(function* () {
      yield lc.completion(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/completion');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    }));

    it('sends a request for completionItemResolve', _asyncToGenerator(function* () {
      const completionItem = { label: 'abc' };
      yield lc.completionItemResolve(completionItem);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('completionItem/resolve');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(completionItem);
    }));

    it('sends a request for hover', _asyncToGenerator(function* () {
      yield lc.hover(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/hover');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    }));

    it('sends a request for signatureHelp', _asyncToGenerator(function* () {
      yield lc.signatureHelp(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/signatureHelp');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    }));

    it('sends a request for gotoDefinition', _asyncToGenerator(function* () {
      yield lc.gotoDefinition(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/definition');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    }));

    it('sends a request for findReferences', _asyncToGenerator(function* () {
      yield lc.findReferences(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/references');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    }));

    it('sends a request for documentHighlight', _asyncToGenerator(function* () {
      yield lc.documentHighlight(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/documentHighlight');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    }));

    it('sends a request for documentSymbol', _asyncToGenerator(function* () {
      yield lc.documentSymbol(textDocumentPositionParams);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/documentSymbol');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(textDocumentPositionParams);
    }));

    it('sends a request for workspaceSymbol', _asyncToGenerator(function* () {
      const params = { query: 'something' };
      yield lc.workspaceSymbol(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('workspace/symbol');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for codeAction', _asyncToGenerator(function* () {
      const params = {
        textDocument: textDocumentPositionParams.textDocument,
        range: {
          start: { line: 1, character: 1 },
          end: { line: 24, character: 32 }
        },
        context: { diagnostics: [] }
      };
      yield lc.codeAction(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/codeAction');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for codeLens', _asyncToGenerator(function* () {
      const params = {
        textDocument: textDocumentPositionParams.textDocument
      };
      yield lc.codeLens(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/codeLens');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for codeLensResolve', _asyncToGenerator(function* () {
      const params = {
        range: {
          start: { line: 1, character: 1 },
          end: { line: 24, character: 32 }
        }
      };
      yield lc.codeLensResolve(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('codeLens/resolve');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for documentLink', _asyncToGenerator(function* () {
      const params = {
        textDocument: textDocumentPositionParams.textDocument
      };
      yield lc.documentLink(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/documentLink');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for documentLinkResolve', _asyncToGenerator(function* () {
      const params = {
        range: {
          start: { line: 1, character: 1 },
          end: { line: 24, character: 32 }
        },
        target: 'abc.def.ghi'
      };
      yield lc.documentLinkResolve(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('documentLink/resolve');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for documentFormatting', _asyncToGenerator(function* () {
      const params = {
        textDocument: textDocumentPositionParams.textDocument,
        options: { tabSize: 6, insertSpaces: true, someValue: 'optional' }
      };
      yield lc.documentFormatting(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/formatting');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for documentRangeFormatting', _asyncToGenerator(function* () {
      const params = {
        textDocument: textDocumentPositionParams.textDocument,
        range: {
          start: { line: 1, character: 1 },
          end: { line: 24, character: 32 }
        },
        options: { tabSize: 6, insertSpaces: true, someValue: 'optional' }
      };
      yield lc.documentRangeFormatting(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/rangeFormatting');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for documentOnTypeFormatting', _asyncToGenerator(function* () {
      const params = {
        textDocument: textDocumentPositionParams.textDocument,
        position: { line: 1, character: 1 },
        ch: '}',
        options: { tabSize: 6, insertSpaces: true, someValue: 'optional' }
      };
      yield lc.documentOnTypeFormatting(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/onTypeFormatting');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));

    it('sends a request for rename', _asyncToGenerator(function* () {
      const params = {
        textDocument: { uri: 'file:///a/b.txt' },
        position: { line: 1, character: 2 },
        newName: 'abstractConstructorFactory'
      };
      yield lc.rename(params);

      (0, _chai.expect)(lc._sendRequest.called).equals(true);
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[0]).equals('textDocument/rename');
      (0, _chai.expect)(lc._sendRequest.getCall(0).args[1]).equals(params);
    }));
  });

  describe('send notifications', () => {
    const textDocumentItem = {
      uri: 'file:///best/bits.js',
      languageId: 'javascript',
      text: 'function a() { return "b"; };',
      version: 1
    };
    const versionedTextDocumentIdentifier = {
      uri: 'file:///best/bits.js',
      languageId: 'javascript',
      text: 'function a() { return "b"; };',
      version: 1
    };

    let lc;

    beforeEach(() => {
      lc = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)(), new _logger.NullLogger());
      _sinon2.default.stub(lc, '_sendNotification');
    });

    it('didChangeConfiguration sends notification', () => {
      const params = {
        settings: { a: { b: 'c' } }
      };
      lc.didChangeConfiguration(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('workspace/didChangeConfiguration');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didOpenTextDocument sends notification', () => {
      const params = {
        textDocument: textDocumentItem
      };
      lc.didOpenTextDocument(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('textDocument/didOpen');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didChangeTextDocument sends notification', () => {
      const params = {
        textDocument: versionedTextDocumentIdentifier,
        contentChanges: []
      };
      lc.didChangeTextDocument(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('textDocument/didChange');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didCloseTextDocument sends notification', () => {
      const params = {
        textDocument: textDocumentItem
      };
      lc.didCloseTextDocument(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('textDocument/didClose');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didSaveTextDocument sends notification', () => {
      const params = {
        textDocument: textDocumentItem
      };
      lc.didSaveTextDocument(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('textDocument/didSave');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });

    it('didChangeWatchedFiles sends notification', () => {
      const params = { changes: [] };
      lc.didChangeWatchedFiles(params);

      (0, _chai.expect)(lc._sendNotification.called).equals(true);
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[0]).equals('workspace/didChangeWatchedFiles');
      (0, _chai.expect)(lc._sendNotification.getCall(0).args[1]).equals(params);
    });
  });

  describe('notification methods', () => {
    let lc;
    const eventMap = {};

    beforeEach(() => {
      lc = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)(), new _logger.NullLogger());
      _sinon2.default.stub(lc, '_onNotification').callsFake((message, callback) => {
        eventMap[message.method] = callback;
      });
    });

    it('onExit calls back on exit', () => {
      let called = false;
      lc.onExit(() => {
        called = true;
      });
      eventMap.exit();
      (0, _chai.expect)(called).equals(true);
    });

    it('onShowMessage calls back on window/showMessage', () => {
      let called = false;
      lc.onShowMessage(() => {
        called = true;
      });
      eventMap['window/showMessage']();
      (0, _chai.expect)(called).equals(true);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvbGFuZ3VhZ2VjbGllbnQudGVzdC5qcyJdLCJuYW1lcyI6WyJscyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImdsb2JhbCIsInNpbm9uIiwic2FuZGJveCIsImNyZWF0ZSIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJpdCIsInJwYyIsIkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbiIsImxpc3RlbiIsImNhbGxlZCIsImVxdWFscyIsImxjIiwiZGlzcG9zZSIsInRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zIiwidGV4dERvY3VtZW50IiwidXJpIiwicG9zaXRpb24iLCJsaW5lIiwiY2hhcmFjdGVyIiwic3B5IiwicGFyYW1zIiwiY2FwYWJpbGl0aWVzIiwiaW5pdGlhbGl6ZSIsIl9zZW5kUmVxdWVzdCIsImdldENhbGwiLCJhcmdzIiwic2h1dGRvd24iLCJjb21wbGV0aW9uIiwiY29tcGxldGlvbkl0ZW0iLCJsYWJlbCIsImNvbXBsZXRpb25JdGVtUmVzb2x2ZSIsImhvdmVyIiwic2lnbmF0dXJlSGVscCIsImdvdG9EZWZpbml0aW9uIiwiZmluZFJlZmVyZW5jZXMiLCJkb2N1bWVudEhpZ2hsaWdodCIsImRvY3VtZW50U3ltYm9sIiwicXVlcnkiLCJ3b3Jrc3BhY2VTeW1ib2wiLCJyYW5nZSIsInN0YXJ0IiwiZW5kIiwiY29udGV4dCIsImRpYWdub3N0aWNzIiwiY29kZUFjdGlvbiIsImNvZGVMZW5zIiwiY29kZUxlbnNSZXNvbHZlIiwiZG9jdW1lbnRMaW5rIiwidGFyZ2V0IiwiZG9jdW1lbnRMaW5rUmVzb2x2ZSIsIm9wdGlvbnMiLCJ0YWJTaXplIiwiaW5zZXJ0U3BhY2VzIiwic29tZVZhbHVlIiwiZG9jdW1lbnRGb3JtYXR0aW5nIiwiZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmciLCJjaCIsImRvY3VtZW50T25UeXBlRm9ybWF0dGluZyIsIm5ld05hbWUiLCJyZW5hbWUiLCJ0ZXh0RG9jdW1lbnRJdGVtIiwibGFuZ3VhZ2VJZCIsInRleHQiLCJ2ZXJzaW9uIiwidmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciIsInN0dWIiLCJzZXR0aW5ncyIsImEiLCJiIiwiZGlkQ2hhbmdlQ29uZmlndXJhdGlvbiIsIl9zZW5kTm90aWZpY2F0aW9uIiwiZGlkT3BlblRleHREb2N1bWVudCIsImNvbnRlbnRDaGFuZ2VzIiwiZGlkQ2hhbmdlVGV4dERvY3VtZW50IiwiZGlkQ2xvc2VUZXh0RG9jdW1lbnQiLCJkaWRTYXZlVGV4dERvY3VtZW50IiwiY2hhbmdlcyIsImRpZENoYW5nZVdhdGNoZWRGaWxlcyIsImV2ZW50TWFwIiwiY2FsbHNGYWtlIiwibWVzc2FnZSIsImNhbGxiYWNrIiwibWV0aG9kIiwib25FeGl0IiwiZXhpdCIsIm9uU2hvd01lc3NhZ2UiXSwibWFwcGluZ3MiOiJBQUVBOztJQUFZQSxFOztBQUNaOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUFDLFNBQVMsMEJBQVQsRUFBcUMsTUFBTTtBQUN6Q0MsYUFBVyxNQUFNO0FBQ2ZDLFdBQU9DLEtBQVAsR0FBZSxnQkFBTUMsT0FBTixDQUFjQyxNQUFkLEVBQWY7QUFDRCxHQUZEO0FBR0FDLFlBQVUsTUFBTTtBQUNkSixXQUFPQyxLQUFQLENBQWFJLE9BQWI7QUFDRCxHQUZEOztBQUlBQyxLQUFHLDJDQUFILEVBQWdELE1BQU07QUFDcEQsVUFBTUMsTUFBTSxtQ0FBWjs7QUFFQSxRQUFJVixHQUFHVyx3QkFBUCxDQUFnQ0QsR0FBaEMsRUFBcUMsd0JBQXJDO0FBQ0Esc0JBQU9BLElBQUlFLE1BQUosQ0FBV0MsTUFBbEIsRUFBMEJDLE1BQTFCLENBQWlDLElBQWpDO0FBQ0QsR0FMRDs7QUFPQUwsS0FBRyxnREFBSCxFQUFxRCxNQUFNO0FBQ3pELFVBQU1DLE1BQU0sbUNBQVo7QUFDQSxVQUFNSyxLQUFLLElBQUlmLEdBQUdXLHdCQUFQLENBQWdDRCxHQUFoQyxFQUFxQyx3QkFBckMsQ0FBWDtBQUNBLHNCQUFPQSxJQUFJTSxPQUFKLENBQVlILE1BQW5CLEVBQTJCQyxNQUEz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QUFHVyx3QkFBUCxDQUFnQyxtQ0FBaEMsRUFBdUQsd0JBQXZELENBQUw7QUFDQSxzQkFBTTBELElBQU4sQ0FBV3RELEVBQVgsRUFBZSxpQkFBZixFQUFrQ29FLFNBQWxDLENBQTRDLENBQUNDLE9BQUQsRUFBVUMsUUFBVixLQUF1QjtBQUNqRUgsaUJBQVNFLFFBQVFFLE1BQWpCLElBQTJCRCxRQUEzQjtBQUNELE9BRkQ7QUFHRCxLQUxEOztBQU9BNUUsT0FBRywyQkFBSCxFQUFnQyxNQUFNO0FBQ3BDLFVBQUlJLFNBQVMsS0FBYjtBQUNBRSxTQUFHd0UsTUFBSCxDQUFVLE1BQU07QUFDZDFFLGlCQUFTLElBQVQ7QUFDRCxPQUZEO0FBR0FxRSxlQUFTTSxJQUFUO0FBQ0Esd0JBQU8zRSxNQUFQLEVBQWVDLE1BQWYsQ0FBc0IsSUFBdEI7QUFDRCxLQVBEOztBQVNBTCxPQUFHLGdEQUFILEVBQXFELE1BQU07QUFDekQsVUFBSUksU0FBUyxLQUFiO0FBQ0FFLFNBQUcwRSxhQUFILENBQWlCLE1BQU07QUFDckI1RSxpQkFBUyxJQUFUO0FBQ0QsT0FGRDtBQUdBcUUsZUFBUyxvQkFBVDtBQUNBLHdCQUFPckUsTUFBUCxFQUFlQyxNQUFmLENBQXNCLElBQXRCO0FBQ0QsS0FQRDtBQVFELEdBNUJEO0FBNkJELENBNVdEIiwiZmlsZSI6Imxhbmd1YWdlY2xpZW50LnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0ICogYXMgbHMgZnJvbSAnLi4vbGliL2xhbmd1YWdlY2xpZW50JztcclxuaW1wb3J0IHtOdWxsTG9nZ2VyfSBmcm9tICcuLi9saWIvbG9nZ2VyJztcclxuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcclxuaW1wb3J0IHtleHBlY3R9IGZyb20gJ2NoYWknO1xyXG5pbXBvcnQge2NyZWF0ZVNweUNvbm5lY3Rpb259IGZyb20gJy4vaGVscGVycy5qcyc7XHJcblxyXG5kZXNjcmliZSgnTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgZ2xvYmFsLnNpbm9uID0gc2lub24uc2FuZGJveC5jcmVhdGUoKTtcclxuICB9KTtcclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgZ2xvYmFsLnNpbm9uLnJlc3RvcmUoKTtcclxuICB9KTtcclxuXHJcbiAgaXQoJ2xpc3RlbnMgdG8gdGhlIFJQQyBjb25uZWN0aW9uIGl0IGlzIGdpdmVuJywgKCkgPT4ge1xyXG4gICAgY29uc3QgcnBjID0gY3JlYXRlU3B5Q29ubmVjdGlvbigpO1xyXG5cclxuICAgIG5ldyBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb24ocnBjLCBuZXcgTnVsbExvZ2dlcigpKTtcclxuICAgIGV4cGVjdChycGMubGlzdGVuLmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gIH0pO1xyXG5cclxuICBpdCgnZGlzcG9zZXMgb2YgdGhlIGNvbm5lY3Rpb24gd2hlbiBpdCBpcyBkaXNwb3NlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IHJwYyA9IGNyZWF0ZVNweUNvbm5lY3Rpb24oKTtcclxuICAgIGNvbnN0IGxjID0gbmV3IGxzLkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbihycGMsIG5ldyBOdWxsTG9nZ2VyKCkpO1xyXG4gICAgZXhwZWN0KHJwYy5kaXNwb3NlLmNhbGxlZCkuZXF1YWxzKGZhbHNlKTtcclxuICAgIGxjLmRpc3Bvc2UoKTtcclxuICAgIGV4cGVjdChycGMuZGlzcG9zZS5jYWxsZWQpLmVxdWFscyh0cnVlKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ3NlbmQgcmVxdWVzdHMnLCAoKSA9PiB7XHJcbiAgICBjb25zdCB0ZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtczogbHMuVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMgPSB7XHJcbiAgICAgIHRleHREb2N1bWVudDoge3VyaTogJ2ZpbGU6Ly8vMS96ODAuYXNtJ30sXHJcbiAgICAgIHBvc2l0aW9uOiB7bGluZTogMjQsIGNoYXJhY3RlcjogMzJ9LFxyXG4gICAgfTtcclxuICAgIGxldCBsYztcclxuXHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgbGMgPSBuZXcgbHMuTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uKGNyZWF0ZVNweUNvbm5lY3Rpb24oKSwgbmV3IE51bGxMb2dnZXIoKSk7XHJcbiAgICAgIHNpbm9uLnNweShsYywgJ19zZW5kUmVxdWVzdCcpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3NlbmRzIGEgcmVxdWVzdCBmb3IgaW5pdGlhbGl6ZScsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcGFyYW1zOiBscy5Jbml0aWFsaXplUGFyYW1zID0ge2NhcGFiaWxpdGllczoge319O1xyXG4gICAgICBhd2FpdCBsYy5pbml0aWFsaXplKHBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1swXSkuZXF1YWxzKCdpbml0aWFsaXplJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHMocGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZW5kcyBhIHJlcXVlc3QgZm9yIHNodXRkb3duJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBsYy5zaHV0ZG93bigpO1xyXG5cclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5jYWxsZWQpLmVxdWFscyh0cnVlKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMF0pLmVxdWFscygnc2h1dGRvd24nKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZW5kcyBhIHJlcXVlc3QgZm9yIGNvbXBsZXRpb24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IGxjLmNvbXBsZXRpb24odGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpO1xyXG5cclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5jYWxsZWQpLmVxdWFscyh0cnVlKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMF0pLmVxdWFscygndGV4dERvY3VtZW50L2NvbXBsZXRpb24nKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMV0pLmVxdWFscyh0ZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2VuZHMgYSByZXF1ZXN0IGZvciBjb21wbGV0aW9uSXRlbVJlc29sdmUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbXBsZXRpb25JdGVtOiBscy5Db21wbGV0aW9uSXRlbSA9IHtsYWJlbDogJ2FiYyd9O1xyXG4gICAgICBhd2FpdCBsYy5jb21wbGV0aW9uSXRlbVJlc29sdmUoY29tcGxldGlvbkl0ZW0pO1xyXG5cclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5jYWxsZWQpLmVxdWFscyh0cnVlKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMF0pLmVxdWFscygnY29tcGxldGlvbkl0ZW0vcmVzb2x2ZScpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1sxXSkuZXF1YWxzKGNvbXBsZXRpb25JdGVtKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZW5kcyBhIHJlcXVlc3QgZm9yIGhvdmVyJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBsYy5ob3Zlcih0ZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1swXSkuZXF1YWxzKCd0ZXh0RG9jdW1lbnQvaG92ZXInKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMV0pLmVxdWFscyh0ZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2VuZHMgYSByZXF1ZXN0IGZvciBzaWduYXR1cmVIZWxwJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBsYy5zaWduYXR1cmVIZWxwKHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9zaWduYXR1cmVIZWxwJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHModGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3NlbmRzIGEgcmVxdWVzdCBmb3IgZ290b0RlZmluaXRpb24nLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IGxjLmdvdG9EZWZpbml0aW9uKHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9kZWZpbml0aW9uJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHModGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3NlbmRzIGEgcmVxdWVzdCBmb3IgZmluZFJlZmVyZW5jZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IGxjLmZpbmRSZWZlcmVuY2VzKHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9yZWZlcmVuY2VzJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHModGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3NlbmRzIGEgcmVxdWVzdCBmb3IgZG9jdW1lbnRIaWdobGlnaHQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGF3YWl0IGxjLmRvY3VtZW50SGlnaGxpZ2h0KHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9kb2N1bWVudEhpZ2hsaWdodCcpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1sxXSkuZXF1YWxzKHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZW5kcyBhIHJlcXVlc3QgZm9yIGRvY3VtZW50U3ltYm9sJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBhd2FpdCBsYy5kb2N1bWVudFN5bWJvbCh0ZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1swXSkuZXF1YWxzKCd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRTeW1ib2wnKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMV0pLmVxdWFscyh0ZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2VuZHMgYSByZXF1ZXN0IGZvciB3b3Jrc3BhY2VTeW1ib2wnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcmFtczogbHMuV29ya3NwYWNlU3ltYm9sUGFyYW1zID0ge3F1ZXJ5OiAnc29tZXRoaW5nJ307XHJcbiAgICAgIGF3YWl0IGxjLndvcmtzcGFjZVN5bWJvbChwYXJhbXMpO1xyXG5cclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5jYWxsZWQpLmVxdWFscyh0cnVlKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMF0pLmVxdWFscygnd29ya3NwYWNlL3N5bWJvbCcpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1sxXSkuZXF1YWxzKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2VuZHMgYSByZXF1ZXN0IGZvciBjb2RlQWN0aW9uJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBwYXJhbXM6IGxzLkNvZGVBY3Rpb25QYXJhbXMgPSB7XHJcbiAgICAgICAgdGV4dERvY3VtZW50OiB0ZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcy50ZXh0RG9jdW1lbnQsXHJcbiAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgIHN0YXJ0OiB7bGluZTogMSwgY2hhcmFjdGVyOiAxfSxcclxuICAgICAgICAgIGVuZDoge2xpbmU6IDI0LCBjaGFyYWN0ZXI6IDMyfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRleHQ6IHtkaWFnbm9zdGljczogW119LFxyXG4gICAgICB9O1xyXG4gICAgICBhd2FpdCBsYy5jb2RlQWN0aW9uKHBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1swXSkuZXF1YWxzKCd0ZXh0RG9jdW1lbnQvY29kZUFjdGlvbicpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1sxXSkuZXF1YWxzKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2VuZHMgYSByZXF1ZXN0IGZvciBjb2RlTGVucycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcGFyYW1zOiBscy5Db2RlTGVuc1BhcmFtcyA9IHtcclxuICAgICAgICB0ZXh0RG9jdW1lbnQ6IHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zLnRleHREb2N1bWVudCxcclxuICAgICAgfTtcclxuICAgICAgYXdhaXQgbGMuY29kZUxlbnMocGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9jb2RlTGVucycpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1sxXSkuZXF1YWxzKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2VuZHMgYSByZXF1ZXN0IGZvciBjb2RlTGVuc1Jlc29sdmUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcmFtczogbHMuQ29kZUxlbnMgPSB7XHJcbiAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgIHN0YXJ0OiB7bGluZTogMSwgY2hhcmFjdGVyOiAxfSxcclxuICAgICAgICAgIGVuZDoge2xpbmU6IDI0LCBjaGFyYWN0ZXI6IDMyfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgICBhd2FpdCBsYy5jb2RlTGVuc1Jlc29sdmUocGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ2NvZGVMZW5zL3Jlc29sdmUnKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMV0pLmVxdWFscyhwYXJhbXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3NlbmRzIGEgcmVxdWVzdCBmb3IgZG9jdW1lbnRMaW5rJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBwYXJhbXM6IGxzLkRvY3VtZW50TGlua1BhcmFtcyA9IHtcclxuICAgICAgICB0ZXh0RG9jdW1lbnQ6IHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zLnRleHREb2N1bWVudCxcclxuICAgICAgfTtcclxuICAgICAgYXdhaXQgbGMuZG9jdW1lbnRMaW5rKHBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1swXSkuZXF1YWxzKCd0ZXh0RG9jdW1lbnQvZG9jdW1lbnRMaW5rJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHMocGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZW5kcyBhIHJlcXVlc3QgZm9yIGRvY3VtZW50TGlua1Jlc29sdmUnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcmFtczogbHMuRG9jdW1lbnRMaW5rID0ge1xyXG4gICAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgICBzdGFydDoge2xpbmU6IDEsIGNoYXJhY3RlcjogMX0sXHJcbiAgICAgICAgICBlbmQ6IHtsaW5lOiAyNCwgY2hhcmFjdGVyOiAzMn0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0YXJnZXQ6ICdhYmMuZGVmLmdoaScsXHJcbiAgICAgIH07XHJcbiAgICAgIGF3YWl0IGxjLmRvY3VtZW50TGlua1Jlc29sdmUocGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ2RvY3VtZW50TGluay9yZXNvbHZlJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHMocGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZW5kcyBhIHJlcXVlc3QgZm9yIGRvY3VtZW50Rm9ybWF0dGluZycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcGFyYW1zOiBscy5Eb2N1bWVudEZvcm1hdHRpbmdQYXJhbXMgPSB7XHJcbiAgICAgICAgdGV4dERvY3VtZW50OiB0ZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcy50ZXh0RG9jdW1lbnQsXHJcbiAgICAgICAgb3B0aW9uczoge3RhYlNpemU6IDYsIGluc2VydFNwYWNlczogdHJ1ZSwgc29tZVZhbHVlOiAnb3B0aW9uYWwnfSxcclxuICAgICAgfTtcclxuICAgICAgYXdhaXQgbGMuZG9jdW1lbnRGb3JtYXR0aW5nKHBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1swXSkuZXF1YWxzKCd0ZXh0RG9jdW1lbnQvZm9ybWF0dGluZycpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1sxXSkuZXF1YWxzKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnc2VuZHMgYSByZXF1ZXN0IGZvciBkb2N1bWVudFJhbmdlRm9ybWF0dGluZycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcGFyYW1zOiBscy5Eb2N1bWVudFJhbmdlRm9ybWF0dGluZ1BhcmFtcyA9IHtcclxuICAgICAgICB0ZXh0RG9jdW1lbnQ6IHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zLnRleHREb2N1bWVudCxcclxuICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgc3RhcnQ6IHtsaW5lOiAxLCBjaGFyYWN0ZXI6IDF9LFxyXG4gICAgICAgICAgZW5kOiB7bGluZTogMjQsIGNoYXJhY3RlcjogMzJ9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3B0aW9uczoge3RhYlNpemU6IDYsIGluc2VydFNwYWNlczogdHJ1ZSwgc29tZVZhbHVlOiAnb3B0aW9uYWwnfSxcclxuICAgICAgfTtcclxuICAgICAgYXdhaXQgbGMuZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmcocGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9yYW5nZUZvcm1hdHRpbmcnKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMV0pLmVxdWFscyhwYXJhbXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3NlbmRzIGEgcmVxdWVzdCBmb3IgZG9jdW1lbnRPblR5cGVGb3JtYXR0aW5nJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBwYXJhbXM6IGxzLkRvY3VtZW50T25UeXBlRm9ybWF0dGluZ1BhcmFtcyA9IHtcclxuICAgICAgICB0ZXh0RG9jdW1lbnQ6IHRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zLnRleHREb2N1bWVudCxcclxuICAgICAgICBwb3NpdGlvbjoge2xpbmU6IDEsIGNoYXJhY3RlcjogMX0sXHJcbiAgICAgICAgY2g6ICd9JyxcclxuICAgICAgICBvcHRpb25zOiB7dGFiU2l6ZTogNiwgaW5zZXJ0U3BhY2VzOiB0cnVlLCBzb21lVmFsdWU6ICdvcHRpb25hbCd9LFxyXG4gICAgICB9O1xyXG4gICAgICBhd2FpdCBsYy5kb2N1bWVudE9uVHlwZUZvcm1hdHRpbmcocGFyYW1zKTtcclxuXHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9vblR5cGVGb3JtYXR0aW5nJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZFJlcXVlc3QuZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHMocGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZW5kcyBhIHJlcXVlc3QgZm9yIHJlbmFtZScsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcGFyYW1zOiBscy5SZW5hbWVQYXJhbXMgPSB7XHJcbiAgICAgICAgdGV4dERvY3VtZW50OiB7dXJpOiAnZmlsZTovLy9hL2IudHh0J30sXHJcbiAgICAgICAgcG9zaXRpb246IHtsaW5lOiAxLCBjaGFyYWN0ZXI6IDJ9LFxyXG4gICAgICAgIG5ld05hbWU6ICdhYnN0cmFjdENvbnN0cnVjdG9yRmFjdG9yeScsXHJcbiAgICAgIH07XHJcbiAgICAgIGF3YWl0IGxjLnJlbmFtZShwYXJhbXMpO1xyXG5cclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5jYWxsZWQpLmVxdWFscyh0cnVlKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kUmVxdWVzdC5nZXRDYWxsKDApLmFyZ3NbMF0pLmVxdWFscygndGV4dERvY3VtZW50L3JlbmFtZScpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmRSZXF1ZXN0LmdldENhbGwoMCkuYXJnc1sxXSkuZXF1YWxzKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ3NlbmQgbm90aWZpY2F0aW9ucycsICgpID0+IHtcclxuICAgIGNvbnN0IHRleHREb2N1bWVudEl0ZW06IGxzLlRleHREb2N1bWVudEl0ZW0gPSB7XHJcbiAgICAgIHVyaTogJ2ZpbGU6Ly8vYmVzdC9iaXRzLmpzJyxcclxuICAgICAgbGFuZ3VhZ2VJZDogJ2phdmFzY3JpcHQnLFxyXG4gICAgICB0ZXh0OiAnZnVuY3Rpb24gYSgpIHsgcmV0dXJuIFwiYlwiOyB9OycsXHJcbiAgICAgIHZlcnNpb246IDEsXHJcbiAgICB9O1xyXG4gICAgY29uc3QgdmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcjogbHMuVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllciA9IHtcclxuICAgICAgdXJpOiAnZmlsZTovLy9iZXN0L2JpdHMuanMnLFxyXG4gICAgICBsYW5ndWFnZUlkOiAnamF2YXNjcmlwdCcsXHJcbiAgICAgIHRleHQ6ICdmdW5jdGlvbiBhKCkgeyByZXR1cm4gXCJiXCI7IH07JyxcclxuICAgICAgdmVyc2lvbjogMSxcclxuICAgIH07XHJcblxyXG4gICAgbGV0IGxjO1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICBsYyA9IG5ldyBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb24oY3JlYXRlU3B5Q29ubmVjdGlvbigpLCBuZXcgTnVsbExvZ2dlcigpKTtcclxuICAgICAgc2lub24uc3R1YihsYywgJ19zZW5kTm90aWZpY2F0aW9uJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnZGlkQ2hhbmdlQ29uZmlndXJhdGlvbiBzZW5kcyBub3RpZmljYXRpb24nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcmFtczogbHMuRGlkQ2hhbmdlQ29uZmlndXJhdGlvblBhcmFtcyA9IHtcclxuICAgICAgICBzZXR0aW5nczoge2E6IHtiOiAnYyd9fSxcclxuICAgICAgfTtcclxuICAgICAgbGMuZGlkQ2hhbmdlQ29uZmlndXJhdGlvbihwYXJhbXMpO1xyXG5cclxuICAgICAgZXhwZWN0KGxjLl9zZW5kTm90aWZpY2F0aW9uLmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3dvcmtzcGFjZS9kaWRDaGFuZ2VDb25maWd1cmF0aW9uJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZE5vdGlmaWNhdGlvbi5nZXRDYWxsKDApLmFyZ3NbMV0pLmVxdWFscyhwYXJhbXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RpZE9wZW5UZXh0RG9jdW1lbnQgc2VuZHMgbm90aWZpY2F0aW9uJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBwYXJhbXM6IGxzLkRpZE9wZW5UZXh0RG9jdW1lbnRQYXJhbXMgPSB7XHJcbiAgICAgICAgdGV4dERvY3VtZW50OiB0ZXh0RG9jdW1lbnRJdGVtLFxyXG4gICAgICB9O1xyXG4gICAgICBsYy5kaWRPcGVuVGV4dERvY3VtZW50KHBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZE5vdGlmaWNhdGlvbi5nZXRDYWxsKDApLmFyZ3NbMF0pLmVxdWFscygndGV4dERvY3VtZW50L2RpZE9wZW4nKTtcclxuICAgICAgZXhwZWN0KGxjLl9zZW5kTm90aWZpY2F0aW9uLmdldENhbGwoMCkuYXJnc1sxXSkuZXF1YWxzKHBhcmFtcyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnZGlkQ2hhbmdlVGV4dERvY3VtZW50IHNlbmRzIG5vdGlmaWNhdGlvbicsICgpID0+IHtcclxuICAgICAgY29uc3QgcGFyYW1zOiBscy5EaWRDaGFuZ2VUZXh0RG9jdW1lbnRQYXJhbXMgPSB7XHJcbiAgICAgICAgdGV4dERvY3VtZW50OiB2ZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLFxyXG4gICAgICAgIGNvbnRlbnRDaGFuZ2VzOiBbXSxcclxuICAgICAgfTtcclxuICAgICAgbGMuZGlkQ2hhbmdlVGV4dERvY3VtZW50KHBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZE5vdGlmaWNhdGlvbi5nZXRDYWxsKDApLmFyZ3NbMF0pLmVxdWFscygndGV4dERvY3VtZW50L2RpZENoYW5nZScpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHMocGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdkaWRDbG9zZVRleHREb2N1bWVudCBzZW5kcyBub3RpZmljYXRpb24nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcmFtczogbHMuRGlkQ2xvc2VUZXh0RG9jdW1lbnRQYXJhbXMgPSB7XHJcbiAgICAgICAgdGV4dERvY3VtZW50OiB0ZXh0RG9jdW1lbnRJdGVtLFxyXG4gICAgICB9O1xyXG4gICAgICBsYy5kaWRDbG9zZVRleHREb2N1bWVudChwYXJhbXMpO1xyXG5cclxuICAgICAgZXhwZWN0KGxjLl9zZW5kTm90aWZpY2F0aW9uLmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9kaWRDbG9zZScpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHMocGFyYW1zKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdkaWRTYXZlVGV4dERvY3VtZW50IHNlbmRzIG5vdGlmaWNhdGlvbicsICgpID0+IHtcclxuICAgICAgY29uc3QgcGFyYW1zOiBscy5EaWRTYXZlVGV4dERvY3VtZW50UGFyYW1zID0ge1xyXG4gICAgICAgIHRleHREb2N1bWVudDogdGV4dERvY3VtZW50SXRlbSxcclxuICAgICAgfTtcclxuICAgICAgbGMuZGlkU2F2ZVRleHREb2N1bWVudChwYXJhbXMpO1xyXG5cclxuICAgICAgZXhwZWN0KGxjLl9zZW5kTm90aWZpY2F0aW9uLmNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uZ2V0Q2FsbCgwKS5hcmdzWzBdKS5lcXVhbHMoJ3RleHREb2N1bWVudC9kaWRTYXZlJyk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZE5vdGlmaWNhdGlvbi5nZXRDYWxsKDApLmFyZ3NbMV0pLmVxdWFscyhwYXJhbXMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RpZENoYW5nZVdhdGNoZWRGaWxlcyBzZW5kcyBub3RpZmljYXRpb24nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHBhcmFtczogbHMuRGlkQ2hhbmdlV2F0Y2hlZEZpbGVzUGFyYW1zID0ge2NoYW5nZXM6IFtdfTtcclxuICAgICAgbGMuZGlkQ2hhbmdlV2F0Y2hlZEZpbGVzKHBhcmFtcyk7XHJcblxyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uY2FsbGVkKS5lcXVhbHModHJ1ZSk7XHJcbiAgICAgIGV4cGVjdChsYy5fc2VuZE5vdGlmaWNhdGlvbi5nZXRDYWxsKDApLmFyZ3NbMF0pLmVxdWFscygnd29ya3NwYWNlL2RpZENoYW5nZVdhdGNoZWRGaWxlcycpO1xyXG4gICAgICBleHBlY3QobGMuX3NlbmROb3RpZmljYXRpb24uZ2V0Q2FsbCgwKS5hcmdzWzFdKS5lcXVhbHMocGFyYW1zKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnbm90aWZpY2F0aW9uIG1ldGhvZHMnLCAoKSA9PiB7XHJcbiAgICBsZXQgbGM7XHJcbiAgICBjb25zdCBldmVudE1hcCA9IHt9O1xyXG5cclxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgICBsYyA9IG5ldyBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb24oY3JlYXRlU3B5Q29ubmVjdGlvbigpLCBuZXcgTnVsbExvZ2dlcigpKTtcclxuICAgICAgc2lub24uc3R1YihsYywgJ19vbk5vdGlmaWNhdGlvbicpLmNhbGxzRmFrZSgobWVzc2FnZSwgY2FsbGJhY2spID0+IHtcclxuICAgICAgICBldmVudE1hcFttZXNzYWdlLm1ldGhvZF0gPSBjYWxsYmFjaztcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnb25FeGl0IGNhbGxzIGJhY2sgb24gZXhpdCcsICgpID0+IHtcclxuICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xyXG4gICAgICBsYy5vbkV4aXQoKCkgPT4ge1xyXG4gICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgICBldmVudE1hcC5leGl0KCk7XHJcbiAgICAgIGV4cGVjdChjYWxsZWQpLmVxdWFscyh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdvblNob3dNZXNzYWdlIGNhbGxzIGJhY2sgb24gd2luZG93L3Nob3dNZXNzYWdlJywgKCkgPT4ge1xyXG4gICAgICBsZXQgY2FsbGVkID0gZmFsc2U7XHJcbiAgICAgIGxjLm9uU2hvd01lc3NhZ2UoKCkgPT4ge1xyXG4gICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgIH0pO1xyXG4gICAgICBldmVudE1hcFsnd2luZG93L3Nob3dNZXNzYWdlJ10oKTtcclxuICAgICAgZXhwZWN0KGNhbGxlZCkuZXF1YWxzKHRydWUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=