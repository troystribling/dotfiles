"use strict";

var _main = require("./debugger/main");

const {
  shell
} = require("electron");

const whichSync = require("which").sync;

const {
  AutoLanguageClient
} = require("atom-languageclient");

const {
  detectVirtualEnv,
  detectPipEnv,
  replacePipEnvPathVar,
  sanitizeConfig
} = require("./utils");

// Ref: https://github.com/nteract/hydrogen/blob/master/lib/autocomplete-provider.js#L33
// adapted from http://stackoverflow.com/q/5474008
const PYTHON_REGEX = /(([^\d\W]|[\u00A0-\uFFFF])[\w.\u00A0-\uFFFF]*)|\.$/;

class PythonLanguageClient extends AutoLanguageClient {
  activate() {
    super.activate();

    if (!atom.packages.isPackageLoaded("atom-ide-base")) {
      // install if not installed
      // eslint-disable-next-line @typescript-eslint/no-var-requires
      require("atom-package-deps").install("ide-python", true).then(() => {
        // enable if disabled
        atom.packages.enablePackage("atom-ide-base");
        atom.notifications.addSuccess("ide-pyhon: atom-ide-base was installed and enabled...");
      });
    }
  }

  getGrammarScopes() {
    return ["source.python", "python"];
  }

  getLanguageName() {
    return "Python";
  }

  getServerName() {
    return "pyls";
  }

  getRootConfigurationKey() {
    return "ide-python";
  }

  activate() {
    // Remove deprecated option
    atom.config.unset("ide-python.pylsPath");
    super.activate();
    (0, _main.activate)();
  }

  mapConfigurationObject(configuration) {
    return {
      pyls: {
        configurationSources: configuration.pylsConfigurationSources,
        rope: sanitizeConfig(configuration.rope),
        plugins: configuration.pylsPlugins
      }
    };
  }

  async startServerProcess(projectPath) {
    const venvPath = (await detectPipEnv(projectPath)) || (await detectVirtualEnv(projectPath));
    const pylsEnvironment = Object.assign({}, process.env);

    if (venvPath) {
      pylsEnvironment["VIRTUAL_ENV"] = venvPath;
    }

    this.python = replacePipEnvPathVar(atom.config.get("ide-python.python"), venvPath);
    let pyls = atom.config.get("ide-python.pyls") || "pylsp"; // check if it exists

    if (whichSync(pyls, {
      nothrow: true
    }) === null) {
      pyls = "pyls";
    }

    const childProcess = super.spawn(this.python, ["-m", pyls], {
      cwd: projectPath,
      env: pylsEnvironment
    });
    return childProcess;
  }

  onSpawnError(err) {
    const description = err.code == "ENOENT" ? `No Python interpreter found at \`${this.python}\`.` : `Could not spawn the Python interpreter \`${this.python}\`.`;
    atom.notifications.addError("`ide-python` could not launch your Python runtime.", {
      dismissable: true,
      description: `${description}<p>If you have Python installed please set "Python Executable" setting correctly. If you do not please install Python.</p>`
    });
  }

  onSpawnClose(code, signal) {
    if (code !== 0 && signal == null) {
      atom.notifications.addError("Unable to start the Python language server.", {
        dismissable: true,
        buttons: [{
          text: "Install Instructions",
          onDidClick: () => atom.workspace.open("atom://config/packages/ide-python")
        }, {
          text: "Download Python",
          onDidClick: () => shell.openExternal("https://www.python.org/downloads/")
        }],
        description: "Make sure to install `pylsp` 0.19 or newer by running:\n" + "```\n" + `${this.python} -m pip install 'python-lsp-server[all]'\n` + `${this.python} -m pip install git+https://github.com/tomv564/pyls-mypy.git\n` + "```"
      });
    }
  }

  async getSuggestions(request) {
    if (!PYTHON_REGEX.test(request.prefix)) return null;
    return super.getSuggestions(request);
  }

  deactivate() {
    (0, _main.dispose)();
    return Promise.race([super.deactivate(), this.createTimeoutPromise(2000)]);
  }

  createTimeoutPromise(milliseconds) {
    return new Promise((resolve, reject) => {
      let timeout = setTimeout(() => {
        clearTimeout(timeout);
        this.logger.error(`Server failed to shutdown in ${milliseconds}ms, forcing termination`);
        resolve();
      }, milliseconds);
    });
  }

}

const pythonClient = new PythonLanguageClient();
pythonClient.createDebuggerProvider = _main.createDebuggerProvider; // add the debugger

module.exports = pythonClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsic2hlbGwiLCJyZXF1aXJlIiwid2hpY2hTeW5jIiwic3luYyIsIkF1dG9MYW5ndWFnZUNsaWVudCIsImRldGVjdFZpcnR1YWxFbnYiLCJkZXRlY3RQaXBFbnYiLCJyZXBsYWNlUGlwRW52UGF0aFZhciIsInNhbml0aXplQ29uZmlnIiwiUFlUSE9OX1JFR0VYIiwiUHl0aG9uTGFuZ3VhZ2VDbGllbnQiLCJhY3RpdmF0ZSIsImF0b20iLCJwYWNrYWdlcyIsImlzUGFja2FnZUxvYWRlZCIsImluc3RhbGwiLCJ0aGVuIiwiZW5hYmxlUGFja2FnZSIsIm5vdGlmaWNhdGlvbnMiLCJhZGRTdWNjZXNzIiwiZ2V0R3JhbW1hclNjb3BlcyIsImdldExhbmd1YWdlTmFtZSIsImdldFNlcnZlck5hbWUiLCJnZXRSb290Q29uZmlndXJhdGlvbktleSIsImNvbmZpZyIsInVuc2V0IiwibWFwQ29uZmlndXJhdGlvbk9iamVjdCIsImNvbmZpZ3VyYXRpb24iLCJweWxzIiwiY29uZmlndXJhdGlvblNvdXJjZXMiLCJweWxzQ29uZmlndXJhdGlvblNvdXJjZXMiLCJyb3BlIiwicGx1Z2lucyIsInB5bHNQbHVnaW5zIiwic3RhcnRTZXJ2ZXJQcm9jZXNzIiwicHJvamVjdFBhdGgiLCJ2ZW52UGF0aCIsInB5bHNFbnZpcm9ubWVudCIsIk9iamVjdCIsImFzc2lnbiIsInByb2Nlc3MiLCJlbnYiLCJweXRob24iLCJnZXQiLCJub3Rocm93IiwiY2hpbGRQcm9jZXNzIiwic3Bhd24iLCJjd2QiLCJvblNwYXduRXJyb3IiLCJlcnIiLCJkZXNjcmlwdGlvbiIsImNvZGUiLCJhZGRFcnJvciIsImRpc21pc3NhYmxlIiwib25TcGF3bkNsb3NlIiwic2lnbmFsIiwiYnV0dG9ucyIsInRleHQiLCJvbkRpZENsaWNrIiwid29ya3NwYWNlIiwib3BlbiIsIm9wZW5FeHRlcm5hbCIsImdldFN1Z2dlc3Rpb25zIiwicmVxdWVzdCIsInRlc3QiLCJwcmVmaXgiLCJkZWFjdGl2YXRlIiwiUHJvbWlzZSIsInJhY2UiLCJjcmVhdGVUaW1lb3V0UHJvbWlzZSIsIm1pbGxpc2Vjb25kcyIsInJlc29sdmUiLCJyZWplY3QiLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImNsZWFyVGltZW91dCIsImxvZ2dlciIsImVycm9yIiwicHl0aG9uQ2xpZW50IiwiY3JlYXRlRGVidWdnZXJQcm92aWRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBS0E7O0FBTEEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVlDLE9BQU8sQ0FBQyxVQUFELENBQXpCOztBQUNBLE1BQU1DLFNBQVMsR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBUCxDQUFpQkUsSUFBbkM7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQXlCSCxPQUFPLENBQUMscUJBQUQsQ0FBdEM7O0FBQ0EsTUFBTTtBQUFFSSxFQUFBQSxnQkFBRjtBQUFvQkMsRUFBQUEsWUFBcEI7QUFBa0NDLEVBQUFBLG9CQUFsQztBQUF3REMsRUFBQUE7QUFBeEQsSUFBMkVQLE9BQU8sQ0FBQyxTQUFELENBQXhGOztBQUlBO0FBQ0E7QUFDQSxNQUFNUSxZQUFZLEdBQUcsb0RBQXJCOztBQUVBLE1BQU1DLG9CQUFOLFNBQW1DTixrQkFBbkMsQ0FBc0Q7QUFDcERPLEVBQUFBLFFBQVEsR0FBRztBQUNULFVBQU1BLFFBQU47O0FBQ0EsUUFBSSxDQUFDQyxJQUFJLENBQUNDLFFBQUwsQ0FBY0MsZUFBZCxDQUE4QixlQUE5QixDQUFMLEVBQXFEO0FBQ25EO0FBQ0E7QUFDQWIsTUFBQUEsT0FBTyxDQUFDLG1CQUFELENBQVAsQ0FDR2MsT0FESCxDQUNXLFlBRFgsRUFDeUIsSUFEekIsRUFFR0MsSUFGSCxDQUVRLE1BQU07QUFDVjtBQUNBSixRQUFBQSxJQUFJLENBQUNDLFFBQUwsQ0FBY0ksYUFBZCxDQUE0QixlQUE1QjtBQUNBTCxRQUFBQSxJQUFJLENBQUNNLGFBQUwsQ0FBbUJDLFVBQW5CLENBQThCLHVEQUE5QjtBQUNELE9B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LE9BSnVCLEVBSXJCRCxZQUpxQixDQUF4QjtBQUtELEtBTk0sQ0FBUDtBQU9EOztBQTFIbUQ7O0FBNkh0RCxNQUFNUSxZQUFZLEdBQUcsSUFBSXBFLG9CQUFKLEVBQXJCO0FBQ0FvRSxZQUFZLENBQUNDLHNCQUFiLEdBQXNDQSw0QkFBdEMsQyxDQUE2RDs7QUFDN0RDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsWUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHNoZWxsIH0gPSByZXF1aXJlKFwiZWxlY3Ryb25cIilcbmNvbnN0IHdoaWNoU3luYyA9IHJlcXVpcmUoXCJ3aGljaFwiKS5zeW5jXG5jb25zdCB7IEF1dG9MYW5ndWFnZUNsaWVudCB9ID0gcmVxdWlyZShcImF0b20tbGFuZ3VhZ2VjbGllbnRcIilcbmNvbnN0IHsgZGV0ZWN0VmlydHVhbEVudiwgZGV0ZWN0UGlwRW52LCByZXBsYWNlUGlwRW52UGF0aFZhciwgc2FuaXRpemVDb25maWcgfSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpXG5cbmltcG9ydCB7IGNyZWF0ZURlYnVnZ2VyUHJvdmlkZXIsIGFjdGl2YXRlIGFzIGRlYnVnZ2VyQWN0aXZhdGUsIGRpc3Bvc2UgYXMgZGVidWdnZXJEaXNwb3NlIH0gZnJvbSBcIi4vZGVidWdnZXIvbWFpblwiXG5cbi8vIFJlZjogaHR0cHM6Ly9naXRodWIuY29tL250ZXJhY3QvaHlkcm9nZW4vYmxvYi9tYXN0ZXIvbGliL2F1dG9jb21wbGV0ZS1wcm92aWRlci5qcyNMMzNcbi8vIGFkYXB0ZWQgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcS81NDc0MDA4XG5jb25zdCBQWVRIT05fUkVHRVggPSAvKChbXlxcZFxcV118W1xcdTAwQTAtXFx1RkZGRl0pW1xcdy5cXHUwMEEwLVxcdUZGRkZdKil8XFwuJC9cblxuY2xhc3MgUHl0aG9uTGFuZ3VhZ2VDbGllbnQgZXh0ZW5kcyBBdXRvTGFuZ3VhZ2VDbGllbnQge1xuICBhY3RpdmF0ZSgpIHtcbiAgICBzdXBlci5hY3RpdmF0ZSgpXG4gICAgaWYgKCFhdG9tLnBhY2thZ2VzLmlzUGFja2FnZUxvYWRlZChcImF0b20taWRlLWJhc2VcIikpIHtcbiAgICAgIC8vIGluc3RhbGwgaWYgbm90IGluc3RhbGxlZFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbiAgICAgIHJlcXVpcmUoXCJhdG9tLXBhY2thZ2UtZGVwc1wiKVxuICAgICAgICAuaW5zdGFsbChcImlkZS1weXRob25cIiwgdHJ1ZSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIC8vIGVuYWJsZSBpZiBkaXNhYmxlZFxuICAgICAgICAgIGF0b20ucGFja2FnZXMuZW5hYmxlUGFja2FnZShcImF0b20taWRlLWJhc2VcIilcbiAgICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkU3VjY2VzcyhcImlkZS1weWhvbjogYXRvbS1pZGUtYmFzZSB3YXMgaW5zdGFsbGVkIGFuZCBlbmFibGVkLi4uXCIpXG4gICAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZ2V0R3JhbW1hclNjb3BlcygpIHtcbiAgICByZXR1cm4gW1wic291cmNlLnB5dGhvblwiLCBcInB5dGhvblwiXVxuICB9XG5cbiAgZ2V0TGFuZ3VhZ2VOYW1lKCkge1xuICAgIHJldHVybiBcIlB5dGhvblwiXG4gIH1cblxuICBnZXRTZXJ2ZXJOYW1lKCkge1xuICAgIHJldHVybiBcInB5bHNcIlxuICB9XG5cbiAgZ2V0Um9vdENvbmZpZ3VyYXRpb25LZXkoKSB7XG4gICAgcmV0dXJuIFwiaWRlLXB5dGhvblwiXG4gIH1cblxuICBhY3RpdmF0ZSgpIHtcbiAgICAvLyBSZW1vdmUgZGVwcmVjYXRlZCBvcHRpb25cbiAgICBhdG9tLmNvbmZpZy51bnNldChcImlkZS1weXRob24ucHlsc1BhdGhcIilcbiAgICBzdXBlci5hY3RpdmF0ZSgpXG4gICAgZGVidWdnZXJBY3RpdmF0ZSgpXG4gIH1cblxuICBtYXBDb25maWd1cmF0aW9uT2JqZWN0KGNvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHlsczoge1xuICAgICAgICBjb25maWd1cmF0aW9uU291cmNlczogY29uZmlndXJhdGlvbi5weWxzQ29uZmlndXJhdGlvblNvdXJjZXMsXG4gICAgICAgIHJvcGU6IHNhbml0aXplQ29uZmlnKGNvbmZpZ3VyYXRpb24ucm9wZSksXG4gICAgICAgIHBsdWdpbnM6IGNvbmZpZ3VyYXRpb24ucHlsc1BsdWdpbnMsXG4gICAgICB9LFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN0YXJ0U2VydmVyUHJvY2Vzcyhwcm9qZWN0UGF0aCkge1xuICAgIGNvbnN0IHZlbnZQYXRoID0gKGF3YWl0IGRldGVjdFBpcEVudihwcm9qZWN0UGF0aCkpIHx8IChhd2FpdCBkZXRlY3RWaXJ0dWFsRW52KHByb2plY3RQYXRoKSlcbiAgICBjb25zdCBweWxzRW52aXJvbm1lbnQgPSBPYmplY3QuYXNzaWduKHt9LCBwcm9jZXNzLmVudilcbiAgICBpZiAodmVudlBhdGgpIHtcbiAgICAgIHB5bHNFbnZpcm9ubWVudFtcIlZJUlRVQUxfRU5WXCJdID0gdmVudlBhdGhcbiAgICB9XG4gICAgdGhpcy5weXRob24gPSByZXBsYWNlUGlwRW52UGF0aFZhcihhdG9tLmNvbmZpZy5nZXQoXCJpZGUtcHl0aG9uLnB5dGhvblwiKSwgdmVudlBhdGgpXG5cbiAgICBsZXQgcHlscyA9IGF0b20uY29uZmlnLmdldChcImlkZS1weXRob24ucHlsc1wiKSB8fCBcInB5bHNwXCJcbiAgICAvLyBjaGVjayBpZiBpdCBleGlzdHNcbiAgICBpZiAod2hpY2hTeW5jKHB5bHMsIHsgbm90aHJvdzogdHJ1ZSB9KSA9PT0gbnVsbCkge1xuICAgICAgcHlscyA9IFwicHlsc1wiXG4gICAgfVxuICAgIGNvbnN0IGNoaWxkUHJvY2VzcyA9IHN1cGVyLnNwYXduKHRoaXMucHl0aG9uLCBbXCItbVwiLCBweWxzXSwge1xuICAgICAgY3dkOiBwcm9qZWN0UGF0aCxcbiAgICAgIGVudjogcHlsc0Vudmlyb25tZW50LFxuICAgIH0pXG4gICAgcmV0dXJuIGNoaWxkUHJvY2Vzc1xuICB9XG5cbiAgb25TcGF3bkVycm9yKGVycikge1xuICAgIGNvbnN0IGRlc2NyaXB0aW9uID1cbiAgICAgIGVyci5jb2RlID09IFwiRU5PRU5UXCJcbiAgICAgICAgPyBgTm8gUHl0aG9uIGludGVycHJldGVyIGZvdW5kIGF0IFxcYCR7dGhpcy5weXRob259XFxgLmBcbiAgICAgICAgOiBgQ291bGQgbm90IHNwYXduIHRoZSBQeXRob24gaW50ZXJwcmV0ZXIgXFxgJHt0aGlzLnB5dGhvbn1cXGAuYFxuICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihcImBpZGUtcHl0aG9uYCBjb3VsZCBub3QgbGF1bmNoIHlvdXIgUHl0aG9uIHJ1bnRpbWUuXCIsIHtcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgZGVzY3JpcHRpb246IGAke2Rlc2NyaXB0aW9ufTxwPklmIHlvdSBoYXZlIFB5dGhvbiBpbnN0YWxsZWQgcGxlYXNlIHNldCBcIlB5dGhvbiBFeGVjdXRhYmxlXCIgc2V0dGluZyBjb3JyZWN0bHkuIElmIHlvdSBkbyBub3QgcGxlYXNlIGluc3RhbGwgUHl0aG9uLjwvcD5gLFxuICAgIH0pXG4gIH1cblxuICBvblNwYXduQ2xvc2UoY29kZSwgc2lnbmFsKSB7XG4gICAgaWYgKGNvZGUgIT09IDAgJiYgc2lnbmFsID09IG51bGwpIHtcbiAgICAgIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihcIlVuYWJsZSB0byBzdGFydCB0aGUgUHl0aG9uIGxhbmd1YWdlIHNlcnZlci5cIiwge1xuICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcbiAgICAgICAgYnV0dG9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRleHQ6IFwiSW5zdGFsbCBJbnN0cnVjdGlvbnNcIixcbiAgICAgICAgICAgIG9uRGlkQ2xpY2s6ICgpID0+IGF0b20ud29ya3NwYWNlLm9wZW4oXCJhdG9tOi8vY29uZmlnL3BhY2thZ2VzL2lkZS1weXRob25cIiksXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiBcIkRvd25sb2FkIFB5dGhvblwiLFxuICAgICAgICAgICAgb25EaWRDbGljazogKCkgPT4gc2hlbGwub3BlbkV4dGVybmFsKFwiaHR0cHM6Ly93d3cucHl0aG9uLm9yZy9kb3dubG9hZHMvXCIpLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgIFwiTWFrZSBzdXJlIHRvIGluc3RhbGwgYHB5bHNwYCAwLjE5IG9yIG5ld2VyIGJ5IHJ1bm5pbmc6XFxuXCIgK1xuICAgICAgICAgIFwiYGBgXFxuXCIgK1xuICAgICAgICAgIGAke3RoaXMucHl0aG9ufSAtbSBwaXAgaW5zdGFsbCAncHl0aG9uLWxzcC1zZXJ2ZXJbYWxsXSdcXG5gICtcbiAgICAgICAgICBgJHt0aGlzLnB5dGhvbn0gLW0gcGlwIGluc3RhbGwgZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS90b212NTY0L3B5bHMtbXlweS5naXRcXG5gICtcbiAgICAgICAgICBcImBgYFwiLFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRTdWdnZXN0aW9ucyhyZXF1ZXN0KSB7XG4gICAgaWYgKCFQWVRIT05fUkVHRVgudGVzdChyZXF1ZXN0LnByZWZpeCkpIHJldHVybiBudWxsXG4gICAgcmV0dXJuIHN1cGVyLmdldFN1Z2dlc3Rpb25zKHJlcXVlc3QpXG4gIH1cblxuICBkZWFjdGl2YXRlKCkge1xuICAgIGRlYnVnZ2VyRGlzcG9zZSgpXG4gICAgcmV0dXJuIFByb21pc2UucmFjZShbc3VwZXIuZGVhY3RpdmF0ZSgpLCB0aGlzLmNyZWF0ZVRpbWVvdXRQcm9taXNlKDIwMDApXSlcbiAgfVxuXG4gIGNyZWF0ZVRpbWVvdXRQcm9taXNlKG1pbGxpc2Vjb25kcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dClcbiAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoYFNlcnZlciBmYWlsZWQgdG8gc2h1dGRvd24gaW4gJHttaWxsaXNlY29uZHN9bXMsIGZvcmNpbmcgdGVybWluYXRpb25gKVxuICAgICAgICByZXNvbHZlKClcbiAgICAgIH0sIG1pbGxpc2Vjb25kcylcbiAgICB9KVxuICB9XG59XG5cbmNvbnN0IHB5dGhvbkNsaWVudCA9IG5ldyBQeXRob25MYW5ndWFnZUNsaWVudCgpXG5weXRob25DbGllbnQuY3JlYXRlRGVidWdnZXJQcm92aWRlciA9IGNyZWF0ZURlYnVnZ2VyUHJvdmlkZXIgLy8gYWRkIHRoZSBkZWJ1Z2dlclxubW9kdWxlLmV4cG9ydHMgPSBweXRob25DbGllbnRcbiJdfQ==