"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class ProviderRegistry {
  constructor() {
    this._providers = void 0;
    this._providers = [];
  }

  addProvider(provider) {
    const index = this._providers.findIndex(p => provider.priority > p.priority);

    if (index === -1) {
      this._providers.push(provider);
    } else {
      this._providers.splice(index, 0, provider);
    }

    return new _UniversalDisposable.default(() => {
      this.removeProvider(provider);
    });
  }

  removeProvider(provider) {
    const index = this._providers.indexOf(provider);

    if (index !== -1) {
      this._providers.splice(index, 1);
    }
  } // TODO deprecate since there can be N providers.


  getProviderForEditor(editor) {
    const grammar = editor.getGrammar().scopeName;
    return this.findProvider(grammar);
  } // TODO create an ordering or priority aware util to prefer instead.


  getAllProvidersForEditor(editor) {
    const grammar = editor.getGrammar().scopeName;
    return this.findAllProviders(grammar);
  }

  findProvider(grammar) {
    for (const provider of this.findAllProviders(grammar)) {
      return provider;
    }

    return null;
  }
  /**
   * Iterates over all providers matching the grammar, in priority order.
   */


  *findAllProviders(grammar) {
    for (const provider of this._providers) {
      if (provider.grammarScopes == null || provider.grammarScopes.indexOf(grammar) !== -1) {
        yield provider;
      }
    }
  }

}

exports.default = ProviderRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vUHJvdmlkZXJSZWdpc3RyeS5qcyJdLCJuYW1lcyI6WyJQcm92aWRlclJlZ2lzdHJ5IiwiY29uc3RydWN0b3IiLCJfcHJvdmlkZXJzIiwiYWRkUHJvdmlkZXIiLCJwcm92aWRlciIsImluZGV4IiwiZmluZEluZGV4IiwicCIsInByaW9yaXR5IiwicHVzaCIsInNwbGljZSIsIlVuaXZlcnNhbERpc3Bvc2FibGUiLCJyZW1vdmVQcm92aWRlciIsImluZGV4T2YiLCJnZXRQcm92aWRlckZvckVkaXRvciIsImVkaXRvciIsImdyYW1tYXIiLCJnZXRHcmFtbWFyIiwic2NvcGVOYW1lIiwiZmluZFByb3ZpZGVyIiwiZ2V0QWxsUHJvdmlkZXJzRm9yRWRpdG9yIiwiZmluZEFsbFByb3ZpZGVycyIsImdyYW1tYXJTY29wZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7OztBQVpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFXZSxNQUFNQSxnQkFBTixDQUFvQztBQUdqREMsRUFBQUEsV0FBVyxHQUFHO0FBQUEsU0FGZEMsVUFFYztBQUNaLFNBQUtBLFVBQUwsR0FBa0IsRUFBbEI7QUFDRDs7QUFFREMsRUFBQUEsV0FBVyxDQUFDQyxRQUFELEVBQTJCO0FBQ3BDLFVBQU1DLEtBQUssR0FBRyxLQUFLSCxVQUFMLENBQWdCSSxTQUFoQixDQUNaQyxDQUFDLElBQUlILFFBQVEsQ0FBQ0ksUUFBVCxHQUFvQkQsQ0FBQyxDQUFDQyxRQURmLENBQWQ7O0FBR0EsUUFBSUgsS0FBSyxLQUFLLENBQUMsQ0FBZixFQUFrQjtBQUNoQixXQUFLSCxVQUFMLENBQWdCTyxJQUFoQixDQUFxQkwsUUFBckI7QUFDRCxLQUZELE1BRU87QUFDTCxXQUFLRixVQUFMLENBQWdCUSxNQUFoQixDQUF1QkwsS0FBdkIsRUFBOEIsQ0FBOUIsRUFBaUNELFFBQWpDO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFJTyw0QkFBSixDQUF3QixNQUFNO0FBQ25DLFdBQUtDLGNBQUwsQ0FBb0JSLFFBQXBCO0FBQ0QsS0FGTSxDQUFQO0FBR0Q7O0FBRURRLEVBQUFBLGNBQWMsQ0FBQ1IsUUFBRCxFQUFvQjtBQUNoQyxVQUFNQyxLQUFLLEdBQUcsS0FBS0gsVUFBTCxDQUFnQlcsT0FBaEIsQ0FBd0JULFFBQXhCLENBQWQ7O0FBQ0EsUUFBSUMsS0FBSyxLQUFLLENBQUMsQ0FBZixFQUFrQjtBQUNoQixXQUFLSCxVQUFMLENBQWdCUSxNQUFoQixDQUF1QkwsS0FBdkIsRUFBOEIsQ0FBOUI7QUFDRDtBQUNGLEdBMUJnRCxDQTRCakQ7OztBQUNBUyxFQUFBQSxvQkFBb0IsQ0FBQ0MsTUFBRCxFQUE4QjtBQUNoRCxVQUFNQyxPQUFPLEdBQUdELE1BQU0sQ0FBQ0UsVUFBUCxHQUFvQkMsU0FBcEM7QUFDQSxXQUFPLEtBQUtDLFlBQUwsQ0FBa0JILE9BQWxCLENBQVA7QUFDRCxHQWhDZ0QsQ0FrQ2pEOzs7QUFDQUksRUFBQUEsd0JBQXdCLENBQUNMLE1BQUQsRUFBdUM7QUFDN0QsVUFBTUMsT0FBTyxHQUFHRCxNQUFNLENBQUNFLFVBQVAsR0FBb0JDLFNBQXBDO0FBQ0EsV0FBTyxLQUFLRyxnQkFBTCxDQUFzQkwsT0FBdEIsQ0FBUDtBQUNEOztBQUVERyxFQUFBQSxZQUFZLENBQUNILE9BQUQsRUFBc0I7QUFDaEMsU0FBSyxNQUFNWixRQUFYLElBQXVCLEtBQUtpQixnQkFBTCxDQUFzQkwsT0FBdEIsQ0FBdkIsRUFBdUQ7QUFDckQsYUFBT1osUUFBUDtBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDbUIsR0FBaEJpQixnQkFBZ0IsQ0FBQ0wsT0FBRCxFQUErQjtBQUM5QyxTQUFLLE1BQU1aLFFBQVgsSUFBdUIsS0FBS0YsVUFBNUIsRUFBd0M7QUFDdEMsVUFDRUUsUUFBUSxDQUFDa0IsYUFBVCxJQUEwQixJQUExQixJQUNBbEIsUUFBUSxDQUFDa0IsYUFBVCxDQUF1QlQsT0FBdkIsQ0FBK0JHLE9BQS9CLE1BQTRDLENBQUMsQ0FGL0MsRUFHRTtBQUNBLGNBQU1aLFFBQU47QUFDRDtBQUNGO0FBQ0Y7O0FBM0RnRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCBVbml2ZXJzYWxEaXNwb3NhYmxlIGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL1VuaXZlcnNhbERpc3Bvc2FibGUnO1xyXG5cclxuZXhwb3J0IHR5cGUgUHJvdmlkZXIgPSB7XHJcbiAgLy8gUHJvdmlkZXJzIHdpdGggaGlnaGVyIHByaW9yaXRpZXMgd2lsbCBiZSBwcmVmZXJyZWQgb3ZlciBsb3dlciBvbmVzLlxyXG4gIHByaW9yaXR5OiBudW1iZXIsXHJcbiAgLy8gT21pdHRpbmcgZ3JhbW1hclNjb3BlcyBpbXBsaWVzIHRoYXQgdGhlIHByb3ZpZGVyIGFwcGxpZXMgdG8gYWxsIGdyYW1tYXJzLlxyXG4gICtncmFtbWFyU2NvcGVzPzogQXJyYXk8c3RyaW5nPixcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb3ZpZGVyUmVnaXN0cnk8VDogUHJvdmlkZXI+IHtcclxuICBfcHJvdmlkZXJzOiBBcnJheTxUPjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLl9wcm92aWRlcnMgPSBbXTtcclxuICB9XHJcblxyXG4gIGFkZFByb3ZpZGVyKHByb3ZpZGVyOiBUKTogSURpc3Bvc2FibGUge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9wcm92aWRlcnMuZmluZEluZGV4KFxyXG4gICAgICBwID0+IHByb3ZpZGVyLnByaW9yaXR5ID4gcC5wcmlvcml0eSxcclxuICAgICk7XHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgIHRoaXMuX3Byb3ZpZGVycy5wdXNoKHByb3ZpZGVyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX3Byb3ZpZGVycy5zcGxpY2UoaW5kZXgsIDAsIHByb3ZpZGVyKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgVW5pdmVyc2FsRGlzcG9zYWJsZSgoKSA9PiB7XHJcbiAgICAgIHRoaXMucmVtb3ZlUHJvdmlkZXIocHJvdmlkZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW1vdmVQcm92aWRlcihwcm92aWRlcjogVCk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9wcm92aWRlcnMuaW5kZXhPZihwcm92aWRlcik7XHJcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgIHRoaXMuX3Byb3ZpZGVycy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVE9ETyBkZXByZWNhdGUgc2luY2UgdGhlcmUgY2FuIGJlIE4gcHJvdmlkZXJzLlxyXG4gIGdldFByb3ZpZGVyRm9yRWRpdG9yKGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yKTogP1Qge1xyXG4gICAgY29uc3QgZ3JhbW1hciA9IGVkaXRvci5nZXRHcmFtbWFyKCkuc2NvcGVOYW1lO1xyXG4gICAgcmV0dXJuIHRoaXMuZmluZFByb3ZpZGVyKGdyYW1tYXIpO1xyXG4gIH1cclxuXHJcbiAgLy8gVE9ETyBjcmVhdGUgYW4gb3JkZXJpbmcgb3IgcHJpb3JpdHkgYXdhcmUgdXRpbCB0byBwcmVmZXIgaW5zdGVhZC5cclxuICBnZXRBbGxQcm92aWRlcnNGb3JFZGl0b3IoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IpOiBJdGVyYWJsZTxUPiB7XHJcbiAgICBjb25zdCBncmFtbWFyID0gZWRpdG9yLmdldEdyYW1tYXIoKS5zY29wZU5hbWU7XHJcbiAgICByZXR1cm4gdGhpcy5maW5kQWxsUHJvdmlkZXJzKGdyYW1tYXIpO1xyXG4gIH1cclxuXHJcbiAgZmluZFByb3ZpZGVyKGdyYW1tYXI6IHN0cmluZyk6ID9UIHtcclxuICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgdGhpcy5maW5kQWxsUHJvdmlkZXJzKGdyYW1tYXIpKSB7XHJcbiAgICAgIHJldHVybiBwcm92aWRlcjtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSXRlcmF0ZXMgb3ZlciBhbGwgcHJvdmlkZXJzIG1hdGNoaW5nIHRoZSBncmFtbWFyLCBpbiBwcmlvcml0eSBvcmRlci5cclxuICAgKi9cclxuICAqZmluZEFsbFByb3ZpZGVycyhncmFtbWFyOiBzdHJpbmcpOiBJdGVyYWJsZTxUPiB7XHJcbiAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHRoaXMuX3Byb3ZpZGVycykge1xyXG4gICAgICBpZiAoXHJcbiAgICAgICAgcHJvdmlkZXIuZ3JhbW1hclNjb3BlcyA9PSBudWxsIHx8XHJcbiAgICAgICAgcHJvdmlkZXIuZ3JhbW1hclNjb3Blcy5pbmRleE9mKGdyYW1tYXIpICE9PSAtMVxyXG4gICAgICApIHtcclxuICAgICAgICB5aWVsZCBwcm92aWRlcjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=