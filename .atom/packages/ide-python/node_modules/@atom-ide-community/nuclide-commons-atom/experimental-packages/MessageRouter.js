"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _log4js = require("log4js");

var _collection = require("@atom-ide-community/nuclide-commons/collection");

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var jsonrpc = _interopRequireWildcard(require("vscode-jsonrpc"));

var _messageReader = require("vscode-jsonrpc/lib/messageReader");

var _messageWriter = require("vscode-jsonrpc/lib/messageWriter");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * In the new package model, communication between packages will be modeled as sockets.
 * For each producer <-> consumer pair, we will create a socket:
 * the consumer gets one end of the socket, while the producer gets the other end.
 */
class MessageRouter {
  constructor() {
    this._curSocketID = 1;
    this._sockets = new Map();
    this._buffer = new _collection.DefaultMap(Array);
  }

  /**
   * Returns a pair of sockets.
   */
  getSocket() {
    const socket = [this._curSocketID, -this._curSocketID];
    this._curSocketID++;
    return socket;
  }

  reverseSocket(socket) {
    return -socket;
  }

  send(message) {
    const {
      socket
    } = message;

    const subject = this._sockets.get(socket);

    if (subject == null) {
      this._buffer.get(socket).push(message);
    } else {
      subject.next(message);
    }
  }

  getMessages(socket) {
    let subject = this._sockets.get(socket);

    if (subject == null) {
      subject = new _rxjsCompatUmdMin.Subject();

      this._sockets.set(socket, subject);

      const buffered = this._buffer.get(socket);

      this._buffer.delete(socket);

      return _rxjsCompatUmdMin.Observable.from(buffered).concat(subject);
    }

    return subject;
  }

  createConnection(socket, config) {
    const connection = jsonrpc.createMessageConnection( // Messages intended for socket actually come through -socket.
    new SimpleReader(cb => this.getMessages(this.reverseSocket(socket)).subscribe(cb)), // Tag each message with the socket it originated from.
    new SimpleWriter(msg => this.send({ ...msg,
      socket
    })), (0, _log4js.getLogger)('ExperimentalMessageRouter-jsonrpc'));
    connection.config = config || {};
    connection.listen();
    return connection;
  }

}

exports.default = MessageRouter;

class SimpleReader extends _messageReader.AbstractMessageReader {
  constructor(subscribe) {
    super();
    this._subscribe = void 0;
    this._subscribe = subscribe;
  }

  listen(callback) {
    this._subscribe(callback);
  }

}

class SimpleWriter extends _messageWriter.AbstractMessageWriter {
  constructor(write) {
    super();
    this._write = void 0;
    this._write = write;
  }

  write(message) {
    this._write(message);
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,