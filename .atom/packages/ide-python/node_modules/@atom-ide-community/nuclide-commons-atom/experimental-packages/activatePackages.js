"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = activateExperimentalPackages;

var _idx = _interopRequireDefault(require("idx"));

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _path = _interopRequireDefault(require("path"));

var _PackageRunners = require("./PackageRunners");

var _MessageRouter = _interopRequireDefault(require("./MessageRouter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// eslint-disable-line nuclide-internal/prefer-nuclide-uri
function activateExperimentalPackages(features) {
  const messageRouter = new _MessageRouter.default();
  const experimentalFeatures = getExperimentalFeatures(features);
  const availableServices = aggregateExperimentalServices(experimentalFeatures);
  const packages = [];
  const disposables = new _UniversalDisposable.default();
  const atomPackages = []; // TODO: split into multiple processes?

  const processPackages = [];
  experimentalFeatures.forEach(feature => {
    const experimentalSection = feature.pkg.experimental;

    const main = _path.default.join(feature.path, experimentalSection.main);

    const pkgParams = {
      main,
      consumedServices: createObject(),
      providedServices: createObject()
    };
    const consumedServicesRaw = experimentalSection.consumedServices;
    const providedServicesRaw = experimentalSection.providedServices; // Build a map of services consumed by this package.

    if (consumedServicesRaw != null) {
      Object.keys(consumedServicesRaw).forEach(key => {
        const {
          name,
          version,
          config
        } = consumedServicesRaw[key];
        const availableVersion = (0, _idx.default)(availableServices, _ => _[name][version]); // TODO: Handle missing required services.

        if (availableVersion != null) {
          const [inSocket, outSocket] = messageRouter.getSocket();
          pkgParams.consumedServices[key] = {
            socket: inSocket,
            client: availableVersion.client
          };
          availableVersion.rawConsumerConnections.push({
            socket: outSocket,
            config: config || {}
          });
        }
      });
    } // Build a map of services provided by this package.


    if (providedServicesRaw != null) {
      Object.keys(providedServicesRaw).forEach(key => {
        const {
          name,
          version
        } = providedServicesRaw[key];
        const availableVersion = (0, _idx.default)(availableServices, _ => _[name][version]); // TODO: Handle missing required services.

        if (availableVersion != null) {
          pkgParams.providedServices[key] = {
            // NOTE: This only becomes complete after checking all packages.
            rawConnections: availableVersion.rawConsumerConnections
          };
        }
      });
    }

    if (experimentalSection.runInAtom_UNSAFE) {
      atomPackages.push(pkgParams);
    } else {
      processPackages.push(pkgParams);
    }
  });

  if (atomPackages.length > 0) {
    packages.push(new _PackageRunners.AtomPackageRunner(atomPackages, messageRouter));
  }

  if (processPackages.length > 0) {
    packages.push(new _PackageRunners.ProcessPackageRunner(processPackages, messageRouter));
  } // Activate all the packages.


  packages.forEach(pkg => {
    disposables.add(pkg, pkg.onDidError(err => {
      atom.notifications.addError('Feature Process Crashed', {
        description: 'Please restart Atom to continue.',
        detail: String(err),
        buttons: [{
          className: 'icon icon-zap',
          text: 'Reload Atom',

          onDidClick() {
            atom.reload();
          }

        }]
      });
    }));
    pkg.activate();
  });
  return disposables;
}

function getExperimentalFeatures(features) {
  return features.filter( // $FlowIgnore
  feature => (0, _idx.default)(feature.pkg, _ => _.experimental.main) != null);
}

function aggregateExperimentalServices(features) {
  // Build a table of provided services.
  const table = createObject();
  features.forEach(feature => {
    const experimentalSection = feature.pkg.experimental;
    const {
      providedServices
    } = experimentalSection;

    if (providedServices != null) {
      Object.keys(providedServices).forEach(alias => {
        const {
          client,
          name,
          version
        } = providedServices[alias];
        const row = table[name] || (table[name] = {});

        const clientPath = _path.default.join(feature.path, client);

        row[version] = {
          client: clientPath,
          rawConsumerConnections: []
        };
      });
    }
  });
  return table;
} // An object that may safely be used as a map.


function createObject() {
  return Object.create(null);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vZXhwZXJpbWVudGFsLXBhY2thZ2VzL2FjdGl2YXRlUGFja2FnZXMuanMiXSwibmFtZXMiOlsiYWN0aXZhdGVFeHBlcmltZW50YWxQYWNrYWdlcyIsImZlYXR1cmVzIiwibWVzc2FnZVJvdXRlciIsIk1lc3NhZ2VSb3V0ZXIiLCJleHBlcmltZW50YWxGZWF0dXJlcyIsImdldEV4cGVyaW1lbnRhbEZlYXR1cmVzIiwiYXZhaWxhYmxlU2VydmljZXMiLCJhZ2dyZWdhdGVFeHBlcmltZW50YWxTZXJ2aWNlcyIsInBhY2thZ2VzIiwiZGlzcG9zYWJsZXMiLCJVbml2ZXJzYWxEaXNwb3NhYmxlIiwiYXRvbVBhY2thZ2VzIiwicHJvY2Vzc1BhY2thZ2VzIiwiZm9yRWFjaCIsImZlYXR1cmUiLCJleHBlcmltZW50YWxTZWN0aW9uIiwicGtnIiwiZXhwZXJpbWVudGFsIiwibWFpbiIsInBhdGgiLCJqb2luIiwicGtnUGFyYW1zIiwiY29uc3VtZWRTZXJ2aWNlcyIsImNyZWF0ZU9iamVjdCIsInByb3ZpZGVkU2VydmljZXMiLCJjb25zdW1lZFNlcnZpY2VzUmF3IiwicHJvdmlkZWRTZXJ2aWNlc1JhdyIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJuYW1lIiwidmVyc2lvbiIsImNvbmZpZyIsImF2YWlsYWJsZVZlcnNpb24iLCJfIiwiaW5Tb2NrZXQiLCJvdXRTb2NrZXQiLCJnZXRTb2NrZXQiLCJzb2NrZXQiLCJjbGllbnQiLCJyYXdDb25zdW1lckNvbm5lY3Rpb25zIiwicHVzaCIsInJhd0Nvbm5lY3Rpb25zIiwicnVuSW5BdG9tX1VOU0FGRSIsImxlbmd0aCIsIkF0b21QYWNrYWdlUnVubmVyIiwiUHJvY2Vzc1BhY2thZ2VSdW5uZXIiLCJhZGQiLCJvbkRpZEVycm9yIiwiZXJyIiwiYXRvbSIsIm5vdGlmaWNhdGlvbnMiLCJhZGRFcnJvciIsImRlc2NyaXB0aW9uIiwiZGV0YWlsIiwiU3RyaW5nIiwiYnV0dG9ucyIsImNsYXNzTmFtZSIsInRleHQiLCJvbkRpZENsaWNrIiwicmVsb2FkIiwiYWN0aXZhdGUiLCJmaWx0ZXIiLCJ0YWJsZSIsImFsaWFzIiwicm93IiwiY2xpZW50UGF0aCIsImNyZWF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQW1CQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQXZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV3lCO0FBYVYsU0FBU0EsNEJBQVQsQ0FDYkMsUUFEYSxFQUVBO0FBQ2IsUUFBTUMsYUFBYSxHQUFHLElBQUlDLHNCQUFKLEVBQXRCO0FBQ0EsUUFBTUMsb0JBQW9CLEdBQUdDLHVCQUF1QixDQUFDSixRQUFELENBQXBEO0FBQ0EsUUFBTUssaUJBQWlCLEdBQUdDLDZCQUE2QixDQUFDSCxvQkFBRCxDQUF2RDtBQUVBLFFBQU1JLFFBQVEsR0FBRyxFQUFqQjtBQUNBLFFBQU1DLFdBQVcsR0FBRyxJQUFJQyw0QkFBSixFQUFwQjtBQUVBLFFBQU1DLFlBQVksR0FBRyxFQUFyQixDQVJhLENBU2I7O0FBQ0EsUUFBTUMsZUFBZSxHQUFHLEVBQXhCO0FBRUFSLEVBQUFBLG9CQUFvQixDQUFDUyxPQUFyQixDQUE2QkMsT0FBTyxJQUFJO0FBQ3RDLFVBQU1DLG1CQUFrRCxHQUFJRCxPQUFPLENBQUNFLEdBQVQsQ0FDeERDLFlBREg7O0FBRUEsVUFBTUMsSUFBSSxHQUFHQyxjQUFLQyxJQUFMLENBQVVOLE9BQU8sQ0FBQ0ssSUFBbEIsRUFBd0JKLG1CQUFtQixDQUFDRyxJQUE1QyxDQUFiOztBQUNBLFVBQU1HLFNBQXdCLEdBQUc7QUFDL0JILE1BQUFBLElBRCtCO0FBRS9CSSxNQUFBQSxnQkFBZ0IsRUFBRUMsWUFBWSxFQUZDO0FBRy9CQyxNQUFBQSxnQkFBZ0IsRUFBRUQsWUFBWTtBQUhDLEtBQWpDO0FBTUEsVUFBTUUsbUJBQW1CLEdBQUdWLG1CQUFtQixDQUFDTyxnQkFBaEQ7QUFDQSxVQUFNSSxtQkFBbUIs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QUFBZUMsVUFBQUE7QUFBZixZQUEwQlAsZ0JBQWdCLENBQUN3QyxLQUFELENBQWhEO0FBQ0EsY0FBTUMsR0FBRyxHQUFHRixLQUFLLENBQUNqQyxJQUFELENBQUwsS0FBZ0JpQyxLQUFLLENBQUNqQyxJQUFELENBQUwsR0FBYyxFQUE5QixDQUFaOztBQUNBLGNBQU1vQyxVQUFVLEdBQUcvQyxjQUFLQyxJQUFMLENBQVVOLE9BQU8sQ0FBQ0ssSUFBbEIsRUFBd0JvQixNQUF4QixDQUFuQjs7QUFDQTBCLFFBQUFBLEdBQUcsQ0FBQ2xDLE9BQUQsQ0FBSCxHQUFlO0FBQUNRLFVBQUFBLE1BQU0sRUFBRTJCLFVBQVQ7QUFBcUIxQixVQUFBQSxzQkFBc0IsRUFBRTtBQUE3QyxTQUFmO0FBQ0QsT0FMRDtBQU1EO0FBQ0YsR0FaRDtBQWFBLFNBQU91QixLQUFQO0FBQ0QsQyxDQUVEOzs7QUFDQSxTQUFTeEMsWUFBVCxHQUFnQztBQUM5QixTQUFPSSxNQUFNLENBQUN3QyxNQUFQLENBQWMsSUFBZCxDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgdHlwZSB7RmVhdHVyZX0gZnJvbSAnLi4vRmVhdHVyZUxvYWRlcic7XHJcbmltcG9ydCB0eXBlIHtcclxuICBFeHBlcmltZW50YWxQYWNrYWdlRGVmaW5pdGlvbixcclxuICBQYWNrYWdlUGFyYW1zLFxyXG4gIFNvY2tldCxcclxufSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmltcG9ydCBpZHggZnJvbSAnaWR4JztcclxuaW1wb3J0IFVuaXZlcnNhbERpc3Bvc2FibGUgZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvVW5pdmVyc2FsRGlzcG9zYWJsZSc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG51Y2xpZGUtaW50ZXJuYWwvcHJlZmVyLW51Y2xpZGUtdXJpXHJcbmltcG9ydCB7QXRvbVBhY2thZ2VSdW5uZXIsIFByb2Nlc3NQYWNrYWdlUnVubmVyfSBmcm9tICcuL1BhY2thZ2VSdW5uZXJzJztcclxuaW1wb3J0IE1lc3NhZ2VSb3V0ZXIgZnJvbSAnLi9NZXNzYWdlUm91dGVyJztcclxuXHJcbnR5cGUgRXhwZXJpbWVudGFsU2VydmljZVRhYmxlID0ge1xyXG4gIFtzZXJ2aWNlTmFtZTogc3RyaW5nXToge1xyXG4gICAgW3ZlcnNpb246IHN0cmluZ106IHt8XHJcbiAgICAgIGNsaWVudDogc3RyaW5nLFxyXG4gICAgICByYXdDb25zdW1lckNvbm5lY3Rpb25zOiBBcnJheTx7fHNvY2tldDogU29ja2V0LCBjb25maWc6IE9iamVjdHx9PixcclxuICAgIHx9LFxyXG4gIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhY3RpdmF0ZUV4cGVyaW1lbnRhbFBhY2thZ2VzKFxyXG4gIGZlYXR1cmVzOiBBcnJheTxGZWF0dXJlPixcclxuKTogSURpc3Bvc2FibGUge1xyXG4gIGNvbnN0IG1lc3NhZ2VSb3V0ZXIgPSBuZXcgTWVzc2FnZVJvdXRlcigpO1xyXG4gIGNvbnN0IGV4cGVyaW1lbnRhbEZlYXR1cmVzID0gZ2V0RXhwZXJpbWVudGFsRmVhdHVyZXMoZmVhdHVyZXMpO1xyXG4gIGNvbnN0IGF2YWlsYWJsZVNlcnZpY2VzID0gYWdncmVnYXRlRXhwZXJpbWVudGFsU2VydmljZXMoZXhwZXJpbWVudGFsRmVhdHVyZXMpO1xyXG5cclxuICBjb25zdCBwYWNrYWdlcyA9IFtdO1xyXG4gIGNvbnN0IGRpc3Bvc2FibGVzID0gbmV3IFVuaXZlcnNhbERpc3Bvc2FibGUoKTtcclxuXHJcbiAgY29uc3QgYXRvbVBhY2thZ2VzID0gW107XHJcbiAgLy8gVE9ETzogc3BsaXQgaW50byBtdWx0aXBsZSBwcm9jZXNzZXM/XHJcbiAgY29uc3QgcHJvY2Vzc1BhY2thZ2VzID0gW107XHJcblxyXG4gIGV4cGVyaW1lbnRhbEZlYXR1cmVzLmZvckVhY2goZmVhdHVyZSA9PiB7XHJcbiAgICBjb25zdCBleHBlcmltZW50YWxTZWN0aW9uOiBFeHBlcmltZW50YWxQYWNrYWdlRGVmaW5pdGlvbiA9IChmZWF0dXJlLnBrZzogYW55KVxyXG4gICAgICAuZXhwZXJpbWVudGFsO1xyXG4gICAgY29uc3QgbWFpbiA9IHBhdGguam9pbihmZWF0dXJlLnBhdGgsIGV4cGVyaW1lbnRhbFNlY3Rpb24ubWFpbik7XHJcbiAgICBjb25zdCBwa2dQYXJhbXM6IFBhY2thZ2VQYXJhbXMgPSB7XHJcbiAgICAgIG1haW4sXHJcbiAgICAgIGNvbnN1bWVkU2VydmljZXM6IGNyZWF0ZU9iamVjdCgpLFxyXG4gICAgICBwcm92aWRlZFNlcnZpY2VzOiBjcmVhdGVPYmplY3QoKSxcclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgY29uc3VtZWRTZXJ2aWNlc1JhdyA9IGV4cGVyaW1lbnRhbFNlY3Rpb24uY29uc3VtZWRTZXJ2aWNlcztcclxuICAgIGNvbnN0IHByb3ZpZGVkU2VydmljZXNSYXcgPSBleHBlcmltZW50YWxTZWN0aW9uLnByb3ZpZGVkU2VydmljZXM7XHJcblxyXG4gICAgLy8gQnVpbGQgYSBtYXAgb2Ygc2VydmljZXMgY29uc3VtZWQgYnkgdGhpcyBwYWNrYWdlLlxyXG4gICAgaWYgKGNvbnN1bWVkU2VydmljZXNSYXcgIT0gbnVsbCkge1xyXG4gICAgICBPYmplY3Qua2V5cyhjb25zdW1lZFNlcnZpY2VzUmF3KS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgY29uc3Qge25hbWUsIHZlcnNpb24sIGNvbmZpZ30gPSBjb25zdW1lZFNlcnZpY2VzUmF3W2tleV07XHJcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlVmVyc2lvbiA9IGlkeChhdmFpbGFibGVTZXJ2aWNlcywgXyA9PiBfW25hbWVdW3ZlcnNpb25dKTtcclxuICAgICAgICAvLyBUT0RPOiBIYW5kbGUgbWlzc2luZyByZXF1aXJlZCBzZXJ2aWNlcy5cclxuICAgICAgICBpZiAoYXZhaWxhYmxlVmVyc2lvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgICBjb25zdCBbaW5Tb2NrZXQsIG91dFNvY2tldF0gPSBtZXNzYWdlUm91dGVyLmdldFNvY2tldCgpO1xyXG4gICAgICAgICAgcGtnUGFyYW1zLmNvbnN1bWVkU2VydmljZXNba2V5XSA9IHtcclxuICAgICAgICAgICAgc29ja2V0OiBpblNvY2tldCxcclxuICAgICAgICAgICAgY2xpZW50OiBhdmFpbGFibGVWZXJzaW9uLmNsaWVudCxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBhdmFpbGFibGVWZXJzaW9uLnJhd0NvbnN1bWVyQ29ubmVjdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICAgIHNvY2tldDogb3V0U29ja2V0LFxyXG4gICAgICAgICAgICBjb25maWc6IGNvbmZpZyB8fCB7fSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQnVpbGQgYSBtYXAgb2Ygc2VydmljZXMgcHJvdmlkZWQgYnkgdGhpcyBwYWNrYWdlLlxyXG4gICAgaWYgKHByb3ZpZGVkU2VydmljZXNSYXcgIT0gbnVsbCkge1xyXG4gICAgICBPYmplY3Qua2V5cyhwcm92aWRlZFNlcnZpY2VzUmF3KS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgY29uc3Qge25hbWUsIHZlcnNpb259ID0gcHJvdmlkZWRTZXJ2aWNlc1Jhd1trZXldO1xyXG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVZlcnNpb24gPSBpZHgoYXZhaWxhYmxlU2VydmljZXMsIF8gPT4gX1tuYW1lXVt2ZXJzaW9uXSk7XHJcbiAgICAgICAgLy8gVE9ETzogSGFuZGxlIG1pc3NpbmcgcmVxdWlyZWQgc2VydmljZXMuXHJcbiAgICAgICAgaWYgKGF2YWlsYWJsZVZlcnNpb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgcGtnUGFyYW1zLnByb3ZpZGVkU2VydmljZXNba2V5XSA9IHtcclxuICAgICAgICAgICAgLy8gTk9URTogVGhpcyBvbmx5IGJlY29tZXMgY29tcGxldGUgYWZ0ZXIgY2hlY2tpbmcgYWxsIHBhY2thZ2VzLlxyXG4gICAgICAgICAgICByYXdDb25uZWN0aW9uczogYXZhaWxhYmxlVmVyc2lvbi5yYXdDb25zdW1lckNvbm5lY3Rpb25zLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChleHBlcmltZW50YWxTZWN0aW9uLnJ1bkluQXRvbV9VTlNBRkUpIHtcclxuICAgICAgYXRvbVBhY2thZ2VzLnB1c2gocGtnUGFyYW1zKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHByb2Nlc3NQYWNrYWdlcy5wdXNoKHBrZ1BhcmFtcyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGlmIChhdG9tUGFja2FnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgcGFja2FnZXMucHVzaChuZXcgQXRvbVBhY2thZ2VSdW5uZXIoYXRvbVBhY2thZ2VzLCBtZXNzYWdlUm91dGVyKSk7XHJcbiAgfVxyXG5cclxuICBpZiAocHJvY2Vzc1BhY2thZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgIHBhY2thZ2VzLnB1c2gobmV3IFByb2Nlc3NQYWNrYWdlUnVubmVyKHByb2Nlc3NQYWNrYWdlcywgbWVzc2FnZVJvdXRlcikpO1xyXG4gIH1cclxuXHJcbiAgLy8gQWN0aXZhdGUgYWxsIHRoZSBwYWNrYWdlcy5cclxuICBwYWNrYWdlcy5mb3JFYWNoKHBrZyA9PiB7XHJcbiAgICBkaXNwb3NhYmxlcy5hZGQoXHJcbiAgICAgIHBrZyxcclxuICAgICAgcGtnLm9uRGlkRXJyb3IoZXJyID0+IHtcclxuICAgICAgICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoJ0ZlYXR1cmUgUHJvY2VzcyBDcmFzaGVkJywge1xyXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2UgcmVzdGFydCBBdG9tIHRvIGNvbnRpbnVlLicsXHJcbiAgICAgICAgICBkZXRhaWw6IFN0cmluZyhlcnIpLFxyXG4gICAgICAgICAgYnV0dG9uczogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnaWNvbiBpY29uLXphcCcsXHJcbiAgICAgICAgICAgICAgdGV4dDogJ1JlbG9hZCBBdG9tJyxcclxuICAgICAgICAgICAgICBvbkRpZENsaWNrKCkge1xyXG4gICAgICAgICAgICAgICAgYXRvbS5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gICAgcGtnLmFjdGl2YXRlKCk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBkaXNwb3NhYmxlcztcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RXhwZXJpbWVudGFsRmVhdHVyZXMoZmVhdHVyZXM6IEFycmF5PEZlYXR1cmU+KTogQXJyYXk8RmVhdHVyZT4ge1xyXG4gIHJldHVybiBmZWF0dXJlcy5maWx0ZXIoXHJcbiAgICAvLyAkRmxvd0lnbm9yZVxyXG4gICAgZmVhdHVyZSA9PiBpZHgoZmVhdHVyZS5wa2csIF8gPT4gXy5leHBlcmltZW50YWwubWFpbikgIT0gbnVsbCxcclxuICApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZ2dyZWdhdGVFeHBlcmltZW50YWxTZXJ2aWNlcyhcclxuICBmZWF0dXJlczogQXJyYXk8RmVhdHVyZT4sXHJcbik6IEV4cGVyaW1lbnRhbFNlcnZpY2VUYWJsZSB7XHJcbiAgLy8gQnVpbGQgYSB0YWJsZSBvZiBwcm92aWRlZCBzZXJ2aWNlcy5cclxuICBjb25zdCB0YWJsZTogRXhwZXJpbWVudGFsU2VydmljZVRhYmxlID0gY3JlYXRlT2JqZWN0KCk7XHJcbiAgZmVhdHVyZXMuZm9yRWFjaChmZWF0dXJlID0+IHtcclxuICAgIGNvbnN0IGV4cGVyaW1lbnRhbFNlY3Rpb246IEV4cGVyaW1lbnRhbFBhY2thZ2VEZWZpbml0aW9uID0gKGZlYXR1cmUucGtnOiBhbnkpXHJcbiAgICAgIC5leHBlcmltZW50YWw7XHJcbiAgICBjb25zdCB7cHJvdmlkZWRTZXJ2aWNlc30gPSBleHBlcmltZW50YWxTZWN0aW9uO1xyXG4gICAgaWYgKHByb3ZpZGVkU2VydmljZXMgIT0gbnVsbCkge1xyXG4gICAgICBPYmplY3Qua2V5cyhwcm92aWRlZFNlcnZpY2VzKS5mb3JFYWNoKGFsaWFzID0+IHtcclxuICAgICAgICBjb25zdCB7Y2xpZW50LCBuYW1lLCB2ZXJzaW9ufSA9IHByb3ZpZGVkU2VydmljZXNbYWxpYXNdO1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IHRhYmxlW25hbWVdIHx8ICh0YWJsZVtuYW1lXSA9IHt9KTtcclxuICAgICAgICBjb25zdCBjbGllbnRQYXRoID0gcGF0aC5qb2luKGZlYXR1cmUucGF0aCwgY2xpZW50KTtcclxuICAgICAgICByb3dbdmVyc2lvbl0gPSB7Y2xpZW50OiBjbGllbnRQYXRoLCByYXdDb25zdW1lckNvbm5lY3Rpb25zOiBbXX07XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiB0YWJsZTtcclxufVxyXG5cclxuLy8gQW4gb2JqZWN0IHRoYXQgbWF5IHNhZmVseSBiZSB1c2VkIGFzIGEgbWFwLlxyXG5mdW5jdGlvbiBjcmVhdGVPYmplY3QoKTogT2JqZWN0IHtcclxuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxufVxyXG4iXX0=