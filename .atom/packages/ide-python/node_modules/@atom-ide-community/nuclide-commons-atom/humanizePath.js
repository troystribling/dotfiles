"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = humanizePath;

var _idx = _interopRequireDefault(require("idx"));

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * Format a path for display. After the path is humanized, it should no longer be treated like a
 * parsable, navigable path; it's just for display.
 *
 * Note that this (intentionally) provides different results based on the projects currently open in
 * Atom. If you have multiple directories open, the result will be prefixed with one of their names.
 * If you only have one, it won't.
 */
function humanizePath(path, options) {
  const isDirectory = (0, _idx.default)(options, _ => _.isDirectory);
  const rootPaths = (0, _idx.default)(options, _ => _.rootPaths) || atom.project.getDirectories().map(dir => dir.getPath());
  const normalized = normalizePath(path, isDirectory);
  let resolved;

  for (const rootPath of rootPaths) {
    const normalizedDir = _nuclideUri.default.normalizeDir(rootPath);

    if (_nuclideUri.default.contains(normalizedDir, normalized)) {
      resolved = normalized.substr(normalizedDir.length);

      const rootName = _nuclideUri.default.basename(normalizedDir); // If the path is a root or there's more than one root, include the root's name.


      if (normalized === normalizedDir) {
        return _nuclideUri.default.normalizeDir(rootName);
      }

      if (rootPaths.length > 1) {
        return _nuclideUri.default.join(rootName, resolved);
      }

      return resolved;
    }
  } // It's not in one of the project directories so return the full (normalized)
  // path run through nuclideUriToDisplayString to remove nuclide:// etc.


  return _nuclideUri.default.nuclideUriToDisplayString(normalized);
}

function normalizePath(path, isDirectory_) {
  const isDirectory = isDirectory_ == null ? _nuclideUri.default.endsWithSeparator(path) : isDirectory_;
  return isDirectory ? _nuclideUri.default.normalizeDir(path) : _nuclideUri.default.normalize(path);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vaHVtYW5pemVQYXRoLmpzIl0sIm5hbWVzIjpbImh1bWFuaXplUGF0aCIsInBhdGgiLCJvcHRpb25zIiwiaXNEaXJlY3RvcnkiLCJfIiwicm9vdFBhdGhzIiwiYXRvbSIsInByb2plY3QiLCJnZXREaXJlY3RvcmllcyIsIm1hcCIsImRpciIsImdldFBhdGgiLCJub3JtYWxpemVkIiwibm9ybWFsaXplUGF0aCIsInJlc29sdmVkIiwicm9vdFBhdGgiLCJub3JtYWxpemVkRGlyIiwibnVjbGlkZVVyaSIsIm5vcm1hbGl6ZURpciIsImNvbnRhaW5zIiwic3Vic3RyIiwibGVuZ3RoIiwicm9vdE5hbWUiLCJiYXNlbmFtZSIsImpvaW4iLCJudWNsaWRlVXJpVG9EaXNwbGF5U3RyaW5nIiwiaXNEaXJlY3RvcnlfIiwiZW5kc1dpdGhTZXBhcmF0b3IiLCJub3JtYWxpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFjQTs7QUFDQTs7OztBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlLFNBQVNBLFlBQVQsQ0FDYkMsSUFEYSxFQUViQyxPQUZhLEVBTUw7QUFDUixRQUFNQyxXQUFXLEdBQUcsa0JBQUlELE9BQUosRUFBYUUsQ0FBQyxJQUFJQSxDQUFDLENBQUNELFdBQXBCLENBQXBCO0FBQ0EsUUFBTUUsU0FBUyxHQUNiLGtCQUFJSCxPQUFKLEVBQWFFLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxTQUFwQixLQUNBQyxJQUFJLENBQUNDLE9BQUwsQ0FBYUMsY0FBYixHQUE4QkMsR0FBOUIsQ0FBa0NDLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxPQUFKLEVBQXpDLENBRkY7QUFHQSxRQUFNQyxVQUFVLEdBQUdDLGFBQWEsQ0FBQ1osSUFBRCxFQUFPRSxXQUFQLENBQWhDO0FBQ0EsTUFBSVcsUUFBSjs7QUFDQSxPQUFLLE1BQU1DLFFBQVgsSUFBdUJWLFNBQXZCLEVBQWtDO0FBQ2hDLFVBQU1XLGFBQWEsR0FBR0Msb0JBQVdDLFlBQVgsQ0FBd0JILFFBQXhCLENBQXRCOztBQUNBLFFBQUlFLG9CQUFXRSxRQUFYLENBQW9CSCxhQUFwQixFQUFtQ0osVUFBbkMsQ0FBSixFQUFvRDtBQUNsREUsTUFBQUEsUUFBUSxHQUFHRixVQUFVLENBQUNRLE1BQVgsQ0FBa0JKLGFBQWEsQ0FBQ0ssTUFBaEMsQ0FBWDs7QUFDQSxZQUFNQyxRQUFRLEdBQUdMLG9CQUFXTSxRQUFYLENBQW9CUCxhQUFwQixDQUFqQixDQUZrRCxDQUdsRDs7O0FBQ0EsVUFBSUosVUFBVSxLQUFLSSxhQUFuQixFQUFrQztBQUNoQyxlQUFPQyxvQkFBV0MsWUFBWCxDQUF3QkksUUFBeEIsQ0FBUDtBQUNEOztBQUNELFVBQUlqQixTQUFTLENBQUNnQixNQUFWLEdBQW1CLENBQXZCLEVBQTBCO0FBQ3hCLGVBQU9KLG9CQUFXTyxJQUFYLENBQWdCRixRQUFoQixFQUEwQlIsUUFBMUIsQ0FBUDtBQUNEOztBQUNELGFBQU9BLFFBQVA7QUFDRDtBQUNGLEdBckJPLENBdUJSO0FBQ0E7OztBQUNBLFNBQU9HLG9CQUFXUSx5QkFBWCxDQUFxQ2IsVUFBckMsQ0FBUDtBQUNEOztBQUVELFNBQVNDLGFBQVQsQ0FBdUJaLElBQXZCLEVBQXlDeUIsWUFBekMsRUFBNkU7QUFDM0UsUUFBTXZCLFdBQVcsR0FDZnVCLFlBQVksSUFBSSxJQUFoQixHQUF1QlQsb0JBQVdVLGlCQUFYLENBQTZCMUIsSUFBN0IsQ0FBdkIsR0FBNER5QixZQUQ5RDtBQUVBLFNBQU92QixXQUFXLEdBQ2RjLG9CQUFXQyxZQUFYLENBQXdCakIsSUFBeEIsQ0FEYyxHQUVkZ0Isb0JBQVdXLFNBQVgsQ0FBcUIzQixJQUFyQixDQUZKO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgdHlwZSB7TnVjbGlkZVVyaX0gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvbnVjbGlkZVVyaSc7XHJcblxyXG5pbXBvcnQgaWR4IGZyb20gJ2lkeCc7XHJcbmltcG9ydCBudWNsaWRlVXJpIGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL251Y2xpZGVVcmknO1xyXG5cclxuLyoqXHJcbiAqIEZvcm1hdCBhIHBhdGggZm9yIGRpc3BsYXkuIEFmdGVyIHRoZSBwYXRoIGlzIGh1bWFuaXplZCwgaXQgc2hvdWxkIG5vIGxvbmdlciBiZSB0cmVhdGVkIGxpa2UgYVxyXG4gKiBwYXJzYWJsZSwgbmF2aWdhYmxlIHBhdGg7IGl0J3MganVzdCBmb3IgZGlzcGxheS5cclxuICpcclxuICogTm90ZSB0aGF0IHRoaXMgKGludGVudGlvbmFsbHkpIHByb3ZpZGVzIGRpZmZlcmVudCByZXN1bHRzIGJhc2VkIG9uIHRoZSBwcm9qZWN0cyBjdXJyZW50bHkgb3BlbiBpblxyXG4gKiBBdG9tLiBJZiB5b3UgaGF2ZSBtdWx0aXBsZSBkaXJlY3RvcmllcyBvcGVuLCB0aGUgcmVzdWx0IHdpbGwgYmUgcHJlZml4ZWQgd2l0aCBvbmUgb2YgdGhlaXIgbmFtZXMuXHJcbiAqIElmIHlvdSBvbmx5IGhhdmUgb25lLCBpdCB3b24ndC5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGh1bWFuaXplUGF0aChcclxuICBwYXRoOiBOdWNsaWRlVXJpLFxyXG4gIG9wdGlvbnM6ID97XHJcbiAgICBpc0RpcmVjdG9yeT86IGJvb2xlYW4sXHJcbiAgICByb290UGF0aHM/OiBBcnJheTxOdWNsaWRlVXJpPixcclxuICB9LFxyXG4pOiBzdHJpbmcge1xyXG4gIGNvbnN0IGlzRGlyZWN0b3J5ID0gaWR4KG9wdGlvbnMsIF8gPT4gXy5pc0RpcmVjdG9yeSk7XHJcbiAgY29uc3Qgcm9vdFBhdGhzID1cclxuICAgIGlkeChvcHRpb25zLCBfID0+IF8ucm9vdFBhdGhzKSB8fFxyXG4gICAgYXRvbS5wcm9qZWN0LmdldERpcmVjdG9yaWVzKCkubWFwKGRpciA9PiBkaXIuZ2V0UGF0aCgpKTtcclxuICBjb25zdCBub3JtYWxpemVkID0gbm9ybWFsaXplUGF0aChwYXRoLCBpc0RpcmVjdG9yeSk7XHJcbiAgbGV0IHJlc29sdmVkO1xyXG4gIGZvciAoY29uc3Qgcm9vdFBhdGggb2Ygcm9vdFBhdGhzKSB7XHJcbiAgICBjb25zdCBub3JtYWxpemVkRGlyID0gbnVjbGlkZVVyaS5ub3JtYWxpemVEaXIocm9vdFBhdGgpO1xyXG4gICAgaWYgKG51Y2xpZGVVcmkuY29udGFpbnMobm9ybWFsaXplZERpciwgbm9ybWFsaXplZCkpIHtcclxuICAgICAgcmVzb2x2ZWQgPSBub3JtYWxpemVkLnN1YnN0cihub3JtYWxpemVkRGlyLmxlbmd0aCk7XHJcbiAgICAgIGNvbnN0IHJvb3ROYW1lID0gbnVjbGlkZVVyaS5iYXNlbmFtZShub3JtYWxpemVkRGlyKTtcclxuICAgICAgLy8gSWYgdGhlIHBhdGggaXMgYSByb290IG9yIHRoZXJlJ3MgbW9yZSB0aGFuIG9uZSByb290LCBpbmNsdWRlIHRoZSByb290J3MgbmFtZS5cclxuICAgICAgaWYgKG5vcm1hbGl6ZWQgPT09IG5vcm1hbGl6ZWREaXIpIHtcclxuICAgICAgICByZXR1cm4gbnVjbGlkZVVyaS5ub3JtYWxpemVEaXIocm9vdE5hbWUpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChyb290UGF0aHMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIHJldHVybiBudWNsaWRlVXJpLmpvaW4ocm9vdE5hbWUsIHJlc29sdmVkKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gcmVzb2x2ZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJdCdzIG5vdCBpbiBvbmUgb2YgdGhlIHByb2plY3QgZGlyZWN0b3JpZXMgc28gcmV0dXJuIHRoZSBmdWxsIChub3JtYWxpemVkKVxyXG4gIC8vIHBhdGggcnVuIHRocm91Z2ggbnVjbGlkZVVyaVRvRGlzcGxheVN0cmluZyB0byByZW1vdmUgbnVjbGlkZTovLyBldGMuXHJcbiAgcmV0dXJuIG51Y2xpZGVVcmkubnVjbGlkZVVyaVRvRGlzcGxheVN0cmluZyhub3JtYWxpemVkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbm9ybWFsaXplUGF0aChwYXRoOiBOdWNsaWRlVXJpLCBpc0RpcmVjdG9yeV86ID9ib29sZWFuKTogTnVjbGlkZVVyaSB7XHJcbiAgY29uc3QgaXNEaXJlY3RvcnkgPVxyXG4gICAgaXNEaXJlY3RvcnlfID09IG51bGwgPyBudWNsaWRlVXJpLmVuZHNXaXRoU2VwYXJhdG9yKHBhdGgpIDogaXNEaXJlY3RvcnlfO1xyXG4gIHJldHVybiBpc0RpcmVjdG9yeVxyXG4gICAgPyBudWNsaWRlVXJpLm5vcm1hbGl6ZURpcihwYXRoKVxyXG4gICAgOiBudWNsaWRlVXJpLm5vcm1hbGl6ZShwYXRoKTtcclxufVxyXG4iXX0=