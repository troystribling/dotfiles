"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observeGrammarForTextEditors;

var _atom = require("atom");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const GRAMMAR_CHANGE_EVENT = 'grammar-change';
/**
 * A singleton that listens to grammar changes in all text editors.
 */

class GrammarForTextEditorsListener {
  constructor() {
    this._emitter = void 0;
    this._subscriptions = void 0;
    this._emitter = new _atom.Emitter();
    this._subscriptions = new _UniversalDisposable.default();

    this._subscriptions.add(this._emitter, atom.workspace.observeTextEditors(textEditor => {
      this._subscriptions.addUntilDestroyed(textEditor, textEditor.observeGrammar(grammar => {
        this._emitter.emit(GRAMMAR_CHANGE_EVENT, textEditor);
      }));
    }));
  }

  observeGrammarForTextEditors(fn) {
    function fnWithGrammar(textEditor) {
      fn(textEditor, textEditor.getGrammar());
    } // The event was already handled before `fn` was added to the emitter, so
    // we need to call it on all the existing editors.


    atom.workspace.getTextEditors().forEach(fnWithGrammar);
    return this._emitter.on(GRAMMAR_CHANGE_EVENT, fnWithGrammar);
  }

  dispose() {
    this._subscriptions.dispose();
  }

}

let grammarForTextEditorsListener;
/**
 * Use this to perform an action on every text editor with its latest grammar.
 *
 * @param fn This is called once for every text editor, and then again every
 * time it changes to a grammar.
 */

function observeGrammarForTextEditors(fn) {
  if (!grammarForTextEditorsListener) {
    grammarForTextEditorsListener = new GrammarForTextEditorsListener();
  }

  return grammarForTextEditorsListener.observeGrammarForTextEditors(fn);
}

if (atom.inSpecMode()) {
  observeGrammarForTextEditors.__reset__ = function () {
    if (grammarForTextEditorsListener) {
      grammarForTextEditorsListener.dispose();
      grammarForTextEditorsListener = null;
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vb2JzZXJ2ZS1ncmFtbWFyLWZvci10ZXh0LWVkaXRvcnMuanMiXSwibmFtZXMiOlsiR1JBTU1BUl9DSEFOR0VfRVZFTlQiLCJHcmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lciIsImNvbnN0cnVjdG9yIiwiX2VtaXR0ZXIiLCJfc3Vic2NyaXB0aW9ucyIsIkVtaXR0ZXIiLCJVbml2ZXJzYWxEaXNwb3NhYmxlIiwiYWRkIiwiYXRvbSIsIndvcmtzcGFjZSIsIm9ic2VydmVUZXh0RWRpdG9ycyIsInRleHRFZGl0b3IiLCJhZGRVbnRpbERlc3Ryb3llZCIsIm9ic2VydmVHcmFtbWFyIiwiZ3JhbW1hciIsImVtaXQiLCJvYnNlcnZlR3JhbW1hckZvclRleHRFZGl0b3JzIiwiZm4iLCJmbldpdGhHcmFtbWFyIiwiZ2V0R3JhbW1hciIsImdldFRleHRFZGl0b3JzIiwiZm9yRWFjaCIsIm9uIiwiZGlzcG9zZSIsImdyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyIiwiaW5TcGVjTW9kZSIsIl9fcmVzZXRfXyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOzs7O0FBYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUtBLE1BQU1BLG9CQUFvQixHQUFHLGdCQUE3QjtBQUVBO0FBQ0E7QUFDQTs7QUFDQSxNQUFNQyw2QkFBTixDQUFvQztBQUlsQ0MsRUFBQUEsV0FBVyxHQUFHO0FBQUEsU0FIZEMsUUFHYztBQUFBLFNBRmRDLGNBRWM7QUFDWixTQUFLRCxRQUFMLEdBQWdCLElBQUlFLGFBQUosRUFBaEI7QUFDQSxTQUFLRCxjQUFMLEdBQXNCLElBQUlFLDRCQUFKLEVBQXRCOztBQUNBLFNBQUtGLGNBQUwsQ0FBb0JHLEdBQXBCLENBQ0UsS0FBS0osUUFEUCxFQUVFSyxJQUFJLENBQUNDLFNBQUwsQ0FBZUMsa0JBQWYsQ0FBa0NDLFVBQVUsSUFBSTtBQUM5QyxXQUFLUCxjQUFMLENBQW9CUSxpQkFBcEIsQ0FDRUQsVUFERixFQUVFQSxVQUFVLENBQUNFLGNBQVgsQ0FBMEJDLE9BQU8sSUFBSTtBQUNuQyxhQUFLWCxRQUFMLENBQWNZLElBQWQsQ0FBbUJmLG9CQUFuQixFQUF5Q1csVUFBekM7QUFDRCxPQUZELENBRkY7QUFNRCxLQVBELENBRkY7QUFXRDs7QUFFREssRUFBQUEsNEJBQTRCLENBQzFCQyxFQUQwQixFQUViO0FBQ2IsYUFBU0MsYUFBVCxDQUF1QlAsVUFBdkIsRUFBbUM7QUFDakNNLE1BQUFBLEVBQUUsQ0FBQ04sVUFBRCxFQUFhQSxVQUFVLENBQUNRLFVBQVgsRUFBYixDQUFGO0FBQ0QsS0FIWSxDQUtiO0FBQ0E7OztBQUNBWCxJQUFBQSxJQUFJLENBQUNDLFNBQUwsQ0FBZVcsY0FBZixHQUFnQ0MsT0FBaEMsQ0FBd0NILGFBQXhDO0FBQ0EsV0FBTyxLQUFLZixRQUFMLENBQWNtQixFQUFkLENBQWlCdEIsb0JBQWpCLEVBQXVDa0IsYUFBdkMsQ0FBUDtBQUNEOztBQUVESyxFQUFBQSxPQUFPLEdBQVM7QUFDZCxTQUFLbkIsY0FBTCxDQUFvQm1CLE9BQXBCO0FBQ0Q7O0FBbkNpQzs7QUFzQ3BDLElBQUlDLDZCQUFKO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNlLFNBQVNSLDRCQUFULENBQ2JDLEVBRGEsRUFFQTtBQUNiLE1BQUksQ0FBQ08sNkJBQUwsRUFBb0M7QUFDbENBLElBQUFBLDZCQUE2QixHQUFHLElBQUl2Qiw2QkFBSixFQUFoQztBQUNEOztBQUNELFNBQU91Qiw2QkFBNkIsQ0FBQ1IsNEJBQTlCLENBQTJEQyxFQUEzRCxDQUFQO0FBQ0Q7O0FBRUQsSUFBSVQsSUFBSSxDQUFDaUIsVUFBTCxFQUFKLEVBQXVCO0FBQ3JCVCxFQUFBQSw0QkFBNEIsQ0FBQ1UsU0FBN0IsR0FBeUMsWUFBVztBQUNsRCxRQUFJRiw2QkFBSixFQUFtQztBQUNqQ0EsTUFBQUEsNkJBQTZCLENBQUNELE9BQTlCO0FBQ0FDLE1BQUFBLDZCQUE2QixHQUFHLElBQWhDO0FBQ0Q7QUFDRixHQUxEO0FBTUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQge0VtaXR0ZXJ9IGZyb20gJ2F0b20nO1xyXG5pbXBvcnQgVW5pdmVyc2FsRGlzcG9zYWJsZSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9Vbml2ZXJzYWxEaXNwb3NhYmxlJztcclxuXHJcbmNvbnN0IEdSQU1NQVJfQ0hBTkdFX0VWRU5UID0gJ2dyYW1tYXItY2hhbmdlJztcclxuXHJcbi8qKlxyXG4gKiBBIHNpbmdsZXRvbiB0aGF0IGxpc3RlbnMgdG8gZ3JhbW1hciBjaGFuZ2VzIGluIGFsbCB0ZXh0IGVkaXRvcnMuXHJcbiAqL1xyXG5jbGFzcyBHcmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lciB7XHJcbiAgX2VtaXR0ZXI6IEVtaXR0ZXI7XHJcbiAgX3N1YnNjcmlwdGlvbnM6IFVuaXZlcnNhbERpc3Bvc2FibGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fZW1pdHRlciA9IG5ldyBFbWl0dGVyKCk7XHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0gbmV3IFVuaXZlcnNhbERpc3Bvc2FibGUoKTtcclxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnMuYWRkKFxyXG4gICAgICB0aGlzLl9lbWl0dGVyLFxyXG4gICAgICBhdG9tLndvcmtzcGFjZS5vYnNlcnZlVGV4dEVkaXRvcnModGV4dEVkaXRvciA9PiB7XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9ucy5hZGRVbnRpbERlc3Ryb3llZChcclxuICAgICAgICAgIHRleHRFZGl0b3IsXHJcbiAgICAgICAgICB0ZXh0RWRpdG9yLm9ic2VydmVHcmFtbWFyKGdyYW1tYXIgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9lbWl0dGVyLmVtaXQoR1JBTU1BUl9DSEFOR0VfRVZFTlQsIHRleHRFZGl0b3IpO1xyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgKTtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgb2JzZXJ2ZUdyYW1tYXJGb3JUZXh0RWRpdG9ycyhcclxuICAgIGZuOiAodGV4dEVkaXRvcjogVGV4dEVkaXRvciwgZ3JhbW1hcjogYXRvbSRHcmFtbWFyKSA9PiB2b2lkLFxyXG4gICk6IElEaXNwb3NhYmxlIHtcclxuICAgIGZ1bmN0aW9uIGZuV2l0aEdyYW1tYXIodGV4dEVkaXRvcikge1xyXG4gICAgICBmbih0ZXh0RWRpdG9yLCB0ZXh0RWRpdG9yLmdldEdyYW1tYXIoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGhlIGV2ZW50IHdhcyBhbHJlYWR5IGhhbmRsZWQgYmVmb3JlIGBmbmAgd2FzIGFkZGVkIHRvIHRoZSBlbWl0dGVyLCBzb1xyXG4gICAgLy8gd2UgbmVlZCB0byBjYWxsIGl0IG9uIGFsbCB0aGUgZXhpc3RpbmcgZWRpdG9ycy5cclxuICAgIGF0b20ud29ya3NwYWNlLmdldFRleHRFZGl0b3JzKCkuZm9yRWFjaChmbldpdGhHcmFtbWFyKTtcclxuICAgIHJldHVybiB0aGlzLl9lbWl0dGVyLm9uKEdSQU1NQVJfQ0hBTkdFX0VWRU5ULCBmbldpdGhHcmFtbWFyKTtcclxuICB9XHJcblxyXG4gIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25zLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbmxldCBncmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lcjogP0dyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyO1xyXG5cclxuLyoqXHJcbiAqIFVzZSB0aGlzIHRvIHBlcmZvcm0gYW4gYWN0aW9uIG9uIGV2ZXJ5IHRleHQgZWRpdG9yIHdpdGggaXRzIGxhdGVzdCBncmFtbWFyLlxyXG4gKlxyXG4gKiBAcGFyYW0gZm4gVGhpcyBpcyBjYWxsZWQgb25jZSBmb3IgZXZlcnkgdGV4dCBlZGl0b3IsIGFuZCB0aGVuIGFnYWluIGV2ZXJ5XHJcbiAqIHRpbWUgaXQgY2hhbmdlcyB0byBhIGdyYW1tYXIuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvYnNlcnZlR3JhbW1hckZvclRleHRFZGl0b3JzKFxyXG4gIGZuOiAodGV4dEVkaXRvcjogVGV4dEVkaXRvciwgZ3JhbW1hcjogYXRvbSRHcmFtbWFyKSA9PiB2b2lkLFxyXG4pOiBJRGlzcG9zYWJsZSB7XHJcbiAgaWYgKCFncmFtbWFyRm9yVGV4dEVkaXRvcnNMaXN0ZW5lcikge1xyXG4gICAgZ3JhbW1hckZvclRleHRFZGl0b3JzTGlzdGVuZXIgPSBuZXcgR3JhbW1hckZvclRleHRFZGl0b3JzTGlzdGVuZXIoKTtcclxuICB9XHJcbiAgcmV0dXJuIGdyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyLm9ic2VydmVHcmFtbWFyRm9yVGV4dEVkaXRvcnMoZm4pO1xyXG59XHJcblxyXG5pZiAoYXRvbS5pblNwZWNNb2RlKCkpIHtcclxuICBvYnNlcnZlR3JhbW1hckZvclRleHRFZGl0b3JzLl9fcmVzZXRfXyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGdyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyKSB7XHJcbiAgICAgIGdyYW1tYXJGb3JUZXh0RWRpdG9yc0xpc3RlbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgZ3JhbW1hckZvclRleHRFZGl0b3JzTGlzdGVuZXIgPSBudWxsO1xyXG4gICAgfVxyXG4gIH07XHJcbn1cclxuIl19