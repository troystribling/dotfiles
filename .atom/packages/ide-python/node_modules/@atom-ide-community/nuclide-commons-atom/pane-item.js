"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPending = isPending;
exports.observePendingStateEnd = observePendingStateEnd;
exports.isConsoleVisible = isConsoleVisible;
exports.showDockedPaneItem = showDockedPaneItem;

var _assert = _interopRequireDefault(require("assert"));

var _event = require("@atom-ide-community/nuclide-commons/event");

var _dockForLocation = _interopRequireDefault(require("./dock-for-location"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function isPending(paneItem) {
  const pane = atom.workspace.paneForItem(paneItem);
  return pane && pane.getPendingItem() === paneItem;
}

function observePendingStateEnd(paneItem) {
  (0, _assert.default)(typeof paneItem.onDidTerminatePendingState === 'function', 'paneItem must implement onDidTerminatePendingState method');
  return (0, _event.observableFromSubscribeFunction)(paneItem.onDidTerminatePendingState.bind(paneItem));
}

const CONSOLE_VIEW_URI = 'atom://nuclide/console';

function isConsoleVisible() {
  const consolePane = atom.workspace.paneForURI(CONSOLE_VIEW_URI);
  const consoleItem = consolePane && consolePane.itemForURI(CONSOLE_VIEW_URI);
  const paneContainer = atom.workspace.paneContainerForItem(consoleItem); // This visibility check has been taken from
  // https://github.com/atom/atom/blob/v1.28.2/src/workspace.js#L1084

  return (paneContainer === atom.workspace.getCenter() || paneContainer != null && paneContainer.isVisible()) && consoleItem === consolePane.getActiveItem();
}

function showDockedPaneItem(item) {
  const pane = atom.workspace.paneForItem(item); // We want to call workspace.open but it has no option to
  // show the new pane without activating it.
  // So instead we find the dock for the pane and show() it directly.
  // https://github.com/atom/atom/issues/16007

  if (pane != null) {
    pane.activateItem(item);
    const dock = (0, _dockForLocation.default)(pane.getContainer().getLocation());

    if (dock != null) {
      dock.show();
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vcGFuZS1pdGVtLmpzIl0sIm5hbWVzIjpbImlzUGVuZGluZyIsInBhbmVJdGVtIiwicGFuZSIsImF0b20iLCJ3b3Jrc3BhY2UiLCJwYW5lRm9ySXRlbSIsImdldFBlbmRpbmdJdGVtIiwib2JzZXJ2ZVBlbmRpbmdTdGF0ZUVuZCIsIm9uRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlIiwiYmluZCIsIkNPTlNPTEVfVklFV19VUkkiLCJpc0NvbnNvbGVWaXNpYmxlIiwiY29uc29sZVBhbmUiLCJwYW5lRm9yVVJJIiwiY29uc29sZUl0ZW0iLCJpdGVtRm9yVVJJIiwicGFuZUNvbnRhaW5lciIsInBhbmVDb250YWluZXJGb3JJdGVtIiwiZ2V0Q2VudGVyIiwiaXNWaXNpYmxlIiwiZ2V0QWN0aXZlSXRlbSIsInNob3dEb2NrZWRQYW5lSXRlbSIsIml0ZW0iLCJhY3RpdmF0ZUl0ZW0iLCJkb2NrIiwiZ2V0Q29udGFpbmVyIiwiZ2V0TG9jYXRpb24iLCJzaG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBWUE7O0FBQ0E7O0FBQ0E7Ozs7QUFkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTU8sU0FBU0EsU0FBVCxDQUFtQkMsUUFBbkIsRUFBNEM7QUFDakQsUUFBTUMsSUFBSSxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUMsV0FBZixDQUEyQkosUUFBM0IsQ0FBYjtBQUNBLFNBQU9DLElBQUksSUFBSUEsSUFBSSxDQUFDSSxjQUFMLE9BQTBCTCxRQUF6QztBQUNEOztBQUVNLFNBQVNNLHNCQUFULENBQWdDTixRQUFoQyxFQUF5RDtBQUM5RCx1QkFDRSxPQUFPQSxRQUFRLENBQUNPLDBCQUFoQixLQUErQyxVQURqRCxFQUVFLDJEQUZGO0FBS0EsU0FBTyw0Q0FDTFAsUUFBUSxDQUFDTywwQkFBVCxDQUFvQ0MsSUFBcEMsQ0FBeUNSLFFBQXpDLENBREssQ0FBUDtBQUdEOztBQUVELE1BQU1TLGdCQUFnQixHQUFHLHdCQUF6Qjs7QUFFTyxTQUFTQyxnQkFBVCxHQUFxQztBQUMxQyxRQUFNQyxXQUFXLEdBQUdULElBQUksQ0FBQ0MsU0FBTCxDQUFlUyxVQUFmLENBQTBCSCxnQkFBMUIsQ0FBcEI7QUFDQSxRQUFNSSxXQUFXLEdBQUdGLFdBQVcsSUFBSUEsV0FBVyxDQUFDRyxVQUFaLENBQXVCTCxnQkFBdkIsQ0FBbkM7QUFDQSxRQUFNTSxhQUFhLEdBQUdiLElBQUksQ0FBQ0MsU0FBTCxDQUFlYSxvQkFBZixDQUFvQ0gsV0FBcEMsQ0FBdEIsQ0FIMEMsQ0FJMUM7QUFDQTs7QUFDQSxTQUNFLENBQUNFLGFBQWEsS0FBS2IsSUFBSSxDQUFDQyxTQUFMLENBQWVjLFNBQWYsRUFBbEIsSUFDRUYsYUFBYSxJQUFJLElBQWpCLElBQXlCQSxhQUFhLENBQUNHLFNBQWQsRUFENUIsS0FFQUwsV0FBVyxLQUFLRixXQUFXLENBQUNRLGFBQVosRUFIbEI7QUFLRDs7QUFFTSxTQUFTQyxrQkFBVCxDQUE0QkMsSUFBNUIsRUFBMEM7QUFDL0MsUUFBTXBCLElBQUksR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVDLFdBQWYsQ0FBMkJpQixJQUEzQixDQUFiLENBRCtDLENBRS9DO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQUlwQixJQUFJLElBQUksSUFBWixFQUFrQjtBQUNoQkEsSUFBQUEsSUFBSSxDQUFDcUIsWUFBTCxDQUFrQkQsSUFBbEI7QUFDQSxVQUFNRSxJQUFJLEdBQUcsOEJBQWdCdEIsSUFBSSxDQUFDdUIsWUFBTCxHQUFvQkMsV0FBcEIsRUFBaEIsQ0FBYjs7QUFDQSxRQUFJRixJQUFJLElBQUksSUFBWixFQUFrQjtBQUNoQkEsTUFBQUEsSUFBSSxDQUFDRyxJQUFMO0FBQ0Q7QUFDRjtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IGludmFyaWFudCBmcm9tICdhc3NlcnQnO1xyXG5pbXBvcnQge29ic2VydmFibGVGcm9tU3Vic2NyaWJlRnVuY3Rpb259IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL2V2ZW50JztcclxuaW1wb3J0IGRvY2tGb3JMb2NhdGlvbiBmcm9tICcuL2RvY2stZm9yLWxvY2F0aW9uJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1BlbmRpbmcocGFuZUl0ZW06IGF0b20kUGFuZUl0ZW0pIHtcclxuICBjb25zdCBwYW5lID0gYXRvbS53b3Jrc3BhY2UucGFuZUZvckl0ZW0ocGFuZUl0ZW0pO1xyXG4gIHJldHVybiBwYW5lICYmIHBhbmUuZ2V0UGVuZGluZ0l0ZW0oKSA9PT0gcGFuZUl0ZW07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZlUGVuZGluZ1N0YXRlRW5kKHBhbmVJdGVtOiBhdG9tJFBhbmVJdGVtKSB7XHJcbiAgaW52YXJpYW50KFxyXG4gICAgdHlwZW9mIHBhbmVJdGVtLm9uRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlID09PSAnZnVuY3Rpb24nLFxyXG4gICAgJ3BhbmVJdGVtIG11c3QgaW1wbGVtZW50IG9uRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlIG1ldGhvZCcsXHJcbiAgKTtcclxuXHJcbiAgcmV0dXJuIG9ic2VydmFibGVGcm9tU3Vic2NyaWJlRnVuY3Rpb24oXHJcbiAgICBwYW5lSXRlbS5vbkRpZFRlcm1pbmF0ZVBlbmRpbmdTdGF0ZS5iaW5kKHBhbmVJdGVtKSxcclxuICApO1xyXG59XHJcblxyXG5jb25zdCBDT05TT0xFX1ZJRVdfVVJJID0gJ2F0b206Ly9udWNsaWRlL2NvbnNvbGUnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQ29uc29sZVZpc2libGUoKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgY29uc29sZVBhbmUgPSBhdG9tLndvcmtzcGFjZS5wYW5lRm9yVVJJKENPTlNPTEVfVklFV19VUkkpO1xyXG4gIGNvbnN0IGNvbnNvbGVJdGVtID0gY29uc29sZVBhbmUgJiYgY29uc29sZVBhbmUuaXRlbUZvclVSSShDT05TT0xFX1ZJRVdfVVJJKTtcclxuICBjb25zdCBwYW5lQ29udGFpbmVyID0gYXRvbS53b3Jrc3BhY2UucGFuZUNvbnRhaW5lckZvckl0ZW0oY29uc29sZUl0ZW0pO1xyXG4gIC8vIFRoaXMgdmlzaWJpbGl0eSBjaGVjayBoYXMgYmVlbiB0YWtlbiBmcm9tXHJcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F0b20vYXRvbS9ibG9iL3YxLjI4LjIvc3JjL3dvcmtzcGFjZS5qcyNMMTA4NFxyXG4gIHJldHVybiAoXHJcbiAgICAocGFuZUNvbnRhaW5lciA9PT0gYXRvbS53b3Jrc3BhY2UuZ2V0Q2VudGVyKCkgfHxcclxuICAgICAgKHBhbmVDb250YWluZXIgIT0gbnVsbCAmJiBwYW5lQ29udGFpbmVyLmlzVmlzaWJsZSgpKSkgJiZcclxuICAgIGNvbnNvbGVJdGVtID09PSBjb25zb2xlUGFuZS5nZXRBY3RpdmVJdGVtKClcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0RvY2tlZFBhbmVJdGVtKGl0ZW06IE9iamVjdCkge1xyXG4gIGNvbnN0IHBhbmUgPSBhdG9tLndvcmtzcGFjZS5wYW5lRm9ySXRlbShpdGVtKTtcclxuICAvLyBXZSB3YW50IHRvIGNhbGwgd29ya3NwYWNlLm9wZW4gYnV0IGl0IGhhcyBubyBvcHRpb24gdG9cclxuICAvLyBzaG93IHRoZSBuZXcgcGFuZSB3aXRob3V0IGFjdGl2YXRpbmcgaXQuXHJcbiAgLy8gU28gaW5zdGVhZCB3ZSBmaW5kIHRoZSBkb2NrIGZvciB0aGUgcGFuZSBhbmQgc2hvdygpIGl0IGRpcmVjdGx5LlxyXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hdG9tL2F0b20vaXNzdWVzLzE2MDA3XHJcbiAgaWYgKHBhbmUgIT0gbnVsbCkge1xyXG4gICAgcGFuZS5hY3RpdmF0ZUl0ZW0oaXRlbSk7XHJcbiAgICBjb25zdCBkb2NrID0gZG9ja0ZvckxvY2F0aW9uKHBhbmUuZ2V0Q29udGFpbmVyKCkuZ2V0TG9jYXRpb24oKSk7XHJcbiAgICBpZiAoZG9jayAhPSBudWxsKSB7XHJcbiAgICAgIGRvY2suc2hvdygpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=