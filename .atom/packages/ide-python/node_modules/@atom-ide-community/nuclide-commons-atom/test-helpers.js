"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.jasmineAttachWorkspace = jasmineAttachWorkspace;
exports.attachWorkspace = attachWorkspace;

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// Attach the Atom workspace to the DOM, and give it a reasonable size.
// This is important for tests that touch the text editor in 1.19+, as they'll have a height of 0
// unless properly attached with a valid viewport.
// NOTE: for Jest tests use `attachWorkspace()` function from this file
function jasmineAttachWorkspace() {
  jasmine.attachToDOM(atom.views.getView(atom.workspace)); // Set the testing window dimensions (smallish, yet realistic).

  const styleCSS = `
    height: 600px;
    width: 1000px;
  `;
  const content = document.querySelector('#jasmine-content');
  (0, _assert.default)(content != null);
  content.setAttribute('style', styleCSS); // Unset the 'top' attribute of the spec reporter to make the full window visible.
  // This is purely for developer convenience when running specs in a visible window.

  const specReporter = document.querySelector('.spec-reporter-container');

  if (specReporter != null) {
    specReporter.setAttribute('style', 'top: inherit');
  }
}

function attachWorkspace() {
  const container = document.createElement('div');
  container.id = 'test-container';
  (0, _assert.default)(document.body);
  document.body.appendChild(container);
  container.appendChild(atom.views.getView(atom.workspace)); // Set the testing window dimensions (smallish, yet realistic).

  const styleCSS = `
    height: 600px;
    width: 1000px;
  `;
  const content = document.querySelector('#test-container');
  (0, _assert.default)(content != null);
  content.setAttribute('style', styleCSS); // Unset the 'top' attribute of the spec reporter to make the full window visible.
  // This is purely for developer convenience when running specs in a visible window.

  const specReporter = document.querySelector('.spec-reporter-container');

  if (specReporter != null) {
    specReporter.setAttribute('style', 'top: inherit');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLWF0b20vdGVzdC1oZWxwZXJzLmpzIl0sIm5hbWVzIjpbImphc21pbmVBdHRhY2hXb3Jrc3BhY2UiLCJqYXNtaW5lIiwiYXR0YWNoVG9ET00iLCJhdG9tIiwidmlld3MiLCJnZXRWaWV3Iiwid29ya3NwYWNlIiwic3R5bGVDU1MiLCJjb250ZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2V0QXR0cmlidXRlIiwic3BlY1JlcG9ydGVyIiwiYXR0YWNoV29ya3NwYWNlIiwiY29udGFpbmVyIiwiY3JlYXRlRWxlbWVudCIsImlkIiwiYm9keSIsImFwcGVuZENoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVlBOzs7O0FBWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0Esc0JBQVQsR0FBd0M7QUFDN0NDLEVBQUFBLE9BQU8sQ0FBQ0MsV0FBUixDQUFvQkMsSUFBSSxDQUFDQyxLQUFMLENBQVdDLE9BQVgsQ0FBbUJGLElBQUksQ0FBQ0csU0FBeEIsQ0FBcEIsRUFENkMsQ0FHN0M7O0FBQ0EsUUFBTUMsUUFBUSxHQUFJO0FBQ3BCO0FBQ0E7QUFDQSxHQUhFO0FBSUEsUUFBTUMsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsa0JBQXZCLENBQWhCO0FBQ0EsdUJBQVVGLE9BQU8sSUFBSSxJQUFyQjtBQUNBQSxFQUFBQSxPQUFPLENBQUNHLFlBQVIsQ0FBcUIsT0FBckIsRUFBOEJKLFFBQTlCLEVBVjZDLENBWTdDO0FBQ0E7O0FBQ0EsUUFBTUssWUFBWSxHQUFHSCxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsMEJBQXZCLENBQXJCOztBQUNBLE1BQUlFLFlBQVksSUFBSSxJQUFwQixFQUEwQjtBQUN4QkEsSUFBQUEsWUFBWSxDQUFDRCxZQUFiLENBQTBCLE9BQTFCLEVBQW1DLGNBQW5DO0FBQ0Q7QUFDRjs7QUFFTSxTQUFTRSxlQUFULEdBQWlDO0FBQ3RDLFFBQU1DLFNBQVMsR0FBR0wsUUFBUSxDQUFDTSxhQUFULENBQXVCLEtBQXZCLENBQWxCO0FBQ0FELEVBQUFBLFNBQVMsQ0FBQ0UsRUFBVixHQUFlLGdCQUFmO0FBQ0EsdUJBQVVQLFFBQVEsQ0FBQ1EsSUFBbkI7QUFDQVIsRUFBQUEsUUFBUSxDQUFDUSxJQUFULENBQWNDLFdBQWQsQ0FBMEJKLFNBQTFCO0FBQ0FBLEVBQUFBLFNBQVMsQ0FBQ0ksV0FBVixDQUFzQmYsSUFBSSxDQUFDQyxLQUFMLENBQVdDLE9BQVgsQ0FBbUJGLElBQUksQ0FBQ0csU0FBeEIsQ0FBdEIsRUFMc0MsQ0FPdEM7O0FBQ0EsUUFBTUMsUUFBUSxHQUFJO0FBQ3BCO0FBQ0E7QUFDQSxHQUhFO0FBSUEsUUFBTUMsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsaUJBQXZCLENBQWhCO0FBQ0EsdUJBQVVGLE9BQU8sSUFBSSxJQUFyQjtBQUNBQSxFQUFBQSxPQUFPLENBQUNHLFlBQVIsQ0FBcUIsT0FBckIsRUFBOEJKLFFBQTlCLEVBZHNDLENBZ0J0QztBQUNBOztBQUNBLFFBQU1LLFlBQVksR0FBR0gsUUFBUSxDQUFDQyxhQUFULENBQXVCLDBCQUF2QixDQUFyQjs7QUFDQSxNQUFJRSxZQUFZLElBQUksSUFBcEIsRUFBMEI7QUFDeEJBLElBQUFBLFlBQVksQ0FBQ0QsWUFBYixDQUEwQixPQUExQixFQUFtQyxjQUFuQztBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IGludmFyaWFudCBmcm9tICdhc3NlcnQnO1xyXG5cclxuLy8gQXR0YWNoIHRoZSBBdG9tIHdvcmtzcGFjZSB0byB0aGUgRE9NLCBhbmQgZ2l2ZSBpdCBhIHJlYXNvbmFibGUgc2l6ZS5cclxuLy8gVGhpcyBpcyBpbXBvcnRhbnQgZm9yIHRlc3RzIHRoYXQgdG91Y2ggdGhlIHRleHQgZWRpdG9yIGluIDEuMTkrLCBhcyB0aGV5J2xsIGhhdmUgYSBoZWlnaHQgb2YgMFxyXG4vLyB1bmxlc3MgcHJvcGVybHkgYXR0YWNoZWQgd2l0aCBhIHZhbGlkIHZpZXdwb3J0LlxyXG4vLyBOT1RFOiBmb3IgSmVzdCB0ZXN0cyB1c2UgYGF0dGFjaFdvcmtzcGFjZSgpYCBmdW5jdGlvbiBmcm9tIHRoaXMgZmlsZVxyXG5leHBvcnQgZnVuY3Rpb24gamFzbWluZUF0dGFjaFdvcmtzcGFjZSgpOiB2b2lkIHtcclxuICBqYXNtaW5lLmF0dGFjaFRvRE9NKGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZSkpO1xyXG5cclxuICAvLyBTZXQgdGhlIHRlc3Rpbmcgd2luZG93IGRpbWVuc2lvbnMgKHNtYWxsaXNoLCB5ZXQgcmVhbGlzdGljKS5cclxuICBjb25zdCBzdHlsZUNTUyA9IGBcclxuICAgIGhlaWdodDogNjAwcHg7XHJcbiAgICB3aWR0aDogMTAwMHB4O1xyXG4gIGA7XHJcbiAgY29uc3QgY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNqYXNtaW5lLWNvbnRlbnQnKTtcclxuICBpbnZhcmlhbnQoY29udGVudCAhPSBudWxsKTtcclxuICBjb250ZW50LnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZUNTUyk7XHJcblxyXG4gIC8vIFVuc2V0IHRoZSAndG9wJyBhdHRyaWJ1dGUgb2YgdGhlIHNwZWMgcmVwb3J0ZXIgdG8gbWFrZSB0aGUgZnVsbCB3aW5kb3cgdmlzaWJsZS5cclxuICAvLyBUaGlzIGlzIHB1cmVseSBmb3IgZGV2ZWxvcGVyIGNvbnZlbmllbmNlIHdoZW4gcnVubmluZyBzcGVjcyBpbiBhIHZpc2libGUgd2luZG93LlxyXG4gIGNvbnN0IHNwZWNSZXBvcnRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zcGVjLXJlcG9ydGVyLWNvbnRhaW5lcicpO1xyXG4gIGlmIChzcGVjUmVwb3J0ZXIgIT0gbnVsbCkge1xyXG4gICAgc3BlY1JlcG9ydGVyLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAndG9wOiBpbmhlcml0Jyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXR0YWNoV29ya3NwYWNlKCk6IHZvaWQge1xyXG4gIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGNvbnRhaW5lci5pZCA9ICd0ZXN0LWNvbnRhaW5lcic7XHJcbiAgaW52YXJpYW50KGRvY3VtZW50LmJvZHkpO1xyXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuICBjb250YWluZXIuYXBwZW5kQ2hpbGQoYXRvbS52aWV3cy5nZXRWaWV3KGF0b20ud29ya3NwYWNlKSk7XHJcblxyXG4gIC8vIFNldCB0aGUgdGVzdGluZyB3aW5kb3cgZGltZW5zaW9ucyAoc21hbGxpc2gsIHlldCByZWFsaXN0aWMpLlxyXG4gIGNvbnN0IHN0eWxlQ1NTID0gYFxyXG4gICAgaGVpZ2h0OiA2MDBweDtcclxuICAgIHdpZHRoOiAxMDAwcHg7XHJcbiAgYDtcclxuICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Rlc3QtY29udGFpbmVyJyk7XHJcbiAgaW52YXJpYW50KGNvbnRlbnQgIT0gbnVsbCk7XHJcbiAgY29udGVudC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgc3R5bGVDU1MpO1xyXG5cclxuICAvLyBVbnNldCB0aGUgJ3RvcCcgYXR0cmlidXRlIG9mIHRoZSBzcGVjIHJlcG9ydGVyIHRvIG1ha2UgdGhlIGZ1bGwgd2luZG93IHZpc2libGUuXHJcbiAgLy8gVGhpcyBpcyBwdXJlbHkgZm9yIGRldmVsb3BlciBjb252ZW5pZW5jZSB3aGVuIHJ1bm5pbmcgc3BlY3MgaW4gYSB2aXNpYmxlIHdpbmRvdy5cclxuICBjb25zdCBzcGVjUmVwb3J0ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3BlYy1yZXBvcnRlci1jb250YWluZXInKTtcclxuICBpZiAoc3BlY1JlcG9ydGVyICE9IG51bGwpIHtcclxuICAgIHNwZWNSZXBvcnRlci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3RvcDogaW5oZXJpdCcpO1xyXG4gIH1cclxufVxyXG4iXX0=