"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Atomicon;
exports.getTypeFromIconName = getTypeFromIconName;

var React = _interopRequireWildcard(require("react"));

var _string = require("@atom-ide-community/nuclide-commons/string");

var _classnames = _interopRequireDefault(require("classnames"));

var _lodash = require("lodash");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const TYPE_TO_ICON_NAME = {
  array: 'type-array',
  boolean: 'type-boolean',
  class: 'type-class',
  constant: 'type-constant',
  constructor: 'type-constructor',
  enum: 'type-enum',
  field: 'type-field',
  file: 'type-file',
  function: 'type-function',
  interface: 'type-interface',
  method: 'type-method',
  module: 'type-module',
  namespace: 'type-namespace',
  number: 'type-number',
  package: 'type-package',
  property: 'type-property',
  string: 'type-string',
  variable: 'type-variable'
};
const ICON_NAME_TO_TYPE = (0, _lodash.invert)(TYPE_TO_ICON_NAME);

function Atomicon({
  type
}) {
  const displayName = (0, _string.capitalize)(type);
  return /*#__PURE__*/React.createElement("span", {
    className: (0, _classnames.default)('icon', 'icon-' + TYPE_TO_ICON_NAME[type]),
    role: "presentation",
    title: displayName
  });
}

function getTypeFromIconName(iconName) {
  return ICON_NAME_TO_TYPE[iconName];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0F0b21pY29uLmpzIl0sIm5hbWVzIjpbIlRZUEVfVE9fSUNPTl9OQU1FIiwiYXJyYXkiLCJib29sZWFuIiwiY2xhc3MiLCJjb25zdGFudCIsImNvbnN0cnVjdG9yIiwiZW51bSIsImZpZWxkIiwiZmlsZSIsImZ1bmN0aW9uIiwiaW50ZXJmYWNlIiwibWV0aG9kIiwibW9kdWxlIiwibmFtZXNwYWNlIiwibnVtYmVyIiwicGFja2FnZSIsInByb3BlcnR5Iiwic3RyaW5nIiwidmFyaWFibGUiLCJJQ09OX05BTUVfVE9fVFlQRSIsIkF0b21pY29uIiwidHlwZSIsImRpc3BsYXlOYW1lIiwiZ2V0VHlwZUZyb21JY29uTmFtZSIsImljb25OYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQVlBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPQSxNQUFNQSxpQkFBaUIsR0FBRztBQUN4QkMsRUFBQUEsS0FBSyxFQUFFLFlBRGlCO0FBRXhCQyxFQUFBQSxPQUFPLEVBQUUsY0FGZTtBQUd4QkMsRUFBQUEsS0FBSyxFQUFFLFlBSGlCO0FBSXhCQyxFQUFBQSxRQUFRLEVBQUUsZUFKYztBQUt4QkMsRUFBQUEsV0FBVyxFQUFFLGtCQUxXO0FBTXhCQyxFQUFBQSxJQUFJLEVBQUUsV0FOa0I7QUFPeEJDLEVBQUFBLEtBQUssRUFBRSxZQVBpQjtBQVF4QkMsRUFBQUEsSUFBSSxFQUFFLFdBUmtCO0FBU3hCQyxFQUFBQSxRQUFRLEVBQUUsZUFUYztBQVV4QkMsRUFBQUEsU0FBUyxFQUFFLGdCQVZhO0FBV3hCQyxFQUFBQSxNQUFNLEVBQUUsYUFYZ0I7QUFZeEJDLEVBQUFBLE1BQU0sRUFBRSxhQVpnQjtBQWF4QkMsRUFBQUEsU0FBUyxFQUFFLGdCQWJhO0FBY3hCQyxFQUFBQSxNQUFNLEVBQUUsYUFkZ0I7QUFleEJDLEVBQUFBLE9BQU8sRUFBRSxjQWZlO0FBZ0J4QkMsRUFBQUEsUUFBUSxFQUFFLGVBaEJjO0FBaUJ4QkMsRUFBQUEsTUFBTSxFQUFFLGFBakJnQjtBQWtCeEJDLEVBQUFBLFFBQVEsRUFBRTtBQWxCYyxDQUExQjtBQXFCQSxNQUFNQyxpQkFBaUIsR0FBRyxvQkFBT25CLGlCQUFQLENBQTFCOztBQUllLFNBQVNvQixRQUFULENBQWtCO0FBQUNDLEVBQUFBO0FBQUQsQ0FBbEIsRUFBZ0Q7QUFDN0QsUUFBTUMsV0FBVyxHQUFHLHdCQUFXRCxJQUFYLENBQXBCO0FBQ0Esc0JBQ0U7QUFDRSxJQUFBLFNBQVMsRUFBRSx5QkFBVyxNQUFYLEVBQW1CLFVBQVVyQixpQkFBaUIsQ0FBQ3FCLElBQUQsQ0FBOUMsQ0FEYjtBQUVFLElBQUEsSUFBSSxFQUFDLGNBRlA7QUFHRSxJQUFBLEtBQUssRUFBRUM7QUFIVCxJQURGO0FBT0Q7O0FBRU0sU0FBU0MsbUJBQVQsQ0FBNkJDLFFBQTdCLEVBQThEO0FBQ25FLFNBQU9MLGlCQUFpQixDQUFDSyxRQUFELENBQXhCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7Y2FwaXRhbGl6ZX0gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvc3RyaW5nJztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCB7aW52ZXJ0fSBmcm9tICdsb2Rhc2gnO1xyXG5cclxuY29uc3QgVFlQRV9UT19JQ09OX05BTUUgPSB7XHJcbiAgYXJyYXk6ICd0eXBlLWFycmF5JyxcclxuICBib29sZWFuOiAndHlwZS1ib29sZWFuJyxcclxuICBjbGFzczogJ3R5cGUtY2xhc3MnLFxyXG4gIGNvbnN0YW50OiAndHlwZS1jb25zdGFudCcsXHJcbiAgY29uc3RydWN0b3I6ICd0eXBlLWNvbnN0cnVjdG9yJyxcclxuICBlbnVtOiAndHlwZS1lbnVtJyxcclxuICBmaWVsZDogJ3R5cGUtZmllbGQnLFxyXG4gIGZpbGU6ICd0eXBlLWZpbGUnLFxyXG4gIGZ1bmN0aW9uOiAndHlwZS1mdW5jdGlvbicsXHJcbiAgaW50ZXJmYWNlOiAndHlwZS1pbnRlcmZhY2UnLFxyXG4gIG1ldGhvZDogJ3R5cGUtbWV0aG9kJyxcclxuICBtb2R1bGU6ICd0eXBlLW1vZHVsZScsXHJcbiAgbmFtZXNwYWNlOiAndHlwZS1uYW1lc3BhY2UnLFxyXG4gIG51bWJlcjogJ3R5cGUtbnVtYmVyJyxcclxuICBwYWNrYWdlOiAndHlwZS1wYWNrYWdlJyxcclxuICBwcm9wZXJ0eTogJ3R5cGUtcHJvcGVydHknLFxyXG4gIHN0cmluZzogJ3R5cGUtc3RyaW5nJyxcclxuICB2YXJpYWJsZTogJ3R5cGUtdmFyaWFibGUnLFxyXG59O1xyXG5cclxuY29uc3QgSUNPTl9OQU1FX1RPX1RZUEUgPSBpbnZlcnQoVFlQRV9UT19JQ09OX05BTUUpO1xyXG5cclxudHlwZSBBdG9taWNvblR5cGUgPSAkS2V5czx0eXBlb2YgVFlQRV9UT19JQ09OX05BTUU+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXRvbWljb24oe3R5cGV9OiB7dHlwZTogQXRvbWljb25UeXBlfSkge1xyXG4gIGNvbnN0IGRpc3BsYXlOYW1lID0gY2FwaXRhbGl6ZSh0eXBlKTtcclxuICByZXR1cm4gKFxyXG4gICAgPHNwYW5cclxuICAgICAgY2xhc3NOYW1lPXtjbGFzc25hbWVzKCdpY29uJywgJ2ljb24tJyArIFRZUEVfVE9fSUNPTl9OQU1FW3R5cGVdKX1cclxuICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiXHJcbiAgICAgIHRpdGxlPXtkaXNwbGF5TmFtZX1cclxuICAgIC8+XHJcbiAgKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGVGcm9tSWNvbk5hbWUoaWNvbk5hbWU6IHN0cmluZyk6ID9BdG9taWNvblR5cGUge1xyXG4gIHJldHVybiBJQ09OX05BTUVfVE9fVFlQRVtpY29uTmFtZV07XHJcbn1cclxuIl19