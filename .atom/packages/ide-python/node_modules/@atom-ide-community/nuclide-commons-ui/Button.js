"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = exports.ButtonTypes = exports.ButtonSizes = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _string = require("@atom-ide-community/nuclide-commons/string");

var _lodash = require("lodash");

var _addTooltip = _interopRequireDefault(require("./addTooltip"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ButtonSizes = Object.freeze({
  EXTRA_SMALL: 'EXTRA_SMALL',
  SMALL: 'SMALL',
  LARGE: 'LARGE'
});
exports.ButtonSizes = ButtonSizes;
const ButtonTypes = Object.freeze({
  PRIMARY: 'PRIMARY',
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR'
});
exports.ButtonTypes = ButtonTypes;
const ButtonSizeClassnames = Object.freeze({
  EXTRA_SMALL: 'btn-xs',
  SMALL: 'btn-sm',
  LARGE: 'btn-lg'
});
const ButtonTypeClassnames = Object.freeze({
  PRIMARY: 'btn-primary',
  INFO: 'btn-info',
  SUCCESS: 'btn-success',
  WARNING: 'btn-warning',
  ERROR: 'btn-error'
});
/**
 * Generic Button wrapper.
 */

class Button extends React.Component {
  constructor(...args) {
    super(...args);
    this._button = void 0;
    this._removeTooltip = void 0;

    this._onRefChange = button => {
      const {
        disabled,
        onButtonDOMNodeChange,
        tooltip
      } = this.props;
      this._button = button;

      if (onButtonDOMNodeChange) {
        onButtonDOMNodeChange(this._button);
      } // When the element goes away (e.g. on unmount), remove the tooltip.


      if (button == null && this._removeTooltip != null) {
        this._removeTooltip();
      }

      if (!disabled && tooltip && button != null) {
        const updateTooltip = (0, _addTooltip.default)(tooltip);
        updateTooltip(button);

        this._removeTooltip = () => {
          updateTooltip(null);
          this._removeTooltip = null;
        };
      }
    };
  }

  focus() {
    const node = _reactDom.default.findDOMNode(this);

    if (node == null) {
      return;
    } // $FlowFixMe


    node.focus();
  }

  render() {
    const {
      disabled,
      icon,
      buttonType,
      selected,
      size,
      children,
      className,
      wrapperElement,
      tooltip,
      ...remainingProps
    } = this.props;
    const buttonProps = (0, _lodash.omit)(remainingProps, 'onButtonDOMNodeChange');
    const sizeClassname = size == null ? '' : ButtonSizeClassnames[size] || '';
    const buttonTypeClassname = buttonType == null ? '' : ButtonTypeClassnames[buttonType] || '';
    const titleToolTip = tooltip && disabled ? tooltip.title : null;
    const newClassName = (0, _classnames.default)(className, 'btn', {
      [`icon icon-${(0, _string.maybeToString)(icon)}`]: icon != null,
      [sizeClassname]: size != null,
      selected,
      [buttonTypeClassname]: buttonType != null
    });
    const Wrapper = wrapperElement == null ? 'button' : wrapperElement;
    return /*#__PURE__*/React.createElement(Wrapper, _extends({
      className: newClassName // eslint-disable-next-line nuclide-internal/jsx-simple-callback-refs
      ,
      ref: this._onRefChange,
      disabled: disabled
    }, buttonProps, {
      title: titleToolTip
    }), children);
  }

}

exports.Button = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0J1dHRvbi5qcyJdLCJuYW1lcyI6WyJCdXR0b25TaXplcyIsIk9iamVjdCIsImZyZWV6ZSIsIkVYVFJBX1NNQUxMIiwiU01BTEwiLCJMQVJHRSIsIkJ1dHRvblR5cGVzIiwiUFJJTUFSWSIsIklORk8iLCJTVUNDRVNTIiwiV0FSTklORyIsIkVSUk9SIiwiQnV0dG9uU2l6ZUNsYXNzbmFtZXMiLCJCdXR0b25UeXBlQ2xhc3NuYW1lcyIsIkJ1dHRvbiIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX2J1dHRvbiIsIl9yZW1vdmVUb29sdGlwIiwiX29uUmVmQ2hhbmdlIiwiYnV0dG9uIiwiZGlzYWJsZWQiLCJvbkJ1dHRvbkRPTU5vZGVDaGFuZ2UiLCJ0b29sdGlwIiwicHJvcHMiLCJ1cGRhdGVUb29sdGlwIiwiZm9jdXMiLCJub2RlIiwiUmVhY3RET00iLCJmaW5kRE9NTm9kZSIsInJlbmRlciIsImljb24iLCJidXR0b25UeXBlIiwic2VsZWN0ZWQiLCJzaXplIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJ3cmFwcGVyRWxlbWVudCIsInJlbWFpbmluZ1Byb3BzIiwiYnV0dG9uUHJvcHMiLCJzaXplQ2xhc3NuYW1lIiwiYnV0dG9uVHlwZUNsYXNzbmFtZSIsInRpdGxlVG9vbFRpcCIsInRpdGxlIiwibmV3Q2xhc3NOYW1lIiwiV3JhcHBlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBeUJPLE1BQU1BLFdBQVcsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDdkNDLEVBQUFBLFdBQVcsRUFBRSxhQUQwQjtBQUV2Q0MsRUFBQUEsS0FBSyxFQUFFLE9BRmdDO0FBR3ZDQyxFQUFBQSxLQUFLLEVBQUU7QUFIZ0MsQ0FBZCxDQUFwQjs7QUFNQSxNQUFNQyxXQUFXLEdBQUdMLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ3ZDSyxFQUFB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QUFNVSxZQUFZLEdBQUduQixPQUFPLElBQUlGLFFBQVgsR0FBc0JFLE9BQU8sQ0FBQ29CLEtBQTlCLEdBQXNDLElBQTNEO0FBQ0EsVUFBTUMsWUFBWSxHQUFHLHlCQUFXUixTQUFYLEVBQXNCLEtBQXRCLEVBQTZCO0FBQ2hELE9BQUUsYUFBWSwyQkFBY0wsSUFBZCxDQUFvQixFQUFsQyxHQUFzQ0EsSUFBSSxJQUFJLElBREU7QUFFaEQsT0FBQ1MsYUFBRCxHQUFpQk4sSUFBSSxJQUFJLElBRnVCO0FBR2hERCxNQUFBQSxRQUhnRDtBQUloRCxPQUFDUSxtQkFBRCxHQUF1QlQsVUFBVSxJQUFJO0FBSlcsS0FBN0IsQ0FBckI7QUFNQSxVQUFNYSxPQUFPLEdBQUdSLGNBQWMsSUFBSSxJQUFsQixHQUF5QixRQUF6QixHQUFvQ0EsY0FBcEQ7QUFDQSx3QkFDRSxvQkFBQyxPQUFEO0FBQ0UsTUFBQSxTQUFTLEVBQUVPLFlBRGIsQ0FFRTtBQUZGO0FBR0UsTUFBQSxHQUFHLEVBQUUsS0FBS3pCLFlBSFo7QUFJRSxNQUFBLFFBQVEsRUFBRUU7QUFKWixPQUtNa0IsV0FMTjtBQU1FLE1BQUEsS0FBSyxFQUFFRztBQU5ULFFBT0dQLFFBUEgsQ0FERjtBQVdEOztBQTNFZ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgdHlwZSB7SWNvbk5hbWV9IGZyb20gJy4vSWNvbic7XHJcblxyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHttYXliZVRvU3RyaW5nfSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9zdHJpbmcnO1xyXG5pbXBvcnQge29taXR9IGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCBhZGRUb29sdGlwIGZyb20gJy4vYWRkVG9vbHRpcCc7XHJcblxyXG5leHBvcnQgdHlwZSBCdXR0b25UeXBlID0gJ1BSSU1BUlknIHwgJ0lORk8nIHwgJ1NVQ0NFU1MnIHwgJ1dBUk5JTkcnIHwgJ0VSUk9SJztcclxuZXhwb3J0IHR5cGUgQnV0dG9uU2l6ZSA9ICdFWFRSQV9TTUFMTCcgfCAnU01BTEwnIHwgJ0xBUkdFJztcclxudHlwZSBCdXR0b25Ob2RlTmFtZSA9ICdidXR0b24nIHwgJ2EnO1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICAvLyBJY29uIG5hbWUsIHdpdGhvdXQgdGhlIGBpY29uLWAgcHJlZml4LiBFLmcuIGAnYXJyb3ctdXAnYFxyXG4gIGljb24/OiBJY29uTmFtZSxcclxuICAvLyBPcHRpb25hbCBzcGVjaWZpZXIgZm9yIHNwZWNpYWwgYnV0dG9ucywgZS5nLiBwcmltYXJ5LCBpbmZvLCBzdWNjZXNzIG9yIGVycm9yIGJ1dHRvbnMuXHJcbiAgYnV0dG9uVHlwZT86ID9CdXR0b25UeXBlLFxyXG4gIC8vIEEgbG90IGxpa2UgYSByZWYsIGhvd2V2ZXIgd2Ugb25seSBhY2NlcHQgdGhlIGNhbGxiYWNrIGZvcm0gc28gd2UgY2FuXHJcbiAgLy8gY29tcG9zZSBpdCB3aXRoIHRvb2x0aXBzLCB3aGljaCBhcmUgaW1wbGVtZW50ZWQgdXNpbmcgcmVmc1xyXG4gIG9uQnV0dG9uRE9NTm9kZUNoYW5nZT86ICg/SFRNTEJ1dHRvbkVsZW1lbnQpID0+IG1peGVkLFxyXG4gIHNlbGVjdGVkPzogYm9vbGVhbixcclxuICBzaXplPzogQnV0dG9uU2l6ZSxcclxuICBjbGFzc05hbWU/OiBzdHJpbmcsXHJcbiAgLy8gVGhlIGJ1dHRvbidzIGNvbnRlbnQ7IGdlbmVyYWxseSBhIHN0cmluZy5cclxuICBjaGlsZHJlbj86IG1peGVkLFxyXG4gIC8vIEFsbG93cyBzcGVjaWZ5aW5nIGFuIGVsZW1lbnQgb3RoZXIgdGhhbiBgYnV0dG9uYCB0byBiZSB1c2VkIGFzIHRoZSB3cmFwcGVyIG5vZGUuXHJcbiAgd3JhcHBlckVsZW1lbnQ/OiBCdXR0b25Ob2RlTmFtZSxcclxuICB0b29sdGlwPzogYXRvbSRUb29sdGlwc0FkZE9wdGlvbnMsXHJcbiAgZGlzYWJsZWQ/OiBib29sZWFuLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IEJ1dHRvblNpemVzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgRVhUUkFfU01BTEw6ICdFWFRSQV9TTUFMTCcsXHJcbiAgU01BTEw6ICdTTUFMTCcsXHJcbiAgTEFSR0U6ICdMQVJHRScsXHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IEJ1dHRvblR5cGVzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgUFJJTUFSWTogJ1BSSU1BUlknLFxyXG4gIElORk86ICdJTkZPJyxcclxuICBTVUNDRVNTOiAnU1VDQ0VTUycsXHJcbiAgV0FSTklORzogJ1dBUk5JTkcnLFxyXG4gIEVSUk9SOiAnRVJST1InLFxyXG59KTtcclxuXHJcbmNvbnN0IEJ1dHRvblNpemVDbGFzc25hbWVzID0gT2JqZWN0LmZyZWV6ZSh7XHJcbiAgRVhUUkFfU01BTEw6ICdidG4teHMnLFxyXG4gIFNNQUxMOiAnYnRuLXNtJyxcclxuICBMQVJHRTogJ2J0bi1sZycsXHJcbn0pO1xyXG5cclxuY29uc3QgQnV0dG9uVHlwZUNsYXNzbmFtZXMgPSBPYmplY3QuZnJlZXplKHtcclxuICBQUklNQVJZOiAnYnRuLXByaW1hcnknLFxyXG4gIElORk86ICdidG4taW5mbycsXHJcbiAgU1VDQ0VTUzogJ2J0bi1zdWNjZXNzJyxcclxuICBXQVJOSU5HOiAnYnRuLXdhcm5pbmcnLFxyXG4gIEVSUk9SOiAnYnRuLWVycm9yJyxcclxufSk7XHJcblxyXG4vKipcclxuICogR2VuZXJpYyBCdXR0b24gd3JhcHBlci5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICBfYnV0dG9uOiA/SFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgX3JlbW92ZVRvb2x0aXA6ID8oKSA9PiB2b2lkO1xyXG5cclxuICBmb2N1cygpOiB2b2lkIHtcclxuICAgIGNvbnN0IG5vZGUgPSBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTtcclxuICAgIGlmIChub2RlID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gJEZsb3dGaXhNZVxyXG4gICAgbm9kZS5mb2N1cygpO1xyXG4gIH1cclxuXHJcbiAgX29uUmVmQ2hhbmdlID0gKGJ1dHRvbjogP0hUTUxCdXR0b25FbGVtZW50KSA9PiB7XHJcbiAgICBjb25zdCB7ZGlzYWJsZWQsIG9uQnV0dG9uRE9NTm9kZUNoYW5nZSwgdG9vbHRpcH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIHRoaXMuX2J1dHRvbiA9IGJ1dHRvbjtcclxuICAgIGlmIChvbkJ1dHRvbkRPTU5vZGVDaGFuZ2UpIHtcclxuICAgICAgb25CdXR0b25ET01Ob2RlQ2hhbmdlKHRoaXMuX2J1dHRvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gV2hlbiB0aGUgZWxlbWVudCBnb2VzIGF3YXkgKGUuZy4gb24gdW5tb3VudCksIHJlbW92ZSB0aGUgdG9vbHRpcC5cclxuICAgIGlmIChidXR0b24gPT0gbnVsbCAmJiB0aGlzLl9yZW1vdmVUb29sdGlwICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fcmVtb3ZlVG9vbHRpcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZGlzYWJsZWQgJiYgdG9vbHRpcCAmJiBidXR0b24gIT0gbnVsbCkge1xyXG4gICAgICBjb25zdCB1cGRhdGVUb29sdGlwID0gYWRkVG9vbHRpcCh0b29sdGlwKTtcclxuICAgICAgdXBkYXRlVG9vbHRpcChidXR0b24pO1xyXG4gICAgICB0aGlzLl9yZW1vdmVUb29sdGlwID0gKCkgPT4ge1xyXG4gICAgICAgIHVwZGF0ZVRvb2x0aXAobnVsbCk7XHJcbiAgICAgICAgdGhpcy5fcmVtb3ZlVG9vbHRpcCA9IG51bGw7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBkaXNhYmxlZCxcclxuICAgICAgaWNvbixcclxuICAgICAgYnV0dG9uVHlwZSxcclxuICAgICAgc2VsZWN0ZWQsXHJcbiAgICAgIHNpemUsXHJcbiAgICAgIGNoaWxkcmVuLFxyXG4gICAgICBjbGFzc05hbWUsXHJcbiAgICAgIHdyYXBwZXJFbGVtZW50LFxyXG4gICAgICB0b29sdGlwLFxyXG4gICAgICAuLi5yZW1haW5pbmdQcm9wc1xyXG4gICAgfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgY29uc3QgYnV0dG9uUHJvcHMgPSBvbWl0KHJlbWFpbmluZ1Byb3BzLCAnb25CdXR0b25ET01Ob2RlQ2hhbmdlJyk7XHJcblxyXG4gICAgY29uc3Qgc2l6ZUNsYXNzbmFtZSA9IHNpemUgPT0gbnVsbCA/ICcnIDogQnV0dG9uU2l6ZUNsYXNzbmFtZXNbc2l6ZV0gfHwgJyc7XHJcbiAgICBjb25zdCBidXR0b25UeXBlQ2xhc3NuYW1lID1cclxuICAgICAgYnV0dG9uVHlwZSA9PSBudWxsID8gJycgOiBCdXR0b25UeXBlQ2xhc3NuYW1lc1tidXR0b25UeXBlXSB8fCAnJztcclxuXHJcbiAgICBjb25zdCB0aXRsZVRvb2xUaXAgPSB0b29sdGlwICYmIGRpc2FibGVkID8gdG9vbHRpcC50aXRsZSA6IG51bGw7XHJcbiAgICBjb25zdCBuZXdDbGFzc05hbWUgPSBjbGFzc25hbWVzKGNsYXNzTmFtZSwgJ2J0bicsIHtcclxuICAgICAgW2BpY29uIGljb24tJHttYXliZVRvU3RyaW5nKGljb24pfWBdOiBpY29uICE9IG51bGwsXHJcbiAgICAgIFtzaXplQ2xhc3NuYW1lXTogc2l6ZSAhPSBudWxsLFxyXG4gICAgICBzZWxlY3RlZCxcclxuICAgICAgW2J1dHRvblR5cGVDbGFzc25hbWVdOiBidXR0b25UeXBlICE9IG51bGwsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IFdyYXBwZXIgPSB3cmFwcGVyRWxlbWVudCA9PSBudWxsID8gJ2J1dHRvbicgOiB3cmFwcGVyRWxlbWVudDtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxXcmFwcGVyXHJcbiAgICAgICAgY2xhc3NOYW1lPXtuZXdDbGFzc05hbWV9XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG51Y2xpZGUtaW50ZXJuYWwvanN4LXNpbXBsZS1jYWxsYmFjay1yZWZzXHJcbiAgICAgICAgcmVmPXt0aGlzLl9vblJlZkNoYW5nZX1cclxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XHJcbiAgICAgICAgey4uLmJ1dHRvblByb3BzfVxyXG4gICAgICAgIHRpdGxlPXt0aXRsZVRvb2xUaXB9PlxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC9XcmFwcGVyPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19