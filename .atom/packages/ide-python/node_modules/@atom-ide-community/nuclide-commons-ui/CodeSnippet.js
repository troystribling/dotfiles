"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CodeSnippet = void 0;

var _AtomInput = require("./AtomInput");

var _assert = _interopRequireDefault(require("assert"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class CodeSnippet extends React.Component {
  constructor(...args) {
    super(...args);
    this._editor = void 0;
    this._ongoingSelection = void 0;
  }

  componentDidMount() {
    (0, _assert.default)(this._editor != null);

    const editor = this._editor.getTextEditor();

    const {
      grammar,
      highlights,
      startLine
    } = this.props;

    if (grammar) {
      editor.setGrammar(grammar);
    }

    if (highlights != null) {
      (0, _assert.default)(startLine != null);
      highlights.forEach(range => {
        const marker = editor.markBufferRange([[range.start.row - startLine, range.start.column], [range.end.row - startLine, range.end.column]]);
        editor.decorateMarker(marker, {
          type: 'highlight',
          class: 'code-snippet-highlight'
        });
      }); // Make sure at least one highlight is visible.

      if (highlights.length > 0) {
        editor.scrollToBufferPosition([highlights[0].end.row - startLine + 1, highlights[0].end.column]);
      }
    }
  }

  render() {
    const lineNumbers = [];
    let lineNumberColumn;

    if (this.props.startLine != null && this.props.endLine != null) {
      for (let i = this.props.startLine; i <= this.props.endLine; i++) {
        lineNumbers.push( /*#__PURE__*/React.createElement("div", {
          key: i,
          className: "nuclide-ui-code-snippet-line-number",
          onClick: evt => this.props.onLineClick(evt, i)
        }, i + 1));
      }

      lineNumberColumn = /*#__PURE__*/React.createElement("div", {
        className: "nuclide-ui-code-snippet-line-number-column"
      }, lineNumbers);
    }

    return /*#__PURE__*/React.createElement("div", {
      className: "nuclide-ui-code-snippet"
    }, lineNumberColumn, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
      ref: input => {
        this._editor = input;
      },
      initialValue: this.props.text,
      onMouseDown: e => {
        this._ongoingSelection = null;
      },
      onDidChangeSelectionRange: e => {
        this._ongoingSelection = e.selection;
      },
      onDidChange: this.props.onDidChange,
      onClick: e => {
        // If the user selected a range, cancel the `onClick` behavior
        // to enable copying the selection.
        let shouldCancel = false;

        if (this._ongoingSelection != null) {
          const {
            start,
            end
          } = this._ongoingSelection.getBufferRange();

          shouldCancel = start.compare(end) !== 0;
        }

        if (!shouldCancel) {
          this.props.onClick(e);
        }

        this._ongoingSelection = null;
      }
    }));
  }

}

exports.CodeSnippet = CodeSnippet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,