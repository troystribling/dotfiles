"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateSelectorExamples = void 0;

var React = _interopRequireWildcard(require("react"));

var _AtomInput = require("./AtomInput");

var _Block = require("./Block");

var _DateSelector = require("./DateSelector");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const ONE_WEEK = 1000 * 60 * 60 * 24 * 7;

class BasicExample extends React.Component {
  constructor(props) {
    super(props);

    this._onChangeDate = date => {
      this.setState({
        date
      });
    };

    this.state = {
      date: new Date()
    };
  }

  render() {
    return /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_DateSelector.DateSelector, {
      start: this.state.date,
      earliestDate: new Date(Date.now() - ONE_WEEK),
      latestDate: new Date(Date.now() + ONE_WEEK),
      onDatesChange: this._onChangeDate
    }));
  }

}

class RangeExample extends React.Component {
  constructor(props) {
    super(props);

    this._onChangeDate = (start, end) => {
      this.setState({
        start,
        end
      });
    };

    this.state = {
      start: null,
      end: null
    };
  }

  render() {
    return /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_DateSelector.DateSelector, {
      start: this.state.start,
      end: this.state.end,
      latestDate: new Date(Date.now() + ONE_WEEK),
      onDatesChange: this._onChangeDate,
      selectRange: true
    }));
  }

}

class OpenOnFocusExample extends React.Component {
  constructor(props) {
    super(props);

    this._onChangeDate = date => {
      this.setState({
        date
      });
    };

    this.state = {
      date: new Date()
    };
  }

  render() {
    return /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement("div", {
      style: {
        height: '27em'
      }
    }, /*#__PURE__*/React.createElement(_DateSelector.DateSelector, {
      start: this.state.date,
      onDatesChange: this._onChangeDate,
      showOnlyOnFocus: true
    }, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
      value: this.state.date ? this.state.date.toDateString() : '',
      placeholderText: "selected date"
    }))));
  }

}

const DateSelectorExamples = {
  sectionName: 'DateSelector',
  description: 'Renders a date selector.',
  examples: [{
    title: 'Select single date example',
    component: BasicExample
  }, {
    title: 'Select range of dates example',
    component: RangeExample
  }, {
    title: 'Open calendar on focus example',
    component: OpenOnFocusExample
  }]
};
exports.DateSelectorExamples = DateSelectorExamples;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0RhdGVTZWxlY3Rvci5leGFtcGxlLmpzIl0sIm5hbWVzIjpbIk9ORV9XRUVLIiwiQmFzaWNFeGFtcGxlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiX29uQ2hhbmdlRGF0ZSIsImRhdGUiLCJzZXRTdGF0ZSIsInN0YXRlIiwiRGF0ZSIsInJlbmRlciIsIm5vdyIsIlJhbmdlRXhhbXBsZSIsInN0YXJ0IiwiZW5kIiwiT3Blbk9uRm9jdXNFeGFtcGxlIiwiaGVpZ2h0IiwidG9EYXRlU3RyaW5nIiwiRGF0ZVNlbGVjdG9yRXhhbXBsZXMiLCJzZWN0aW9uTmFtZSIsImRlc2NyaXB0aW9uIiwiZXhhbXBsZXMiLCJ0aXRsZSIsImNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBT0EsTUFBTUEsUUFBUSxHQUFHLE9BQU8sRUFBUCxHQUFZLEVBQVosR0FBaUIsRUFBakIsR0FBc0IsQ0FBdkM7O0FBRUEsTUFBTUMsWUFBTixTQUEyQkMsS0FBSyxDQUFDQyxTQUFqQyxDQUErRDtBQUM3REMsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQWE7QUFDdEIsVUFBTUEsS0FBTjs7QUFEc0IsU0FLeEJDLGFBTHdCLEdBS1BDLElBQUQsSUFBdUI7QUFDckMsV0FBS0MsUUFBTCxDQUFjO0FBQUNELFFBQUFBO0FBQUQsT0FBZDtBQUNELEtBUHVCOztBQUV0QixTQUFLRSxLQUFMLEdBQWE7QUFBQ0YsTUFBQUEsSUFBSSxFQUFFLElBQUlHLElBQUo7QUFBUCxLQUFiO0FBQ0Q7O0FBTURDLEVBQUFBLE1BQU0sR0FBZTtBQUNuQix3QkFDRSxvQkFBQyxZQUFELHFCQUNFLG9CQUFDLDBCQUFEO0FBQ0UsTUFBQSxLQUFLLEVBQUUsS0FBS0Ys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QUh3QixDQUE3QiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtBdG9tSW5wdXR9IGZyb20gJy4vQXRvbUlucHV0JztcclxuaW1wb3J0IHtCbG9ja30gZnJvbSAnLi9CbG9jayc7XHJcbmltcG9ydCB7RGF0ZVNlbGVjdG9yfSBmcm9tICcuL0RhdGVTZWxlY3Rvcic7XHJcblxyXG5jb25zdCBPTkVfV0VFSyA9IDEwMDAgKiA2MCAqIDYwICogMjQgKiA3O1xyXG5cclxuY2xhc3MgQmFzaWNFeGFtcGxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwge2RhdGU6ID9EYXRlfT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7ZGF0ZTogbmV3IERhdGUoKX07XHJcbiAgfVxyXG5cclxuICBfb25DaGFuZ2VEYXRlID0gKGRhdGU6ID9EYXRlKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtkYXRlfSk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPEJsb2NrPlxyXG4gICAgICAgIDxEYXRlU2VsZWN0b3JcclxuICAgICAgICAgIHN0YXJ0PXt0aGlzLnN0YXRlLmRhdGV9XHJcbiAgICAgICAgICBlYXJsaWVzdERhdGU9e25ldyBEYXRlKERhdGUubm93KCkgLSBPTkVfV0VFSyl9XHJcbiAgICAgICAgICBsYXRlc3REYXRlPXtuZXcgRGF0ZShEYXRlLm5vdygpICsgT05FX1dFRUspfVxyXG4gICAgICAgICAgb25EYXRlc0NoYW5nZT17dGhpcy5fb25DaGFuZ2VEYXRlfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvQmxvY2s+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgUmFuZ2VFeGFtcGxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwge3N0YXJ0OiA/RGF0ZSwgZW5kOiA/RGF0ZX0+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge3N0YXJ0OiBudWxsLCBlbmQ6IG51bGx9O1xyXG4gIH1cclxuXHJcbiAgX29uQ2hhbmdlRGF0ZSA9IChzdGFydDogP0RhdGUsIGVuZDogP0RhdGUpOiB2b2lkID0+IHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe3N0YXJ0LCBlbmR9KTtcclxuICB9O1xyXG5cclxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8QmxvY2s+XHJcbiAgICAgICAgPERhdGVTZWxlY3RvclxyXG4gICAgICAgICAgc3RhcnQ9e3RoaXMuc3RhdGUuc3RhcnR9XHJcbiAgICAgICAgICBlbmQ9e3RoaXMuc3RhdGUuZW5kfVxyXG4gICAgICAgICAgbGF0ZXN0RGF0ZT17bmV3IERhdGUoRGF0ZS5ub3coKSArIE9ORV9XRUVLKX1cclxuICAgICAgICAgIG9uRGF0ZXNDaGFuZ2U9e3RoaXMuX29uQ2hhbmdlRGF0ZX1cclxuICAgICAgICAgIHNlbGVjdFJhbmdlPXt0cnVlfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvQmxvY2s+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgT3Blbk9uRm9jdXNFeGFtcGxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PGFueSwge2RhdGU6ID9EYXRlfT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7ZGF0ZTogbmV3IERhdGUoKX07XHJcbiAgfVxyXG5cclxuICBfb25DaGFuZ2VEYXRlID0gKGRhdGU6ID9EYXRlKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtkYXRlfSk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPEJsb2NrPlxyXG4gICAgICAgIDxkaXYgc3R5bGU9e3toZWlnaHQ6ICcyN2VtJ319PlxyXG4gICAgICAgICAgPERhdGVTZWxlY3RvclxyXG4gICAgICAgICAgICBzdGFydD17dGhpcy5zdGF0ZS5kYXRlfVxyXG4gICAgICAgICAgICBvbkRhdGVzQ2hhbmdlPXt0aGlzLl9vbkNoYW5nZURhdGV9XHJcbiAgICAgICAgICAgIHNob3dPbmx5T25Gb2N1cz17dHJ1ZX0+XHJcbiAgICAgICAgICAgIDxBdG9tSW5wdXRcclxuICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5kYXRlID8gdGhpcy5zdGF0ZS5kYXRlLnRvRGF0ZVN0cmluZygpIDogJyd9XHJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXJUZXh0PVwic2VsZWN0ZWQgZGF0ZVwiXHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8L0RhdGVTZWxlY3Rvcj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9CbG9jaz5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRGF0ZVNlbGVjdG9yRXhhbXBsZXMgPSB7XHJcbiAgc2VjdGlvbk5hbWU6ICdEYXRlU2VsZWN0b3InLFxyXG4gIGRlc2NyaXB0aW9uOiAnUmVuZGVycyBhIGRhdGUgc2VsZWN0b3IuJyxcclxuICBleGFtcGxlczogW1xyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ1NlbGVjdCBzaW5nbGUgZGF0ZSBleGFtcGxlJyxcclxuICAgICAgY29tcG9uZW50OiBCYXNpY0V4YW1wbGUsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ1NlbGVjdCByYW5nZSBvZiBkYXRlcyBleGFtcGxlJyxcclxuICAgICAgY29tcG9uZW50OiBSYW5nZUV4YW1wbGUsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ09wZW4gY2FsZW5kYXIgb24gZm9jdXMgZXhhbXBsZScsXHJcbiAgICAgIGNvbXBvbmVudDogT3Blbk9uRm9jdXNFeGFtcGxlLFxyXG4gICAgfSxcclxuICBdLFxyXG59O1xyXG4iXX0=