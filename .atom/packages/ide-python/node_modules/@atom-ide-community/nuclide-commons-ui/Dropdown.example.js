"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownExamples = void 0;

var React = _interopRequireWildcard(require("react"));

var _Dropdown = require("./Dropdown");

var _SplitButtonDropdown = require("./SplitButtonDropdown");

var _ModalMultiSelect = require("./ModalMultiSelect");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global alert */
const DropdownExample = (() => {
  const options = [{
    value: 1,
    label: 'One'
  }, {
    value: 2,
    label: 'Two'
  }, {
    value: 3,
    label: 'Three'
  }, {
    value: 4,
    label: 'Four'
  }];
  return () => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_Dropdown.Dropdown, {
    options: options,
    value: 2
  }));
})();

const SplitButtonDropdownExample = (() => {
  const options = [{
    value: 1,
    label: 'Build',
    icon: 'tools'
  }, {
    value: 2,
    label: 'Run',
    icon: 'triangle-right',
    selectedLabel: 'Run It!'
  }, {
    value: 3,
    label: 'Rocket',
    icon: 'rocket'
  }, {
    type: 'separator'
  }, {
    value: 4,
    label: 'Squirrel',
    icon: 'squirrel'
  }, {
    value: 5,
    label: 'Beaker',
    icon: 'telescope',
    disabled: true
  }];
  return () => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_SplitButtonDropdown.SplitButtonDropdown, {
    options: options,
    value: 2,
    onConfirm: // eslint-disable-next-line no-alert
    x => alert(`You selected ${x}!`)
  }));
})();

class ModalMultiSelectExample extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: [2]
    };
  }

  render() {
    const options = [{
      value: 1,
      label: 'One'
    }, {
      value: 2,
      label: 'Two'
    }, {
      value: 3,
      label: 'Three'
    }, {
      value: 4,
      label: 'Four'
    }];
    return /*#__PURE__*/React.createElement(_ModalMultiSelect.ModalMultiSelect, {
      options: options,
      onChange: value => {
        this.setState({
          value
        });
      },
      value: this.state.value
    });
  }

}

const DropdownExamples = {
  sectionName: 'Dropdowns',
  description: 'For selecting things.',
  examples: [{
    title: 'Dropdown',
    component: DropdownExample
  }, {
    title: 'Split Button Dropdown',
    component: SplitButtonDropdownExample
  }, {
    title: 'Modal Multi-Select',
    component: ModalMultiSelectExample
  }]
};
exports.DropdownExamples = DropdownExamples;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0Ryb3Bkb3duLmV4YW1wbGUuanMiXSwibmFtZXMiOlsiRHJvcGRvd25FeGFtcGxlIiwib3B0aW9ucyIsInZhbHVlIiwibGFiZWwiLCJTcGxpdEJ1dHRvbkRyb3Bkb3duRXhhbXBsZSIsImljb24iLCJzZWxlY3RlZExhYmVsIiwidHlwZSIsImRpc2FibGVkIiwieCIsImFsZXJ0IiwiTW9kYWxNdWx0aVNlbGVjdEV4YW1wbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsInJlbmRlciIsInNldFN0YXRlIiwiRHJvcGRvd25FeGFtcGxlcyIsInNlY3Rpb25OYW1lIiwiZGVzY3JpcHRpb24iLCJleGFtcGxlcyIsInRpdGxlIiwiY29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQWpCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBT0EsTUFBTUEsZUFBZSxHQUFHLENBQUMsTUFBTTtBQUM3QixRQUFNQyxPQUFPLEdBQUcsQ0FDZDtBQUFDQyxJQUFBQSxLQUFLLEVBQUUsQ0FBUjtBQUFXQyxJQUFBQSxLQUFLLEVBQUU7QUFBbEIsR0FEYyxFQUVkO0FBQUNELElBQUFBLEtBQUssRUFBRSxDQUFSO0FBQVdDLElBQUFBLEtBQUssRUFBRTtBQUFsQixHQUZjLEVBR2Q7QUFBQ0QsSUFBQUEsS0FBSyxFQUFFLENBQVI7QUFBV0MsSUFBQUEsS0FBSyxFQUFFO0FBQWxCLEdBSGMsRUFJZDtBQUFDRCxJQUFBQSxLQUFLLEVBQUUsQ0FBUjtBQUFXQyxJQUFBQSxLQUFLLEVBQUU7QUFBbEIsR0FKYyxDQUFoQjtBQU1BLFNBQU8sbUJBQ0wsOENBQ0Usb0JBQUMsa0JBQUQ7QUFBVSxJQUFBLE9BQU8sRUFBRUYsT0FBbkI7QUFBNEIsSUFBQSxLQUFLLEVBQUU7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QUFFRUMsSUFBQUEsU0FBUyxFQUFFYjtBQUZiLEdBVFE7QUFIb0IsQ0FBekIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG4vKiBnbG9iYWwgYWxlcnQgKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtEcm9wZG93bn0gZnJvbSAnLi9Ecm9wZG93bic7XHJcbmltcG9ydCB7U3BsaXRCdXR0b25Ecm9wZG93bn0gZnJvbSAnLi9TcGxpdEJ1dHRvbkRyb3Bkb3duJztcclxuaW1wb3J0IHtNb2RhbE11bHRpU2VsZWN0fSBmcm9tICcuL01vZGFsTXVsdGlTZWxlY3QnO1xyXG5cclxuY29uc3QgRHJvcGRvd25FeGFtcGxlID0gKCgpID0+IHtcclxuICBjb25zdCBvcHRpb25zID0gW1xyXG4gICAge3ZhbHVlOiAxLCBsYWJlbDogJ09uZSd9LFxyXG4gICAge3ZhbHVlOiAyLCBsYWJlbDogJ1R3byd9LFxyXG4gICAge3ZhbHVlOiAzLCBsYWJlbDogJ1RocmVlJ30sXHJcbiAgICB7dmFsdWU6IDQsIGxhYmVsOiAnRm91cid9LFxyXG4gIF07XHJcbiAgcmV0dXJuICgpOiBSZWFjdC5FbGVtZW50PGFueT4gPT4gKFxyXG4gICAgPGRpdj5cclxuICAgICAgPERyb3Bkb3duIG9wdGlvbnM9e29wdGlvbnN9IHZhbHVlPXsyfSAvPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufSkoKTtcclxuXHJcbmNvbnN0IFNwbGl0QnV0dG9uRHJvcGRvd25FeGFtcGxlID0gKCgpID0+IHtcclxuICBjb25zdCBvcHRpb25zID0gW1xyXG4gICAge3ZhbHVlOiAxLCBsYWJlbDogJ0J1aWxkJywgaWNvbjogJ3Rvb2xzJ30sXHJcbiAgICB7dmFsdWU6IDIsIGxhYmVsOiAnUnVuJywgaWNvbjogJ3RyaWFuZ2xlLXJpZ2h0Jywgc2VsZWN0ZWRMYWJlbDogJ1J1biBJdCEnfSxcclxuICAgIHt2YWx1ZTogMywgbGFiZWw6ICdSb2NrZXQnLCBpY29uOiAncm9ja2V0J30sXHJcbiAgICB7dHlwZTogJ3NlcGFyYXRvcid9LFxyXG4gICAge3ZhbHVlOiA0LCBsYWJlbDogJ1NxdWlycmVsJywgaWNvbjogJ3NxdWlycmVsJ30sXHJcbiAgICB7dmFsdWU6IDUsIGxhYmVsOiAnQmVha2VyJywgaWNvbjogJ3RlbGVzY29wZScsIGRpc2FibGVkOiB0cnVlfSxcclxuICBdO1xyXG4gIHJldHVybiAoKTogUmVhY3QuRWxlbWVudDxhbnk+ID0+IChcclxuICAgIDxkaXY+XHJcbiAgICAgIDxTcGxpdEJ1dHRvbkRyb3Bkb3duXHJcbiAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cclxuICAgICAgICB2YWx1ZT17Mn1cclxuICAgICAgICBvbkNvbmZpcm09e1xyXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWFsZXJ0XHJcbiAgICAgICAgICB4ID0+IGFsZXJ0KGBZb3Ugc2VsZWN0ZWQgJHt4fSFgKVxyXG4gICAgICAgIH1cclxuICAgICAgLz5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn0pKCk7XHJcblxyXG5jbGFzcyBNb2RhbE11bHRpU2VsZWN0RXhhbXBsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxcclxuICB2b2lkLFxyXG4gIHt2YWx1ZTogQXJyYXk8bnVtYmVyPn0sXHJcbj4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiB2b2lkKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge3ZhbHVlOiBbMl19O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IFtcclxuICAgICAge3ZhbHVlOiAxLCBsYWJlbDogJ09uZSd9LFxyXG4gICAgICB7dmFsdWU6IDIsIGxhYmVsOiAnVHdvJ30sXHJcbiAgICAgIHt2YWx1ZTogMywgbGFiZWw6ICdUaHJlZSd9LFxyXG4gICAgICB7dmFsdWU6IDQsIGxhYmVsOiAnRm91cid9LFxyXG4gICAgXTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxNb2RhbE11bHRpU2VsZWN0XHJcbiAgICAgICAgb3B0aW9ucz17b3B0aW9uc31cclxuICAgICAgICBvbkNoYW5nZT17dmFsdWUgPT4ge1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7dmFsdWV9KTtcclxuICAgICAgICB9fVxyXG4gICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnZhbHVlfVxyXG4gICAgICAvPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBEcm9wZG93bkV4YW1wbGVzID0ge1xyXG4gIHNlY3Rpb25OYW1lOiAnRHJvcGRvd25zJyxcclxuICBkZXNjcmlwdGlvbjogJ0ZvciBzZWxlY3RpbmcgdGhpbmdzLicsXHJcbiAgZXhhbXBsZXM6IFtcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICdEcm9wZG93bicsXHJcbiAgICAgIGNvbXBvbmVudDogRHJvcGRvd25FeGFtcGxlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICdTcGxpdCBCdXR0b24gRHJvcGRvd24nLFxyXG4gICAgICBjb21wb25lbnQ6IFNwbGl0QnV0dG9uRHJvcGRvd25FeGFtcGxlLFxyXG4gICAgfSxcclxuICAgIHtcclxuICAgICAgdGl0bGU6ICdNb2RhbCBNdWx0aS1TZWxlY3QnLFxyXG4gICAgICBjb21wb25lbnQ6IE1vZGFsTXVsdGlTZWxlY3RFeGFtcGxlLFxyXG4gICAgfSxcclxuICBdLFxyXG59O1xyXG4iXX0=