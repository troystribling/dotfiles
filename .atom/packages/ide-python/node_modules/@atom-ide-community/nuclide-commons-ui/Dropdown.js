"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ButtonSizes", {
  enumerable: true,
  get: function () {
    return _Button.ButtonSizes;
  }
});
exports.DropdownButton = exports.Dropdown = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _assert = _interopRequireDefault(require("assert"));

var React = _interopRequireWildcard(require("react"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _Button = require("./Button");

var _Icon = require("./Icon");

var _electronRemote = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/electron-remote"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
(0, _assert.default)(_electronRemote.default != null); // For backwards compat, we have to do some conversion here.

class Dropdown extends React.Component {
  constructor(...args) {
    super(...args);
    this._menu = void 0;
    this._button = void 0;

    this._updateButtonRef = button => {
      this._button = button;
    };

    this._openMenu = event => {
      const buttonRect = (0, _nullthrows.default)(this._button).getBoundingClientRect();
      this._menu = this._menuFromOptions(this.props.options);

      this._menu.popup({
        x: Math.floor(buttonRect.left),
        y: Math.floor(buttonRect.bottom),
        async: true
      });

      event.stopPropagation();
    };
  }

  componentWillUnmount() {
    this._closeMenu();
  }

  componentDidUpdate() {
    this._closeMenu();
  }

  _closeMenu() {
    if (this._menu != null) {
      this._menu.closePopup();

      this._menu = null;
    }
  }

  render() {
    const {
      label: providedLabel,
      options,
      placeholder
    } = this.props;
    let label;

    if (providedLabel != null) {
      label = providedLabel;
    } else {
      const selectedOption = this._findSelectedOption(options);

      if (selectedOption == null) {
        if (placeholder != null) {
          label = placeholder;
        } else {
          label = this._renderSelectedLabel(options[0]);
        }
      } else {
        label = this._renderSelectedLabel(selectedOption);
      }
    }

    return /*#__PURE__*/React.createElement(DropdownButton, {
      buttonType: this.props.buttonType,
      className: this.props.className,
      disabled: this.props.disabled,
      onButtonDOMNodeChange: this._updateButtonRef,
      isFlat: this.props.isFlat,
      buttonComponent: this.props.buttonComponent,
      onExpand: this._openMenu,
      size: this.props.size,
      tooltip: this.props.tooltip,
      tabIndex: this.props.tabIndex
    }, label);
  }

  _renderSelectedLabel(option) {
    let text = null;

    if (option == null) {
      text = '';
    } else if (typeof option.selectedLabel === 'string') {
      text = option.selectedLabel;
    } else if (typeof option.label === 'string') {
      text = option.label;
    }

    if (text == null || text === '') {
      return null;
    }

    return text;
  }

  _menuFromOptions(options) {
    const menu = new _electronRemote.default.Menu();
    options.forEach(option => {
      if (option.type === 'separator') {
        menu.append(new _electronRemote.default.MenuItem({
          type: 'separator'
        }));
      } else if (option.type === 'submenu') {
        const submenu = option.submenu;
        menu.append(new _electronRemote.default.MenuItem({
          type: 'submenu',
          label: option.label,
          enabled: option.disabled !== true,
          submenu: this._menuFromOptions(submenu)
        }));
      } else if (!Boolean(option.hidden)) {
        menu.append(new _electronRemote.default.MenuItem({
          type: 'checkbox',
          checked: this._optionIsSelected(this.props.value, option.value),
          label: option.label,
          enabled: option.disabled !== true,
          click: () => {
            if (this.props.onChange != null) {
              this.props.onChange(option.value);
            }
          }
        }));
      }
    });
    return menu;
  }

  _optionIsSelected(dropdownValue, optionValue) {
    return this.props.selectionComparator ? this.props.selectionComparator(dropdownValue, optionValue) : dropdownValue === optionValue;
  }

  _findSelectedOption(options) {
    let result = null;

    for (const option of options) {
      if (option.type === 'separator') {
        continue;
      } else if (option.type === 'submenu') {
        const submenu = option.submenu;
        result = this._findSelectedOption(submenu);
      } else if (this._optionIsSelected(this.props.value, option.value)) {
        result = option;
      }

      if (result) {
        break;
      }
    }

    return result;
  }

}

exports.Dropdown = Dropdown;
Dropdown.defaultProps = {
  className: '',
  disabled: false,
  isFlat: false,
  options: [],
  value: null,
  title: ''
};

const noop = () => {};
/**
 * Just the button part. This is useful for when you want to customize the dropdown behavior (e.g.)
 * show it asynchronously.
 */


class DropdownButton extends React.Component {
  constructor(...args) {
    super(...args);
    this._button = void 0;
    this._disposable = void 0;

    this._handleButtonDOMNodeChange = button => {
      this._button = button;

      if (this.props.onButtonDOMNodeChange != null) {
        this.props.onButtonDOMNodeChange(button);
      }
    };
  }

  componentDidMount() {
    this._disposable = atom.commands.add((0, _nullthrows.default)(this._button), 'core:move-down', ({
      originalEvent
    }) => {
      (0, _assert.default)(originalEvent instanceof KeyboardEvent);

      if (this.props.onExpand != null) {
        this.props.onExpand(originalEvent);
      }
    });
  }

  componentWillUnmount() {
    (0, _nullthrows.default)(this._disposable).dispose();
  }

  render() {
    const {
      buttonComponent,
      buttonType,
      children,
      disabled,
      isFlat,
      onExpand,
      size,
      tooltip
    } = this.props;
    const ButtonComponent = buttonComponent || _Button.Button;
    const className = (0, _classnames.default)('nuclide-ui-dropdown', this.props.className, {
      'nuclide-ui-dropdown-flat': isFlat === true
    });
    const label = children == null ? /*#__PURE__*/React.createElement("span", {
      className: "sr-only"
    }, "Open Dropdown") : /*#__PURE__*/React.createElement("span", {
      className: "nuclide-dropdown-label-text-wrapper"
    }, children);
    return /*#__PURE__*/React.createElement(ButtonComponent, {
      buttonType: buttonType,
      onButtonDOMNodeChange: this._handleButtonDOMNodeChange,
      tooltip: tooltip,
      size: getButtonSize(size),
      className: className,
      disabled: disabled === true,
      onClick: onExpand || noop,
      tabIndex: this.props.tabIndex
    }, label, /*#__PURE__*/React.createElement(_Icon.Icon, {
      icon: "triangle-down",
      className: "nuclide-ui-dropdown-icon"
    }));
  }

}

exports.DropdownButton = DropdownButton;

function getButtonSize(size) {
  switch (size) {
    case 'xs':
      return 'EXTRA_SMALL';

    case 'sm':
      return 'SMALL';

    case 'lg':
      return 'LARGE';

    default:
      return 'SMALL';
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,