"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _classnames = _interopRequireDefault(require("classnames"));

var _getFragmentGrammar = _interopRequireDefault(require("@atom-ide-community/nuclide-commons-atom/getFragmentGrammar"));

var _HighlightedCode = require("./HighlightedCode");

var _HighlightedText = _interopRequireDefault(require("./HighlightedText"));

var React = _interopRequireWildcard(require("react"));

var _PathWithFileIcon = _interopRequireDefault(require("./PathWithFileIcon"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* globals getSelection, requestAnimationFrame */
// $FlowIgnore: Not an official API yet.
const ConcurrentMode = React.unstable_ConcurrentMode; // Asynchronously highlight any results with a lot of lines.

const ASYNC_LINE_LIMIT = 5; // Must match value defined in FileResults.less.

const TAB_SIZE = 8; // Return the number of leading tabs in the line.

function countLeadingTabs(line) {
  let tabsSeen = 0;

  for (let index = 0; index < line.length; index++) {
    if (line.charAt(index) === '\t') {
      tabsSeen++;
    } else {
      break;
    }
  }

  return tabsSeen;
} // Renders highlights for matches in the current line.
// Highlights are designed to be superimposed on the actual code.


function renderHighlights(line, matches) {
  const pieces = [];
  const leadingTabs = countLeadingTabs(line);
  let curChar = 0;
  matches.forEach((match, i) => {
    if (match.start.column > line.length) {
      // This occasionally happens when lines are truncated server-side. Ignore.
      return;
    }

    if (match.start.column > curChar) {
      // If we picked up any leading tabs, convert them to spaces.
      const tabDifference = Math.max(leadingTabs - curChar, 0);
      const tabExtraSpaces = (TAB_SIZE - 1) * tabDifference;
      pieces.push(' '.repeat(tabExtraSpaces + match.start.column - curChar));
    }

    const matchStart = Math.max(curChar, match.start.column); // Note that matches can overlap.

    if (matchStart < match.end.column) {
      pieces.push( /*#__PURE__*/React.createElement("span", {
        key: match.end.column,
        "data-column": match.start.column,
        className: "highlight-info"
      }, line.substring(matchStart, match.end.column)));
    }

    curChar = Math.max(curChar, match.end.column);
  });
  pieces.push('\n');
  return pieces;
}

function selectGrammar(path) {
  let bestMatch = null;
  let highestScore = -Infinity;
  atom.grammars.forEachGrammar(grammar => {
    // TODO: tree-sitter grammars are not supported yet.
    if (!('tokenizeLine' in grammar)) {
      return;
    }

    const score = atom.grammars.getGrammarScore(grammar, path, '');

    if (score > highestScore || bestMatch == null) {
      bestMatch = grammar;
      highestScore = score;
    }
  });
  (0, _assert.default)(bestMatch != null, 'no grammars found');
  return (0, _getFragmentGrammar.default)(bestMatch);
}

class FileResultsComponent extends React.Component {
  constructor(props) {
    super(props);

    this._onLineColumnClick = event => {
      const line = event.target.dataset.line;

      if (line != null) {
        this.props.onClick(this.props.fileResults.path, parseInt(line, 10));
      }
    };

    this._onCodeClick = (event, startLine, lineCount) => {
      let column = undefined;

      if (event.target instanceof HTMLElement && event.target.className === 'highlight-info') {
        // Highlights have columns attached as data-column.
        // (We could get this from the client coords as well, but it's harder.)
        column = parseInt(event.target.dataset.column, 10);
      } else {
        // Don't trigger if the user is trying to select something.
        const selection = getSelection();

        if (selection == null || selection.type === 'Range') {
          return;
        }
      }

      const {
        currentTarget,
        clientY
      } = event;

      if (!(currentTarget instanceof HTMLElement)) {
        return;
      } // Determine the line number via the relative click coordinates.


      const {
        top,
        height
      } = currentTarget.getBoundingClientRect();
      const relativeY = clientY - top;

      if (relativeY <= height) {
        const lineNumber = startLine + Math.floor(lineCount * relativeY / height);
        this.props.onClick(this.props.fileResults.path, lineNumber - 1, column);
      }
    };

    this._onToggle = () => {
      this.props.onToggle(this.props.fileResults.path);
    };

    this._onFileClick = event => {
      const {
        groups
      } = this.props.fileResults;

      if (groups.length === 0) {
        this.props.onClick(this.props.fileResults.path);
      } else {
        this.props.onClick(this.props.fileResults.path, groups[0].matches[0].start.row, groups[0].matches[0].start.column);
      }

      event.stopPropagation();
    };

    const totalLines = props.fileResults.groups.reduce((acc, group) => acc + group.lines.length, 0);
    this.state = {
      highlighted: totalLines < ASYNC_LINE_LIMIT
    };
  }

  componentDidMount() {
    if (!this.state.highlighted) {
      this._startHighlighting();
    }
  }

  _startHighlighting() {
    // TODO(pelmers): Use react deferred update API when facebook/react/issues/13306 is ready
    requestAnimationFrame(() => {
      this.setState({
        highlighted: true
      });
    });
  }

  shouldComponentUpdate(nextProps, nextState) {
    return this.props.fileResults !== nextProps.fileResults || this.props.collapsed !== nextProps.collapsed || this.state.highlighted !== nextState.highlighted;
  } // Register event callbacks on the line number / code containers.
  // We can then use the data attributes to find the line numbers.


  render() {
    const {
      fileResults
    } = this.props;
    const {
      path,
      pathMatch,
      groups
    } = fileResults;
    let displayPath = path;

    if (pathMatch != null) {
      displayPath = /*#__PURE__*/React.createElement(_HighlightedText.default, {
        text: path,
        highlightedRanges: [[pathMatch[0], pathMatch[1]]]
      });
    }

    const grammar = selectGrammar(path);
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", {
      // Show the full path in a tooltip if it overflows.
      title: fileResults.path,
      className: "file-results-filename",
      onClick: this._onToggle
    }, /*#__PURE__*/React.createElement("span", {
      className: (0, _classnames.default)('icon', this.props.collapsed ? 'icon-chevron-right' : 'icon-chevron-down')
    }), /*#__PURE__*/React.createElement("span", {
      onClick: this._onFileClick
    }, /*#__PURE__*/React.createElement(_PathWithFileIcon.default, {
      path: fileResults.path,
      children: []
    }), displayPath)), /*#__PURE__*/React.createElement("div", null, !this.props.collapsed && groups.map((group, groupKey) => {
      const lineNumbers = [];
      const highlights = [];
      const code = group.lines.join('\n');
      let matchIndex = 0;

      for (let i = 0; i < group.lines.length; i++) {
        const lineNum = i + group.startLine; // Extract all matches that are on the current line.

        const lineMatches = [];

        while (matchIndex < group.matches.length) {
          const curMatch = group.matches[matchIndex];
          const curLine = curMatch.start.row + 1;

          if (curLine < lineNum) {
            continue;
          } else if (curLine === lineNum) {
            lineMatches.push(curMatch);
          } else {
            break;
          }

          matchIndex++;
        }

        lineNumbers.push( /*#__PURE__*/React.createElement("div", {
          key: lineNum,
          "data-line": lineNum - 1
        }, lineNum));
        highlights.push(renderHighlights(group.lines[i], lineMatches));
      }

      return /*#__PURE__*/React.createElement("div", {
        key: groupKey,
        className: "file-results-snippet"
      }, /*#__PURE__*/React.createElement("div", {
        onClick: this._onLineColumnClick,
        className: "file-results-line-numbers"
      }, lineNumbers), /*#__PURE__*/React.createElement("div", {
        onClick: evt => this._onCodeClick(evt, group.startLine, group.lines.length),
        className: "file-results-code"
      }, this.state.highlighted ? /*#__PURE__*/React.createElement(ConcurrentMode, null, /*#__PURE__*/React.createElement(_HighlightedCode.HighlightedLines, {
        grammar: grammar,
        code: code
      })) : code, /*#__PURE__*/React.createElement("div", {
        className: "file-results-highlights"
      }, highlights)));
    })));
  }

}

exports.default = FileResultsComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0ZpbGVSZXN1bHRzQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbIkNvbmN1cnJlbnRNb2RlIiwiUmVhY3QiLCJ1bnN0YWJsZV9Db25jdXJyZW50TW9kZSIsIkFTWU5DX0xJTkVfTElNSVQiLCJUQUJfU0laRSIsImNvdW50TGVhZGluZ1RhYnMiLCJsaW5lIiwidGFic1NlZW4iLCJpbmRleCIsImxlbmd0aCIsImNoYXJBdCIsInJlbmRlckhpZ2hsaWdodHMiLCJtYXRjaGVzIiwicGllY2VzIiwibGVhZGluZ1RhYnMiLCJjdXJDaGFyIiwiZm9yRWFjaCIsIm1hdGNoIiwiaSIsInN0YXJ0IiwiY29sdW1uIiwidGFiRGlmZmVyZW5jZSIsIk1hdGgiLCJtYXgiLCJ0YWJFeHRyYVNwYWNlcyIsInB1c2giLCJyZXBlYXQiLCJtYXRjaFN0YXJ0IiwiZW5kIiwic3Vic3RyaW5nIiwic2VsZWN0R3JhbW1hciIsInBhdGgiLCJiZXN0TWF0Y2giLCJoaWdoZXN0U2NvcmUiLCJJbmZpbml0eSIsImF0b20iLCJncmFtbWFycyIsImZvckVhY2hHcmFtbWFyIiwiZ3JhbW1hciIsInNjb3JlIiwiZ2V0R3JhbW1hclNjb3JlIiwiRmlsZVJlc3VsdHNDb21wb25lbnQiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwiX29uTGluZUNvbHVtbkNsaWNrIiwiZXZlbnQiLCJ0YXJnZXQiLCJkYXRhc2V0Iiwib25DbGljayIsImZpbGVSZXN1bHRzIiwicGFyc2VJbnQiLCJfb25Db2RlQ2xpY2siLCJzdGFydExpbmUiLCJsaW5lQ291bnQiLCJ1bmRlZmluZWQiLCJIVE1MRWxlbWVudCIsImNsYXNzTmFtZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInR5cGUiLCJjdXJyZW50VGFyZ2V0IiwiY2xpZW50WSIsInRvcCIsImhlaWdodCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlbGF0aXZlWSIsImxpbmVOdW1iZXIiLCJmbG9vciIsIl9vblRvZ2dsZSIsIm9uVG9nZ2xlIiwiX29uRmlsZUNsaWNrIiwiZ3JvdXBzIiwicm93Iiwic3RvcFByb3BhZ2F0aW9uIiwidG90YWxMaW5lcyIsInJlZHVjZSIsImFjYyIsImdyb3VwIiwibGluZXMiLCJzdGF0ZSIsImhpZ2hsaWdodGVkIiwiY29tcG9uZW50RGlkTW91bnQiLCJfc3RhcnRIaWdobGlnaHRpbmciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRTdGF0ZSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm5leHRQcm9wcyIsIm5leHRTdGF0ZSIsImNvbGxhcHNlZCIsInJlbmRlciIsInBhdGhNYXRjaCIsImRpc3BsYXlQYXRoIiwibWFwIiwiZ3JvdXBLZXkiLCJsaW5lTnVtYmVycyIsImhpZ2hsaWdodHMiLCJjb2RlIiwiam9pbiIsIm1hdGNoSW5kZXgiLCJsaW5lTnVtIiwibGluZU1hdGNoZXMiLCJjdXJNYXRjaCIsImN1ckxpbmUiLCJldnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFnQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFZQTtBQUNBLE1BQU1BLGNBQWMsR0FBR0MsS0FBSyxDQUFDQyx1QkFBN0IsQyxDQUVBOztBQUNBLE1BQU1DLGdCQUFnQixHQUFHLENBQXpCLEMsQ0FFQTs7QUFDQSxNQUFNQyxRQUFRLEdBQUcsQ0FBakIsQyxDQUVBOztBQUNBLFNBQVNDLGdCQUFULENBQTBCQyxJQUExQixFQUFnRDtBQUM5QyxNQUFJQyxRQUFRLEdBQUcsQ0FBZjs7QUFDQSxPQUFLLElBQUlDLEtBQUssR0FBRyxDQUFqQixFQUFvQkEsS0FBSyxHQUFHRixJQUFJLENBQUNHLE1BQWpDLEVBQXlDRCxLQUFLLEVBQTlDLEVBQWtEO0FBQ2hELFFBQUlGLElBQUksQ0FBQ0ksTUFBTCxDQUFZRixLQUFaLE1BQXVCLElB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QUFFLEtBQUtqRCxrQkFEaEI7QUFFRSxRQUFBLFNBQVMsRUFBQztBQUZaLFNBR0drRCxXQUhILENBREYsZUFNRTtBQUNFLFFBQUEsT0FBTyxFQUFFUyxHQUFHLElBQ1YsS0FBS3BELFlBQUwsQ0FDRW9ELEdBREYsRUFFRTFCLEtBQUssQ0FBQ3pCLFNBRlIsRUFHRXlCLEtBQUssQ0FBQ0MsS0FBTixDQUFZdEUsTUFIZCxDQUZKO0FBUUUsUUFBQSxTQUFTLEVBQUM7QUFSWixTQVNHLEtBQUt1RSxLQUFMLENBQVdDLFdBQVgsZ0JBQ0Msb0JBQUMsY0FBRCxxQkFDRSxvQkFBQyxpQ0FBRDtBQUFrQixRQUFBLE9BQU8sRUFBRTNDLE9BQTNCO0FBQW9DLFFBQUEsSUFBSSxFQUFFMkQ7QUFBMUMsUUFERixDQURELEdBS0NBLElBZEosZUFnQkU7QUFBSyxRQUFBLFNBQVMsRUFBQztBQUFmLFNBQTBDRCxVQUExQyxDQWhCRixDQU5GLENBREY7QUEyQkQsS0F2REQsQ0FGSixDQWpCRixDQURGO0FBK0VEOztBQXRMRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qIGdsb2JhbHMgZ2V0U2VsZWN0aW9uLCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKi9cclxuXHJcbmltcG9ydCB0eXBlIHtGaWxlUmVzdWx0c30gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvRmlsZVJlc3VsdHMnO1xyXG5cclxuaW1wb3J0IGludmFyaWFudCBmcm9tICdhc3NlcnQnO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0IGdldEZyYWdtZW50R3JhbW1hciBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy1hdG9tL2dldEZyYWdtZW50R3JhbW1hcic7XHJcbmltcG9ydCB7SGlnaGxpZ2h0ZWRMaW5lc30gZnJvbSAnLi9IaWdobGlnaHRlZENvZGUnO1xyXG5pbXBvcnQgSGlnaGxpZ2h0ZWRUZXh0IGZyb20gJy4vSGlnaGxpZ2h0ZWRUZXh0JztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUGF0aFdpdGhGaWxlSWNvbiBmcm9tICcuL1BhdGhXaXRoRmlsZUljb24nO1xyXG5cclxuLy8gJEZsb3dJZ25vcmU6IE5vdCBhbiBvZmZpY2lhbCBBUEkgeWV0LlxyXG5jb25zdCBDb25jdXJyZW50TW9kZSA9IFJlYWN0LnVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlO1xyXG5cclxuLy8gQXN5bmNocm9ub3VzbHkgaGlnaGxpZ2h0IGFueSByZXN1bHRzIHdpdGggYSBsb3Qgb2YgbGluZXMuXHJcbmNvbnN0IEFTWU5DX0xJTkVfTElNSVQgPSA1O1xyXG5cclxuLy8gTXVzdCBtYXRjaCB2YWx1ZSBkZWZpbmVkIGluIEZpbGVSZXN1bHRzLmxlc3MuXHJcbmNvbnN0IFRBQl9TSVpFID0gODtcclxuXHJcbi8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGxlYWRpbmcgdGFicyBpbiB0aGUgbGluZS5cclxuZnVuY3Rpb24gY291bnRMZWFkaW5nVGFicyhsaW5lOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gIGxldCB0YWJzU2VlbiA9IDA7XHJcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGxpbmUubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICBpZiAobGluZS5jaGFyQXQoaW5kZXgpID09PSAnXFx0Jykge1xyXG4gICAgICB0YWJzU2VlbisrO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0YWJzU2VlbjtcclxufVxyXG5cclxuLy8gUmVuZGVycyBoaWdobGlnaHRzIGZvciBtYXRjaGVzIGluIHRoZSBjdXJyZW50IGxpbmUuXHJcbi8vIEhpZ2hsaWdodHMgYXJlIGRlc2lnbmVkIHRvIGJlIHN1cGVyaW1wb3NlZCBvbiB0aGUgYWN0dWFsIGNvZGUuXHJcbmZ1bmN0aW9uIHJlbmRlckhpZ2hsaWdodHMoXHJcbiAgbGluZTogc3RyaW5nLFxyXG4gIG1hdGNoZXM6IEFycmF5PGF0b20kUmFuZ2U+LFxyXG4pOiBBcnJheTxzdHJpbmcgfCBSZWFjdC5FbGVtZW50PGFueT4+IHtcclxuICBjb25zdCBwaWVjZXMgPSBbXTtcclxuICBjb25zdCBsZWFkaW5nVGFicyA9IGNvdW50TGVhZGluZ1RhYnMobGluZSk7XHJcbiAgbGV0IGN1ckNoYXIgPSAwO1xyXG4gIG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gsIGkpID0+IHtcclxuICAgIGlmIChtYXRjaC5zdGFydC5jb2x1bW4gPiBsaW5lLmxlbmd0aCkge1xyXG4gICAgICAvLyBUaGlzIG9jY2FzaW9uYWxseSBoYXBwZW5zIHdoZW4gbGluZXMgYXJlIHRydW5jYXRlZCBzZXJ2ZXItc2lkZS4gSWdub3JlLlxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAobWF0Y2guc3RhcnQuY29sdW1uID4gY3VyQ2hhcikge1xyXG4gICAgICAvLyBJZiB3ZSBwaWNrZWQgdXAgYW55IGxlYWRpbmcgdGFicywgY29udmVydCB0aGVtIHRvIHNwYWNlcy5cclxuICAgICAgY29uc3QgdGFiRGlmZmVyZW5jZSA9IE1hdGgubWF4KGxlYWRpbmdUYWJzIC0gY3VyQ2hhciwgMCk7XHJcbiAgICAgIGNvbnN0IHRhYkV4dHJhU3BhY2VzID0gKFRBQl9TSVpFIC0gMSkgKiB0YWJEaWZmZXJlbmNlO1xyXG4gICAgICBwaWVjZXMucHVzaCgnICcucmVwZWF0KHRhYkV4dHJhU3BhY2VzICsgbWF0Y2guc3RhcnQuY29sdW1uIC0gY3VyQ2hhcikpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWF0Y2hTdGFydCA9IE1hdGgubWF4KGN1ckNoYXIsIG1hdGNoLnN0YXJ0LmNvbHVtbik7XHJcbiAgICAvLyBOb3RlIHRoYXQgbWF0Y2hlcyBjYW4gb3ZlcmxhcC5cclxuICAgIGlmIChtYXRjaFN0YXJ0IDwgbWF0Y2guZW5kLmNvbHVtbikge1xyXG4gICAgICBwaWVjZXMucHVzaChcclxuICAgICAgICA8c3BhblxyXG4gICAgICAgICAga2V5PXttYXRjaC5lbmQuY29sdW1ufVxyXG4gICAgICAgICAgZGF0YS1jb2x1bW49e21hdGNoLnN0YXJ0LmNvbHVtbn1cclxuICAgICAgICAgIGNsYXNzTmFtZT1cImhpZ2hsaWdodC1pbmZvXCI+XHJcbiAgICAgICAgICB7bGluZS5zdWJzdHJpbmcobWF0Y2hTdGFydCwgbWF0Y2guZW5kLmNvbHVtbil9XHJcbiAgICAgICAgPC9zcGFuPixcclxuICAgICAgKTtcclxuICAgIH1cclxuICAgIGN1ckNoYXIgPSBNYXRoLm1heChjdXJDaGFyLCBtYXRjaC5lbmQuY29sdW1uKTtcclxuICB9KTtcclxuICBwaWVjZXMucHVzaCgnXFxuJyk7XHJcbiAgcmV0dXJuIHBpZWNlcztcclxufVxyXG5cclxuZnVuY3Rpb24gc2VsZWN0R3JhbW1hcihwYXRoOiBzdHJpbmcpOiBhdG9tJEdyYW1tYXIge1xyXG4gIGxldCBiZXN0TWF0Y2ggPSBudWxsO1xyXG4gIGxldCBoaWdoZXN0U2NvcmUgPSAtSW5maW5pdHk7XHJcbiAgYXRvbS5ncmFtbWFycy5mb3JFYWNoR3JhbW1hcihncmFtbWFyID0+IHtcclxuICAgIC8vIFRPRE86IHRyZWUtc2l0dGVyIGdyYW1tYXJzIGFyZSBub3Qgc3VwcG9ydGVkIHlldC5cclxuICAgIGlmICghKCd0b2tlbml6ZUxpbmUnIGluIGdyYW1tYXIpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHNjb3JlID0gYXRvbS5ncmFtbWFycy5nZXRHcmFtbWFyU2NvcmUoZ3JhbW1hciwgcGF0aCwgJycpO1xyXG4gICAgaWYgKHNjb3JlID4gaGlnaGVzdFNjb3JlIHx8IGJlc3RNYXRjaCA9PSBudWxsKSB7XHJcbiAgICAgIGJlc3RNYXRjaCA9IGdyYW1tYXI7XHJcbiAgICAgIGhpZ2hlc3RTY29yZSA9IHNjb3JlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIGludmFyaWFudChiZXN0TWF0Y2ggIT0gbnVsbCwgJ25vIGdyYW1tYXJzIGZvdW5kJyk7XHJcbiAgcmV0dXJuIGdldEZyYWdtZW50R3JhbW1hcihiZXN0TWF0Y2gpO1xyXG59XHJcblxyXG50eXBlIFByb3BzID0ge1xyXG4gIGZpbGVSZXN1bHRzOiBGaWxlUmVzdWx0cyxcclxuICBjb2xsYXBzZWQ6IGJvb2xlYW4sXHJcbiAgb25DbGljazogKHBhdGg6IHN0cmluZywgbGluZT86IG51bWJlciwgY29sdW1uPzogbnVtYmVyKSA9PiBtaXhlZCxcclxuICBvblRvZ2dsZTogKHBhdGg6IHN0cmluZykgPT4gbWl4ZWQsXHJcbn07XHJcblxyXG50eXBlIFN0YXRlID0ge1xyXG4gIGhpZ2hsaWdodGVkOiBib29sZWFuLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmlsZVJlc3VsdHNDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8XHJcbiAgUHJvcHMsXHJcbiAgU3RhdGUsXHJcbj4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgY29uc3QgdG90YWxMaW5lcyA9IHByb3BzLmZpbGVSZXN1bHRzLmdyb3Vwcy5yZWR1Y2UoXHJcbiAgICAgIChhY2MsIGdyb3VwKSA9PiBhY2MgKyBncm91cC5saW5lcy5sZW5ndGgsXHJcbiAgICAgIDAsXHJcbiAgICApO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaGlnaGxpZ2h0ZWQ6IHRvdGFsTGluZXMgPCBBU1lOQ19MSU5FX0xJTUlULFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgaWYgKCF0aGlzLnN0YXRlLmhpZ2hsaWdodGVkKSB7XHJcbiAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0aW5nKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc3RhcnRIaWdobGlnaHRpbmcoKSB7XHJcbiAgICAvLyBUT0RPKHBlbG1lcnMpOiBVc2UgcmVhY3QgZGVmZXJyZWQgdXBkYXRlIEFQSSB3aGVuIGZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMzMwNiBpcyByZWFkeVxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7aGlnaGxpZ2h0ZWQ6IHRydWV9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wczogUHJvcHMsIG5leHRTdGF0ZTogU3RhdGUpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMucHJvcHMuZmlsZVJlc3VsdHMgIT09IG5leHRQcm9wcy5maWxlUmVzdWx0cyB8fFxyXG4gICAgICB0aGlzLnByb3BzLmNvbGxhcHNlZCAhPT0gbmV4dFByb3BzLmNvbGxhcHNlZCB8fFxyXG4gICAgICB0aGlzLnN0YXRlLmhpZ2hsaWdodGVkICE9PSBuZXh0U3RhdGUuaGlnaGxpZ2h0ZWRcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBSZWdpc3RlciBldmVudCBjYWxsYmFja3Mgb24gdGhlIGxpbmUgbnVtYmVyIC8gY29kZSBjb250YWluZXJzLlxyXG4gIC8vIFdlIGNhbiB0aGVuIHVzZSB0aGUgZGF0YSBhdHRyaWJ1dGVzIHRvIGZpbmQgdGhlIGxpbmUgbnVtYmVycy5cclxuICBfb25MaW5lQ29sdW1uQ2xpY2sgPSAoZXZlbnQ6IGFueSkgPT4ge1xyXG4gICAgY29uc3QgbGluZSA9IChldmVudC50YXJnZXQ6IEhUTUxFbGVtZW50KS5kYXRhc2V0LmxpbmU7XHJcbiAgICBpZiAobGluZSAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLmZpbGVSZXN1bHRzLnBhdGgsIHBhcnNlSW50KGxpbmUsIDEwKSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgX29uQ29kZUNsaWNrID0gKGV2ZW50OiBNb3VzZUV2ZW50LCBzdGFydExpbmU6IG51bWJlciwgbGluZUNvdW50OiBudW1iZXIpID0+IHtcclxuICAgIGxldCBjb2x1bW4gPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAoXHJcbiAgICAgIGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmXHJcbiAgICAgIGV2ZW50LnRhcmdldC5jbGFzc05hbWUgPT09ICdoaWdobGlnaHQtaW5mbydcclxuICAgICkge1xyXG4gICAgICAvLyBIaWdobGlnaHRzIGhhdmUgY29sdW1ucyBhdHRhY2hlZCBhcyBkYXRhLWNvbHVtbi5cclxuICAgICAgLy8gKFdlIGNvdWxkIGdldCB0aGlzIGZyb20gdGhlIGNsaWVudCBjb29yZHMgYXMgd2VsbCwgYnV0IGl0J3MgaGFyZGVyLilcclxuICAgICAgY29sdW1uID0gcGFyc2VJbnQoZXZlbnQudGFyZ2V0LmRhdGFzZXQuY29sdW1uLCAxMCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBEb24ndCB0cmlnZ2VyIGlmIHRoZSB1c2VyIGlzIHRyeWluZyB0byBzZWxlY3Qgc29tZXRoaW5nLlxyXG4gICAgICBjb25zdCBzZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24oKTtcclxuICAgICAgaWYgKHNlbGVjdGlvbiA9PSBudWxsIHx8IHNlbGVjdGlvbi50eXBlID09PSAnUmFuZ2UnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCB7Y3VycmVudFRhcmdldCwgY2xpZW50WX0gPSBldmVudDtcclxuICAgIGlmICghKGN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBsaW5lIG51bWJlciB2aWEgdGhlIHJlbGF0aXZlIGNsaWNrIGNvb3JkaW5hdGVzLlxyXG4gICAgY29uc3Qge3RvcCwgaGVpZ2h0fSA9IGN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBjb25zdCByZWxhdGl2ZVkgPSBjbGllbnRZIC0gdG9wO1xyXG4gICAgaWYgKHJlbGF0aXZlWSA8PSBoZWlnaHQpIHtcclxuICAgICAgY29uc3QgbGluZU51bWJlciA9XHJcbiAgICAgICAgc3RhcnRMaW5lICsgTWF0aC5mbG9vcigobGluZUNvdW50ICogcmVsYXRpdmVZKSAvIGhlaWdodCk7XHJcbiAgICAgIHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLmZpbGVSZXN1bHRzLnBhdGgsIGxpbmVOdW1iZXIgLSAxLCBjb2x1bW4pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIF9vblRvZ2dsZSA9ICgpID0+IHtcclxuICAgIHRoaXMucHJvcHMub25Ub2dnbGUodGhpcy5wcm9wcy5maWxlUmVzdWx0cy5wYXRoKTtcclxuICB9O1xyXG5cclxuICBfb25GaWxlQ2xpY2sgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgIGNvbnN0IHtncm91cHN9ID0gdGhpcy5wcm9wcy5maWxlUmVzdWx0cztcclxuICAgIGlmIChncm91cHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRoaXMucHJvcHMub25DbGljayh0aGlzLnByb3BzLmZpbGVSZXN1bHRzLnBhdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5wcm9wcy5vbkNsaWNrKFxyXG4gICAgICAgIHRoaXMucHJvcHMuZmlsZVJlc3VsdHMucGF0aCxcclxuICAgICAgICBncm91cHNbMF0ubWF0Y2hlc1swXS5zdGFydC5yb3csXHJcbiAgICAgICAgZ3JvdXBzWzBdLm1hdGNoZXNbMF0uc3RhcnQuY29sdW1uLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgY29uc3Qge2ZpbGVSZXN1bHRzfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7cGF0aCwgcGF0aE1hdGNoLCBncm91cHN9ID0gZmlsZVJlc3VsdHM7XHJcbiAgICBsZXQgZGlzcGxheVBhdGggPSBwYXRoO1xyXG4gICAgaWYgKHBhdGhNYXRjaCAhPSBudWxsKSB7XHJcbiAgICAgIGRpc3BsYXlQYXRoID0gKFxyXG4gICAgICAgIDxIaWdobGlnaHRlZFRleHRcclxuICAgICAgICAgIHRleHQ9e3BhdGh9XHJcbiAgICAgICAgICBoaWdobGlnaHRlZFJhbmdlcz17W1twYXRoTWF0Y2hbMF0sIHBhdGhNYXRjaFsxXV1dfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBncmFtbWFyID0gc2VsZWN0R3JhbW1hcihwYXRoKTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgLy8gU2hvdyB0aGUgZnVsbCBwYXRoIGluIGEgdG9vbHRpcCBpZiBpdCBvdmVyZmxvd3MuXHJcbiAgICAgICAgICB0aXRsZT17ZmlsZVJlc3VsdHMucGF0aH1cclxuICAgICAgICAgIGNsYXNzTmFtZT1cImZpbGUtcmVzdWx0cy1maWxlbmFtZVwiXHJcbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9vblRvZ2dsZX0+XHJcbiAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoXHJcbiAgICAgICAgICAgICAgJ2ljb24nLFxyXG4gICAgICAgICAgICAgIHRoaXMucHJvcHMuY29sbGFwc2VkID8gJ2ljb24tY2hldnJvbi1yaWdodCcgOiAnaWNvbi1jaGV2cm9uLWRvd24nLFxyXG4gICAgICAgICAgICApfVxyXG4gICAgICAgICAgLz5cclxuICAgICAgICAgIDxzcGFuIG9uQ2xpY2s9e3RoaXMuX29uRmlsZUNsaWNrfT5cclxuICAgICAgICAgICAgPFBhdGhXaXRoRmlsZUljb24gcGF0aD17ZmlsZVJlc3VsdHMucGF0aH0gY2hpbGRyZW49e1tdfSAvPlxyXG4gICAgICAgICAgICB7ZGlzcGxheVBhdGh9XHJcbiAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIHshdGhpcy5wcm9wcy5jb2xsYXBzZWQgJiZcclxuICAgICAgICAgICAgZ3JvdXBzLm1hcCgoZ3JvdXAsIGdyb3VwS2V5KSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc3QgbGluZU51bWJlcnMgPSBbXTtcclxuICAgICAgICAgICAgICBjb25zdCBoaWdobGlnaHRzID0gW107XHJcbiAgICAgICAgICAgICAgY29uc3QgY29kZSA9IGdyb3VwLmxpbmVzLmpvaW4oJ1xcbicpO1xyXG4gICAgICAgICAgICAgIGxldCBtYXRjaEluZGV4ID0gMDtcclxuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lTnVtID0gaSArIGdyb3VwLnN0YXJ0TGluZTtcclxuICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgYWxsIG1hdGNoZXMgdGhhdCBhcmUgb24gdGhlIGN1cnJlbnQgbGluZS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVNYXRjaGVzID0gW107XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobWF0Y2hJbmRleCA8IGdyb3VwLm1hdGNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGN1ck1hdGNoID0gZ3JvdXAubWF0Y2hlc1ttYXRjaEluZGV4XTtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgY3VyTGluZSA9IGN1ck1hdGNoLnN0YXJ0LnJvdyArIDE7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChjdXJMaW5lIDwgbGluZU51bSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1ckxpbmUgPT09IGxpbmVOdW0pIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW5lTWF0Y2hlcy5wdXNoKGN1ck1hdGNoKTtcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICBtYXRjaEluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVycy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGtleT17bGluZU51bX0gZGF0YS1saW5lPXtsaW5lTnVtIC0gMX0+XHJcbiAgICAgICAgICAgICAgICAgICAge2xpbmVOdW19XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PixcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRzLnB1c2gocmVuZGVySGlnaGxpZ2h0cyhncm91cC5saW5lc1tpXSwgbGluZU1hdGNoZXMpKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxkaXYga2V5PXtncm91cEtleX0gY2xhc3NOYW1lPVwiZmlsZS1yZXN1bHRzLXNuaXBwZXRcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuX29uTGluZUNvbHVtbkNsaWNrfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZpbGUtcmVzdWx0cy1saW5lLW51bWJlcnNcIj5cclxuICAgICAgICAgICAgICAgICAgICB7bGluZU51bWJlcnN9XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXZ0ID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkNvZGVDbGljayhcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZ0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cC5zdGFydExpbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwLmxpbmVzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmlsZS1yZXN1bHRzLWNvZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5oaWdobGlnaHRlZCA/IChcclxuICAgICAgICAgICAgICAgICAgICAgIDxDb25jdXJyZW50TW9kZT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEhpZ2hsaWdodGVkTGluZXMgZ3JhbW1hcj17Z3JhbW1hcn0gY29kZT17Y29kZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvQ29uY3VycmVudE1vZGU+XHJcbiAgICAgICAgICAgICAgICAgICAgKSA6IChcclxuICAgICAgICAgICAgICAgICAgICAgIGNvZGVcclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmlsZS1yZXN1bHRzLWhpZ2hsaWdodHNcIj57aGlnaGxpZ2h0c308L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=