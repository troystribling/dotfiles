"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HighlightedCodeExamples = void 0;

var React = _interopRequireWildcard(require("react"));

var _Button = require("./Button");

var _HighlightedCode = require("./HighlightedCode");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global requestAnimationFrame */
class HighlightedCodeExample extends React.Component {
  constructor(...args) {
    super(...args);
    this.state = {
      count: 1
    };

    this._addOneMore = () => {
      // TODO(pelmers): Use react deferred update API when facebook/react/issues/13306 is ready
      requestAnimationFrame(() => {
        // TODO: (wbinnssmith) T30771435 this setState depends on current state
        // and should use an updater function rather than an object
        // eslint-disable-next-line react/no-access-state-in-setstate
        this.setState({
          count: this.state.count + 1
        });
      });
    };
  }

  render() {
    const jsGrammar = atom.grammars.grammarForScopeName('source.js');

    if (jsGrammar == null) {
      return null;
    } // Use our own source code as an example!


    const code = (HighlightedCodeExample.toString() + '\n').repeat(this.state.count); // $FlowIgnore: Not an official API yet.

    const ConcurrentMode = React.unstable_ConcurrentMode;
    return /*#__PURE__*/React.createElement("div", null, "The code below is rendered with async React, so highlighting does not block (no matter how many lines have to be tokenized).", /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(_Button.Button, {
      onClick: this._addOneMore
    }, "Add more code!"), /*#__PURE__*/React.createElement(ConcurrentMode, null, /*#__PURE__*/React.createElement(_HighlightedCode.HighlightedCode, {
      grammar: jsGrammar,
      code: code,
      style: {
        marginTop: '8px'
      }
    })));
  }

}

const HighlightedCodeExamples = {
  sectionName: 'HighlightedCode',
  description: 'HighlightedCode provides a lighter-weight syntax highlighter for code.\n' + 'It uses the same tokenizer as Atom text editors but ditches the editor.',
  examples: [{
    title: 'HighlightedCode',
    component: HighlightedCodeExample
  }]
};
exports.HighlightedCodeExamples = HighlightedCodeExamples;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0hpZ2hsaWdodGVkQ29kZS5leGFtcGxlLmpzIl0sIm5hbWVzIjpbIkhpZ2hsaWdodGVkQ29kZUV4YW1wbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsInN0YXRlIiwiY291bnQiLCJfYWRkT25lTW9yZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFN0YXRlIiwicmVuZGVyIiwianNHcmFtbWFyIiwiYXRvbSIsImdyYW1tYXJzIiwiZ3JhbW1hckZvclNjb3BlTmFtZSIsImNvZGUiLCJ0b1N0cmluZyIsInJlcGVhdCIsIkNvbmN1cnJlbnRNb2RlIiwidW5zdGFibGVfQ29uY3VycmVudE1vZGUiLCJtYXJnaW5Ub3AiLCJIaWdobGlnaHRlZENvZGVFeGFtcGxlcyIsInNlY3Rpb25OYW1lIiwiZGVzY3JpcHRpb24iLCJleGFtcGxlcyIsInRpdGxlIiwiY29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQWhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBTUEsTUFBTUEsc0JBQU4sU0FBcUNDLEtBQUssQ0FBQ0MsU0FBM0MsQ0FBNEU7QUFBQTtBQUFBO0FBQUEsU0FDMUVDLEtBRDBFLEdBQ2xFO0FBQ05DLE1BQUFBLEtBQUssRUFBRTtBQURELEtBRGtFOztBQUFBLFNBSzFFQyxXQUwwRSxHQUs1RCxNQUFNO0FBQ2xCO0FBQ0FDLE1BQUFBLHFCQUFxQixDQUFDLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0EsYUFBS0MsUUFBTCxDQUFjO0FBQUNILFVBQUFBLEtBQUssRUFBRSxLQUFLRCxLQUFMLENBQVdDLEtBQVgsR0FBbUI7QUFBM0IsU0FBZDtBQUNELE9BTG9CLENBQXJCO0FBTUQsS0FieUU7QUFBQTs7QUFlMUVJLEVBQUFBLE1BQU0sR0FBZTtBQUNuQixVQUFNQyxTQUFTLEdBQUdDLElBQUksQ0FBQ0MsUUFBTCxDQUFjQyxtQkFBZCxDQUFrQyxXQUFsQyxDQUFsQjs7QUFDQSxRQUFJSCxTQUFTLElBQUksSUFBakIsRUFBdUI7QUFDckIsYUFBTyxJQUFQO0FBQ0QsS0FKa0IsQ0FLbkI7OztBQUNBLFVBQU1JLElBQUksR0FBRyxDQUFDYixzQkFBc0IsQ0FBQ2MsUUFBdkIsS0FBb0MsSUFBckMsRUFBMkNDLE1BQTNDLENBQ1gsS0FBS1osS0FBTCxDQUFXQyxLQURBLENBQWIsQ0FObUIsQ0FTbkI7O0FBQ0EsVUFBTVksY0FBYyxHQUFHZixLQUFLLENBQUNnQix1QkFBN0I7QUFDQSx3QkFDRSw4S0FHRSwrQkFIRixlQUlFLG9CQUFDLGNBQUQ7QUFBUSxNQUFBLE9BQU8sRUFBRSxLQUFLWjtBQUF0Qix3QkFKRixlQUtFLG9CQUFDLGNBQUQscUJBQ0Usb0JBQUMsZ0NBQUQ7QUFDRSxNQUFBLE9BQU8sRUFBRUksU0FEWDtBQUVFLE1BQUEsSUFBSSxFQUFFSSxJQUZSO0FBR0UsTUFBQSxLQUFLLEVBQUU7QUFBQ0ssUUFBQUEsU0FBUyxFQUFFO0FBQVo7QUFIVCxNQURGLENBTEYsQ0FERjtBQWVEOztBQXpDeUU7O0FBNENyRSxNQUFNQyx1QkFBdUIsR0FBRztBQUNyQ0MsRUFBQUEsV0FBVyxFQUFFLGlCQUR3QjtBQUVyQ0MsRUFBQUEsV0FBVyxFQUNULDZFQUNBLHlFQUptQztBQUtyQ0MsRUFBQUEsUUFBUSxFQUFFLENBQ1I7QUFDRUMsSUFBQUEsS0FBSyxFQUFFLGlCQURUO0FBRUVDLElBQUFBLFNBQVMsRUFBRXhCO0FBRmIsR0FEUTtBQUwyQixDQUFoQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3cgc3RyaWN0LWxvY2FsXHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG4vKiBnbG9iYWwgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICovXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7QnV0dG9ufSBmcm9tICcuL0J1dHRvbic7XHJcbmltcG9ydCB7SGlnaGxpZ2h0ZWRDb2RlfSBmcm9tICcuL0hpZ2hsaWdodGVkQ29kZSc7XHJcblxyXG5jbGFzcyBIaWdobGlnaHRlZENvZGVFeGFtcGxlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9LCB7fGNvdW50OiBudW1iZXJ8fT4ge1xyXG4gIHN0YXRlID0ge1xyXG4gICAgY291bnQ6IDEsXHJcbiAgfTtcclxuXHJcbiAgX2FkZE9uZU1vcmUgPSAoKSA9PiB7XHJcbiAgICAvLyBUT0RPKHBlbG1lcnMpOiBVc2UgcmVhY3QgZGVmZXJyZWQgdXBkYXRlIEFQSSB3aGVuIGZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMzMwNiBpcyByZWFkeVxyXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgLy8gVE9ETzogKHdiaW5uc3NtaXRoKSBUMzA3NzE0MzUgdGhpcyBzZXRTdGF0ZSBkZXBlbmRzIG9uIGN1cnJlbnQgc3RhdGVcclxuICAgICAgLy8gYW5kIHNob3VsZCB1c2UgYW4gdXBkYXRlciBmdW5jdGlvbiByYXRoZXIgdGhhbiBhbiBvYmplY3RcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L25vLWFjY2Vzcy1zdGF0ZS1pbi1zZXRzdGF0ZVxyXG4gICAgICB0aGlzLnNldFN0YXRlKHtjb3VudDogdGhpcy5zdGF0ZS5jb3VudCArIDF9KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcclxuICAgIGNvbnN0IGpzR3JhbW1hciA9IGF0b20uZ3JhbW1hcnMuZ3JhbW1hckZvclNjb3BlTmFtZSgnc291cmNlLmpzJyk7XHJcbiAgICBpZiAoanNHcmFtbWFyID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICAvLyBVc2Ugb3VyIG93biBzb3VyY2UgY29kZSBhcyBhbiBleGFtcGxlIVxyXG4gICAgY29uc3QgY29kZSA9IChIaWdobGlnaHRlZENvZGVFeGFtcGxlLnRvU3RyaW5nKCkgKyAnXFxuJykucmVwZWF0KFxyXG4gICAgICB0aGlzLnN0YXRlLmNvdW50LFxyXG4gICAgKTtcclxuICAgIC8vICRGbG93SWdub3JlOiBOb3QgYW4gb2ZmaWNpYWwgQVBJIHlldC5cclxuICAgIGNvbnN0IENvbmN1cnJlbnRNb2RlID0gUmVhY3QudW5zdGFibGVfQ29uY3VycmVudE1vZGU7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIFRoZSBjb2RlIGJlbG93IGlzIHJlbmRlcmVkIHdpdGggYXN5bmMgUmVhY3QsIHNvIGhpZ2hsaWdodGluZyBkb2VzIG5vdFxyXG4gICAgICAgIGJsb2NrIChubyBtYXR0ZXIgaG93IG1hbnkgbGluZXMgaGF2ZSB0byBiZSB0b2tlbml6ZWQpLlxyXG4gICAgICAgIDxiciAvPlxyXG4gICAgICAgIDxCdXR0b24gb25DbGljaz17dGhpcy5fYWRkT25lTW9yZX0+QWRkIG1vcmUgY29kZSE8L0J1dHRvbj5cclxuICAgICAgICA8Q29uY3VycmVudE1vZGU+XHJcbiAgICAgICAgICA8SGlnaGxpZ2h0ZWRDb2RlXHJcbiAgICAgICAgICAgIGdyYW1tYXI9e2pzR3JhbW1hcn1cclxuICAgICAgICAgICAgY29kZT17Y29kZX1cclxuICAgICAgICAgICAgc3R5bGU9e3ttYXJnaW5Ub3A6ICc4cHgnfX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9Db25jdXJyZW50TW9kZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEhpZ2hsaWdodGVkQ29kZUV4YW1wbGVzID0ge1xyXG4gIHNlY3Rpb25OYW1lOiAnSGlnaGxpZ2h0ZWRDb2RlJyxcclxuICBkZXNjcmlwdGlvbjpcclxuICAgICdIaWdobGlnaHRlZENvZGUgcHJvdmlkZXMgYSBsaWdodGVyLXdlaWdodCBzeW50YXggaGlnaGxpZ2h0ZXIgZm9yIGNvZGUuXFxuJyArXHJcbiAgICAnSXQgdXNlcyB0aGUgc2FtZSB0b2tlbml6ZXIgYXMgQXRvbSB0ZXh0IGVkaXRvcnMgYnV0IGRpdGNoZXMgdGhlIGVkaXRvci4nLFxyXG4gIGV4YW1wbGVzOiBbXHJcbiAgICB7XHJcbiAgICAgIHRpdGxlOiAnSGlnaGxpZ2h0ZWRDb2RlJyxcclxuICAgICAgY29tcG9uZW50OiBIaWdobGlnaHRlZENvZGVFeGFtcGxlLFxyXG4gICAgfSxcclxuICBdLFxyXG59O1xyXG4iXX0=