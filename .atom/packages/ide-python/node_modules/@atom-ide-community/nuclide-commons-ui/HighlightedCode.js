"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.highlightCode = highlightCode;
exports.highlightCodeHtml = highlightCodeHtml;
exports.HighlightedCode = HighlightedCode;
exports.HighlightedLines = HighlightedLines;

var _classnames = _interopRequireDefault(require("classnames"));

var _escapeHtml = _interopRequireDefault(require("escape-html"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const scopeToClassNameCache = new Map();

function scopeToClassName(scope) {
  let className = scopeToClassNameCache.get(scope);

  if (className == null) {
    className = 'syntax--' + scope.replace(/\./g, ' syntax--');
    scopeToClassNameCache.set(scope, className);
  }

  return className;
}
/**
 * Re-uses an Atom grammar's tokenization functions to produce syntax-higlighted text
 * without the overhead of creating a new TextEditor / TextBuffer.
 */


function highlightCode(grammar, code) {
  return grammar.tokenizeLines(code).map(highlightTokens);
}

function highlightTokens(line) {
  const resultLine = [];
  const scopeStack = [];

  for (const token of line) {
    const diffIndex = scopeStack.findIndex((stackEntry, i) => token.scopes[i] !== stackEntry);

    if (diffIndex !== -1) {
      while (diffIndex < scopeStack.length) {
        resultLine.push({
          type: 'end'
        });
        scopeStack.pop();
      }
    }

    while (scopeStack.length < token.scopes.length) {
      const scope = token.scopes[scopeStack.length];
      resultLine.push({
        type: 'start',
        className: scopeToClassName(scope)
      });
      scopeStack.push(scope);
    }

    resultLine.push({
      type: 'value',
      value: token.value
    });
  }

  while (scopeStack.length) {
    resultLine.push({
      type: 'end'
    });
    scopeStack.pop();
  }

  return resultLine;
}
/**
 * Converts the grammar/code directly to HTML (using highlightCode above).
 */


function highlightCodeHtml(grammar, code) {
  const tokens = highlightCode(grammar, code);
  return tokens.map(tokensToHtml).join('\n');
}

function tokensToHtml(tokens) {
  let html = '';

  for (const token of tokens) {
    switch (token.type) {
      case 'start':
        html += `<span class=${JSON.stringify(token.className)}>`;
        break;

      case 'end':
        html += '</span>';
        break;

      case 'value':
        html += (0, _escapeHtml.default)(token.value);
        break;
    }
  }

  return html;
}
/**
 * Ready-to-render component for highlighted code.
 * Can be used with React's experimental AsyncMode component for
 * asynchronous highlighting.
 */


function HighlightedCode({
  grammar,
  code,
  className,
  ...otherProps
}) {
  return /*#__PURE__*/React.createElement("pre", _extends({
    className: (0, _classnames.default)(className, 'nuclide-highlighted-code', 'native-key-bindings'),
    tabIndex: -1
  }, otherProps), /*#__PURE__*/React.createElement("code", null, /*#__PURE__*/React.createElement(HighlightedLines, {
    grammar: grammar,
    code: code
  })));
}
/**
 * Renders only the raw highlighted tokens used in HighlightedCode.
 * (you'll need to provide the styling yourself.)
 */


function HighlightedLines({
  grammar,
  code
}) {
  const lines = code.split('\n'); // This is really hacky but we need a way to pass the parsed rule stack from one line to the next.
  // We'll give each component a shared array of rule stacks that can be written / read from.
  // React needs to render each line in order to make this work (but this assumption seems safe).

  const ruleStacks = new Array(lines.length);
  return lines.map((line, i) => {
    return /*#__PURE__*/React.createElement(HighlightedLine, {
      key: i,
      grammar: grammar,
      line: line,
      lineNumber: i,
      ruleStacks: ruleStacks
    });
  });
}

function HighlightedLine({
  grammar,
  line,
  lineNumber,
  ruleStacks
}) {
  // $FlowIgnore
  const {
    tokens,
    ruleStack
  } = grammar.tokenizeLine(line, // Throws if the lines haven't been rendered in order.
  lineNumber > 0 ? (0, _nullthrows.default)(ruleStacks[lineNumber - 1]) : null,
  /* firstLine */
  lineNumber === 0);
  ruleStacks[lineNumber] = ruleStack;
  return /*#__PURE__*/React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: tokensToHtml(highlightTokens(tokens)) + '\n'
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,