"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Icon = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Renders an icon with optional text next to it.
 */
const Icon = props => {
  const {
    icon,
    children,
    className,
    ...remainingProps
  } = props;
  const newClassName = (0, _classnames.default)(className, icon == null ? null : `icon icon-${icon}`);
  return /*#__PURE__*/React.createElement("span", _extends({
    className: newClassName
  }, remainingProps), children);
};

exports.Icon = Icon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0ljb24uanMiXSwibmFtZXMiOlsiSWNvbiIsInByb3BzIiwiaWNvbiIsImNoaWxkcmVuIiwiY2xhc3NOYW1lIiwicmVtYWluaW5nUHJvcHMiLCJuZXdDbGFzc05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7QUFDQTs7Ozs7Ozs7OztBQStEQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxJQUFJLEdBQUlDLEtBQUQsSUFBa0I7QUFDcEMsUUFBTTtBQUFDQyxJQUFBQSxJQUFEO0FBQU9DLElBQUFBLFFBQVA7QUFBaUJDLElBQUFBLFNBQWpCO0FBQTRCLE9BQUdDO0FBQS9CLE1BQWlESixLQUF2RDtBQUNBLFFBQU1LLFlBQVksR0FBRyx5QkFDbkJGLFNBRG1CLEVBRW5CRixJQUFJLElBQUksSUFBUixHQUFlLElBQWYsR0FBdUIsYUFBWUEsSUFBSyxFQUZyQixDQUFyQjtBQUlBLHNCQUNFO0FBQU0sSUFBQSxTQUFTLEVBQUVJO0FBQWpCLEtBQW1DRCxjQUFuQyxHQUNHRixRQURILENBREY7QUFLRCxDQVhNIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3RcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgdHlwZSBOdWNsaWNvbiA9XHJcbiAgfCAnbnVjbGljb24tbnVjbGlkZSdcclxuICB8ICdudWNsaWNvbi1yZWFjdCdcclxuICB8ICdudWNsaWNvbi1idWNrJ1xyXG4gIHwgJ251Y2xpY29uLWhodm0nXHJcbiAgfCAnbnVjbGljb24taGFjaydcclxuICB8ICdudWNsaWNvbi1yZWxheSdcclxuICB8ICdudWNsaWNvbi1zd2lmdCdcclxuICB8ICdudWNsaWNvbi1maWxlLWRpcmVjdG9yeSdcclxuICB8ICdudWNsaWNvbi1maWxlLWRpcmVjdG9yeS1zdGFycmVkJ1xyXG4gIHwgJ251Y2xpY29uLWRlYnVnZ2VyJ1xyXG4gIHwgJ251Y2xpY29uLWFycm93LWRvd24nXHJcbiAgfCAnbnVjbGljb24tYnVnJ1xyXG4gIHwgJ251Y2xpY29uLWdyYXBocWwnXHJcbiAgfCAnbnVjbGljb24tY29tbWVudC1kaXNjdXNzaW9uJ1xyXG4gIHwgJ251Y2xpY29uLWNvbW1lbnQnXHJcbiAgfCAnbnVjbGljb24tamVzdC1vdXRsaW5lJ1xyXG4gIHwgJ251Y2xpY29uLWZsb3cnXHJcbiAgfCAnbnVjbGljb24tcmVhY3QtZGV2dG9vbHMnXHJcbiAgfCAnbnVjbGljb24tZnVubmVsJ1xyXG4gIHwgJ251Y2xpY29uLWVycm9yJ1xyXG4gIC8vIEN1cnJlbnRseSwgXCJudWNsaWNvbi13YXJuaW5nXCIgaXMgdGhlIHNhbWUgYXMgT2N0aWNvbidzIFwiYWxlcnRcIiBidXQgd2UgZHVwbGljYXRlIGl0IGJlY2F1c2UgdGhlXHJcbiAgLy8gT2N0aWNvbnMgYXJlbid0IHZlcnRpY2FsbHkgY2VudGVyZWQgYW5kIHRoZSBmYWN0IHRoYXQgdGhpcyBvbmUncyBmcmVxdWVudGx5IHNob3duIG5leHQgdG9cclxuICAvLyBudWNsaWNvbi1lcnJvciBtYWtlcyBpdCB3YXl5eXkgbW9yZSBvYnZpb3VzLlxyXG4gIHwgJ251Y2xpY29uLXdhcm5pbmcnXHJcbiAgfCAnbnVjbGljb24ta2ViYWItaG9yaXpvbnRhbCdcclxuICB8ICdudWNsaWNvbi1jcydcclxuICB8ICdudWNsaWNvbi1tZXRybydcclxuICB8ICdudWNsaWNvbi1jb25uZWN0ZWQnXHJcbiAgfCAnbnVjbGljb24tZGlzY29ubmVjdGVkJ1xyXG4gIHwgJ251Y2xpY29uLWVqZWN0J1xyXG4gIHwgJ251Y2xpY29uLWFsbC1pdGVtcydcclxuICB8ICdudWNsaWNvbi1sb2NhbCdcclxuICB8ICdudWNsaWNvbi1yZW1vdGUnXHJcbiAgfCAnbnVjbGljb24tY29uZmlnJ1xyXG4gIHwgJ251Y2xpY29uLXNuYXBzaG90J1xyXG4gIHwgJ251Y2xpY29uLXN1Y2Nlc3MnXHJcbiAgfCAnbnVjbGljb24tdGltZS1zdGFydCdcclxuICB8ICdudWNsaWNvbi10aW1lLWVuZCdcclxuICB8ICdudWNsaWNvbi1tZXRyby1kaXNhYmxlZCdcclxuICB8ICdudWNsaWNvbi1tZXRyby13YWl0aW5nJ1xyXG4gIHwgJ251Y2xpY29uLWxpZ2h0YnVsYi1maWxsZWQnXHJcbiAgfCAnbnVjbGljb24tbnQnXHJcbiAgfCAnbnVjbGljb24tYXJjaGl2ZSdcclxuICB8ICdudWNsaWNvbi1pbmZpbml0eSdcclxuICB8ICdudWNsaWNvbi1kZXNrdG9wJ1xyXG4gIHwgJ251Y2xpY29uLW1vYmlsZSdcclxuICB8ICdudWNsaWNvbi1saWdodG5pbmcnXHJcbiAgfCAnbnVjbGljb24taGFza2VsbCdcclxuICB8ICdudWNsaWNvbi1vbi1kZW1hbmQnO1xyXG5cclxuZXhwb3J0IHR5cGUgSWNvbk5hbWUgPSBOdWNsaWNvbiB8IGF0b20kT2N0aWNvbjtcclxuXHJcbnR5cGUgUHJvcHMgPSB7XHJcbiAgLyoqIEljb24gbmFtZSwgd2l0aG91dCB0aGUgYGljb24tYCBwcmVmaXguIEUuZy4gYCdhcnJvdy11cCdgICovXHJcbiAgaWNvbjogSWNvbk5hbWUsXHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nLFxyXG4gIC8qKiBPcHRpb25hbCB0ZXh0IGNvbnRlbnQgdG8gcmVuZGVyIG5leHQgdG8gdGhlIGljb24uICovXHJcbiAgY2hpbGRyZW4/OiBSZWFjdC5Ob2RlLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlbmRlcnMgYW4gaWNvbiB3aXRoIG9wdGlvbmFsIHRleHQgbmV4dCB0byBpdC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBJY29uID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IHtpY29uLCBjaGlsZHJlbiwgY2xhc3NOYW1lLCAuLi5yZW1haW5pbmdQcm9wc30gPSBwcm9wcztcclxuICBjb25zdCBuZXdDbGFzc05hbWUgPSBjbGFzc25hbWVzKFxyXG4gICAgY2xhc3NOYW1lLFxyXG4gICAgaWNvbiA9PSBudWxsID8gbnVsbCA6IGBpY29uIGljb24tJHtpY29ufWAsXHJcbiAgKTtcclxuICByZXR1cm4gKFxyXG4gICAgPHNwYW4gY2xhc3NOYW1lPXtuZXdDbGFzc05hbWV9IHsuLi5yZW1haW5pbmdQcm9wc30+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvc3Bhbj5cclxuICApO1xyXG59O1xyXG4iXX0=