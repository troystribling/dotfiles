"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _event = require("@atom-ide-community/nuclide-commons/event");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var React = _interopRequireWildcard(require("react"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * A more accessible abstraction over `<a>`s in Atom, where the default behavior
 * prevents pressing Enter/Return from opening a link. In Atom, the `native-key-bindings`
 * on `<a>`s addresses this, but prevents tabbing to/from these elements.
 *
 * Instead, listen for 'atom:core-confirm' (which by default occurs on Enter/Return)
 * and dispatch a simulated click MouseEvent when these happen. This is not unlike
 * typical browser behavior when Enter/Return is pressed on links, triggering their
 * 'click' event with a simulated MouseEvent.
 */
class Link extends React.Component {
  constructor(...args) {
    super(...args);
    this._disposable = void 0;
    this._node = void 0;

    this._updateNode = node => {
      this._node = node;
    };
  }

  componentDidMount() {
    this._disposable = new _UniversalDisposable.default((0, _event.observableFromSubscribeFunction)(cb => atom.commands.add((0, _nullthrows.default)(this._node), 'core:confirm', cb)).subscribe(() => {
      if (this._node == null) {
        return;
      }

      this._node.dispatchEvent(new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
        view: window
      }));
    }));
  }

  componentWillUnmount() {
    if (this._disposable != null) {
      this._disposable.dispose();
    }
  }

  render() {
    return /*#__PURE__*/React.createElement("a", _extends({}, this.props, {
      ref: this._updateNode
    }));
  }

}

exports.default = Link;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0xpbmsuanMiXSwibmFtZXMiOlsiTGluayIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX2Rpc3Bvc2FibGUiLCJfbm9kZSIsIl91cGRhdGVOb2RlIiwibm9kZSIsImNvbXBvbmVudERpZE1vdW50IiwiVW5pdmVyc2FsRGlzcG9zYWJsZSIsImNiIiwiYXRvbSIsImNvbW1hbmRzIiwiYWRkIiwic3Vic2NyaWJlIiwiZGlzcGF0Y2hFdmVudCIsIk1vdXNlRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInZpZXciLCJ3aW5kb3ciLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRpc3Bvc2UiLCJyZW5kZXIiLCJwcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSxNQUFNQSxJQUFOLFNBQW1CQyxLQUFLLENBQUNDLFNBQXpCLENBQXVDO0FBQUE7QUFBQTtBQUFBLFNBQ3BEQyxXQURvRDtBQUFBLFNBRXBEQyxLQUZvRDs7QUFBQSxTQThCcERDLFdBOUJvRCxHQThCckNDLElBQUQsSUFBOEI7QUFDMUMsV0FBS0YsS0FBTCxHQUFhRSxJQUFiO0FBQ0QsS0FoQ21EO0FBQUE7O0FBSXBEQyxFQUFBQSxpQkFBaUIsR0FBRztBQUNsQixTQUFLSixXQUFMLEdBQW1CLElBQUlLLDRCQUFKLENBQ2pCLDRDQUFnQ0MsRUFBRSxJQUNoQ0MsSUFBSSxDQUFDQyxRQUFMLENBQWNDLEdBQWQsQ0FBa0IseUJBQVcsS0FBS1IsS0FBaEIsQ0FBbEIsRUFBMEMsY0FBMUMsRUFBMERLLEVBQTFELENBREYsRUFFRUksU0FGRixDQUVZLE1BQU07QUFDaEIsVUFBSSxLQUFLVCxLQUFMLElBQWMsSUFBbEIsRUFBd0I7QUFDdEI7QUFDRDs7QUFFRCxXQUFLQSxLQUFMLENBQVdVLGFBQVgsQ0FDRSxJQUFJQyxVQUFKLENBQWUsT0FBZixFQUF3QjtBQUN0QkMsUUFBQUEsT0FBTyxFQUFFLElBRGE7QUFFdEJDLFFBQUFBLFVBQVUsRUFBRSxJQUZVO0FBR3RCQyxRQUFBQSxJQUFJLEVBQUVDO0FBSGdCLE9BQXhCLENBREY7QUFPRCxLQWRELENBRGlCLENBQW5CO0FBaUJEOztBQUVEQyxFQUFBQSxvQkFBb0IsR0FBRztBQUNyQixRQUFJLEtBQUtqQixXQUFMLElBQW9CLElBQXhCLEVBQThCO0FBQzVCLFdBQUtBLFdBQUwsQ0FBaUJrQixPQUFqQjtBQUNEO0FBQ0Y7O0FBTURDLEVBQUFBLE1BQU0sR0FBRztBQUNQLHdCQUFPLHNDQUFPLEtBQUtDLEtBQVo7QUFBbUIsTUFBQSxHQUFHLEVBQUUsS0FBS2xCO0FBQTdCLE9BQVA7QUFDRDs7QUFwQ21EIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xyXG5cclxuaW1wb3J0IHtvYnNlcnZhYmxlRnJvbVN1YnNjcmliZUZ1bmN0aW9ufSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9ldmVudCc7XHJcbmltcG9ydCBVbml2ZXJzYWxEaXNwb3NhYmxlIGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL1VuaXZlcnNhbERpc3Bvc2FibGUnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBudWxsdGhyb3dzIGZyb20gJ251bGx0aHJvd3MnO1xyXG5cclxuLyoqXHJcbiAqIEEgbW9yZSBhY2Nlc3NpYmxlIGFic3RyYWN0aW9uIG92ZXIgYDxhPmBzIGluIEF0b20sIHdoZXJlIHRoZSBkZWZhdWx0IGJlaGF2aW9yXHJcbiAqIHByZXZlbnRzIHByZXNzaW5nIEVudGVyL1JldHVybiBmcm9tIG9wZW5pbmcgYSBsaW5rLiBJbiBBdG9tLCB0aGUgYG5hdGl2ZS1rZXktYmluZGluZ3NgXHJcbiAqIG9uIGA8YT5gcyBhZGRyZXNzZXMgdGhpcywgYnV0IHByZXZlbnRzIHRhYmJpbmcgdG8vZnJvbSB0aGVzZSBlbGVtZW50cy5cclxuICpcclxuICogSW5zdGVhZCwgbGlzdGVuIGZvciAnYXRvbTpjb3JlLWNvbmZpcm0nICh3aGljaCBieSBkZWZhdWx0IG9jY3VycyBvbiBFbnRlci9SZXR1cm4pXHJcbiAqIGFuZCBkaXNwYXRjaCBhIHNpbXVsYXRlZCBjbGljayBNb3VzZUV2ZW50IHdoZW4gdGhlc2UgaGFwcGVuLiBUaGlzIGlzIG5vdCB1bmxpa2VcclxuICogdHlwaWNhbCBicm93c2VyIGJlaGF2aW9yIHdoZW4gRW50ZXIvUmV0dXJuIGlzIHByZXNzZWQgb24gbGlua3MsIHRyaWdnZXJpbmcgdGhlaXJcclxuICogJ2NsaWNrJyBldmVudCB3aXRoIGEgc2ltdWxhdGVkIE1vdXNlRXZlbnQuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaW5rIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9PiB7XHJcbiAgX2Rpc3Bvc2FibGU6ID9Vbml2ZXJzYWxEaXNwb3NhYmxlO1xyXG4gIF9ub2RlOiA/SFRNTEFuY2hvckVsZW1lbnQ7XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5fZGlzcG9zYWJsZSA9IG5ldyBVbml2ZXJzYWxEaXNwb3NhYmxlKFxyXG4gICAgICBvYnNlcnZhYmxlRnJvbVN1YnNjcmliZUZ1bmN0aW9uKGNiID0+XHJcbiAgICAgICAgYXRvbS5jb21tYW5kcy5hZGQobnVsbHRocm93cyh0aGlzLl9ub2RlKSwgJ2NvcmU6Y29uZmlybScsIGNiKSxcclxuICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9ub2RlID09IG51bGwpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX25vZGUuZGlzcGF0Y2hFdmVudChcclxuICAgICAgICAgIG5ldyBNb3VzZUV2ZW50KCdjbGljaycsIHtcclxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcclxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgdmlldzogd2luZG93LFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgKTtcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICBpZiAodGhpcy5fZGlzcG9zYWJsZSAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX2Rpc3Bvc2FibGUuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3VwZGF0ZU5vZGUgPSAobm9kZTogP0hUTUxBbmNob3JFbGVtZW50KSA9PiB7XHJcbiAgICB0aGlzLl9ub2RlID0gbm9kZTtcclxuICB9O1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gPGEgey4uLnRoaXMucHJvcHN9IHJlZj17dGhpcy5fdXBkYXRlTm9kZX0gLz47XHJcbiAgfVxyXG59XHJcbiJdfQ==