"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListviewExamples = void 0;

var React = _interopRequireWildcard(require("react"));

var _Block = require("./Block");

var _ListView = require("./ListView");

var _Checkbox = require("./Checkbox");

var _MultiSelectList = require("./MultiSelectList");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const NOOP = () => {};

const ListviewExample1 = () => /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_ListView.ListView, {
  alternateBackground: true
}, /*#__PURE__*/React.createElement(_ListView.ListViewItem, {
  value: {
    id: 1
  }
}, "test1"), /*#__PURE__*/React.createElement(_ListView.ListViewItem, {
  value: {
    id: 2
  }
}, "test2"), /*#__PURE__*/React.createElement(_ListView.ListViewItem, {
  value: {
    id: 3
  }
}, "test3"), /*#__PURE__*/React.createElement(_ListView.ListViewItem, {
  value: {
    id: 4
  }
}, "test4"), /*#__PURE__*/React.createElement(_ListView.ListViewItem, {
  value: {
    id: 5
  }
}, "test5")));

const ListviewExample2 = () => /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_ListView.ListView, {
  alternateBackground: true
}, /*#__PURE__*/React.createElement(_ListView.ListViewItem, null, /*#__PURE__*/React.createElement(_Checkbox.Checkbox, {
  checked: true,
  onClick: NOOP,
  onChange: NOOP,
  label: "A Checkbox."
})), /*#__PURE__*/React.createElement(_ListView.ListViewItem, null, /*#__PURE__*/React.createElement(_Checkbox.Checkbox, {
  checked: true,
  onClick: NOOP,
  onChange: NOOP,
  label: "A Checkbox."
})), /*#__PURE__*/React.createElement(_ListView.ListViewItem, null, /*#__PURE__*/React.createElement(_Checkbox.Checkbox, {
  checked: true,
  onClick: NOOP,
  onChange: NOOP,
  label: "A Checkbox."
})), /*#__PURE__*/React.createElement(_ListView.ListViewItem, null, /*#__PURE__*/React.createElement(_Checkbox.Checkbox, {
  checked: false,
  onClick: NOOP,
  onChange: NOOP,
  label: "A Checkbox."
})), /*#__PURE__*/React.createElement(_ListView.ListViewItem, null, /*#__PURE__*/React.createElement(_Checkbox.Checkbox, {
  checked: false,
  onClick: NOOP,
  onChange: NOOP,
  label: "A Checkbox."
}))));

class MultiSelectListExample extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      value: [2]
    };
  }

  render() {
    const options = [{
      value: 1,
      label: 'One'
    }, {
      value: 2,
      label: 'Two'
    }, {
      value: 3,
      label: 'Three'
    }, {
      value: 4,
      label: 'Four'
    }];
    return (
      /*#__PURE__*/
      // $FlowFixMe(>=0.53.0) Flow suppress
      React.createElement(_MultiSelectList.MultiSelectList, {
        options: options,
        value: this.state.value,
        onChange: value => {
          this.setState({
            value
          });
        }
      })
    );
  }

}

const ListviewExamples = {
  sectionName: 'ListView',
  description: '',
  examples: [{
    title: 'Simple ListView',
    component: ListviewExample1
  }, {
    title: 'Arbitrary components as list items',
    component: ListviewExample2
  }, {
    title: 'Multi-Select List',
    component: MultiSelectListExample
  }]
};
exports.ListviewExamples = ListviewExamples;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,