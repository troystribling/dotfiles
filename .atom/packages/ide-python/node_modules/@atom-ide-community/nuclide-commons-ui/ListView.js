"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListView = exports.ListViewItem = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _ignoreTextSelectionEvents = _interopRequireDefault(require("./ignoreTextSelectionEvents"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * Use ListViewItem in conjunction with ListView.
 */
class ListViewItem extends React.Component {
  _select(value, index, event) {
    if (this.props.onSelect != null) {
      this.props.onSelect(value, index);
    }
  }

  render() {
    const {
      children,
      index,
      value,
      ...remainingProps
    } = this.props;
    return /*#__PURE__*/React.createElement("div", _extends({
      className: "nuclide-ui-listview-item"
    }, remainingProps, {
      onClick: (0, _ignoreTextSelectionEvents.default)(this._select.bind(this, value, index))
    }), children);
  }

}

exports.ListViewItem = ListViewItem;

class ListView extends React.Component {
  constructor(...args) {
    super(...args);

    this._handleSelect = (value, index, event) => {
      if (this.props.selectable && this.props.onSelect != null) {
        this.props.onSelect(index, value);
      }
    };
  }

  render() {
    const {
      children,
      alternateBackground,
      selectable
    } = this.props;
    const renderedItems = React.Children.map(children, (child, index) => /*#__PURE__*/React.cloneElement(child, {
      index,
      onSelect: this._handleSelect
    }));
    const className = (0, _classnames.default)({
      'native-key-bindings': true,
      'nuclide-ui-listview': true,
      'nuclide-ui-listview-highlight-odd': alternateBackground,
      'nuclide-ui-listview-selectable': selectable
    });
    return /*#__PURE__*/React.createElement("div", {
      className: className,
      tabIndex: -1
    }, renderedItems);
  }

}

exports.ListView = ListView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0xpc3RWaWV3LmpzIl0sIm5hbWVzIjpbIkxpc3RWaWV3SXRlbSIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX3NlbGVjdCIsInZhbHVlIiwiaW5kZXgiLCJldmVudCIsInByb3BzIiwib25TZWxlY3QiLCJyZW5kZXIiLCJjaGlsZHJlbiIsInJlbWFpbmluZ1Byb3BzIiwiYmluZCIsIkxpc3RWaWV3IiwiX2hhbmRsZVNlbGVjdCIsInNlbGVjdGFibGUiLCJhbHRlcm5hdGVCYWNrZ3JvdW5kIiwicmVuZGVyZWRJdGVtcyIsIkNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJjbG9uZUVsZW1lbnQiLCJjbGFzc05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNPLE1BQU1BLFlBQU4sU0FBMkJDLEtBQUssQ0FBQ0MsU0FBakMsQ0FBOEQ7QUFDbkVDLEVBQUFBLE9BQU8sQ0FBQ0MsS0FBRCxFQUFpQkMsS0FBakIsRUFBZ0NDLEtBQWhDLEVBQW9FO0FBQ3pFLFFBQUksS0FBS0MsS0FBTCxDQUFXQyxRQUFYLElBQXVCLElBQTNCLEVBQWlDO0FBQy9CLFdBQUtELEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkosS0FBcEIsRUFBMkJDLEtBQTNCO0FBQ0Q7QUFDRjs7QUFFREksRUFBQUEsTUFBTSxHQUFlO0FBQ25CLFVBQU07QUFBQ0MsTUFBQUEsUUFBRDtBQUFXTCxNQUFBQSxLQUFYO0FBQWtCRCxNQUFBQSxLQUFsQjtBQUF5QixTQUFHTztBQUE1QixRQUE4QyxLQUFLSixLQUF6RDtBQUNBLHdCQUNFO0FBQ0UsTUFBQSxTQUFTLEVBQUM7QUFEWixPQUVNSSxjQUZOO0FBR0UsTUFBQSxPQUFPLEVBQUUsd0NBQ1AsS0FBS1IsT0FBTCxDQUFhUyxJQUFiLENBQWtCLElBQWxCLEVBQXdCUixLQUF4QixFQUErQkMsS0FBL0IsQ0FETztBQUhYLFFBTUdLLFFBTkgsQ0FERjtBQVVEOztBQW5Ca0U7Ozs7QUF1QzlELE1BQU1HLFFBQU4sU0FBdUJaLEtBQUssQ0FBQ0MsU0FBN0IsQ0FBc0Q7QUFBQTtBQUFBOztBQUFBLFNBQzNEWSxhQUQyRCxHQUMzQyxDQUNkVixLQURjLEVBRWRDLEtBRmMsRUFHZEMsS0FIYyxLQUlMO0FBQ1QsVUFBSSxLQUFLQyxLQUFMLENBQVdRLFVBQVgsSUFBeUIsS0FBS1IsS0FBTCxDQUFXQyxRQUFYLElBQXVCLElBQXBELEVBQTBEO0FBQ3hELGFBQUtELEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkgsS0FBcEIsRUFBMkJELEtBQTNCO0FBQ0Q7QUFDRixLQVQwRDtBQUFBOztBQVczREssRUFBQUEsTUFBTSxHQUFlO0FBQ25CLFVBQU07QUFBQ0MsTUFBQUEsUUFBRDtBQUFXTSxNQUFBQSxtQkFBWDtBQUFnQ0QsTUFBQUE7QUFBaEMsUUFBOEMsS0FBS1IsS0FBekQ7QUFDQSxVQUFNVSxhQUFhLEdBQUdoQixLQUFLLENBQUNpQixRQUFOLENBQWVDLEdBQWYsQ0FDcEJULFFBRG9CLEVBRXBCLENBQUNVLEtBQUQsRUFBNEJmLEtBQTVCLGtCQUNFSixLQUFLLENBQUNvQixZQUFOLENBQW1CRCxLQUFuQixFQUEwQjtBQUN4QmYsTUFBQUEsS0FEd0I7QUFFeEJHLE1BQUFBLFFBQVEsRUFBRSxLQUFLTTtBQUZTLEtBQTFCLENBSGtCLENBQXRCO0FBUUEsVUFBTVEsU0FBUyxHQUFHLHlCQUFXO0FBQzNCLDZCQUF1QixJQURJO0FBRTNCLDZCQUF1QixJQUZJO0FBRzNCLDJDQUFxQ04sbUJBSFY7QUFJM0Isd0NBQWtDRDtBQUpQLEtBQVgsQ0FBbEI7QUFNQSx3QkFDRTtBQUFLLE1BQUEsU0FBUyxFQUFFTyxTQUFoQjtBQUEyQixNQUFBLFFBQVEsRUFBRSxDQUFDO0FBQXRDLE9BQ0dMLGFBREgsQ0FERjtBQUtEOztBQWhDMEQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW1wb3J0IGlnbm9yZVRleHRTZWxlY3Rpb25FdmVudHMgZnJvbSAnLi9pZ25vcmVUZXh0U2VsZWN0aW9uRXZlbnRzJztcclxuXHJcbnR5cGUgTGlzdFZpZXdJdGVtUHJvcHMgPSB7XHJcbiAgaW5kZXg6IG51bWJlcixcclxuICB2YWx1ZT86ID9PYmplY3QsXHJcbiAgY2hpbGRyZW4/OiA/UmVhY3QuRWxlbWVudDxhbnk+LFxyXG4gIG9uU2VsZWN0PzogKHZhbHVlOiA/T2JqZWN0LCBpbmRleDogbnVtYmVyKSA9PiB2b2lkLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFVzZSBMaXN0Vmlld0l0ZW0gaW4gY29uanVuY3Rpb24gd2l0aCBMaXN0Vmlldy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBMaXN0Vmlld0l0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8TGlzdFZpZXdJdGVtUHJvcHM+IHtcclxuICBfc2VsZWN0KHZhbHVlOiA/T2JqZWN0LCBpbmRleDogbnVtYmVyLCBldmVudDogU3ludGhldGljTW91c2VFdmVudDw+KTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5vblNlbGVjdCAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMucHJvcHMub25TZWxlY3QodmFsdWUsIGluZGV4KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcclxuICAgIGNvbnN0IHtjaGlsZHJlbiwgaW5kZXgsIHZhbHVlLCAuLi5yZW1haW5pbmdQcm9wc30gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdlxyXG4gICAgICAgIGNsYXNzTmFtZT1cIm51Y2xpZGUtdWktbGlzdHZpZXctaXRlbVwiXHJcbiAgICAgICAgey4uLnJlbWFpbmluZ1Byb3BzfVxyXG4gICAgICAgIG9uQ2xpY2s9e2lnbm9yZVRleHRTZWxlY3Rpb25FdmVudHMoXHJcbiAgICAgICAgICB0aGlzLl9zZWxlY3QuYmluZCh0aGlzLCB2YWx1ZSwgaW5kZXgpLFxyXG4gICAgICAgICl9PlxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxudHlwZSBMaXN0Vmlld1Byb3BzID0ge1xyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdG8gc2hhZGUgZXZlbiBhbmQgb2RkIGl0ZW1zIGRpZmZlcmVudGx5LlxyXG4gICAqL1xyXG4gIGFsdGVybmF0ZUJhY2tncm91bmQ/OiBib29sZWFuLFxyXG4gIGNoaWxkcmVuPzogQXJyYXk8UmVhY3QuRWxlbWVudDxhbnk+PixcclxuICAvKipcclxuICAgKiBXaGV0aGVyIGl0ZW1zIGNhbiBiZSBzZWxlY3RlZC5cclxuICAgKiBJZiBzcGVjaWZpZWQsIGBvblNlbGVjdGAgbXVzdCBhbHNvIGJlIHNwZWNpZmllZC5cclxuICAgKi9cclxuICBzZWxlY3RhYmxlPzogYm9vbGVhbixcclxuICAvKipcclxuICAgKiBIYW5kbGVyIHRvIGJlIGNhbGxlZCB1cG9uIHNlbGVjdGlvbi4gQ2FsbGVkIGlmZiBgc2VsZWN0YWJsZWAgaXMgYHRydWVgLlxyXG4gICAqL1xyXG4gIG9uU2VsZWN0PzogKHNlbGVjdGVkSW5kZXg6IG51bWJlciwgc2VsZWN0ZWREYXRhOiA/T2JqZWN0KSA9PiBtaXhlZCxcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaXN0VmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxMaXN0Vmlld1Byb3BzPiB7XHJcbiAgX2hhbmRsZVNlbGVjdCA9IChcclxuICAgIHZhbHVlOiA/T2JqZWN0LFxyXG4gICAgaW5kZXg6IG51bWJlcixcclxuICAgIGV2ZW50OiBTeW50aGV0aWNNb3VzZUV2ZW50PD4sXHJcbiAgKTogdm9pZCA9PiB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5zZWxlY3RhYmxlICYmIHRoaXMucHJvcHMub25TZWxlY3QgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLnByb3BzLm9uU2VsZWN0KGluZGV4LCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgY29uc3Qge2NoaWxkcmVuLCBhbHRlcm5hdGVCYWNrZ3JvdW5kLCBzZWxlY3RhYmxlfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCByZW5kZXJlZEl0ZW1zID0gUmVhY3QuQ2hpbGRyZW4ubWFwKFxyXG4gICAgICBjaGlsZHJlbixcclxuICAgICAgKGNoaWxkOiBSZWFjdC5FbGVtZW50PGFueT4sIGluZGV4OiBudW1iZXIpID0+XHJcbiAgICAgICAgUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XHJcbiAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgIG9uU2VsZWN0OiB0aGlzLl9oYW5kbGVTZWxlY3QsXHJcbiAgICAgICAgfSksXHJcbiAgICApO1xyXG4gICAgY29uc3QgY2xhc3NOYW1lID0gY2xhc3NuYW1lcyh7XHJcbiAgICAgICduYXRpdmUta2V5LWJpbmRpbmdzJzogdHJ1ZSxcclxuICAgICAgJ251Y2xpZGUtdWktbGlzdHZpZXcnOiB0cnVlLFxyXG4gICAgICAnbnVjbGlkZS11aS1saXN0dmlldy1oaWdobGlnaHQtb2RkJzogYWx0ZXJuYXRlQmFja2dyb3VuZCxcclxuICAgICAgJ251Y2xpZGUtdWktbGlzdHZpZXctc2VsZWN0YWJsZSc6IHNlbGVjdGFibGUsXHJcbiAgICB9KTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHRhYkluZGV4PXstMX0+XHJcbiAgICAgICAge3JlbmRlcmVkSXRlbXN9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19