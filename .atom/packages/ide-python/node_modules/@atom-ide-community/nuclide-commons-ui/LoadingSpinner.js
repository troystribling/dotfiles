"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoadingSpinner = exports.LoadingSpinnerSizes = void 0;

var _addTooltip = _interopRequireDefault(require("./addTooltip"));

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const LoadingSpinnerSizes = Object.freeze({
  EXTRA_SMALL: 'EXTRA_SMALL',
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE'
});
exports.LoadingSpinnerSizes = LoadingSpinnerSizes;
const LoadingSpinnerClassnames = Object.freeze({
  EXTRA_SMALL: 'loading-spinner-tiny',
  SMALL: 'loading-spinner-small',
  MEDIUM: 'loading-spinner-medium',
  LARGE: 'loading-spinner-large'
});
/**
 * Shows an indefinite, animated LoadingSpinner.
 */

class LoadingSpinner extends React.Component {
  constructor(props) {
    super(props);
    this._timeout = void 0;
    this.state = {
      shouldRender: !this.props.delay
    };
  }

  componentDidMount() {
    if (!this.state.shouldRender) {
      this._timeout = setTimeout(() => this.setState({
        shouldRender: true
      }), this.props.delay);
    }
  }

  componentWillUnmount() {
    if (this._timeout != null) {
      clearTimeout(this._timeout);
    }
  }

  render() {
    const {
      className,
      size,
      tooltip
    } = this.props;

    if (!this.state.shouldRender) {
      return null;
    }

    const ref = tooltip ? (0, _addTooltip.default)(tooltip) : null;
    const safeSize = size != null && LoadingSpinnerSizes.hasOwnProperty(size) ? size : LoadingSpinnerSizes.MEDIUM;
    const sizeClassname = LoadingSpinnerClassnames[safeSize];
    const newClassName = (0, _classnames.default)(className, 'loading', sizeClassname);
    return /*#__PURE__*/React.createElement("div", {
      className: newClassName // eslint-disable-next-line nuclide-internal/jsx-simple-callback-refs
      ,
      ref: ref
    });
  }

}

exports.LoadingSpinner = LoadingSpinner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL0xvYWRpbmdTcGlubmVyLmpzIl0sIm5hbWVzIjpbIkxvYWRpbmdTcGlubmVyU2l6ZXMiLCJPYmplY3QiLCJmcmVlemUiLCJFWFRSQV9TTUFMTCIsIlNNQUxMIiwiTUVESVVNIiwiTEFSR0UiLCJMb2FkaW5nU3Bpbm5lckNsYXNzbmFtZXMiLCJMb2FkaW5nU3Bpbm5lciIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIl90aW1lb3V0Iiwic3RhdGUiLCJzaG91bGRSZW5kZXIiLCJkZWxheSIsImNvbXBvbmVudERpZE1vdW50Iiwic2V0VGltZW91dCIsInNldFN0YXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjbGVhclRpbWVvdXQiLCJyZW5kZXIiLCJjbGFzc05hbWUiLCJzaXplIiwidG9vbHRpcCIsInJlZiIsInNhZmVTaXplIiwiaGFzT3duUHJvcGVydHkiLCJzaXplQ2xhc3NuYW1lIiwibmV3Q2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBWUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQW1CTyxNQUFNQSxtQkFBbUIsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWM7QUFDL0NDLEVBQUFBLFdBQVcsRUFBRSxhQURrQztBQUUvQ0MsRUFBQUEsS0FBSyxFQUFFLE9BRndDO0FBRy9DQyxFQUFBQSxNQUFNLEVBQUUsUUFIdUM7QUFJL0NDLEVBQUFBLEtBQUssRUFBRTtBQUp3QyxDQUFkLENBQTVCOztBQU9QLE1BQU1DLHdCQUF3QixHQUFHTixNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUM3Q0MsRUFBQUEsV0FBVyxFQUFFLHNCQURnQztBQUU3Q0MsRUFBQUEsS0FBSyxFQUFFLHVCQUZzQztBQUc3Q0MsRUFBQUEsTUFBTSxFQUFFLHdCQUhxQztBQUk3Q0MsRUFBQUEsS0FBSyxFQUFFO0FBSnNDLENBQWQsQ0FBakM7QUFPQTtBQUNBO0FBQ0E7O0FBQ08sTUFBTUUsY0FBTixTQUE2QkMsS0FBSyxDQUFDQyxTQUFuQyxDQUdMO0FBR0FDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFlO0FBQ3hCLFVBQU1BLEtBQU47QUFEd0IsU0FGMUJDLFFBRTBCO0FBRXhCLFNBQUtDLEtBQUwsR0FBYTtBQUFDQyxNQUFBQSxZQUFZLEVBQUUsQ0FBQyxLQUFLSCxLQUFMLENBQVdJO0FBQTNCLEtBQWI7QUFDRDs7QUFFREMsRUFBQUEsaUJBQWlCLEdBQVM7QUFDeEIsUUFBSSxDQUFDLEtBQUtILEtBQUwsQ0FBV0MsWUFBaEIsRUFBOEI7QUFDNUIsV0FBS0YsUUFBTCxHQUFnQkssVUFBVSxDQUN4QixNQUFNLEtBQUtDLFFBQUwsQ0FBYztBQUFDSixRQUFBQSxZQUFZLEVBQUU7QUFBZixPQUFkLENBRGtCLEVBRXhCLEtBQUtILEtBQUwsQ0FBV0ksS0FGYSxDQUExQjtBQUlEO0FBQ0Y7O0FBRURJLEVBQUFBLG9CQUFvQixHQUFTO0FBQzNCLFFBQUksS0FBS1AsUUFBTCxJQUFpQixJQUFyQixFQUEyQjtBQUN6QlEsTUFBQUEsWUFBWSxDQUFDLEtBQUtSLFFBQU4sQ0FBWjtBQUNEO0FBQ0Y7O0FBRURTLEVBQUFBLE1BQU0sR0FBZTtBQUNuQixVQUFNO0FBQUNDLE1BQUFBLFNBQUQ7QUFBWUMsTUFBQUEsSUFBWjtBQUFrQkMsTUFBQUE7QUFBbEIsUUFBNkIsS0FBS2IsS0FBeEM7O0FBQ0EsUUFBSSxDQUFDLEtBQUtFLEtBQUwsQ0FBV0MsWUFBaEIsRUFBOEI7QUFDNUIsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsVUFBTVcsR0FBRyxHQUFHRCxPQUFPLEdBQUcseUJBQVdBLE9BQVgsQ0FBSCxHQUF5QixJQUE1QztBQUNBLFVBQU1FLFFBQVEsR0FDWkgsSUFBSSxJQUFJLElBQVIsSUFBZ0J4QixtQkFBbUIsQ0FBQzRCLGNBQXBCLENBQW1DSixJQUFuQyxDQUFoQixHQUNJQSxJQURKLEdBRUl4QixtQkFBbUIsQ0FBQ0ssTUFIMUI7QUFJQSxVQUFNd0IsYUFBYSxHQUFHdEIsd0JBQXdCLENBQUNvQixRQUFELENBQTlDO0FBQ0EsVUFBTUcsWUFBWSxHQUFHLHlCQUFXUCxTQUFYLEVBQXNCLFNBQXRCLEVBQWlDTSxhQUFqQyxDQUFyQjtBQUNBLHdCQUNFO0FBQ0UsTUFBQSxTQUFTLEVBQUVDLFlBRGIsQ0FFRTtBQUZGO0FBR0UsTUFBQSxHQUFHLEVBQUVKO0FBSFAsTUFERjtBQU9EOztBQTNDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3cgc3RyaWN0LWxvY2FsXHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgYWRkVG9vbHRpcCBmcm9tICcuL2FkZFRvb2x0aXAnO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IHR5cGUgTG9hZGluZ1NwaW5uZXJTaXplID0gJ0VYVFJBX1NNQUxMJyB8ICdTTUFMTCcgfCAnTUVESVVNJyB8ICdMQVJHRSc7XHJcbnR5cGUgUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nLFxyXG4gIC8qKiBUaGUgc2l6ZSBvZiB0aGUgTG9hZGluZ1NwaW5uZXIuIERlZmF1bHRzIHRvIE1FRElVTS4gKi9cclxuICBzaXplPzogTG9hZGluZ1NwaW5uZXJTaXplLFxyXG4gIC8qKlxyXG4gICAqIEFuIG9wdGlvbmFsIGRlbGF5IChpbiBtaWxsaXNlY29uZHMpIGJldHdlZW4gbW91bnRpbmcgdGhlIGNvbXBvbmVudCBhbmQgYWN0dWFsbHkgcmVuZGVyaW5nXHJcbiAgICogdGhlIHNwaW5uZXIgdG8gYXZvaWQgVUkgY2h1cm4uXHJcbiAgICovXHJcbiAgZGVsYXk/OiBudW1iZXIsXHJcbiAgdG9vbHRpcD86IGF0b20kVG9vbHRpcHNBZGRPcHRpb25zLFxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IExvYWRpbmdTcGlubmVyU2l6ZXMgPSBPYmplY3QuZnJlZXplKHtcclxuICBFWFRSQV9TTUFMTDogJ0VYVFJBX1NNQUxMJyxcclxuICBTTUFMTDogJ1NNQUxMJyxcclxuICBNRURJVU06ICdNRURJVU0nLFxyXG4gIExBUkdFOiAnTEFSR0UnLFxyXG59KTtcclxuXHJcbmNvbnN0IExvYWRpbmdTcGlubmVyQ2xhc3NuYW1lcyA9IE9iamVjdC5mcmVlemUoe1xyXG4gIEVYVFJBX1NNQUxMOiAnbG9hZGluZy1zcGlubmVyLXRpbnknLFxyXG4gIFNNQUxMOiAnbG9hZGluZy1zcGlubmVyLXNtYWxsJyxcclxuICBNRURJVU06ICdsb2FkaW5nLXNwaW5uZXItbWVkaXVtJyxcclxuICBMQVJHRTogJ2xvYWRpbmctc3Bpbm5lci1sYXJnZScsXHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIFNob3dzIGFuIGluZGVmaW5pdGUsIGFuaW1hdGVkIExvYWRpbmdTcGlubmVyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIExvYWRpbmdTcGlubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxyXG4gIFByb3BzLFxyXG4gIHtzaG91bGRSZW5kZXI6IGJvb2xlYW59LFxyXG4+IHtcclxuICBfdGltZW91dDogP1RpbWVvdXRJRDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge3Nob3VsZFJlbmRlcjogIXRoaXMucHJvcHMuZGVsYXl9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUuc2hvdWxkUmVuZGVyKSB7XHJcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KFxyXG4gICAgICAgICgpID0+IHRoaXMuc2V0U3RhdGUoe3Nob3VsZFJlbmRlcjogdHJ1ZX0pLFxyXG4gICAgICAgIHRoaXMucHJvcHMuZGVsYXksXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl90aW1lb3V0ICE9IG51bGwpIHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgY29uc3Qge2NsYXNzTmFtZSwgc2l6ZSwgdG9vbHRpcH0gPSB0aGlzLnByb3BzO1xyXG4gICAgaWYgKCF0aGlzLnN0YXRlLnNob3VsZFJlbmRlcikge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCByZWYgPSB0b29sdGlwID8gYWRkVG9vbHRpcCh0b29sdGlwKSA6IG51bGw7XHJcbiAgICBjb25zdCBzYWZlU2l6ZSA9XHJcbiAgICAgIHNpemUgIT0gbnVsbCAmJiBMb2FkaW5nU3Bpbm5lclNpemVzLmhhc093blByb3BlcnR5KHNpemUpXHJcbiAgICAgICAgPyBzaXplXHJcbiAgICAgICAgOiBMb2FkaW5nU3Bpbm5lclNpemVzLk1FRElVTTtcclxuICAgIGNvbnN0IHNpemVDbGFzc25hbWUgPSBMb2FkaW5nU3Bpbm5lckNsYXNzbmFtZXNbc2FmZVNpemVdO1xyXG4gICAgY29uc3QgbmV3Q2xhc3NOYW1lID0gY2xhc3NuYW1lcyhjbGFzc05hbWUsICdsb2FkaW5nJywgc2l6ZUNsYXNzbmFtZSk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgY2xhc3NOYW1lPXtuZXdDbGFzc05hbWV9XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG51Y2xpZGUtaW50ZXJuYWwvanN4LXNpbXBsZS1jYWxsYmFjay1yZWZzXHJcbiAgICAgICAgcmVmPXtyZWZ9XHJcbiAgICAgIC8+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=