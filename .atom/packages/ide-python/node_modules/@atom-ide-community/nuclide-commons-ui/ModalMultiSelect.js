"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModalMultiSelect = void 0;

var _Button = require("./Button");

var _ButtonGroup = require("./ButtonGroup");

var _Modal = require("./Modal");

var _MultiSelectList = require("./MultiSelectList");

var _classnames = _interopRequireDefault(require("classnames"));

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * A `<select>`-like control that uses an Atom modal for its options. This component uses an API as
 * similar to `Dropdown` as possible, with extra props for customizing display options.
 */
class ModalMultiSelect extends React.Component {
  constructor(props) {
    super(props);
    this._modal = void 0;

    this._selectAll = () => {
      const allValues = this.props.options.map(option => option.value);
      this.setState({
        activeValues: allValues
      });
    };

    this._selectNone = () => {
      this.setState({
        activeValues: []
      });
    };

    this._resetSelection = () => {
      this.setState({
        activeValues: this.props.value
      });
    };

    this._showModal = () => {
      this.setState({
        showModal: true,
        // When you show the modal, the initial selection should match the actually selected values.
        activeValues: this.props.value
      });
    };

    this._dismissModal = () => {
      this.setState({
        showModal: false
      });
    };

    this._confirmValues = () => {
      // TODO (matthewwithanm): Use ctrl-enter to confirm
      this._dismissModal();

      this.props.onChange(this.state.activeValues);
    };

    this.state = {
      activeValues: props.value,
      showModal: false
    };
  }

  render() {
    const LabelComponent = this.props.labelComponent || DefaultLabelComponent;
    const selectedOptions = this.props.options.filter(option => this.props.value.indexOf(option.value) !== -1);
    const className = (0, _classnames.default)(this.props.className, {
      'btn-warning': this.props.value.length === 0
    });
    return /*#__PURE__*/React.createElement(_Button.Button, {
      className: className,
      disabled: this.props.disabled,
      size: this.props.size,
      onClick: event => {
        // Because of how Portals work in React, this handler will actually be triggered for all
        // clicks within the modal! We need to filter those out to separate button clicks.
        // (see https://reactjs.org/docs/portals.html#event-bubbling-through-portals)
        const modalElement = this._modal && _reactDom.default.findDOMNode(this._modal);

        if (modalElement == null || !modalElement.contains(event.target)) {
          this._showModal();
        }
      }
    }, /*#__PURE__*/React.createElement(LabelComponent, {
      selectedOptions: selectedOptions
    }), this._renderModal());
  }

  _renderModal() {
    if (!this.state.showModal) {
      return;
    }

    return /*#__PURE__*/React.createElement(_Modal.Modal, {
      ref: c => {
        this._modal = c;
      },
      onDismiss: this._dismissModal
    }, /*#__PURE__*/React.createElement(_MultiSelectList.MultiSelectList, {
      commandScope: atom.views.getView(atom.workspace),
      value: this.state.activeValues,
      options: this.props.options,
      optionComponent: this.props.optionComponent,
      onChange: activeValues => this.setState({
        activeValues
      })
    }), /*#__PURE__*/React.createElement("div", {
      className: "nuclide-modal-multi-select-actions"
    }, /*#__PURE__*/React.createElement(_ButtonGroup.ButtonGroup, null, /*#__PURE__*/React.createElement(_Button.Button, {
      onClick: this._selectNone
    }, "None"), /*#__PURE__*/React.createElement(_Button.Button, {
      onClick: this._selectAll
    }, "All"), /*#__PURE__*/React.createElement(_Button.Button, {
      onClick: this._resetSelection
    }, "Reset")), /*#__PURE__*/React.createElement(_ButtonGroup.ButtonGroup, null, /*#__PURE__*/React.createElement(_Button.Button, {
      onClick: this._dismissModal
    }, "Cancel"), /*#__PURE__*/React.createElement(_Button.Button, {
      buttonType: _Button.ButtonTypes.PRIMARY,
      onClick: this._confirmValues
    }, "Confirm"))));
  }

}

exports.ModalMultiSelect = ModalMultiSelect;
ModalMultiSelect.defaultProps = {
  className: '',
  disabled: false,
  labelComponent: DefaultLabelComponent,
  onChange: value => {},
  options: [],
  value: [],
  size: _Button.ButtonSizes.SMALL
};

function DefaultLabelComponent(props) {
  const count = props.selectedOptions.length;
  const noun = count === 1 ? 'Item' : 'Items';
  return /*#__PURE__*/React.createElement("span", null, `${count} ${noun} Selected`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,