"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DecorationIcons = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _log4js = require("log4js");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _Icon = require("./Icon");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function WarningIconWithShadow() {
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("svg", {
    className: "nuclide-ui-path-with-file-icon-warning-icon-background",
    width: "20",
    height: "18",
    viewBox: "0 0 20 20",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("polygon", {
    points: "10,2 0,18 20,18"
  })), /*#__PURE__*/React.createElement(_Icon.Icon, {
    className: "text-warning",
    icon: "alert"
  }));
}

function ErrorIconWithShadow() {
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("svg", {
    className: "nuclide-ui-path-with-file-icon-error-icon-background",
    width: "16",
    height: "16",
    viewBox: "0 0 16 16",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: "10",
    cy: "10",
    r: "8"
  })), /*#__PURE__*/React.createElement(_Icon.Icon, {
    className: "text-error",
    icon: "stop"
  }));
} // The decoration icons require a backdrop to be fully visible,
// so we only allow the following, blessed decorations:


const DecorationIcons = Object.freeze({
  Warning: WarningIconWithShadow,
  Error: ErrorIconWithShadow
});
exports.DecorationIcons = DecorationIcons;
let addItemToElement;
atom.packages.serviceHub.consume('file-icons.element-icons', '1.0.0', _addItemToElement => {
  addItemToElement = (element, path) => {
    try {
      return _addItemToElement(element, path);
    } catch (e) {
      (0, _log4js.getLogger)('nuclide-ui-path-with-file-icon').error('Error adding item to element', e);
      return new _UniversalDisposable.default();
    }
  };

  return new _UniversalDisposable.default(() => {
    addItemToElement = null;
  });
});

class PathWithFileIcon extends React.Component {
  constructor(props) {
    super(props);
    this._disposables = void 0;
    this._fileIconsDisposable = void 0;
    this._mounted = void 0;

    this._handleRef = element => {
      if (this.props.isFolder) {
        return;
      }

      this._ensureIconRemoved();

      if (addItemToElement == null) {
        // file-icons service not available; ignore.
        return;
      }

      if (element == null) {
        // Element is unmounting.
        return;
      }

      this._fileIconsDisposable = addItemToElement(element, this.props.path);
    };

    this._mounted = false;
    this._disposables = new _UniversalDisposable.default(() => {
      if (this._fileIconsDisposable != null) {
        this._fileIconsDisposable.dispose();
      }
    });
  }

  componentDidMount() {
    this._mounted = true;
  }

  componentDidUpdate(prevProps) {
    if (prevProps.path !== this.props.path) {
      this._forceIconUpdate();
    }
  }

  _getDefaultClassName() {
    const {
      className,
      isFolder
    } = this.props;
    return (0, _classnames.default)('icon', 'name', 'nuclide-ui-path-with-file-icon', {
      'icon-file-text': isFolder !== true,
      'icon-file-directory': isFolder === true
    }, className);
  }

  _forceIconUpdate() {
    if (!this._mounted) {
      return;
    }

    const element = _reactDom.default.findDOMNode(this); // $FlowIssue `element` is an HTMLElement


    this._handleRef(element);
  }

  _ensureIconRemoved() {
    if (this._fileIconsDisposable == null) {
      return;
    }

    this._fileIconsDisposable.dispose();

    this._fileIconsDisposable = null;
  }

  componentWillUnmount() {
    this._disposables.dispose();

    this._mounted = false;
  }

  render() {
    const {
      className,
      children,
      decorationIcon: DecorationIcon,
      isFolder,
      path,
      // forward properties such as `data-path`, etc
      ...rest
    } = this.props;
    const displayPath = children == null ? path : children;
    const decoration = DecorationIcon == null ? null : /*#__PURE__*/React.createElement("div", {
      className: "nuclide-ui-path-with-file-icon-decoration-icon"
    }, /*#__PURE__*/React.createElement(DecorationIcon, null));
    return /*#__PURE__*/React.createElement("div", _extends({
      className: this._getDefaultClassName(),
      ref: this._handleRef
    }, rest), displayPath, decoration);
  }

}

exports.default = PathWithFileIcon;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,