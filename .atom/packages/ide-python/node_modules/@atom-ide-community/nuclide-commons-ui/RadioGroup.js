"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// Globally unique ID used as the "name" attribute to group radio inputs.
let uid = 0;

/**
 * A managed radio group component. Accepts arbitrary React elements as labels.
 */
class RadioGroup extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      uid: uid++
    };
  }

  render() {
    const {
      className,
      onSelectedChange,
      optionLabels,
      selectedIndex
    } = this.props;
    const checkboxes = optionLabels.map((labelContent, i) => {
      const id = 'nuclide-radiogroup-' + uid + '-' + i;
      return /*#__PURE__*/React.createElement("div", {
        key: i,
        className: "nuclide-ui-radiogroup-div"
      }, /*#__PURE__*/React.createElement("input", {
        className: "input-radio",
        type: "radio",
        checked: i === selectedIndex,
        name: 'radiogroup-' + this.state.uid,
        id: id,
        onChange: () => {
          onSelectedChange(i);
        }
      }), /*#__PURE__*/React.createElement("label", {
        className: "input-label nuclide-ui-radiogroup-label",
        htmlFor: id
      }, labelContent));
    });
    return /*#__PURE__*/React.createElement("div", {
      className: className
    }, checkboxes);
  }

}

exports.default = RadioGroup;
RadioGroup.defaultProps = {
  optionLabels: [],
  onSelectedChange: selectedIndex => {},
  selectedIndex: 0
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1JhZGlvR3JvdXAuanMiXSwibmFtZXMiOlsidWlkIiwiUmFkaW9Hcm91cCIsIlJlYWN0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsInN0YXRlIiwicmVuZGVyIiwiY2xhc3NOYW1lIiwib25TZWxlY3RlZENoYW5nZSIsIm9wdGlvbkxhYmVscyIsInNlbGVjdGVkSW5kZXgiLCJjaGVja2JveGVzIiwibWFwIiwibGFiZWxDb250ZW50IiwiaSIsImlkIiwiZGVmYXVsdFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBWUE7Ozs7OztBQVpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBLElBQUlBLEdBQUcsR0FBRyxDQUFWOztBQWFBO0FBQ0E7QUFDQTtBQUNlLE1BQU1DLFVBQU4sU0FBeUJDLEtBQUssQ0FBQ0MsU0FBL0IsQ0FBdUQ7QUFPcEVDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFlO0FBQ3hCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWE4sTUFBQUEsR0FBRyxFQUFFQSxHQUFHO0FBREcsS0FBYjtBQUdEOztBQUVETyxFQUFBQSxNQUFNLEdBQWU7QUFDbkIsVUFBTTtBQUNKQyxNQUFBQSxTQURJO0FBRUpDLE1BQUFBLGdCQUZJO0FBR0pDLE1BQUFBLFlBSEk7QUFJSkMsTUFBQUE7QUFKSSxRQUtGLEtBQUtOLEtBTFQ7QUFNQSxVQUFNTyxVQUFVLEdBQUdGLFlBQVksQ0FBQ0csR0FBYixDQUFpQixDQUFDQyxZQUFELEVBQWVDLENBQWYsS0FBcUI7QUFDdkQsWUFBTUMsRUFBRSxHQUFHLHdCQUF3QmhCLEdBQXhCLEdBQThCLEdBQTlCLEdBQW9DZSxDQUEvQztBQUNBLDBCQUNFO0FBQUssUUFBQSxHQUFHLEVBQUVBLENBQVY7QUFBYSxRQUFBLFNBQVMsRUFBQztBQUF2QixzQkFDRTtBQUNFLFFBQUEsU0FBUyxFQUFDLGFBRFo7QUFFRSxRQUFBLElBQUksRUFBQyxPQUZQO0FBR0UsUUFBQSxPQUFPLEVBQUVBLENBQUMsS0FBS0osYUFIakI7QUFJRSxRQUFBLElBQUksRUFBRSxnQkFBZ0IsS0FBS0wsS0FBTCxDQUFXTixHQUpuQztBQUtFLFFBQUEsRUFBRSxFQUFFZ0IsRUFMTjtBQU1FLFFBQUEsUUFBUSxFQUFFLE1BQU07QUFDZFAsVUFBQUEsZ0JBQWdCLENBQUNNLENBQUQsQ0FBaEI7QUFDRDtBQVJILFFBREYsZUFXRTtBQUNFLFFBQUEsU0FBUyxFQUFDLHlDQURaO0FBRUUsUUFBQSxPQUFPLEVBQUVDO0FBRlgsU0FHR0YsWUFISCxDQVhGLENBREY7QUFtQkQsS0FyQmtCLENBQW5CO0FBc0JBLHdCQUFPO0FBQUssTUFBQSxTQUFTLEVBQUVOO0FBQWhCLE9BQTRCSSxVQUE1QixDQUFQO0FBQ0Q7O0FBNUNtRTs7O0FBQWpEWCxVLENBQ1pnQixZLEdBQWU7QUFDcEJQLEVBQUFBLFlBQVksRUFBRSxFQURNO0FBRXBCRCxFQUFBQSxnQkFBZ0IsRUFBR0UsYUFBRCxJQUEyQixDQUFFLENBRjNCO0FBR3BCQSxFQUFBQSxhQUFhLEVBQUU7QUFISyxDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3RcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbi8vIEdsb2JhbGx5IHVuaXF1ZSBJRCB1c2VkIGFzIHRoZSBcIm5hbWVcIiBhdHRyaWJ1dGUgdG8gZ3JvdXAgcmFkaW8gaW5wdXRzLlxyXG5sZXQgdWlkID0gMDtcclxuXHJcbnR5cGUgUHJvcHMgPSB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nLFxyXG4gIG9wdGlvbkxhYmVsczogQXJyYXk8UmVhY3QuTm9kZT4sXHJcbiAgc2VsZWN0ZWRJbmRleDogbnVtYmVyLFxyXG4gIG9uU2VsZWN0ZWRDaGFuZ2Uoc2VsZWN0ZWRJbmRleDogbnVtYmVyKTogdm9pZCxcclxufTtcclxuXHJcbnR5cGUgU3RhdGUgPSB7XHJcbiAgdWlkOiBudW1iZXIsXHJcbn07XHJcblxyXG4vKipcclxuICogQSBtYW5hZ2VkIHJhZGlvIGdyb3VwIGNvbXBvbmVudC4gQWNjZXB0cyBhcmJpdHJhcnkgUmVhY3QgZWxlbWVudHMgYXMgbGFiZWxzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFkaW9Hcm91cCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcclxuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xyXG4gICAgb3B0aW9uTGFiZWxzOiBbXSxcclxuICAgIG9uU2VsZWN0ZWRDaGFuZ2U6IChzZWxlY3RlZEluZGV4OiBudW1iZXIpID0+IHt9LFxyXG4gICAgc2VsZWN0ZWRJbmRleDogMCxcclxuICB9O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHVpZDogdWlkKyssXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBjbGFzc05hbWUsXHJcbiAgICAgIG9uU2VsZWN0ZWRDaGFuZ2UsXHJcbiAgICAgIG9wdGlvbkxhYmVscyxcclxuICAgICAgc2VsZWN0ZWRJbmRleCxcclxuICAgIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgY2hlY2tib3hlcyA9IG9wdGlvbkxhYmVscy5tYXAoKGxhYmVsQ29udGVudCwgaSkgPT4ge1xyXG4gICAgICBjb25zdCBpZCA9ICdudWNsaWRlLXJhZGlvZ3JvdXAtJyArIHVpZCArICctJyArIGk7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBrZXk9e2l9IGNsYXNzTmFtZT1cIm51Y2xpZGUtdWktcmFkaW9ncm91cC1kaXZcIj5cclxuICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJpbnB1dC1yYWRpb1wiXHJcbiAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXHJcbiAgICAgICAgICAgIGNoZWNrZWQ9e2kgPT09IHNlbGVjdGVkSW5kZXh9XHJcbiAgICAgICAgICAgIG5hbWU9eydyYWRpb2dyb3VwLScgKyB0aGlzLnN0YXRlLnVpZH1cclxuICAgICAgICAgICAgaWQ9e2lkfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4ge1xyXG4gICAgICAgICAgICAgIG9uU2VsZWN0ZWRDaGFuZ2UoaSk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgICAgPGxhYmVsXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0LWxhYmVsIG51Y2xpZGUtdWktcmFkaW9ncm91cC1sYWJlbFwiXHJcbiAgICAgICAgICAgIGh0bWxGb3I9e2lkfT5cclxuICAgICAgICAgICAge2xhYmVsQ29udGVudH1cclxuICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3NOYW1lfT57Y2hlY2tib3hlc308L2Rpdj47XHJcbiAgfVxyXG59XHJcbiJdfQ==