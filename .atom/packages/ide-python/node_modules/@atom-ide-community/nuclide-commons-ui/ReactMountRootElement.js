"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _getDisplayName = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/getDisplayName"));

var _trackReactProfilerRender = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/trackReactProfilerRender"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* eslint-env browser */
// $FlowFixMe Profiler is neither stable nor typed
const Profiler = React.unstable_Profiler;
/**
 * A custom HTMLElement we render React elements into.
 */

class ReactMountRootElement extends HTMLElement {
  constructor(...args) {
    super(...args);
    this._reactElement = void 0;
    this._profileName = void 0;
  }

  setReactElement(reactElement, profileName) {
    this._reactElement = reactElement;
    this._profileName = profileName;
  }

  connectedCallback() {
    var _this$_profileName;

    if (this._reactElement == null) {
      return;
    }

    _reactDom.default.render( /*#__PURE__*/React.createElement(Profiler, {
      id: `RootElement(${(_this$_profileName = this._profileName) !== null && _this$_profileName !== void 0 ? _this$_profileName : (0, _getDisplayName.default)((0, _nullthrows.default)(this._reactElement.type))})`,
      onRender: _trackReactProfilerRender.default
    }, this._reactElement), this);
  }

  disconnectedCallback() {
    if (this._reactElement == null) {
      return;
    }

    _reactDom.default.unmountComponentAtNode(this);
  }

}

let reactMountRootElement;

try {
  customElements.define('nuclide-react-mount-root', ReactMountRootElement);
  reactMountRootElement = ReactMountRootElement;
} catch (e) {
  // Element was already registered. Retrieve its constructor:
  const oldElem = document.createElement('nuclide-react-mount-root');
  (0, _assert.default)(oldElem.constructor.name === 'ReactMountRootElement');
  reactMountRootElement = oldElem.constructor;
}

var _default = reactMountRootElement;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1JlYWN0TW91bnRSb290RWxlbWVudC5qcyJdLCJuYW1lcyI6WyJQcm9maWxlciIsIlJlYWN0IiwidW5zdGFibGVfUHJvZmlsZXIiLCJSZWFjdE1vdW50Um9vdEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsIl9yZWFjdEVsZW1lbnQiLCJfcHJvZmlsZU5hbWUiLCJzZXRSZWFjdEVsZW1lbnQiLCJyZWFjdEVsZW1lbnQiLCJwcm9maWxlTmFtZSIsImNvbm5lY3RlZENhbGxiYWNrIiwiUmVhY3RET00iLCJyZW5kZXIiLCJ0eXBlIiwidHJhY2tSZWFjdFByb2ZpbGVyUmVuZGVyIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwicmVhY3RNb3VudFJvb3RFbGVtZW50IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJlIiwib2xkRWxlbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNvbnN0cnVjdG9yIiwibmFtZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBU0E7QUFDQSxNQUFNQSxRQUFRLEdBQUdDLEtBQUssQ0FBQ0MsaUJBQXZCO0FBRUE7QUFDQTtBQUNBOztBQUNBLE1BQU1DLHFCQUFOLFNBQW9DQyxXQUFwQyxDQUFnRDtBQUFBO0FBQUE7QUFBQSxTQUM5Q0MsYUFEOEM7QUFBQSxTQUU5Q0MsWUFGOEM7QUFBQTs7QUFJOUNDLEVBQUFBLGVBQWUsQ0FDYkMsWUFEYSxFQUViQyxXQUZhLEVBR1A7QUFDTixTQUFLSixhQUFMLEdBQXFCRyxZQUFyQjtBQUNBLFNBQUtGLFlBQUwsR0FBb0JHLFdBQXBCO0FBQ0Q7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFVO0FBQUE7O0FBQ3pCLFFBQUksS0FBS0wsYUFBTCxJQUFzQixJQUExQixFQUFnQztBQUM5QjtBQUNEOztBQUVETSxzQkFBU0MsTUFBVCxlQUNFLG9CQUFDLFFBQUQ7QUFDRSxNQUFBLEVBQUUsRUFBRyxlQUFELHNCQUFlLEtBQUtOLFlBQXBCLG1FQUNGLDZCQUFlLHlCQUFXLEtBQUtELGFBQUwsQ0FBbUJRLElBQTlCLENBQWYsQ0FBb0QsR0FGeEQ7QUFHRSxNQUFBLFFBQVEsRUFBRUM7QUFIWixPQUlHLEtBQUtULGFBSlIsQ0FERixFQU9FLElBUEY7QUFTRDs7QUFFRFUsRUFBQUEsb0JBQW9CLEdBQVU7QUFDNUIsUUFBSSxLQUFLVixhQUFMLElBQXNCLElBQTFCLEVBQWdDO0FBQzlCO0FBQ0Q7O0FBQ0RNLHNCQUFTSyxzQkFBVCxDQUFnQyxJQUFoQztBQUNEOztBQWpDNkM7O0FBb0NoRCxJQUFJQyxxQkFBSjs7QUFDQSxJQUFJO0FBQ0ZDLEVBQUFBLGNBQWMsQ0FBQ0MsTUFBZixDQUFzQiwwQkFBdEIsRUFBa0RoQixxQkFBbEQ7QUFDQWMsRUFBQUEscUJBQXFCLEdBQUdkLHFCQUF4QjtBQUNELENBSEQsQ0FHRSxPQUFPaUIsQ0FBUCxFQUFVO0FBQ1Y7QUFDQSxRQUFNQyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QiwwQkFBdkIsQ0FBaEI7QUFDQSx1QkFBVUYsT0FBTyxDQUFDRyxXQUFSLENBQW9CQyxJQUFwQixLQUE2Qix1QkFBdkM7QUFDQVIsRUFBQUEscUJBQXFCLEdBQUlJLE9BQU8sQ0FBQ0csV0FBakM7QUFDRDs7ZUFFZVAscUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cclxuXHJcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IG51bGx0aHJvd3MgZnJvbSAnbnVsbHRocm93cyc7XHJcbmltcG9ydCBnZXREaXNwbGF5TmFtZSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9nZXREaXNwbGF5TmFtZSc7XHJcbmltcG9ydCB0cmFja1JlYWN0UHJvZmlsZXJSZW5kZXIgZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvdHJhY2tSZWFjdFByb2ZpbGVyUmVuZGVyJztcclxuXHJcbi8vICRGbG93Rml4TWUgUHJvZmlsZXIgaXMgbmVpdGhlciBzdGFibGUgbm9yIHR5cGVkXHJcbmNvbnN0IFByb2ZpbGVyID0gUmVhY3QudW5zdGFibGVfUHJvZmlsZXI7XHJcblxyXG4vKipcclxuICogQSBjdXN0b20gSFRNTEVsZW1lbnQgd2UgcmVuZGVyIFJlYWN0IGVsZW1lbnRzIGludG8uXHJcbiAqL1xyXG5jbGFzcyBSZWFjdE1vdW50Um9vdEVsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XHJcbiAgX3JlYWN0RWxlbWVudDogP1JlYWN0LkVsZW1lbnQ8YW55PjtcclxuICBfcHJvZmlsZU5hbWU6ID9zdHJpbmc7XHJcblxyXG4gIHNldFJlYWN0RWxlbWVudChcclxuICAgIHJlYWN0RWxlbWVudDogUmVhY3QuRWxlbWVudDxhbnk+LFxyXG4gICAgcHJvZmlsZU5hbWU/OiBzdHJpbmcsXHJcbiAgKTogdm9pZCB7XHJcbiAgICB0aGlzLl9yZWFjdEVsZW1lbnQgPSByZWFjdEVsZW1lbnQ7XHJcbiAgICB0aGlzLl9wcm9maWxlTmFtZSA9IHByb2ZpbGVOYW1lO1xyXG4gIH1cclxuXHJcbiAgY29ubmVjdGVkQ2FsbGJhY2soKTogbWl4ZWQge1xyXG4gICAgaWYgKHRoaXMuX3JlYWN0RWxlbWVudCA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBSZWFjdERPTS5yZW5kZXIoXHJcbiAgICAgIDxQcm9maWxlclxyXG4gICAgICAgIGlkPXtgUm9vdEVsZW1lbnQoJHt0aGlzLl9wcm9maWxlTmFtZSA/P1xyXG4gICAgICAgICAgZ2V0RGlzcGxheU5hbWUobnVsbHRocm93cyh0aGlzLl9yZWFjdEVsZW1lbnQudHlwZSkpfSlgfVxyXG4gICAgICAgIG9uUmVuZGVyPXt0cmFja1JlYWN0UHJvZmlsZXJSZW5kZXJ9PlxyXG4gICAgICAgIHt0aGlzLl9yZWFjdEVsZW1lbnR9XHJcbiAgICAgIDwvUHJvZmlsZXI+LFxyXG4gICAgICB0aGlzLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IG1peGVkIHtcclxuICAgIGlmICh0aGlzLl9yZWFjdEVsZW1lbnQgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMpO1xyXG4gIH1cclxufVxyXG5cclxubGV0IHJlYWN0TW91bnRSb290RWxlbWVudDtcclxudHJ5IHtcclxuICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ251Y2xpZGUtcmVhY3QtbW91bnQtcm9vdCcsIFJlYWN0TW91bnRSb290RWxlbWVudCk7XHJcbiAgcmVhY3RNb3VudFJvb3RFbGVtZW50ID0gUmVhY3RNb3VudFJvb3RFbGVtZW50O1xyXG59IGNhdGNoIChlKSB7XHJcbiAgLy8gRWxlbWVudCB3YXMgYWxyZWFkeSByZWdpc3RlcmVkLiBSZXRyaWV2ZSBpdHMgY29uc3RydWN0b3I6XHJcbiAgY29uc3Qgb2xkRWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ251Y2xpZGUtcmVhY3QtbW91bnQtcm9vdCcpO1xyXG4gIGludmFyaWFudChvbGRFbGVtLmNvbnN0cnVjdG9yLm5hbWUgPT09ICdSZWFjdE1vdW50Um9vdEVsZW1lbnQnKTtcclxuICByZWFjdE1vdW50Um9vdEVsZW1lbnQgPSAob2xkRWxlbS5jb25zdHJ1Y3RvcjogYW55KTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgKHJlYWN0TW91bnRSb290RWxlbWVudDogQ2xhc3M8UmVhY3RNb3VudFJvb3RFbGVtZW50Pik7XHJcbiJdfQ==