"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFilterPattern = getFilterPattern;
exports.default = void 0;

var _AtomInput = require("./AtomInput");

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = require("./Button");

var _ButtonGroup = require("./ButtonGroup");

var _escapeStringRegexp = _interopRequireDefault(require("escape-string-regexp"));

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class RegExpFilter extends React.Component {
  constructor(props) {
    super(props);
    this._currentValue = void 0;
    this._input = void 0;

    this._handleReToggleButtonClick = () => {
      this.props.onChange({
        text: this._currentValue.text,
        isRegExp: !this._currentValue.isRegExp
      });
    };

    this._handleTextChange = text => {
      if (text === this._currentValue.text) {
        return;
      }

      this.props.onChange({
        text,
        isRegExp: this._currentValue.isRegExp
      });
    };

    this._currentValue = props.value;
  }

  UNSAFE_componentWillReceiveProps(props) {
    // We need to store this so that we can use it in the event handlers.
    this._currentValue = props.value;
  }

  render() {
    const {
      value: {
        text,
        isRegExp,
        invalid
      }
    } = this.props;
    const size = this.props.size || 'sm';
    const buttonSize = getButtonSize(size);
    const inputWidth = this.props.inputWidth == null ? 200 : this.props.inputWidth;
    const inputClassName = (0, _classnames.default)('nuclide-ui-regexp-filter-input', this.props.inputClassName);
    return /*#__PURE__*/React.createElement(_ButtonGroup.ButtonGroup, {
      className: "inline-block"
    }, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
      ref: el => {
        this._input = el;
      },
      invalid: invalid,
      className: inputClassName,
      size: size,
      width: inputWidth,
      placeholderText: "Filter",
      onDidChange: this._handleTextChange,
      value: text
    }), /*#__PURE__*/React.createElement(_Button.Button, {
      className: "nuclide-ui-regexp-filter-button",
      size: buttonSize,
      selected: isRegExp,
      onClick: this._handleReToggleButtonClick,
      tooltip: {
        title: 'Use Regex'
      }
    }, ".*"));
  }

  focus() {
    if (this._input == null) {
      return;
    }

    this._input.focus();
  }

}

exports.default = RegExpFilter;

function getButtonSize(size) {
  switch (size) {
    case 'xs':
      return _Button.ButtonSizes.EXTRA_SMALL;

    case 'sm':
      return _Button.ButtonSizes.SMALL;

    case 'lg':
      return _Button.ButtonSizes.LARGE;

    default:
      size;
      throw new Error(`Invalid size: ${size}`);
  }
}

function getFilterPattern(text, isRegExp) {
  if (text === '') {
    return {
      pattern: null,
      invalid: false
    };
  }

  const source = isRegExp ? text : (0, _escapeStringRegexp.default)(text);

  try {
    return {
      pattern: new RegExp(source, 'i'),
      invalid: false
    };
  } catch (err) {
    return {
      pattern: null,
      invalid: true
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,