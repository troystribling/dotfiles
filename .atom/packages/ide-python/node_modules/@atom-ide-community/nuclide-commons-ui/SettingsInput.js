"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assert = _interopRequireDefault(require("assert"));

var _AtomInput = require("./AtomInput");

var React = _interopRequireWildcard(require("react"));

var _SettingsUtils = require("./SettingsUtils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class SettingsInput extends React.Component {
  constructor(props) {
    super(props);
    this._ignoreInputCallback = void 0;
    this._input = void 0;

    this._handleChange = newValue_ => {
      let newValue = newValue_;

      if (this._ignoreInputCallback) {
        return;
      }

      newValue = (0, _SettingsUtils.parseValue)(this.props.type, newValue);
      this.props.onChange(newValue);
    };

    this._onFocus = () => {
      const keyPath = this.props.keyPath;
      const input = this._input;
      (0, _assert.default)(input != null);

      if ((0, _SettingsUtils.isDefaultConfigValue)(keyPath)) {
        const defaultValue = (0, _SettingsUtils.getDefaultConfigValueString)(keyPath);

        this._updateInput(input, defaultValue);
      }
    };

    this._onBlur = () => {
      const keyPath = this.props.keyPath;
      const input = this._input;

      if (input != null && (0, _SettingsUtils.isDefaultConfigValue)(keyPath, input.getText())) {
        this._updateInput(input, '');
      }
    };

    this._ignoreInputCallback = false;
  }

  _updateInput(input, newValue) {
    this._ignoreInputCallback = true;
    input.setText(newValue);
    this._ignoreInputCallback = false;
  }

  _getValue() {
    let value = (0, _SettingsUtils.valueToString)(this.props.value);
    const defaultValue = (0, _SettingsUtils.getDefaultConfigValueString)(this.props.keyPath);

    if (defaultValue === value) {
      value = '';
    }

    return value;
  }

  _getPlaceholder() {
    const defaultValue = (0, _SettingsUtils.getDefaultConfigValueString)(this.props.keyPath);
    return defaultValue ? 'Default: ' + defaultValue : '';
  }

  componentDidUpdate(prevProps) {
    const input = this._input;
    (0, _assert.default)(input != null);

    const value = this._getValue();

    if (input.getText() !== value) {
      this._updateInput(input, value);
    }
  }

  render() {
    const keyPath = this.props.keyPath;
    const id = (0, _SettingsUtils.normalizeIdentifier)(keyPath);
    const title = this.props.title;
    const description = this.props.description;

    const value = this._getValue();

    const placeholder = this._getPlaceholder();

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", {
      className: "control-label"
    }, /*#__PURE__*/React.createElement("div", {
      className: "setting-title"
    }, title), /*#__PURE__*/React.createElement("div", {
      className: "setting-description"
    }, description)), /*#__PURE__*/React.createElement("div", {
      className: "controls"
    }, /*#__PURE__*/React.createElement("div", {
      className: "editor-container"
    }, /*#__PURE__*/React.createElement("subview", null, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
      className: id,
      initialValue: value,
      onDidChange: this._handleChange,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      placeholderText: placeholder,
      ref: input => {
        this._input = input;
      },
      text: value
    })))));
  }

}

exports.default = SettingsInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,