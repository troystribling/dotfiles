"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.STRING_REGEX = void 0;

var React = _interopRequireWildcard(require("react"));

var _ValueComponentClassNames = require("./ValueComponentClassNames");

var _TextRenderer = require("./TextRenderer");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const booleanRegex = /^true|false$/i;
const STRING_REGEX = /^(['"]).*\1$/;
exports.STRING_REGEX = STRING_REGEX;

function renderNullish(expression) {
  const type = expression.type;
  return type === 'undefined' || type === 'null' ? /*#__PURE__*/React.createElement("span", {
    className: _ValueComponentClassNames.ValueComponentClassNames.nullish
  }, type) : null;
}

function renderString(expression) {
  const type = expression.type;
  const value = expression.getValue();

  if (value == null) {
    return null;
  }

  if (STRING_REGEX.test(value)) {
    return /*#__PURE__*/React.createElement("span", {
      className: _ValueComponentClassNames.ValueComponentClassNames.string
    }, value);
  } else if (type === 'string') {
    return /*#__PURE__*/React.createElement("span", {
      className: _ValueComponentClassNames.ValueComponentClassNames.string
    }, /*#__PURE__*/React.createElement("span", {
      className: _ValueComponentClassNames.ValueComponentClassNames.stringOpeningQuote
    }, "\""), value, /*#__PURE__*/React.createElement("span", {
      className: _ValueComponentClassNames.ValueComponentClassNames.stringClosingQuote
    }, "\""));
  } else {
    return null;
  }
}

function renderNumber(expression) {
  const type = expression.type;
  const value = expression.getValue();

  if (value == null) {
    return null;
  }

  return type === 'number' || !isNaN(Number(value)) ? /*#__PURE__*/React.createElement("span", {
    className: _ValueComponentClassNames.ValueComponentClassNames.number
  }, String(value)) : null;
}

function renderBoolean(expression) {
  const type = expression.type;
  const value = expression.getValue();

  if (value == null) {
    return null;
  }

  return type === 'boolean' || booleanRegex.test(value) ? /*#__PURE__*/React.createElement("span", {
    className: _ValueComponentClassNames.ValueComponentClassNames.boolean
  }, String(value)) : null;
}

function renderDefault(expression) {
  return expression.getValue();
}

const valueRenderers = [_TextRenderer.TextRenderer, renderString, renderNumber, renderNullish, renderBoolean, renderDefault];

class SimpleValueComponent extends React.Component {
  shouldComponentUpdate(nextProps) {
    const {
      expression
    } = this.props;
    return expression !== nextProps.expression;
  }

  render() {
    const {
      expression
    } = this.props;
    let displayValue;

    for (const renderer of valueRenderers) {
      displayValue = renderer(expression);

      if (displayValue != null) {
        break;
      }
    }

    if (displayValue == null || displayValue === '') {
      const val = expression.getValue();
      displayValue = val != null ? val : '(N/A)';
    }

    if (expression == null) {
      return /*#__PURE__*/React.createElement("span", {
        tabIndex: -1,
        className: "native-key-bindings"
      }, displayValue);
    }

    const hideExpressionName = Boolean(this.props.hideExpressionName);
    const renderedExpression = hideExpressionName ? null : /*#__PURE__*/React.createElement("span", {
      className: _ValueComponentClassNames.ValueComponentClassNames.identifier
    }, expression.name);
    return /*#__PURE__*/React.createElement("span", {
      tabIndex: -1,
      className: "native-key-bindings"
    }, renderedExpression, hideExpressionName ? null : ':', displayValue);
  }

}

exports.default = SimpleValueComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,