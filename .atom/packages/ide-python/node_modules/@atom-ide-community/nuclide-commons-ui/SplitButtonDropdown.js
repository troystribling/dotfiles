"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ButtonSizes", {
  enumerable: true,
  get: function () {
    return _Button.ButtonSizes;
  }
});
exports.SplitButtonDropdown = void 0;

var _assert = _interopRequireDefault(require("assert"));

var React = _interopRequireWildcard(require("react"));

var _Button = require("./Button");

var _ButtonGroup = require("./ButtonGroup");

var _Dropdown = require("./Dropdown");

var _classnames = _interopRequireDefault(require("classnames"));

var _electron = _interopRequireDefault(require("electron"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const {
  remote
} = _electron.default;
(0, _assert.default)(remote != null);

class SplitButtonDropdown extends React.Component {
  render() {
    const {
      buttonComponent,
      changeDisabled,
      className,
      confirmDisabled,
      onChange,
      onConfirm,
      options,
      size,
      value,
      selectionComparator
    } = this.props;
    const selectedOption = this._findSelectedOption(options) || options[0];
    (0, _assert.default)(selectedOption.type !== 'separator');
    const ButtonComponent = buttonComponent || _Button.Button; // $FlowFixMe(>=0.53.0) Flow suppress

    const dropdownOptions = options.map(option => ({ ...option,
      selectedLabel: ''
    }));
    return /*#__PURE__*/React.createElement(_ButtonGroup.ButtonGroup, {
      className: (0, _classnames.default)(className, 'nuclide-ui-split-button-dropdown')
    }, /*#__PURE__*/React.createElement(ButtonComponent, {
      buttonType: this.props.buttonType,
      size: size == null ? undefined : size,
      disabled: confirmDisabled === true,
      icon: selectedOption.icon || undefined,
      onClick: onConfirm.bind(null, value),
      tabIndex: this.props.tabIndex
    }, // flowlint-next-line sketchy-null-mixed:off, sketchy-null-string:off
    selectedOption.selectedLabel || selectedOption.label || ''), /*#__PURE__*/React.createElement(_Dropdown.Dropdown, {
      buttonType: this.props.buttonType,
      size: this._getDropdownSize(size),
      disabled: changeDisabled === true,
      options: dropdownOptions,
      value: value,
      onChange: onChange,
      selectionComparator: selectionComparator,
      tabIndex: this.props.tabIndex
    }));
  }

  _getDropdownSize(size) {
    switch (size) {
      case _Button.ButtonSizes.EXTRA_SMALL:
        return 'xs';

      case _Button.ButtonSizes.SMALL:
        return 'sm';

      case _Button.ButtonSizes.LARGE:
        return 'lg';

      default:
        return 'sm';
    }
  }

  _findSelectedOption(options) {
    let result = null;
    const selectionComparator = this.props.selectionComparator == null ? (a, b) => a === b : this.props.selectionComparator;

    for (const option of options) {
      if (option.type === 'separator') {
        continue;
      } else if (option.type === 'submenu') {
        const submenu = option.submenu;
        result = this._findSelectedOption(submenu);
      } else if (selectionComparator(option.value, this.props.value)) {
        result = option;
      }

      if (result) {
        break;
      }
    }

    return result;
  }

}

exports.SplitButtonDropdown = SplitButtonDropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,