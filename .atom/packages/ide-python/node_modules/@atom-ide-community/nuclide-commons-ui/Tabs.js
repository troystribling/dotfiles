"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Icon = require("./Icon");

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

class Tabs extends React.Component {
  constructor(...args) {
    super(...args);

    this._handleTabChange = selectedTabName => {
      if (typeof this.props.onActiveTabChange === 'function') {
        this.props.onActiveTabChange((0, _nullthrows.default)(this.props.tabs.find(tab => tab.name === selectedTabName)));
      }
    };

    this._renderTabMenu = () => {
      const closeButton = this.props.closeable ? /*#__PURE__*/React.createElement("div", {
        className: "close-icon",
        onClick: this.props.onClose
      }) : null;
      const tabs = this.props.tabs.map(tab => {
        const icon = tab.icon == null ? null : /*#__PURE__*/React.createElement(_Icon.Icon, {
          icon: tab.icon
        });
        const handler = {};
        handler[this.props.triggeringEvent] = this._handleTabChange.bind(this, tab.name);
        return /*#__PURE__*/React.createElement("li", _extends({
          className: (0, _classnames.default)({
            tab: true,
            active: this.props.activeTabName === tab.name,
            growable: this.props.growable
          }),
          key: tab.name,
          title: tab.name
        }, handler), /*#__PURE__*/React.createElement("div", {
          className: "title"
        }, icon, tab.tabContent), closeButton);
      });
      return /*#__PURE__*/React.createElement("ul", {
        className: "tab-bar list-inline inset-panel"
      }, tabs);
    };
  }

  render() {
    return /*#__PURE__*/React.createElement("div", {
      className: "nuclide-tabs"
    }, this._renderTabMenu());
  }

}

exports.default = Tabs;
Tabs.defaultProps = {
  closeable: false,
  triggeringEvent: 'onClick',
  growable: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1RhYnMuanMiXSwibmFtZXMiOlsiVGFicyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX2hhbmRsZVRhYkNoYW5nZSIsInNlbGVjdGVkVGFiTmFtZSIsInByb3BzIiwib25BY3RpdmVUYWJDaGFuZ2UiLCJ0YWJzIiwiZmluZCIsInRhYiIsIm5hbWUiLCJfcmVuZGVyVGFiTWVudSIsImNsb3NlQnV0dG9uIiwiY2xvc2VhYmxlIiwib25DbG9zZSIsIm1hcCIsImljb24iLCJoYW5kbGVyIiwidHJpZ2dlcmluZ0V2ZW50IiwiYmluZCIsImFjdGl2ZSIsImFjdGl2ZVRhYk5hbWUiLCJncm93YWJsZSIsInRhYkNvbnRlbnQiLCJyZW5kZXIiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFjQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQWtCZSxNQUFNQSxJQUFOLFNBQW1CQyxLQUFLLENBQUNDLFNBQXpCLENBQTBDO0FBQUE7QUFBQTs7QUFBQSxTQU92REMsZ0JBUHVELEdBT25DQyxlQUFELElBQTZCO0FBQzlDLFVBQUksT0FBTyxLQUFLQyxLQUFMLENBQVdDLGlCQUFsQixLQUF3QyxVQUE1QyxFQUF3RDtBQUN0RCxhQUFLRCxLQUFMLENBQVdDLGlCQUFYLENBQ0UseUJBQVcsS0FBS0QsS0FBTCxDQUFXRSxJQUFYLENBQWdCQyxJQUFoQixDQUFxQkMsR0FBRyxJQUFJQSxHQUFHLENBQUNDLElBQUosS0FBYU4sZUFBekMsQ0FBWCxDQURGO0FBR0Q7QUFDRixLQWJzRDs7QUFBQSxTQWV2RE8sY0FmdUQsR0FldEMsTUFBMEI7QUFDekMsWUFBTUMsV0FBVyxHQUFHLEtBQUtQLEtBQUwsQ0FBV1EsU0FBWCxnQkFDbEI7QUFBSyxRQUFBLFNBQVMsRUFBQyxZQUFmO0FBQTRCLFFBQUEsT0FBTyxFQUFFLEtBQUtSLEtBQUwsQ0FBV1M7QUFBaEQsUUFEa0IsR0FFaEIsSUFGSjtBQUdBLFlBQU1QLElBQUksR0FBRyxLQUFLRixLQUFMLENBQVdFLElBQVgsQ0FBZ0JRLEdBQWhCLENBQW9CTixHQUFHLElBQUk7QUFDdEMsY0FBTU8sSUFBSSxHQUFHUCxHQUFHLENBQUNPLElBQUosSUFBWSxJQUFaLEdBQW1CLElBQW5CLGdCQUEwQixvQkFBQyxVQUFEO0FBQU0sVUFBQSxJQUFJLEVBQUVQLEdBQUcsQ0FBQ087QUFBaEIsVUFBdkM7QUFDQSxjQUFNQyxPQUFPLEdBQUcsRUFBaEI7QUFDQUEsUUFBQUEsT0FBTyxDQUFDLEtBQUtaLEtBQUwsQ0FBV2EsZUFBWixDQUFQLEdBQXNDLEtBQUtmLGdCQUFMLENBQXNCZ0IsSUFBdEIsQ0FDcEMsSUFEb0MsRUFFcENWLEdBQUcsQ0FBQ0MsSUFGZ0MsQ0FBdEM7QUFJQSw0QkFDRTtBQUNFLFVBQUEsU0FBUyxFQUFFLHlCQUFXO0FBQ3BCRCxZQUFBQSxHQUFHLEVBQUUsSUFEZTtBQUVwQlcsWUFBQUEsTUFBTSxFQUFFLEtBQUtmLEtBQUwsQ0FBV2dCLGFBQVgsS0FBNkJaLEdBQUcsQ0FBQ0MsSUFGckI7QUFHcEJZLFlBQUFBLFFBQVEsRUFBRSxLQUFLakIsS0FBTCxDQUFXaUI7QUFIRCxXQUFYLENBRGI7QUFNRSxVQUFBLEdBQUcsRUFBRWIsR0FBRyxDQUFDQyxJQU5YO0FBT0UsVUFBQSxLQUFLLEVBQUVELEdBQUcsQ0FBQ0M7QUFQYixXQVFNTyxPQVJOLGdCQVNFO0FBQUssVUFBQSxTQUFTLEVBQUM7QUFBZixXQUNHRCxJQURILEVBRUdQLEdBQUcsQ0FBQ2MsVUFGUCxDQVRGLEVBYUdYLFdBYkgsQ0FERjtBQWlCRCxPQXhCWSxDQUFiO0FBeUJBLDBCQUFPO0FBQUksUUFBQSxTQUFTLEVBQUM7QUFBZCxTQUFpREwsSUFBakQsQ0FBUDtBQUNELEtBN0NzRDtBQUFBOztBQStDdkRpQixFQUFBQSxNQUFNLEdBQWU7QUFDbkIsd0JBQU87QUFBSyxNQUFBLFNBQVMsRUFBQztBQUFmLE9BQStCLEtBQUtiLGNBQUwsRUFBL0IsQ0FBUDtBQUNEOztBQWpEc0Q7OztBQUFwQ1gsSSxDQUNaeUIsWSxHQUFlO0FBQ3BCWixFQUFBQSxTQUFTLEVBQUUsS0FEUztBQUVwQkssRUFBQUEsZUFBZSxFQUFFLFNBRkc7QUFHcEJJLEVBQUFBLFFBQVEsRUFBRTtBQUhVLEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgdHlwZSB7SWNvbk5hbWV9IGZyb20gJy4vSWNvbic7XHJcblxyXG5pbXBvcnQge0ljb259IGZyb20gJy4vSWNvbic7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XHJcbmltcG9ydCBudWxsdGhyb3dzIGZyb20gJ251bGx0aHJvd3MnO1xyXG5cclxuZXhwb3J0IHR5cGUgVGFiID0ge1xyXG4gIG5hbWU6IHN0cmluZyxcclxuICBpY29uPzogSWNvbk5hbWUsXHJcbiAgdGFiQ29udGVudDogUmVhY3QuRWxlbWVudDxhbnk+LFxyXG59O1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICB0YWJzOiBBcnJheTxUYWI+LFxyXG4gIGFjdGl2ZVRhYk5hbWU6ID9zdHJpbmcsXHJcbiAgY2xvc2VhYmxlOiBib29sZWFuLFxyXG4gIG9uQWN0aXZlVGFiQ2hhbmdlOiAodGFiOiBUYWIpID0+IHZvaWQsXHJcbiAgb25DbG9zZT86ICgpID0+IHZvaWQsXHJcbiAgdHJpZ2dlcmluZ0V2ZW50OiBzdHJpbmcsXHJcbiAgZ3Jvd2FibGU/OiBib29sZWFuLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFicyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBjbG9zZWFibGU6IGZhbHNlLFxyXG4gICAgdHJpZ2dlcmluZ0V2ZW50OiAnb25DbGljaycsXHJcbiAgICBncm93YWJsZTogZmFsc2UsXHJcbiAgfTtcclxuXHJcbiAgX2hhbmRsZVRhYkNoYW5nZSA9IChzZWxlY3RlZFRhYk5hbWU6IHN0cmluZykgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLnByb3BzLm9uQWN0aXZlVGFiQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRoaXMucHJvcHMub25BY3RpdmVUYWJDaGFuZ2UoXHJcbiAgICAgICAgbnVsbHRocm93cyh0aGlzLnByb3BzLnRhYnMuZmluZCh0YWIgPT4gdGFiLm5hbWUgPT09IHNlbGVjdGVkVGFiTmFtZSkpLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIF9yZW5kZXJUYWJNZW51ID0gKCk6IFJlYWN0LkVsZW1lbnQ8YW55PiA9PiB7XHJcbiAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IHRoaXMucHJvcHMuY2xvc2VhYmxlID8gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNsb3NlLWljb25cIiBvbkNsaWNrPXt0aGlzLnByb3BzLm9uQ2xvc2V9IC8+XHJcbiAgICApIDogbnVsbDtcclxuICAgIGNvbnN0IHRhYnMgPSB0aGlzLnByb3BzLnRhYnMubWFwKHRhYiA9PiB7XHJcbiAgICAgIGNvbnN0IGljb24gPSB0YWIuaWNvbiA9PSBudWxsID8gbnVsbCA6IDxJY29uIGljb249e3RhYi5pY29ufSAvPjtcclxuICAgICAgY29uc3QgaGFuZGxlciA9IHt9O1xyXG4gICAgICBoYW5kbGVyW3RoaXMucHJvcHMudHJpZ2dlcmluZ0V2ZW50XSA9IHRoaXMuX2hhbmRsZVRhYkNoYW5nZS5iaW5kKFxyXG4gICAgICAgIHRoaXMsXHJcbiAgICAgICAgdGFiLm5hbWUsXHJcbiAgICAgICk7XHJcbiAgICAgIHJldHVybiAoXHJcbiAgICAgICAgPGxpXHJcbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoe1xyXG4gICAgICAgICAgICB0YWI6IHRydWUsXHJcbiAgICAgICAgICAgIGFjdGl2ZTogdGhpcy5wcm9wcy5hY3RpdmVUYWJOYW1lID09PSB0YWIubmFtZSxcclxuICAgICAgICAgICAgZ3Jvd2FibGU6IHRoaXMucHJvcHMuZ3Jvd2FibGUsXHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICAgIGtleT17dGFiLm5hbWV9XHJcbiAgICAgICAgICB0aXRsZT17dGFiLm5hbWV9XHJcbiAgICAgICAgICB7Li4uaGFuZGxlcn0+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRpdGxlXCI+XHJcbiAgICAgICAgICAgIHtpY29ufVxyXG4gICAgICAgICAgICB7dGFiLnRhYkNvbnRlbnR9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIHtjbG9zZUJ1dHRvbn1cclxuICAgICAgICA8L2xpPlxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gPHVsIGNsYXNzTmFtZT1cInRhYi1iYXIgbGlzdC1pbmxpbmUgaW5zZXQtcGFuZWxcIj57dGFic308L3VsPjtcclxuICB9O1xyXG5cclxuICByZW5kZXIoKTogUmVhY3QuTm9kZSB7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJudWNsaWRlLXRhYnNcIj57dGhpcy5fcmVuZGVyVGFiTWVudSgpfTwvZGl2PjtcclxuICB9XHJcbn1cclxuIl19