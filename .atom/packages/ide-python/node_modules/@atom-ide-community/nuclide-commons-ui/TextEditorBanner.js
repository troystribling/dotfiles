"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Notice = exports.TextEditorBanner = void 0;

var _Message = require("./Message");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _assert = _interopRequireDefault(require("assert"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class TextEditorBanner {
  constructor(editor) {
    this._disposables = void 0;
    this._editor = void 0;
    this._element = void 0;
    this._editorElement = void 0;
    this._marker = void 0;

    this.render = reactElement => {
      this.renderUnstyled( /*#__PURE__*/React.createElement("div", {
        className: "nuclide-ui-text-editor-banner-element"
      }, reactElement));
    };

    this.renderUnstyled = reactElement => {
      _reactDom.default.render( /*#__PURE__*/React.createElement("div", {
        className: "nuclide-ui-text-editor-banner"
      }, reactElement, /*#__PURE__*/React.createElement("div", {
        // eslint-disable-next-line nuclide-internal/jsx-simple-callback-refs
        ref: ref => this._updateTextEditorElement(ref),
        className: "nuclide-ui-text-editor-banner-editor"
      })), this._element);
    };

    this._editor = editor;
    const editorElement = editor.getElement().firstChild;
    this._element = document.createElement('div');
    this._element.className = 'nuclide-ui-text-editor-banner-container';
    (0, _assert.default)(editorElement instanceof HTMLElement && editorElement.parentNode != null);
    editorElement.parentNode.insertBefore(this._element, editorElement);
    this._editorElement = editorElement;
    this._disposables = new _UniversalDisposable.default(() => {
      _reactDom.default.unmountComponentAtNode(this._element);

      this._element.replaceWith(editorElement);
    }, atom.workspace.observeActiveTextEditor(activeEditor => {
      if (activeEditor == null) {
        return;
      }

      if (activeEditor.getElement().contains(editor.getElement())) {
        // This is needed for situations where the editor was rendered while
        // display: none so _updateTextEditorElement wasn't able to properly
        // measure at that time.
        editor.getElement().measureDimensions();
      }
    }));
  }

  dispose() {
    this._disposables.dispose();
  }

  _updateTextEditorElement(editorContainerRef) {
    const editorContainerNode = _reactDom.default.findDOMNode(editorContainerRef);

    if (editorContainerNode == null) {
      return;
    } // Clear the previous child


    while (editorContainerNode.lastChild) {
      editorContainerNode.removeChild(editorContainerNode.lastChild);
    } // And insert the new one instead


    editorContainerNode.appendChild(this._editorElement);

    this._editor.getElement().measureDimensions(); // Fix for Hyperclicking a read-only file.
    // Restore the scroll position in the editor.


    this._editor.getElement().getModel().scrollToCursorPosition();
  }

  hide() {
    this.dispose();
  }

}

exports.TextEditorBanner = TextEditorBanner;

class Notice extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement("div", {
      className: "nuclide-ui-text-editor-banner-notice"
    }, /*#__PURE__*/React.createElement(_Message.Message, {
      type: this.props.messageType
    }, /*#__PURE__*/React.createElement("div", {
      className: "nuclide-ui-text-editor-banner-notice-content",
      style: this.props.contentStyle
    }, this.props.children)));
  }

}

exports.Notice = Notice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,