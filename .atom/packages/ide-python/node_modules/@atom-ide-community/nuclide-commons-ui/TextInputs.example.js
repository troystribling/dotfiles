"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextInputExamples = void 0;

var _atom = require("atom");

var React = _interopRequireWildcard(require("react"));

var _Block = require("./Block");

var _AtomInput = require("./AtomInput");

var _AtomTextEditor = require("./AtomTextEditor");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const AtomInputExample = () => /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
  disabled: false,
  initialValue: "atom input",
  placeholderText: "placeholder text"
})), /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
  disabled: true,
  initialValue: "disabled atom input",
  placeholderText: "placeholder text"
})), /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
  initialValue: "xs atom input",
  placeholderText: "placeholder text",
  size: "xs"
})), /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
  initialValue: "sm atom input",
  placeholderText: "placeholder text",
  size: "sm"
})), /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
  initialValue: "lg atom input",
  placeholderText: "placeholder text",
  size: "lg"
})), /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
  initialValue: "unstyled atom input",
  placeholderText: "placeholder text",
  unstyled: true
})), /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
  initialValue: "atom input with custom width",
  placeholderText: "placeholder text",
  width: 200
})));

const buffer1 = new _atom.TextBuffer({
  text: '/**\n * Hi!\n */\n\n// I am a TextBuffer.\nconst a = 42;'
});
const buffer2 = new _atom.TextBuffer({
  text: '/**\n * Hi!\n */\n\n// I am a read-only, gutter-less TextBuffer.\nconst a = 42;'
});
const editorWrapperStyle = {
  display: 'flex',
  flexGrow: 1,
  height: '12em',
  boxShadow: '0 0 20px 0 rgba(0, 0, 0, 0.3)'
};

const AtomTextEditorExample = () => /*#__PURE__*/React.createElement(_Block.Block, null, /*#__PURE__*/React.createElement("div", {
  style: editorWrapperStyle
}, /*#__PURE__*/React.createElement(_AtomTextEditor.AtomTextEditor, {
  gutterHidden: false,
  readOnly: false,
  syncTextContents: false,
  autoGrow: false,
  path: "aJavaScriptFile.js",
  textBuffer: buffer1
})), /*#__PURE__*/React.createElement("div", {
  style: { ...editorWrapperStyle,
    marginTop: '2em'
  }
}, /*#__PURE__*/React.createElement(_AtomTextEditor.AtomTextEditor, {
  gutterHidden: true,
  readOnly: true,
  syncTextContents: false,
  autoGrow: false,
  path: "aJavaScriptFile.js",
  textBuffer: buffer2
})));

const TextInputExamples = {
  sectionName: 'Text Inputs',
  description: '',
  examples: [{
    title: 'AtomInput',
    component: AtomInputExample
  }, {
    title: 'AtomTextEditor',
    component: AtomTextEditorExample
  }]
};
exports.TextInputExamples = TextInputExamples;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1RleHRJbnB1dHMuZXhhbXBsZS5qcyJdLCJuYW1lcyI6WyJBdG9tSW5wdXRFeGFtcGxlIiwiYnVmZmVyMSIsIlRleHRCdWZmZXIiLCJ0ZXh0IiwiYnVmZmVyMiIsImVkaXRvcldyYXBwZXJTdHlsZSIsImRpc3BsYXkiLCJmbGV4R3JvdyIsImhlaWdodCIsImJveFNoYWRvdyIsIkF0b21UZXh0RWRpdG9yRXhhbXBsZSIsIm1hcmdpblRvcCIsIlRleHRJbnB1dEV4YW1wbGVzIiwic2VjdGlvbk5hbWUiLCJkZXNjcmlwdGlvbiIsImV4YW1wbGVzIiwidGl0bGUiLCJjb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRQSxNQUFNQSxnQkFBZ0IsR0FBRyxtQkFDdkIsOENBQ0Usb0JBQUMsWUFBRCxxQkFDRSxvQkFBQyxvQkFBRDtBQUNFLEVBQUEsUUFBUSxFQUFFLEtBRFo7QUFFRSxFQUFBLFlBQVksRUFBQyxZQUZmO0FBR0UsRUFBQSxlQUFlLEVBQUM7QUFIbEIsRUFERixDQURGLGVBUUUsb0JBQUMsWUFBRCxxQkFDRSxvQkFBQyxvQkFBRDtBQUNFLEVBQUEsUUFBUSxFQUFFLElBRFo7QUFFRSxFQUFBLFlBQVksRUFBQyxxQkFGZjtBQUdFLEVBQUEsZUFBZSxFQUFDO0FBSGxCLEVBREYsQ0FSRixlQWVFLG9CQUFDLFlBQUQscUJBQ0Usb0JBQUMsb0JBQUQ7QUFDRSxFQUFBLFlBQVksRUFBQyxlQURmO0FBRUUsRUFBQSxlQUFlLEVBQUMsa0JBRmxCO0FBR0UsRUFBQSxJQUFJLEVBQUM7QUFIUCxFQURGLENBZkYsZUFzQkUsb0JBQUMsWUFBRCxxQkFDRSxvQkFBQyxvQkFBRDtBQUNFLEVBQUEsWUFBWSxFQUFDLGVBRGY7QUFFRSxFQUFBLGVBQWUsRUFBQyxrQkFGbEI7QUFHRSxFQUFBLElBQUksRUFBQztBQUhQLEVBREYsQ0F0QkYsZUE2QkUsb0JBQUMsWUFBRCxxQkFDRSxvQkFBQyxvQkFBRDtBQUNFLEVBQUEsWUFBWSxFQUFDLGVBRGY7QUFFRSxFQUFBLGVBQWUsRUFBQyxrQkFGbEI7QUFHRSxFQUFBLElBQUksRUFBQztBQUhQLEVBREYsQ0E3QkYsZUFvQ0Usb0JBQUMsWUFBRCxxQkFDRSxvQkFBQyxvQkFBRDtBQUNFLEVBQUEsWUFBWSxFQUFDLHFCQURmO0FBRUUsRUFBQSxlQUFlLEVBQUMsa0JBRmxCO0FBR0UsRUFBQSxRQUFRLEVBQUU7QUFIWixFQURGLENBcENGLGVBMkNFLG9CQUFDLFlBQUQscUJBQ0Usb0JBQUMsb0JBQUQ7QUFDRSxFQUFBLFlBQVksRUFBQyw4QkFEZjtBQUVFLEVBQUEsZUFBZSxFQUFDLGtCQUZsQjtBQUdFLEVBQUEsS0FBSyxFQUFFO0FBSFQsRUFERixDQTNDRixDQURGOztBQXNEQSxNQUFNQyxPQUFPLEdBQUcsSUFBSUMsZ0JBQUosQ0FBZTtBQUM3QkMsRUFBQUEsSUFBSSxFQUFFO0FBRHVCLENBQWYsQ0FBaEI7QUFHQSxNQUFNQyxPQUFPLEdBQUcsSUFBSUYsZ0JBQUosQ0FBZTtBQUM3QkMsRUFBQUEsSUFBSSxFQUNGO0FBRjJCLENBQWYsQ0FBaEI7QUFJQSxNQUFNRSxrQkFBa0IsR0FBRztBQUN6QkMsRUFBQUEsT0FBTyxFQUFFLE1BRGdCO0FBRXpCQyxFQUFBQSxRQUFRLEVBQUUsQ0FGZTtBQUd6QkMsRUFBQUEsTUFBTSxFQUFFLE1BSGlCO0FBSXpCQyxFQUFBQSxTQUFTLEVBQUU7QUFKYyxDQUEzQjs7QUFPQSxNQUFNQyxxQkFBcUIsR0FBRyxtQkFDNUIsb0JBQUMsWUFBRCxxQkFDRTtBQUFLLEVBQUEsS0FBSyxFQUFFTDtBQUFaLGdCQUNFLG9CQUFDLDhCQUFEO0FBQ0UsRUFBQSxZQUFZLEVBQUUsS0FEaEI7QUFFRSxFQUFBLFFBQVEsRUFBRSxLQUZaO0FBR0UsRUFBQSxnQkFBZ0IsRUFBRSxLQUhwQjtBQUlFLEVBQUEsUUFBUSxFQUFFLEtBSlo7QUFLRSxFQUFBLElBQUksRUFBQyxvQkFMUDtBQU1FLEVBQUEsVUFBVSxFQUFFSjtBQU5kLEVBREYsQ0FERixlQVdFO0FBQUssRUFBQSxLQUFLLEVBQUUsRUFBQyxHQUFHSSxrQkFBSjtBQUF3Qk0sSUFBQUEsU0FBUyxFQUFFO0FBQW5DO0FBQVosZ0JBQ0Usb0JBQUMsOEJBQUQ7QUFDRSxFQUFBLFlBQVksRUFBRSxJQURoQjtBQUVFLEVBQUEsUUFBUSxFQUFFLElBRlo7QUFHRSxFQUFBLGdCQUFnQixFQUFFLEtBSHBCO0FBSUUsRUFBQSxRQUFRLEVBQUUsS0FKWjtBQUtFLEVBQUEsSUFBSSxFQUFDLG9CQUxQO0FBTUUsRUFBQSxVQUFVLEVBQUVQO0FBTmQsRUFERixDQVhGLENBREY7O0FBeUJPLE1BQU1RLGlCQUFpQixHQUFHO0FBQy9CQyxFQUFBQSxXQUFXLEVBQUUsYUFEa0I7QUFFL0JDLEVBQUFBLFdBQVcsRUFBRSxFQUZrQjtBQUcvQkMsRUFBQUEsUUFBUSxFQUFFLENBQ1I7QUFDRUMsSUFBQUEsS0FBSyxFQUFFLFdBRFQ7QUFFRUMsSUFBQUEsU0FBUyxFQUFFakI7QUFGYixHQURRLEVBS1I7QUFDRWdCLElBQUFBLEtBQUssRUFBRSxnQkFEVDtBQUVFQyxJQUFBQSxTQUFTLEVBQUVQO0FBRmIsR0FMUTtBQUhxQixDQUExQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCB7VGV4dEJ1ZmZlcn0gZnJvbSAnYXRvbSc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtCbG9ja30gZnJvbSAnLi9CbG9jayc7XHJcbmltcG9ydCB7QXRvbUlucHV0fSBmcm9tICcuL0F0b21JbnB1dCc7XHJcbmltcG9ydCB7QXRvbVRleHRFZGl0b3J9IGZyb20gJy4vQXRvbVRleHRFZGl0b3InO1xyXG5cclxuY29uc3QgQXRvbUlucHV0RXhhbXBsZSA9ICgpOiBSZWFjdC5FbGVtZW50PGFueT4gPT4gKFxyXG4gIDxkaXY+XHJcbiAgICA8QmxvY2s+XHJcbiAgICAgIDxBdG9tSW5wdXRcclxuICAgICAgICBkaXNhYmxlZD17ZmFsc2V9XHJcbiAgICAgICAgaW5pdGlhbFZhbHVlPVwiYXRvbSBpbnB1dFwiXHJcbiAgICAgICAgcGxhY2Vob2xkZXJUZXh0PVwicGxhY2Vob2xkZXIgdGV4dFwiXHJcbiAgICAgIC8+XHJcbiAgICA8L0Jsb2NrPlxyXG4gICAgPEJsb2NrPlxyXG4gICAgICA8QXRvbUlucHV0XHJcbiAgICAgICAgZGlzYWJsZWQ9e3RydWV9XHJcbiAgICAgICAgaW5pdGlhbFZhbHVlPVwiZGlzYWJsZWQgYXRvbSBpbnB1dFwiXHJcbiAgICAgICAgcGxhY2Vob2xkZXJUZXh0PVwicGxhY2Vob2xkZXIgdGV4dFwiXHJcbiAgICAgIC8+XHJcbiAgICA8L0Jsb2NrPlxyXG4gICAgPEJsb2NrPlxyXG4gICAgICA8QXRvbUlucHV0XHJcbiAgICAgICAgaW5pdGlhbFZhbHVlPVwieHMgYXRvbSBpbnB1dFwiXHJcbiAgICAgICAgcGxhY2Vob2xkZXJUZXh0PVwicGxhY2Vob2xkZXIgdGV4dFwiXHJcbiAgICAgICAgc2l6ZT1cInhzXCJcclxuICAgICAgLz5cclxuICAgIDwvQmxvY2s+XHJcbiAgICA8QmxvY2s+XHJcbiAgICAgIDxBdG9tSW5wdXRcclxuICAgICAgICBpbml0aWFsVmFsdWU9XCJzbSBhdG9tIGlucHV0XCJcclxuICAgICAgICBwbGFjZWhvbGRlclRleHQ9XCJwbGFjZWhvbGRlciB0ZXh0XCJcclxuICAgICAgICBzaXplPVwic21cIlxyXG4gICAgICAvPlxyXG4gICAgPC9CbG9jaz5cclxuICAgIDxCbG9jaz5cclxuICAgICAgPEF0b21JbnB1dFxyXG4gICAgICAgIGluaXRpYWxWYWx1ZT1cImxnIGF0b20gaW5wdXRcIlxyXG4gICAgICAgIHBsYWNlaG9sZGVyVGV4dD1cInBsYWNlaG9sZGVyIHRleHRcIlxyXG4gICAgICAgIHNpemU9XCJsZ1wiXHJcbiAgICAgIC8+XHJcbiAgICA8L0Jsb2NrPlxyXG4gICAgPEJsb2NrPlxyXG4gICAgICA8QXRvbUlucHV0XHJcbiAgICAgICAgaW5pdGlhbFZhbHVlPVwidW5zdHlsZWQgYXRvbSBpbnB1dFwiXHJcbiAgICAgICAgcGxhY2Vob2xkZXJUZXh0PVwicGxhY2Vob2xkZXIgdGV4dFwiXHJcbiAgICAgICAgdW5zdHlsZWQ9e3RydWV9XHJcbiAgICAgIC8+XHJcbiAgICA8L0Jsb2NrPlxyXG4gICAgPEJsb2NrPlxyXG4gICAgICA8QXRvbUlucHV0XHJcbiAgICAgICAgaW5pdGlhbFZhbHVlPVwiYXRvbSBpbnB1dCB3aXRoIGN1c3RvbSB3aWR0aFwiXHJcbiAgICAgICAgcGxhY2Vob2xkZXJUZXh0PVwicGxhY2Vob2xkZXIgdGV4dFwiXHJcbiAgICAgICAgd2lkdGg9ezIwMH1cclxuICAgICAgLz5cclxuICAgIDwvQmxvY2s+XHJcbiAgPC9kaXY+XHJcbik7XHJcblxyXG5jb25zdCBidWZmZXIxID0gbmV3IFRleHRCdWZmZXIoe1xyXG4gIHRleHQ6ICcvKipcXG4gKiBIaSFcXG4gKi9cXG5cXG4vLyBJIGFtIGEgVGV4dEJ1ZmZlci5cXG5jb25zdCBhID0gNDI7JyxcclxufSk7XHJcbmNvbnN0IGJ1ZmZlcjIgPSBuZXcgVGV4dEJ1ZmZlcih7XHJcbiAgdGV4dDpcclxuICAgICcvKipcXG4gKiBIaSFcXG4gKi9cXG5cXG4vLyBJIGFtIGEgcmVhZC1vbmx5LCBndXR0ZXItbGVzcyBUZXh0QnVmZmVyLlxcbmNvbnN0IGEgPSA0MjsnLFxyXG59KTtcclxuY29uc3QgZWRpdG9yV3JhcHBlclN0eWxlID0ge1xyXG4gIGRpc3BsYXk6ICdmbGV4JyxcclxuICBmbGV4R3JvdzogMSxcclxuICBoZWlnaHQ6ICcxMmVtJyxcclxuICBib3hTaGFkb3c6ICcwIDAgMjBweCAwIHJnYmEoMCwgMCwgMCwgMC4zKScsXHJcbn07XHJcblxyXG5jb25zdCBBdG9tVGV4dEVkaXRvckV4YW1wbGUgPSAoKTogUmVhY3QuRWxlbWVudDxhbnk+ID0+IChcclxuICA8QmxvY2s+XHJcbiAgICA8ZGl2IHN0eWxlPXtlZGl0b3JXcmFwcGVyU3R5bGV9PlxyXG4gICAgICA8QXRvbVRleHRFZGl0b3JcclxuICAgICAgICBndXR0ZXJIaWRkZW49e2ZhbHNlfVxyXG4gICAgICAgIHJlYWRPbmx5PXtmYWxzZX1cclxuICAgICAgICBzeW5jVGV4dENvbnRlbnRzPXtmYWxzZX1cclxuICAgICAgICBhdXRvR3Jvdz17ZmFsc2V9XHJcbiAgICAgICAgcGF0aD1cImFKYXZhU2NyaXB0RmlsZS5qc1wiXHJcbiAgICAgICAgdGV4dEJ1ZmZlcj17YnVmZmVyMX1cclxuICAgICAgLz5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBzdHlsZT17ey4uLmVkaXRvcldyYXBwZXJTdHlsZSwgbWFyZ2luVG9wOiAnMmVtJ319PlxyXG4gICAgICA8QXRvbVRleHRFZGl0b3JcclxuICAgICAgICBndXR0ZXJIaWRkZW49e3RydWV9XHJcbiAgICAgICAgcmVhZE9ubHk9e3RydWV9XHJcbiAgICAgICAgc3luY1RleHRDb250ZW50cz17ZmFsc2V9XHJcbiAgICAgICAgYXV0b0dyb3c9e2ZhbHNlfVxyXG4gICAgICAgIHBhdGg9XCJhSmF2YVNjcmlwdEZpbGUuanNcIlxyXG4gICAgICAgIHRleHRCdWZmZXI9e2J1ZmZlcjJ9XHJcbiAgICAgIC8+XHJcbiAgICA8L2Rpdj5cclxuICA8L0Jsb2NrPlxyXG4pO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRleHRJbnB1dEV4YW1wbGVzID0ge1xyXG4gIHNlY3Rpb25OYW1lOiAnVGV4dCBJbnB1dHMnLFxyXG4gIGRlc2NyaXB0aW9uOiAnJyxcclxuICBleGFtcGxlczogW1xyXG4gICAge1xyXG4gICAgICB0aXRsZTogJ0F0b21JbnB1dCcsXHJcbiAgICAgIGNvbXBvbmVudDogQXRvbUlucHV0RXhhbXBsZSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIHRpdGxlOiAnQXRvbVRleHRFZGl0b3InLFxyXG4gICAgICBjb21wb25lbnQ6IEF0b21UZXh0RWRpdG9yRXhhbXBsZSxcclxuICAgIH0sXHJcbiAgXSxcclxufTtcclxuIl19