"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Toggle = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _ignoreTextSelectionEvents = _interopRequireDefault(require("./ignoreTextSelectionEvents"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * A toggle component with an input toggle and a label. We restrict the label to a string
 * to ensure this component is pure.
 */
class Toggle extends React.Component {
  constructor(...args) {
    super(...args);

    this._onChange = event => {
      const isToggled = event.target.checked;
      this.props.onChange.call(null, isToggled);
    };
  }

  render() {
    const {
      className,
      disabled,
      label,
      onClick,
      toggled
    } = this.props;
    const text = label === '' ? null : /*#__PURE__*/React.createElement("span", {
      className: "nuclide-ui-toggle-label-text"
    }, " ", label);
    return /*#__PURE__*/React.createElement("label", {
      className: (0, _classnames.default)(className, 'nuclide-ui-toggle-label', {
        'nuclide-ui-toggle-disabled': disabled
      }),
      onClick: onClick && (0, _ignoreTextSelectionEvents.default)(onClick)
    }, /*#__PURE__*/React.createElement("input", {
      checked: toggled,
      className: "input-toggle",
      disabled: disabled,
      onChange: this._onChange,
      type: "checkbox"
    }), text);
  }

}

exports.Toggle = Toggle;
Toggle.defaultProps = {
  disabled: false,

  onClick(event) {}

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1RvZ2dsZS5qcyJdLCJuYW1lcyI6WyJUb2dnbGUiLCJSZWFjdCIsIkNvbXBvbmVudCIsIl9vbkNoYW5nZSIsImV2ZW50IiwiaXNUb2dnbGVkIiwidGFyZ2V0IiwiY2hlY2tlZCIsInByb3BzIiwib25DaGFuZ2UiLCJjYWxsIiwicmVuZGVyIiwiY2xhc3NOYW1lIiwiZGlzYWJsZWQiLCJsYWJlbCIsIm9uQ2xpY2siLCJ0b2dnbGVkIiwidGV4dCIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOztBQUVBOzs7Ozs7OztBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBcUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsTUFBTixTQUFxQkMsS0FBSyxDQUFDQyxTQUEzQixDQUE0QztBQUFBO0FBQUE7O0FBQUEsU0FNakRDLFNBTmlELEdBTXBDQyxLQUFELElBQTZCO0FBQ3ZDLFlBQU1DLFNBQVMsR0FBS0QsS0FBSyxDQUFDRSxNQUFSLENBQXdDQyxPQUExRDtBQUNBLFdBQUtDLEtBQUwsQ0FBV0MsUUFBWCxDQUFvQkMsSUFBcEIsQ0FBeUIsSUFBekIsRUFBK0JMLFNBQS9CO0FBQ0QsS0FUZ0Q7QUFBQTs7QUFXakRNLEVBQUFBLE1BQU0sR0FBZTtBQUNuQixVQUFNO0FBQUNDLE1BQUFBLFNBQUQ7QUFBWUMsTUFBQUEsUUFBWjtBQUFzQkMsTUFBQUEsS0FBdEI7QUFBNkJDLE1BQUFBLE9BQTdCO0FBQXNDQyxNQUFBQTtBQUF0QyxRQUFpRCxLQUFLUixLQUE1RDtBQUNBLFVBQU1TLElBQUksR0FDUkgsS0FBSyxLQUFLLEVBQVYsR0FBZSxJQUFmLGdCQUNFO0FBQU0sTUFBQSxTQUFTLEVBQUM7QUFBaEIsWUFBaURBLEtBQWpELENBRko7QUFJQSx3QkFDRTtBQUNFLE1BQUEsU0FBUyxFQUFFLHlCQUFXRixTQUFYLEVBQXNCLHlCQUF0QixFQUFpRDtBQUMxRCxzQ0FBOEJDO0FBRDRCLE9BQWpELENBRGI7QUFJRSxNQUFBLE9BQU8sRUFBRUUsT0FBTyxJQUFJLHdDQUEwQkEsT0FBMUI7QUFKdEIsb0JBS0U7QUFDRSxNQUFBLE9BQU8sRUFBRUMsT0FEWDtBQUVFLE1BQUEsU0FBUyxFQUFDLGNBRlo7QUFHRSxNQUFBLFFBQVEsRUFBRUgsUUFIWjtBQUlFLE1BQUEsUUFBUSxFQUFFLEtBQUtWLFNBSmpCO0FBS0UsTUFBQSxJQUFJLEVBQUM7QUFMUCxNQUxGLEVBWUdjLElBWkgsQ0FERjtBQWdCRDs7QUFqQ2dEOzs7QUFBdENqQixNLENBQ0prQixZLEdBQTZCO0FBQ2xDTCxFQUFBQSxRQUFRLEVBQUUsS0FEd0I7O0FBRWxDRSxFQUFBQSxPQUFPLENBQUNYLEtBQUQsRUFBUSxDQUFFOztBQUZpQixDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJztcclxuXHJcbmltcG9ydCBpZ25vcmVUZXh0U2VsZWN0aW9uRXZlbnRzIGZyb20gJy4vaWdub3JlVGV4dFNlbGVjdGlvbkV2ZW50cyc7XHJcblxyXG50eXBlIERlZmF1bHRQcm9wcyA9IHtcclxuICBkaXNhYmxlZDogYm9vbGVhbixcclxuICBvbkNsaWNrOiAoZXZlbnQ6IFN5bnRoZXRpY0V2ZW50PD4pID0+IG1peGVkLFxyXG59O1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICBjbGFzc05hbWU/OiBzdHJpbmcsXHJcbiAgdG9nZ2xlZDogYm9vbGVhbixcclxuICBkaXNhYmxlZDogYm9vbGVhbixcclxuICBsYWJlbDogP3N0cmluZyxcclxuICBvbkNoYW5nZTogKGlzVG9nZ2xlZDogYm9vbGVhbikgPT4gbWl4ZWQsXHJcbiAgb25DbGljazogKGV2ZW50OiBTeW50aGV0aWNFdmVudDw+KSA9PiBtaXhlZCxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBBIHRvZ2dsZSBjb21wb25lbnQgd2l0aCBhbiBpbnB1dCB0b2dnbGUgYW5kIGEgbGFiZWwuIFdlIHJlc3RyaWN0IHRoZSBsYWJlbCB0byBhIHN0cmluZ1xyXG4gKiB0byBlbnN1cmUgdGhpcyBjb21wb25lbnQgaXMgcHVyZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBUb2dnbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICBzdGF0aWMgZGVmYXVsdFByb3BzOiBEZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBkaXNhYmxlZDogZmFsc2UsXHJcbiAgICBvbkNsaWNrKGV2ZW50KSB7fSxcclxuICB9O1xyXG5cclxuICBfb25DaGFuZ2UgPSAoZXZlbnQ6IFN5bnRoZXRpY0V2ZW50PD4pID0+IHtcclxuICAgIGNvbnN0IGlzVG9nZ2xlZCA9ICgoZXZlbnQudGFyZ2V0OiBhbnkpOiBIVE1MSW5wdXRFbGVtZW50KS5jaGVja2VkO1xyXG4gICAgdGhpcy5wcm9wcy5vbkNoYW5nZS5jYWxsKG51bGwsIGlzVG9nZ2xlZCk7XHJcbiAgfTtcclxuXHJcbiAgcmVuZGVyKCk6IFJlYWN0Lk5vZGUge1xyXG4gICAgY29uc3Qge2NsYXNzTmFtZSwgZGlzYWJsZWQsIGxhYmVsLCBvbkNsaWNrLCB0b2dnbGVkfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB0ZXh0ID1cclxuICAgICAgbGFiZWwgPT09ICcnID8gbnVsbCA6IChcclxuICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJudWNsaWRlLXVpLXRvZ2dsZS1sYWJlbC10ZXh0XCI+IHtsYWJlbH08L3NwYW4+XHJcbiAgICAgICk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8bGFiZWxcclxuICAgICAgICBjbGFzc05hbWU9e2NsYXNzbmFtZXMoY2xhc3NOYW1lLCAnbnVjbGlkZS11aS10b2dnbGUtbGFiZWwnLCB7XHJcbiAgICAgICAgICAnbnVjbGlkZS11aS10b2dnbGUtZGlzYWJsZWQnOiBkaXNhYmxlZCxcclxuICAgICAgICB9KX1cclxuICAgICAgICBvbkNsaWNrPXtvbkNsaWNrICYmIGlnbm9yZVRleHRTZWxlY3Rpb25FdmVudHMob25DbGljayl9PlxyXG4gICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgY2hlY2tlZD17dG9nZ2xlZH1cclxuICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0LXRvZ2dsZVwiXHJcbiAgICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XHJcbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5fb25DaGFuZ2V9XHJcbiAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgICAge3RleHR9XHJcbiAgICAgIDwvbGFiZWw+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=