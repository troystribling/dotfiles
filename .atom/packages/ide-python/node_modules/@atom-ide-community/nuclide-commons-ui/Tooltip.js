"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tooltip = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// Our custom ref component invokes a callback after updating
// if the child component has changed. We need a custom ref component
// because stateless functional components can't have refs
class RefWrapper extends React.Component {
  constructor(...args) {
    super(...args);
    this._el = null;
  }

  componentDidMount() {
    this._updateElement();
  }

  componentWillUnmount() {
    if (this._el != null) {
      this._el = null;
      this.props.customRef(null);
    }
  }

  _updateElement() {
    const el = _reactDom.default.findDOMNode(this);

    if (el !== this._el) {
      this._el = el;
      this.props.customRef(null);
      this.props.customRef(el);
    }
  }

  componentDidUpdate(prevProps) {
    if (this.props.children !== prevProps.children) {
      this._updateElement();
    }
  }

  render() {
    return React.Children.only(this.props.children);
  }

}

class Tooltip extends React.Component {
  constructor(props) {
    super(props);
    this._tooltip = void 0;
    this._element = void 0;

    this._displayTooltip = element => {
      if (this._tooltip != null) {
        this._tooltip.dispose();
      }

      if (element != null) {
        this._element = element; // $FlowFixMe - HTMLElement is incompatible with Element

        this._tooltip = atom.tooltips.add(element, {
          title: this.props.title || '',
          delay: this.props.delay
        });
      }
    };

    this._element = null;
  }

  componentDidUpdate(prevProps) {
    if (this._element != null && this.props.title !== prevProps.title) {
      this._displayTooltip(this._element);
    }
  }

  render() {
    return /*#__PURE__*/React.createElement(RefWrapper, {
      customRef: this._displayTooltip
    }, this.props.children);
  }

}

exports.Tooltip = Tooltip;
Tooltip.defaultProps = {
  delay: 0
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1Rvb2x0aXAuanMiXSwibmFtZXMiOlsiUmVmV3JhcHBlciIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX2VsIiwiY29tcG9uZW50RGlkTW91bnQiLCJfdXBkYXRlRWxlbWVudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicHJvcHMiLCJjdXN0b21SZWYiLCJlbCIsIlJlYWN0RE9NIiwiZmluZERPTU5vZGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJjaGlsZHJlbiIsInJlbmRlciIsIkNoaWxkcmVuIiwib25seSIsIlRvb2x0aXAiLCJjb25zdHJ1Y3RvciIsIl90b29sdGlwIiwiX2VsZW1lbnQiLCJfZGlzcGxheVRvb2x0aXAiLCJlbGVtZW50IiwiZGlzcG9zZSIsImF0b20iLCJ0b29sdGlwcyIsImFkZCIsInRpdGxlIiwiZGVsYXkiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFZQTs7QUFDQTs7Ozs7Ozs7QUFiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBb0JBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLFVBQU4sU0FBeUJDLEtBQUssQ0FBQ0MsU0FBL0IsQ0FBMEQ7QUFBQTtBQUFBO0FBQUEsU0FDeERDLEdBRHdELEdBQ2xELElBRGtEO0FBQUE7O0FBR3hEQyxFQUFBQSxpQkFBaUIsR0FBUztBQUN4QixTQUFLQyxjQUFMO0FBQ0Q7O0FBRURDLEVBQUFBLG9CQUFvQixHQUFTO0FBQzNCLFFBQUksS0FBS0gsR0FBTCxJQUFZLElBQWhCLEVBQXNCO0FBQ3BCLFdBQUtBLEdBQUwsR0FBVyxJQUFYO0FBQ0EsV0FBS0ksS0FBTCxDQUFXQyxTQUFYLENBQXFCLElBQXJCO0FBQ0Q7QUFDRjs7QUFFREgsRUFBQUEsY0FBYyxHQUFTO0FBQ3JCLFVBQU1JLEVBQUUsR0FBR0Msa0JBQVNDLFdBQVQsQ0FBcUIsSUFBckIsQ0FBWDs7QUFDQSxRQUFJRixFQUFFLEtBQUssS0FBS04sR0FBaEIsRUFBcUI7QUFDbkIsV0FBS0EsR0FBTCxHQUFXTSxFQUFYO0FBQ0EsV0FBS0YsS0FBTCxDQUFXQyxTQUFYLENBQXFCLElBQXJCO0FBQ0EsV0FBS0QsS0FBTCxDQUFXQyxTQUFYLENBQXFCQyxFQUFyQjtBQUNEO0FBQ0Y7O0FBRURHLEVBQUFBLGtCQUFrQixDQUFDQyxTQUFELEVBQW1DO0FBQ25ELFFBQUksS0FBS04sS0FBTCxDQUFXTyxRQUFYLEtBQXdCRCxTQUFTLENBQUNDLFFBQXRDLEVBQWdEO0FBQzlDLFdBQUtULGNBQUw7QUFDRDtBQUNGOztBQUVEVSxFQUFBQSxNQUFNLEdBQWU7QUFDbkIsV0FBT2QsS0FBSyxDQUFDZSxRQUFOLENBQWVDLElBQWYsQ0FBb0IsS0FBS1YsS0FBTCxDQUFXTyxRQUEvQixDQUFQO0FBQ0Q7O0FBL0J1RDs7QUFrQ25ELE1BQU1JLE9BQU4sU0FBc0JqQixLQUFLLENBQUNDLFNBQTVCLENBQTZDO0FBSWxEaUIsRUFBQUEsV0FBVyxDQUFDWixLQUFELEVBQWU7QUFDeEIsVUFBTUEsS0FBTjtBQUR3QixTQUgxQmEsUUFHMEI7QUFBQSxTQUYxQkMsUUFFMEI7O0FBQUEsU0FnQjFCQyxlQWhCMEIsR0FnQlBDLE9BQUQsSUFBMEM7QUFDMUQsVUFBSSxLQUFLSCxRQUFMLElBQWlCLElBQXJCLEVBQTJCO0FBQ3pCLGFBQUtBLFFBQUwsQ0FBY0ksT0FBZDtBQUNEOztBQUVELFVBQUlELE9BQU8sSUFBSSxJQUFmLEVBQXFCO0FBQ25CLGFBQUtGLFFBQUwsR0FBZ0JFLE9BQWhCLENBRG1CLENBRW5COztBQUNBLGFBQUtILFFBQUwsR0FBZ0JLLElBQUksQ0FBQ0MsUUFBTCxDQUFjQyxHQUFkLENBQWtCSixPQUFsQixFQUEyQjtBQUN6Q0ssVUFBQUEsS0FBSyxFQUFFLEtBQUtyQixLQUFMLENBQVdxQixLQUFYLElBQW9CLEVBRGM7QUFFekNDLFVBQUFBLEtBQUssRUFBRSxLQUFLdEIsS0FBTCxDQUFXc0I7QUFGdUIsU0FBM0IsQ0FBaEI7QUFJRDtBQUNGLEtBN0J5Qjs7QUFHeEIsU0FBS1IsUUFBTCxHQUFnQixJQUFoQjtBQUNEOztBQU1EVCxFQUFBQSxrQkFBa0IsQ0FBQ0MsU0FBRCxFQUFtQjtBQUNuQyxRQUFJLEtBQUtRLFFBQUwsSUFBaUIsSUFBakIsSUFBeUIsS0FBS2QsS0FBTCxDQUFXcUIsS0FBWCxLQUFxQmYsU0FBUyxDQUFDZSxLQUE1RCxFQUFtRTtBQUNqRSxXQUFLTixlQUFMLENBQXFCLEtBQUtELFFBQTFCO0FBQ0Q7QUFDRjs7QUFpQkROLEVBQUFBLE1BQU0sR0FBZTtBQUNuQix3QkFDRSxvQkFBQyxVQUFEO0FBQVksTUFBQSxTQUFTLEVBQUUsS0FBS087QUFBNUIsT0FDRyxLQUFLZixLQUFMLENBQVdPLFFBRGQsQ0FERjtBQUtEOztBQXpDaUQ7OztBQUF2Q0ksTyxDQVVKWSxZLEdBQTZCO0FBQ2xDRCxFQUFBQSxLQUFLLEVBQUU7QUFEMkIsQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG50eXBlIERlZmF1bHRQcm9wcyA9IHt8XHJcbiAgZGVsYXk6IG51bWJlcixcclxufH07XHJcblxyXG50eXBlIFByb3BzID0ge3xcclxuICB0aXRsZTogc3RyaW5nLFxyXG4gIGRlbGF5PzogbnVtYmVyLFxyXG4gIGNoaWxkcmVuOiBSZWFjdC5Ob2RlLFxyXG58fTtcclxuXHJcbnR5cGUgUmVmV3JhcHBlclByb3BzID0ge3xcclxuICBjdXN0b21SZWY6IChlbGVtZW50OiBudWxsIHwgRWxlbWVudCB8IFRleHQpID0+IHZvaWQsXHJcbiAgY2hpbGRyZW46IFJlYWN0Lk5vZGUsXHJcbnx9O1xyXG5cclxuLy8gT3VyIGN1c3RvbSByZWYgY29tcG9uZW50IGludm9rZXMgYSBjYWxsYmFjayBhZnRlciB1cGRhdGluZ1xyXG4vLyBpZiB0aGUgY2hpbGQgY29tcG9uZW50IGhhcyBjaGFuZ2VkLiBXZSBuZWVkIGEgY3VzdG9tIHJlZiBjb21wb25lbnRcclxuLy8gYmVjYXVzZSBzdGF0ZWxlc3MgZnVuY3Rpb25hbCBjb21wb25lbnRzIGNhbid0IGhhdmUgcmVmc1xyXG5jbGFzcyBSZWZXcmFwcGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFJlZldyYXBwZXJQcm9wcz4ge1xyXG4gIF9lbCA9IG51bGw7XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fdXBkYXRlRWxlbWVudCgpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fZWwgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9lbCA9IG51bGw7XHJcbiAgICAgIHRoaXMucHJvcHMuY3VzdG9tUmVmKG51bGwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX3VwZGF0ZUVsZW1lbnQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBlbCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKHRoaXMpO1xyXG4gICAgaWYgKGVsICE9PSB0aGlzLl9lbCkge1xyXG4gICAgICB0aGlzLl9lbCA9IGVsO1xyXG4gICAgICB0aGlzLnByb3BzLmN1c3RvbVJlZihudWxsKTtcclxuICAgICAgdGhpcy5wcm9wcy5jdXN0b21SZWYoZWwpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUmVmV3JhcHBlclByb3BzKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5jaGlsZHJlbiAhPT0gcHJldlByb3BzLmNoaWxkcmVuKSB7XHJcbiAgICAgIHRoaXMuX3VwZGF0ZUVsZW1lbnQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcclxuICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5vbmx5KHRoaXMucHJvcHMuY2hpbGRyZW4pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICBfdG9vbHRpcDogSURpc3Bvc2FibGU7XHJcbiAgX2VsZW1lbnQ6IG51bGwgfCBUZXh0IHwgRWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcblxyXG4gICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZGVmYXVsdFByb3BzOiBEZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBkZWxheTogMCxcclxuICB9O1xyXG5cclxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBQcm9wcykge1xyXG4gICAgaWYgKHRoaXMuX2VsZW1lbnQgIT0gbnVsbCAmJiB0aGlzLnByb3BzLnRpdGxlICE9PSBwcmV2UHJvcHMudGl0bGUpIHtcclxuICAgICAgdGhpcy5fZGlzcGxheVRvb2x0aXAodGhpcy5fZWxlbWVudCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZGlzcGxheVRvb2x0aXAgPSAoZWxlbWVudDogbnVsbCB8IEVsZW1lbnQgfCBUZXh0KTogdm9pZCA9PiB7XHJcbiAgICBpZiAodGhpcy5fdG9vbHRpcCAhPSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX3Rvb2x0aXAuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChlbGVtZW50ICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgIC8vICRGbG93Rml4TWUgLSBIVE1MRWxlbWVudCBpcyBpbmNvbXBhdGlibGUgd2l0aCBFbGVtZW50XHJcbiAgICAgIHRoaXMuX3Rvb2x0aXAgPSBhdG9tLnRvb2x0aXBzLmFkZChlbGVtZW50LCB7XHJcbiAgICAgICAgdGl0bGU6IHRoaXMucHJvcHMudGl0bGUgfHwgJycsXHJcbiAgICAgICAgZGVsYXk6IHRoaXMucHJvcHMuZGVsYXksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxSZWZXcmFwcGVyIGN1c3RvbVJlZj17dGhpcy5fZGlzcGxheVRvb2x0aXB9PlxyXG4gICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG4gICAgICA8L1JlZldyYXBwZXI+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iXX0=