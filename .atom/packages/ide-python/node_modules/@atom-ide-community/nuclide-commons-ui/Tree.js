"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = Tree;
exports.TreeList = exports.NestedTreeItem = exports.TreeItem = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _assert = _interopRequireDefault(require("assert"));

var _scrollIntoView = require("./scrollIntoView");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function Tree({
  className,
  style,
  ...props
}) {
  return /*#__PURE__*/React.createElement("ol", _extends({
    className: (0, _classnames.default)('list-tree', className),
    role: "tree",
    style: {
      position: 'relative',
      ...style
    }
  }, props));
}

class TreeItem extends React.Component {
  constructor(...args) {
    super(...args);
    this._liNode = void 0;
    this._handleClick = handleClick.bind(this);
  }

  scrollIntoView() {
    if (this._liNode != null) {
      (0, _scrollIntoView.scrollIntoView)(this._liNode);
    }
  }

  render() {
    const {
      className,
      selected,
      children,
      onMouseDown,
      onMouseEnter,
      onMouseLeave,
      path,
      name,
      title
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      title: title
    }, /*#__PURE__*/React.createElement("li", {
      "aria-selected": selected,
      className: (0, _classnames.default)(className, {
        selected
      }, 'list-item'),
      onMouseDown: onMouseDown,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave,
      "data-path": path,
      "data-name": name,
      onClick: this._handleClick,
      ref: liNode => this._liNode = liNode,
      role: "treeitem",
      tabIndex: selected ? '0' : '-1'
    }, selected && typeof children === 'string' ?
    /*#__PURE__*/
    // String children must be wrapped to receive correct styles when selected.
    React.createElement("span", null, children) : children));
  }

}

exports.TreeItem = TreeItem;

class NestedTreeItem extends React.Component {
  constructor(...args) {
    super(...args);
    this._itemNode = void 0;

    this._handleClick = e => {
      const itemNode = this._itemNode;

      if (itemNode == null) {
        return;
      }

      (0, _assert.default)(e.target instanceof Element);

      if (e.target.closest('.list-item') === itemNode) {
        handleClick.call(this, e);
      }
    };
  }

  render() {
    const {
      className,
      hasFlatChildren,
      selected,
      collapsed,
      title,
      children
    } = this.props;
    return /*#__PURE__*/React.createElement("li", {
      "aria-selected": selected,
      "aria-expanded": !collapsed,
      className: (0, _classnames.default)(className, {
        selected,
        collapsed
      }, 'list-nested-item'),
      onClick: this._handleClick,
      role: "treeitem",
      tabIndex: selected ? '0' : '-1'
    }, title == null ? null : /*#__PURE__*/React.createElement("div", {
      tabIndex: -1,
      className: "native-key-bindings list-item",
      ref: node => this._itemNode = node
    }, title), /*#__PURE__*/React.createElement(TreeList, {
      hasFlatChildren: hasFlatChildren
    }, children));
  }

}

exports.NestedTreeItem = NestedTreeItem;

const TreeList = props =>
/*#__PURE__*/
// $FlowFixMe(>=0.53.0) Flow suppress
React.createElement("ul", {
  className: (0, _classnames.default)(props.className, {
    'has-collapsable-children': props.showArrows,
    'has-flat-children': props.hasFlatChildren
  }, 'list-tree'),
  role: "group"
}, props.children);

exports.TreeList = TreeList;

function handleClick(e) {
  const {
    onSelect,
    onConfirm,
    onTripleClick
  } = this.props;
  const numberOfClicks = e.detail;

  switch (numberOfClicks) {
    case 1:
      onSelect && onSelect(e);
      break;

    case 2:
      onConfirm && onConfirm(e);
      break;

    case 3:
      onTripleClick && onTripleClick(e);
      break;

    default:
      break;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,