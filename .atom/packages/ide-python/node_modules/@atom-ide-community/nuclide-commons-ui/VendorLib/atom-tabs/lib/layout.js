"use strict";

// Generated by CoffeeScript 1.12.2
(function () {
  var itemIsAllowedInPane,
      indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item) return i;
    }

    return -1;
  };

  module.exports = {
    activate: function () {
      this.view = document.createElement('div');
      atom.workspace.getElement().appendChild(this.view);
      return this.view.classList.add('tabs-layout-overlay');
    },
    deactivate: function () {
      var ref;
      return (ref = this.view.parentElement) != null ? ref.removeChild(this.view) : void 0;
    },
    test: {},
    drag: function (e) {
      var coords, item, itemView, pane;
      this.lastCoords = e;
      pane = this.getPaneAt(e);
      itemView = this.getItemViewAt(e);
      item = e.target.item;

      if (pane != null && itemView != null && item && itemIsAllowedInPane(item, pane)) {
        coords = !(this.isOnlyTabInPane(pane, e.target) || pane.getItems().length === 0) ? [e.clientX, e.clientY] : void 0;
        return this.lastSplit = this.updateView(itemView, coords);
      } else {
        return this.disableView();
      }
    },
    end: function (e) {
      var fromPane, item, tab, target, toPane;
      this.disableView();

      if (!(this.lastCoords != null && this.getItemViewAt(this.lastCoords))) {
        return;
      }

      target = this.getPaneAt(this.lastCoords);

      if (target == null) {
        return;
      }

      tab = e.target;
      fromPane = tab.pane;
      item = tab.item;

      if (!itemIsAllowedInPane(item, typeof toPane !== "undefined" && toPane !== null ? toPane : target)) {
        return;
      }

      toPane = function () {
        switch (this.lastSplit) {
          case 'left':
            return target.splitLeft();

          case 'right':
            return target.splitRight();

          case 'up':
            return target.splitUp();

          case 'down':
            return target.splitDown();
        }
      }.call(this);

      if (toPane == null) {
        toPane = target;
      }

      if (toPane === fromPane) {
        return;
      }

      fromPane.moveItemToPane(item, toPane);
      toPane.activateItem(item);
      return toPane.activate();
    },
    getElement: function (arg, selector) {
      var clientX, clientY;
      clientX = arg.clientX, clientY = arg.clientY;

      if (selector == null) {
        selector = '*';
      }

      return document.elementFromPoint(clientX, clientY).closest(selector);
    },
    getItemViewAt: function (coords) {
      return this.test.itemView || this.getElement(coords, '.item-views');
    },
    getPaneAt: function (coords) {
      var ref;
      return this.test.pane || ((ref = this.getElement(this.lastCoords, 'atom-pane')) != null ? ref.getModel() : void 0);
    },
    isOnlyTabInPane: function (pane, tab) {
      return pane.getItems().length === 1 && pane === tab.pane;
    },
    normalizeCoords: function (arg, arg1) {
      var height, left, top, width, x, y;
      left = arg.left, top = arg.top, width = arg.width, height = arg.height;
      x = arg1[0], y = arg1[1];
      return [(x - left) / width, (y - top) / height];
    },
    splitType: function (arg) {
      var x, y;
      x = arg[0], y = arg[1];

      if (x < 1 / 3) {
        return 'left';
      } else if (x > 2 / 3) {
        return 'right';
      } else if (y < 1 / 3) {
        return 'up';
      } else if (y > 2 / 3) {
        return 'down';
      }
    },
    boundsForSplit: function (split) {
      var h, ref, w, x, y;
      return ref = function () {
        switch (split) {
          case 'left':
            return [0, 0, 0.5, 1];

          case 'right':
            return [0.5, 0, 0.5, 1];

          case 'up':
            return [0, 0, 1, 0.5];

          case 'down':
            return [0, 0.5, 1, 0.5];

          default:
            return [0, 0, 1, 1];
        }
      }(), x = ref[0], y = ref[1], w = ref[2], h = ref[3], ref;
    },
    innerBounds: function (arg, arg1) {
      var h, height, left, top, w, width, x, y;
      left = arg.left, top = arg.top, width = arg.width, height = arg.height;
      x = arg1[0], y = arg1[1], w = arg1[2], h = arg1[3];
      left += x * width;
      top += y * height;
      width *= w;
      height *= h;
      return {
        left: left,
        top: top,
        width: width,
        height: height
      };
    },
    updateViewBounds: function (arg) {
      var height, left, top, width;
      left = arg.left, top = arg.top, width = arg.width, height = arg.height;
      this.view.style.left = left + "px";
      this.view.style.top = top + "px";
      this.view.style.width = width + "px";
      return this.view.style.height = height + "px";
    },
    updateView: function (pane, coords) {
      var rect, split;
      this.view.classList.add('visible');
      rect = this.test.rect || pane.getBoundingClientRect();
      split = coords ? this.splitType(this.normalizeCoords(rect, coords)) : void 0;
      this.updateViewBounds(this.innerBounds(rect, this.boundsForSplit(split)));
      return split;
    },
    disableView: function () {
      return this.view.classList.remove('visible');
    }
  };

  itemIsAllowedInPane = function (item, pane) {
    var allowedLocations, container, location, ref;
    allowedLocations = typeof item.getAllowedLocations === "function" ? item.getAllowedLocations() : void 0;

    if (allowedLocations == null) {
      return true;
    }

    container = pane.getContainer();
    location = (ref = typeof container.getLocation === "function" ? container.getLocation() : void 0) != null ? ref : 'center';
    return indexOf.call(allowedLocations, location) >= 0;
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,