"use strict";

// Generated by CoffeeScript 1.12.2
(function () {
  var CompositeDisposable, Disposable, FileIcons, MRUListView, TabBarView, _, layout, ref;

  ref = require('atom'), CompositeDisposable = ref.CompositeDisposable, Disposable = ref.Disposable;
  FileIcons = require('./file-icons');
  layout = require('./layout');
  TabBarView = require('./tab-bar-view');
  MRUListView = require('./mru-list-view');
  _ = require('underscore-plus');
  module.exports = {
    activate: function (state) {
      var base, base1, base2, base3, base4, configKey, keyBindSource, paneContainers, ref1;
      this.subscriptions = new CompositeDisposable();
      layout.activate();
      this.tabBarViews = [];
      this.mruListViews = [];
      keyBindSource = 'tabs package';
      configKey = 'tabs.enableMruTabSwitching';

      this.updateTraversalKeybinds = function () {
        var bindings, disabledBindings;
        bindings = atom.keymaps.findKeyBindings({
          target: document.body,
          keystrokes: 'ctrl-tab'
        });

        if (bindings.length > 1 && bindings[0].source !== keyBindSource) {
          return;
        }

        bindings = atom.keymaps.findKeyBindings({
          target: document.body,
          keystrokes: 'ctrl-shift-tab'
        });

        if (bindings.length > 1 && bindings[0].source !== keyBindSource) {
          return;
        }

        if (atom.config.get(configKey)) {
          return atom.keymaps.removeBindingsFromSource(keyBindSource);
        } else {
          disabledBindings = {
            'body': {
              'ctrl-tab': 'pane:show-next-item',
              'ctrl-tab ^ctrl': 'unset!',
              'ctrl-shift-tab': 'pane:show-previous-item',
              'ctrl-shift-tab ^ctrl': 'unset!'
            }
          };
          return atom.keymaps.add(keyBindSource, disabledBindings, 0);
        }
      };

      this.subscriptions.add(atom.config.observe(configKey, function (_this) {
        return function () {
          return _this.updateTraversalKeybinds();
        };
      }(this)));
      this.subscriptions.add(typeof (base = atom.keymaps).onDidLoadUserKeymap === "function" ? base.onDidLoadUserKeymap(function (_this) {
        return function () {
          return _this.updateTraversalKeybinds();
        };
      }(this)) : void 0);
      this.subscriptions.add(atom.commands.add('atom-workspace', {
        'tabs:close-all-tabs': function (_this) {
          return function () {
            var i, ref1, results, tabBarView;
            ref1 = _this.tabBarViews;
            results = [];

            for (i = ref1.length - 1; i >= 0; i += -1) {
              tabBarView = ref1[i];
              results.push(tabBarView.closeAllTabs());
            }

            return results;
          };
        }(this)
      }));
      paneContainers = {
        center: (ref1 = typeof (base1 = atom.workspace).getCenter === "function" ? base1.getCenter() : void 0) != null ? ref1 : atom.workspace,
        left: typeof (base2 = atom.workspace).getLeftDock === "function" ? base2.getLeftDock() : void 0,
        right: typeof (base3 = atom.workspace).getRightDock === "function" ? base3.getRightDock() : void 0,
        bottom: typeof (base4 = atom.workspace).getBottomDock === "function" ? base4.getBottomDock() : void 0
      };
      return Object.keys(paneContainers).forEach(function (_this) {
        return function (location) {
          var container;
          container = paneContainers[location];

          if (!container) {
            return;
          }

          return _this.subscriptions.add(container.observePanes(function (pane) {
            var mruListView, paneElement, tabBarView;
            tabBarView = new TabBarView(pane, location);
            mruListView = new MRUListView();
            mruListView.initialize(pane);
            paneElement = pane.getElement();
            paneElement.insertBefore(tabBarView.element, paneElement.firstChild);

            _this.tabBarViews.push(tabBarView);

            pane.onDidDestroy(function () {
              return _.remove(_this.tabBarViews, tabBarView);
            });

            _this.mruListViews.push(mruListView);

            return pane.onDidDestroy(function () {
              return _.remove(_this.mruListViews, mruListView);
            });
          }));
        };
      }(this));
    },
    deactivate: function () {
      var i, j, len, len1, mruListView, ref1, ref2, ref3, tabBarView;
      layout.deactivate();
      this.subscriptions.dispose();

      if ((ref1 = this.fileIconsDisposable) != null) {
        ref1.dispose();
      }

      ref2 = this.tabBarViews;

      for (i = 0, len = ref2.length; i < len; i++) {
        tabBarView = ref2[i];
        tabBarView.destroy();
      }

      ref3 = this.mruListViews;

      for (j = 0, len1 = ref3.length; j < len1; j++) {
        mruListView = ref3[j];
        mruListView.destroy();
      }
    },
    consumeFileIcons: function (service) {
      FileIcons.setService(service);
      this.updateFileIcons();
      return new Disposable(function (_this) {
        return function () {
          FileIcons.resetService();
          return _this.updateFileIcons();
        };
      }(this));
    },
    updateFileIcons: function () {
      var i, len, ref1, results, tabBarView, tabView;
      ref1 = this.tabBarViews;
      results = [];

      for (i = 0, len = ref1.length; i < len; i++) {
        tabBarView = ref1[i];
        results.push(function () {
          var j, len1, ref2, results1;
          ref2 = tabBarView.getTabs();
          results1 = [];

          for (j = 0, len1 = ref2.length; j < len1; j++) {
            tabView = ref2[j];
            results1.push(tabView.updateIcon());
          }

          return results1;
        }());
      }

      return results;
    }
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,