"use strict";

// Generated by CoffeeScript 1.12.2
(function () {
  var BrowserWindow, CompositeDisposable, TabBarView, TabView, _, ipcRenderer, isAtomEvent, itemIsAllowed;

  BrowserWindow = null;
  ipcRenderer = require('electron').ipcRenderer;
  CompositeDisposable = require('atom').CompositeDisposable;
  _ = require('underscore-plus');
  TabView = require('./tab-view');

  module.exports = TabBarView = function () {
    function TabBarView(pane1, location1) {
      var addElementCommands, item, j, len, ref;
      this.pane = pane1;
      this.location = location1;
      this.element = document.createElement('ul');
      this.element.classList.add("list-inline");
      this.element.classList.add("tab-bar");
      this.element.classList.add("inset-panel");
      this.element.setAttribute('is', 'atom-tabs');
      this.element.setAttribute("tabindex", -1);
      this.element.setAttribute("location", this.location);
      this.tabs = [];
      this.tabsByElement = new WeakMap();
      this.subscriptions = new CompositeDisposable();
      this.subscriptions.add(atom.commands.add(this.pane.getElement(), {
        'tabs:keep-pending-tab': function (_this) {
          return function () {
            return _this.terminatePendingStates();
          };
        }(this),
        'tabs:close-tab': function (_this) {
          return function () {
            return _this.closeTab(_this.getActiveTab());
          };
        }(this),
        'tabs:close-other-tabs': function (_this) {
          return function () {
            return _this.closeOtherTabs(_this.getActiveTab());
          };
        }(this),
        'tabs:close-tabs-to-right': function (_this) {
          return function () {
            return _this.closeTabsToRight(_this.getActiveTab());
          };
        }(this),
        'tabs:close-tabs-to-left': function (_this) {
          return function () {
            return _this.closeTabsToLeft(_this.getActiveTab());
          };
        }(this),
        'tabs:close-saved-tabs': function (_this) {
          return function () {
            return _this.closeSavedTabs();
          };
        }(this),
        'tabs:close-all-tabs': function (_this) {
          return function (event) {
            event.stopPropagation();
            return _this.closeAllTabs();
          };
        }(this),
        'tabs:open-in-new-window': function (_this) {
          return function () {
            return _this.openInNewWindow();
          };
        }(this)
      }));

      addElementCommands = function (_this) {
        return function (commands) {
          var commandsWithPropagationStopped;
          commandsWithPropagationStopped = {};
          Object.keys(commands).forEach(function (name) {
            return commandsWithPropagationStopped[name] = function (event) {
              event.stopPropagation();
              return commands[name]();
            };
          });
          return _this.subscriptions.add(atom.commands.add(_this.element, commandsWithPropagationStopped));
        };
      }(this);

      addElementCommands({
        'tabs:close-tab': function (_this) {
          return function () {
            return _this.closeTab();
          };
        }(this),
        'tabs:close-other-tabs': function (_this) {
          return function () {
            return _this.closeOtherTabs();
          };
        }(this),
        'tabs:close-tabs-to-right': function (_this) {
          return function () {
            return _this.closeTabsToRight();
          };
        }(this),
        'tabs:close-tabs-to-left': function (_this) {
          return function () {
            return _this.closeTabsToLeft();
          };
        }(this),
        'tabs:close-saved-tabs': function (_this) {
          return function () {
            return _this.closeSavedTabs();
          };
        }(this),
        'tabs:close-all-tabs': function (_this) {
          return function () {
            return _this.closeAllTabs();
          };
        }(this),
        'tabs:split-up': function (_this) {
          return function () {
            return _this.splitTab('splitUp');
          };
        }(this),
        'tabs:split-down': function (_this) {
          return function () {
            return _this.splitTab('splitDown');
          };
        }(this),
        'tabs:split-left': function (_this) {
          return function () {
            return _this.splitTab('splitLeft');
          };
        }(this),
        'tabs:split-right': function (_this) {
          return function () {
            return _this.splitTab('splitRight');
          };
        }(this)
      });
      this.element.addEventListener("mouseenter", this.onMouseEnter.bind(this));
      this.element.addEventListener("mouseleave", this.onMouseLeave.bind(this));
      this.element.addEventListener("dragstart", this.onDragStart.bind(this));
      this.element.addEventListener("dragend", this.onDragEnd.bind(this));
      this.element.addEventListener("dragleave", this.onDragLeave.bind(this));
      this.element.addEventListener("dragover", this.onDragOver.bind(this));
      this.element.addEventListener("drop", this.onDrop.bind(this));
      this.paneContainer = this.pane.getContainer();
      ref = this.pane.getItems();

      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        this.addTabForItem(item);
      }

      this.subscriptions.add(this.pane.onDidDestroy(function (_this) {
        return function () {
          return _this.destroy();
        };
      }(this)));
      this.subscriptions.add(this.pane.onDidAddItem(function (_this) {
        return function (arg) {
          var index, item;
          item = arg.item, index = arg.index;
          return _this.addTabForItem(item, index);
        };
      }(this)));
      this.subscriptions.add(this.pane.onDidMoveItem(function (_this) {
        return function (arg) {
          var item, newIndex;
          item = arg.item, newIndex = arg.newIndex;
          return _this.moveItemTabToIndex(item, newIndex);
        };
      }(this)));
      this.subscriptions.add(this.pane.onDidRemoveItem(function (_this) {
        return function (arg) {
          var item;
          item = arg.item;
          return _this.removeTabForItem(item);
        };
      }(this)));
      this.subscriptions.add(this.pane.onDidChangeActiveItem(function (_this) {
        return function (item) {
          return _this.updateActiveTab();
        };
      }(this)));
      this.subscriptions.add(atom.config.observe('tabs.tabScrolling', this.updateTabScrolling.bind(this)));
      this.subscriptions.add(atom.config.observe('tabs.tabScrollingThreshold', function (_this) {
        return function () {
          return _this.updateTabScrollingThreshold();
        };
      }(this)));
      this.subscriptions.add(atom.config.observe('tabs.alwaysShowTabBar', function (_this) {
        return function () {
          return _this.updateTabBarVisibility();
        };
      }(this)));
      this.updateActiveTab();
      this.element.addEventListener("mousedown", this.onMouseDown.bind(this));
      this.element.addEventListener("dblclick", this.onDoubleClick.bind(this));
      this.onDropOnOtherWindow = this.onDropOnOtherWindow.bind(this);
      ipcRenderer.on('tab:dropped', this.onDropOnOtherWindow);
    }

    TabBarView.prototype.destroy = function () {
      ipcRenderer.removeListener('tab:dropped', this.onDropOnOtherWindow);
      this.subscriptions.dispose();
      return this.element.remove();
    };

    TabBarView.prototype.terminatePendingStates = function () {
      var j, len, ref, tab;
      ref = this.getTabs();

      for (j = 0, len = ref.length; j < len; j++) {
        tab = ref[j];

        if (typeof tab.terminatePendingState === "function") {
          tab.terminatePendingState();
        }
      }
    };

    TabBarView.prototype.addTabForItem = function (item, index) {
      var tabView;
      tabView = new TabView({
        item: item,
        pane: this.pane,
        tabs: this.tabs,
        didClickCloseIcon: function (_this) {
          return function () {
            _this.closeTab(tabView);
          };
        }(this),
        location: this.location
      });

      if (this.isItemMovingBetweenPanes) {
        tabView.terminatePendingState();
      }

      this.tabsByElement.set(tabView.element, tabView);
      this.insertTabAtIndex(tabView, index);

      if (atom.config.get('tabs.addNewTabsAtEnd')) {
        if (!this.isItemMovingBetweenPanes) {
          return this.pane.moveItem(item, this.pane.getItems().length - 1);
        }
      }
    };

    TabBarView.prototype.moveItemTabToIndex = function (item, index) {
      var tab, tabIndex;
      tabIndex = this.tabs.findIndex(function (t) {
        return t.item === item;
      });

      if (tabIndex !== -1) {
        tab = this.tabs[tabIndex];
        tab.element.remove();
        this.tabs.splice(tabIndex, 1);
        return this.insertTabAtIndex(tab, index);
      }
    };

    TabBarView.prototype.insertTabAtIndex = function (tab, index) {
      var followingTab;

      if (index != null) {
        followingTab = this.tabs[index];
      }

      if (followingTab) {
        this.element.insertBefore(tab.element, followingTab.element);
        this.tabs.splice(index, 0, tab);
      } else {
        this.element.appendChild(tab.element);
        this.tabs.push(tab);
      }

      tab.updateTitle();
      return this.updateTabBarVisibility();
    };

    TabBarView.prototype.removeTabForItem = function (item) {
      var j, len, ref, tab, tabIndex;
      tabIndex = this.tabs.findIndex(function (t) {
        return t.item === item;
      });

      if (tabIndex !== -1) {
        tab = this.tabs[tabIndex];
        this.tabs.splice(tabIndex, 1);
        this.tabsByElement["delete"](tab);
        tab.destroy();
      }

      ref = this.getTabs();

      for (j = 0, len = ref.length; j < len; j++) {
        tab = ref[j];
        tab.updateTitle();
      }

      return this.updateTabBarVisibility();
    };

    TabBarView.prototype.updateTabBarVisibility = function () {
      if (!atom.config.get('tabs.alwaysShowTabBar') && !this.shouldAllowDrag()) {
        return this.element.classList.add('hidden');
      } else {
        return this.element.classList.remove('hidden');
      }
    };

    TabBarView.prototype.getTabs = function () {
      return this.tabs.slice();
    };

    TabBarView.prototype.tabAtIndex = function (index) {
      return this.tabs[index];
    };

    TabBarView.prototype.tabForItem = function (item) {
      return this.tabs.find(function (t) {
        return t.item === item;
      });
    };

    TabBarView.prototype.setActiveTab = function (tabView) {
      var ref;

      if (tabView != null && tabView !== this.activeTab) {
        if ((ref = this.activeTab) != null) {
          ref.element.classList.remove('active');
        }

        this.activeTab = tabView;
        this.activeTab.element.classList.add('active');
        return this.activeTab.element.scrollIntoView(false);
      }
    };

    TabBarView.prototype.getActiveTab = function () {
      return this.tabForItem(this.pane.getActiveItem());
    };

    TabBarView.prototype.updateActiveTab = function () {
      return this.setActiveTab(this.tabForItem(this.pane.getActiveItem()));
    };

    TabBarView.prototype.closeTab = function (tab) {
      if (tab == null) {
        tab = this.rightClickedTab;
      }

      if (tab != null) {
        return this.pane.destroyItem(tab.item);
      }
    };

    TabBarView.prototype.openInNewWindow = function (tab) {
      var item, itemURI, pathsToOpen;

      if (tab == null) {
        tab = this.rightClickedTab;
      }

      item = tab != null ? tab.item : void 0;

      if (item == null) {
        return;
      }

      if (typeof item.getURI === 'function') {
        itemURI = item.getURI();
      } else if (typeof item.getPath === 'function') {
        itemURI = item.getPath();
      } else if (typeof item.getUri === 'function') {
        itemURI = item.getUri();
      }

      if (itemURI == null) {
        return;
      }

      this.closeTab(tab);
      pathsToOpen = [atom.project.getPaths(), itemURI].reduce(function (a, b) {
        return a.concat(b);
      }, []);
      return atom.open({
        pathsToOpen: pathsToOpen,
        newWindow: true,
        devMode: atom.devMode,
        safeMode: atom.safeMode
      });
    };

    TabBarView.prototype.splitTab = function (fn) {
      var copiedItem, item, ref;

      if (item = (ref = this.rightClickedTab) != null ? ref.item : void 0) {
        if (copiedItem = this.copyItem(item)) {
          return this.pane[fn]({
            items: [copiedItem]
          });
        }
      }
    };

    TabBarView.prototype.copyItem = function (item) {
      var ref;
      return (ref = typeof item.copy === "function" ? item.copy() : void 0) != null ? ref : atom.deserializers.deserialize(item.serialize());
    };

    TabBarView.prototype.closeOtherTabs = function (active) {
      var j, len, results, tab, tabs;
      tabs = this.getTabs();

      if (active == null) {
        active = this.rightClickedTab;
      }

      if (active == null) {
        return;
      }

      results = [];

      for (j = 0, len = tabs.length; j < len; j++) {
        tab = tabs[j];

        if (tab !== active) {
          results.push(this.closeTab(tab));
        }
      }

      return results;
    };

    TabBarView.prototype.closeTabsToRight = function (active) {
      var i, index, j, len, results, tab, tabs;
      tabs = this.getTabs();

      if (active == null) {
        active = this.rightClickedTab;
      }

      index = tabs.indexOf(active);

      if (index === -1) {
        return;
      }

      results = [];

      for (i = j = 0, len = tabs.length; j < len; i = ++j) {
        tab = tabs[i];

        if (i > index) {
          results.push(this.closeTab(tab));
        }
      }

      return results;
    };

    TabBarView.prototype.closeTabsToLeft = function (active) {
      var i, index, j, len, results, tab, tabs;
      tabs = this.getTabs();

      if (active == null) {
        active = this.rightClickedTab;
      }

      index = tabs.indexOf(active);

      if (index === -1) {
        return;
      }

      results = [];

      for (i = j = 0, len = tabs.length; j < len; i = ++j) {
        tab = tabs[i];

        if (i < index) {
          results.push(this.closeTab(tab));
        }
      }

      return results;
    };

    TabBarView.prototype.closeSavedTabs = function () {
      var base, j, len, ref, results, tab;
      ref = this.getTabs();
      results = [];

      for (j = 0, len = ref.length; j < len; j++) {
        tab = ref[j];

        if (!(typeof (base = tab.item).isModified === "function" ? base.isModified() : void 0)) {
          results.push(this.closeTab(tab));
        } else {
          results.push(void 0);
        }
      }

      return results;
    };

    TabBarView.prototype.closeAllTabs = function () {
      var j, len, ref, results, tab;
      ref = this.getTabs();
      results = [];

      for (j = 0, len = ref.length; j < len; j++) {
        tab = ref[j];
        results.push(this.closeTab(tab));
      }

      return results;
    };

    TabBarView.prototype.getWindowId = function () {
      return this.windowId != null ? this.windowId : this.windowId = atom.getCurrentWindow().id;
    };

    TabBarView.prototype.shouldAllowDrag = function () {
      return this.paneContainer.getPanes().length > 1 || this.pane.getItems().length > 1;
    };

    TabBarView.prototype.onDragStart = function (event) {
      var item, itemURI, j, len, location, paneIndex, ref, ref1, ref2, ref3, tabIndex;
      this.draggedTab = this.tabForElement(event.target);

      if (!this.draggedTab) {
        return;
      }

      event.dataTransfer.setData('atom-event', 'true');
      this.draggedTab.element.classList.add('is-dragging');
      this.draggedTab.destroyTooltip();
      tabIndex = this.tabs.indexOf(this.draggedTab);
      event.dataTransfer.setData('sortable-index', tabIndex);
      paneIndex = this.paneContainer.getPanes().indexOf(this.pane);
      event.dataTransfer.setData('from-pane-index', paneIndex);
      event.dataTransfer.setData('from-pane-id', this.pane.id);
      event.dataTransfer.setData('from-window-id', this.getWindowId());
      item = this.pane.getItems()[this.tabs.indexOf(this.draggedTab)];

      if (item == null) {
        return;
      }

      if (typeof item.getURI === 'function') {
        itemURI = (ref = item.getURI()) != null ? ref : '';
      } else if (typeof item.getPath === 'function') {
        itemURI = (ref1 = item.getPath()) != null ? ref1 : '';
      } else if (typeof item.getUri === 'function') {
        itemURI = (ref2 = item.getUri()) != null ? ref2 : '';
      }

      if (typeof item.getAllowedLocations === 'function') {
        ref3 = item.getAllowedLocations();

        for (j = 0, len = ref3.length; j < len; j++) {
          location = ref3[j];
          event.dataTransfer.setData("allowed-location-" + location, 'true');
        }
      } else {
        event.dataTransfer.setData('allow-all-locations', 'true');
      }

      if (itemURI != null) {
        event.dataTransfer.setData('text/plain', itemURI);

        if (process.platform === 'darwin') {
          if (!this.uriHasProtocol(itemURI)) {
            itemURI = "file://" + itemURI;
          }

          event.dataTransfer.setData('text/uri-list', itemURI);
        }

        if ((typeof item.isModified === "function" ? item.isModified() : void 0) && item.getText != null) {
          event.dataTransfer.setData('has-unsaved-changes', 'true');
          return event.dataTransfer.setData('modified-text', item.getText());
        }
      }
    };

    TabBarView.prototype.uriHasProtocol = function (uri) {
      var error;

      try {
        return require('url').parse(uri).protocol != null;
      } catch (error1) {
        error = error1;
        return false;
      }
    };

    TabBarView.prototype.onDragLeave = function (event) {
      return this.removePlaceholder();
    };

    TabBarView.prototype.onDragEnd = function (event) {
      if (!this.tabForElement(event.target)) {
        return;
      }

      return this.clearDropTarget();
    };

    TabBarView.prototype.onDragOver = function (event) {
      var newDropTargetIndex, placeholder, sibling, tab, tabs;

      if (!isAtomEvent(event)) {
        event.preventDefault();
        event.stopPropagation();
        return;
      }

      event.preventDefault();
      newDropTargetIndex = this.getDropTargetIndex(event);

      if (newDropTargetIndex == null) {
        return;
      }

      if (!itemIsAllowed(event, this.location)) {
        return;
      }

      this.removeDropTargetClasses();
      tabs = this.getTabs();
      placeholder = this.getPlaceholder();

      if (placeholder == null) {
        return;
      }

      if (newDropTargetIndex < tabs.length) {
        tab = tabs[newDropTargetIndex];
        tab.element.classList.add('is-drop-target');
        return tab.element.parentElement.insertBefore(placeholder, tab.element);
      } else {
        if (tab = tabs[newDropTargetIndex - 1]) {
          tab.element.classList.add('drop-target-is-after');

          if (sibling = tab.element.nextSibling) {
            return tab.element.parentElement.insertBefore(placeholder, sibling);
          } else {
            return tab.element.parentElement.appendChild(placeholder);
          }
        }
      }
    };

    TabBarView.prototype.onDropOnOtherWindow = function (fromPaneId, fromItemIndex) {
      var itemToRemove;

      if (this.pane.id === fromPaneId) {
        if (itemToRemove = this.pane.getItems()[fromItemIndex]) {
          this.pane.destroyItem(itemToRemove);
        }
      }

      return this.clearDropTarget();
    };

    TabBarView.prototype.clearDropTarget = function () {
      var ref, ref1;

      if ((ref = this.draggedTab) != null) {
        ref.element.classList.remove('is-dragging');
      }

      if ((ref1 = this.draggedTab) != null) {
        ref1.updateTooltip();
      }

      this.draggedTab = null;
      this.removeDropTargetClasses();
      return this.removePlaceholder();
    };

    TabBarView.prototype.onDrop = function (event) {
      var droppedURI, fromIndex, fromPane, fromPaneId, fromPaneIndex, fromWindowId, hasUnsavedChanges, item, modifiedText, toIndex, toPane;
      event.preventDefault();

      if (event.dataTransfer.getData('atom-event') !== 'true') {
        return;
      }

      fromWindowId = parseInt(event.dataTransfer.getData('from-window-id'));
      fromPaneId = parseInt(event.dataTransfer.getData('from-pane-id'));
      fromIndex = parseInt(event.dataTransfer.getData('sortable-index'));
      fromPaneIndex = parseInt(event.dataTransfer.getData('from-pane-index'));
      hasUnsavedChanges = event.dataTransfer.getData('has-unsaved-changes') === 'true';
      modifiedText = event.dataTransfer.getData('modified-text');
      toIndex = this.getDropTargetIndex(event);
      toPane = this.pane;
      this.clearDropTarget();

      if (!itemIsAllowed(event, this.location)) {
        return;
      }

      if (fromWindowId === this.getWindowId()) {
        fromPane = this.paneContainer.getPanes()[fromPaneIndex];

        if ((fromPane != null ? fromPane.id : void 0) !== fromPaneId) {
          fromPane = Array.from(document.querySelectorAll('atom-pane')).map(function (paneEl) {
            return paneEl.model;
          }).find(function (pane) {
            return pane.id === fromPaneId;
          });
        }

        item = fromPane.getItems()[fromIndex];

        if (item != null) {
          return this.moveItemBetweenPanes(fromPane, fromIndex, toPane, toIndex, item);
        }
      } else {
        droppedURI = event.dataTransfer.getData('text/plain');
        atom.workspace.open(droppedURI).then(function (_this) {
          return function (item) {
            var activeItemIndex, activePane, browserWindow;
            activePane = atom.workspace.getActivePane();
            activeItemIndex = activePane.getItems().indexOf(item);

            _this.moveItemBetweenPanes(activePane, activeItemIndex, toPane, toIndex, item);

            if (hasUnsavedChanges) {
              if (typeof item.setText === "function") {
                item.setText(modifiedText);
              }
            }

            if (!isNaN(fromWindowId)) {
              browserWindow = _this.browserWindowForId(fromWindowId);
              return browserWindow != null ? browserWindow.webContents.send('tab:dropped', fromPaneId, fromIndex) : void 0;
            }
          };
        }(this));
        return atom.focus();
      }
    };

    TabBarView.prototype.onMouseWheel = function (event) {
      if (event.shiftKey) {
        return;
      }

      if (this.wheelDelta == null) {
        this.wheelDelta = 0;
      }

      this.wheelDelta += event.wheelDeltaY;

      if (this.wheelDelta <= -this.tabScrollingThreshold) {
        this.wheelDelta = 0;
        return this.pane.activateNextItem();
      } else if (this.wheelDelta >= this.tabScrollingThreshold) {
        this.wheelDelta = 0;
        return this.pane.activatePreviousItem();
      }
    };

    TabBarView.prototype.onMouseDown = function (event) {
      var ref, tab;
      tab = this.tabForElement(event.target);

      if (!tab) {
        return;
      }

      if (event.which === 3 || event.which === 1 && event.ctrlKey === true) {
        if ((ref = this.rightClickedTab) != null) {
          ref.element.classList.remove('right-clicked');
        }

        this.rightClickedTab = tab;
        this.rightClickedTab.element.classList.add('right-clicked');
        return event.preventDefault();
      } else if (event.which === 1 && !event.target.classList.contains('close-icon')) {
        return setImmediate(function (_this) {
          return function () {
            _this.pane.activateItem(tab.item);

            if (!_this.pane.isDestroyed()) {
              return _this.pane.activate();
            }
          };
        }(this));
      } else if (event.which === 2) {
        this.pane.destroyItem(tab.item);
        return event.preventDefault();
      }
    };

    TabBarView.prototype.onDoubleClick = function (event) {
      var base, tab;

      if (tab = this.tabForElement(event.target)) {
        return typeof (base = tab.item).terminatePendingState === "function" ? base.terminatePendingState() : void 0;
      } else if (event.target === this.element) {
        atom.commands.dispatch(this.element, 'application:new-file');
        return event.preventDefault();
      }
    };

    TabBarView.prototype.updateTabScrollingThreshold = function () {
      return this.tabScrollingThreshold = atom.config.get('tabs.tabScrollingThreshold');
    };

    TabBarView.prototype.updateTabScrolling = function (value) {
      if (value === 'platform') {
        this.tabScrolling = process.platform === 'linux';
      } else {
        this.tabScrolling = value;
      }

      this.tabScrollingThreshold = atom.config.get('tabs.tabScrollingThreshold');

      if (this.tabScrolling) {
        return this.element.addEventListener('mousewheel', this.onMouseWheel.bind(this));
      } else {
        return this.element.removeEventListener('mousewheel', this.onMouseWheel.bind(this));
      }
    };

    TabBarView.prototype.browserWindowForId = function (id) {
      if (BrowserWindow == null) {
        BrowserWindow = require('electron').remote.BrowserWindow;
      }

      return BrowserWindow.fromId(id);
    };

    TabBarView.prototype.moveItemBetweenPanes = function (fromPane, fromIndex, toPane, toIndex, item) {
      try {
        if (toPane === fromPane) {
          if (fromIndex < toIndex) {
            toIndex--;
          }

          toPane.moveItem(item, toIndex);
        } else {
          this.isItemMovingBetweenPanes = true;
          fromPane.moveItemToPane(item, toPane, toIndex--);
        }

        toPane.activateItem(item);
        return toPane.activate();
      } finally {
        this.isItemMovingBetweenPanes = false;
      }
    };

    TabBarView.prototype.removeDropTargetClasses = function () {
      var dropTarget, j, k, len, len1, ref, ref1, results, workspaceElement;
      workspaceElement = atom.workspace.getElement();
      ref = workspaceElement.querySelectorAll('.tab-bar .is-drop-target');

      for (j = 0, len = ref.length; j < len; j++) {
        dropTarget = ref[j];
        dropTarget.classList.remove('is-drop-target');
      }

      ref1 = workspaceElement.querySelectorAll('.tab-bar .drop-target-is-after');
      results = [];

      for (k = 0, len1 = ref1.length; k < len1; k++) {
        dropTarget = ref1[k];
        results.push(dropTarget.classList.remove('drop-target-is-after'));
      }

      return results;
    };

    TabBarView.prototype.getDropTargetIndex = function (event) {
      var elementCenter, elementIndex, left, ref, tab, tabs, target, width;
      target = event.target;

      if (this.isPlaceholder(target)) {
        return;
      }

      tabs = this.getTabs();
      tab = this.tabForElement(target);

      if (tab == null) {
        tab = tabs[tabs.length - 1];
      }

      if (tab == null) {
        return 0;
      }

      ref = tab.element.getBoundingClientRect(), left = ref.left, width = ref.width;
      elementCenter = left + width / 2;
      elementIndex = tabs.indexOf(tab);

      if (event.pageX < elementCenter) {
        return elementIndex;
      } else {
        return elementIndex + 1;
      }
    };

    TabBarView.prototype.getPlaceholder = function () {
      if (this.placeholderEl != null) {
        return this.placeholderEl;
      }

      this.placeholderEl = document.createElement("li");
      this.placeholderEl.classList.add("placeholder");
      return this.placeholderEl;
    };

    TabBarView.prototype.removePlaceholder = function () {
      var ref;

      if ((ref = this.placeholderEl) != null) {
        ref.remove();
      }

      return this.placeholderEl = null;
    };

    TabBarView.prototype.isPlaceholder = function (element) {
      return element.classList.contains('placeholder');
    };

    TabBarView.prototype.onMouseEnter = function () {
      var j, len, ref, tab, width;
      ref = this.getTabs();

      for (j = 0, len = ref.length; j < len; j++) {
        tab = ref[j];
        width = tab.element.getBoundingClientRect().width;
        tab.element.style.maxWidth = width.toFixed(2) + 'px';
      }
    };

    TabBarView.prototype.onMouseLeave = function () {
      var j, len, ref, tab;
      ref = this.getTabs();

      for (j = 0, len = ref.length; j < len; j++) {
        tab = ref[j];
        tab.element.style.maxWidth = '';
      }
    };

    TabBarView.prototype.tabForElement = function (element) {
      var currentElement, tab;
      currentElement = element;

      while (currentElement != null) {
        if (tab = this.tabsByElement.get(currentElement)) {
          return tab;
        } else {
          currentElement = currentElement.parentElement;
        }
      }
    };

    return TabBarView;
  }();

  isAtomEvent = function (event) {
    var item, j, len, ref;
    ref = event.dataTransfer.items;

    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];

      if (item.type === 'atom-event') {
        return true;
      }
    }

    return false;
  };

  itemIsAllowed = function (event, location) {
    var item, j, len, ref;
    ref = event.dataTransfer.items;

    for (j = 0, len = ref.length; j < len; j++) {
      item = ref[j];

      if (item.type === 'allow-all-locations' || item.type === "allowed-location-" + location) {
        return true;
      }
    }

    return false;
  };
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,