"use strict";

// Generated by CoffeeScript 1.12.2
(function () {
  var CompositeDisposable,
      Disposable,
      FileIcons,
      TabView,
      layout,
      path,
      ref,
      slice = [].slice;
  path = require('path');
  ref = require('atom'), Disposable = ref.Disposable, CompositeDisposable = ref.CompositeDisposable;
  FileIcons = require('./file-icons');
  layout = require('./layout');

  module.exports = TabView = function () {
    function TabView(arg) {
      var base, closeIcon, didClickCloseIcon, location;
      this.item = arg.item, this.pane = arg.pane, didClickCloseIcon = arg.didClickCloseIcon, this.tabs = arg.tabs, location = arg.location;

      if (typeof this.item.getPath === 'function') {
        this.path = this.item.getPath();
      }

      this.element = document.createElement('li');
      this.element.setAttribute('is', 'tabs-tab');

      if (['TextEditor', 'TestView'].indexOf(this.item.constructor.name) > -1) {
        this.element.classList.add('texteditor');
      }

      this.element.classList.add('tab', 'sortable');
      this.itemTitle = document.createElement('div');
      this.itemTitle.classList.add('title');
      this.element.appendChild(this.itemTitle);

      if (location === 'center' || !(typeof (base = this.item).isPermanentDockItem === "function" ? base.isPermanentDockItem() : void 0)) {
        closeIcon = document.createElement('div');
        closeIcon.classList.add('close-icon');
        closeIcon.onclick = didClickCloseIcon;
        this.element.appendChild(closeIcon);
      }

      this.subscriptions = new CompositeDisposable();
      this.handleEvents();
      this.updateDataAttributes();
      this.updateTitle();
      this.updateIcon();
      this.updateModifiedStatus();
      this.setupTooltip();
      layout.activate();

      if (this.isItemPending()) {
        this.itemTitle.classList.add('temp');
        this.element.classList.add('pending-tab');
      }

      this.element.ondrag = function (e) {
        return layout.drag(e);
      };

      this.element.ondragend = function (e) {
        return layout.end(e);
      };

      this.element.pane = this.pane;
      this.element.item = this.item;
      this.element.itemTitle = this.itemTitle;
      this.element.path = this.path;
    }

    TabView.prototype.handleEvents = function () {
      var base, iconChangedHandler, modifiedHandler, onDidChangeIconDisposable, onDidChangeModifiedDisposable, onDidChangePathDisposable, onDidChangeTitleDisposable, onDidSaveDisposable, onDidTerminatePendingStateDisposable, pathChangedHandler, titleChangedHandler;

      titleChangedHandler = function (_this) {
        return function () {
          return _this.updateTitle();
        };
      }(this);

      this.subscriptions.add(this.pane.onDidDestroy(function (_this) {
        return function () {
          return _this.destroy();
        };
      }(this)));

      if (typeof this.pane.onItemDidTerminatePendingState === 'function') {
        this.subscriptions.add(this.pane.onItemDidTerminatePendingState(function (_this) {
          return function (item) {
            if (item === _this.item) {
              return _this.clearPending();
            }
          };
        }(this)));
      } else if (typeof this.item.onDidTerminatePendingState === 'function') {
        onDidTerminatePendingStateDisposable = this.item.onDidTerminatePendingState(function (_this) {
          return function () {
            return _this.clearPending();
          };
        }(this));

        if (Disposable.isDisposable(onDidTerminatePendingStateDisposable)) {
          this.subscriptions.add(onDidTerminatePendingStateDisposable);
        } else {
          console.warn("::onDidTerminatePendingState does not return a valid Disposable!", this.item);
        }
      }

      if (typeof this.item.onDidChangeTitle === 'function') {
        onDidChangeTitleDisposable = this.item.onDidChangeTitle(titleChangedHandler);

        if (Disposable.isDisposable(onDidChangeTitleDisposable)) {
          this.subscriptions.add(onDidChangeTitleDisposable);
        } else {
          console.warn("::onDidChangeTitle does not return a valid Disposable!", this.item);
        }
      } else if (typeof this.item.on === 'function') {
        this.item.on('title-changed', titleChangedHandler);
        this.subscriptions.add({
          dispose: function (_this) {
            return function () {
              var base;
              return typeof (base = _this.item).off === "function" ? base.off('title-changed', titleChangedHandler) : void 0;
            };
          }(this)
        });
      }

      pathChangedHandler = function (_this) {
        return function (path1) {
          _this.path = path1;

          _this.updateDataAttributes();

          _this.updateTitle();

          return _this.updateTooltip();
        };
      }(this);

      if (typeof this.item.onDidChangePath === 'function') {
        onDidChangePathDisposable = this.item.onDidChangePath(pathChangedHandler);

        if (Disposable.isDisposable(onDidChangePathDisposable)) {
          this.subscriptions.add(onDidChangePathDisposable);
        } else {
          console.warn("::onDidChangePath does not return a valid Disposable!", this.item);
        }
      } else if (typeof this.item.on === 'function') {
        this.item.on('path-changed', pathChangedHandler);
        this.subscriptions.add({
          dispose: function (_this) {
            return function () {
              var base;
              return typeof (base = _this.item).off === "function" ? base.off('path-changed', pathChangedHandler) : void 0;
            };
          }(this)
        });
      }

      iconChangedHandler = function (_this) {
        return function () {
          return _this.updateIcon();
        };
      }(this);

      if (typeof this.item.onDidChangeIcon === 'function') {
        onDidChangeIconDisposable = typeof (base = this.item).onDidChangeIcon === "function" ? base.onDidChangeIcon(function (_this) {
          return function () {
            return _this.updateIcon();
          };
        }(this)) : void 0;

        if (Disposable.isDisposable(onDidChangeIconDisposable)) {
          this.subscriptions.add(onDidChangeIconDisposable);
        } else {
          console.warn("::onDidChangeIcon does not return a valid Disposable!", this.item);
        }
      } else if (typeof this.item.on === 'function') {
        this.item.on('icon-changed', iconChangedHandler);
        this.subscriptions.add({
          dispose: function (_this) {
            return function () {
              var base1;
              return typeof (base1 = _this.item).off === "function" ? base1.off('icon-changed', iconChangedHandler) : void 0;
            };
          }(this)
        });
      }

      modifiedHandler = function (_this) {
        return function () {
          return _this.updateModifiedStatus();
        };
      }(this);

      if (typeof this.item.onDidChangeModified === 'function') {
        onDidChangeModifiedDisposable = this.item.onDidChangeModified(modifiedHandler);

        if (Disposable.isDisposable(onDidChangeModifiedDisposable)) {
          this.subscriptions.add(onDidChangeModifiedDisposable);
        } else {
          console.warn("::onDidChangeModified does not return a valid Disposable!", this.item);
        }
      } else if (typeof this.item.on === 'function') {
        this.item.on('modified-status-changed', modifiedHandler);
        this.subscriptions.add({
          dispose: function (_this) {
            return function () {
              var base1;
              return typeof (base1 = _this.item).off === "function" ? base1.off('modified-status-changed', modifiedHandler) : void 0;
            };
          }(this)
        });
      }

      if (typeof this.item.onDidSave === 'function') {
        onDidSaveDisposable = this.item.onDidSave(function (_this) {
          return function (event) {
            _this.terminatePendingState();

            if (event.path !== _this.path) {
              _this.path = event.path;

              if (atom.config.get('tabs.enableVcsColoring')) {
                return _this.setupVcsStatus();
              }
            }
          };
        }(this));

        if (Disposable.isDisposable(onDidSaveDisposable)) {
          this.subscriptions.add(onDidSaveDisposable);
        } else {
          console.warn("::onDidSave does not return a valid Disposable!", this.item);
        }
      }

      this.subscriptions.add(atom.config.observe('tabs.showIcons', function (_this) {
        return function () {
          return _this.updateIconVisibility();
        };
      }(this)));
      return this.subscriptions.add(atom.config.observe('tabs.enableVcsColoring', function (_this) {
        return function (isEnabled) {
          if (isEnabled && _this.path != null) {
            return _this.setupVcsStatus();
          } else {
            return _this.unsetVcsStatus();
          }
        };
      }(this)));
    };

    TabView.prototype.setupTooltip = function () {
      var onMouseEnter;

      onMouseEnter = function (_this) {
        return function () {
          _this.mouseEnterSubscription.dispose();

          _this.hasBeenMousedOver = true;

          _this.updateTooltip();

          return _this.element.dispatchEvent(new CustomEvent('mouseenter', {
            bubbles: true
          }));
        };
      }(this);

      this.mouseEnterSubscription = {
        dispose: function (_this) {
          return function () {
            _this.element.removeEventListener('mouseenter', onMouseEnter);

            return _this.mouseEnterSubscription = null;
          };
        }(this)
      };
      return this.element.addEventListener('mouseenter', onMouseEnter);
    };

    TabView.prototype.updateTooltip = function () {
      if (!this.hasBeenMousedOver) {
        return;
      }

      this.destroyTooltip();

      if (this.path) {
        return this.tooltip = atom.tooltips.add(this.element, {
          title: this.path,
          html: false,
          delay: {
            show: 1000,
            hide: 100
          },
          placement: 'bottom'
        });
      }
    };

    TabView.prototype.destroyTooltip = function () {
      var ref1;

      if (!this.hasBeenMousedOver) {
        return;
      }

      return (ref1 = this.tooltip) != null ? ref1.dispose() : void 0;
    };

    TabView.prototype.destroy = function () {
      var ref1, ref2, ref3;

      if ((ref1 = this.subscriptions) != null) {
        ref1.dispose();
      }

      if ((ref2 = this.mouseEnterSubscription) != null) {
        ref2.dispose();
      }

      if ((ref3 = this.repoSubscriptions) != null) {
        ref3.dispose();
      }

      this.destroyTooltip();
      return this.element.remove();
    };

    TabView.prototype.updateDataAttributes = function () {
      var itemClass, ref1;

      if (this.path) {
        this.itemTitle.dataset.name = path.basename(this.path);
        this.itemTitle.dataset.path = this.path;
      } else {
        delete this.itemTitle.dataset.name;
        delete this.itemTitle.dataset.path;
      }

      if (itemClass = (ref1 = this.item.constructor) != null ? ref1.name : void 0) {
        return this.element.dataset.type = itemClass;
      } else {
        return delete this.element.dataset.type;
      }
    };

    TabView.prototype.updateTitle = function (arg) {
      var base, base1, i, len, ref1, ref2, ref3, ref4, tab, title, updateSiblings, useLongTitle;
      ref1 = arg != null ? arg : {}, updateSiblings = ref1.updateSiblings, useLongTitle = ref1.useLongTitle;

      if (this.updatingTitle) {
        return;
      }

      this.updatingTitle = true;

      if (updateSiblings === false) {
        title = this.item.getTitle();

        if (useLongTitle) {
          title = (ref2 = typeof (base = this.item).getLongTitle === "function" ? base.getLongTitle() : void 0) != null ? ref2 : title;
        }

        this.itemTitle.textContent = title;
      } else {
        title = this.item.getTitle();
        useLongTitle = false;
        ref3 = this.tabs;

        for (i = 0, len = ref3.length; i < len; i++) {
          tab = ref3[i];

          if (tab !== this) {
            if (tab.item.getTitle() === title) {
              tab.updateTitle({
                updateSiblings: false,
                useLongTitle: true
              });
              useLongTitle = true;
            }
          }
        }

        if (useLongTitle) {
          title = (ref4 = typeof (base1 = this.item).getLongTitle === "function" ? base1.getLongTitle() : void 0) != null ? ref4 : title;
        }

        this.itemTitle.textContent = title;
      }

      return this.updatingTitle = false;
    };

    TabView.prototype.updateIcon = function () {
      var base, names, ref1, ref2;

      if (this.iconName) {
        names = !Array.isArray(this.iconName) ? this.iconName.split(/\s+/g) : this.iconName;
        (ref1 = this.itemTitle.classList).remove.apply(ref1, ['icon', "icon-" + names[0]].concat(slice.call(names)));
      }

      if (this.iconName = typeof (base = this.item).getIconName === "function" ? base.getIconName() : void 0) {
        return this.itemTitle.classList.add('icon', "icon-" + this.iconName);
      } else if (this.path != null && (this.iconName = FileIcons.getService().iconClassForPath(this.path, "tabs"))) {
        if (!Array.isArray(names = this.iconName)) {
          names = names.toString().split(/\s+/g);
        }

        return (ref2 = this.itemTitle.classList).add.apply(ref2, ['icon'].concat(slice.call(names)));
      }
    };

    TabView.prototype.isItemPending = function () {
      if (this.pane.getPendingItem != null) {
        return this.pane.getPendingItem() === this.item;
      } else if (this.item.isPending != null) {
        return this.item.isPending();
      }
    };

    TabView.prototype.terminatePendingState = function () {
      if (this.pane.clearPendingItem != null) {
        if (this.pane.getPendingItem() === this.item) {
          return this.pane.clearPendingItem();
        }
      } else if (this.item.terminatePendingState != null) {
        return this.item.terminatePendingState();
      }
    };

    TabView.prototype.clearPending = function () {
      this.itemTitle.classList.remove('temp');
      return this.element.classList.remove('pending-tab');
    };

    TabView.prototype.updateIconVisibility = function () {
      if (atom.config.get('tabs.showIcons')) {
        return this.itemTitle.classList.remove('hide-icon');
      } else {
        return this.itemTitle.classList.add('hide-icon');
      }
    };

    TabView.prototype.updateModifiedStatus = function () {
      var base;

      if (typeof (base = this.item).isModified === "function" ? base.isModified() : void 0) {
        if (!this.isModified) {
          this.element.classList.add('modified');
        }

        return this.isModified = true;
      } else {
        if (this.isModified) {
          this.element.classList.remove('modified');
        }

        return this.isModified = false;
      }
    };

    TabView.prototype.setupVcsStatus = function () {
      if (this.path == null) {
        return;
      }

      return this.repoForPath(this.path).then(function (_this) {
        return function (repo) {
          _this.subscribeToRepo(repo);

          return _this.updateVcsStatus(repo);
        };
      }(this));
    };

    TabView.prototype.subscribeToRepo = function (repo) {
      var ref1;

      if (repo == null) {
        return;
      }

      if ((ref1 = this.repoSubscriptions) != null) {
        ref1.dispose();
      }

      this.repoSubscriptions = new CompositeDisposable();
      this.repoSubscriptions.add(repo.onDidChangeStatus(function (_this) {
        return function (event) {
          if (event.path === _this.path) {
            return _this.updateVcsStatus(repo, event.pathStatus);
          }
        };
      }(this)));
      return this.repoSubscriptions.add(repo.onDidChangeStatuses(function (_this) {
        return function () {
          return _this.updateVcsStatus(repo);
        };
      }(this)));
    };

    TabView.prototype.repoForPath = function () {
      var dir, i, len, ref1;
      ref1 = atom.project.getDirectories();

      for (i = 0, len = ref1.length; i < len; i++) {
        dir = ref1[i];

        if (dir.contains(this.path)) {
          return atom.project.repositoryForDirectory(dir);
        }
      }

      return Promise.resolve(null);
    };

    TabView.prototype.updateVcsStatus = function (repo, status) {
      var newStatus;

      if (repo == null) {
        return;
      }

      newStatus = null;

      if (repo.isPathIgnored(this.path)) {
        newStatus = 'ignored';
      } else {
        if (status == null) {
          status = repo.getCachedPathStatus(this.path);
        }

        if (repo.isStatusModified(status)) {
          newStatus = 'modified';
        } else if (repo.isStatusNew(status)) {
          newStatus = 'added';
        }
      }

      if (newStatus !== this.status) {
        this.status = newStatus;
        return this.updateVcsColoring();
      }
    };

    TabView.prototype.updateVcsColoring = function () {
      this.itemTitle.classList.remove('status-ignored', 'status-modified', 'status-added');

      if (this.status && atom.config.get('tabs.enableVcsColoring')) {
        return this.itemTitle.classList.add("status-" + this.status);
      }
    };

    TabView.prototype.unsetVcsStatus = function () {
      var ref1;

      if ((ref1 = this.repoSubscriptions) != null) {
        ref1.dispose();
      }

      delete this.status;
      return this.updateVcsColoring();
    };

    return TabView;
  }();
}).call(void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1ZlbmRvckxpYi9hdG9tLXRhYnMvbGliL3RhYi12aWV3LmpzIl0sIm5hbWVzIjpbIkNvbXBvc2l0ZURpc3Bvc2FibGUiLCJEaXNwb3NhYmxlIiwiRmlsZUljb25zIiwiVGFiVmlldyIsImxheW91dCIsInBhdGgiLCJyZWYiLCJzbGljZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXJnIiwiYmFzZSIsImNsb3NlSWNvbiIsImRpZENsaWNrQ2xvc2VJY29uIiwibG9jYXRpb24iLCJpdGVtIiwicGFuZSIsInRhYnMiLCJnZXRQYXRoIiwiZWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImluZGV4T2YiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpdGVtVGl0bGUiLCJhcHBlbmRDaGlsZCIsImlzUGVybWFuZW50RG9ja0l0ZW0iLCJvbmNsaWNrIiwic3Vic2NyaXB0aW9ucyIsImhhbmRsZUV2ZW50cyIsInVwZGF0ZURhdGFBdHRyaWJ1dGVzIiwidXBkYXRlVGl0bGUiLCJ1cGRhdGVJY29uIiwidXBkYXRlTW9kaWZpZWRTdGF0dXMiLCJzZXR1cFRvb2x0aXAiLCJhY3RpdmF0ZSIsImlzSXRlbVBlbmRpbmciLCJvbmRyYWciLCJlIiwiZHJhZyIsIm9uZHJhZ2VuZCIsImVuZCIsInByb3RvdHlwZSIsImljb25DaGFuZ2VkSGFuZGxlciIsIm1vZGlmaWVkSGFuZGxlciIsIm9uRGlkQ2hhbmdlSWNvbkRpc3Bvc2FibGUiLCJvbkRpZENoYW5nZU1vZGlmaWVkRGlzcG9zYWJsZSIsIm9uRGlkQ2hhbmdlUGF0aERpc3Bvc2FibGUiLCJvbkRpZENoYW5nZVRpdGxlRGlzcG9zYWJsZSIsIm9uRGlkU2F2ZURpc3Bvc2FibGUiLCJvbkRpZFRlcm1pbmF0ZVBlbmRpbmdTdGF0ZURpc3Bvc2FibGUiLCJwYXRoQ2hhbmdlZEhhbmRsZXIiLCJ0aXRsZUNoYW5nZWRIYW5kbGVyIiwiX3RoaXMiLCJvbkRpZERlc3Ryb3kiLCJkZXN0cm95Iiwib25JdGVtRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlIiwiY2xlYXJQZW5kaW5nIiwib25EaWRUZXJtaW5hdGVQZW5kaW5nU3RhdGUiLCJpc0Rpc3Bvc2FibGUiLCJjb25zb2xlIiwid2FybiIsIm9uRGlkQ2hhbmdlVGl0bGUiLCJvbiIsImRpc3Bvc2UiLCJvZmYiLCJwYXRoMSIsInVwZGF0ZVRvb2x0aXAiLCJvbkRpZENoYW5nZVBhdGgiLCJvbkRpZENoYW5nZUljb24iLCJiYXNlMSIsIm9uRGlkQ2hhbmdlTW9kaWZpZWQiLCJvbkRpZFNhdmUiLCJldmVudCIsInRlcm1pbmF0ZVBlbmRpbmdTdGF0ZSIsImF0b20iLCJjb25maWciLCJnZXQiLCJzZXR1cFZjc1N0YXR1cyIsIm9ic2VydmUiLCJ1cGRhdGVJY29uVmlzaWJpbGl0eSIsImlzRW5hYmxlZCIsInVuc2V0VmNzU3RhdHVzIiwib25Nb3VzZUVudGVyIiwibW91c2VFbnRlclN1YnNjcmlwdGlvbiIsImhhc0JlZW5Nb3VzZWRPdmVyIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiYnViYmxlcyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZGVzdHJveVRvb2x0aXAiLCJ0b29sdGlwIiwidG9vbHRpcHMiLCJ0aXRsZSIsImh0bWwiLCJkZWxheSIsInNob3ciLCJoaWRlIiwicGxhY2VtZW50IiwicmVmMSIsInJlZjIiLCJyZWYzIiwicmVwb1N1YnNjcmlwdGlvbnMiLCJyZW1vdmUiLCJpdGVtQ2xhc3MiLCJkYXRhc2V0IiwiYmFzZW5hbWUiLCJ0eXBlIiwiaSIsImxlbiIsInJlZjQiLCJ0YWIiLCJ1cGRhdGVTaWJsaW5ncyIsInVzZUxvbmdUaXRsZSIsInVwZGF0aW5nVGl0bGUiLCJnZXRUaXRsZSIsImdldExvbmdUaXRsZSIsInRleHRDb250ZW50IiwibGVuZ3RoIiwibmFtZXMiLCJpY29uTmFtZSIsIkFycmF5IiwiaXNBcnJheSIsInNwbGl0IiwiYXBwbHkiLCJjb25jYXQiLCJjYWxsIiwiZ2V0SWNvbk5hbWUiLCJnZXRTZXJ2aWNlIiwiaWNvbkNsYXNzRm9yUGF0aCIsInRvU3RyaW5nIiwiZ2V0UGVuZGluZ0l0ZW0iLCJpc1BlbmRpbmciLCJjbGVhclBlbmRpbmdJdGVtIiwiaXNNb2RpZmllZCIsInJlcG9Gb3JQYXRoIiwidGhlbiIsInJlcG8iLCJzdWJzY3JpYmVUb1JlcG8iLCJ1cGRhdGVWY3NTdGF0dXMiLCJvbkRpZENoYW5nZVN0YXR1cyIsInBhdGhTdGF0dXMiLCJvbkRpZENoYW5nZVN0YXR1c2VzIiwiZGlyIiwicHJvamVjdCIsImdldERpcmVjdG9yaWVzIiwiY29udGFpbnMiLCJyZXBvc2l0b3J5Rm9yRGlyZWN0b3J5IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzdGF0dXMiLCJuZXdTdGF0dXMiLCJpc1BhdGhJZ25vcmVkIiwiZ2V0Q2FjaGVkUGF0aFN0YXR1cyIsImlzU3RhdHVzTW9kaWZpZWQiLCJpc1N0YXR1c05ldyIsInVwZGF0ZVZjc0NvbG9yaW5nIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0EsQ0FBQyxZQUFXO0FBQ1YsTUFBSUEsbUJBQUo7QUFBQSxNQUF5QkMsVUFBekI7QUFBQSxNQUFxQ0MsU0FBckM7QUFBQSxNQUFnREMsT0FBaEQ7QUFBQSxNQUF5REMsTUFBekQ7QUFBQSxNQUFpRUMsSUFBakU7QUFBQSxNQUF1RUMsR0FBdkU7QUFBQSxNQUNFQyxLQUFLLEdBQUcsR0FBR0EsS0FEYjtBQUdBRixFQUFBQSxJQUFJLEdBQUdHLE9BQU8sQ0FBQyxNQUFELENBQWQ7QUFFQUYsRUFBQUEsR0FBRyxHQUFHRSxPQUFPLENBQUMsTUFBRCxDQUFiLEVBQXVCUCxVQUFVLEdBQUdLLEdBQUcsQ0FBQ0wsVUFBeEMsRUFBb0RELG1CQUFtQixHQUFHTSxHQUFHLENBQUNOLG1CQUE5RTtBQUVBRSxFQUFBQSxTQUFTLEdBQUdNLE9BQU8sQ0FBQyxjQUFELENBQW5CO0FBRUFKLEVBQUFB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QixDQUFKLEVBQThCO0FBQ25DQyxVQUFBQSxTQUFTLEdBQUcsT0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsVUFBSUEsU0FBUyxLQUFLLEtBQUtELE1BQXZCLEVBQStCO0FBQzdCLGFBQUtBLE1BQUwsR0FBY0MsU0FBZDtBQUNBLGVBQU8sS0FBS0ssaUJBQUwsRUFBUDtBQUNEO0FBQ0YsS0F0QkQ7O0FBd0JBL0osSUFBQUEsT0FBTyxDQUFDNEMsU0FBUixDQUFrQm1ILGlCQUFsQixHQUFzQyxZQUFXO0FBQy9DLFdBQUtySSxTQUFMLENBQWVGLFNBQWYsQ0FBeUJrRixNQUF6QixDQUFnQyxnQkFBaEMsRUFBa0QsaUJBQWxELEVBQXFFLGNBQXJFOztBQUNBLFVBQUksS0FBSytDLE1BQUwsSUFBZTVFLElBQUksQ0FBQ0MsTUFBTCxDQUFZQyxHQUFaLENBQWdCLHdCQUFoQixDQUFuQixFQUE4RDtBQUM1RCxlQUFPLEtBQUtyRCxTQUFMLENBQWVGLFNBQWYsQ0FBeUJDLEdBQXpCLENBQTZCLFlBQVksS0FBS2dJLE1BQTlDLENBQVA7QUFDRDtBQUNGLEtBTEQ7O0FBT0F6SixJQUFBQSxPQUFPLENBQUM0QyxTQUFSLENBQWtCd0MsY0FBbEIsR0FBbUMsWUFBVztBQUM1QyxVQUFJa0IsSUFBSjs7QUFDQSxVQUFJLENBQUNBLElBQUksR0FBRyxLQUFLRyxpQkFBYixLQUFtQyxJQUF2QyxFQUE2QztBQUMzQ0gsUUFBQUEsSUFBSSxDQUFDcEMsT0FBTDtBQUNEOztBQUNELGFBQU8sS0FBS3VGLE1BQVo7QUFDQSxhQUFPLEtBQUtNLGlCQUFMLEVBQVA7QUFDRCxLQVBEOztBQVNBLFdBQU8vSixPQUFQO0FBRUQsR0ExZDBCLEVBQTNCO0FBNGRELENBeGVELEVBd2VHaUksSUF4ZUgiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYnkgQ29mZmVlU2NyaXB0IDEuMTIuMlxyXG4oZnVuY3Rpb24oKSB7XHJcbiAgdmFyIENvbXBvc2l0ZURpc3Bvc2FibGUsIERpc3Bvc2FibGUsIEZpbGVJY29ucywgVGFiVmlldywgbGF5b3V0LCBwYXRoLCByZWYsXHJcbiAgICBzbGljZSA9IFtdLnNsaWNlO1xyXG5cclxuICBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xyXG5cclxuICByZWYgPSByZXF1aXJlKCdhdG9tJyksIERpc3Bvc2FibGUgPSByZWYuRGlzcG9zYWJsZSwgQ29tcG9zaXRlRGlzcG9zYWJsZSA9IHJlZi5Db21wb3NpdGVEaXNwb3NhYmxlO1xyXG5cclxuICBGaWxlSWNvbnMgPSByZXF1aXJlKCcuL2ZpbGUtaWNvbnMnKTtcclxuXHJcbiAgbGF5b3V0ID0gcmVxdWlyZSgnLi9sYXlvdXQnKTtcclxuXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBUYWJWaWV3ID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgZnVuY3Rpb24gVGFiVmlldyhhcmcpIHtcclxuICAgICAgdmFyIGJhc2UsIGNsb3NlSWNvbiwgZGlkQ2xpY2tDbG9zZUljb24sIGxvY2F0aW9uO1xyXG4gICAgICB0aGlzLml0ZW0gPSBhcmcuaXRlbSwgdGhpcy5wYW5lID0gYXJnLnBhbmUsIGRpZENsaWNrQ2xvc2VJY29uID0gYXJnLmRpZENsaWNrQ2xvc2VJY29uLCB0aGlzLnRhYnMgPSBhcmcudGFicywgbG9jYXRpb24gPSBhcmcubG9jYXRpb247XHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5pdGVtLmdldFBhdGggPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aGlzLnBhdGggPSB0aGlzLml0ZW0uZ2V0UGF0aCgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lzJywgJ3RhYnMtdGFiJyk7XHJcbiAgICAgIGlmIChbJ1RleHRFZGl0b3InLCAnVGVzdFZpZXcnXS5pbmRleE9mKHRoaXMuaXRlbS5jb25zdHJ1Y3Rvci5uYW1lKSA+IC0xKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3RleHRlZGl0b3InKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndGFiJywgJ3NvcnRhYmxlJyk7XHJcbiAgICAgIHRoaXMuaXRlbVRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgIHRoaXMuaXRlbVRpdGxlLmNsYXNzTGlzdC5hZGQoJ3RpdGxlJyk7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLml0ZW1UaXRsZSk7XHJcbiAgICAgIGlmIChsb2NhdGlvbiA9PT0gJ2NlbnRlcicgfHwgISh0eXBlb2YgKGJhc2UgPSB0aGlzLml0ZW0pLmlzUGVybWFuZW50RG9ja0l0ZW0gPT09IFwiZnVuY3Rpb25cIiA/IGJhc2UuaXNQZXJtYW5lbnREb2NrSXRlbSgpIDogdm9pZCAwKSkge1xyXG4gICAgICAgIGNsb3NlSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGNsb3NlSWNvbi5jbGFzc0xpc3QuYWRkKCdjbG9zZS1pY29uJyk7XHJcbiAgICAgICAgY2xvc2VJY29uLm9uY2xpY2sgPSBkaWRDbGlja0Nsb3NlSWNvbjtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvc2VJY29uKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gICAgICB0aGlzLmhhbmRsZUV2ZW50cygpO1xyXG4gICAgICB0aGlzLnVwZGF0ZURhdGFBdHRyaWJ1dGVzKCk7XHJcbiAgICAgIHRoaXMudXBkYXRlVGl0bGUoKTtcclxuICAgICAgdGhpcy51cGRhdGVJY29uKCk7XHJcbiAgICAgIHRoaXMudXBkYXRlTW9kaWZpZWRTdGF0dXMoKTtcclxuICAgICAgdGhpcy5zZXR1cFRvb2x0aXAoKTtcclxuICAgICAgbGF5b3V0LmFjdGl2YXRlKCk7XHJcbiAgICAgIGlmICh0aGlzLmlzSXRlbVBlbmRpbmcoKSkge1xyXG4gICAgICAgIHRoaXMuaXRlbVRpdGxlLmNsYXNzTGlzdC5hZGQoJ3RlbXAnKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgncGVuZGluZy10YWInKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmVsZW1lbnQub25kcmFnID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHJldHVybiBsYXlvdXQuZHJhZyhlKTtcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5lbGVtZW50Lm9uZHJhZ2VuZCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICByZXR1cm4gbGF5b3V0LmVuZChlKTtcclxuICAgICAgfTtcclxuICAgICAgdGhpcy5lbGVtZW50LnBhbmUgPSB0aGlzLnBhbmU7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5pdGVtID0gdGhpcy5pdGVtO1xyXG4gICAgICB0aGlzLmVsZW1lbnQuaXRlbVRpdGxlID0gdGhpcy5pdGVtVGl0bGU7XHJcbiAgICAgIHRoaXMuZWxlbWVudC5wYXRoID0gdGhpcy5wYXRoO1xyXG4gICAgfVxyXG5cclxuICAgIFRhYlZpZXcucHJvdG90eXBlLmhhbmRsZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgYmFzZSwgaWNvbkNoYW5nZWRIYW5kbGVyLCBtb2RpZmllZEhhbmRsZXIsIG9uRGlkQ2hhbmdlSWNvbkRpc3Bvc2FibGUsIG9uRGlkQ2hhbmdlTW9kaWZpZWREaXNwb3NhYmxlLCBvbkRpZENoYW5nZVBhdGhEaXNwb3NhYmxlLCBvbkRpZENoYW5nZVRpdGxlRGlzcG9zYWJsZSwgb25EaWRTYXZlRGlzcG9zYWJsZSwgb25EaWRUZXJtaW5hdGVQZW5kaW5nU3RhdGVEaXNwb3NhYmxlLCBwYXRoQ2hhbmdlZEhhbmRsZXIsIHRpdGxlQ2hhbmdlZEhhbmRsZXI7XHJcbiAgICAgIHRpdGxlQ2hhbmdlZEhhbmRsZXIgPSAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlVGl0bGUoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KSh0aGlzKTtcclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZCh0aGlzLnBhbmUub25EaWREZXN0cm95KChmdW5jdGlvbihfdGhpcykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiBfdGhpcy5kZXN0cm95KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkodGhpcykpKTtcclxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnBhbmUub25JdGVtRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZCh0aGlzLnBhbmUub25JdGVtRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlKChmdW5jdGlvbihfdGhpcykge1xyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0gPT09IF90aGlzLml0ZW0pIHtcclxuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuY2xlYXJQZW5kaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfSkodGhpcykpKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5pdGVtLm9uRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgb25EaWRUZXJtaW5hdGVQZW5kaW5nU3RhdGVEaXNwb3NhYmxlID0gdGhpcy5pdGVtLm9uRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlKChmdW5jdGlvbihfdGhpcykge1xyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY2xlYXJQZW5kaW5nKCk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pKHRoaXMpKTtcclxuICAgICAgICBpZiAoRGlzcG9zYWJsZS5pc0Rpc3Bvc2FibGUob25EaWRUZXJtaW5hdGVQZW5kaW5nU3RhdGVEaXNwb3NhYmxlKSkge1xyXG4gICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChvbkRpZFRlcm1pbmF0ZVBlbmRpbmdTdGF0ZURpc3Bvc2FibGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCI6Om9uRGlkVGVybWluYXRlUGVuZGluZ1N0YXRlIGRvZXMgbm90IHJldHVybiBhIHZhbGlkIERpc3Bvc2FibGUhXCIsIHRoaXMuaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5pdGVtLm9uRGlkQ2hhbmdlVGl0bGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBvbkRpZENoYW5nZVRpdGxlRGlzcG9zYWJsZSA9IHRoaXMuaXRlbS5vbkRpZENoYW5nZVRpdGxlKHRpdGxlQ2hhbmdlZEhhbmRsZXIpO1xyXG4gICAgICAgIGlmIChEaXNwb3NhYmxlLmlzRGlzcG9zYWJsZShvbkRpZENoYW5nZVRpdGxlRGlzcG9zYWJsZSkpIHtcclxuICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQob25EaWRDaGFuZ2VUaXRsZURpc3Bvc2FibGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCI6Om9uRGlkQ2hhbmdlVGl0bGUgZG9lcyBub3QgcmV0dXJuIGEgdmFsaWQgRGlzcG9zYWJsZSFcIiwgdGhpcy5pdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMuaXRlbS5vbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRoaXMuaXRlbS5vbigndGl0bGUtY2hhbmdlZCcsIHRpdGxlQ2hhbmdlZEhhbmRsZXIpO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoe1xyXG4gICAgICAgICAgZGlzcG9zZTogKGZ1bmN0aW9uKF90aGlzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICB2YXIgYmFzZTtcclxuICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIChiYXNlID0gX3RoaXMuaXRlbSkub2ZmID09PSBcImZ1bmN0aW9uXCIgPyBiYXNlLm9mZigndGl0bGUtY2hhbmdlZCcsIHRpdGxlQ2hhbmdlZEhhbmRsZXIpIDogdm9pZCAwO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSkodGhpcylcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBwYXRoQ2hhbmdlZEhhbmRsZXIgPSAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aDEpIHtcclxuICAgICAgICAgIF90aGlzLnBhdGggPSBwYXRoMTtcclxuICAgICAgICAgIF90aGlzLnVwZGF0ZURhdGFBdHRyaWJ1dGVzKCk7XHJcbiAgICAgICAgICBfdGhpcy51cGRhdGVUaXRsZSgpO1xyXG4gICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZVRvb2x0aXAoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KSh0aGlzKTtcclxuICAgICAgaWYgKHR5cGVvZiB0aGlzLml0ZW0ub25EaWRDaGFuZ2VQYXRoID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgb25EaWRDaGFuZ2VQYXRoRGlzcG9zYWJsZSA9IHRoaXMuaXRlbS5vbkRpZENoYW5nZVBhdGgocGF0aENoYW5nZWRIYW5kbGVyKTtcclxuICAgICAgICBpZiAoRGlzcG9zYWJsZS5pc0Rpc3Bvc2FibGUob25EaWRDaGFuZ2VQYXRoRGlzcG9zYWJsZSkpIHtcclxuICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQob25EaWRDaGFuZ2VQYXRoRGlzcG9zYWJsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcIjo6b25EaWRDaGFuZ2VQYXRoIGRvZXMgbm90IHJldHVybiBhIHZhbGlkIERpc3Bvc2FibGUhXCIsIHRoaXMuaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLml0ZW0ub24gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aGlzLml0ZW0ub24oJ3BhdGgtY2hhbmdlZCcsIHBhdGhDaGFuZ2VkSGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZCh7XHJcbiAgICAgICAgICBkaXNwb3NlOiAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHZhciBiYXNlO1xyXG4gICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgKGJhc2UgPSBfdGhpcy5pdGVtKS5vZmYgPT09IFwiZnVuY3Rpb25cIiA/IGJhc2Uub2ZmKCdwYXRoLWNoYW5nZWQnLCBwYXRoQ2hhbmdlZEhhbmRsZXIpIDogdm9pZCAwO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfSkodGhpcylcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgICBpY29uQ2hhbmdlZEhhbmRsZXIgPSAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlSWNvbigpO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0pKHRoaXMpO1xyXG4gICAgICBpZiAodHlwZW9mIHRoaXMuaXRlbS5vbkRpZENoYW5nZUljb24gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBvbkRpZENoYW5nZUljb25EaXNwb3NhYmxlID0gdHlwZW9mIChiYXNlID0gdGhpcy5pdGVtKS5vbkRpZENoYW5nZUljb24gPT09IFwiZnVuY3Rpb25cIiA/IGJhc2Uub25EaWRDaGFuZ2VJY29uKChmdW5jdGlvbihfdGhpcykge1xyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlSWNvbigpO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KSh0aGlzKSkgOiB2b2lkIDA7XHJcbiAgICAgICAgaWYgKERpc3Bvc2FibGUuaXNEaXNwb3NhYmxlKG9uRGlkQ2hhbmdlSWNvbkRpc3Bvc2FibGUpKSB7XHJcbiAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKG9uRGlkQ2hhbmdlSWNvbkRpc3Bvc2FibGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCI6Om9uRGlkQ2hhbmdlSWNvbiBkb2VzIG5vdCByZXR1cm4gYSB2YWxpZCBEaXNwb3NhYmxlIVwiLCB0aGlzLml0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5pdGVtLm9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtLm9uKCdpY29uLWNoYW5nZWQnLCBpY29uQ2hhbmdlZEhhbmRsZXIpO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoe1xyXG4gICAgICAgICAgZGlzcG9zZTogKGZ1bmN0aW9uKF90aGlzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICB2YXIgYmFzZTE7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiAoYmFzZTEgPSBfdGhpcy5pdGVtKS5vZmYgPT09IFwiZnVuY3Rpb25cIiA/IGJhc2UxLm9mZignaWNvbi1jaGFuZ2VkJywgaWNvbkNoYW5nZWRIYW5kbGVyKSA6IHZvaWQgMDtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH0pKHRoaXMpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgbW9kaWZpZWRIYW5kbGVyID0gKGZ1bmN0aW9uKF90aGlzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIF90aGlzLnVwZGF0ZU1vZGlmaWVkU3RhdHVzKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkodGhpcyk7XHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5pdGVtLm9uRGlkQ2hhbmdlTW9kaWZpZWQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICBvbkRpZENoYW5nZU1vZGlmaWVkRGlzcG9zYWJsZSA9IHRoaXMuaXRlbS5vbkRpZENoYW5nZU1vZGlmaWVkKG1vZGlmaWVkSGFuZGxlcik7XHJcbiAgICAgICAgaWYgKERpc3Bvc2FibGUuaXNEaXNwb3NhYmxlKG9uRGlkQ2hhbmdlTW9kaWZpZWREaXNwb3NhYmxlKSkge1xyXG4gICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZChvbkRpZENoYW5nZU1vZGlmaWVkRGlzcG9zYWJsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcIjo6b25EaWRDaGFuZ2VNb2RpZmllZCBkb2VzIG5vdCByZXR1cm4gYSB2YWxpZCBEaXNwb3NhYmxlIVwiLCB0aGlzLml0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5pdGVtLm9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtLm9uKCdtb2RpZmllZC1zdGF0dXMtY2hhbmdlZCcsIG1vZGlmaWVkSGFuZGxlcik7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmFkZCh7XHJcbiAgICAgICAgICBkaXNwb3NlOiAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgIHZhciBiYXNlMTtcclxuICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIChiYXNlMSA9IF90aGlzLml0ZW0pLm9mZiA9PT0gXCJmdW5jdGlvblwiID8gYmFzZTEub2ZmKCdtb2RpZmllZC1zdGF0dXMtY2hhbmdlZCcsIG1vZGlmaWVkSGFuZGxlcikgOiB2b2lkIDA7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICB9KSh0aGlzKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5pdGVtLm9uRGlkU2F2ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIG9uRGlkU2F2ZURpc3Bvc2FibGUgPSB0aGlzLml0ZW0ub25EaWRTYXZlKChmdW5jdGlvbihfdGhpcykge1xyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIF90aGlzLnRlcm1pbmF0ZVBlbmRpbmdTdGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQucGF0aCAhPT0gX3RoaXMucGF0aCkge1xyXG4gICAgICAgICAgICAgIF90aGlzLnBhdGggPSBldmVudC5wYXRoO1xyXG4gICAgICAgICAgICAgIGlmIChhdG9tLmNvbmZpZy5nZXQoJ3RhYnMuZW5hYmxlVmNzQ29sb3JpbmcnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNldHVwVmNzU3RhdHVzKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH0pKHRoaXMpKTtcclxuICAgICAgICBpZiAoRGlzcG9zYWJsZS5pc0Rpc3Bvc2FibGUob25EaWRTYXZlRGlzcG9zYWJsZSkpIHtcclxuICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQob25EaWRTYXZlRGlzcG9zYWJsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUud2FybihcIjo6b25EaWRTYXZlIGRvZXMgbm90IHJldHVybiBhIHZhbGlkIERpc3Bvc2FibGUhXCIsIHRoaXMuaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoYXRvbS5jb25maWcub2JzZXJ2ZSgndGFicy5zaG93SWNvbnMnLCAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlSWNvblZpc2liaWxpdHkoKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KSh0aGlzKSkpO1xyXG4gICAgICByZXR1cm4gdGhpcy5zdWJzY3JpcHRpb25zLmFkZChhdG9tLmNvbmZpZy5vYnNlcnZlKCd0YWJzLmVuYWJsZVZjc0NvbG9yaW5nJywgKGZ1bmN0aW9uKF90aGlzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgaWYgKGlzRW5hYmxlZCAmJiAoX3RoaXMucGF0aCAhPSBudWxsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuc2V0dXBWY3NTdGF0dXMoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy51bnNldFZjc1N0YXR1cygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pKHRoaXMpKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhYlZpZXcucHJvdG90eXBlLnNldHVwVG9vbHRpcCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgb25Nb3VzZUVudGVyO1xyXG4gICAgICBvbk1vdXNlRW50ZXIgPSAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBfdGhpcy5tb3VzZUVudGVyU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcclxuICAgICAgICAgIF90aGlzLmhhc0JlZW5Nb3VzZWRPdmVyID0gdHJ1ZTtcclxuICAgICAgICAgIF90aGlzLnVwZGF0ZVRvb2x0aXAoKTtcclxuICAgICAgICAgIHJldHVybiBfdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdtb3VzZWVudGVyJywge1xyXG4gICAgICAgICAgICBidWJibGVzOiB0cnVlXHJcbiAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkodGhpcyk7XHJcbiAgICAgIHRoaXMubW91c2VFbnRlclN1YnNjcmlwdGlvbiA9IHtcclxuICAgICAgICBkaXNwb3NlOiAoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgX3RoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgb25Nb3VzZUVudGVyKTtcclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLm1vdXNlRW50ZXJTdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KSh0aGlzKVxyXG4gICAgICB9O1xyXG4gICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBvbk1vdXNlRW50ZXIpO1xyXG4gICAgfTtcclxuXHJcbiAgICBUYWJWaWV3LnByb3RvdHlwZS51cGRhdGVUb29sdGlwID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghdGhpcy5oYXNCZWVuTW91c2VkT3Zlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmRlc3Ryb3lUb29sdGlwKCk7XHJcbiAgICAgIGlmICh0aGlzLnBhdGgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwID0gYXRvbS50b29sdGlwcy5hZGQodGhpcy5lbGVtZW50LCB7XHJcbiAgICAgICAgICB0aXRsZTogdGhpcy5wYXRoLFxyXG4gICAgICAgICAgaHRtbDogZmFsc2UsXHJcbiAgICAgICAgICBkZWxheToge1xyXG4gICAgICAgICAgICBzaG93OiAxMDAwLFxyXG4gICAgICAgICAgICBoaWRlOiAxMDBcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBwbGFjZW1lbnQ6ICdib3R0b20nXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgVGFiVmlldy5wcm90b3R5cGUuZGVzdHJveVRvb2x0aXAgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHJlZjE7XHJcbiAgICAgIGlmICghdGhpcy5oYXNCZWVuTW91c2VkT3Zlcikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gKHJlZjEgPSB0aGlzLnRvb2x0aXApICE9IG51bGwgPyByZWYxLmRpc3Bvc2UoKSA6IHZvaWQgMDtcclxuICAgIH07XHJcblxyXG4gICAgVGFiVmlldy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgcmVmMSwgcmVmMiwgcmVmMztcclxuICAgICAgaWYgKChyZWYxID0gdGhpcy5zdWJzY3JpcHRpb25zKSAhPSBudWxsKSB7XHJcbiAgICAgICAgcmVmMS5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKChyZWYyID0gdGhpcy5tb3VzZUVudGVyU3Vic2NyaXB0aW9uKSAhPSBudWxsKSB7XHJcbiAgICAgICAgcmVmMi5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKChyZWYzID0gdGhpcy5yZXBvU3Vic2NyaXB0aW9ucykgIT0gbnVsbCkge1xyXG4gICAgICAgIHJlZjMuZGlzcG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuZGVzdHJveVRvb2x0aXAoKTtcclxuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5yZW1vdmUoKTtcclxuICAgIH07XHJcblxyXG4gICAgVGFiVmlldy5wcm90b3R5cGUudXBkYXRlRGF0YUF0dHJpYnV0ZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGl0ZW1DbGFzcywgcmVmMTtcclxuICAgICAgaWYgKHRoaXMucGF0aCkge1xyXG4gICAgICAgIHRoaXMuaXRlbVRpdGxlLmRhdGFzZXQubmFtZSA9IHBhdGguYmFzZW5hbWUodGhpcy5wYXRoKTtcclxuICAgICAgICB0aGlzLml0ZW1UaXRsZS5kYXRhc2V0LnBhdGggPSB0aGlzLnBhdGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuaXRlbVRpdGxlLmRhdGFzZXQubmFtZTtcclxuICAgICAgICBkZWxldGUgdGhpcy5pdGVtVGl0bGUuZGF0YXNldC5wYXRoO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpdGVtQ2xhc3MgPSAocmVmMSA9IHRoaXMuaXRlbS5jb25zdHJ1Y3RvcikgIT0gbnVsbCA/IHJlZjEubmFtZSA6IHZvaWQgMCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZGF0YXNldC50eXBlID0gaXRlbUNsYXNzO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBkZWxldGUgdGhpcy5lbGVtZW50LmRhdGFzZXQudHlwZTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBUYWJWaWV3LnByb3RvdHlwZS51cGRhdGVUaXRsZSA9IGZ1bmN0aW9uKGFyZykge1xyXG4gICAgICB2YXIgYmFzZSwgYmFzZTEsIGksIGxlbiwgcmVmMSwgcmVmMiwgcmVmMywgcmVmNCwgdGFiLCB0aXRsZSwgdXBkYXRlU2libGluZ3MsIHVzZUxvbmdUaXRsZTtcclxuICAgICAgcmVmMSA9IGFyZyAhPSBudWxsID8gYXJnIDoge30sIHVwZGF0ZVNpYmxpbmdzID0gcmVmMS51cGRhdGVTaWJsaW5ncywgdXNlTG9uZ1RpdGxlID0gcmVmMS51c2VMb25nVGl0bGU7XHJcbiAgICAgIGlmICh0aGlzLnVwZGF0aW5nVGl0bGUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy51cGRhdGluZ1RpdGxlID0gdHJ1ZTtcclxuICAgICAgaWYgKHVwZGF0ZVNpYmxpbmdzID09PSBmYWxzZSkge1xyXG4gICAgICAgIHRpdGxlID0gdGhpcy5pdGVtLmdldFRpdGxlKCk7XHJcbiAgICAgICAgaWYgKHVzZUxvbmdUaXRsZSkge1xyXG4gICAgICAgICAgdGl0bGUgPSAocmVmMiA9IHR5cGVvZiAoYmFzZSA9IHRoaXMuaXRlbSkuZ2V0TG9uZ1RpdGxlID09PSBcImZ1bmN0aW9uXCIgPyBiYXNlLmdldExvbmdUaXRsZSgpIDogdm9pZCAwKSAhPSBudWxsID8gcmVmMiA6IHRpdGxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLml0ZW1UaXRsZS50ZXh0Q29udGVudCA9IHRpdGxlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRpdGxlID0gdGhpcy5pdGVtLmdldFRpdGxlKCk7XHJcbiAgICAgICAgdXNlTG9uZ1RpdGxlID0gZmFsc2U7XHJcbiAgICAgICAgcmVmMyA9IHRoaXMudGFicztcclxuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICB0YWIgPSByZWYzW2ldO1xyXG4gICAgICAgICAgaWYgKHRhYiAhPT0gdGhpcykge1xyXG4gICAgICAgICAgICBpZiAodGFiLml0ZW0uZ2V0VGl0bGUoKSA9PT0gdGl0bGUpIHtcclxuICAgICAgICAgICAgICB0YWIudXBkYXRlVGl0bGUoe1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlU2libGluZ3M6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgdXNlTG9uZ1RpdGxlOiB0cnVlXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgdXNlTG9uZ1RpdGxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXNlTG9uZ1RpdGxlKSB7XHJcbiAgICAgICAgICB0aXRsZSA9IChyZWY0ID0gdHlwZW9mIChiYXNlMSA9IHRoaXMuaXRlbSkuZ2V0TG9uZ1RpdGxlID09PSBcImZ1bmN0aW9uXCIgPyBiYXNlMS5nZXRMb25nVGl0bGUoKSA6IHZvaWQgMCkgIT0gbnVsbCA/IHJlZjQgOiB0aXRsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pdGVtVGl0bGUudGV4dENvbnRlbnQgPSB0aXRsZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy51cGRhdGluZ1RpdGxlID0gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhYlZpZXcucHJvdG90eXBlLnVwZGF0ZUljb24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGJhc2UsIG5hbWVzLCByZWYxLCByZWYyO1xyXG4gICAgICBpZiAodGhpcy5pY29uTmFtZSkge1xyXG4gICAgICAgIG5hbWVzID0gIUFycmF5LmlzQXJyYXkodGhpcy5pY29uTmFtZSkgPyB0aGlzLmljb25OYW1lLnNwbGl0KC9cXHMrL2cpIDogdGhpcy5pY29uTmFtZTtcclxuICAgICAgICAocmVmMSA9IHRoaXMuaXRlbVRpdGxlLmNsYXNzTGlzdCkucmVtb3ZlLmFwcGx5KHJlZjEsIFsnaWNvbicsIFwiaWNvbi1cIiArIG5hbWVzWzBdXS5jb25jYXQoc2xpY2UuY2FsbChuYW1lcykpKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5pY29uTmFtZSA9IHR5cGVvZiAoYmFzZSA9IHRoaXMuaXRlbSkuZ2V0SWNvbk5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IGJhc2UuZ2V0SWNvbk5hbWUoKSA6IHZvaWQgMCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1UaXRsZS5jbGFzc0xpc3QuYWRkKCdpY29uJywgXCJpY29uLVwiICsgdGhpcy5pY29uTmFtZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoKHRoaXMucGF0aCAhPSBudWxsKSAmJiAodGhpcy5pY29uTmFtZSA9IEZpbGVJY29ucy5nZXRTZXJ2aWNlKCkuaWNvbkNsYXNzRm9yUGF0aCh0aGlzLnBhdGgsIFwidGFic1wiKSkpIHtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmFtZXMgPSB0aGlzLmljb25OYW1lKSkge1xyXG4gICAgICAgICAgbmFtZXMgPSBuYW1lcy50b1N0cmluZygpLnNwbGl0KC9cXHMrL2cpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKHJlZjIgPSB0aGlzLml0ZW1UaXRsZS5jbGFzc0xpc3QpLmFkZC5hcHBseShyZWYyLCBbJ2ljb24nXS5jb25jYXQoc2xpY2UuY2FsbChuYW1lcykpKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBUYWJWaWV3LnByb3RvdHlwZS5pc0l0ZW1QZW5kaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLnBhbmUuZ2V0UGVuZGluZ0l0ZW0gIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhbmUuZ2V0UGVuZGluZ0l0ZW0oKSA9PT0gdGhpcy5pdGVtO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXRlbS5pc1BlbmRpbmcgIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW0uaXNQZW5kaW5nKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgVGFiVmlldy5wcm90b3R5cGUudGVybWluYXRlUGVuZGluZ1N0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLnBhbmUuY2xlYXJQZW5kaW5nSXRlbSAhPSBudWxsKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucGFuZS5nZXRQZW5kaW5nSXRlbSgpID09PSB0aGlzLml0ZW0pIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLnBhbmUuY2xlYXJQZW5kaW5nSXRlbSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0aGlzLml0ZW0udGVybWluYXRlUGVuZGluZ1N0YXRlICE9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtLnRlcm1pbmF0ZVBlbmRpbmdTdGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFRhYlZpZXcucHJvdG90eXBlLmNsZWFyUGVuZGluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLml0ZW1UaXRsZS5jbGFzc0xpc3QucmVtb3ZlKCd0ZW1wJyk7XHJcbiAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgncGVuZGluZy10YWInKTtcclxuICAgIH07XHJcblxyXG4gICAgVGFiVmlldy5wcm90b3R5cGUudXBkYXRlSWNvblZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcclxuICAgICAgaWYgKGF0b20uY29uZmlnLmdldCgndGFicy5zaG93SWNvbnMnKSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1UaXRsZS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlLWljb24nKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtVGl0bGUuY2xhc3NMaXN0LmFkZCgnaGlkZS1pY29uJyk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgVGFiVmlldy5wcm90b3R5cGUudXBkYXRlTW9kaWZpZWRTdGF0dXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGJhc2U7XHJcbiAgICAgIGlmICh0eXBlb2YgKGJhc2UgPSB0aGlzLml0ZW0pLmlzTW9kaWZpZWQgPT09IFwiZnVuY3Rpb25cIiA/IGJhc2UuaXNNb2RpZmllZCgpIDogdm9pZCAwKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzTW9kaWZpZWQpIHtcclxuICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdtb2RpZmllZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pc01vZGlmaWVkID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodGhpcy5pc01vZGlmaWVkKSB7XHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbW9kaWZpZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNNb2RpZmllZCA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIFRhYlZpZXcucHJvdG90eXBlLnNldHVwVmNzU3RhdHVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICh0aGlzLnBhdGggPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdGhpcy5yZXBvRm9yUGF0aCh0aGlzLnBhdGgpLnRoZW4oKGZ1bmN0aW9uKF90aGlzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlcG8pIHtcclxuICAgICAgICAgIF90aGlzLnN1YnNjcmliZVRvUmVwbyhyZXBvKTtcclxuICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVWY3NTdGF0dXMocmVwbyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkodGhpcykpO1xyXG4gICAgfTtcclxuXHJcbiAgICBUYWJWaWV3LnByb3RvdHlwZS5zdWJzY3JpYmVUb1JlcG8gPSBmdW5jdGlvbihyZXBvKSB7XHJcbiAgICAgIHZhciByZWYxO1xyXG4gICAgICBpZiAocmVwbyA9PSBudWxsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgocmVmMSA9IHRoaXMucmVwb1N1YnNjcmlwdGlvbnMpICE9IG51bGwpIHtcclxuICAgICAgICByZWYxLmRpc3Bvc2UoKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnJlcG9TdWJzY3JpcHRpb25zID0gbmV3IENvbXBvc2l0ZURpc3Bvc2FibGUoKTtcclxuICAgICAgdGhpcy5yZXBvU3Vic2NyaXB0aW9ucy5hZGQocmVwby5vbkRpZENoYW5nZVN0YXR1cygoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpIHtcclxuICAgICAgICAgIGlmIChldmVudC5wYXRoID09PSBfdGhpcy5wYXRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy51cGRhdGVWY3NTdGF0dXMocmVwbywgZXZlbnQucGF0aFN0YXR1cyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSkodGhpcykpKTtcclxuICAgICAgcmV0dXJuIHRoaXMucmVwb1N1YnNjcmlwdGlvbnMuYWRkKHJlcG8ub25EaWRDaGFuZ2VTdGF0dXNlcygoZnVuY3Rpb24oX3RoaXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZXR1cm4gX3RoaXMudXBkYXRlVmNzU3RhdHVzKHJlcG8pO1xyXG4gICAgICAgIH07XHJcbiAgICAgIH0pKHRoaXMpKSk7XHJcbiAgICB9O1xyXG5cclxuICAgIFRhYlZpZXcucHJvdG90eXBlLnJlcG9Gb3JQYXRoID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBkaXIsIGksIGxlbiwgcmVmMTtcclxuICAgICAgcmVmMSA9IGF0b20ucHJvamVjdC5nZXREaXJlY3RvcmllcygpO1xyXG4gICAgICBmb3IgKGkgPSAwLCBsZW4gPSByZWYxLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgZGlyID0gcmVmMVtpXTtcclxuICAgICAgICBpZiAoZGlyLmNvbnRhaW5zKHRoaXMucGF0aCkpIHtcclxuICAgICAgICAgIHJldHVybiBhdG9tLnByb2plY3QucmVwb3NpdG9yeUZvckRpcmVjdG9yeShkaXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG4gICAgfTtcclxuXHJcbiAgICBUYWJWaWV3LnByb3RvdHlwZS51cGRhdGVWY3NTdGF0dXMgPSBmdW5jdGlvbihyZXBvLCBzdGF0dXMpIHtcclxuICAgICAgdmFyIG5ld1N0YXR1cztcclxuICAgICAgaWYgKHJlcG8gPT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBuZXdTdGF0dXMgPSBudWxsO1xyXG4gICAgICBpZiAocmVwby5pc1BhdGhJZ25vcmVkKHRoaXMucGF0aCkpIHtcclxuICAgICAgICBuZXdTdGF0dXMgPSAnaWdub3JlZCc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHN0YXR1cyA9PSBudWxsKSB7XHJcbiAgICAgICAgICBzdGF0dXMgPSByZXBvLmdldENhY2hlZFBhdGhTdGF0dXModGhpcy5wYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJlcG8uaXNTdGF0dXNNb2RpZmllZChzdGF0dXMpKSB7XHJcbiAgICAgICAgICBuZXdTdGF0dXMgPSAnbW9kaWZpZWQnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmVwby5pc1N0YXR1c05ldyhzdGF0dXMpKSB7XHJcbiAgICAgICAgICBuZXdTdGF0dXMgPSAnYWRkZWQnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAobmV3U3RhdHVzICE9PSB0aGlzLnN0YXR1cykge1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gbmV3U3RhdHVzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZVZjc0NvbG9yaW5nKCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgVGFiVmlldy5wcm90b3R5cGUudXBkYXRlVmNzQ29sb3JpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5pdGVtVGl0bGUuY2xhc3NMaXN0LnJlbW92ZSgnc3RhdHVzLWlnbm9yZWQnLCAnc3RhdHVzLW1vZGlmaWVkJywgJ3N0YXR1cy1hZGRlZCcpO1xyXG4gICAgICBpZiAodGhpcy5zdGF0dXMgJiYgYXRvbS5jb25maWcuZ2V0KCd0YWJzLmVuYWJsZVZjc0NvbG9yaW5nJykpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pdGVtVGl0bGUuY2xhc3NMaXN0LmFkZChcInN0YXR1cy1cIiArIHRoaXMuc3RhdHVzKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBUYWJWaWV3LnByb3RvdHlwZS51bnNldFZjc1N0YXR1cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgcmVmMTtcclxuICAgICAgaWYgKChyZWYxID0gdGhpcy5yZXBvU3Vic2NyaXB0aW9ucykgIT0gbnVsbCkge1xyXG4gICAgICAgIHJlZjEuZGlzcG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnN0YXR1cztcclxuICAgICAgcmV0dXJuIHRoaXMudXBkYXRlVmNzQ29sb3JpbmcoKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIFRhYlZpZXc7XHJcblxyXG4gIH0pKCk7XHJcblxyXG59KS5jYWxsKHRoaXMpO1xyXG4iXX0=