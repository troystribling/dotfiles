"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * A React component used for rendering an item associated with a view via Atom's view registry.
 * Because we're going through Atom's ViewRegistry (which returns DOM nodes), we need to render an
 * empty element and manually attach the view (DOM element) we get from Atom.
 */
class View extends React.Component {
  constructor(...args) {
    super(...args);
    this._renderedItem = void 0;
  }

  shouldComponentUpdate(nextProps) {
    return this.props.item !== nextProps.item;
  }

  componentDidMount() {
    this._update(this.props.item);
  }

  componentDidUpdate() {
    this._update(this.props.item);
  }

  _update(item) {
    if (item === this._renderedItem) {
      return;
    } // Remove the current children.


    const container = _reactDom.default.findDOMNode(this); // $FlowFixMe


    while (container.lastChild != null) {
      // $FlowFixMe
      container.removeChild(container.lastChild);
    }

    this._renderedItem = item;

    if (item == null) {
      return;
    }

    const el = atom.views.getView(item); // $FlowFixMe

    container.appendChild(el);
  }

  render() {
    return /*#__PURE__*/React.createElement("nuclide-react-mount-root", null);
  }

}

exports.View = View;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL1ZpZXcuanMiXSwibmFtZXMiOlsiVmlldyIsIlJlYWN0IiwiQ29tcG9uZW50IiwiX3JlbmRlcmVkSXRlbSIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm5leHRQcm9wcyIsInByb3BzIiwiaXRlbSIsImNvbXBvbmVudERpZE1vdW50IiwiX3VwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbnRhaW5lciIsIlJlYWN0RE9NIiwiZmluZERPTU5vZGUiLCJsYXN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImVsIiwiYXRvbSIsInZpZXdzIiwiZ2V0VmlldyIsImFwcGVuZENoaWxkIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBWUE7O0FBQ0E7Ozs7Ozs7O0FBYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsSUFBTixTQUFtQkMsS0FBSyxDQUFDQyxTQUF6QixDQUEwQztBQUFBO0FBQUE7QUFBQSxTQUMvQ0MsYUFEK0M7QUFBQTs7QUFHL0NDLEVBQUFBLHFCQUFxQixDQUFDQyxTQUFELEVBQTRCO0FBQy9DLFdBQU8sS0FBS0MsS0FBTCxDQUFXQyxJQUFYLEtBQW9CRixTQUFTLENBQUNFLElBQXJDO0FBQ0Q7O0FBRURDLEVBQUFBLGlCQUFpQixHQUFTO0FBQ3hCLFNBQUtDLE9BQUwsQ0FBYSxLQUFLSCxLQUFMLENBQVdDLElBQXhCO0FBQ0Q7O0FBRURHLEVBQUFBLGtCQUFrQixHQUFTO0FBQ3pCLFNBQUtELE9BQUwsQ0FBYSxLQUFLSCxLQUFMLENBQVdDLElBQXhCO0FBQ0Q7O0FBRURFLEVBQUFBLE9BQU8sQ0FBQ0YsSUFBRCxFQUFzQjtBQUMzQixRQUFJQSxJQUFJLEtBQUssS0FBS0osYUFBbEIsRUFBaUM7QUFDL0I7QUFDRCxLQUgwQixDQUszQjs7O0FBQ0EsVUFBTVEsU0FBUyxHQUFHQyxrQkFBU0MsV0FBVCxDQUFxQixJQUFyQixDQUFsQixDQU4yQixDQU8zQjs7O0FBQ0EsV0FBT0YsU0FBUyxDQUFDRyxTQUFWLElBQXVCLElBQTlCLEVBQW9DO0FBQ2xDO0FBQ0FILE1BQUFBLFNBQVMsQ0FBQ0ksV0FBVixDQUFzQkosU0FBUyxDQUFDRyxTQUFoQztBQUNEOztBQUVELFNBQUtYLGFBQUwsR0FBcUJJLElBQXJCOztBQUNBLFFBQUlBLElBQUksSUFBSSxJQUFaLEVBQWtCO0FBQ2hCO0FBQ0Q7O0FBQ0QsVUFBTVMsRUFBRSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0MsT0FBWCxDQUFtQlosSUFBbkIsQ0FBWCxDQWpCMkIsQ0FrQjNCOztBQUNBSSxJQUFBQSxTQUFTLENBQUNTLFdBQVYsQ0FBc0JKLEVBQXRCO0FBQ0Q7O0FBRURLLEVBQUFBLE1BQU0sR0FBZTtBQUNuQix3QkFBTyxxREFBUDtBQUNEOztBQXZDOEMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICBpdGVtOiBPYmplY3QsXHJcbn07XHJcblxyXG4vKipcclxuICogQSBSZWFjdCBjb21wb25lbnQgdXNlZCBmb3IgcmVuZGVyaW5nIGFuIGl0ZW0gYXNzb2NpYXRlZCB3aXRoIGEgdmlldyB2aWEgQXRvbSdzIHZpZXcgcmVnaXN0cnkuXHJcbiAqIEJlY2F1c2Ugd2UncmUgZ29pbmcgdGhyb3VnaCBBdG9tJ3MgVmlld1JlZ2lzdHJ5ICh3aGljaCByZXR1cm5zIERPTSBub2RlcyksIHdlIG5lZWQgdG8gcmVuZGVyIGFuXHJcbiAqIGVtcHR5IGVsZW1lbnQgYW5kIG1hbnVhbGx5IGF0dGFjaCB0aGUgdmlldyAoRE9NIGVsZW1lbnQpIHdlIGdldCBmcm9tIEF0b20uXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIF9yZW5kZXJlZEl0ZW06ID9PYmplY3Q7XHJcblxyXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFByb3BzKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5pdGVtICE9PSBuZXh0UHJvcHMuaXRlbTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCk6IHZvaWQge1xyXG4gICAgdGhpcy5fdXBkYXRlKHRoaXMucHJvcHMuaXRlbSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRVcGRhdGUoKTogdm9pZCB7XHJcbiAgICB0aGlzLl91cGRhdGUodGhpcy5wcm9wcy5pdGVtKTtcclxuICB9XHJcblxyXG4gIF91cGRhdGUoaXRlbTogP09iamVjdCk6IHZvaWQge1xyXG4gICAgaWYgKGl0ZW0gPT09IHRoaXMuX3JlbmRlcmVkSXRlbSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVtb3ZlIHRoZSBjdXJyZW50IGNoaWxkcmVuLlxyXG4gICAgY29uc3QgY29udGFpbmVyID0gUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XHJcbiAgICAvLyAkRmxvd0ZpeE1lXHJcbiAgICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCAhPSBudWxsKSB7XHJcbiAgICAgIC8vICRGbG93Rml4TWVcclxuICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3JlbmRlcmVkSXRlbSA9IGl0ZW07XHJcbiAgICBpZiAoaXRlbSA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGVsID0gYXRvbS52aWV3cy5nZXRWaWV3KGl0ZW0pO1xyXG4gICAgLy8gJEZsb3dGaXhNZVxyXG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpOiBSZWFjdC5Ob2RlIHtcclxuICAgIHJldHVybiA8bnVjbGlkZS1yZWFjdC1tb3VudC1yb290IC8+O1xyXG4gIH1cclxufVxyXG4iXX0=