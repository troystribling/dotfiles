"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addTooltip;

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _shallowequal = _interopRequireDefault(require("shallowequal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const REREGISTER_DELAY = 100;

const _tooltipRequests = new Map();

const _createdTooltips = new WeakMap();

const _toDispose = new Set();

let _timeoutHandle;
/**
 * Adds a self-disposing Atom tooltip to a react element.
 *
 * Typical usage:
 * <div ref={addTooltip({title: 'My awesome tooltip', delay: 100, placement: 'top'})} />
 * or, if the ref needs to be preserved:
 * <div ref={c => {
 *   addTooltip({title: 'My awesome tooltip', delay: 100, placement: 'top'})(c);
 *   _myDiv = c;
 * }} />
 */


function addTooltip(options) {
  let node;
  return elementRef => {
    _scheduleTooltipMaintenance();

    if (elementRef == null) {
      if (node != null) {
        if (_tooltipRequests.has(node)) {
          _tooltipRequests.delete(node);
        } else {
          _toDispose.add(node);
        }
      }

      node = null;
      return;
    }

    node = _reactDom.default.findDOMNode(elementRef);

    _tooltipRequests.set(node, options);
  };
}

function _registrationUndoesDisposal(node, options) {
  const created = _createdTooltips.get(node);

  if (created == null) {
    return false;
  }

  return (0, _shallowequal.default)(options, created.options);
}

function _scheduleTooltipMaintenance() {
  if (_timeoutHandle != null) {
    return;
  }

  _timeoutHandle = setTimeout(() => _performMaintenance(), REREGISTER_DELAY);
}

function _performMaintenance() {
  _timeoutHandle = null;

  for (const [node, options] of _tooltipRequests.entries()) {
    if (_registrationUndoesDisposal(node, options)) {
      _toDispose.delete(node);

      _tooltipRequests.delete(node);
    }
  }

  _toDispose.forEach(node => {
    const created = _createdTooltips.get(node);

    if (created != null) {
      created.disposable.dispose();

      _createdTooltips.delete(node);
    }
  });

  _toDispose.clear();

  for (const [node, options] of _tooltipRequests.entries()) {
    // $FlowIgnore
    const disposable = atom.tooltips.add(node, {
      keyBindingTarget: node,
      ...options
    });

    _createdTooltips.set(node, {
      disposable,
      options
    });
  }

  _tooltipRequests.clear();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL2FkZFRvb2x0aXAuanMiXSwibmFtZXMiOlsiUkVSRUdJU1RFUl9ERUxBWSIsIl90b29sdGlwUmVxdWVzdHMiLCJNYXAiLCJfY3JlYXRlZFRvb2x0aXBzIiwiV2Vha01hcCIsIl90b0Rpc3Bvc2UiLCJTZXQiLCJfdGltZW91dEhhbmRsZSIsImFkZFRvb2x0aXAiLCJvcHRpb25zIiwibm9kZSIsImVsZW1lbnRSZWYiLCJfc2NoZWR1bGVUb29sdGlwTWFpbnRlbmFuY2UiLCJoYXMiLCJkZWxldGUiLCJhZGQiLCJSZWFjdERPTSIsImZpbmRET01Ob2RlIiwic2V0IiwiX3JlZ2lzdHJhdGlvblVuZG9lc0Rpc3Bvc2FsIiwiY3JlYXRlZCIsImdldCIsInNldFRpbWVvdXQiLCJfcGVyZm9ybU1haW50ZW5hbmNlIiwiZW50cmllcyIsImZvckVhY2giLCJkaXNwb3NhYmxlIiwiZGlzcG9zZSIsImNsZWFyIiwiYXRvbSIsInRvb2x0aXBzIiwia2V5QmluZGluZ1RhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOztBQUNBOztBQUNBOzs7Ozs7OztBQWRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQSxNQUFNQSxnQkFBZ0IsR0FBRyxHQUF6Qjs7QUFFQSxNQUFNQyxnQkFBdUQsR0FBRyxJQUFJQyxHQUFKLEVBQWhFOztBQUNBLE1BQU1DLGdCQUdMLEdBQUcsSUFBSUMsT0FBSixFQUhKOztBQUlBLE1BQU1DLFVBQXdCLEdBQUcsSUFBSUMsR0FBSixFQUFqQzs7QUFDQSxJQUFJQyxjQUFKO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ2UsU0FBU0MsVUFBVCxDQUNiQyxPQURhLEVBRWdDO0FBQzdDLE1BQUlDLElBQUo7QUFFQSxTQUFPQyxVQUFVLElBQUk7QUFDbkJDLElBQUFBLDJCQUEyQjs7QUFFM0IsUUFBSUQsVUFBVSxJQUFJLElBQWxCLEVBQXdCO0FBQ3RCLFVBQUlELElBQUksSUFBSSxJQUFaLEVBQWtCO0FBQ2hCLFlBQUlULGdCQUFnQixDQUFDWSxHQUFqQixDQUFxQkgsSUFBckIsQ0FBSixFQUFnQztBQUM5QlQsVUFBQUEsZ0JBQWdCLENBQUNhLE1BQWpCLENBQXdCSixJQUF4QjtBQUNELFNBRkQsTUFFTztBQUNMTCxVQUFBQSxVQUFVLENBQUNVLEdBQVgsQ0FBZUwsSUFBZjtBQUNEO0FBQ0Y7O0FBQ0RBLE1BQUFBLElBQUksR0FBRyxJQUFQO0FBRUE7QUFDRDs7QUFFREEsSUFBQUEsSUFBSSxHQUFLTSxrQkFBU0MsV0FBVCxDQUFxQk4sVUFBckIsQ0FBVDs7QUFDQVYsSUFBQUEsZ0JBQWdCLENBQUNpQixHQUFqQixDQUFxQlIsSUFBckIsRUFBMkJELE9BQTNCO0FBQ0QsR0FsQkQ7QUFtQkQ7O0FBRUQsU0FBU1UsMkJBQVQsQ0FDRVQsSUFERixFQUVFRCxPQUZGLEVBR0U7QUFDQSxRQUFNVyxPQUFPLEdBQUdqQixnQkFBZ0IsQ0FBQ2tCLEdBQWpCLENBQXFCWCxJQUFyQixDQUFoQjs7QUFDQSxNQUFJVSxPQUFPLElBQUksSUFBZixFQUFxQjtBQUNuQixXQUFPLEtBQVA7QUFDRDs7QUFFRCxTQUFPLDJCQUFhWCxPQUFiLEVBQXNCVyxPQUFPLENBQUNYLE9BQTlCLENBQVA7QUFDRDs7QUFFRCxTQUFTRywyQkFBVCxHQUE2QztBQUMzQyxNQUFJTCxjQUFjLElBQUksSUFBdEIsRUFBNEI7QUFDMUI7QUFDRDs7QUFFREEsRUFBQUEsY0FBYyxHQUFHZSxVQUFVLENBQUMsTUFBTUMsbUJBQW1CLEVBQTFCLEVBQThCdkIsZ0JBQTlCLENBQTNCO0FBQ0Q7O0FBRUQsU0FBU3VCLG1CQUFULEdBQXFDO0FBQ25DaEIsRUFBQUEsY0FBYyxHQUFHLElBQWpCOztBQUVBLE9BQUssTUFBTSxDQUFDRyxJQUFELEVBQU9ELE9BQVAsQ0FBWCxJQUE4QlIsZ0JBQWdCLENBQUN1QixPQUFqQixFQUE5QixFQUEwRDtBQUN4RCxRQUFJTCwyQkFBMkIsQ0FBQ1QsSUFBRCxFQUFPRCxPQUFQLENBQS9CLEVBQWdEO0FBQzlDSixNQUFBQSxVQUFVLENBQUNTLE1BQVgsQ0FBa0JKLElBQWxCOztBQUNBVCxNQUFBQSxnQkFBZ0IsQ0FBQ2EsTUFBakIsQ0FBd0JKLElBQXhCO0FBQ0Q7QUFDRjs7QUFFREwsRUFBQUEsVUFBVSxDQUFDb0IsT0FBWCxDQUFtQmYsSUFBSSxJQUFJO0FBQ3pCLFVBQU1VLE9BQU8sR0FBR2pCLGdCQUFnQixDQUFDa0IsR0FBakIsQ0FBcUJYLElBQXJCLENBQWhCOztBQUNBLFFBQUlVLE9BQU8sSUFBSSxJQUFmLEVBQXFCO0FBQ25CQSxNQUFBQSxPQUFPLENBQUNNLFVBQVIsQ0FBbUJDLE9BQW5COztBQUNBeEIsTUFBQUEsZ0JBQWdCLENBQUNXLE1BQWpCLENBQXdCSixJQUF4QjtBQUNEO0FBQ0YsR0FORDs7QUFPQUwsRUFBQUEsVUFBVSxDQUFDdUIsS0FBWDs7QUFFQSxPQUFLLE1BQU0sQ0FBQ2xCLElBQUQsRUFBT0QsT0FBUCxDQUFYLElBQThCUixnQkFBZ0IsQ0FBQ3VCLE9BQWpCLEVBQTlCLEVBQTBEO0FBQ3hEO0FBQ0EsVUFBTUUsVUFBVSxHQUFHRyxJQUFJLENBQUNDLFFBQUwsQ0FBY2YsR0FBZCxDQUFrQkwsSUFBbEIsRUFBd0I7QUFDekNxQixNQUFBQSxnQkFBZ0IsRUFBRXJCLElBRHVCO0FBRXpDLFNBQUdEO0FBRnNDLEtBQXhCLENBQW5COztBQUtBTixJQUFBQSxnQkFBZ0IsQ0FBQ2UsR0FBakIsQ0FBcUJSLElBQXJCLEVBQTJCO0FBQUNnQixNQUFBQSxVQUFEO0FBQWFqQixNQUFBQTtBQUFiLEtBQTNCO0FBQ0Q7O0FBQ0RSLEVBQUFBLGdCQUFnQixDQUFDMkIsS0FBakI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnc2hhbGxvd2VxdWFsJztcclxuXHJcbmNvbnN0IFJFUkVHSVNURVJfREVMQVkgPSAxMDA7XHJcblxyXG5jb25zdCBfdG9vbHRpcFJlcXVlc3RzOiBNYXA8RWxlbWVudCwgYXRvbSRUb29sdGlwc0FkZE9wdGlvbnM+ID0gbmV3IE1hcCgpO1xyXG5jb25zdCBfY3JlYXRlZFRvb2x0aXBzOiBXZWFrTWFwPFxyXG4gIEVsZW1lbnQsXHJcbiAge29wdGlvbnM6IGF0b20kVG9vbHRpcHNBZGRPcHRpb25zLCBkaXNwb3NhYmxlOiBJRGlzcG9zYWJsZX0sXHJcbj4gPSBuZXcgV2Vha01hcCgpO1xyXG5jb25zdCBfdG9EaXNwb3NlOiBTZXQ8RWxlbWVudD4gPSBuZXcgU2V0KCk7XHJcbmxldCBfdGltZW91dEhhbmRsZTogP1RpbWVvdXRJRDtcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgc2VsZi1kaXNwb3NpbmcgQXRvbSB0b29sdGlwIHRvIGEgcmVhY3QgZWxlbWVudC5cclxuICpcclxuICogVHlwaWNhbCB1c2FnZTpcclxuICogPGRpdiByZWY9e2FkZFRvb2x0aXAoe3RpdGxlOiAnTXkgYXdlc29tZSB0b29sdGlwJywgZGVsYXk6IDEwMCwgcGxhY2VtZW50OiAndG9wJ30pfSAvPlxyXG4gKiBvciwgaWYgdGhlIHJlZiBuZWVkcyB0byBiZSBwcmVzZXJ2ZWQ6XHJcbiAqIDxkaXYgcmVmPXtjID0+IHtcclxuICogICBhZGRUb29sdGlwKHt0aXRsZTogJ015IGF3ZXNvbWUgdG9vbHRpcCcsIGRlbGF5OiAxMDAsIHBsYWNlbWVudDogJ3RvcCd9KShjKTtcclxuICogICBfbXlEaXYgPSBjO1xyXG4gKiB9fSAvPlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkVG9vbHRpcChcclxuICBvcHRpb25zOiBhdG9tJFRvb2x0aXBzQWRkT3B0aW9ucyxcclxuKTogKGVsZW1lbnRSZWY6IFJlYWN0LkVsZW1lbnRSZWY8YW55PikgPT4gdm9pZCB7XHJcbiAgbGV0IG5vZGU6ID9FbGVtZW50O1xyXG5cclxuICByZXR1cm4gZWxlbWVudFJlZiA9PiB7XHJcbiAgICBfc2NoZWR1bGVUb29sdGlwTWFpbnRlbmFuY2UoKTtcclxuXHJcbiAgICBpZiAoZWxlbWVudFJlZiA9PSBudWxsKSB7XHJcbiAgICAgIGlmIChub2RlICE9IG51bGwpIHtcclxuICAgICAgICBpZiAoX3Rvb2x0aXBSZXF1ZXN0cy5oYXMobm9kZSkpIHtcclxuICAgICAgICAgIF90b29sdGlwUmVxdWVzdHMuZGVsZXRlKG5vZGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBfdG9EaXNwb3NlLmFkZChub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbm9kZSA9IG51bGw7XHJcblxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbm9kZSA9ICgoUmVhY3RET00uZmluZERPTU5vZGUoZWxlbWVudFJlZik6IGFueSk6IEVsZW1lbnQpO1xyXG4gICAgX3Rvb2x0aXBSZXF1ZXN0cy5zZXQobm9kZSwgb3B0aW9ucyk7XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gX3JlZ2lzdHJhdGlvblVuZG9lc0Rpc3Bvc2FsKFxyXG4gIG5vZGU6IEVsZW1lbnQsXHJcbiAgb3B0aW9uczogYXRvbSRUb29sdGlwc0FkZE9wdGlvbnMsXHJcbikge1xyXG4gIGNvbnN0IGNyZWF0ZWQgPSBfY3JlYXRlZFRvb2x0aXBzLmdldChub2RlKTtcclxuICBpZiAoY3JlYXRlZCA9PSBudWxsKSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc2hhbGxvd0VxdWFsKG9wdGlvbnMsIGNyZWF0ZWQub3B0aW9ucyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9zY2hlZHVsZVRvb2x0aXBNYWludGVuYW5jZSgpOiB2b2lkIHtcclxuICBpZiAoX3RpbWVvdXRIYW5kbGUgIT0gbnVsbCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgX3RpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KCgpID0+IF9wZXJmb3JtTWFpbnRlbmFuY2UoKSwgUkVSRUdJU1RFUl9ERUxBWSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9wZXJmb3JtTWFpbnRlbmFuY2UoKTogdm9pZCB7XHJcbiAgX3RpbWVvdXRIYW5kbGUgPSBudWxsO1xyXG5cclxuICBmb3IgKGNvbnN0IFtub2RlLCBvcHRpb25zXSBvZiBfdG9vbHRpcFJlcXVlc3RzLmVudHJpZXMoKSkge1xyXG4gICAgaWYgKF9yZWdpc3RyYXRpb25VbmRvZXNEaXNwb3NhbChub2RlLCBvcHRpb25zKSkge1xyXG4gICAgICBfdG9EaXNwb3NlLmRlbGV0ZShub2RlKTtcclxuICAgICAgX3Rvb2x0aXBSZXF1ZXN0cy5kZWxldGUobm9kZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfdG9EaXNwb3NlLmZvckVhY2gobm9kZSA9PiB7XHJcbiAgICBjb25zdCBjcmVhdGVkID0gX2NyZWF0ZWRUb29sdGlwcy5nZXQobm9kZSk7XHJcbiAgICBpZiAoY3JlYXRlZCAhPSBudWxsKSB7XHJcbiAgICAgIGNyZWF0ZWQuZGlzcG9zYWJsZS5kaXNwb3NlKCk7XHJcbiAgICAgIF9jcmVhdGVkVG9vbHRpcHMuZGVsZXRlKG5vZGUpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIF90b0Rpc3Bvc2UuY2xlYXIoKTtcclxuXHJcbiAgZm9yIChjb25zdCBbbm9kZSwgb3B0aW9uc10gb2YgX3Rvb2x0aXBSZXF1ZXN0cy5lbnRyaWVzKCkpIHtcclxuICAgIC8vICRGbG93SWdub3JlXHJcbiAgICBjb25zdCBkaXNwb3NhYmxlID0gYXRvbS50b29sdGlwcy5hZGQobm9kZSwge1xyXG4gICAgICBrZXlCaW5kaW5nVGFyZ2V0OiBub2RlLFxyXG4gICAgICAuLi5vcHRpb25zLFxyXG4gICAgfSk7XHJcblxyXG4gICAgX2NyZWF0ZWRUb29sdGlwcy5zZXQobm9kZSwge2Rpc3Bvc2FibGUsIG9wdGlvbnN9KTtcclxuICB9XHJcbiAgX3Rvb2x0aXBSZXF1ZXN0cy5jbGVhcigpO1xyXG59XHJcbiJdfQ==