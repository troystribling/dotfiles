"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global MutationObserver */
// We need a negative tabIndex to mark 'atom-text-editor' as focusable (as focus
// gets forwarded to the underlying input) yet not in the tabOrder so that
// shift-tabbing when the input is focused won't try to focus its own 'atom-text-editor'
// and appear to do nothing.  We can't use '-1' as we want to forward that to
// the underlying input if it is set on atom-text-editor
const FAKE_TAB_INDEX = '-2';

function _default(element) {
  const observer = new MutationObserver(() => {
    const tabIndex = element.getAttribute('tabindex');

    if (tabIndex == null || tabIndex === FAKE_TAB_INDEX) {
      return;
    }

    const input = element.querySelector('input');

    if (input == null) {
      return;
    }

    input.setAttribute('tabindex', tabIndex);
    element.setAttribute('tabindex', FAKE_TAB_INDEX);
  });
  observer.observe(element, {
    attributes: true,
    attributeFilter: ['tabindex']
  });
  return {
    dispose() {
      observer.disconnect();
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL2F0b21UYWJJbmRleEZvcndhcmRlci5qcyJdLCJuYW1lcyI6WyJGQUtFX1RBQl9JTkRFWCIsImVsZW1lbnQiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJ0YWJJbmRleCIsImdldEF0dHJpYnV0ZSIsImlucHV0IiwicXVlcnlTZWxlY3RvciIsInNldEF0dHJpYnV0ZSIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlRmlsdGVyIiwiZGlzcG9zZSIsImRpc2Nvbm5lY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLGNBQWMsR0FBRyxJQUF2Qjs7QUFFZSxrQkFBU0MsT0FBVCxFQUE0QztBQUN6RCxRQUFNQyxRQUFRLEdBQUcsSUFBSUMsZ0JBQUosQ0FBcUIsTUFBTTtBQUMxQyxVQUFNQyxRQUFRLEdBQUdILE9BQU8sQ0FBQ0ksWUFBUixDQUFxQixVQUFyQixDQUFqQjs7QUFDQSxRQUFJRCxRQUFRLElBQUksSUFBWixJQUFvQkEsUUFBUSxLQUFLSixjQUFyQyxFQUFxRDtBQUNuRDtBQUNEOztBQUNELFVBQU1NLEtBQUssR0FBR0wsT0FBTyxDQUFDTSxhQUFSLENBQXNCLE9BQXRCLENBQWQ7O0FBQ0EsUUFBSUQsS0FBSyxJQUFJLElBQWIsRUFBbUI7QUFDakI7QUFDRDs7QUFDREEsSUFBQUEsS0FBSyxDQUFDRSxZQUFOLENBQW1CLFVBQW5CLEVBQStCSixRQUEvQjtBQUNBSCxJQUFBQSxPQUFPLENBQUNPLFlBQVIsQ0FBcUIsVUFBckIsRUFBaUNSLGNBQWpDO0FBQ0QsR0FYZ0IsQ0FBakI7QUFhQUUsRUFBQUEsUUFBUSxDQUFDTyxPQUFULENBQWlCUixPQUFqQixFQUEwQjtBQUN4QlMsSUFBQUEsVUFBVSxFQUFFLElBRFk7QUFFeEJDLElBQUFBLGVBQWUsRUFBRSxDQUFDLFVBQUQ7QUFGTyxHQUExQjtBQUtBLFNBQU87QUFDTEMsSUFBQUEsT0FBTyxHQUFTO0FBQ2RWLE1BQUFBLFFBQVEsQ0FBQ1csVUFBVDtBQUNEOztBQUhJLEdBQVA7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3cgc3RyaWN0LWxvY2FsXHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG4vKiBnbG9iYWwgTXV0YXRpb25PYnNlcnZlciAqL1xyXG5cclxuLy8gV2UgbmVlZCBhIG5lZ2F0aXZlIHRhYkluZGV4IHRvIG1hcmsgJ2F0b20tdGV4dC1lZGl0b3InIGFzIGZvY3VzYWJsZSAoYXMgZm9jdXNcclxuLy8gZ2V0cyBmb3J3YXJkZWQgdG8gdGhlIHVuZGVybHlpbmcgaW5wdXQpIHlldCBub3QgaW4gdGhlIHRhYk9yZGVyIHNvIHRoYXRcclxuLy8gc2hpZnQtdGFiYmluZyB3aGVuIHRoZSBpbnB1dCBpcyBmb2N1c2VkIHdvbid0IHRyeSB0byBmb2N1cyBpdHMgb3duICdhdG9tLXRleHQtZWRpdG9yJ1xyXG4vLyBhbmQgYXBwZWFyIHRvIGRvIG5vdGhpbmcuICBXZSBjYW4ndCB1c2UgJy0xJyBhcyB3ZSB3YW50IHRvIGZvcndhcmQgdGhhdCB0b1xyXG4vLyB0aGUgdW5kZXJseWluZyBpbnB1dCBpZiBpdCBpcyBzZXQgb24gYXRvbS10ZXh0LWVkaXRvclxyXG5jb25zdCBGQUtFX1RBQl9JTkRFWCA9ICctMic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbGVtZW50OiBIVE1MRWxlbWVudCk6IElEaXNwb3NhYmxlIHtcclxuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcclxuICAgIGNvbnN0IHRhYkluZGV4ID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RhYmluZGV4Jyk7XHJcbiAgICBpZiAodGFiSW5kZXggPT0gbnVsbCB8fCB0YWJJbmRleCA9PT0gRkFLRV9UQUJfSU5ERVgpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgaW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XHJcbiAgICBpZiAoaW5wdXQgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpbnB1dC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgdGFiSW5kZXgpO1xyXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgRkFLRV9UQUJfSU5ERVgpO1xyXG4gIH0pO1xyXG5cclxuICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQsIHtcclxuICAgIGF0dHJpYnV0ZXM6IHRydWUsXHJcbiAgICBhdHRyaWJ1dGVGaWx0ZXI6IFsndGFiaW5kZXgnXSxcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG4iXX0=