"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global getSelection */

/**
 * Atom by default disables text selection by default on all the non editor
 * views. In order to enable it, in a container you need to add the props
 *   className="native-key-bindings"
 *   tabIndex={-1}
 * and add the style
 *   -webkit-user-select: initial;
 *
 * The downside of this approach is that by default, the onClick events
 * are going to be triggered when you try to select text.
 * This is where this module comes in, it will prevent the callback from
 * being triggered in a text selection event.
 *
 * To use it, just wrap your callback in a ignoreTextSelectionEvents call
 *   onClick={ignoreTextSelectionEvents(this._onClick)}
 */
const ignoreTextSelectionEvents = cb => {
  return e => {
    // Ignore text selection
    const selection = getSelection();

    if (selection != null && selection.type === 'Range') {
      e.preventDefault();
      return;
    }

    cb && cb(e);
  };
};

var _default = ignoreTextSelectionEvents;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL2lnbm9yZVRleHRTZWxlY3Rpb25FdmVudHMuanMiXSwibmFtZXMiOlsiaWdub3JlVGV4dFNlbGVjdGlvbkV2ZW50cyIsImNiIiwiZSIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsInR5cGUiLCJwcmV2ZW50RGVmYXVsdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSx5QkFBeUIsR0FDN0JDLEVBRGdDLElBRTdCO0FBQ0gsU0FBUUMsQ0FBRCxJQUE4QjtBQUNuQztBQUNBLFVBQU1DLFNBQVMsR0FBR0MsWUFBWSxFQUE5Qjs7QUFDQSxRQUFJRCxTQUFTLElBQUksSUFBYixJQUFxQkEsU0FBUyxDQUFDRSxJQUFWLEtBQW1CLE9BQTVDLEVBQXFEO0FBQ25ESCxNQUFBQSxDQUFDLENBQUNJLGNBQUY7QUFDQTtBQUNEOztBQUVETCxJQUFBQSxFQUFFLElBQUlBLEVBQUUsQ0FBQ0MsQ0FBRCxDQUFSO0FBQ0QsR0FURDtBQVVELENBYkQ7O2VBZWVGLHlCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3RcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qIGdsb2JhbCBnZXRTZWxlY3Rpb24gKi9cclxuXHJcbi8qKlxyXG4gKiBBdG9tIGJ5IGRlZmF1bHQgZGlzYWJsZXMgdGV4dCBzZWxlY3Rpb24gYnkgZGVmYXVsdCBvbiBhbGwgdGhlIG5vbiBlZGl0b3JcclxuICogdmlld3MuIEluIG9yZGVyIHRvIGVuYWJsZSBpdCwgaW4gYSBjb250YWluZXIgeW91IG5lZWQgdG8gYWRkIHRoZSBwcm9wc1xyXG4gKiAgIGNsYXNzTmFtZT1cIm5hdGl2ZS1rZXktYmluZGluZ3NcIlxyXG4gKiAgIHRhYkluZGV4PXstMX1cclxuICogYW5kIGFkZCB0aGUgc3R5bGVcclxuICogICAtd2Via2l0LXVzZXItc2VsZWN0OiBpbml0aWFsO1xyXG4gKlxyXG4gKiBUaGUgZG93bnNpZGUgb2YgdGhpcyBhcHByb2FjaCBpcyB0aGF0IGJ5IGRlZmF1bHQsIHRoZSBvbkNsaWNrIGV2ZW50c1xyXG4gKiBhcmUgZ29pbmcgdG8gYmUgdHJpZ2dlcmVkIHdoZW4geW91IHRyeSB0byBzZWxlY3QgdGV4dC5cclxuICogVGhpcyBpcyB3aGVyZSB0aGlzIG1vZHVsZSBjb21lcyBpbiwgaXQgd2lsbCBwcmV2ZW50IHRoZSBjYWxsYmFjayBmcm9tXHJcbiAqIGJlaW5nIHRyaWdnZXJlZCBpbiBhIHRleHQgc2VsZWN0aW9uIGV2ZW50LlxyXG4gKlxyXG4gKiBUbyB1c2UgaXQsIGp1c3Qgd3JhcCB5b3VyIGNhbGxiYWNrIGluIGEgaWdub3JlVGV4dFNlbGVjdGlvbkV2ZW50cyBjYWxsXHJcbiAqICAgb25DbGljaz17aWdub3JlVGV4dFNlbGVjdGlvbkV2ZW50cyh0aGlzLl9vbkNsaWNrKX1cclxuICovXHJcblxyXG5jb25zdCBpZ25vcmVUZXh0U2VsZWN0aW9uRXZlbnRzID0gKFxyXG4gIGNiPzogKGU6IFN5bnRoZXRpY01vdXNlRXZlbnQ8PikgPT4gbWl4ZWQsXHJcbikgPT4ge1xyXG4gIHJldHVybiAoZTogU3ludGhldGljTW91c2VFdmVudDw+KSA9PiB7XHJcbiAgICAvLyBJZ25vcmUgdGV4dCBzZWxlY3Rpb25cclxuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbigpO1xyXG4gICAgaWYgKHNlbGVjdGlvbiAhPSBudWxsICYmIHNlbGVjdGlvbi50eXBlID09PSAnUmFuZ2UnKSB7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNiICYmIGNiKGUpO1xyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpZ25vcmVUZXh0U2VsZWN0aW9uRXZlbnRzO1xyXG4iXX0=