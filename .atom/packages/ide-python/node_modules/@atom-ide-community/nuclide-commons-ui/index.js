"use strict";

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _dedent = _interopRequireDefault(require("dedent"));

var _fs = _interopRequireDefault(require("fs"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// Requiring this module will load all stylesheets in styles/.
// The exported value can be disposed to remove the stylesheets.
// eslint-disable-next-line nuclide-internal/prefer-nuclide-uri
const ttfUri = _nuclideUri.default.nuclideUriToUri(_path.default.join(__dirname, 'styles', 'nuclicons.ttf'));

const newStyle = document.createElement('style');
newStyle.appendChild(document.createTextNode((0, _dedent.default)`
    @font-face {
      font-family: 'nuclicons';
      src: url('${ttfUri}') format('truetype');
      font-weight: normal;
      font-style: normal;
    }
  `));
(0, _nullthrows.default)(document.head).appendChild(newStyle);

const styleDir = _path.default.join(__dirname, 'styles');

const styleDisposables = new _UniversalDisposable.default(..._fs.default.readdirSync(styleDir).filter(file => ['.less', '.css'].includes(_path.default.extname(file))).map(file => atom.themes.requireStylesheet(_path.default.join(styleDir, file))), () => newStyle.remove());
module.exports = styleDisposables; // eslint-disable-line nuclide-internal/no-commonjs
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL2luZGV4LmpzIl0sIm5hbWVzIjpbInR0ZlVyaSIsIm51Y2xpZGVVcmkiLCJudWNsaWRlVXJpVG9VcmkiLCJwYXRoIiwiam9pbiIsIl9fZGlybmFtZSIsIm5ld1N0eWxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJzdHlsZURpciIsInN0eWxlRGlzcG9zYWJsZXMiLCJVbml2ZXJzYWxEaXNwb3NhYmxlIiwiZnMiLCJyZWFkZGlyU3luYyIsImZpbHRlciIsImZpbGUiLCJpbmNsdWRlcyIsImV4dG5hbWUiLCJtYXAiLCJhdG9tIiwidGhlbWVzIiwicmVxdWlyZVN0eWxlc2hlZXQiLCJyZW1vdmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQWVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOzs7O0FBckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBT0E7QUFHQSxNQUFNQSxNQUFNLEdBQUdDLG9CQUFXQyxlQUFYLENBQ2JDLGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixRQUFyQixFQUErQixlQUEvQixDQURhLENBQWY7O0FBR0EsTUFBTUMsUUFBUSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBakI7QUFDQUYsUUFBUSxDQUFDRyxXQUFULENBQ0VGLFFBQVEsQ0FBQ0csY0FBVCxDQUF3QixvQkFBTztBQUNqQztBQUNBO0FBQ0Esa0JBQWtCVixNQUFPO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLEdBUEUsQ0FERjtBQVVBLHlCQUFXTyxRQUFRLENBQUNJLElBQXBCLEVBQTBCRixXQUExQixDQUFzQ0gsUUFBdEM7O0FBRUEsTUFBTU0sUUFBUSxHQUFHVCxjQUFLQyxJQUFMLENBQVVDLFNBQVYsRUFBcUIsUUFBckIsQ0FBakI7O0FBQ0EsTUFBTVEsZ0JBQWdCLEdBQUcsSUFBSUMsNEJBQUosQ0FDdkIsR0FBR0MsWUFDQUMsV0FEQSxDQUNZSixRQURaLEVBRUFLLE1BRkEsQ0FFT0MsSUFBSSxJQUFJLENBQUMsT0FBRCxFQUFVLE1BQVYsRUFBa0JDLFFBQWxCLENBQTJCaEIsY0FBS2lCLE9BQUwsQ0FBYUYsSUFBYixDQUEzQixDQUZmLEVBR0FHLEdBSEEsQ0FHSUgsSUFBSSxJQUFJSSxJQUFJLENBQUNDLE1BQUwsQ0FBWUMsaUJBQVosQ0FBOEJyQixjQUFLQyxJQUFMLENBQVVRLFFBQVYsRUFBb0JNLElBQXBCLENBQTlCLENBSFosQ0FEb0IsRUFLdkIsTUFBTVosUUFBUSxDQUFDbUIsTUFBVCxFQUxpQixDQUF6QjtBQVFBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJkLGdCQUFqQixDLENBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuLy8gUmVxdWlyaW5nIHRoaXMgbW9kdWxlIHdpbGwgbG9hZCBhbGwgc3R5bGVzaGVldHMgaW4gc3R5bGVzLy5cclxuLy8gVGhlIGV4cG9ydGVkIHZhbHVlIGNhbiBiZSBkaXNwb3NlZCB0byByZW1vdmUgdGhlIHN0eWxlc2hlZXRzLlxyXG5cclxuaW1wb3J0IG51Y2xpZGVVcmkgZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvbnVjbGlkZVVyaSc7XHJcbmltcG9ydCBVbml2ZXJzYWxEaXNwb3NhYmxlIGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL1VuaXZlcnNhbERpc3Bvc2FibGUnO1xyXG5pbXBvcnQgZGVkZW50IGZyb20gJ2RlZGVudCc7XHJcbmltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBudWxsdGhyb3dzIGZyb20gJ251bGx0aHJvd3MnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbnVjbGlkZS1pbnRlcm5hbC9wcmVmZXItbnVjbGlkZS11cmlcclxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XHJcblxyXG5jb25zdCB0dGZVcmkgPSBudWNsaWRlVXJpLm51Y2xpZGVVcmlUb1VyaShcclxuICBwYXRoLmpvaW4oX19kaXJuYW1lLCAnc3R5bGVzJywgJ251Y2xpY29ucy50dGYnKSxcclxuKTtcclxuY29uc3QgbmV3U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xyXG5uZXdTdHlsZS5hcHBlbmRDaGlsZChcclxuICBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkZWRlbnRgXHJcbiAgICBAZm9udC1mYWNlIHtcclxuICAgICAgZm9udC1mYW1pbHk6ICdudWNsaWNvbnMnO1xyXG4gICAgICBzcmM6IHVybCgnJHt0dGZVcml9JykgZm9ybWF0KCd0cnVldHlwZScpO1xyXG4gICAgICBmb250LXdlaWdodDogbm9ybWFsO1xyXG4gICAgICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgICB9XHJcbiAgYCksXHJcbik7XHJcbm51bGx0aHJvd3MoZG9jdW1lbnQuaGVhZCkuYXBwZW5kQ2hpbGQobmV3U3R5bGUpO1xyXG5cclxuY29uc3Qgc3R5bGVEaXIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnc3R5bGVzJyk7XHJcbmNvbnN0IHN0eWxlRGlzcG9zYWJsZXMgPSBuZXcgVW5pdmVyc2FsRGlzcG9zYWJsZShcclxuICAuLi5mc1xyXG4gICAgLnJlYWRkaXJTeW5jKHN0eWxlRGlyKVxyXG4gICAgLmZpbHRlcihmaWxlID0+IFsnLmxlc3MnLCAnLmNzcyddLmluY2x1ZGVzKHBhdGguZXh0bmFtZShmaWxlKSkpXHJcbiAgICAubWFwKGZpbGUgPT4gYXRvbS50aGVtZXMucmVxdWlyZVN0eWxlc2hlZXQocGF0aC5qb2luKHN0eWxlRGlyLCBmaWxlKSkpLFxyXG4gICgpID0+IG5ld1N0eWxlLnJlbW92ZSgpLFxyXG4pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZURpc3Bvc2FibGVzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG51Y2xpZGUtaW50ZXJuYWwvbm8tY29tbW9uanNcclxuIl19