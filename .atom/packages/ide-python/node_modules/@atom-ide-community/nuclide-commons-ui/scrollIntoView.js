"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.scrollIntoView = scrollIntoView;
exports.scrollIntoViewIfNeeded = scrollIntoViewIfNeeded;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* globals getComputedStyle */

/**
 * Use these functions instead of `Element::scrollIntoView()` and
 * `Element::scrollIntoViewIfNeeded()`!
 *
 * We've had a recurring issue in Nuclide (e.g. T20028138) where the UI would shift, leaving part of
 * the workspace element offscreen and a blank area in the window. This was caused by called to the
 * native `scrollIntoView()` and `scrollIntoViewIfNeeded()` which, according to the spec, has two
 * potentially surprising behaviors:
 *
 * 1. [It scrolls every scrollable ancestor (not just the closest)][1], where
 * 2. "scrollable" is [explicitly defined][2] to include elements with `overflow: hidden`
 *
 * This is surprising because `overflow: hidden` is typically used to make elements *not
 * scrollable*.
 *
 * Once the `overflow: hidden` element is scrolled, the user has no way to return it to its original
 * position (as it has no scrollbars).
 *
 * Note that this API doesn't support smooth scrolling. If that becomes necessary, we'll need to
 * come up with a better fix.
 *
 * It's tempting to assume that using `scrollIntoViewIfNeeded()` would fix this issue, however, if
 * the window is small enough so that no amount of scrolling the desired scrollable element would
 * ever reveal the element you're trying to, the browser will keep scrolling ancestors.
 *
 * [1]: https://drafts.csswg.org/cssom-view/#element-scrolling-members
 * [2]: https://drafts.csswg.org/cssom-view/#scrolling-box
 */
function scrollIntoView(el, alignToTop) {
  const scrollTops = getScrollTops(el);
  el.scrollIntoView(alignToTop); // eslint-disable-line nuclide-internal/dom-apis

  restoreOverflowHiddenScrollTops(scrollTops);
}

function scrollIntoViewIfNeeded(el, center) {
  const scrollTops = getScrollTops(el); // $FlowIgnore: This should be added to the element type.

  el.scrollIntoViewIfNeeded(center); // eslint-disable-line nuclide-internal/dom-apis

  restoreOverflowHiddenScrollTops(scrollTops);
}

function getScrollTops(el_) {
  let el = el_;
  const scrollTops = new Map();

  while (el != null) {
    scrollTops.set(el, el.scrollTop);
    el = el.parentElement;
  }

  return scrollTops;
}

function restoreOverflowHiddenScrollTops(scrollTops) {
  scrollTops.forEach((scrollTop, el) => {
    if (el.scrollTop !== scrollTop && isOverflowHidden(el)) {
      el.scrollTop = scrollTop;
    }
  });
}

function isOverflowHidden(el) {
  // $FlowFixMe(>=0.68.0) Flow suppress (T27187857)
  const overflowStyle = el.style == null ? null : el.style.overflow;
  const overflow = overflowStyle || getComputedStyle(el).overflow;
  return overflow === 'hidden';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zLXVpL3Njcm9sbEludG9WaWV3LmpzIl0sIm5hbWVzIjpbInNjcm9sbEludG9WaWV3IiwiZWwiLCJhbGlnblRvVG9wIiwic2Nyb2xsVG9wcyIsImdldFNjcm9sbFRvcHMiLCJyZXN0b3JlT3ZlcmZsb3dIaWRkZW5TY3JvbGxUb3BzIiwic2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCIsImNlbnRlciIsImVsXyIsIk1hcCIsInNldCIsInNjcm9sbFRvcCIsInBhcmVudEVsZW1lbnQiLCJmb3JFYWNoIiwiaXNPdmVyZmxvd0hpZGRlbiIsIm92ZXJmbG93U3R5bGUiLCJzdHlsZSIsIm92ZXJmbG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU8sU0FBU0EsY0FBVCxDQUF3QkMsRUFBeEIsRUFBcUNDLFVBQXJDLEVBQWlFO0FBQ3RFLFFBQU1DLFVBQVUsR0FBR0MsYUFBYSxDQUFDSCxFQUFELENBQWhDO0FBQ0FBLEVBQUFBLEVBQUUsQ0FBQ0QsY0FBSCxDQUFrQkUsVUFBbEIsRUFGc0UsQ0FFdkM7O0FBQy9CRyxFQUFBQSwrQkFBK0IsQ0FBQ0YsVUFBRCxDQUEvQjtBQUNEOztBQUVNLFNBQVNHLHNCQUFULENBQWdDTCxFQUFoQyxFQUE2Q00sTUFBN0MsRUFBcUU7QUFDMUUsUUFBTUosVUFBVSxHQUFHQyxhQUFhLENBQUNILEVBQUQsQ0FBaEMsQ0FEMEUsQ0FFMUU7O0FBQ0FBLEVBQUFBLEVBQUUsQ0FBQ0ssc0JBQUgsQ0FBMEJDLE1BQTFCLEVBSDBFLENBR3ZDOztBQUNuQ0YsRUFBQUEsK0JBQStCLENBQUNGLFVBQUQsQ0FBL0I7QUFDRDs7QUFFRCxTQUFTQyxhQUFULENBQXVCSSxHQUF2QixFQUEyRDtBQUN6RCxNQUFJUCxFQUFFLEdBQUdPLEdBQVQ7QUFDQSxRQUFNTCxVQUFVLEdBQUcsSUFBSU0sR0FBSixFQUFuQjs7QUFDQSxTQUFPUixFQUFFLElBQUksSUFBYixFQUFtQjtBQUNqQkUsSUFBQUEsVUFBVSxDQUFDTyxHQUFYLENBQWVULEVBQWYsRUFBbUJBLEVBQUUsQ0FBQ1UsU0FBdEI7QUFDQVYsSUFBQUEsRUFBRSxHQUFHQSxFQUFFLENBQUNXLGFBQVI7QUFDRDs7QUFDRCxTQUFPVCxVQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsK0JBQVQsQ0FDRUYsVUFERixFQUVRO0FBQ05BLEVBQUFBLFVBQVUsQ0FBQ1UsT0FBWCxDQUFtQixDQUFDRixTQUFELEVBQVlWLEVBQVosS0FBbUI7QUFDcEMsUUFBSUEsRUFBRSxDQUFDVSxTQUFILEtBQWlCQSxTQUFqQixJQUE4QkcsZ0JBQWdCLENBQUNiLEVBQUQsQ0FBbEQsRUFBd0Q7QUFDdERBLE1BQUFBLEVBQUUsQ0FBQ1UsU0FBSCxHQUFlQSxTQUFmO0FBQ0Q7QUFDRixHQUpEO0FBS0Q7O0FBRUQsU0FBU0csZ0JBQVQsQ0FBMEJiLEVBQTFCLEVBQWdEO0FBQzlDO0FBQ0EsUUFBTWMsYUFBYSxHQUFHZCxFQUFFLENBQUNlLEtBQUgsSUFBWSxJQUFaLEdBQW1CLElBQW5CLEdBQTJCZixFQUFFLENBQUNlLEtBQUosQ0FBZ0JDLFFBQWhFO0FBQ0EsUUFBTUEsUUFBUSxHQUFHRixhQUFhLElBQUlHLGdCQUFnQixDQUFDakIsRUFBRCxDQUFoQixDQUFxQmdCLFFBQXZEO0FBQ0EsU0FBT0EsUUFBUSxLQUFLLFFBQXBCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuLyogZ2xvYmFscyBnZXRDb21wdXRlZFN0eWxlICovXHJcblxyXG4vKipcclxuICogVXNlIHRoZXNlIGZ1bmN0aW9ucyBpbnN0ZWFkIG9mIGBFbGVtZW50OjpzY3JvbGxJbnRvVmlldygpYCBhbmRcclxuICogYEVsZW1lbnQ6OnNjcm9sbEludG9WaWV3SWZOZWVkZWQoKWAhXHJcbiAqXHJcbiAqIFdlJ3ZlIGhhZCBhIHJlY3VycmluZyBpc3N1ZSBpbiBOdWNsaWRlIChlLmcuIFQyMDAyODEzOCkgd2hlcmUgdGhlIFVJIHdvdWxkIHNoaWZ0LCBsZWF2aW5nIHBhcnQgb2ZcclxuICogdGhlIHdvcmtzcGFjZSBlbGVtZW50IG9mZnNjcmVlbiBhbmQgYSBibGFuayBhcmVhIGluIHRoZSB3aW5kb3cuIFRoaXMgd2FzIGNhdXNlZCBieSBjYWxsZWQgdG8gdGhlXHJcbiAqIG5hdGl2ZSBgc2Nyb2xsSW50b1ZpZXcoKWAgYW5kIGBzY3JvbGxJbnRvVmlld0lmTmVlZGVkKClgIHdoaWNoLCBhY2NvcmRpbmcgdG8gdGhlIHNwZWMsIGhhcyB0d29cclxuICogcG90ZW50aWFsbHkgc3VycHJpc2luZyBiZWhhdmlvcnM6XHJcbiAqXHJcbiAqIDEuIFtJdCBzY3JvbGxzIGV2ZXJ5IHNjcm9sbGFibGUgYW5jZXN0b3IgKG5vdCBqdXN0IHRoZSBjbG9zZXN0KV1bMV0sIHdoZXJlXHJcbiAqIDIuIFwic2Nyb2xsYWJsZVwiIGlzIFtleHBsaWNpdGx5IGRlZmluZWRdWzJdIHRvIGluY2x1ZGUgZWxlbWVudHMgd2l0aCBgb3ZlcmZsb3c6IGhpZGRlbmBcclxuICpcclxuICogVGhpcyBpcyBzdXJwcmlzaW5nIGJlY2F1c2UgYG92ZXJmbG93OiBoaWRkZW5gIGlzIHR5cGljYWxseSB1c2VkIHRvIG1ha2UgZWxlbWVudHMgKm5vdFxyXG4gKiBzY3JvbGxhYmxlKi5cclxuICpcclxuICogT25jZSB0aGUgYG92ZXJmbG93OiBoaWRkZW5gIGVsZW1lbnQgaXMgc2Nyb2xsZWQsIHRoZSB1c2VyIGhhcyBubyB3YXkgdG8gcmV0dXJuIGl0IHRvIGl0cyBvcmlnaW5hbFxyXG4gKiBwb3NpdGlvbiAoYXMgaXQgaGFzIG5vIHNjcm9sbGJhcnMpLlxyXG4gKlxyXG4gKiBOb3RlIHRoYXQgdGhpcyBBUEkgZG9lc24ndCBzdXBwb3J0IHNtb290aCBzY3JvbGxpbmcuIElmIHRoYXQgYmVjb21lcyBuZWNlc3NhcnksIHdlJ2xsIG5lZWQgdG9cclxuICogY29tZSB1cCB3aXRoIGEgYmV0dGVyIGZpeC5cclxuICpcclxuICogSXQncyB0ZW1wdGluZyB0byBhc3N1bWUgdGhhdCB1c2luZyBgc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCgpYCB3b3VsZCBmaXggdGhpcyBpc3N1ZSwgaG93ZXZlciwgaWZcclxuICogdGhlIHdpbmRvdyBpcyBzbWFsbCBlbm91Z2ggc28gdGhhdCBubyBhbW91bnQgb2Ygc2Nyb2xsaW5nIHRoZSBkZXNpcmVkIHNjcm9sbGFibGUgZWxlbWVudCB3b3VsZFxyXG4gKiBldmVyIHJldmVhbCB0aGUgZWxlbWVudCB5b3UncmUgdHJ5aW5nIHRvLCB0aGUgYnJvd3NlciB3aWxsIGtlZXAgc2Nyb2xsaW5nIGFuY2VzdG9ycy5cclxuICpcclxuICogWzFdOiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20tdmlldy8jZWxlbWVudC1zY3JvbGxpbmctbWVtYmVyc1xyXG4gKiBbMl06IGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS12aWV3LyNzY3JvbGxpbmctYm94XHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3KGVsOiBFbGVtZW50LCBhbGlnblRvVG9wPzogYm9vbGVhbik6IHZvaWQge1xyXG4gIGNvbnN0IHNjcm9sbFRvcHMgPSBnZXRTY3JvbGxUb3BzKGVsKTtcclxuICBlbC5zY3JvbGxJbnRvVmlldyhhbGlnblRvVG9wKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBudWNsaWRlLWludGVybmFsL2RvbS1hcGlzXHJcbiAgcmVzdG9yZU92ZXJmbG93SGlkZGVuU2Nyb2xsVG9wcyhzY3JvbGxUb3BzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEludG9WaWV3SWZOZWVkZWQoZWw6IEVsZW1lbnQsIGNlbnRlcj86IGJvb2xlYW4pOiB2b2lkIHtcclxuICBjb25zdCBzY3JvbGxUb3BzID0gZ2V0U2Nyb2xsVG9wcyhlbCk7XHJcbiAgLy8gJEZsb3dJZ25vcmU6IFRoaXMgc2hvdWxkIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50IHR5cGUuXHJcbiAgZWwuc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZChjZW50ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG51Y2xpZGUtaW50ZXJuYWwvZG9tLWFwaXNcclxuICByZXN0b3JlT3ZlcmZsb3dIaWRkZW5TY3JvbGxUb3BzKHNjcm9sbFRvcHMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTY3JvbGxUb3BzKGVsXzogRWxlbWVudCk6IE1hcDxFbGVtZW50LCBudW1iZXI+IHtcclxuICBsZXQgZWwgPSBlbF87XHJcbiAgY29uc3Qgc2Nyb2xsVG9wcyA9IG5ldyBNYXAoKTtcclxuICB3aGlsZSAoZWwgIT0gbnVsbCkge1xyXG4gICAgc2Nyb2xsVG9wcy5zZXQoZWwsIGVsLnNjcm9sbFRvcCk7XHJcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XHJcbiAgfVxyXG4gIHJldHVybiBzY3JvbGxUb3BzO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXN0b3JlT3ZlcmZsb3dIaWRkZW5TY3JvbGxUb3BzKFxyXG4gIHNjcm9sbFRvcHM6IE1hcDxFbGVtZW50LCBudW1iZXI+LFxyXG4pOiB2b2lkIHtcclxuICBzY3JvbGxUb3BzLmZvckVhY2goKHNjcm9sbFRvcCwgZWwpID0+IHtcclxuICAgIGlmIChlbC5zY3JvbGxUb3AgIT09IHNjcm9sbFRvcCAmJiBpc092ZXJmbG93SGlkZGVuKGVsKSkge1xyXG4gICAgICBlbC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT3ZlcmZsb3dIaWRkZW4oZWw6IEVsZW1lbnQpOiBib29sZWFuIHtcclxuICAvLyAkRmxvd0ZpeE1lKD49MC42OC4wKSBGbG93IHN1cHByZXNzIChUMjcxODc4NTcpXHJcbiAgY29uc3Qgb3ZlcmZsb3dTdHlsZSA9IGVsLnN0eWxlID09IG51bGwgPyBudWxsIDogKGVsLnN0eWxlOiBhbnkpLm92ZXJmbG93O1xyXG4gIGNvbnN0IG92ZXJmbG93ID0gb3ZlcmZsb3dTdHlsZSB8fCBnZXRDb21wdXRlZFN0eWxlKGVsKS5vdmVyZmxvdztcclxuICByZXR1cm4gb3ZlcmZsb3cgPT09ICdoaWRkZW4nO1xyXG59XHJcbiJdfQ==