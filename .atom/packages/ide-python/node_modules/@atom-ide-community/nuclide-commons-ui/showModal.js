"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = showModal;

var _assert = _interopRequireDefault(require("assert"));

var React = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _TabbableContainer = _interopRequireDefault(require("./TabbableContainer"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global Node */

/* global HTMLElement */

/**
 * Shows a modal dialog that renders a React element as its content.
 * The modal is automatically hidden when the user clicks outside of it, and on core:cancel (esc).
 * The modal panel unmounts its React component and destroys the panel as soon as it is hidden;
 * you may not hide the panel and then re-show it later.
 * Returns a disposable that you may use to hide and destroy the modal.
 */
function showModal(contentFactory, options = defaults) {
  const hostElement = document.createElement('div');
  const atomPanel = atom.workspace.addModalPanel({
    item: hostElement,
    priority: options.priority,
    className: options.className
  });

  const shouldDismissOnClickOutsideModal = options.shouldDismissOnClickOutsideModal || (() => true);

  const shouldDismissOnPressEscape = options.shouldDismissOnPressEscape || (() => true);

  const element = atomPanel.getElement();
  const previouslyFocusedElement = document.activeElement;
  const disposable = new _UniversalDisposable.default(_rxjsCompatUmdMin.Observable.fromEvent(document, 'mousedown').subscribe(({
    target
  }) => {
    if (!shouldDismissOnClickOutsideModal()) {
      return;
    }

    (0, _assert.default)(target instanceof Node);

    if (!atomPanel.getItem().contains(target) && // don't count clicks on notifications or tooltips as clicks 'outside'
    target.closest('atom-notifications, .tooltip') == null) {
      atomPanel.hide();
    }
  }), atomPanel.onDidChangeVisible(visible => {
    if (!visible) {
      disposable.dispose();
    }
  }), atom.commands.add('body', 'core:cancel', () => {
    if (shouldDismissOnPressEscape()) {
      disposable.dispose();
    }
  }), () => {
    // Call onDismiss before unmounting the component and destroying the panel:
    if (options.onDismiss) {
      options.onDismiss();
    }

    _reactDom.default.unmountComponentAtNode(hostElement);

    atomPanel.destroy();

    if (previouslyFocusedElement != null) {
      previouslyFocusedElement.focus();
    }
  });

  _reactDom.default.render( /*#__PURE__*/React.createElement(ModalContainer, null, contentFactory({
    dismiss: disposable.dispose.bind(disposable),
    element
  })), hostElement, () => {
    if (options.onOpen) {
      options.onOpen();
    }
  });

  return disposable;
}
/** Flow makes {} an unsealed object (eyeroll) */


const defaults = Object.freeze({});

/**
 * Just exists to provide a div that we can focus on mount. This ensures we steal focus from any
 * editors or other panes while the modal is present.
 */
class ModalContainer extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement("div", {
      tabIndex: "-1"
    }, /*#__PURE__*/React.createElement(_TabbableContainer.default, {
      contained: true
    }, this.props.children));
  }

  componentDidMount() {
    const node = _reactDom.default.findDOMNode(this);

    (0, _assert.default)(node instanceof HTMLElement); // Steal the focus away from any active editor or pane, setting it on the modal;
    // but don't steal focus away from a descendant. This can happen if a React element focuses
    // during its componentDidMount. For example, <AtomInput> does this since the underlying
    // <atom-text-editor> does not support the autofocus attribute.

    if (!node.contains(document.activeElement)) {
      node.focus();
    }
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,