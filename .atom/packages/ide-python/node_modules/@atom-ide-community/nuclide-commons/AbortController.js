"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.AbortSignal = void 0;

var _eventTargetShim = require("event-target-shim");

let _Symbol$toStringTag, _Symbol$toStringTag2;

_Symbol$toStringTag = Symbol.toStringTag;

class AbortSignal extends _eventTargetShim.EventTarget {
  constructor(...args) {
    super(...args);
    this.aborted = false;
    this.onabort = void 0;
  }

  // $FlowIssue: Computed properties are not supported
  get [_Symbol$toStringTag]() {
    return 'AbortSignal';
  }

}

exports.AbortSignal = AbortSignal;
(0, _eventTargetShim.defineEventAttribute)(AbortSignal.prototype, 'abort');
_Symbol$toStringTag2 = Symbol.toStringTag;

class AbortController {
  constructor() {
    this.signal = new AbortSignal();
  }

  abort() {
    // From whatwg spec, section 3.2:
    // If signal’s aborted flag is set, then return.
    if (this.signal.aborted) {
      return;
    } // Set signal’s aborted flag.


    this.signal.aborted = true; // Fire an event named abort at signal.
    // Note: event-target-shim converts objects to Events.

    this.signal.dispatchEvent({
      type: 'abort'
    });
  } // $FlowIssue: Computed properties are not supported


  get [_Symbol$toStringTag2]() {
    return 'AbortController';
  }

}

exports.default = AbortController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL0Fib3J0Q29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsIkFib3J0U2lnbmFsIiwiRXZlbnRUYXJnZXRTaGltIiwiYWJvcnRlZCIsIm9uYWJvcnQiLCJwcm90b3R5cGUiLCJBYm9ydENvbnRyb2xsZXIiLCJzaWduYWwiLCJhYm9ydCIsImRpc3BhdGNoRXZlbnQiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBb0JBOzs7O3NCQVdPQSxNQUFNLENBQUNDLFc7O0FBTlAsTUFBTUMsV0FBTixTQUEyQkMsNEJBQTNCLENBQWdFO0FBQUE7QUFBQTtBQUFBLFNBQ3JFQyxPQURxRSxHQUNsRCxLQURrRDtBQUFBLFNBR3JFQyxPQUhxRTtBQUFBOztBQUtyRTtBQUNBLDhCQUEyQjtBQUN6QixXQUFPLGFBQVA7QUFDRDs7QUFSb0U7OztBQVd2RSwyQ0FBcUJILFdBQVcsQ0FBQ0ksU0FBakMsRUFBNEMsT0FBNUM7dUJBbUJPTixNQUFNLENBQUNDLFc7O0FBakJDLE1BQU1NLGVBQU4sQ0FBc0I7QUFBQTtBQUFBLFNBQ25DQyxNQURtQyxHQUMxQixJQUFJTixXQUFKLEVBRDBCO0FBQUE7O0FBR25DTyxFQUFBQSxLQUFLLEdBQUc7QUFDTjtBQUNBO0FBQ0EsUUFBSSxLQUFLRCxNQUFMLENBQVlKLE9BQWhCLEVBQXlCO0FBQ3ZCO0FBQ0QsS0FMSyxDQU1OOzs7QUFDQSxTQUFLSSxNQUFMLENBQVlKLE9BQVosR0FBc0IsSUFBdEIsQ0FQTSxDQVFOO0FBQ0E7O0FBQ0EsU0FBS0ksTUFBTCxDQUFZRSxhQUFaLENBQTJCO0FBQUNDLE1BQUFBLElBQUksRUFBRTtBQUFQLEtBQTNCO0FBQ0QsR0Fka0MsQ0FnQm5DOzs7QUFDQSwrQkFBMkI7QUFDekIsV0FBTyxpQkFBUDtBQUNEOztBQW5Ca0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG4vKipcclxuICogVGhpcyBpbXBsZW1lbnRzIHBvbHlmaWxscyBmb3IgQWJvcnRTaWduYWwgYW5kIEFib3J0Q29udHJvbGxlclxyXG4gKiBmcm9tIHRoZSB3aGF0d2cgc3BlYzogaHR0cHM6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNhYm9ydGluZy1vbmdvaW5nLWFjdGl2aXRpZXNcclxuICogVGhlc2Ugd2lsbCBiZWNvbWUgYXZhaWxhYmxlIGluIENocm9tZSA2Ni5cclxuICovXHJcblxyXG4vLyBTaGltIG9mIEV2ZW50VGFyZ2V0IHVzYWJsZSBpbiBOb2RlLlxyXG4vLyBOb3RlIHRoYXQgZXZlbiBpbiBDaHJvbWUsIEV2ZW50VGFyZ2V0IGFsc28gaXNuJ3QgaW5zdGFudGlhYmxlIHVudGlsIHZlcnNpb24gNjQuXHJcbmltcG9ydCB7XHJcbiAgRXZlbnRUYXJnZXQgYXMgRXZlbnRUYXJnZXRTaGltLFxyXG4gIGRlZmluZUV2ZW50QXR0cmlidXRlLFxyXG59IGZyb20gJ2V2ZW50LXRhcmdldC1zaGltJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBYm9ydFNpZ25hbCBleHRlbmRzIChFdmVudFRhcmdldFNoaW06IHR5cGVvZiBFdmVudFRhcmdldCkge1xyXG4gIGFib3J0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAvLyBEZWZpbmVkIHZpYSBkZWZpbmVFdmVudEF0dHJpYnV0ZSBiZWxvdy5cclxuICBvbmFib3J0OiA/KGV2ZW50OiBFdmVudCkgPT4gbWl4ZWQ7XHJcblxyXG4gIC8vICRGbG93SXNzdWU6IENvbXB1dGVkIHByb3BlcnRpZXMgYXJlIG5vdCBzdXBwb3J0ZWRcclxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XHJcbiAgICByZXR1cm4gJ0Fib3J0U2lnbmFsJztcclxuICB9XHJcbn1cclxuXHJcbmRlZmluZUV2ZW50QXR0cmlidXRlKEFib3J0U2lnbmFsLnByb3RvdHlwZSwgJ2Fib3J0Jyk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBYm9ydENvbnRyb2xsZXIge1xyXG4gIHNpZ25hbCA9IG5ldyBBYm9ydFNpZ25hbCgpO1xyXG5cclxuICBhYm9ydCgpIHtcclxuICAgIC8vIEZyb20gd2hhdHdnIHNwZWMsIHNlY3Rpb24gMy4yOlxyXG4gICAgLy8gSWYgc2lnbmFs4oCZcyBhYm9ydGVkIGZsYWcgaXMgc2V0LCB0aGVuIHJldHVybi5cclxuICAgIGlmICh0aGlzLnNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIFNldCBzaWduYWzigJlzIGFib3J0ZWQgZmxhZy5cclxuICAgIHRoaXMuc2lnbmFsLmFib3J0ZWQgPSB0cnVlO1xyXG4gICAgLy8gRmlyZSBhbiBldmVudCBuYW1lZCBhYm9ydCBhdCBzaWduYWwuXHJcbiAgICAvLyBOb3RlOiBldmVudC10YXJnZXQtc2hpbSBjb252ZXJ0cyBvYmplY3RzIHRvIEV2ZW50cy5cclxuICAgIHRoaXMuc2lnbmFsLmRpc3BhdGNoRXZlbnQoKHt0eXBlOiAnYWJvcnQnfTogYW55KSk7XHJcbiAgfVxyXG5cclxuICAvLyAkRmxvd0lzc3VlOiBDb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBub3Qgc3VwcG9ydGVkXHJcbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xyXG4gICAgcmV0dXJuICdBYm9ydENvbnRyb2xsZXInO1xyXG4gIH1cclxufVxyXG4iXX0=