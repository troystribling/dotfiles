"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// A Queue which will process elements at intervals, only if the
// queue contains any elements.
class BatchProcessedQueue {
  constructor(batchPeriod, handler) {
    this._batchPeriod = void 0;
    this._handler = void 0;
    this._timeoutId = void 0;
    this._items = void 0;
    this._batchPeriod = batchPeriod;
    this._handler = handler;
    this._timeoutId = null;
    this._items = [];
  }

  add(item) {
    this._items.push(item); // eslint-disable-next-line eqeqeq


    if (this._timeoutId === null) {
      this._timeoutId = setTimeout(() => {
        this._handleBatch();
      }, this._batchPeriod);
    }
  }

  _handleBatch() {
    this._timeoutId = null;
    const batch = this._items;
    this._items = [];

    this._handler(batch);
  }

  dispose() {
    // eslint-disable-next-line eqeqeq
    if (this._timeoutId !== null) {
      clearTimeout(this._timeoutId);

      this._handleBatch();
    }
  }

}

exports.default = BatchProcessedQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL0JhdGNoUHJvY2Vzc2VkUXVldWUuanMiXSwibmFtZXMiOlsiQmF0Y2hQcm9jZXNzZWRRdWV1ZSIsImNvbnN0cnVjdG9yIiwiYmF0Y2hQZXJpb2QiLCJoYW5kbGVyIiwiX2JhdGNoUGVyaW9kIiwiX2hhbmRsZXIiLCJfdGltZW91dElkIiwiX2l0ZW1zIiwiYWRkIiwiaXRlbSIsInB1c2giLCJzZXRUaW1lb3V0IiwiX2hhbmRsZUJhdGNoIiwiYmF0Y2giLCJkaXNwb3NlIiwiY2xlYXJUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFDZSxNQUFNQSxtQkFBTixDQUE2QjtBQU0xQ0MsRUFBQUEsV0FBVyxDQUFDQyxXQUFELEVBQXNCQyxPQUF0QixFQUFnRDtBQUFBLFNBTDNEQyxZQUsyRDtBQUFBLFNBSjNEQyxRQUkyRDtBQUFBLFNBSDNEQyxVQUcyRDtBQUFBLFNBRjNEQyxNQUUyRDtBQUN6RCxTQUFLSCxZQUFMLEdBQW9CRixXQUFwQjtBQUNBLFNBQUtHLFFBQUwsR0FBZ0JGLE9BQWhCO0FBQ0EsU0FBS0csVUFBTCxHQUFrQixJQUFsQjtBQUNBLFNBQUtDLE1BQUwsR0FBYyxFQUFkO0FBQ0Q7O0FBRURDLEVBQUFBLEdBQUcsQ0FBQ0MsSUFBRCxFQUFnQjtBQUNqQixTQUFLRixNQUFMLENBQVlHLElBQVosQ0FBaUJELElBQWpCLEVBRGlCLENBRWpCOzs7QUFDQSxRQUFJLEtBQUtILFVBQUwsS0FBb0IsSUFBeEIsRUFBOEI7QUFDNUIsV0FBS0EsVUFBTCxHQUFrQkssVUFBVSxDQUFDLE1BQU07QUFDakMsYUFBS0MsWUFBTDtBQUNELE9BRjJCLEVBRXpCLEtBQUtSLFlBRm9CLENBQTVCO0FBR0Q7QUFDRjs7QUFFRFEsRUFBQUEsWUFBWSxHQUFHO0FBQ2IsU0FBS04sVUFBTCxHQUFrQixJQUFsQjtBQUNBLFVBQU1PLEtBQUssR0FBRyxLQUFLTixNQUFuQjtBQUNBLFNBQUtBLE1BQUwsR0FBYyxFQUFkOztBQUNBLFNBQUtGLFFBQUwsQ0FBY1EsS0FBZDtBQUNEOztBQUVEQyxFQUFBQSxPQUFPLEdBQVM7QUFDZDtBQUNBLFFBQUksS0FBS1IsVUFBTCxLQUFvQixJQUF4QixFQUE4QjtBQUM1QlMsTUFBQUEsWUFBWSxDQUFDLEtBQUtULFVBQU4sQ0FBWjs7QUFDQSxXQUFLTSxZQUFMO0FBQ0Q7QUFDRjs7QUFwQ3lDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3RcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmV4cG9ydCB0eXBlIEJhdGNoSGFuZGxlcjxUPiA9IChiYXRjaDogQXJyYXk8VD4pID0+IHZvaWQ7XHJcblxyXG4vLyBBIFF1ZXVlIHdoaWNoIHdpbGwgcHJvY2VzcyBlbGVtZW50cyBhdCBpbnRlcnZhbHMsIG9ubHkgaWYgdGhlXHJcbi8vIHF1ZXVlIGNvbnRhaW5zIGFueSBlbGVtZW50cy5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmF0Y2hQcm9jZXNzZWRRdWV1ZTxUPiB7XHJcbiAgX2JhdGNoUGVyaW9kOiBudW1iZXI7XHJcbiAgX2hhbmRsZXI6IEJhdGNoSGFuZGxlcjxUPjtcclxuICBfdGltZW91dElkOiA/VGltZW91dElEO1xyXG4gIF9pdGVtczogQXJyYXk8VD47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGJhdGNoUGVyaW9kOiBudW1iZXIsIGhhbmRsZXI6IEJhdGNoSGFuZGxlcjxUPikge1xyXG4gICAgdGhpcy5fYmF0Y2hQZXJpb2QgPSBiYXRjaFBlcmlvZDtcclxuICAgIHRoaXMuX2hhbmRsZXIgPSBoYW5kbGVyO1xyXG4gICAgdGhpcy5fdGltZW91dElkID0gbnVsbDtcclxuICAgIHRoaXMuX2l0ZW1zID0gW107XHJcbiAgfVxyXG5cclxuICBhZGQoaXRlbTogVCk6IHZvaWQge1xyXG4gICAgdGhpcy5faXRlbXMucHVzaChpdGVtKTtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcclxuICAgIGlmICh0aGlzLl90aW1lb3V0SWQgPT09IG51bGwpIHtcclxuICAgICAgdGhpcy5fdGltZW91dElkID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5faGFuZGxlQmF0Y2goKTtcclxuICAgICAgfSwgdGhpcy5fYmF0Y2hQZXJpb2QpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUJhdGNoKCkge1xyXG4gICAgdGhpcy5fdGltZW91dElkID0gbnVsbDtcclxuICAgIGNvbnN0IGJhdGNoID0gdGhpcy5faXRlbXM7XHJcbiAgICB0aGlzLl9pdGVtcyA9IFtdO1xyXG4gICAgdGhpcy5faGFuZGxlcihiYXRjaCk7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxyXG4gICAgaWYgKHRoaXMuX3RpbWVvdXRJZCAhPT0gbnVsbCkge1xyXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dElkKTtcclxuICAgICAgdGhpcy5faGFuZGxlQmF0Y2goKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19