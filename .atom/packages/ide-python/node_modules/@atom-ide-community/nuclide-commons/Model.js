"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _UniversalDisposable = _interopRequireDefault(require("./UniversalDisposable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * Exposes a simple API for a stateful model. This is similar to React's `state`/`setState()` API
 * except achieved via composition and easily convertible to observables so you can do awesome
 * stuff. It's really a super-thin wrapper around `BehaviorSubject`; wrapping `BehaviorSubject`
 * instead of extending it was done to minimize the API surface area. Ideally, this would implement
 * `Symbol.observable` instead of having a `toObservable()` method, but since Flow doesn't
 * understand that, it causes more trouble than it's worth.
 *
 * While you can extend this class, composition is recommended.
 *
 * Example:
 *
 *     class MyThing {
 *       _model = new Model({count: 0});
 *       increment(): void {
 *         const {count} = this._model.state;
 *         this._model.setState({count: count + 1});
 *       }
 *     }
 *
 * BEST PRACTICES
 *
 * Don't pass your model instance around! Instead, create a new object with the properties you want
 * and explicit setters:
 *
 *     const props = {
 *       count: model.state.count,
 *       increment: () => {
 *         const {count} = model.state;
 *         model.setState({count: count + 1})
 *       },
 *     };
 *
 * You'll notice that this is very similar to Flux/Redux, with the setters corresponding to bound
 * action creators. That's awesome! It means that, should the state grow and require new
 * capabilities, we can always switch to full-blown Redux without having to refactor a ton of stuff.
 */
class Model {
  constructor(initialState) {
    this._states = void 0;
    this._states = new _rxjsCompatUmdMin.BehaviorSubject(initialState);
  }

  setState(newState) {
    const nextState = { ...this.state,
      ...newState
    };

    this._states.next(nextState);
  }

  get state() {
    return this._states.getValue();
  }

  subscribe(cb) {
    return new _UniversalDisposable.default(this.toObservable().subscribe({
      next: cb
    }));
  }

  toObservable() {
    return this._states.distinctUntilChanged();
  }

}

exports.default = Model;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL01vZGVsLmpzIl0sIm5hbWVzIjpbIk1vZGVsIiwiY29uc3RydWN0b3IiLCJpbml0aWFsU3RhdGUiLCJfc3RhdGVzIiwiQmVoYXZpb3JTdWJqZWN0Iiwic2V0U3RhdGUiLCJuZXdTdGF0ZSIsIm5leHRTdGF0ZSIsInN0YXRlIiwibmV4dCIsImdldFZhbHVlIiwic3Vic2NyaWJlIiwiY2IiLCJVbml2ZXJzYWxEaXNwb3NhYmxlIiwidG9PYnNlcnZhYmxlIiwiZGlzdGluY3RVbnRpbENoYW5nZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFjQTs7QUFDQTs7OztBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSxNQUFNQSxLQUFOLENBQXVCO0FBR3BDQyxFQUFBQSxXQUFXLENBQUNDLFlBQUQsRUFBc0I7QUFBQSxTQUZqQ0MsT0FFaUM7QUFDL0IsU0FBS0EsT0FBTCxHQUFlLElBQUlDLGlDQUFKLENBQW9CRixZQUFwQixDQUFmO0FBQ0Q7O0FBRURHLEVBQUFBLFFBQVEsQ0FBQ0MsUUFBRCxFQUFnQztBQUN0QyxVQUFNQyxTQUFTLEdBQUcsRUFBQyxHQUFHLEtBQUtDLEtBQVQ7QUFBZ0IsU0FBR0Y7QUFBbkIsS0FBbEI7O0FBQ0EsU0FBS0gsT0FBTCxDQUFhTSxJQUFiLENBQWtCRixTQUFsQjtBQUNEOztBQUVRLE1BQUxDLEtBQUssR0FBVTtBQUNqQixXQUFPLEtBQUtMLE9BQUwsQ0FBYU8sUUFBYixFQUFQO0FBQ0Q7O0FBRURDLEVBQUFBLFNBQVMsQ0FBQ0MsRUFBRCxFQUEyQztBQUNsRCxXQUFPLElBQUlDLDRCQUFKLENBQXdCLEtBQUtDLFlBQUwsR0FBb0JILFNBQXBCLENBQThCO0FBQUNGLE1BQUFBLElBQUksRUFBRUc7QUFBUCxLQUE5QixDQUF4QixDQUFQO0FBQ0Q7O0FBRURFLEVBQUFBLFlBQVksR0FBc0I7QUFDaEMsV0FBTyxLQUFLWCxPQUFMLENBQWFZLG9CQUFiLEVBQVA7QUFDRDs7QUF0Qm1DIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHR5cGUge09ic2VydmFibGV9IGZyb20gJ3J4anMtY29tcGF0L2J1bmRsZXMvcnhqcy1jb21wYXQudW1kLm1pbi5qcyc7XHJcblxyXG5pbXBvcnQge0JlaGF2aW9yU3ViamVjdH0gZnJvbSAncnhqcy1jb21wYXQvYnVuZGxlcy9yeGpzLWNvbXBhdC51bWQubWluLmpzJztcclxuaW1wb3J0IFVuaXZlcnNhbERpc3Bvc2FibGUgZnJvbSAnLi9Vbml2ZXJzYWxEaXNwb3NhYmxlJztcclxuXHJcbi8qKlxyXG4gKiBFeHBvc2VzIGEgc2ltcGxlIEFQSSBmb3IgYSBzdGF0ZWZ1bCBtb2RlbC4gVGhpcyBpcyBzaW1pbGFyIHRvIFJlYWN0J3MgYHN0YXRlYC9gc2V0U3RhdGUoKWAgQVBJXHJcbiAqIGV4Y2VwdCBhY2hpZXZlZCB2aWEgY29tcG9zaXRpb24gYW5kIGVhc2lseSBjb252ZXJ0aWJsZSB0byBvYnNlcnZhYmxlcyBzbyB5b3UgY2FuIGRvIGF3ZXNvbWVcclxuICogc3R1ZmYuIEl0J3MgcmVhbGx5IGEgc3VwZXItdGhpbiB3cmFwcGVyIGFyb3VuZCBgQmVoYXZpb3JTdWJqZWN0YDsgd3JhcHBpbmcgYEJlaGF2aW9yU3ViamVjdGBcclxuICogaW5zdGVhZCBvZiBleHRlbmRpbmcgaXQgd2FzIGRvbmUgdG8gbWluaW1pemUgdGhlIEFQSSBzdXJmYWNlIGFyZWEuIElkZWFsbHksIHRoaXMgd291bGQgaW1wbGVtZW50XHJcbiAqIGBTeW1ib2wub2JzZXJ2YWJsZWAgaW5zdGVhZCBvZiBoYXZpbmcgYSBgdG9PYnNlcnZhYmxlKClgIG1ldGhvZCwgYnV0IHNpbmNlIEZsb3cgZG9lc24ndFxyXG4gKiB1bmRlcnN0YW5kIHRoYXQsIGl0IGNhdXNlcyBtb3JlIHRyb3VibGUgdGhhbiBpdCdzIHdvcnRoLlxyXG4gKlxyXG4gKiBXaGlsZSB5b3UgY2FuIGV4dGVuZCB0aGlzIGNsYXNzLCBjb21wb3NpdGlvbiBpcyByZWNvbW1lbmRlZC5cclxuICpcclxuICogRXhhbXBsZTpcclxuICpcclxuICogICAgIGNsYXNzIE15VGhpbmcge1xyXG4gKiAgICAgICBfbW9kZWwgPSBuZXcgTW9kZWwoe2NvdW50OiAwfSk7XHJcbiAqICAgICAgIGluY3JlbWVudCgpOiB2b2lkIHtcclxuICogICAgICAgICBjb25zdCB7Y291bnR9ID0gdGhpcy5fbW9kZWwuc3RhdGU7XHJcbiAqICAgICAgICAgdGhpcy5fbW9kZWwuc2V0U3RhdGUoe2NvdW50OiBjb3VudCArIDF9KTtcclxuICogICAgICAgfVxyXG4gKiAgICAgfVxyXG4gKlxyXG4gKiBCRVNUIFBSQUNUSUNFU1xyXG4gKlxyXG4gKiBEb24ndCBwYXNzIHlvdXIgbW9kZWwgaW5zdGFuY2UgYXJvdW5kISBJbnN0ZWFkLCBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIHByb3BlcnRpZXMgeW91IHdhbnRcclxuICogYW5kIGV4cGxpY2l0IHNldHRlcnM6XHJcbiAqXHJcbiAqICAgICBjb25zdCBwcm9wcyA9IHtcclxuICogICAgICAgY291bnQ6IG1vZGVsLnN0YXRlLmNvdW50LFxyXG4gKiAgICAgICBpbmNyZW1lbnQ6ICgpID0+IHtcclxuICogICAgICAgICBjb25zdCB7Y291bnR9ID0gbW9kZWwuc3RhdGU7XHJcbiAqICAgICAgICAgbW9kZWwuc2V0U3RhdGUoe2NvdW50OiBjb3VudCArIDF9KVxyXG4gKiAgICAgICB9LFxyXG4gKiAgICAgfTtcclxuICpcclxuICogWW91J2xsIG5vdGljZSB0aGF0IHRoaXMgaXMgdmVyeSBzaW1pbGFyIHRvIEZsdXgvUmVkdXgsIHdpdGggdGhlIHNldHRlcnMgY29ycmVzcG9uZGluZyB0byBib3VuZFxyXG4gKiBhY3Rpb24gY3JlYXRvcnMuIFRoYXQncyBhd2Vzb21lISBJdCBtZWFucyB0aGF0LCBzaG91bGQgdGhlIHN0YXRlIGdyb3cgYW5kIHJlcXVpcmUgbmV3XHJcbiAqIGNhcGFiaWxpdGllcywgd2UgY2FuIGFsd2F5cyBzd2l0Y2ggdG8gZnVsbC1ibG93biBSZWR1eCB3aXRob3V0IGhhdmluZyB0byByZWZhY3RvciBhIHRvbiBvZiBzdHVmZi5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVsPFN0YXRlOiB7fT4ge1xyXG4gIF9zdGF0ZXM6IEJlaGF2aW9yU3ViamVjdDxTdGF0ZT47XHJcblxyXG4gIGNvbnN0cnVjdG9yKGluaXRpYWxTdGF0ZTogU3RhdGUpIHtcclxuICAgIHRoaXMuX3N0YXRlcyA9IG5ldyBCZWhhdmlvclN1YmplY3QoaW5pdGlhbFN0YXRlKTtcclxuICB9XHJcblxyXG4gIHNldFN0YXRlKG5ld1N0YXRlOiAkU2hhcGU8U3RhdGU+KTogdm9pZCB7XHJcbiAgICBjb25zdCBuZXh0U3RhdGUgPSB7Li4udGhpcy5zdGF0ZSwgLi4ubmV3U3RhdGV9O1xyXG4gICAgdGhpcy5fc3RhdGVzLm5leHQobmV4dFN0YXRlKTtcclxuICB9XHJcblxyXG4gIGdldCBzdGF0ZSgpOiBTdGF0ZSB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVzLmdldFZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmUoY2I6IChzdGF0ZTogU3RhdGUpID0+IG1peGVkKTogSURpc3Bvc2FibGUge1xyXG4gICAgcmV0dXJuIG5ldyBVbml2ZXJzYWxEaXNwb3NhYmxlKHRoaXMudG9PYnNlcnZhYmxlKCkuc3Vic2NyaWJlKHtuZXh0OiBjYn0pKTtcclxuICB9XHJcblxyXG4gIHRvT2JzZXJ2YWJsZSgpOiBPYnNlcnZhYmxlPFN0YXRlPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVzLmRpc3RpbmN0VW50aWxDaGFuZ2VkKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==