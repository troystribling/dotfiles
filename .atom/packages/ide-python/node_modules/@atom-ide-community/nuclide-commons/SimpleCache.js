"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleCache = void 0;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// TODO: Merge this class with @atom-ide-community/nuclide-commons/cache.js because they probably do
//   very similar things

/**
 * Tiny class that is useful to cache simple values.
 * It's quite useful for promises with a SimpleCache<Promise<T>> which allows reusing the same promise.
 */
class SimpleCache {
  constructor(config = {}) {
    this.store = new Map();
    this._dispose = void 0;
    this._keyFactory = void 0;

    if (config.dispose != null) {
      this._dispose = config.dispose;
    }

    this._keyFactory = config.keyFactory != null ? config.keyFactory : keyArgs => keyArgs;
  }

  _getUnsafe(key) {
    return this.store.get(key);
  }

  getOrCreate(keyArgs, factory) {
    const key = this._keyFactory(keyArgs);

    if (this.store.has(key)) {
      return this._getUnsafe(key);
    }

    const value = factory(keyArgs, key);
    this.store.set(key, value);
    return value;
  }

  delete(keyArgs) {
    const key = this._keyFactory(keyArgs);

    if (this._dispose != null) {
      this._ifHas(key, this._dispose);
    }

    this.store.delete(key);
  }

  clear() {
    if (this._dispose != null) {
      this.store.forEach(this._dispose);
    }

    this.store.clear();
  }

  get(keyArgs) {
    return this.store.get(this._keyFactory(keyArgs));
  }

  set(keyArgs, value) {
    this.store.set(this._keyFactory(keyArgs), value);
  }

  ifHas(keyArgs, callback) {
    this._ifHas(this._keyFactory(keyArgs), callback);
  }

  _ifHas(key, callback) {
    if (this.store.has(key)) {
      callback(this._getUnsafe(key));
    }
  }

  keyForArgs(keyArgs) {
    return this._keyFactory(keyArgs);
  }

}

exports.SimpleCache = SimpleCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL1NpbXBsZUNhY2hlLmpzIl0sIm5hbWVzIjpbIlNpbXBsZUNhY2hlIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJzdG9yZSIsIk1hcCIsIl9kaXNwb3NlIiwiX2tleUZhY3RvcnkiLCJkaXNwb3NlIiwia2V5RmFjdG9yeSIsImtleUFyZ3MiLCJfZ2V0VW5zYWZlIiwia2V5IiwiZ2V0IiwiZ2V0T3JDcmVhdGUiLCJmYWN0b3J5IiwiaGFzIiwidmFsdWUiLCJzZXQiLCJkZWxldGUiLCJfaWZIYXMiLCJjbGVhciIsImZvckVhY2giLCJpZkhhcyIsImNhbGxiYWNrIiwia2V5Rm9yQXJncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBVU8sTUFBTUEsV0FBTixDQUE4QjtBQUtuQ0MsRUFBQUEsV0FBVyxDQUFDQyxNQUErQixHQUFHLEVBQW5DLEVBQXVDO0FBQUEsU0FKbERDLEtBSWtELEdBSjNCLElBQUlDLEdBQUosRUFJMkI7QUFBQSxTQUhsREMsUUFHa0Q7QUFBQSxTQUZsREMsV0FFa0Q7O0FBQ2hELFFBQUlKLE1BQU0sQ0FBQ0ssT0FBUCxJQUFrQixJQUF0QixFQUE0QjtBQUMxQixXQUFLRixRQUFMLEdBQWdCSCxNQUFNLENBQUNLLE9BQXZCO0FBQ0Q7O0FBQ0QsU0FBS0QsV0FBTCxHQUNFSixNQUFNLENBQUNNLFVBQVAsSUFBcUIsSUFBckIsR0FDSU4sTUFBTSxDQUFDTSxVQURYLEdBRUtDLE9BQUQsSUFBc0JBLE9BSDVCO0FBSUQ7O0FBRURDLEVBQUFBLFVBQVUsQ0FBQ0MsR0FBRCxFQUFnQjtBQUN4QixXQUFTLEtBQUtSLEtBQUwsQ0FBV1MsR0FBWCxDQUFlRCxHQUFmLENBQVQ7QUFDRDs7QUFFREUsRUFBQUEsV0FBVyxDQUFDSixPQUFELEVBQW1CSyxPQUFuQixFQUFzRDtBQUMvRCxVQUFNSCxHQUFHLEdBQUcsS0FBS0wsV0FBTCxDQUFpQkcsT0FBakIsQ0FBWjs7QUFDQSxRQUFJLEtBQUtOLEtBQUwsQ0FBV1ksR0FBWCxDQUFlSixHQUFmLENBQUosRUFBeUI7QUFDdkIsYUFBTyxLQUFLRCxVQUFMLENBQWdCQyxHQUFoQixDQUFQO0FBQ0Q7O0FBQ0QsVUFBTUssS0FBSyxHQUFHRixPQUFPLENBQUNMLE9BQUQsRUFBVUUsR0FBVixDQUFyQjtBQUNBLFNBQUtSLEtBQUwsQ0FBV2MsR0FBWCxDQUFlTixHQUFmLEVBQW9CSyxLQUFwQjtBQUNBLFdBQU9BLEtBQVA7QUFDRDs7QUFFREUsRUFBQUEsTUFBTSxDQUFDVCxPQUFELEVBQXlCO0FBQzdCLFVBQU1FLEdBQUcsR0FBRyxLQUFLTCxXQUFMLENBQWlCRyxPQUFqQixDQUFaOztBQUNBLFFBQUksS0FBS0osUUFBTCxJQUFpQixJQUFyQixFQUEyQjtBQUN6QixXQUFLYyxNQUFMLENBQVlSLEdBQVosRUFBaUIsS0FBS04sUUFBdEI7QUFDRDs7QUFDRCxTQUFLRixLQUFMLENBQVdlLE1BQVgsQ0FBa0JQLEdBQWxCO0FBQ0Q7O0FBRURTLEVBQUFBLEtBQUssR0FBUztBQUNaLFFBQUksS0FBS2YsUUFBTCxJQUFpQixJQUFyQixFQUEyQjtBQUN6QixXQUFLRixLQUFMLENBQVdrQixPQUFYLENBQW1CLEtBQUtoQixRQUF4QjtBQUNEOztBQUNELFNBQUtGLEtBQUwsQ0FBV2lCLEtBQVg7QUFDRDs7QUFFRFIsRUFBQUEsR0FBRyxDQUFDSCxPQUFELEVBQXVCO0FBQ3hCLFdBQU8sS0FBS04sS0FBTCxDQUFXUyxHQUFYLENBQWUsS0FBS04sV0FBTCxDQUFpQkcsT0FBakIsQ0FBZixDQUFQO0FBQ0Q7O0FBRURRLEVBQUFBLEdBQUcsQ0FBQ1IsT0FBRCxFQUFtQk8sS0FBbkIsRUFBbUM7QUFDcEMsU0FBS2IsS0FBTCxDQUFXYyxHQUFYLENBQWUsS0FBS1gsV0FBTCxDQUFpQkcsT0FBakIsQ0FBZixFQUEwQ08sS0FBMUM7QUFDRDs7QUFFRE0sRUFBQUEsS0FBSyxDQUFDYixPQUFELEVBQW1CYyxRQUFuQixFQUFpRDtBQUNwRCxTQUFLSixNQUFMLENBQVksS0FBS2IsV0FBTCxDQUFpQkcsT0FBakIsQ0FBWixFQUF1Q2MsUUFBdkM7QUFDRDs7QUFFREosRUFBQUEsTUFBTSxDQUFDUixHQUFELEVBQWFZLFFBQWIsRUFBMkM7QUFDL0MsUUFBSSxLQUFLcEIsS0FBTCxDQUFXWSxHQUFYLENBQWVKLEdBQWYsQ0FBSixFQUF5QjtBQUN2QlksTUFBQUEsUUFBUSxDQUFDLEtBQUtiLFVBQUwsQ0FBZ0JDLEdBQWhCLENBQUQsQ0FBUjtBQUNEO0FBQ0Y7O0FBRURhLEVBQUFBLFVBQVUsQ0FBQ2YsT0FBRCxFQUEwQjtBQUNsQyxXQUFPLEtBQUtILFdBQUwsQ0FBaUJHLE9BQWpCLENBQVA7QUFDRDs7QUFoRWtDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuLy8gVE9ETzogTWVyZ2UgdGhpcyBjbGFzcyB3aXRoIEBhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL2NhY2hlLmpzIGJlY2F1c2UgdGhleSBwcm9iYWJseSBkb1xyXG4vLyAgIHZlcnkgc2ltaWxhciB0aGluZ3NcclxuXHJcbi8qKlxyXG4gKiBUaW55IGNsYXNzIHRoYXQgaXMgdXNlZnVsIHRvIGNhY2hlIHNpbXBsZSB2YWx1ZXMuXHJcbiAqIEl0J3MgcXVpdGUgdXNlZnVsIGZvciBwcm9taXNlcyB3aXRoIGEgU2ltcGxlQ2FjaGU8UHJvbWlzZTxUPj4gd2hpY2ggYWxsb3dzIHJldXNpbmcgdGhlIHNhbWUgcHJvbWlzZS5cclxuICovXHJcblxyXG50eXBlIERpc3Bvc2VDYWxsYmFjazxUPiA9ICh2YWx1ZTogVCkgPT4gdm9pZDtcclxudHlwZSBLZXlGYWN0b3J5PEtleUFyZ3M+ID0gKGFyZ3M6IEtleUFyZ3MpID0+IG1peGVkO1xyXG5cclxudHlwZSBDYWNoZUNvbmZpZzxLZXlBcmdzLCBUPiA9IHtcclxuICBrZXlGYWN0b3J5PzogS2V5RmFjdG9yeTxLZXlBcmdzPixcclxuICBkaXNwb3NlPzogRGlzcG9zZUNhbGxiYWNrPFQ+LFxyXG59O1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpbXBsZUNhY2hlPEtleUFyZ3MsIFQ+IHtcclxuICBzdG9yZTogTWFwPG1peGVkLCBUPiA9IG5ldyBNYXAoKTtcclxuICBfZGlzcG9zZTogP0Rpc3Bvc2VDYWxsYmFjazxUPjtcclxuICBfa2V5RmFjdG9yeTogS2V5RmFjdG9yeTxLZXlBcmdzPjtcclxuXHJcbiAgY29uc3RydWN0b3IoY29uZmlnOiBDYWNoZUNvbmZpZzxLZXlBcmdzLCBUPiA9IHt9KSB7XHJcbiAgICBpZiAoY29uZmlnLmRpc3Bvc2UgIT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9kaXNwb3NlID0gY29uZmlnLmRpc3Bvc2U7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9rZXlGYWN0b3J5ID1cclxuICAgICAgY29uZmlnLmtleUZhY3RvcnkgIT0gbnVsbFxyXG4gICAgICAgID8gY29uZmlnLmtleUZhY3RvcnlcclxuICAgICAgICA6IChrZXlBcmdzOiBLZXlBcmdzKSA9PiBrZXlBcmdzO1xyXG4gIH1cclxuXHJcbiAgX2dldFVuc2FmZShrZXk6IG1peGVkKTogVCB7XHJcbiAgICByZXR1cm4gKCh0aGlzLnN0b3JlLmdldChrZXkpOiBhbnkpOiBUKTtcclxuICB9XHJcblxyXG4gIGdldE9yQ3JlYXRlKGtleUFyZ3M6IEtleUFyZ3MsIGZhY3Rvcnk6IChLZXlBcmdzLCBtaXhlZCkgPT4gVCk6IFQge1xyXG4gICAgY29uc3Qga2V5ID0gdGhpcy5fa2V5RmFjdG9yeShrZXlBcmdzKTtcclxuICAgIGlmICh0aGlzLnN0b3JlLmhhcyhrZXkpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLl9nZXRVbnNhZmUoa2V5KTtcclxuICAgIH1cclxuICAgIGNvbnN0IHZhbHVlID0gZmFjdG9yeShrZXlBcmdzLCBrZXkpO1xyXG4gICAgdGhpcy5zdG9yZS5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoa2V5QXJnczogS2V5QXJncyk6IHZvaWQge1xyXG4gICAgY29uc3Qga2V5ID0gdGhpcy5fa2V5RmFjdG9yeShrZXlBcmdzKTtcclxuICAgIGlmICh0aGlzLl9kaXNwb3NlICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5faWZIYXMoa2V5LCB0aGlzLl9kaXNwb3NlKTtcclxuICAgIH1cclxuICAgIHRoaXMuc3RvcmUuZGVsZXRlKGtleSk7XHJcbiAgfVxyXG5cclxuICBjbGVhcigpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9kaXNwb3NlICE9IG51bGwpIHtcclxuICAgICAgdGhpcy5zdG9yZS5mb3JFYWNoKHRoaXMuX2Rpc3Bvc2UpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zdG9yZS5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgZ2V0KGtleUFyZ3M6IEtleUFyZ3MpOiA/VCB7XHJcbiAgICByZXR1cm4gdGhpcy5zdG9yZS5nZXQodGhpcy5fa2V5RmFjdG9yeShrZXlBcmdzKSk7XHJcbiAgfVxyXG5cclxuICBzZXQoa2V5QXJnczogS2V5QXJncywgdmFsdWU6IFQpOiB2b2lkIHtcclxuICAgIHRoaXMuc3RvcmUuc2V0KHRoaXMuX2tleUZhY3Rvcnkoa2V5QXJncyksIHZhbHVlKTtcclxuICB9XHJcblxyXG4gIGlmSGFzKGtleUFyZ3M6IEtleUFyZ3MsIGNhbGxiYWNrOiAodmFsdWU6IFQpID0+IHZvaWQpIHtcclxuICAgIHRoaXMuX2lmSGFzKHRoaXMuX2tleUZhY3Rvcnkoa2V5QXJncyksIGNhbGxiYWNrKTtcclxuICB9XHJcblxyXG4gIF9pZkhhcyhrZXk6IG1peGVkLCBjYWxsYmFjazogKHZhbHVlOiBUKSA9PiB2b2lkKSB7XHJcbiAgICBpZiAodGhpcy5zdG9yZS5oYXMoa2V5KSkge1xyXG4gICAgICBjYWxsYmFjayh0aGlzLl9nZXRVbnNhZmUoa2V5KSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBrZXlGb3JBcmdzKGtleUFyZ3M6IEtleUFyZ3MpOiBtaXhlZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fa2V5RmFjdG9yeShrZXlBcmdzKTtcclxuICB9XHJcbn1cclxuIl19