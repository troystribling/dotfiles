"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expectedEqual = expectedEqual;
exports.Expect = void 0;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * This is a wrapper type useful for Observables to return errors during its stream
 * and later switch back to regular values if they recover. Normally, a source finishes after
 * passing an uncaught error.
 */
class Expect {
  static error(error) {
    return {
      isError: true,
      isPending: false,
      isValue: false,
      error,

      getOrDefault(def) {
        return def;
      },

      map(fn) {
        return Expect.error(error);
      }

    };
  }

  static value(value) {
    return {
      isError: false,
      isPending: false,
      isValue: true,
      value,

      getOrDefault(def) {
        return this.value;
      },

      map(fn) {
        return Expect.value(fn(value));
      }

    };
  }

  static pending() {
    return {
      isError: false,
      isPending: true,
      isValue: false,

      getOrDefault(def) {
        return def;
      },

      map(fn) {
        return Expect.pending();
      }

    };
  }

}

exports.Expect = Expect;

function expectedEqual(a, b, valueEqual, errorEqual) {
  if (a.isValue && b.isValue) {
    return valueEqual(a.value, b.value);
  } else if (a.isError && b.isError) {
    return errorEqual(a.error, b.error);
  } else if (a.isPending && b.isPending) {
    return true;
  } else {
    return false;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL2V4cGVjdGVkLmpzIl0sIm5hbWVzIjpbIkV4cGVjdCIsImVycm9yIiwiaXNFcnJvciIsImlzUGVuZGluZyIsImlzVmFsdWUiLCJnZXRPckRlZmF1bHQiLCJkZWYiLCJtYXAiLCJmbiIsInZhbHVlIiwicGVuZGluZyIsImV4cGVjdGVkRXF1YWwiLCJhIiwiYiIsInZhbHVlRXF1YWwiLCJlcnJvckVxdWFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWdDTyxNQUFNQSxNQUFOLENBQWE7QUFDTixTQUFMQyxLQUFLLENBQUlBLEtBQUosRUFBb0M7QUFDOUMsV0FBTztBQUNMQyxNQUFBQSxPQUFPLEVBQUUsSUFESjtBQUVMQyxNQUFBQSxTQUFTLEVBQUUsS0FGTjtBQUdMQyxNQUFBQSxPQUFPLEVBQUUsS0FISjtBQUlMSCxNQUFBQSxLQUpLOztBQUtMSSxNQUFBQSxZQUFZLENBQUNDLEdBQUQsRUFBWTtBQUN0QixlQUFPQSxHQUFQO0FBQ0QsT0FQSTs7QUFRTEMsTUFBQUEsR0FBRyxDQUFJQyxFQUFKLEVBQTZCO0FBQzlCLGVBQU9SLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhQSxLQUFiLENBQVA7QUFDRDs7QUFWSSxLQUFQO0FBWUQ7O0FBRVcsU0FBTFEsS0FBSyxDQUFJQSxLQUFKLEVBQWdDO0FBQzFDLFdBQU87QUFDTFAsTUFBQUEsT0FBTyxFQUFFLEtBREo7QUFFTEMsTUFBQUEsU0FBUyxFQUFFLEtBRk47QUFHTEMsTUFBQUEsT0FBTyxFQUFFLElBSEo7QUFJTEssTUFBQUEsS0FKSzs7QUFLTEosTUFBQUEsWUFBWSxDQUFDQyxHQUFELEVBQVk7QUFDdEIsZUFBTyxLQUFLRyxLQUFaO0FBQ0QsT0FQSTs7QUFRTEYsTUFBQUEsR0FBRyxDQUFJQyxFQUFKLEVBQTZCO0FBQzlCLGVBQU9SLE1BQU0sQ0FBQ1MsS0FBUCxDQUFhRCxFQUFFLENBQUNDLEtBQUQsQ0FBZixDQUFQO0FBQ0Q7O0FBVkksS0FBUDtBQVlEOztBQUVhLFNBQVBDLE9BQU8sR0FBMEI7QUFDdEMsV0FBTztBQUNMUixNQUFBQSxPQUFPLEVBQUUsS0FESjtBQUVMQyxNQUFBQSxTQUFTLEVBQUUsSUFGTjtBQUdMQyxNQUFBQSxPQUFPLEVBQUUsS0FISjs7QUFJTEMsTUFBQUEsWUFBWSxDQUFDQyxHQUFELEVBQVk7QUFDdEIsZUFBT0EsR0FBUDtBQUNELE9BTkk7O0FBT0xDLE1BQUFBLEdBQUcsQ0FBSUMsRUFBSixFQUE2QjtBQUM5QixlQUFPUixNQUFNLENBQUNVLE9BQVAsRUFBUDtBQUNEOztBQVRJLEtBQVA7QUFXRDs7QUEzQ2lCOzs7O0FBOENiLFNBQVNDLGFBQVQsQ0FDTEMsQ0FESyxFQUVMQyxDQUZLLEVBR0xDLFVBSEssRUFJTEMsVUFKSyxFQUtJO0FBQ1QsTUFBSUgsQ0FBQyxDQUFDUixPQUFGLElBQWFTLENBQUMsQ0FBQ1QsT0FBbkIsRUFBNEI7QUFDMUIsV0FBT1UsVUFBVSxDQUFDRixDQUFDLENBQUNILEtBQUgsRUFBVUksQ0FBQyxDQUFDSixLQUFaLENBQWpCO0FBQ0QsR0FGRCxNQUVPLElBQUlHLENBQUMsQ0FBQ1YsT0FBRixJQUFhVyxDQUFDLENBQUNYLE9BQW5CLEVBQTRCO0FBQ2pDLFdBQU9hLFVBQVUsQ0FBQ0gsQ0FBQyxDQUFDWCxLQUFILEVBQVVZLENBQUMsQ0FBQ1osS0FBWixDQUFqQjtBQUNELEdBRk0sTUFFQSxJQUFJVyxDQUFDLENBQUNULFNBQUYsSUFBZVUsQ0FBQyxDQUFDVixTQUFyQixFQUFnQztBQUNyQyxXQUFPLElBQVA7QUFDRCxHQUZNLE1BRUE7QUFDTCxXQUFPLEtBQVA7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3RcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgd3JhcHBlciB0eXBlIHVzZWZ1bCBmb3IgT2JzZXJ2YWJsZXMgdG8gcmV0dXJuIGVycm9ycyBkdXJpbmcgaXRzIHN0cmVhbVxyXG4gKiBhbmQgbGF0ZXIgc3dpdGNoIGJhY2sgdG8gcmVndWxhciB2YWx1ZXMgaWYgdGhleSByZWNvdmVyLiBOb3JtYWxseSwgYSBzb3VyY2UgZmluaXNoZXMgYWZ0ZXJcclxuICogcGFzc2luZyBhbiB1bmNhdWdodCBlcnJvci5cclxuICovXHJcbmV4cG9ydCB0eXBlIEV4cGVjdGVkPFQ+ID1cclxuICB8IEV4cGVjdGVkRXJyb3I8VD5cclxuICB8IEV4cGVjdGVkVmFsdWU8VD5cclxuICB8IEV4cGVjdGVkUGVuZGluZzxUPjtcclxuXHJcbnR5cGUgRXhwZWN0ZWRFcnJvcjxUPiA9IHt8XHJcbiAgaXNFcnJvcjogdHJ1ZSxcclxuICBpc1BlbmRpbmc6IGZhbHNlLFxyXG4gIGlzVmFsdWU6IGZhbHNlLFxyXG4gIGVycm9yOiBFcnJvcixcclxuICBnZXRPckRlZmF1bHQ6IChkZWY6IFQpID0+IFQsXHJcbiAgbWFwPFU+KGZuOiAoVCkgPT4gVSk6IEV4cGVjdGVkPFU+LFxyXG58fTtcclxuXHJcbnR5cGUgRXhwZWN0ZWRWYWx1ZTxUPiA9IHt8XHJcbiAgaXNFcnJvcjogZmFsc2UsXHJcbiAgaXNQZW5kaW5nOiBmYWxzZSxcclxuICBpc1ZhbHVlOiB0cnVlLFxyXG4gIHZhbHVlOiBULFxyXG4gIGdldE9yRGVmYXVsdDogKGRlZjogVCkgPT4gVCxcclxuICBtYXA8VT4oZm46IChUKSA9PiBVKTogRXhwZWN0ZWQ8VT4sXHJcbnx9O1xyXG5cclxudHlwZSBFeHBlY3RlZFBlbmRpbmc8VD4gPSB7fFxyXG4gIGlzRXJyb3I6IGZhbHNlLFxyXG4gIGlzUGVuZGluZzogdHJ1ZSxcclxuICBpc1ZhbHVlOiBmYWxzZSxcclxuICBnZXRPckRlZmF1bHQ6IChkZWY6IFQpID0+IFQsXHJcbiAgbWFwPFU+KGZuOiAoVCkgPT4gVSk6IEV4cGVjdGVkPFU+LFxyXG58fTtcclxuXHJcbmV4cG9ydCBjbGFzcyBFeHBlY3Qge1xyXG4gIHN0YXRpYyBlcnJvcjxUPihlcnJvcjogRXJyb3IpOiBFeHBlY3RlZEVycm9yPFQ+IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlzRXJyb3I6IHRydWUsXHJcbiAgICAgIGlzUGVuZGluZzogZmFsc2UsXHJcbiAgICAgIGlzVmFsdWU6IGZhbHNlLFxyXG4gICAgICBlcnJvcixcclxuICAgICAgZ2V0T3JEZWZhdWx0KGRlZjogVCk6IFQge1xyXG4gICAgICAgIHJldHVybiBkZWY7XHJcbiAgICAgIH0sXHJcbiAgICAgIG1hcDxVPihmbjogVCA9PiBVKTogRXhwZWN0ZWQ8VT4ge1xyXG4gICAgICAgIHJldHVybiBFeHBlY3QuZXJyb3IoZXJyb3IpO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2YWx1ZTxUPih2YWx1ZTogVCk6IEV4cGVjdGVkVmFsdWU8VD4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaXNFcnJvcjogZmFsc2UsXHJcbiAgICAgIGlzUGVuZGluZzogZmFsc2UsXHJcbiAgICAgIGlzVmFsdWU6IHRydWUsXHJcbiAgICAgIHZhbHVlLFxyXG4gICAgICBnZXRPckRlZmF1bHQoZGVmOiBUKTogVCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICAgIH0sXHJcbiAgICAgIG1hcDxVPihmbjogVCA9PiBVKTogRXhwZWN0ZWQ8VT4ge1xyXG4gICAgICAgIHJldHVybiBFeHBlY3QudmFsdWUoZm4odmFsdWUpKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcGVuZGluZzxUPigpOiBFeHBlY3RlZFBlbmRpbmc8VD4ge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaXNFcnJvcjogZmFsc2UsXHJcbiAgICAgIGlzUGVuZGluZzogdHJ1ZSxcclxuICAgICAgaXNWYWx1ZTogZmFsc2UsXHJcbiAgICAgIGdldE9yRGVmYXVsdChkZWY6IFQpOiBUIHtcclxuICAgICAgICByZXR1cm4gZGVmO1xyXG4gICAgICB9LFxyXG4gICAgICBtYXA8VT4oZm46IFQgPT4gVSk6IEV4cGVjdGVkPFU+IHtcclxuICAgICAgICByZXR1cm4gRXhwZWN0LnBlbmRpbmcoKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXhwZWN0ZWRFcXVhbDxUPihcclxuICBhOiBFeHBlY3RlZDxUPixcclxuICBiOiBFeHBlY3RlZDxUPixcclxuICB2YWx1ZUVxdWFsOiAodmFsdWVBOiBULCB2YWx1ZUI6IFQpID0+IGJvb2xlYW4sXHJcbiAgZXJyb3JFcXVhbDogKGVycm9yQTogRXJyb3IsIGVycm9yQjogRXJyb3IpID0+IGJvb2xlYW4sXHJcbik6IGJvb2xlYW4ge1xyXG4gIGlmIChhLmlzVmFsdWUgJiYgYi5pc1ZhbHVlKSB7XHJcbiAgICByZXR1cm4gdmFsdWVFcXVhbChhLnZhbHVlLCBiLnZhbHVlKTtcclxuICB9IGVsc2UgaWYgKGEuaXNFcnJvciAmJiBiLmlzRXJyb3IpIHtcclxuICAgIHJldHVybiBlcnJvckVxdWFsKGEuZXJyb3IsIGIuZXJyb3IpO1xyXG4gIH0gZWxzZSBpZiAoYS5pc1BlbmRpbmcgJiYgYi5pc1BlbmRpbmcpIHtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG59XHJcbiJdfQ==