"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = humanizeKeystroke;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/*
 * adapted from https://github.com/atom/underscore-plus/blob/master/src/underscore-plus.coffee
 */
const MAC_MODIFIER_KEYMAP = {
  alt: '\u2325',
  cmd: '\u2318',
  ctrl: '\u2303',
  down: '\u2193',
  enter: '\u23ce',
  left: '\u2190',
  option: '\u2325',
  right: '\u2192',
  shift: '\u21e7',
  up: '\u2191'
};
const NON_MAC_MODIFIER_KEYMAP = {
  alt: 'Alt',
  cmd: 'Cmd',
  ctrl: 'Ctrl',
  down: 'Down',
  enter: 'Enter',
  left: 'Left',
  option: 'Alt',
  right: 'Right',
  shift: 'Shift',
  up: 'Up'
}; // Human key combos should always explicitly state the shift key. This map is a disambiguator.
// 'shift-version': 'no-shift-version'

const SHIFT_KEYMAP = {
  _: '-',
  ':': ';',
  '?': '/',
  '"': "'",
  '{': '[',
  '}': ']',
  '+': '=',
  '<': ',',
  '>': '.',
  '|': '\\',
  '~': '`'
};
const FN_KEY_RE = /f[0-9]{1,2}/; // $FlowIssue

function flatten(arr) {
  let flattened = [];

  for (const el of arr) {
    if (Array.isArray(el)) {
      flattened = flattened.concat(flatten(el));
    } else {
      flattened.push(el);
    }
  }

  return flattened;
}

function capitalize(word) {
  const first = word[0] || '';
  const rest = word.slice(1);
  return first.toUpperCase() + rest;
}

function humanizeKey(key, platform) {
  if (!key) {
    return key;
  }

  const modifierKeyMap = platform === 'darwin' ? MAC_MODIFIER_KEYMAP : NON_MAC_MODIFIER_KEYMAP;

  if (modifierKeyMap[key]) {
    return modifierKeyMap[key];
  }

  if (key.length === 1) {
    if (SHIFT_KEYMAP[key]) {
      return [modifierKeyMap.shift, SHIFT_KEYMAP[key]];
    }

    const uppercase = key.toUpperCase();

    if (key === uppercase && uppercase !== key.toLowerCase()) {
      return [modifierKeyMap.shift, uppercase];
    }

    return uppercase;
  }

  if (FN_KEY_RE.test(key)) {
    return key.toUpperCase();
  }

  return platform === 'darwin' ? key : capitalize(key);
}
/**
 * Humanize the keystroke according to platform conventions. This method
 * attempts to mirror the text the given keystroke would have if displayed in
 * a system menu.
 *
 * @param keystroke A String keystroke to humanize such as `ctrl-O`.
 * @param platform An optional String platform to humanize for (default: `process.platform`).
 * @return a humanized representation of the keystroke.
 */


function humanizeKeystroke(keystroke, platform_) {
  let platform = platform_;

  if (!keystroke) {
    return keystroke;
  } // flowlint-next-line sketchy-null-string:off


  platform = platform || process.platform;
  const separator = platform === 'darwin' ? '' : '+';
  let key;
  let keys;
  let splitKeystroke;
  const keystrokes = keystroke.split(' ');
  const humanizedKeystrokes = [];

  for (let i = 0; i < keystrokes.length; i++) {
    const currentKeystroke = keystrokes[i];
    splitKeystroke = currentKeystroke.split('-');
    keys = [];

    for (let index = 0; index < splitKeystroke.length; index++) {
      key = splitKeystroke[index];

      if (key === '' && splitKeystroke[index - 1] === '') {
        key = '-';
      }

      if (key) {
        keys.push(humanizeKey(key, platform));
      }
    }

    keys = Array.from(new Set(flatten(keys)));
    humanizedKeystrokes.push(keys.join(separator));
  }

  return humanizedKeystrokes.join(' ');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL2h1bWFuaXplS2V5c3Ryb2tlLmpzIl0sIm5hbWVzIjpbIk1BQ19NT0RJRklFUl9LRVlNQVAiLCJhbHQiLCJjbWQiLCJjdHJsIiwiZG93biIsImVudGVyIiwibGVmdCIsIm9wdGlvbiIsInJpZ2h0Iiwic2hpZnQiLCJ1cCIsIk5PTl9NQUNfTU9ESUZJRVJfS0VZTUFQIiwiU0hJRlRfS0VZTUFQIiwiXyIsIkZOX0tFWV9SRSIsImZsYXR0ZW4iLCJhcnIiLCJmbGF0dGVuZWQiLCJlbCIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsInB1c2giLCJjYXBpdGFsaXplIiwid29yZCIsImZpcnN0IiwicmVzdCIsInNsaWNlIiwidG9VcHBlckNhc2UiLCJodW1hbml6ZUtleSIsImtleSIsInBsYXRmb3JtIiwibW9kaWZpZXJLZXlNYXAiLCJsZW5ndGgiLCJ1cHBlcmNhc2UiLCJ0b0xvd2VyQ2FzZSIsInRlc3QiLCJodW1hbml6ZUtleXN0cm9rZSIsImtleXN0cm9rZSIsInBsYXRmb3JtXyIsInByb2Nlc3MiLCJzZXBhcmF0b3IiLCJrZXlzIiwic3BsaXRLZXlzdHJva2UiLCJrZXlzdHJva2VzIiwic3BsaXQiLCJodW1hbml6ZWRLZXlzdHJva2VzIiwiaSIsImN1cnJlbnRLZXlzdHJva2UiLCJpbmRleCIsImZyb20iLCJTZXQiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxtQkFBbUIsR0FBRztBQUMxQkMsRUFBQUEsR0FBRyxFQUFFLFFBRHFCO0FBRTFCQyxFQUFBQSxHQUFHLEVBQUUsUUFGcUI7QUFHMUJDLEVBQUFBLElBQUksRUFBRSxRQUhvQjtBQUkxQkMsRUFBQUEsSUFBSSxFQUFFLFFBSm9CO0FBSzFCQyxFQUFBQSxLQUFLLEVBQUUsUUFMbUI7QUFNMUJD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LGNBQWMsQ0FBQ1YsTUFBM0MsRUFBbURnQixLQUFLLEVBQXhELEVBQTREO0FBQzFEbkIsTUFBQUEsR0FBRyxHQUFHYSxjQUFjLENBQUNNLEtBQUQsQ0FBcEI7O0FBQ0EsVUFBSW5CLEdBQUcsS0FBSyxFQUFSLElBQWNhLGNBQWMsQ0FBQ00sS0FBSyxHQUFHLENBQVQsQ0FBZCxLQUE4QixFQUFoRCxFQUFvRDtBQUNsRG5CLFFBQUFBLEdBQUcsR0FBRyxHQUFOO0FBQ0Q7O0FBQ0QsVUFBSUEsR0FBSixFQUFTO0FBQ1BZLFFBQUFBLElBQUksQ0FBQ3BCLElBQUwsQ0FBVU8sV0FBVyxDQUFDQyxHQUFELEVBQU1DLFFBQU4sQ0FBckI7QUFDRDtBQUNGOztBQUNEVyxJQUFBQSxJQUFJLEdBQUd2QixLQUFLLENBQUMrQixJQUFOLENBQVcsSUFBSUMsR0FBSixDQUFRcEMsT0FBTyxDQUFDMkIsSUFBRCxDQUFmLENBQVgsQ0FBUDtBQUNBSSxJQUFBQSxtQkFBbUIsQ0FBQ3hCLElBQXBCLENBQXlCb0IsSUFBSSxDQUFDVSxJQUFMLENBQVVYLFNBQVYsQ0FBekI7QUFDRDs7QUFDRCxTQUFPSyxtQkFBbUIsQ0FBQ00sSUFBcEIsQ0FBeUIsR0FBekIsQ0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3RcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbi8qXHJcbiAqIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYXRvbS91bmRlcnNjb3JlLXBsdXMvYmxvYi9tYXN0ZXIvc3JjL3VuZGVyc2NvcmUtcGx1cy5jb2ZmZWVcclxuICovXHJcblxyXG5jb25zdCBNQUNfTU9ESUZJRVJfS0VZTUFQID0ge1xyXG4gIGFsdDogJ1xcdTIzMjUnLFxyXG4gIGNtZDogJ1xcdTIzMTgnLFxyXG4gIGN0cmw6ICdcXHUyMzAzJyxcclxuICBkb3duOiAnXFx1MjE5MycsXHJcbiAgZW50ZXI6ICdcXHUyM2NlJyxcclxuICBsZWZ0OiAnXFx1MjE5MCcsXHJcbiAgb3B0aW9uOiAnXFx1MjMyNScsXHJcbiAgcmlnaHQ6ICdcXHUyMTkyJyxcclxuICBzaGlmdDogJ1xcdTIxZTcnLFxyXG4gIHVwOiAnXFx1MjE5MScsXHJcbn07XHJcblxyXG5jb25zdCBOT05fTUFDX01PRElGSUVSX0tFWU1BUCA9IHtcclxuICBhbHQ6ICdBbHQnLFxyXG4gIGNtZDogJ0NtZCcsXHJcbiAgY3RybDogJ0N0cmwnLFxyXG4gIGRvd246ICdEb3duJyxcclxuICBlbnRlcjogJ0VudGVyJyxcclxuICBsZWZ0OiAnTGVmdCcsXHJcbiAgb3B0aW9uOiAnQWx0JyxcclxuICByaWdodDogJ1JpZ2h0JyxcclxuICBzaGlmdDogJ1NoaWZ0JyxcclxuICB1cDogJ1VwJyxcclxufTtcclxuXHJcbi8vIEh1bWFuIGtleSBjb21ib3Mgc2hvdWxkIGFsd2F5cyBleHBsaWNpdGx5IHN0YXRlIHRoZSBzaGlmdCBrZXkuIFRoaXMgbWFwIGlzIGEgZGlzYW1iaWd1YXRvci5cclxuLy8gJ3NoaWZ0LXZlcnNpb24nOiAnbm8tc2hpZnQtdmVyc2lvbidcclxuY29uc3QgU0hJRlRfS0VZTUFQID0ge1xyXG4gIF86ICctJyxcclxuICAnOic6ICc7JyxcclxuICAnPyc6ICcvJyxcclxuICAnXCInOiBcIidcIixcclxuICAneyc6ICdbJyxcclxuICAnfSc6ICddJyxcclxuICAnKyc6ICc9JyxcclxuICAnPCc6ICcsJyxcclxuICAnPic6ICcuJyxcclxuICAnfCc6ICdcXFxcJyxcclxuICAnfic6ICdgJyxcclxufTtcclxuXHJcbmNvbnN0IEZOX0tFWV9SRSA9IC9mWzAtOV17MSwyfS87XHJcblxyXG4vLyAkRmxvd0lzc3VlXHJcbmZ1bmN0aW9uIGZsYXR0ZW48VD4oYXJyOiBBcnJheTxUIHwgQXJyYXk8VD4+KTogQXJyYXk8VD4ge1xyXG4gIGxldCBmbGF0dGVuZWQgPSBbXTtcclxuICBmb3IgKGNvbnN0IGVsIG9mIGFycikge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XHJcbiAgICAgIGZsYXR0ZW5lZCA9IGZsYXR0ZW5lZC5jb25jYXQoZmxhdHRlbihlbCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmxhdHRlbmVkLnB1c2goZWwpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gZmxhdHRlbmVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjYXBpdGFsaXplKHdvcmQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgY29uc3QgZmlyc3QgPSB3b3JkWzBdIHx8ICcnO1xyXG4gIGNvbnN0IHJlc3QgPSB3b3JkLnNsaWNlKDEpO1xyXG4gIHJldHVybiBmaXJzdC50b1VwcGVyQ2FzZSgpICsgcmVzdDtcclxufVxyXG5cclxuZnVuY3Rpb24gaHVtYW5pemVLZXkoa2V5OiBzdHJpbmcsIHBsYXRmb3JtOiA/c3RyaW5nKTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiB7XHJcbiAgaWYgKCFrZXkpIHtcclxuICAgIHJldHVybiBrZXk7XHJcbiAgfVxyXG4gIGNvbnN0IG1vZGlmaWVyS2V5TWFwID1cclxuICAgIHBsYXRmb3JtID09PSAnZGFyd2luJyA/IE1BQ19NT0RJRklFUl9LRVlNQVAgOiBOT05fTUFDX01PRElGSUVSX0tFWU1BUDtcclxuICBpZiAobW9kaWZpZXJLZXlNYXBba2V5XSkge1xyXG4gICAgcmV0dXJuIG1vZGlmaWVyS2V5TWFwW2tleV07XHJcbiAgfVxyXG4gIGlmIChrZXkubGVuZ3RoID09PSAxKSB7XHJcbiAgICBpZiAoU0hJRlRfS0VZTUFQW2tleV0pIHtcclxuICAgICAgcmV0dXJuIFttb2RpZmllcktleU1hcC5zaGlmdCwgU0hJRlRfS0VZTUFQW2tleV1dO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdXBwZXJjYXNlID0ga2V5LnRvVXBwZXJDYXNlKCk7XHJcbiAgICBpZiAoa2V5ID09PSB1cHBlcmNhc2UgJiYgdXBwZXJjYXNlICE9PSBrZXkudG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICByZXR1cm4gW21vZGlmaWVyS2V5TWFwLnNoaWZ0LCB1cHBlcmNhc2VdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVwcGVyY2FzZTtcclxuICB9XHJcbiAgaWYgKEZOX0tFWV9SRS50ZXN0KGtleSkpIHtcclxuICAgIHJldHVybiBrZXkudG9VcHBlckNhc2UoKTtcclxuICB9XHJcbiAgcmV0dXJuIHBsYXRmb3JtID09PSAnZGFyd2luJyA/IGtleSA6IGNhcGl0YWxpemUoa2V5KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEh1bWFuaXplIHRoZSBrZXlzdHJva2UgYWNjb3JkaW5nIHRvIHBsYXRmb3JtIGNvbnZlbnRpb25zLiBUaGlzIG1ldGhvZFxyXG4gKiBhdHRlbXB0cyB0byBtaXJyb3IgdGhlIHRleHQgdGhlIGdpdmVuIGtleXN0cm9rZSB3b3VsZCBoYXZlIGlmIGRpc3BsYXllZCBpblxyXG4gKiBhIHN5c3RlbSBtZW51LlxyXG4gKlxyXG4gKiBAcGFyYW0ga2V5c3Ryb2tlIEEgU3RyaW5nIGtleXN0cm9rZSB0byBodW1hbml6ZSBzdWNoIGFzIGBjdHJsLU9gLlxyXG4gKiBAcGFyYW0gcGxhdGZvcm0gQW4gb3B0aW9uYWwgU3RyaW5nIHBsYXRmb3JtIHRvIGh1bWFuaXplIGZvciAoZGVmYXVsdDogYHByb2Nlc3MucGxhdGZvcm1gKS5cclxuICogQHJldHVybiBhIGh1bWFuaXplZCByZXByZXNlbnRhdGlvbiBvZiB0aGUga2V5c3Ryb2tlLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHVtYW5pemVLZXlzdHJva2UoXHJcbiAga2V5c3Ryb2tlOiBzdHJpbmcsXHJcbiAgcGxhdGZvcm1fOiA/c3RyaW5nLFxyXG4pOiBzdHJpbmcge1xyXG4gIGxldCBwbGF0Zm9ybSA9IHBsYXRmb3JtXztcclxuICBpZiAoIWtleXN0cm9rZSkge1xyXG4gICAgcmV0dXJuIGtleXN0cm9rZTtcclxuICB9XHJcbiAgLy8gZmxvd2xpbnQtbmV4dC1saW5lIHNrZXRjaHktbnVsbC1zdHJpbmc6b2ZmXHJcbiAgcGxhdGZvcm0gPSBwbGF0Zm9ybSB8fCBwcm9jZXNzLnBsYXRmb3JtO1xyXG4gIGNvbnN0IHNlcGFyYXRvciA9IHBsYXRmb3JtID09PSAnZGFyd2luJyA/ICcnIDogJysnO1xyXG4gIGxldCBrZXk7XHJcbiAgbGV0IGtleXM7XHJcbiAgbGV0IHNwbGl0S2V5c3Ryb2tlO1xyXG4gIGNvbnN0IGtleXN0cm9rZXMgPSBrZXlzdHJva2Uuc3BsaXQoJyAnKTtcclxuICBjb25zdCBodW1hbml6ZWRLZXlzdHJva2VzID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzdHJva2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBjb25zdCBjdXJyZW50S2V5c3Ryb2tlID0ga2V5c3Ryb2tlc1tpXTtcclxuICAgIHNwbGl0S2V5c3Ryb2tlID0gY3VycmVudEtleXN0cm9rZS5zcGxpdCgnLScpO1xyXG4gICAga2V5cyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHNwbGl0S2V5c3Ryb2tlLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICBrZXkgPSBzcGxpdEtleXN0cm9rZVtpbmRleF07XHJcbiAgICAgIGlmIChrZXkgPT09ICcnICYmIHNwbGl0S2V5c3Ryb2tlW2luZGV4IC0gMV0gPT09ICcnKSB7XHJcbiAgICAgICAga2V5ID0gJy0nO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChrZXkpIHtcclxuICAgICAgICBrZXlzLnB1c2goaHVtYW5pemVLZXkoa2V5LCBwbGF0Zm9ybSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBrZXlzID0gQXJyYXkuZnJvbShuZXcgU2V0KGZsYXR0ZW4oa2V5cykpKTtcclxuICAgIGh1bWFuaXplZEtleXN0cm9rZXMucHVzaChrZXlzLmpvaW4oc2VwYXJhdG9yKSk7XHJcbiAgfVxyXG4gIHJldHVybiBodW1hbml6ZWRLZXlzdHJva2VzLmpvaW4oJyAnKTtcclxufVxyXG4iXX0=