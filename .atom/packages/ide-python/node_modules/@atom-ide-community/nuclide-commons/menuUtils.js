"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sortLabelValue = sortLabelValue;
exports.sortSubmenuGroup = sortSubmenuGroup;
exports.sortMenuGroups = sortMenuGroups;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function sortLabelValue(label) {
  // Ignore the Windows accelerator key hint when sorting, the & doesn't
  // actually appear in the UX so it shouldn't affect the sort.
  return String(label).replace('&', '');
}

function sortSubmenuGroup(menuItems, startIndex, itemCount) {
  // Sort a subset of the items in the menu of length itemCount beginning
  // at startIndex.
  const itemsToSort = menuItems.splice(startIndex, itemCount);
  itemsToSort.sort((a, b) => {
    // Always put the "Version" label up top.
    if (sortLabelValue(a.label).startsWith('Version')) {
      return -1;
    } else {
      return sortLabelValue(a.label).localeCompare(sortLabelValue(b.label));
    }
  });
  menuItems.splice(startIndex, 0, ...itemsToSort);
}

function sortMenuGroups(menuNames) {
  for (const menuName of menuNames) {
    // Sorts the items in a menu alphabetically. If the menu contains one or more
    // separators, then the items within each separator subgroup will be sorted
    // with respect to each other, but items will remain in the same groups, and
    // the separators will not be moved.
    const menu = atom.menu.template.find(m => sortLabelValue(m.label) === menuName);

    if (menu == null) {
      continue;
    } // Sort each group of items (separated by a separator) individually.


    let sortStart = 0;

    for (let i = 0; i < menu.submenu.length; i++) {
      if (menu.submenu[i].type === 'separator') {
        sortSubmenuGroup(menu.submenu, sortStart, i - sortStart);
        sortStart = i + 1;
      }
    } // Sort any remaining items after the last separator.


    if (sortStart < menu.submenu.length) {
      sortSubmenuGroup(menu.submenu, sortStart, menu.submenu.length - sortStart);
    }
  }

  atom.menu.update();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL21lbnVVdGlscy5qcyJdLCJuYW1lcyI6WyJzb3J0TGFiZWxWYWx1ZSIsImxhYmVsIiwiU3RyaW5nIiwicmVwbGFjZSIsInNvcnRTdWJtZW51R3JvdXAiLCJtZW51SXRlbXMiLCJzdGFydEluZGV4IiwiaXRlbUNvdW50IiwiaXRlbXNUb1NvcnQiLCJzcGxpY2UiLCJzb3J0IiwiYSIsImIiLCJzdGFydHNXaXRoIiwibG9jYWxlQ29tcGFyZSIsInNvcnRNZW51R3JvdXBzIiwibWVudU5hbWVzIiwibWVudU5hbWUiLCJtZW51IiwiYXRvbSIsInRlbXBsYXRlIiwiZmluZCIsIm0iLCJzb3J0U3RhcnQiLCJpIiwic3VibWVudSIsImxlbmd0aCIsInR5cGUiLCJ1cGRhdGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFTyxTQUFTQSxjQUFULENBQXdCQyxLQUF4QixFQUF3QztBQUM3QztBQUNBO0FBQ0EsU0FBT0MsTUFBTSxDQUFDRCxLQUFELENBQU4sQ0FBY0UsT0FBZCxDQUFzQixHQUF0QixFQUEyQixFQUEzQixDQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsZ0JBQVQsQ0FDTEMsU0FESyxFQUlMQyxVQUpLLEVBS0xDLFNBTEssRUFNTDtBQUNBO0FBQ0E7QUFDQSxRQUFNQyxXQUFXLEdBQUdILFNBQVMsQ0FBQ0ksTUFBVixDQUFpQkgsVUFBakIsRUFBNkJDLFNBQTdCLENBQXBCO0FBQ0FDLEVBQUFBLFdBQVcsQ0FBQ0UsSUFBWixDQUFpQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVTtBQUN6QjtBQUNBLFFBQUlaLGNBQWMsQ0FBQ1csQ0FBQyxDQUFDVixLQUFILENBQWQsQ0FBd0JZLFVBQXhCLENBQW1DLFNBQW5DLENBQUosRUFBbUQ7QUFDakQsYUFBTyxDQUFDLENBQVI7QUFDRCxLQUZELE1BRU87QUFDTCxhQUFPYixjQUFjLENBQUNXLENBQUMsQ0FBQ1YsS0FBSCxDQUFkLENBQXdCYSxhQUF4QixDQUFzQ2QsY0FBYyxDQUFDWSxDQUFDLENBQUNYLEtBQUgsQ0FBcEQsQ0FBUDtBQUNEO0FBQ0YsR0FQRDtBQVNBSSxFQUFBQSxTQUFTLENBQUNJLE1BQVYsQ0FBaUJILFVBQWpCLEVBQTZCLENBQTdCLEVBQWdDLEdBQUdFLFdBQW5DO0FBQ0Q7O0FBRU0sU0FBU08sY0FBVCxDQUF3QkMsU0FBeEIsRUFBa0Q7QUFDdkQsT0FBSyxNQUFNQyxRQUFYLElBQXVCRCxTQUF2QixFQUFrQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQU1FLElBQUksR0FBR0MsSUFBSSxDQUFDRCxJQUFMLENBQVVFLFFBQVYsQ0FBbUJDLElBQW5CLENBQ1hDLENBQUMsSUFBSXRCLGNBQWMsQ0FBQ3NCLENBQUMsQ0FBQ3JCLEtBQUgsQ0FBZCxLQUE0QmdCLFFBRHRCLENBQWI7O0FBR0EsUUFBSUMsSUFBSSxJQUFJLElBQVosRUFBa0I7QUFDaEI7QUFDRCxLQVYrQixDQVloQzs7O0FBQ0EsUUFBSUssU0FBUyxHQUFHLENBQWhCOztBQUNBLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR04sSUFBSSxDQUFDTyxPQUFMLENBQWFDLE1BQWpDLEVBQXlDRixDQUFDLEVBQTFDLEVBQThDO0FBQzVDLFVBQUlOLElBQUksQ0FBQ08sT0FBTCxDQUFhRCxDQUFiLEVBQWdCRyxJQUFoQixLQUF5QixXQUE3QixFQUEwQztBQUN4Q3ZCLFFBQUFBLGdCQUFnQixDQUFDYyxJQUFJLENBQUNPLE9BQU4sRUFBZUYsU0FBZixFQUEwQkMsQ0FBQyxHQUFHRCxTQUE5QixDQUFoQjtBQUNBQSxRQUFBQSxTQUFTLEdBQUdDLENBQUMsR0FBRyxDQUFoQjtBQUNEO0FBQ0YsS0FuQitCLENBcUJoQzs7O0FBQ0EsUUFBSUQsU0FBUyxHQUFHTCxJQUFJLENBQUNPLE9BQUwsQ0FBYUMsTUFBN0IsRUFBcUM7QUFDbkN0QixNQUFBQSxnQkFBZ0IsQ0FDZGMsSUFBSSxDQUFDTyxPQURTLEVBRWRGLFNBRmMsRUFHZEwsSUFBSSxDQUFDTyxPQUFMLENBQWFDLE1BQWIsR0FBc0JILFNBSFIsQ0FBaEI7QUFLRDtBQUNGOztBQUVESixFQUFBQSxJQUFJLENBQUNELElBQUwsQ0FBVVUsTUFBVjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3RcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzb3J0TGFiZWxWYWx1ZShsYWJlbDogP3N0cmluZykge1xyXG4gIC8vIElnbm9yZSB0aGUgV2luZG93cyBhY2NlbGVyYXRvciBrZXkgaGludCB3aGVuIHNvcnRpbmcsIHRoZSAmIGRvZXNuJ3RcclxuICAvLyBhY3R1YWxseSBhcHBlYXIgaW4gdGhlIFVYIHNvIGl0IHNob3VsZG4ndCBhZmZlY3QgdGhlIHNvcnQuXHJcbiAgcmV0dXJuIFN0cmluZyhsYWJlbCkucmVwbGFjZSgnJicsICcnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRTdWJtZW51R3JvdXAoXHJcbiAgbWVudUl0ZW1zOiBBcnJheTx7XHJcbiAgICBsYWJlbDogc3RyaW5nLFxyXG4gIH0+LFxyXG4gIHN0YXJ0SW5kZXg6IG51bWJlcixcclxuICBpdGVtQ291bnQ6IG51bWJlcixcclxuKSB7XHJcbiAgLy8gU29ydCBhIHN1YnNldCBvZiB0aGUgaXRlbXMgaW4gdGhlIG1lbnUgb2YgbGVuZ3RoIGl0ZW1Db3VudCBiZWdpbm5pbmdcclxuICAvLyBhdCBzdGFydEluZGV4LlxyXG4gIGNvbnN0IGl0ZW1zVG9Tb3J0ID0gbWVudUl0ZW1zLnNwbGljZShzdGFydEluZGV4LCBpdGVtQ291bnQpO1xyXG4gIGl0ZW1zVG9Tb3J0LnNvcnQoKGEsIGIpID0+IHtcclxuICAgIC8vIEFsd2F5cyBwdXQgdGhlIFwiVmVyc2lvblwiIGxhYmVsIHVwIHRvcC5cclxuICAgIGlmIChzb3J0TGFiZWxWYWx1ZShhLmxhYmVsKS5zdGFydHNXaXRoKCdWZXJzaW9uJykpIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHNvcnRMYWJlbFZhbHVlKGEubGFiZWwpLmxvY2FsZUNvbXBhcmUoc29ydExhYmVsVmFsdWUoYi5sYWJlbCkpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBtZW51SXRlbXMuc3BsaWNlKHN0YXJ0SW5kZXgsIDAsIC4uLml0ZW1zVG9Tb3J0KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRNZW51R3JvdXBzKG1lbnVOYW1lczogQXJyYXk8c3RyaW5nPikge1xyXG4gIGZvciAoY29uc3QgbWVudU5hbWUgb2YgbWVudU5hbWVzKSB7XHJcbiAgICAvLyBTb3J0cyB0aGUgaXRlbXMgaW4gYSBtZW51IGFscGhhYmV0aWNhbGx5LiBJZiB0aGUgbWVudSBjb250YWlucyBvbmUgb3IgbW9yZVxyXG4gICAgLy8gc2VwYXJhdG9ycywgdGhlbiB0aGUgaXRlbXMgd2l0aGluIGVhY2ggc2VwYXJhdG9yIHN1Ymdyb3VwIHdpbGwgYmUgc29ydGVkXHJcbiAgICAvLyB3aXRoIHJlc3BlY3QgdG8gZWFjaCBvdGhlciwgYnV0IGl0ZW1zIHdpbGwgcmVtYWluIGluIHRoZSBzYW1lIGdyb3VwcywgYW5kXHJcbiAgICAvLyB0aGUgc2VwYXJhdG9ycyB3aWxsIG5vdCBiZSBtb3ZlZC5cclxuICAgIGNvbnN0IG1lbnUgPSBhdG9tLm1lbnUudGVtcGxhdGUuZmluZChcclxuICAgICAgbSA9PiBzb3J0TGFiZWxWYWx1ZShtLmxhYmVsKSA9PT0gbWVudU5hbWUsXHJcbiAgICApO1xyXG4gICAgaWYgKG1lbnUgPT0gbnVsbCkge1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTb3J0IGVhY2ggZ3JvdXAgb2YgaXRlbXMgKHNlcGFyYXRlZCBieSBhIHNlcGFyYXRvcikgaW5kaXZpZHVhbGx5LlxyXG4gICAgbGV0IHNvcnRTdGFydCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lbnUuc3VibWVudS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAobWVudS5zdWJtZW51W2ldLnR5cGUgPT09ICdzZXBhcmF0b3InKSB7XHJcbiAgICAgICAgc29ydFN1Ym1lbnVHcm91cChtZW51LnN1Ym1lbnUsIHNvcnRTdGFydCwgaSAtIHNvcnRTdGFydCk7XHJcbiAgICAgICAgc29ydFN0YXJ0ID0gaSArIDE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTb3J0IGFueSByZW1haW5pbmcgaXRlbXMgYWZ0ZXIgdGhlIGxhc3Qgc2VwYXJhdG9yLlxyXG4gICAgaWYgKHNvcnRTdGFydCA8IG1lbnUuc3VibWVudS5sZW5ndGgpIHtcclxuICAgICAgc29ydFN1Ym1lbnVHcm91cChcclxuICAgICAgICBtZW51LnN1Ym1lbnUsXHJcbiAgICAgICAgc29ydFN0YXJ0LFxyXG4gICAgICAgIG1lbnUuc3VibWVudS5sZW5ndGggLSBzb3J0U3RhcnQsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhdG9tLm1lbnUudXBkYXRlKCk7XHJcbn1cclxuIl19