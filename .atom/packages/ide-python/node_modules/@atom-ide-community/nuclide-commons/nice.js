"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.niceSafeSpawn = niceSafeSpawn;
exports.niceObserveProcess = niceObserveProcess;

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _which = _interopRequireDefault(require("./which"));

var _process = require("./process");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const NICE_COMMAND = 'nice';
const IONICE_COMMAND = 'ionice';

async function niceSafeSpawn(command, args, execOptions) {
  const nicified = await nicifyCommand(command, args, execOptions);
  const processStream = (0, _process.spawn)(...nicified).publish();
  const processPromise = processStream.take(1).toPromise();
  processStream.connect();
  return processPromise;
}
/**
 * Takes the arguments that you would normally pass to `spawn()` and returns an array of new
 * arguments to use to run the command under `nice`.
 *
 * Example:
 *
 * ```js
 * observeProcess(...(await nicifyCommand('hg', ['diff']))).subscribe(...);
 * ```
 *
 * See also `scriptifyCommand()` which does a similar thing but for `script`.
 */


async function nicifyCommand(command, args, options) {
  const fullArgs = [command, ...(args || [])];

  if (await hasNiceCommand()) {
    fullArgs.unshift(NICE_COMMAND);
  }

  if (await hasIoniceCommand()) {
    // Leave the process in the Best Effort class (default), but set it to the lowest priority for
    // that class. Priorities range from 0-7 with 4 as the default and lower numbers representing
    // higher priorities.
    //
    // See `man ionice` or http://linux.die.net/man/1/ionice
    //
    // It's not specified by POSIX like `nice` is but since it is included in util-linux which is
    // relatively core
    // (https://git.kernel.org/cgit/utils/util-linux/util-linux.git/tree/schedutils/ionice.c), I
    // think we can assume that it uses this interface if it exists.
    fullArgs.unshift(IONICE_COMMAND, '-n', '7');
  }

  return [fullArgs[0], fullArgs.slice(1), options];
}

const commandAvailabilityCache = (0, _lruCache.default)({
  max: 10,
  // Realistically this will not change very often so we can cache for long periods of time. We
  // probably could just check at startup and get away with it, but maybe someone will install
  // `ionice` and it would be nice to pick that up.
  maxAge: 1000 * 60 * 5 // 5 minutes

});

function hasNiceCommand() {
  return hasCommand(NICE_COMMAND);
}

function hasIoniceCommand() {
  return hasCommand(IONICE_COMMAND);
}

function hasCommand(command) {
  let result = commandAvailabilityCache.get(command);

  if (result == null) {
    result = (0, _which.default)(command).then(x => x != null);
    commandAvailabilityCache.set(command, result);
  }

  return result;
}

function niceObserveProcess(command, args, options) {
  return _rxjsCompatUmdMin.Observable.defer(() => nicifyCommand(command, args, options)).switchMap(spawnArgs => (0, _process.observeProcess)(...spawnArgs));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL25pY2UuanMiXSwibmFtZXMiOlsiTklDRV9DT01NQU5EIiwiSU9OSUNFX0NPTU1BTkQiLCJuaWNlU2FmZVNwYXduIiwiY29tbWFuZCIsImFyZ3MiLCJleGVjT3B0aW9ucyIsIm5pY2lmaWVkIiwibmljaWZ5Q29tbWFuZCIsInByb2Nlc3NTdHJlYW0iLCJwdWJsaXNoIiwicHJvY2Vzc1Byb21pc2UiLCJ0YWtlIiwidG9Qcm9taXNlIiwiY29ubmVjdCIsIm9wdGlvbnMiLCJmdWxsQXJncyIsImhhc05pY2VDb21tYW5kIiwidW5zaGlmdCIsImhhc0lvbmljZUNvbW1hbmQiLCJzbGljZSIsImNvbW1hbmRBdmFpbGFiaWxpdHlDYWNoZSIsIm1heCIsIm1heEFnZSIsImhhc0NvbW1hbmQiLCJyZXN1bHQiLCJnZXQiLCJ0aGVuIiwieCIsInNldCIsIm5pY2VPYnNlcnZlUHJvY2VzcyIsIk9ic2VydmFibGUiLCJkZWZlciIsInN3aXRjaE1hcCIsInNwYXduQXJncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFlQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQW5CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBV0EsTUFBTUEsWUFBWSxHQUFHLE1BQXJCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLFFBQXZCOztBQUVPLGVBQWVDLGFBQWYsQ0FDTEMsT0FESyxFQUVMQyxJQUZLLEVBR0xDLFdBSEssRUFJZ0M7QUFDckMsUUFBTUMsUUFBUSxHQUFHLE1BQU1DLGFBQWEsQ0FBQ0osT0FBRCxFQUFVQyxJQUFWLEVBQWdCQyxXQUFoQixDQUFwQztBQUNBLFFBQU1HLGFBQWEsR0FBRyxvQkFBTSxHQUFHRixRQUFULEVBQW1CRyxPQUFuQixFQUF0QjtBQUNBLFFBQU1DLGNBQWMsR0FBR0YsYUFBYSxDQUFDRyxJQUFkLENBQW1CLENBQW5CLEVBQXNCQyxTQUF0QixFQUF2QjtBQUNBSixFQUFBQSxhQUFhLENBQUNLLE9BQWQ7QUFDQSxTQUFPSCxjQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLGVBQWVILGFBQWYsQ0FDRUosT0FERixFQUVFQyxJQUZGLEVBR0VVLE9BSEYsRUFJdUM7QUFDckMsUUFBTUMsUUFBUSxHQUFHLENBQUNaLE9BQUQsRUFBVSxJQUFJQyxJQUFJLElBQUksRUFBWixDQUFWLENBQWpCOztBQUNBLE1BQUksTUFBTVksY0FBYyxFQUF4QixFQUE0QjtBQUMxQkQsSUFBQUEsUUFBUSxDQUFDRSxPQUFULENBQWlCakIsWUFBakI7QUFDRDs7QUFDRCxNQUFJLE1BQU1rQixnQkFBZ0IsRUFBMUIsRUFBOEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUgsSUFBQUEsUUFBUSxDQUFDRSxPQUFULENBQWlCaEIsY0FBakIsRUFBaUMsSUFBakMsRUFBdUMsR0FBdkM7QUFDRDs7QUFDRCxTQUFPLENBQUNjLFFBQVEsQ0FBQyxDQUFELENBQVQsRUFBY0EsUUFBUSxDQUFDSSxLQUFULENBQWUsQ0FBZixDQUFkLEVBQWlDTCxPQUFqQyxDQUFQO0FBQ0Q7O0FBRUQsTUFBTU0sd0JBQTRELEdBQUcsdUJBQUk7QUFDdkVDLEVBQUFBLEdBQUcsRUFBRSxFQURrRTtBQUV2RTtBQUNBO0FBQ0E7QUFDQUMsRUFBQUEsTUFBTSxFQUFFLE9BQU8sRUFBUCxHQUFZLENBTG1ELENBS2hEOztBQUxnRCxDQUFKLENBQXJFOztBQVFBLFNBQVNOLGNBQVQsR0FBNEM7QUFDMUMsU0FBT08sVUFBVSxDQUFDdkIsWUFBRCxDQUFqQjtBQUNEOztBQUVELFNBQVNrQixnQkFBVCxHQUE4QztBQUM1QyxTQUFPSyxVQUFVLENBQUN0QixjQUFELENBQWpCO0FBQ0Q7O0FBRUQsU0FBU3NCLFVBQVQsQ0FBb0JwQixPQUFwQixFQUF1RDtBQUNyRCxNQUFJcUIsTUFBeUIsR0FBR0osd0JBQXdCLENBQUNLLEdBQXpCLENBQTZCdEIsT0FBN0IsQ0FBaEM7O0FBQ0EsTUFBSXFCLE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ2xCQSxJQUFBQSxNQUFNLEdBQUcsb0JBQU1yQixPQUFOLEVBQWV1QixJQUFmLENBQW9CQyxDQUFDLElBQUlBLENBQUMsSUFBSSxJQUE5QixDQUFUO0FBQ0FQLElBQUFBLHdCQUF3QixDQUFDUSxHQUF6QixDQUE2QnpCLE9BQTdCLEVBQXNDcUIsTUFBdEM7QUFDRDs7QUFDRCxTQUFPQSxNQUFQO0FBQ0Q7O0FBRU0sU0FBU0ssa0JBQVQsQ0FDTDFCLE9BREssRUFFTEMsSUFGSyxFQUdMVSxPQUhLLEVBSXVCO0FBQzVCLFNBQU9nQiw2QkFBV0MsS0FBWCxDQUFpQixNQUN0QnhCLGFBQWEsQ0FBQ0osT0FBRCxFQUFVQyxJQUFWLEVBQWdCVSxPQUFoQixDQURSLEVBRUxrQixTQUZLLENBRUtDLFNBQVMsSUFBSSw2QkFBZSxHQUFHQSxTQUFsQixDQUZsQixDQUFQO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgdHlwZSB7TFJVQ2FjaGV9IGZyb20gJ2xydS1jYWNoZSc7XHJcbmltcG9ydCB0eXBlIHtPYnNlcnZlUHJvY2Vzc09wdGlvbnMsIFByb2Nlc3NNZXNzYWdlfSBmcm9tICcuL3Byb2Nlc3MnO1xyXG5cclxuaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMtY29tcGF0L2J1bmRsZXMvcnhqcy1jb21wYXQudW1kLm1pbi5qcyc7XHJcblxyXG5pbXBvcnQgd2hpY2ggZnJvbSAnLi93aGljaCc7XHJcbmltcG9ydCB7c3Bhd24sIG9ic2VydmVQcm9jZXNzfSBmcm9tICcuL3Byb2Nlc3MnO1xyXG5cclxuY29uc3QgTklDRV9DT01NQU5EID0gJ25pY2UnO1xyXG5jb25zdCBJT05JQ0VfQ09NTUFORCA9ICdpb25pY2UnO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG5pY2VTYWZlU3Bhd24oXHJcbiAgY29tbWFuZDogc3RyaW5nLFxyXG4gIGFyZ3M6IEFycmF5PHN0cmluZz4sXHJcbiAgZXhlY09wdGlvbnM/OiBPYmplY3QsXHJcbik6IFByb21pc2U8Y2hpbGRfcHJvY2VzcyRDaGlsZFByb2Nlc3M+IHtcclxuICBjb25zdCBuaWNpZmllZCA9IGF3YWl0IG5pY2lmeUNvbW1hbmQoY29tbWFuZCwgYXJncywgZXhlY09wdGlvbnMpO1xyXG4gIGNvbnN0IHByb2Nlc3NTdHJlYW0gPSBzcGF3biguLi5uaWNpZmllZCkucHVibGlzaCgpO1xyXG4gIGNvbnN0IHByb2Nlc3NQcm9taXNlID0gcHJvY2Vzc1N0cmVhbS50YWtlKDEpLnRvUHJvbWlzZSgpO1xyXG4gIHByb2Nlc3NTdHJlYW0uY29ubmVjdCgpO1xyXG4gIHJldHVybiBwcm9jZXNzUHJvbWlzZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRha2VzIHRoZSBhcmd1bWVudHMgdGhhdCB5b3Ugd291bGQgbm9ybWFsbHkgcGFzcyB0byBgc3Bhd24oKWAgYW5kIHJldHVybnMgYW4gYXJyYXkgb2YgbmV3XHJcbiAqIGFyZ3VtZW50cyB0byB1c2UgdG8gcnVuIHRoZSBjb21tYW5kIHVuZGVyIGBuaWNlYC5cclxuICpcclxuICogRXhhbXBsZTpcclxuICpcclxuICogYGBganNcclxuICogb2JzZXJ2ZVByb2Nlc3MoLi4uKGF3YWl0IG5pY2lmeUNvbW1hbmQoJ2hnJywgWydkaWZmJ10pKSkuc3Vic2NyaWJlKC4uLik7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBTZWUgYWxzbyBgc2NyaXB0aWZ5Q29tbWFuZCgpYCB3aGljaCBkb2VzIGEgc2ltaWxhciB0aGluZyBidXQgZm9yIGBzY3JpcHRgLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gbmljaWZ5Q29tbWFuZDxUPihcclxuICBjb21tYW5kOiBzdHJpbmcsXHJcbiAgYXJncz86IEFycmF5PHN0cmluZz4sXHJcbiAgb3B0aW9uczogVCxcclxuKTogUHJvbWlzZTxbc3RyaW5nLCBBcnJheTxzdHJpbmc+LCBUXT4ge1xyXG4gIGNvbnN0IGZ1bGxBcmdzID0gW2NvbW1hbmQsIC4uLihhcmdzIHx8IFtdKV07XHJcbiAgaWYgKGF3YWl0IGhhc05pY2VDb21tYW5kKCkpIHtcclxuICAgIGZ1bGxBcmdzLnVuc2hpZnQoTklDRV9DT01NQU5EKTtcclxuICB9XHJcbiAgaWYgKGF3YWl0IGhhc0lvbmljZUNvbW1hbmQoKSkge1xyXG4gICAgLy8gTGVhdmUgdGhlIHByb2Nlc3MgaW4gdGhlIEJlc3QgRWZmb3J0IGNsYXNzIChkZWZhdWx0KSwgYnV0IHNldCBpdCB0byB0aGUgbG93ZXN0IHByaW9yaXR5IGZvclxyXG4gICAgLy8gdGhhdCBjbGFzcy4gUHJpb3JpdGllcyByYW5nZSBmcm9tIDAtNyB3aXRoIDQgYXMgdGhlIGRlZmF1bHQgYW5kIGxvd2VyIG51bWJlcnMgcmVwcmVzZW50aW5nXHJcbiAgICAvLyBoaWdoZXIgcHJpb3JpdGllcy5cclxuICAgIC8vXHJcbiAgICAvLyBTZWUgYG1hbiBpb25pY2VgIG9yIGh0dHA6Ly9saW51eC5kaWUubmV0L21hbi8xL2lvbmljZVxyXG4gICAgLy9cclxuICAgIC8vIEl0J3Mgbm90IHNwZWNpZmllZCBieSBQT1NJWCBsaWtlIGBuaWNlYCBpcyBidXQgc2luY2UgaXQgaXMgaW5jbHVkZWQgaW4gdXRpbC1saW51eCB3aGljaCBpc1xyXG4gICAgLy8gcmVsYXRpdmVseSBjb3JlXHJcbiAgICAvLyAoaHR0cHM6Ly9naXQua2VybmVsLm9yZy9jZ2l0L3V0aWxzL3V0aWwtbGludXgvdXRpbC1saW51eC5naXQvdHJlZS9zY2hlZHV0aWxzL2lvbmljZS5jKSwgSVxyXG4gICAgLy8gdGhpbmsgd2UgY2FuIGFzc3VtZSB0aGF0IGl0IHVzZXMgdGhpcyBpbnRlcmZhY2UgaWYgaXQgZXhpc3RzLlxyXG4gICAgZnVsbEFyZ3MudW5zaGlmdChJT05JQ0VfQ09NTUFORCwgJy1uJywgJzcnKTtcclxuICB9XHJcbiAgcmV0dXJuIFtmdWxsQXJnc1swXSwgZnVsbEFyZ3Muc2xpY2UoMSksIG9wdGlvbnNdO1xyXG59XHJcblxyXG5jb25zdCBjb21tYW5kQXZhaWxhYmlsaXR5Q2FjaGU6IExSVUNhY2hlPHN0cmluZywgUHJvbWlzZTxib29sZWFuPj4gPSBMUlUoe1xyXG4gIG1heDogMTAsXHJcbiAgLy8gUmVhbGlzdGljYWxseSB0aGlzIHdpbGwgbm90IGNoYW5nZSB2ZXJ5IG9mdGVuIHNvIHdlIGNhbiBjYWNoZSBmb3IgbG9uZyBwZXJpb2RzIG9mIHRpbWUuIFdlXHJcbiAgLy8gcHJvYmFibHkgY291bGQganVzdCBjaGVjayBhdCBzdGFydHVwIGFuZCBnZXQgYXdheSB3aXRoIGl0LCBidXQgbWF5YmUgc29tZW9uZSB3aWxsIGluc3RhbGxcclxuICAvLyBgaW9uaWNlYCBhbmQgaXQgd291bGQgYmUgbmljZSB0byBwaWNrIHRoYXQgdXAuXHJcbiAgbWF4QWdlOiAxMDAwICogNjAgKiA1LCAvLyA1IG1pbnV0ZXNcclxufSk7XHJcblxyXG5mdW5jdGlvbiBoYXNOaWNlQ29tbWFuZCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICByZXR1cm4gaGFzQ29tbWFuZChOSUNFX0NPTU1BTkQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBoYXNJb25pY2VDb21tYW5kKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gIHJldHVybiBoYXNDb21tYW5kKElPTklDRV9DT01NQU5EKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzQ29tbWFuZChjb21tYW5kOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICBsZXQgcmVzdWx0OiA/UHJvbWlzZTxib29sZWFuPiA9IGNvbW1hbmRBdmFpbGFiaWxpdHlDYWNoZS5nZXQoY29tbWFuZCk7XHJcbiAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XHJcbiAgICByZXN1bHQgPSB3aGljaChjb21tYW5kKS50aGVuKHggPT4geCAhPSBudWxsKTtcclxuICAgIGNvbW1hbmRBdmFpbGFiaWxpdHlDYWNoZS5zZXQoY29tbWFuZCwgcmVzdWx0KTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5pY2VPYnNlcnZlUHJvY2VzcyhcclxuICBjb21tYW5kOiBzdHJpbmcsXHJcbiAgYXJncz86IEFycmF5PHN0cmluZz4sXHJcbiAgb3B0aW9ucz86IE9ic2VydmVQcm9jZXNzT3B0aW9ucyxcclxuKTogT2JzZXJ2YWJsZTxQcm9jZXNzTWVzc2FnZT4ge1xyXG4gIHJldHVybiBPYnNlcnZhYmxlLmRlZmVyKCgpID0+XHJcbiAgICBuaWNpZnlDb21tYW5kKGNvbW1hbmQsIGFyZ3MsIG9wdGlvbnMpLFxyXG4gICkuc3dpdGNoTWFwKHNwYXduQXJncyA9PiBvYnNlcnZlUHJvY2VzcyguLi5zcGF3bkFyZ3MpKTtcclxufVxyXG4iXX0=