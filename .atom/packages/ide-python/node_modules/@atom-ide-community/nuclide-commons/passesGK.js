"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isGkEnabled = isGkEnabled;
exports.onceGkInitialized = onceGkInitialized;
exports.onceGkInitializedAsync = onceGkInitializedAsync;
exports.getCacheEntries = getCacheEntries;
exports.default = void 0;

var _once = _interopRequireDefault(require("./once"));

var _UniversalDisposable = _interopRequireDefault(require("./UniversalDisposable"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * Get the actual Gatekeeper constructor or stub the relevant methods for OSS
 * friendliness.
 */
const getGatekeeper = (0, _once.default)(() => {
  let Gatekeeper; // try {
  //   $FlowFB
  //   Gatekeeper = require('../fb-gatekeeper-raw').Gatekeeper; // eslint-disable-line nuclide-internal/modules-dependencies
  // } catch (e) {

  Gatekeeper = class {
    isGkEnabled(name) {
      return null;
    }

    asyncIsGkEnabled(name, timeout) {
      return Promise.resolve();
    }

    onceGkInitialized(callback) {
      let canceled = false;
      process.nextTick(() => {
        if (!canceled) {
          callback();
        }
      });
      return new _UniversalDisposable.default(() => {
        canceled = true;
      });
    }

    getCacheEntries() {
      return [];
    }

  }; // }

  return new Gatekeeper();
});
/**
 * Check a GK. Silently return false on error.
 *
 * (NOTE) The underlying module (fb-gatekeeper) checks the Unix name the node
 * process is running on. If you use this predicate in a package running on the
 * server (e.g., a language service backend) then it might not check the Unix
 * name you expect (e.g., `svmscm` on an On Demand instead of the user's Unix
 * name).
 */

var passesGK = async function passesGK(name, // timeout in ms
timeout) {
  const gatekeeper = getGatekeeper();

  try {
    return (await gatekeeper.asyncIsGkEnabled(name, timeout)) === true;
  } catch (e) {
    // If the Gatekeeper class implements caching, this may retrieve a cached value.
    return gatekeeper.isGkEnabled(name) === true;
  }
};
/**
 * Synchronous GK check. There is no guarantee that GKs have loaded. This
 * should be used inside a `onceGkInitialized`.
 *
 * (NOTE) The underlying module (fb-gatekeeper) checks the Unix name the node
 * process is running on. If you use this predicate in a package running on the
 * server (e.g., a language service backend) then it might not check the Unix
 * name you expect (e.g., `svcscm` on an On Demand instead of the user's Unix
 * name).
 */


exports.default = passesGK;

function isGkEnabled(name) {
  return getGatekeeper().isGkEnabled(name);
}

function onceGkInitialized(callback) {
  return getGatekeeper().onceGkInitialized(callback);
}

function onceGkInitializedAsync() {
  return new Promise(resolve => {
    getGatekeeper().onceGkInitialized(() => resolve());
  });
}

function getCacheEntries() {
  return getGatekeeper().getCacheEntries();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3Bhc3Nlc0dLLmpzIl0sIm5hbWVzIjpbImdldEdhdGVrZWVwZXIiLCJHYXRla2VlcGVyIiwiaXNHa0VuYWJsZWQiLCJuYW1lIiwiYXN5bmNJc0drRW5hYmxlZCIsInRpbWVvdXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm9uY2VHa0luaXRpYWxpemVkIiwiY2FsbGJhY2siLCJjYW5jZWxlZCIsInByb2Nlc3MiLCJuZXh0VGljayIsIlVuaXZlcnNhbERpc3Bvc2FibGUiLCJnZXRDYWNoZUVudHJpZXMiLCJwYXNzZXNHSyIsImdhdGVrZWVwZXIiLCJlIiwib25jZUdrSW5pdGlhbGl6ZWRBc3luYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFZQTs7QUFDQTs7OztBQWJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxhQUFhLEdBQUcsbUJBQUssTUFBTTtBQUMvQixNQUFJQyxVQUFKLENBRCtCLENBRS9CO0FBQ0E7QUFDQTtBQUNBOztBQUNFQSxFQUFBQSxVQUFVLEdBQUcsTUFBTTtBQUNqQkMsSUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQXlCO0FBQ2xDLGFBQU8sSUFBUDtBQUNEOztBQUVEQyxJQUFBQSxnQkFBZ0IsQ0FBQ0QsSUFBRCxFQUFlRSxPQUFmLEVBQW9EO0FBQ2xFLGFBQU9DLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0Q7O0FBRURDLElBQUFBLGlCQUFpQixDQUFDQyxRQUFELEVBQXFDO0FBQ3BELFVBQUlDLFFBQVEsR0FBRyxLQUFmO0FBQ0FDLE1BQUFBLE9BQU8sQ0FBQ0MsUUFBUixDQUFpQixNQUFNO0FBQ3JCLFlBQUksQ0FBQ0YsUUFBTCxFQUFlO0FBQ2JELFVBQUFBLFFBQVE7QUFDVDtBQUNGLE9BSkQ7QUFLQSxhQUFPLElBQUlJLDRCQUFKLENBQXdCLE1BQU07QUFDbkNILFFBQUFBLFFBQVEsR0FBRyxJQUFYO0FBQ0QsT0FGTSxDQUFQO0FBR0Q7O0FBRURJLElBQUFBLGVBQWUsR0FBZ0M7QUFDN0MsYUFBTyxFQUFQO0FBQ0Q7O0FBdkJnQixHQUFuQixDQU42QixDQStCL0I7O0FBQ0EsU0FBTyxJQUFJYixVQUFKLEVBQVA7QUFDRCxDQWpDcUIsQ0FBdEI7QUFtQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztJQUMrQmMsUSxHQUFmLGVBQWVBLFFBQWYsQ0FDZFosSUFEYyxFQUVkO0FBQ0FFLE9BSGMsRUFJSTtBQUNsQixRQUFNVyxVQUFVLEdBQUdoQixhQUFhLEVBQWhDOztBQUNBLE1BQUk7QUFDRixXQUFPLENBQUMsTUFBTWdCLFVBQVUsQ0FBQ1osZ0JBQVgsQ0FBNEJELElBQTVCLEVBQWtDRSxPQUFsQyxDQUFQLE1BQXVELElBQTlEO0FBQ0QsR0FGRCxDQUVFLE9BQU9ZLENBQVAsRUFBVTtBQUNWO0FBQ0EsV0FBT0QsVUFBVSxDQUFDZCxXQUFYLENBQXVCQyxJQUF2QixNQUFpQyxJQUF4QztBQUNEO0FBQ0YsQztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNPLFNBQVNELFdBQVQsQ0FBcUJDLElBQXJCLEVBQTZDO0FBQ2xELFNBQU9ILGFBQWEsR0FBR0UsV0FBaEIsQ0FBNEJDLElBQTVCLENBQVA7QUFDRDs7QUFFTSxTQUFTSyxpQkFBVCxDQUEyQkMsUUFBM0IsRUFBK0Q7QUFDcEUsU0FBT1QsYUFBYSxHQUFHUSxpQkFBaEIsQ0FBa0NDLFFBQWxDLENBQVA7QUFDRDs7QUFFTSxTQUFTUyxzQkFBVCxHQUFpRDtBQUN0RCxTQUFPLElBQUlaLE9BQUosQ0FBWUMsT0FBTyxJQUFJO0FBQzVCUCxJQUFBQSxhQUFhLEdBQUdRLGlCQUFoQixDQUFrQyxNQUFNRCxPQUFPLEVBQS9DO0FBQ0QsR0FGTSxDQUFQO0FBR0Q7O0FBRU0sU0FBU08sZUFBVCxHQUF3RDtBQUM3RCxTQUFPZCxhQUFhLEdBQUdjLGVBQWhCLEVBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQGZsb3cgc3RyaWN0LWxvY2FsXHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgb25jZSBmcm9tICcuL29uY2UnO1xyXG5pbXBvcnQgVW5pdmVyc2FsRGlzcG9zYWJsZSBmcm9tICcuL1VuaXZlcnNhbERpc3Bvc2FibGUnO1xyXG5cclxuLyoqXHJcbiAqIEdldCB0aGUgYWN0dWFsIEdhdGVrZWVwZXIgY29uc3RydWN0b3Igb3Igc3R1YiB0aGUgcmVsZXZhbnQgbWV0aG9kcyBmb3IgT1NTXHJcbiAqIGZyaWVuZGxpbmVzcy5cclxuICovXHJcbmNvbnN0IGdldEdhdGVrZWVwZXIgPSBvbmNlKCgpID0+IHtcclxuICBsZXQgR2F0ZWtlZXBlcjtcclxuICAvLyB0cnkge1xyXG4gIC8vICAgJEZsb3dGQlxyXG4gIC8vICAgR2F0ZWtlZXBlciA9IHJlcXVpcmUoJy4uL2ZiLWdhdGVrZWVwZXItcmF3JykuR2F0ZWtlZXBlcjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBudWNsaWRlLWludGVybmFsL21vZHVsZXMtZGVwZW5kZW5jaWVzXHJcbiAgLy8gfSBjYXRjaCAoZSkge1xyXG4gICAgR2F0ZWtlZXBlciA9IGNsYXNzIHtcclxuICAgICAgaXNHa0VuYWJsZWQobmFtZTogc3RyaW5nKTogP2Jvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhc3luY0lzR2tFbmFibGVkKG5hbWU6IHN0cmluZywgdGltZW91dD86IG51bWJlcik6IFByb21pc2U8P2Jvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG9uY2VHa0luaXRpYWxpemVkKGNhbGxiYWNrOiAoKSA9PiBtaXhlZCk6IElEaXNwb3NhYmxlIHtcclxuICAgICAgICBsZXQgY2FuY2VsZWQgPSBmYWxzZTtcclxuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgIGlmICghY2FuY2VsZWQpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gbmV3IFVuaXZlcnNhbERpc3Bvc2FibGUoKCkgPT4ge1xyXG4gICAgICAgICAgY2FuY2VsZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBnZXRDYWNoZUVudHJpZXMoKTogSXRlcmFibGU8W3N0cmluZywgYm9vbGVhbl0+IHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgLy8gfVxyXG4gIHJldHVybiBuZXcgR2F0ZWtlZXBlcigpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBhIEdLLiBTaWxlbnRseSByZXR1cm4gZmFsc2Ugb24gZXJyb3IuXHJcbiAqXHJcbiAqIChOT1RFKSBUaGUgdW5kZXJseWluZyBtb2R1bGUgKGZiLWdhdGVrZWVwZXIpIGNoZWNrcyB0aGUgVW5peCBuYW1lIHRoZSBub2RlXHJcbiAqIHByb2Nlc3MgaXMgcnVubmluZyBvbi4gSWYgeW91IHVzZSB0aGlzIHByZWRpY2F0ZSBpbiBhIHBhY2thZ2UgcnVubmluZyBvbiB0aGVcclxuICogc2VydmVyIChlLmcuLCBhIGxhbmd1YWdlIHNlcnZpY2UgYmFja2VuZCkgdGhlbiBpdCBtaWdodCBub3QgY2hlY2sgdGhlIFVuaXhcclxuICogbmFtZSB5b3UgZXhwZWN0IChlLmcuLCBgc3Ztc2NtYCBvbiBhbiBPbiBEZW1hbmQgaW5zdGVhZCBvZiB0aGUgdXNlcidzIFVuaXhcclxuICogbmFtZSkuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCAoYXN5bmMgZnVuY3Rpb24gcGFzc2VzR0soXHJcbiAgbmFtZTogc3RyaW5nLFxyXG4gIC8vIHRpbWVvdXQgaW4gbXNcclxuICB0aW1lb3V0PzogbnVtYmVyLFxyXG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICBjb25zdCBnYXRla2VlcGVyID0gZ2V0R2F0ZWtlZXBlcigpO1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gKGF3YWl0IGdhdGVrZWVwZXIuYXN5bmNJc0drRW5hYmxlZChuYW1lLCB0aW1lb3V0KSkgPT09IHRydWU7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgLy8gSWYgdGhlIEdhdGVrZWVwZXIgY2xhc3MgaW1wbGVtZW50cyBjYWNoaW5nLCB0aGlzIG1heSByZXRyaWV2ZSBhIGNhY2hlZCB2YWx1ZS5cclxuICAgIHJldHVybiBnYXRla2VlcGVyLmlzR2tFbmFibGVkKG5hbWUpID09PSB0cnVlO1xyXG4gIH1cclxufSk7XHJcblxyXG4vKipcclxuICogU3luY2hyb25vdXMgR0sgY2hlY2suIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IEdLcyBoYXZlIGxvYWRlZC4gVGhpc1xyXG4gKiBzaG91bGQgYmUgdXNlZCBpbnNpZGUgYSBgb25jZUdrSW5pdGlhbGl6ZWRgLlxyXG4gKlxyXG4gKiAoTk9URSkgVGhlIHVuZGVybHlpbmcgbW9kdWxlIChmYi1nYXRla2VlcGVyKSBjaGVja3MgdGhlIFVuaXggbmFtZSB0aGUgbm9kZVxyXG4gKiBwcm9jZXNzIGlzIHJ1bm5pbmcgb24uIElmIHlvdSB1c2UgdGhpcyBwcmVkaWNhdGUgaW4gYSBwYWNrYWdlIHJ1bm5pbmcgb24gdGhlXHJcbiAqIHNlcnZlciAoZS5nLiwgYSBsYW5ndWFnZSBzZXJ2aWNlIGJhY2tlbmQpIHRoZW4gaXQgbWlnaHQgbm90IGNoZWNrIHRoZSBVbml4XHJcbiAqIG5hbWUgeW91IGV4cGVjdCAoZS5nLiwgYHN2Y3NjbWAgb24gYW4gT24gRGVtYW5kIGluc3RlYWQgb2YgdGhlIHVzZXIncyBVbml4XHJcbiAqIG5hbWUpLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzR2tFbmFibGVkKG5hbWU6IHN0cmluZyk6ID9ib29sZWFuIHtcclxuICByZXR1cm4gZ2V0R2F0ZWtlZXBlcigpLmlzR2tFbmFibGVkKG5hbWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25jZUdrSW5pdGlhbGl6ZWQoY2FsbGJhY2s6ICgpID0+IG1peGVkKTogSURpc3Bvc2FibGUge1xyXG4gIHJldHVybiBnZXRHYXRla2VlcGVyKCkub25jZUdrSW5pdGlhbGl6ZWQoY2FsbGJhY2spO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25jZUdrSW5pdGlhbGl6ZWRBc3luYygpOiBQcm9taXNlPHZvaWQ+IHtcclxuICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICBnZXRHYXRla2VlcGVyKCkub25jZUdrSW5pdGlhbGl6ZWQoKCkgPT4gcmVzb2x2ZSgpKTtcclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldENhY2hlRW50cmllcygpOiBJdGVyYWJsZTxbc3RyaW5nLCBib29sZWFuXT4ge1xyXG4gIHJldHVybiBnZXRHYXRla2VlcGVyKCkuZ2V0Q2FjaGVFbnRyaWVzKCk7XHJcbn1cclxuIl19