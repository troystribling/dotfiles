/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */

const {
  Console
} = require('console');
/**
 * This should only be used in Atom test contexts!
 * Atom tests normally only display console output in the renderer devtools,
 * which makes debugging difficult in headless mode.
 * This overwrites global.console with a patched console that writes to both
 * the devtools and regular stdio.
 */


module.exports = function patchAtomConsole() {
  const mainConsole = new Console(process.stdout, process.stderr);
  const rendererConsole = global.console;
  const mergedConsole = {};
  Object.getOwnPropertyNames(rendererConsole).filter(prop => typeof rendererConsole[prop] === 'function').forEach(prop => {
    mergedConsole[prop] = typeof mainConsole[prop] === 'function' ? (...args) => {
      mainConsole[prop](...args);
      return rendererConsole[prop](...args);
    } : (...args) => rendererConsole[prop](...args);
  });
  global.console = mergedConsole;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3BhdGNoLWF0b20tY29uc29sZS5qcyJdLCJuYW1lcyI6WyJDb25zb2xlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXRjaEF0b21Db25zb2xlIiwibWFpbkNvbnNvbGUiLCJwcm9jZXNzIiwic3Rkb3V0Iiwic3RkZXJyIiwicmVuZGVyZXJDb25zb2xlIiwiZ2xvYmFsIiwiY29uc29sZSIsIm1lcmdlZENvbnNvbGUiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZmlsdGVyIiwicHJvcCIsImZvckVhY2giLCJhcmdzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQSxNQUFNO0FBQUNBLEVBQUFBO0FBQUQsSUFBWUMsT0FBTyxDQUFDLFNBQUQsQ0FBekI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxnQkFBVCxHQUE0QjtBQUMzQyxRQUFNQyxXQUFXLEdBQUcsSUFBSUwsT0FBSixDQUFZTSxPQUFPLENBQUNDLE1BQXBCLEVBQTRCRCxPQUFPLENBQUNFLE1BQXBDLENBQXBCO0FBQ0EsUUFBTUMsZUFBZSxHQUFHQyxNQUFNLENBQUNDLE9BQS9CO0FBQ0EsUUFBTUMsYUFBYSxHQUFHLEVBQXRCO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ0MsbUJBQVAsQ0FBMkJMLGVBQTNCLEVBQ0dNLE1BREgsQ0FDVUMsSUFBSSxJQUFJLE9BQU9QLGVBQWUsQ0FBQ08sSUFBRCxDQUF0QixLQUFpQyxVQURuRCxFQUVHQyxPQUZILENBRVdELElBQUksSUFBSTtBQUNmSixJQUFBQSxhQUFhLENBQUNJLElBQUQsQ0FBYixHQUNFLE9BQU9YLFdBQVcsQ0FBQ1csSUFBRCxDQUFsQixLQUE2QixVQUE3QixHQUNJLENBQUMsR0FBR0UsSUFBSixLQUFhO0FBQ1hiLE1BQUFBLFdBQVcsQ0FBQ1csSUFBRCxDQUFYLENBQWtCLEdBQUdFLElBQXJCO0FBQ0EsYUFBT1QsZUFBZSxDQUFDTyxJQUFELENBQWYsQ0FBc0IsR0FBR0UsSUFBekIsQ0FBUDtBQUNELEtBSkwsR0FLSSxDQUFDLEdBQUdBLElBQUosS0FBYVQsZUFBZSxDQUFDTyxJQUFELENBQWYsQ0FBc0IsR0FBR0UsSUFBekIsQ0FObkI7QUFPRCxHQVZIO0FBV0FSLEVBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsYUFBakI7QUFDRCxDQWhCRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQG5vZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKiBlc2xpbnQgbnVjbGlkZS1pbnRlcm5hbC9uby1jb21tb25qczogMCAqL1xyXG5cclxuY29uc3Qge0NvbnNvbGV9ID0gcmVxdWlyZSgnY29uc29sZScpO1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiBBdG9tIHRlc3QgY29udGV4dHMhXHJcbiAqIEF0b20gdGVzdHMgbm9ybWFsbHkgb25seSBkaXNwbGF5IGNvbnNvbGUgb3V0cHV0IGluIHRoZSByZW5kZXJlciBkZXZ0b29scyxcclxuICogd2hpY2ggbWFrZXMgZGVidWdnaW5nIGRpZmZpY3VsdCBpbiBoZWFkbGVzcyBtb2RlLlxyXG4gKiBUaGlzIG92ZXJ3cml0ZXMgZ2xvYmFsLmNvbnNvbGUgd2l0aCBhIHBhdGNoZWQgY29uc29sZSB0aGF0IHdyaXRlcyB0byBib3RoXHJcbiAqIHRoZSBkZXZ0b29scyBhbmQgcmVndWxhciBzdGRpby5cclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGF0Y2hBdG9tQ29uc29sZSgpIHtcclxuICBjb25zdCBtYWluQ29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3Rkb3V0LCBwcm9jZXNzLnN0ZGVycik7XHJcbiAgY29uc3QgcmVuZGVyZXJDb25zb2xlID0gZ2xvYmFsLmNvbnNvbGU7XHJcbiAgY29uc3QgbWVyZ2VkQ29uc29sZSA9IHt9O1xyXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHJlbmRlcmVyQ29uc29sZSlcclxuICAgIC5maWx0ZXIocHJvcCA9PiB0eXBlb2YgcmVuZGVyZXJDb25zb2xlW3Byb3BdID09PSAnZnVuY3Rpb24nKVxyXG4gICAgLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgIG1lcmdlZENvbnNvbGVbcHJvcF0gPVxyXG4gICAgICAgIHR5cGVvZiBtYWluQ29uc29sZVtwcm9wXSA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgICAgICAgPyAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgICAgICAgIG1haW5Db25zb2xlW3Byb3BdKC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICAgIHJldHVybiByZW5kZXJlckNvbnNvbGVbcHJvcF0oLi4uYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIDogKC4uLmFyZ3MpID0+IHJlbmRlcmVyQ29uc29sZVtwcm9wXSguLi5hcmdzKTtcclxuICAgIH0pO1xyXG4gIGdsb2JhbC5jb25zb2xlID0gbWVyZ2VkQ29uc29sZTtcclxufTtcclxuIl19