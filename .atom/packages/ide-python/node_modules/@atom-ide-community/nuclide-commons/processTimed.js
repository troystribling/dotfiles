"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = processTimed;

var _performanceNow = _interopRequireDefault(require("./performanceNow"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* eslint-env browser */

/**
 * Splits tasks that would normally block for a long time across several tasks
 * using `setTimeout`.
 * @param process        - A generator function that does work in chunks, after each
 *                         yield is called.
 * @param options.limit  - A budget limiting the time (in ms) that can be spent
 *                         synchronously processing chunks. Chunks are processed
 *                         until this limit is reached, after which a new task
 *                         will be scheduled asynchronously.
 * @param options.delay  - The time (in ms) between processing tasks.
 * @param options.signal - An `AbortSignal` that can be used to cancel processing.
 */
function processTimed(process, options) {
  // Begin work in the next free tick. We could do this right away, but we don't
  // know how much work has preceeded this in this task, and we want to keep every
  // iteration, including the first one, to `limit` ms.
  requestIdleCallback(() => {
    // Kick off the generator once and hand a stateful iterator to
    // `processTimedIterator`.
    processTimedIterator(process(), options);
  });
}

function processTimedIterator(processIterator, {
  limit,
  delay,
  signal
}) {
  if (signal !== null && signal !== void 0 && signal.aborted) {
    return;
  }

  let done;
  const before = (0, _performanceNow.default)();

  do {
    ({
      done
    } = processIterator.next());
  } while (!done && (0, _performanceNow.default)() - before < limit); // Schedule another batch after `delay` if we're not done yet.


  if (!done) {
    setTimeout(() => {
      processTimedIterator(processIterator, {
        limit,
        delay,
        signal
      });
    }, delay);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3Byb2Nlc3NUaW1lZC5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzVGltZWQiLCJwcm9jZXNzIiwib3B0aW9ucyIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJwcm9jZXNzVGltZWRJdGVyYXRvciIsInByb2Nlc3NJdGVyYXRvciIsImxpbWl0IiwiZGVsYXkiLCJzaWduYWwiLCJhYm9ydGVkIiwiZG9uZSIsImJlZm9yZSIsIm5leHQiLCJzZXRUaW1lb3V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZ0JBOzs7O0FBaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU0EsWUFBVCxDQUNiQyxPQURhLEVBRWJDLE9BRmEsRUFHUDtBQUNOO0FBQ0E7QUFDQTtBQUNBQyxFQUFBQSxtQkFBbUIsQ0FBQyxNQUFNO0FBQ3hCO0FBQ0E7QUFDQUMsSUFBQUEsb0JBQW9CLENBQUNILE9BQU8sRUFBUixFQUFZQyxPQUFaLENBQXBCO0FBQ0QsR0FKa0IsQ0FBbkI7QUFLRDs7QUFFRCxTQUFTRSxvQkFBVCxDQUNFQyxlQURGLEVBRUU7QUFBQ0MsRUFBQUEsS0FBRDtBQUFRQyxFQUFBQSxLQUFSO0FBQWVDLEVBQUFBO0FBQWYsQ0FGRixFQUdRO0FBQ04sTUFBSUEsTUFBSixhQUFJQSxNQUFKLGVBQUlBLE1BQU0sQ0FBRUMsT0FBWixFQUFxQjtBQUNuQjtBQUNEOztBQUVELE1BQUlDLElBQUo7QUFDQSxRQUFNQyxNQUFNLEdBQUcsOEJBQWY7O0FBQ0EsS0FBRztBQUNELEtBQUM7QUFBQ0QsTUFBQUE7QUFBRCxRQUFTTCxlQUFlLENBQUNPLElBQWhCLEVBQVY7QUFDRCxHQUZELFFBRVMsQ0FBQ0YsSUFBRCxJQUFTLGlDQUFtQkMsTUFBbkIsR0FBNEJMLEtBRjlDLEVBUE0sQ0FXTjs7O0FBQ0EsTUFBSSxDQUFDSSxJQUFMLEVBQVc7QUFDVEcsSUFBQUEsVUFBVSxDQUFDLE1BQU07QUFDZlQsTUFBQUEsb0JBQW9CLENBQUNDLGVBQUQsRUFBa0I7QUFBQ0MsUUFBQUEsS0FBRDtBQUFRQyxRQUFBQSxLQUFSO0FBQWVDLFFBQUFBO0FBQWYsT0FBbEIsQ0FBcEI7QUFDRCxLQUZTLEVBRVBELEtBRk8sQ0FBVjtBQUdEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuLyogZXNsaW50LWVudiBicm93c2VyICovXHJcblxyXG5pbXBvcnQgdHlwZSB7QWJvcnRTaWduYWx9IGZyb20gJy4vQWJvcnRDb250cm9sbGVyJztcclxuXHJcbmltcG9ydCBwZXJmb3JtYW5jZU5vdyBmcm9tICcuL3BlcmZvcm1hbmNlTm93JztcclxuXHJcbnR5cGUgT3B0aW9ucyA9IHt8XHJcbiAgbGltaXQ6IG51bWJlcixcclxuICBkZWxheTogbnVtYmVyLFxyXG4gIHNpZ25hbD86IEFib3J0U2lnbmFsLFxyXG58fTtcclxuXHJcbi8qKlxyXG4gKiBTcGxpdHMgdGFza3MgdGhhdCB3b3VsZCBub3JtYWxseSBibG9jayBmb3IgYSBsb25nIHRpbWUgYWNyb3NzIHNldmVyYWwgdGFza3NcclxuICogdXNpbmcgYHNldFRpbWVvdXRgLlxyXG4gKiBAcGFyYW0gcHJvY2VzcyAgICAgICAgLSBBIGdlbmVyYXRvciBmdW5jdGlvbiB0aGF0IGRvZXMgd29yayBpbiBjaHVua3MsIGFmdGVyIGVhY2hcclxuICogICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgaXMgY2FsbGVkLlxyXG4gKiBAcGFyYW0gb3B0aW9ucy5saW1pdCAgLSBBIGJ1ZGdldCBsaW1pdGluZyB0aGUgdGltZSAoaW4gbXMpIHRoYXQgY2FuIGJlIHNwZW50XHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHN5bmNocm9ub3VzbHkgcHJvY2Vzc2luZyBjaHVua3MuIENodW5rcyBhcmUgcHJvY2Vzc2VkXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHVudGlsIHRoaXMgbGltaXQgaXMgcmVhY2hlZCwgYWZ0ZXIgd2hpY2ggYSBuZXcgdGFza1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIHNjaGVkdWxlZCBhc3luY2hyb25vdXNseS5cclxuICogQHBhcmFtIG9wdGlvbnMuZGVsYXkgIC0gVGhlIHRpbWUgKGluIG1zKSBiZXR3ZWVuIHByb2Nlc3NpbmcgdGFza3MuXHJcbiAqIEBwYXJhbSBvcHRpb25zLnNpZ25hbCAtIEFuIGBBYm9ydFNpZ25hbGAgdGhhdCBjYW4gYmUgdXNlZCB0byBjYW5jZWwgcHJvY2Vzc2luZy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2Nlc3NUaW1lZChcclxuICBwcm9jZXNzOiAoKSA9PiBJdGVyYXRvcjx2b2lkPixcclxuICBvcHRpb25zOiBPcHRpb25zLFxyXG4pOiB2b2lkIHtcclxuICAvLyBCZWdpbiB3b3JrIGluIHRoZSBuZXh0IGZyZWUgdGljay4gV2UgY291bGQgZG8gdGhpcyByaWdodCBhd2F5LCBidXQgd2UgZG9uJ3RcclxuICAvLyBrbm93IGhvdyBtdWNoIHdvcmsgaGFzIHByZWNlZWRlZCB0aGlzIGluIHRoaXMgdGFzaywgYW5kIHdlIHdhbnQgdG8ga2VlcCBldmVyeVxyXG4gIC8vIGl0ZXJhdGlvbiwgaW5jbHVkaW5nIHRoZSBmaXJzdCBvbmUsIHRvIGBsaW1pdGAgbXMuXHJcbiAgcmVxdWVzdElkbGVDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAvLyBLaWNrIG9mZiB0aGUgZ2VuZXJhdG9yIG9uY2UgYW5kIGhhbmQgYSBzdGF0ZWZ1bCBpdGVyYXRvciB0b1xyXG4gICAgLy8gYHByb2Nlc3NUaW1lZEl0ZXJhdG9yYC5cclxuICAgIHByb2Nlc3NUaW1lZEl0ZXJhdG9yKHByb2Nlc3MoKSwgb3B0aW9ucyk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3NUaW1lZEl0ZXJhdG9yKFxyXG4gIHByb2Nlc3NJdGVyYXRvcjogSXRlcmF0b3I8dm9pZD4sXHJcbiAge2xpbWl0LCBkZWxheSwgc2lnbmFsfTogT3B0aW9ucyxcclxuKTogdm9pZCB7XHJcbiAgaWYgKHNpZ25hbD8uYWJvcnRlZCkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgbGV0IGRvbmU7XHJcbiAgY29uc3QgYmVmb3JlID0gcGVyZm9ybWFuY2VOb3coKTtcclxuICBkbyB7XHJcbiAgICAoe2RvbmV9ID0gcHJvY2Vzc0l0ZXJhdG9yLm5leHQoKSk7XHJcbiAgfSB3aGlsZSAoIWRvbmUgJiYgcGVyZm9ybWFuY2VOb3coKSAtIGJlZm9yZSA8IGxpbWl0KTtcclxuXHJcbiAgLy8gU2NoZWR1bGUgYW5vdGhlciBiYXRjaCBhZnRlciBgZGVsYXlgIGlmIHdlJ3JlIG5vdCBkb25lIHlldC5cclxuICBpZiAoIWRvbmUpIHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBwcm9jZXNzVGltZWRJdGVyYXRvcihwcm9jZXNzSXRlcmF0b3IsIHtsaW1pdCwgZGVsYXksIHNpZ25hbH0pO1xyXG4gICAgfSwgZGVsYXkpO1xyXG4gIH1cclxufVxyXG4iXX0=