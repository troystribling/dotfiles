"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wordAtPositionFromBuffer = wordAtPositionFromBuffer;
exports.matchRegexEndingAt = matchRegexEndingAt;
exports.isPositionInRange = isPositionInRange;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function wordAtPositionFromBuffer(buffer, position, wordRegex) {
  const {
    row,
    column
  } = position;
  const rowRange = buffer.rangeForRow(row);
  let matchData; // Extract the expression from the row text.

  buffer.scanInRange(wordRegex, rowRange, data => {
    const {
      range
    } = data;

    if (range.start.isLessThanOrEqual(position) && range.end.isGreaterThan(position)) {
      matchData = data;
    } // Stop the scan if the scanner has passed our position.


    if (range.end.column > column) {
      data.stop();
    }
  });

  if (matchData) {
    return {
      wordMatch: matchData.match,
      range: matchData.range
    };
  } else {
    return null;
  }
} // Matches a regex on the text of the line ending at endPosition.
// regex should end with a '$'.
// Useful for autocomplete.


function matchRegexEndingAt(buffer, endPosition, regex) {
  const line = buffer.getTextInRange([[endPosition.row, 0], endPosition]);
  const match = regex.exec(line);
  return match == null ? null : match[0];
}

function isPositionInRange(position, range) {
  return Array.isArray(range) ? range.some(r => r.containsPoint(position)) : range.containsPoint(position);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3JhbmdlLmpzIl0sIm5hbWVzIjpbIndvcmRBdFBvc2l0aW9uRnJvbUJ1ZmZlciIsImJ1ZmZlciIsInBvc2l0aW9uIiwid29yZFJlZ2V4Iiwicm93IiwiY29sdW1uIiwicm93UmFuZ2UiLCJyYW5nZUZvclJvdyIsIm1hdGNoRGF0YSIsInNjYW5JblJhbmdlIiwiZGF0YSIsInJhbmdlIiwic3RhcnQiLCJpc0xlc3NUaGFuT3JFcXVhbCIsImVuZCIsImlzR3JlYXRlclRoYW4iLCJzdG9wIiwid29yZE1hdGNoIiwibWF0Y2giLCJtYXRjaFJlZ2V4RW5kaW5nQXQiLCJlbmRQb3NpdGlvbiIsInJlZ2V4IiwibGluZSIsImdldFRleHRJblJhbmdlIiwiZXhlYyIsImlzUG9zaXRpb25JblJhbmdlIiwiQXJyYXkiLCJpc0FycmF5Iiwic29tZSIsInIiLCJjb250YWluc1BvaW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRU8sU0FBU0Esd0JBQVQsQ0FDTEMsTUFESyxFQUVMQyxRQUZLLEVBR0xDLFNBSEssRUFJMkM7QUFDaEQsUUFBTTtBQUFDQyxJQUFBQSxHQUFEO0FBQU1DLElBQUFBO0FBQU4sTUFBZ0JILFFBQXRCO0FBQ0EsUUFBTUksUUFBUSxHQUFHTCxNQUFNLENBQUNNLFdBQVAsQ0FBbUJILEdBQW5CLENBQWpCO0FBQ0EsTUFBSUksU0FBSixDQUhnRCxDQUloRDs7QUFDQVAsRUFBQUEsTUFBTSxDQUFDUSxXQUFQLENBQW1CTixTQUFuQixFQUE4QkcsUUFBOUIsRUFBd0NJLElBQUksSUFBSTtBQUM5QyxVQUFNO0FBQUNDLE1BQUFBO0FBQUQsUUFBVUQsSUFBaEI7O0FBQ0EsUUFDRUMsS0FBSyxDQUFDQyxLQUFOLENBQVlDLGlCQUFaLENBQThCWCxRQUE5QixLQUNBUyxLQUFLLENBQUNHLEdBQU4sQ0FBVUMsYUFBVixDQUF3QmIsUUFBeEIsQ0FGRixFQUdFO0FBQ0FNLE1BQUFBLFNBQVMsR0FBR0UsSUFBWjtBQUNELEtBUDZDLENBUTlDOzs7QUFDQSxRQUFJQyxLQUFLLENBQUNHLEdBQU4sQ0FBVVQsTUFBVixHQUFtQkEsTUFBdkIsRUFBK0I7QUFDN0JLLE1BQUFBLElBQUksQ0FBQ00sSUFBTDtBQUNEO0FBQ0YsR0FaRDs7QUFhQSxNQUFJUixTQUFKLEVBQWU7QUFDYixXQUFPO0FBQ0xTLE1BQUFBLFNBQVMsRUFBRVQsU0FBUyxDQUFDVSxLQURoQjtBQUVMUCxNQUFBQSxLQUFLLEVBQUVILFNBQVMsQ0FBQ0c7QUFGWixLQUFQO0FBSUQsR0FMRCxNQUtPO0FBQ0wsV0FBTyxJQUFQO0FBQ0Q7QUFDRixDLENBRUQ7QUFDQTtBQUNBOzs7QUFDTyxTQUFTUSxrQkFBVCxDQUNMbEIsTUFESyxFQUVMbUIsV0FGSyxFQUdMQyxLQUhLLEVBSUk7QUFDVCxRQUFNQyxJQUFJLEdBQUdyQixNQUFNLENBQUNzQixjQUFQLENBQXNCLENBQUMsQ0FBQ0gsV0FBVyxDQUFDaEIsR0FBYixFQUFrQixDQUFsQixDQUFELEVBQXVCZ0IsV0FBdkIsQ0FBdEIsQ0FBYjtBQUNBLFFBQU1GLEtBQUssR0FBR0csS0FBSyxDQUFDRyxJQUFOLENBQVdGLElBQVgsQ0FBZDtBQUNBLFNBQU9KLEtBQUssSUFBSSxJQUFULEdBQWdCLElBQWhCLEdBQXVCQSxLQUFLLENBQUMsQ0FBRCxDQUFuQztBQUNEOztBQUVNLFNBQVNPLGlCQUFULENBQ0x2QixRQURLLEVBRUxTLEtBRkssRUFHSTtBQUNULFNBQU9lLEtBQUssQ0FBQ0MsT0FBTixDQUFjaEIsS0FBZCxJQUNIQSxLQUFLLENBQUNpQixJQUFOLENBQVdDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxhQUFGLENBQWdCNUIsUUFBaEIsQ0FBaEIsQ0FERyxHQUVIUyxLQUFLLENBQUNtQixhQUFOLENBQW9CNUIsUUFBcEIsQ0FGSjtBQUdEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3RcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3b3JkQXRQb3NpdGlvbkZyb21CdWZmZXIoXHJcbiAgYnVmZmVyOiBhdG9tJFRleHRCdWZmZXIgfCBzaW1wbGVUZXh0QnVmZmVyJFRleHRCdWZmZXIsXHJcbiAgcG9zaXRpb246IGF0b20kUG9pbnRPYmplY3QsXHJcbiAgd29yZFJlZ2V4OiBSZWdFeHAsXHJcbik6ID97d29yZE1hdGNoOiBBcnJheTxzdHJpbmc+LCByYW5nZTogYXRvbSRSYW5nZX0ge1xyXG4gIGNvbnN0IHtyb3csIGNvbHVtbn0gPSBwb3NpdGlvbjtcclxuICBjb25zdCByb3dSYW5nZSA9IGJ1ZmZlci5yYW5nZUZvclJvdyhyb3cpO1xyXG4gIGxldCBtYXRjaERhdGE7XHJcbiAgLy8gRXh0cmFjdCB0aGUgZXhwcmVzc2lvbiBmcm9tIHRoZSByb3cgdGV4dC5cclxuICBidWZmZXIuc2NhbkluUmFuZ2Uod29yZFJlZ2V4LCByb3dSYW5nZSwgZGF0YSA9PiB7XHJcbiAgICBjb25zdCB7cmFuZ2V9ID0gZGF0YTtcclxuICAgIGlmIChcclxuICAgICAgcmFuZ2Uuc3RhcnQuaXNMZXNzVGhhbk9yRXF1YWwocG9zaXRpb24pICYmXHJcbiAgICAgIHJhbmdlLmVuZC5pc0dyZWF0ZXJUaGFuKHBvc2l0aW9uKVxyXG4gICAgKSB7XHJcbiAgICAgIG1hdGNoRGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcbiAgICAvLyBTdG9wIHRoZSBzY2FuIGlmIHRoZSBzY2FubmVyIGhhcyBwYXNzZWQgb3VyIHBvc2l0aW9uLlxyXG4gICAgaWYgKHJhbmdlLmVuZC5jb2x1bW4gPiBjb2x1bW4pIHtcclxuICAgICAgZGF0YS5zdG9wKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgaWYgKG1hdGNoRGF0YSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgd29yZE1hdGNoOiBtYXRjaERhdGEubWF0Y2gsXHJcbiAgICAgIHJhbmdlOiBtYXRjaERhdGEucmFuZ2UsXHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbi8vIE1hdGNoZXMgYSByZWdleCBvbiB0aGUgdGV4dCBvZiB0aGUgbGluZSBlbmRpbmcgYXQgZW5kUG9zaXRpb24uXHJcbi8vIHJlZ2V4IHNob3VsZCBlbmQgd2l0aCBhICckJy5cclxuLy8gVXNlZnVsIGZvciBhdXRvY29tcGxldGUuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFJlZ2V4RW5kaW5nQXQoXHJcbiAgYnVmZmVyOiBhdG9tJFRleHRCdWZmZXIgfCBzaW1wbGVUZXh0QnVmZmVyJFRleHRCdWZmZXIsXHJcbiAgZW5kUG9zaXRpb246IGF0b20kUG9pbnRPYmplY3QsXHJcbiAgcmVnZXg6IFJlZ0V4cCxcclxuKTogP3N0cmluZyB7XHJcbiAgY29uc3QgbGluZSA9IGJ1ZmZlci5nZXRUZXh0SW5SYW5nZShbW2VuZFBvc2l0aW9uLnJvdywgMF0sIGVuZFBvc2l0aW9uXSk7XHJcbiAgY29uc3QgbWF0Y2ggPSByZWdleC5leGVjKGxpbmUpO1xyXG4gIHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoWzBdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNQb3NpdGlvbkluUmFuZ2UoXHJcbiAgcG9zaXRpb246IGF0b20kUG9pbnQsXHJcbiAgcmFuZ2U6IGF0b20kUmFuZ2UgfCBBcnJheTxhdG9tJFJhbmdlPixcclxuKTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkocmFuZ2UpXHJcbiAgICA/IHJhbmdlLnNvbWUociA9PiByLmNvbnRhaW5zUG9pbnQocG9zaXRpb24pKVxyXG4gICAgOiByYW5nZS5jb250YWluc1BvaW50KHBvc2l0aW9uKTtcclxufVxyXG4iXX0=