"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sanitizeHtml;

var _dompurify = _interopRequireDefault(require("dompurify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// flowlint-line untyped-import:off
_dompurify.default.addHook('beforeSanitizeElements', node => {
  // Add newlines where we see `<p>` and `<br />` tags.
  if (node && node.nodeName === 'BR') {
    const parent = node.parentNode;

    if (parent != null) {
      parent.insertBefore(document.createTextNode('\n'), node);
    }
  }

  if (node && node.nodeName === 'P') {
    node.textContent = '\n' + node.textContent;
  }

  return node;
});
/**
 * Sanitize a message for display in a notification. This removes HTML but also tries to be smart
 * about whitespace.
 */


function sanitizeHtml(message, options) {
  // Remove the HTML.
  let withoutTags = _dompurify.default.sanitize(message, {
    ALLOWED_TAGS: []
  }); // Compress the whitespace.


  if (options !== null && options !== void 0 && options.condenseWhitespaces) {
    withoutTags = withoutTags.replace(/(?:\s*\n\s*)+/g, '\n').replace(/[ \t]+/g, ' ');
  }

  return withoutTags.trim();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3Nhbml0aXplSHRtbC5qcyJdLCJuYW1lcyI6WyJkb21QdXJpZnkiLCJhZGRIb29rIiwibm9kZSIsIm5vZGVOYW1lIiwicGFyZW50IiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsImRvY3VtZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJ0ZXh0Q29udGVudCIsInNhbml0aXplSHRtbCIsIm1lc3NhZ2UiLCJvcHRpb25zIiwid2l0aG91dFRhZ3MiLCJzYW5pdGl6ZSIsIkFMTE9XRURfVEFHUyIsImNvbmRlbnNlV2hpdGVzcGFjZXMiLCJyZXBsYWNlIiwidHJpbSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBOzs7O0FBWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVtQztBQUVuQ0EsbUJBQVVDLE9BQVYsQ0FBa0Isd0JBQWxCLEVBQTZDQyxJQUFELElBQWlCO0FBQzNEO0FBQ0EsTUFBSUEsSUFBSSxJQUFJQSxJQUFJLENBQUNDLFFBQUwsS0FBa0IsSUFBOUIsRUFBb0M7QUFDbEMsVUFBTUMsTUFBTSxHQUFHRixJQUFJLENBQUNHLFVBQXBCOztBQUNBLFFBQUlELE1BQU0sSUFBSSxJQUFkLEVBQW9CO0FBQ2xCQSxNQUFBQSxNQUFNLENBQUNFLFlBQVAsQ0FBb0JDLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixJQUF4QixDQUFwQixFQUFtRE4sSUFBbkQ7QUFDRDtBQUNGOztBQUNELE1BQUlBLElBQUksSUFBSUEsSUFBSSxDQUFDQyxRQUFMLEtBQWtCLEdBQTlCLEVBQW1DO0FBQ2pDRCxJQUFBQSxJQUFJLENBQUNPLFdBQUwsR0FBbUIsT0FBT1AsSUFBSSxDQUFDTyxXQUEvQjtBQUNEOztBQUNELFNBQU9QLElBQVA7QUFDRCxDQVpEO0FBY0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNlLFNBQVNRLFlBQVQsQ0FDYkMsT0FEYSxFQUViQyxPQUZhLEVBS0w7QUFDUjtBQUNBLE1BQUlDLFdBQW1CLEdBQUdiLG1CQUFVYyxRQUFWLENBQW1CSCxPQUFuQixFQUE0QjtBQUFDSSxJQUFBQSxZQUFZLEVBQUU7QUFBZixHQUE1QixDQUExQixDQUZRLENBSVI7OztBQUNBLE1BQUlILE9BQUosYUFBSUEsT0FBSixlQUFJQSxPQUFPLENBQUVJLG1CQUFiLEVBQWtDO0FBQ2hDSCxJQUFBQSxXQUFXLEdBQUdBLFdBQVcsQ0FDdEJJLE9BRFcsQ0FDSCxnQkFERyxFQUNlLElBRGYsRUFFWEEsT0FGVyxDQUVILFNBRkcsRUFFUSxHQUZSLENBQWQ7QUFHRDs7QUFFRCxTQUFPSixXQUFXLENBQUNLLElBQVosRUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCBkb21QdXJpZnkgZnJvbSAnZG9tcHVyaWZ5JzsgLy8gZmxvd2xpbnQtbGluZSB1bnR5cGVkLWltcG9ydDpvZmZcclxuXHJcbmRvbVB1cmlmeS5hZGRIb29rKCdiZWZvcmVTYW5pdGl6ZUVsZW1lbnRzJywgKG5vZGU6ID9Ob2RlKSA9PiB7XHJcbiAgLy8gQWRkIG5ld2xpbmVzIHdoZXJlIHdlIHNlZSBgPHA+YCBhbmQgYDxiciAvPmAgdGFncy5cclxuICBpZiAobm9kZSAmJiBub2RlLm5vZGVOYW1lID09PSAnQlInKSB7XHJcbiAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XHJcbiAgICBpZiAocGFyZW50ICE9IG51bGwpIHtcclxuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnXFxuJyksIG5vZGUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAobm9kZSAmJiBub2RlLm5vZGVOYW1lID09PSAnUCcpIHtcclxuICAgIG5vZGUudGV4dENvbnRlbnQgPSAnXFxuJyArIG5vZGUudGV4dENvbnRlbnQ7XHJcbiAgfVxyXG4gIHJldHVybiBub2RlO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBTYW5pdGl6ZSBhIG1lc3NhZ2UgZm9yIGRpc3BsYXkgaW4gYSBub3RpZmljYXRpb24uIFRoaXMgcmVtb3ZlcyBIVE1MIGJ1dCBhbHNvIHRyaWVzIHRvIGJlIHNtYXJ0XHJcbiAqIGFib3V0IHdoaXRlc3BhY2UuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzYW5pdGl6ZUh0bWwoXHJcbiAgbWVzc2FnZTogc3RyaW5nLFxyXG4gIG9wdGlvbnM/OiB7XHJcbiAgICBjb25kZW5zZVdoaXRlc3BhY2VzPzogYm9vbGVhbixcclxuICB9LFxyXG4pOiBzdHJpbmcge1xyXG4gIC8vIFJlbW92ZSB0aGUgSFRNTC5cclxuICBsZXQgd2l0aG91dFRhZ3M6IHN0cmluZyA9IGRvbVB1cmlmeS5zYW5pdGl6ZShtZXNzYWdlLCB7QUxMT1dFRF9UQUdTOiBbXX0pO1xyXG5cclxuICAvLyBDb21wcmVzcyB0aGUgd2hpdGVzcGFjZS5cclxuICBpZiAob3B0aW9ucz8uY29uZGVuc2VXaGl0ZXNwYWNlcykge1xyXG4gICAgd2l0aG91dFRhZ3MgPSB3aXRob3V0VGFnc1xyXG4gICAgICAucmVwbGFjZSgvKD86XFxzKlxcblxccyopKy9nLCAnXFxuJylcclxuICAgICAgLnJlcGxhY2UoL1sgXFx0XSsvZywgJyAnKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB3aXRob3V0VGFncy50cmltKCk7XHJcbn1cclxuIl19