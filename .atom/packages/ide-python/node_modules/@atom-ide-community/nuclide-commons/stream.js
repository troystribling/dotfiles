"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.observeStream = observeStream;
exports.observeRawStream = observeRawStream;
exports.writeToStream = writeToStream;

var _stream = _interopRequireDefault(require("stream"));

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

var _UniversalDisposable = _interopRequireDefault(require("./UniversalDisposable"));

var _event = require("./event");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/**
 * Observe a stream like stdout or stderr.
 */
function observeStream(stream) {
  return observeRawStream(stream).map(data => data.toString());
}

function observeRawStream(stream) {
  const error = _rxjsCompatUmdMin.Observable.fromEvent(stream, 'error').flatMap(_rxjsCompatUmdMin.Observable.throw);

  return _rxjsCompatUmdMin.Observable.fromEvent(stream, 'data').merge(error).takeUntil(_rxjsCompatUmdMin.Observable.fromEvent(stream, 'end'));
}
/**
 * Write an observed readable stream into a writable stream. Effectively a pipe() for observables.
 * Returns an observable accumulating the number of bytes processed.
 */


function writeToStream(source, destStream) {
  return _rxjsCompatUmdMin.Observable.create(observer => {
    let byteCount = 0;
    const byteCounterStream = new _stream.default.Transform({
      transform(chunk, encoding, cb) {
        byteCount += chunk.byteLength;
        observer.next(byteCount);
        cb(null, chunk);
      }

    });
    byteCounterStream.pipe(destStream);
    return new _UniversalDisposable.default((0, _event.attachEvent)(destStream, 'error', err => {
      observer.error(err);
    }), (0, _event.attachEvent)(destStream, 'close', () => {
      observer.complete();
    }), source.subscribe(buffer => {
      byteCounterStream.write(buffer);
    }, err => {
      observer.error(err);
    }, () => {
      byteCounterStream.end();
    }));
  }).share();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1jb21tb25zL3N0cmVhbS5qcyJdLCJuYW1lcyI6WyJvYnNlcnZlU3RyZWFtIiwic3RyZWFtIiwib2JzZXJ2ZVJhd1N0cmVhbSIsIm1hcCIsImRhdGEiLCJ0b1N0cmluZyIsImVycm9yIiwiT2JzZXJ2YWJsZSIsImZyb21FdmVudCIsImZsYXRNYXAiLCJ0aHJvdyIsIm1lcmdlIiwidGFrZVVudGlsIiwid3JpdGVUb1N0cmVhbSIsInNvdXJjZSIsImRlc3RTdHJlYW0iLCJjcmVhdGUiLCJvYnNlcnZlciIsImJ5dGVDb3VudCIsImJ5dGVDb3VudGVyU3RyZWFtIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImNiIiwiYnl0ZUxlbmd0aCIsIm5leHQiLCJwaXBlIiwiVW5pdmVyc2FsRGlzcG9zYWJsZSIsImVyciIsImNvbXBsZXRlIiwic3Vic2NyaWJlIiwiYnVmZmVyIiwid3JpdGUiLCJlbmQiLCJzaGFyZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBWUE7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFRQTtBQUNBO0FBQ0E7QUFDTyxTQUFTQSxhQUFULENBQXVCQyxNQUF2QixFQUFvRTtBQUN6RSxTQUFPQyxnQkFBZ0IsQ0FBQ0QsTUFBRCxDQUFoQixDQUF5QkUsR0FBekIsQ0FBNkJDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxRQUFMLEVBQXJDLENBQVA7QUFDRDs7QUFFTSxTQUFTSCxnQkFBVCxDQUEwQkQsTUFBMUIsRUFBdUU7QUFDNUUsUUFBTUssS0FBSyxHQUFHQyw2QkFBV0MsU0FBWCxDQUFxQlAsTUFBckIsRUFBNkIsT0FBN0IsRUFBc0NRLE9BQXRDLENBQThDRiw2QkFBV0csS0FBekQsQ0FBZDs7QUFDQSxTQUFPSCw2QkFBV0MsU0FBWCxDQUFxQlAsTUFBckIsRUFBNkIsTUFBN0IsRUFDSlUsS0FESSxDQUNFTCxLQURGLEVBRUpNLFNBRkksQ0FFTUwsNkJBQVdDLFNBQVgsQ0FBcUJQLE1BQXJCLEVBQTZCLEtBQTdCLENBRk4sQ0FBUDtBQUdEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNPLFNBQVNZLGFBQVQsQ0FDTEMsTUFESyxFQUVMQyxVQUZLLEVBR2U7QUFDcEIsU0FBT1IsNkJBQVdTLE1BQVgsQ0FBa0JDLFFBQVEsSUFBSTtBQUNuQyxRQUFJQyxTQUFTLEdBQUcsQ0FBaEI7QUFFQSxVQUFNQyxpQkFBaUIsR0FBRyxJQUFJQyxnQkFBT0MsU0FBWCxDQUFxQjtBQUM3Q0MsTUFBQUEsU0FBUyxDQUFDQyxLQUFELEVBQVFDLFFBQVIsRUFBa0JDLEVBQWxCLEVBQXNCO0FBQzdCUCxRQUFBQSxTQUFTLElBQUlLLEtBQUssQ0FBQ0csVUFBbkI7QUFDQVQsUUFBQUEsUUFBUSxDQUFDVSxJQUFULENBQWNULFNBQWQ7QUFDQU8sUUFBQUEsRUFBRSxDQUFDLElBQUQsRUFBT0YsS0FBUCxDQUFGO0FBQ0Q7O0FBTDRDLEtBQXJCLENBQTFCO0FBUUFKLElBQUFBLGlCQUFpQixDQUFDUyxJQUFsQixDQUF1QmIsVUFBdkI7QUFFQSxXQUFPLElBQUljLDRCQUFKLENBQ0wsd0JBQVlkLFVBQVosRUFBd0IsT0FBeEIsRUFBaUNlLEdBQUcsSUFBSTtBQUN0Q2IsTUFBQUEsUUFBUSxDQUFDWCxLQUFULENBQWV3QixHQUFmO0FBQ0QsS0FGRCxDQURLLEVBSUwsd0JBQVlmLFVBQVosRUFBd0IsT0FBeEIsRUFBaUMsTUFBTTtBQUNyQ0UsTUFBQUEsUUFBUSxDQUFDYyxRQUFUO0FBQ0QsS0FGRCxDQUpLLEVBT0xqQixNQUFNLENBQUNrQixTQUFQLENBQ0VDLE1BQU0sSUFBSTtBQUNSZCxNQUFBQSxpQkFBaUIsQ0FBQ2UsS0FBbEIsQ0FBd0JELE1BQXhCO0FBQ0QsS0FISCxFQUlFSCxHQUFHLElBQUk7QUFDTGIsTUFBQUEsUUFBUSxDQUFDWCxLQUFULENBQWV3QixHQUFmO0FBQ0QsS0FOSCxFQU9FLE1BQU07QUFDSlgsTUFBQUEsaUJBQWlCLENBQUNnQixHQUFsQjtBQUNELEtBVEgsQ0FQSyxDQUFQO0FBbUJELEdBaENNLEVBZ0NKQyxLQWhDSSxFQUFQO0FBaUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcclxuICogQGZvcm1hdFxyXG4gKi9cclxuXHJcbmltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJztcclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzLWNvbXBhdC9idW5kbGVzL3J4anMtY29tcGF0LnVtZC5taW4uanMnO1xyXG5cclxuaW1wb3J0IFVuaXZlcnNhbERpc3Bvc2FibGUgZnJvbSAnLi9Vbml2ZXJzYWxEaXNwb3NhYmxlJztcclxuaW1wb3J0IHthdHRhY2hFdmVudH0gZnJvbSAnLi9ldmVudCc7XHJcblxyXG4vKipcclxuICogT2JzZXJ2ZSBhIHN0cmVhbSBsaWtlIHN0ZG91dCBvciBzdGRlcnIuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZVN0cmVhbShzdHJlYW06IHN0cmVhbSRSZWFkYWJsZSk6IE9ic2VydmFibGU8c3RyaW5nPiB7XHJcbiAgcmV0dXJuIG9ic2VydmVSYXdTdHJlYW0oc3RyZWFtKS5tYXAoZGF0YSA9PiBkYXRhLnRvU3RyaW5nKCkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZVJhd1N0cmVhbShzdHJlYW06IHN0cmVhbSRSZWFkYWJsZSk6IE9ic2VydmFibGU8QnVmZmVyPiB7XHJcbiAgY29uc3QgZXJyb3IgPSBPYnNlcnZhYmxlLmZyb21FdmVudChzdHJlYW0sICdlcnJvcicpLmZsYXRNYXAoT2JzZXJ2YWJsZS50aHJvdyk7XHJcbiAgcmV0dXJuIE9ic2VydmFibGUuZnJvbUV2ZW50KHN0cmVhbSwgJ2RhdGEnKVxyXG4gICAgLm1lcmdlKGVycm9yKVxyXG4gICAgLnRha2VVbnRpbChPYnNlcnZhYmxlLmZyb21FdmVudChzdHJlYW0sICdlbmQnKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXcml0ZSBhbiBvYnNlcnZlZCByZWFkYWJsZSBzdHJlYW0gaW50byBhIHdyaXRhYmxlIHN0cmVhbS4gRWZmZWN0aXZlbHkgYSBwaXBlKCkgZm9yIG9ic2VydmFibGVzLlxyXG4gKiBSZXR1cm5zIGFuIG9ic2VydmFibGUgYWNjdW11bGF0aW5nIHRoZSBudW1iZXIgb2YgYnl0ZXMgcHJvY2Vzc2VkLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlVG9TdHJlYW0oXHJcbiAgc291cmNlOiBPYnNlcnZhYmxlPEJ1ZmZlcj4sXHJcbiAgZGVzdFN0cmVhbTogc3RyZWFtJFdyaXRhYmxlLFxyXG4pOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZShvYnNlcnZlciA9PiB7XHJcbiAgICBsZXQgYnl0ZUNvdW50ID0gMDtcclxuXHJcbiAgICBjb25zdCBieXRlQ291bnRlclN0cmVhbSA9IG5ldyBTdHJlYW0uVHJhbnNmb3JtKHtcclxuICAgICAgdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgY2IpIHtcclxuICAgICAgICBieXRlQ291bnQgKz0gY2h1bmsuYnl0ZUxlbmd0aDtcclxuICAgICAgICBvYnNlcnZlci5uZXh0KGJ5dGVDb3VudCk7XHJcbiAgICAgICAgY2IobnVsbCwgY2h1bmspO1xyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgYnl0ZUNvdW50ZXJTdHJlYW0ucGlwZShkZXN0U3RyZWFtKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFVuaXZlcnNhbERpc3Bvc2FibGUoXHJcbiAgICAgIGF0dGFjaEV2ZW50KGRlc3RTdHJlYW0sICdlcnJvcicsIGVyciA9PiB7XHJcbiAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcclxuICAgICAgfSksXHJcbiAgICAgIGF0dGFjaEV2ZW50KGRlc3RTdHJlYW0sICdjbG9zZScsICgpID0+IHtcclxuICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICB9KSxcclxuICAgICAgc291cmNlLnN1YnNjcmliZShcclxuICAgICAgICBidWZmZXIgPT4ge1xyXG4gICAgICAgICAgYnl0ZUNvdW50ZXJTdHJlYW0ud3JpdGUoYnVmZmVyKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVyciA9PiB7XHJcbiAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgYnl0ZUNvdW50ZXJTdHJlYW0uZW5kKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgKSxcclxuICAgICk7XHJcbiAgfSkuc2hhcmUoKTtcclxufVxyXG4iXX0=