"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AdbDeviceSelector = void 0;

var _nuclideAdb = require("@atom-ide-community/nuclide-adb");

var React = _interopRequireWildcard(require("react"));

var _Dropdown = require("@atom-ide-community/nuclide-commons-ui/Dropdown");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _expected = require("@atom-ide-community/nuclide-commons/expected");

var _LoadingSpinner = require("@atom-ide-community/nuclide-commons-ui/LoadingSpinner");

var _assert = _interopRequireDefault(require("assert"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
const NO_DEVICES_MSG = 'No adb devices attached!';

class AdbDeviceSelector extends React.Component {
  constructor(props) {
    super(props);
    this.props = void 0;
    this.state = void 0;
    this._disposables = void 0;
    this._disposables = new _UniversalDisposable.default();
    this._handleDeviceListChange = this._handleDeviceListChange.bind(this);
    this._handleDeviceDropdownChange = this._handleDeviceDropdownChange.bind(this);
    this.state = {
      deviceList: _expected.Expect.pending(),
      selectedDevice: null
    };
  }

  componentDidMount() {
    this._disposables.add((0, _nuclideAdb.observeAndroidDevices)(this.props.targetUri).startWith(_expected.Expect.pending()).subscribe(deviceList => this._handleDeviceListChange(deviceList)));
  }

  componentWillUnmount() {
    this._disposables.dispose();
  }

  _handleDeviceListChange(deviceList) {
    const previousDevice = this.state.selectedDevice;
    let selectedDevice = previousDevice == null ? null : deviceList.getOrDefault([]).find(device => device.serial === previousDevice.serial);

    if (selectedDevice == null && deviceList.isValue) {
      selectedDevice = deviceList.value[0];
    }

    this.setState({
      deviceList,
      selectedDevice
    });
    this.props.onChange(selectedDevice);
  }

  _getDeviceItems() {
    (0, _assert.default)(this.state.deviceList.isValue);

    if (this.state.deviceList.value.length === 0) {
      return [{
        value: null,
        label: NO_DEVICES_MSG
      }];
    }

    return this.state.deviceList.value.map(device => ({
      value: device,
      label: device.displayName
    }));
  }

  render() {
    if (this.state.deviceList.isPending) {
      return /*#__PURE__*/React.createElement(_LoadingSpinner.LoadingSpinner, {
        size: "EXTRA_SMALL"
      });
    }

    if (this.state.deviceList.isError) {
      return /*#__PURE__*/React.createElement("div", {
        className: "nuclide-ui-message-error"
      }, this.state.deviceList.error.toString());
    }

    const deviceItems = this._getDeviceItems();

    return /*#__PURE__*/React.createElement(_Dropdown.Dropdown, {
      options: deviceItems,
      onChange: this._handleDeviceDropdownChange,
      value: this.state.selectedDevice
    });
  }

  _handleDeviceDropdownChange(selectedDevice) {
    this.setState({
      selectedDevice
    });
    this.props.onChange(selectedDevice);
  }

}

exports.AdbDeviceSelector = AdbDeviceSelector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,