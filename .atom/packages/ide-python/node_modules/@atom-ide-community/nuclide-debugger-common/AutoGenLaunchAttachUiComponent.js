"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _idx = _interopRequireDefault(require("idx"));

var _nullthrows = _interopRequireDefault(require("nullthrows"));

var _Checkbox = require("@atom-ide-community/nuclide-commons-ui/Checkbox");

var _Dropdown = require("@atom-ide-community/nuclide-commons-ui/Dropdown");

var _AtomInput = require("@atom-ide-community/nuclide-commons-ui/AtomInput");

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

var _string = require("@atom-ide-community/nuclide-commons/string");

var _UniversalDisposable = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/UniversalDisposable"));

var _debugger = require("@atom-ide-community/nuclide-commons-atom/debugger");

var _DebuggerConfigSerializer = require("./DebuggerConfigSerializer");

var _DeviceAndPackage = require("./DeviceAndPackage");

var _DeviceAndProcess = require("./DeviceAndProcess");

var _SelectableFilterableProcessTable = _interopRequireDefault(require("./SelectableFilterableProcessTable"));

var _SourceSelector = require("./SourceSelector");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
// extension must be a string starting with a '.' like '.js' or '.py'
function getActiveScriptPath(extension) {
  const center = atom.workspace.getCenter ? atom.workspace.getCenter() : atom.workspace;
  const activeEditor = center.getActiveTextEditor();

  if (activeEditor == null || !activeEditor.getPath() || !(0, _nullthrows.default)(activeEditor.getPath()).endsWith(extension)) {
    return '';
  }

  return _nuclideUri.default.getPath((0, _nullthrows.default)(activeEditor.getPath()));
}

class AutoGenLaunchAttachUiComponent extends React.Component {
  constructor(props) {
    super(props);
    this._disposables = void 0;

    this._handleDebugButtonClick = async () => {
      const {
        targetUri,
        config
      } = this.props;
      const {
        atomInputValues,
        booleanValues,
        enumValues,
        processTableValues,
        deviceAndPackageValues,
        deviceAndProcessValues,
        selectSourcesValues
      } = this.state;
      const {
        launch,
        vsAdapterType,
        getProcessName,
        adapterExecutable
      } = config;
      const stringValues = new Map();
      const stringArrayValues = new Map();
      const objectValues = new Map();
      const numberValues = new Map();
      const jsonValues = new Map();
      await Promise.all(Array.from(this._getConfigurationProperties().filter(property => property.visible && atomInputValues.has(property.name)).map(async property => {
        const {
          name,
          type
        } = property;
        const itemType = (0, _idx.default)(property, _ => _.itemType);
        const value = atomInputValues.get(name) || '';

        if (type === 'path') {
          try {
            const trimmedValue = value.trim();
            const resolvedPath = this.props.pathResolver == null ? trimmedValue : await this.props.pathResolver(targetUri, trimmedValue);
            stringValues.set(name, resolvedPath);
          } catch (_) {
            stringValues.set(name, value);
          }
        } else if (type === 'string') {
          stringValues.set(name, value);
        } else if (type === 'array' && itemType === 'string') {
          stringArrayValues.set(name, (0, _string.shellParseWithGlobs)(value));
        } else if (type === 'object') {
          const objectValue = {};
          (0, _string.shellParseWithGlobs)(value).forEach(variable => {
            const [lhs, rhs] = variable.split('=');
            objectValue[lhs] = rhs;
          });
          objectValues.set(name, objectValue);
        } else if (type === 'number') {
          numberValues.set(name, Number(value));
        } else if (type === 'json') {
          jsonValues.set(name, JSON.parse(value));
        }

        return value;
      })));
      const packageValues = new Map();

      this._getConfigurationProperties().filter(property => property.visible && deviceAndPackageValues.has(property.name)).forEach(property => {
        const deviceAndPackage = deviceAndPackageValues.get(property.name);

        if (deviceAndPackage != null) {
          packageValues.set(property.name, deviceAndPackage.selectedPackage);
        }
      });

      const processValues = new Map();

      this._getConfigurationProperties().filter(property => property.visible && deviceAndProcessValues.has(property.name)).forEach(property => {
        const deviceAndProcess = deviceAndProcessValues.get(property.name);
        const processName = (0, _idx.default)(deviceAndProcess, _ => _.selectedProcess.name);

        if (deviceAndProcess != null && processName != null) {
          processValues.set(property.name, processName);
        }
      });

      const values = {};
      [booleanValues, enumValues, stringValues, stringArrayValues, objectValues, numberValues, processTableValues, jsonValues, deviceAndPackageValues, deviceAndProcessValues, selectSourcesValues].forEach(map => {
        map.forEach((value, key) => {
          values[key] = value;
        });
      });

      this._getConfigurationProperties().filter(property => !property.visible && !atomInputValues.has(property.name)).forEach(property => {
        const {
          name
        } = property;
        values[name] = (0, _idx.default)(property, _ => _.defaultValue);
      });

      const debuggerService = await (0, _debugger.getDebuggerService)();
      debuggerService.startVspDebugging({
        targetUri,
        debugMode: launch ? 'launch' : 'attach',
        adapterType: vsAdapterType,
        adapterExecutable,
        config: values,
        customControlButtons: [],
        processName: getProcessName(values),
        isRestartable: true
      });
      (0, _DebuggerConfigSerializer.serializeDebuggerConfig)(...this._getSerializationArgs(this.props), {
        atomInputValues: Array.from(atomInputValues),
        booleanValues: Array.from(booleanValues),
        enumValues: Array.from(enumValues),
        packageValues: Array.from(packageValues),
        processValues: Array.from(processValues),
        selectSourcesValues: Array.from(selectSourcesValues)
      });
    };

    this._disposables = new _UniversalDisposable.default();
    this.state = {
      atomInputValues: new Map(),
      booleanValues: new Map(),
      enumValues: new Map(),
      processTableValues: new Map(),
      deviceAndPackageValues: new Map(),
      deviceAndProcessValues: new Map(),
      selectSourcesValues: new Map()
    };
  }

  _atomInputType(type, itemType) {
    return type === 'string' || type === 'path' || type === 'array' && itemType === 'string' || type === 'object' || type === 'number' || type === 'json';
  }

  _getConfigurationProperties() {
    const {
      config
    } = this.props;
    return config.properties;
  }

  _populateDefaultValues(config, atomInputValues, booleanValues, enumValues) {
    const ignorePreviousParams = config.ignorePreviousParams !== undefined ? config.ignorePreviousParams : false;
    config.properties.filter(property => property.visible).map(property => {
      const {
        name,
        type
      } = property;
      const itemType = (0, _idx.default)(property, _ => _.itemType);

      if (this._atomInputType(type, itemType)) {
        const existingValue = atomInputValues.get(name);

        if ((ignorePreviousParams || existingValue == null) && typeof property.defaultValue !== 'undefined') {
          // String(propertyDescription.default) deals with both strings and numbers and arrays
          // JSON.stringify for JSON
          // empty string otherwise
          const defaultValue = type === 'string' || type === 'number' || type === 'array' ? String(property.defaultValue) : type === 'json' ? JSON.stringify(property.defaultValue) : '';
          atomInputValues.set(name, defaultValue);
        }
      } else if (type === 'boolean') {
        const existingValue = booleanValues.get(name);

        if ((ignorePreviousParams || existingValue == null) && typeof property.defaultValue !== 'undefined' && property.defaultValue != null && typeof property.defaultValue === 'boolean') {
          booleanValues.set(name, property.defaultValue);
        } else {
          booleanValues.set(name, false);
        }
      } else if (type === 'enum' && property.enums != null) {
        const existingValue = enumValues.get(name);

        if ((ignorePreviousParams || existingValue == null) && typeof property.defaultValue !== 'undefined' && property.defaultValue != null && typeof property.defaultValue === 'string') {
          enumValues.set(name, property.defaultValue);
        }
      }
    });
  }

  _getSerializationArgs(props) {
    const {
      targetUri,
      config,
      debuggerTypeName
    } = props;
    const args = [_nuclideUri.default.isRemote(targetUri) ? _nuclideUri.default.getHostname(targetUri) : 'local', config.launch ? 'launch' : 'attach', debuggerTypeName];
    return args;
  }

  _deserializeDebuggerConfig(props) {
    (0, _DebuggerConfigSerializer.deserializeDebuggerConfig)(...this._getSerializationArgs(props), (transientSettings, savedSettings) => {
      const {
        config
      } = props;
      const {
        cwdPropertyName,
        scriptPropertyName,
        launch,
        scriptExtension
      } = config;
      const atomInputValues = new Map(savedSettings.atomInputValues || []);
      const scriptPath = scriptPropertyName != null && atomInputValues.get(scriptPropertyName) || scriptExtension != null && getActiveScriptPath(scriptExtension) || '';

      if (cwdPropertyName != null) {
        const cwd = atomInputValues.get(cwdPropertyName) || (scriptPath !== '' ? _nuclideUri.default.dirname(scriptPath) : '');

        if (cwd !== '') {
          atomInputValues.set(cwdPropertyName, cwd);
        }
      }

      if (launch) {
        if (scriptPath !== '' && scriptPropertyName != null) {
          atomInputValues.set(scriptPropertyName, scriptPath);
        }
      }

      const booleanValues = new Map(savedSettings.booleanValues || []);
      const enumValues = new Map(savedSettings.enumValues || []);

      this._populateDefaultValues(config, atomInputValues, booleanValues, enumValues); // do not serialize and deserialize these values:


      const processTableValues = new Map();
      const deviceAndPackageValues = new Map();
      const deviceAndProcessValues = new Map();
      this.setState({
        atomInputValues,
        booleanValues,
        enumValues,
        processTableValues,
        deviceAndPackageValues,
        deviceAndProcessValues
      });
    });
  }

  setState(newState) {
    super.setState(newState, () => this.props.configIsValidChanged(this._debugButtonShouldEnable()));
  }

  UNSAFE_componentWillReceiveProps(nextProps) {
    if (nextProps.debuggerTypeName !== this.props.debuggerTypeName) {
      this._deserializeDebuggerConfig(nextProps);
    }
  }

  UNSAFE_componentWillMount() {
    this._deserializeDebuggerConfig(this.props);
  }

  componentDidMount() {
    this._disposables.add(atom.commands.add('atom-workspace', {
      'core:confirm': async () => {
        if (this._debugButtonShouldEnable()) {
          await this._handleDebugButtonClick();
        }
      }
    }));
  }

  componentWillUnmount() {
    this._disposables.dispose();
  }

  _valueExists(property) {
    const {
      name,
      type
    } = property;

    if (type === 'string' || type === 'path' || type === 'array' && property.itemType === 'string') {
      const value = this.state.atomInputValues.get(name);
      return value != null && value !== '';
    } else if (type === 'number') {
      const value = this.state.atomInputValues.get(name);
      return value != null && !isNaN(value);
    } else if (type === 'boolean') {
      const value = this.state.booleanValues.get(name);
      return value != null;
    } else if (type === 'enum') {
      const value = this.state.enumValues.get(name);
      return value != null;
    } else if (type === 'process') {
      const value = this.state.processTableValues.get(name);
      return value != null;
    } else if (type === 'deviceAndPackage') {
      const deviceAndPackageValue = this.state.deviceAndPackageValues.get(name);
      return deviceAndPackageValue != null;
    } else if (type === 'deviceAndProcess') {
      const deviceAndProcessValue = this.state.deviceAndProcessValues.get(name);
      return deviceAndProcessValue != null;
    } else if (type === 'selectSources') {
      const selectSourcesValue = this.state.selectSourcesValues.get(name);
      return selectSourcesValue != null;
    }

    return false;
  }

  _debugButtonShouldEnable() {
    return this._getConfigurationProperties().filter(p => p.required).every(p => this._valueExists(p));
  }

  _getComponentForProperty(property) {
    const {
      name,
      type,
      description,
      required
    } = property;
    const formattedName = (0, _string.capitalize)(name.replace(/([A-Z])/g, ' $1')) + (required ? ' (Required)' : '');
    const nameLabel = type === 'boolean' ? formattedName : formattedName + ':';
    const itemType = (0, _idx.default)(property, _ => _.itemType);

    if (this._atomInputType(type, itemType)) {
      const value = this.state.atomInputValues.get(name) || '';
      return /*#__PURE__*/React.createElement("div", null, nameLabel, /*#__PURE__*/React.createElement(_AtomInput.AtomInput, {
        key: this.props.debuggerTypeName + ':' + name,
        placeholderText: description,
        value: value,
        onDidChange: newValue => {
          this.state.atomInputValues.set(name, newValue);
          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      }));
    } else if (type === 'boolean') {
      const checked = this.state.booleanValues.get(name) || false;
      return /*#__PURE__*/React.createElement("div", {
        className: "inline-block"
      }, /*#__PURE__*/React.createElement(_Checkbox.Checkbox, {
        checked: checked,
        label: nameLabel,
        title: description,
        onChange: newValue => {
          this.state.booleanValues.set(name, newValue);
          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      }));
    } else if (type === 'enum' && property.enums != null) {
      const enums = property.enums;
      const selectedValue = this.state.enumValues.get(name) || null;
      return /*#__PURE__*/React.createElement("div", null, nameLabel, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, description)), /*#__PURE__*/React.createElement(_Dropdown.Dropdown, {
        options: enums.map(enumValue => ({
          value: enumValue,
          label: (0, _string.capitalize)(enumValue.replace(/([A-Z])/g, ' $1'))
        })),
        onChange: enumValue => {
          this.state.enumValues.set(name, enumValue);
          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        },
        value: selectedValue
      }));
    } else if (type === 'process') {
      return /*#__PURE__*/React.createElement("div", null, nameLabel, /*#__PURE__*/React.createElement(_SelectableFilterableProcessTable.default, {
        targetUri: this.props.targetUri,
        onSelect: selectedProcess => {
          if (selectedProcess != null) {
            this.state.processTableValues.set(name, selectedProcess.pid);
          } else {
            this.state.processTableValues.delete(name);
          }

          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      }));
    } else if (type === 'deviceAndPackage') {
      return /*#__PURE__*/React.createElement(_DeviceAndPackage.DeviceAndPackage, {
        targetUri: this.props.targetUri,
        deserialize: () => {
          let packageValuesArray = [];
          (0, _DebuggerConfigSerializer.deserializeDebuggerConfig)(...this._getSerializationArgs(this.props), (transientSettings, savedSettings) => {
            packageValuesArray = savedSettings.packageValues || [];
          });
          const packageValues = new Map(packageValuesArray);
          return packageValues.get(name) || null;
        },
        onSelect: (deviceSerial, javaPackage) => {
          if (deviceSerial != null) {
            this.state.deviceAndPackageValues.set(name, {
              deviceSerial,
              selectedPackage: javaPackage
            });
          } else {
            this.state.deviceAndPackageValues.delete(name);
          }

          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      });
    } else if (type === 'deviceAndProcess') {
      return /*#__PURE__*/React.createElement(_DeviceAndProcess.DeviceAndProcess, {
        targetUri: this.props.targetUri,
        deserialize: () => {
          let processValuesArray = [];
          (0, _DebuggerConfigSerializer.deserializeDebuggerConfig)(...this._getSerializationArgs(this.props), (transientSettings, savedSettings) => {
            processValuesArray = savedSettings.processValues || [];
          });
          const processValues = new Map(processValuesArray);
          return processValues.get(name) || null;
        },
        onSelect: (deviceSerial, javaProcess) => {
          if (deviceSerial != null && javaProcess != null) {
            this.state.deviceAndProcessValues.set(name, {
              deviceSerial,
              selectedProcess: javaProcess
            });
          } else {
            this.state.deviceAndProcessValues.delete(name);
          }

          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      });
    } else if (type === 'selectSources') {
      return /*#__PURE__*/React.createElement("div", null, nameLabel, /*#__PURE__*/React.createElement(_SourceSelector.SourceSelector, {
        deserialize: () => {
          let selectSourcesValuesArray = [];
          (0, _DebuggerConfigSerializer.deserializeDebuggerConfig)(...this._getSerializationArgs(this.props), (transientSettings, savedSettings) => {
            selectSourcesValuesArray = savedSettings.selectSourcesValues || [];
          });
          const selectSourcesValues = new Map(selectSourcesValuesArray);
          return selectSourcesValues.get(name) || null;
        },
        onSelect: selectedSource => {
          this.state.selectSourcesValues.set(name, selectedSource);
          this.props.configIsValidChanged(this._debugButtonShouldEnable());
        }
      }));
    }

    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("label", null, "NO TRANSLATION YET FOR: ", (0, _string.capitalize)(name)), /*#__PURE__*/React.createElement("hr", null));
  }

  render() {
    const {
      debuggerTypeName,
      config
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      className: "block"
    }, config.header, this._getConfigurationProperties().filter(property => property.visible).map(property => /*#__PURE__*/React.createElement("div", {
      key: debuggerTypeName + ':' + property.name
    }, this._getComponentForProperty(property))));
  }

}

exports.default = AutoGenLaunchAttachUiComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,