"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.serializeDebuggerConfig = serializeDebuggerConfig;
exports.deserializeDebuggerConfig = deserializeDebuggerConfig;

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */

/* global localStorage */
// transientSettings will matinain configuration that should be persisted for the
// duration of the current Nunclide session (so preserved across the configuration dialog
// closing and re-opening), but not preserved if Nuclide is restarted.
const transientSettings = {};

function _getStorageKey(host, action, debuggerName) {
  return 'NUCLIDE_DEBUGGER_CONFIG_' + host + '_' + action + '_' + debuggerName;
}

function serializeDebuggerConfig(host, action, debuggerName, persistent, _transient) {
  if (global.localStorage == null) {
    throw new Error('localStorage is not available in this runtime');
  }

  const key = _getStorageKey(host, action, debuggerName);

  localStorage.setItem(key, JSON.stringify(persistent));

  if (_transient == null) {
    delete transientSettings[key];
  } else {
    transientSettings[key] = _transient;
  }
}

function deserializeDebuggerConfig(host, action, debuggerName, callback) {
  if (global.localStorage == null) {
    throw new Error('localStorage is not available in this runtime');
  }

  const key = _getStorageKey(host, action, debuggerName);

  const val = localStorage.getItem(key);

  try {
    const persistedSettings = val != null ? JSON.parse(val) : {};
    callback(transientSettings[key] || {}, persistedSettings);
  } catch (err) {}
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1kZWJ1Z2dlci1jb21tb24vRGVidWdnZXJDb25maWdTZXJpYWxpemVyLmpzIl0sIm5hbWVzIjpbInRyYW5zaWVudFNldHRpbmdzIiwiX2dldFN0b3JhZ2VLZXkiLCJob3N0IiwiYWN0aW9uIiwiZGVidWdnZXJOYW1lIiwic2VyaWFsaXplRGVidWdnZXJDb25maWciLCJwZXJzaXN0ZW50IiwidHJhbnNpZW50IiwiZ2xvYmFsIiwibG9jYWxTdG9yYWdlIiwiRXJyb3IiLCJrZXkiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImRlc2VyaWFsaXplRGVidWdnZXJDb25maWciLCJjYWxsYmFjayIsInZhbCIsImdldEl0ZW0iLCJwZXJzaXN0ZWRTZXR0aW5ncyIsInBhcnNlIiwiZXJyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxpQkFBaUIsR0FBRyxFQUExQjs7QUFFQSxTQUFTQyxjQUFULENBQ0VDLElBREYsRUFFRUMsTUFGRixFQUdFQyxZQUhGLEVBSUU7QUFDQSxTQUFPLDZCQUE2QkYsSUFBN0IsR0FBb0MsR0FBcEMsR0FBMENDLE1BQTFDLEdBQW1ELEdBQW5ELEdBQXlEQyxZQUFoRTtBQUNEOztBQUVNLFNBQVNDLHVCQUFULENBQ0xILElBREssRUFFTEMsTUFGSyxFQUdMQyxZQUhLLEVBSUxFLFVBSkssRUFLTEMsVUFMSyxFQU1DO0FBQ04sTUFBSUMsTUFBTSxDQUFDQyxZQUFQLElBQXVCLElBQTNCLEVBQWlDO0FBQy9CLFVBQU0sSUFBSUMsS0FBSixDQUFVLCtDQUFWLENBQU47QUFDRDs7QUFDRCxRQUFNQyxHQUFHLEdBQUdWLGNBQWMsQ0FBQ0MsSUFBRCxFQUFPQyxNQUFQLEVBQWVDLFlBQWYsQ0FBMUI7O0FBQ0FLLEVBQUFBLFlBQVksQ0FBQ0csT0FBYixDQUFxQkQsR0FBckIsRUFBMEJFLElBQUksQ0FBQ0MsU0FBTCxDQUFlUixVQUFmLENBQTFCOztBQUVBLE1BQUlDLFVBQVMsSUFBSSxJQUFqQixFQUF1QjtBQUNyQixXQUFPUCxpQkFBaUIsQ0FBQ1csR0FBRCxDQUF4QjtBQUNELEdBRkQsTUFFTztBQUNMWCxJQUFBQSxpQkFBaUIsQ0FBQ1csR0FBRCxDQUFqQixHQUF5QkosVUFBekI7QUFDRDtBQUNGOztBQUVNLFNBQVNRLHlCQUFULENBQ0xiLElBREssRUFFTEMsTUFGSyxFQUdMQyxZQUhLLEVBSUxZLFFBSkssRUFLQztBQUNOLE1BQUlSLE1BQU0sQ0FBQ0MsWUFBUCxJQUF1QixJQUEzQixFQUFpQztBQUMvQixVQUFNLElBQUlDLEtBQUosQ0FBVSwrQ0FBVixDQUFOO0FBQ0Q7O0FBQ0QsUUFBTUMsR0FBRyxHQUFHVixjQUFjLENBQUNDLElBQUQsRUFBT0MsTUFBUCxFQUFlQyxZQUFmLENBQTFCOztBQUNBLFFBQU1hLEdBQUcsR0FBR1IsWUFBWSxDQUFDUyxPQUFiLENBQXFCUCxHQUFyQixDQUFaOztBQUNBLE1BQUk7QUFDRixVQUFNUSxpQkFBaUIsR0FBR0YsR0FBRyxJQUFJLElBQVAsR0FBZUosSUFBSSxDQUFDTyxLQUFMLENBQVdILEdBQVgsQ0FBZixHQUF1QyxFQUFqRTtBQUNBRCxJQUFBQSxRQUFRLENBQUNoQixpQkFBaUIsQ0FBQ1csR0FBRCxDQUFqQixJQUEwQixFQUEzQixFQUErQlEsaUJBQS9CLENBQVI7QUFDRCxHQUhELENBR0UsT0FBT0UsR0FBUCxFQUFZLENBQUU7QUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcbi8qIGdsb2JhbCBsb2NhbFN0b3JhZ2UgKi9cclxuXHJcbmltcG9ydCB0eXBlIHtEZWJ1Z2dlckNvbmZpZ0FjdGlvbn0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG4vLyB0cmFuc2llbnRTZXR0aW5ncyB3aWxsIG1hdGluYWluIGNvbmZpZ3VyYXRpb24gdGhhdCBzaG91bGQgYmUgcGVyc2lzdGVkIGZvciB0aGVcclxuLy8gZHVyYXRpb24gb2YgdGhlIGN1cnJlbnQgTnVuY2xpZGUgc2Vzc2lvbiAoc28gcHJlc2VydmVkIGFjcm9zcyB0aGUgY29uZmlndXJhdGlvbiBkaWFsb2dcclxuLy8gY2xvc2luZyBhbmQgcmUtb3BlbmluZyksIGJ1dCBub3QgcHJlc2VydmVkIGlmIE51Y2xpZGUgaXMgcmVzdGFydGVkLlxyXG5jb25zdCB0cmFuc2llbnRTZXR0aW5ncyA9IHt9O1xyXG5cclxuZnVuY3Rpb24gX2dldFN0b3JhZ2VLZXkoXHJcbiAgaG9zdDogc3RyaW5nLFxyXG4gIGFjdGlvbjogRGVidWdnZXJDb25maWdBY3Rpb24sXHJcbiAgZGVidWdnZXJOYW1lOiBzdHJpbmcsXHJcbikge1xyXG4gIHJldHVybiAnTlVDTElERV9ERUJVR0dFUl9DT05GSUdfJyArIGhvc3QgKyAnXycgKyBhY3Rpb24gKyAnXycgKyBkZWJ1Z2dlck5hbWU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVEZWJ1Z2dlckNvbmZpZyhcclxuICBob3N0OiBzdHJpbmcsXHJcbiAgYWN0aW9uOiBEZWJ1Z2dlckNvbmZpZ0FjdGlvbixcclxuICBkZWJ1Z2dlck5hbWU6IHN0cmluZyxcclxuICBwZXJzaXN0ZW50OiBPYmplY3QsXHJcbiAgdHJhbnNpZW50PzogT2JqZWN0LFxyXG4pOiB2b2lkIHtcclxuICBpZiAoZ2xvYmFsLmxvY2FsU3RvcmFnZSA9PSBudWxsKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xvY2FsU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgcnVudGltZScpO1xyXG4gIH1cclxuICBjb25zdCBrZXkgPSBfZ2V0U3RvcmFnZUtleShob3N0LCBhY3Rpb24sIGRlYnVnZ2VyTmFtZSk7XHJcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShwZXJzaXN0ZW50KSk7XHJcblxyXG4gIGlmICh0cmFuc2llbnQgPT0gbnVsbCkge1xyXG4gICAgZGVsZXRlIHRyYW5zaWVudFNldHRpbmdzW2tleV07XHJcbiAgfSBlbHNlIHtcclxuICAgIHRyYW5zaWVudFNldHRpbmdzW2tleV0gPSB0cmFuc2llbnQ7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemVEZWJ1Z2dlckNvbmZpZyhcclxuICBob3N0OiBzdHJpbmcsXHJcbiAgYWN0aW9uOiBEZWJ1Z2dlckNvbmZpZ0FjdGlvbixcclxuICBkZWJ1Z2dlck5hbWU6IHN0cmluZyxcclxuICBjYWxsYmFjazogKHRyYW5zaWVudFNldHRpbmdzOiBPYmplY3QsIHBlcnNpc3RlbnRTZXR0aW5nczogT2JqZWN0KSA9PiB2b2lkLFxyXG4pOiB2b2lkIHtcclxuICBpZiAoZ2xvYmFsLmxvY2FsU3RvcmFnZSA9PSBudWxsKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2xvY2FsU3RvcmFnZSBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgcnVudGltZScpO1xyXG4gIH1cclxuICBjb25zdCBrZXkgPSBfZ2V0U3RvcmFnZUtleShob3N0LCBhY3Rpb24sIGRlYnVnZ2VyTmFtZSk7XHJcbiAgY29uc3QgdmFsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcGVyc2lzdGVkU2V0dGluZ3MgPSB2YWwgIT0gbnVsbCA/IChKU09OLnBhcnNlKHZhbCk6IGFueSkgOiB7fTtcclxuICAgIGNhbGxiYWNrKHRyYW5zaWVudFNldHRpbmdzW2tleV0gfHwge30sIHBlcnNpc3RlZFNldHRpbmdzKTtcclxuICB9IGNhdGNoIChlcnIpIHt9XHJcbn1cclxuIl19