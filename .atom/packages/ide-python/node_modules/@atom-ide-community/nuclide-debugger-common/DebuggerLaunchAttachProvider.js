"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
let uniqueKeySeed = 0;

/**
 * Base class of all launch/attach providers.
 * It allows each concrete provider to provide customized debugging types, actions and UI.
 */
class DebuggerLaunchAttachProvider {
  constructor(debuggingTypeName, targetUri) {
    this._debuggingTypeName = void 0;
    this._targetUri = void 0;
    this._uniqueKey = void 0;
    this._debuggingTypeName = debuggingTypeName;
    this._targetUri = targetUri;
    this._uniqueKey = uniqueKeySeed++;
  }

  getTabName() {
    return this._debuggingTypeName;
  }

  getCallbacksForAction(action) {
    return {
      /**
       * Whether this provider is enabled or not.
       */
      isEnabled: () => {
        return Promise.resolve(true);
      },

      /**
       * Returns the UI component for configuring the specified debugger type and action.
       */
      getComponent: (debuggerTypeName, configIsValidChanged) => {
        throw new Error('abstract method');
      }
    };
  }
  /**
   * Returns target uri for this provider.
   */


  getTargetUri() {
    return this._targetUri;
  }

}

exports.default = DebuggerLaunchAttachProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1kZWJ1Z2dlci1jb21tb24vRGVidWdnZXJMYXVuY2hBdHRhY2hQcm92aWRlci5qcyJdLCJuYW1lcyI6WyJ1bmlxdWVLZXlTZWVkIiwiRGVidWdnZXJMYXVuY2hBdHRhY2hQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiZGVidWdnaW5nVHlwZU5hbWUiLCJ0YXJnZXRVcmkiLCJfZGVidWdnaW5nVHlwZU5hbWUiLCJfdGFyZ2V0VXJpIiwiX3VuaXF1ZUtleSIsImdldFRhYk5hbWUiLCJnZXRDYWxsYmFja3NGb3JBY3Rpb24iLCJhY3Rpb24iLCJpc0VuYWJsZWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldENvbXBvbmVudCIsImRlYnVnZ2VyVHlwZU5hbWUiLCJjb25maWdJc1ZhbGlkQ2hhbmdlZCIsIkVycm9yIiwiZ2V0VGFyZ2V0VXJpIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0E7Ozs7OztBQWRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFNQSxJQUFJQSxhQUFhLEdBQUcsQ0FBcEI7O0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFDZSxNQUFNQyw0QkFBTixDQUFtQztBQUtoREMsRUFBQUEsV0FBVyxDQUFDQyxpQkFBRCxFQUE0QkMsU0FBNUIsRUFBbUQ7QUFBQSxTQUo5REMsa0JBSThEO0FBQUEsU0FIOURDLFVBRzhEO0FBQUEsU0FGOURDLFVBRThEO0FBQzVELFNBQUtGLGtCQUFMLEdBQTBCRixpQkFBMUI7QUFDQSxTQUFLRyxVQUFMLEdBQWtCRixTQUFsQjtBQUNBLFNBQUtHLFVBQUwsR0FBa0JQLGFBQWEsRUFBL0I7QUFDRDs7QUFFRFEsRUFBQUEsVUFBVSxHQUFXO0FBQ25CLFdBQU8sS0FBS0gsa0JBQVo7QUFDRDs7QUFFREksRUFBQUEscUJBQXFCLENBQUNDLE1BQUQsRUFBbUQ7QUFDdEUsV0FBTztBQUNMO0FBQ047QUFDQTtBQUNNQyxNQUFBQSxTQUFTLEVBQUUsTUFBTTtBQUNmLGVBQU9DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQixJQUFoQixDQUFQO0FBQ0QsT0FOSTs7QUFRTDtBQUNOO0FBQ0E7QUFDTUMsTUFBQUEsWUFBWSxFQUFFLENBQ1pDLGdCQURZLEVBRVpDLG9CQUZZLEtBR1Q7QUFDSCxjQUFNLElBQUlDLEtBQUosQ0FBVSxpQkFBVixDQUFOO0FBQ0Q7QUFoQkksS0FBUDtBQWtCRDtBQUVEO0FBQ0Y7QUFDQTs7O0FBQ0VDLEVBQUFBLFlBQVksR0FBZTtBQUN6QixXQUFPLEtBQUtaLFVBQVo7QUFDRDs7QUF6QytDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxyXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcclxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XHJcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHR5cGUge051Y2xpZGVVcml9IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL251Y2xpZGVVcmknO1xyXG5pbXBvcnQgdHlwZSB7RGVidWdnZXJDb25maWdBY3Rpb259IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5sZXQgdW5pcXVlS2V5U2VlZCA9IDA7XHJcblxyXG5leHBvcnQgdHlwZSBjYWxsYmFja3NGb3JBY3Rpb24gPSB7XHJcbiAgaXNFbmFibGVkOiAoKSA9PiBQcm9taXNlPGJvb2xlYW4+LFxyXG4gIGdldENvbXBvbmVudDogKFxyXG4gICAgZGVidWdnZXJUeXBlTmFtZTogc3RyaW5nLFxyXG4gICAgY29uZmlnSXNWYWxpZENoYW5nZWQ6ICh2YWxpZDogYm9vbGVhbikgPT4gdm9pZCxcclxuICAgIGRlZmF1bHRDb25maWc6ID97W3N0cmluZ106IG1peGVkfSxcclxuICApID0+ID9SZWFjdC5FbGVtZW50PGFueT4sXHJcbn07XHJcblxyXG4vKipcclxuICogQmFzZSBjbGFzcyBvZiBhbGwgbGF1bmNoL2F0dGFjaCBwcm92aWRlcnMuXHJcbiAqIEl0IGFsbG93cyBlYWNoIGNvbmNyZXRlIHByb3ZpZGVyIHRvIHByb3ZpZGUgY3VzdG9taXplZCBkZWJ1Z2dpbmcgdHlwZXMsIGFjdGlvbnMgYW5kIFVJLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVidWdnZXJMYXVuY2hBdHRhY2hQcm92aWRlciB7XHJcbiAgX2RlYnVnZ2luZ1R5cGVOYW1lOiBzdHJpbmc7XHJcbiAgX3RhcmdldFVyaTogTnVjbGlkZVVyaTtcclxuICBfdW5pcXVlS2V5OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRlYnVnZ2luZ1R5cGVOYW1lOiBzdHJpbmcsIHRhcmdldFVyaTogTnVjbGlkZVVyaSkge1xyXG4gICAgdGhpcy5fZGVidWdnaW5nVHlwZU5hbWUgPSBkZWJ1Z2dpbmdUeXBlTmFtZTtcclxuICAgIHRoaXMuX3RhcmdldFVyaSA9IHRhcmdldFVyaTtcclxuICAgIHRoaXMuX3VuaXF1ZUtleSA9IHVuaXF1ZUtleVNlZWQrKztcclxuICB9XHJcblxyXG4gIGdldFRhYk5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl9kZWJ1Z2dpbmdUeXBlTmFtZTtcclxuICB9XHJcblxyXG4gIGdldENhbGxiYWNrc0ZvckFjdGlvbihhY3Rpb246IERlYnVnZ2VyQ29uZmlnQWN0aW9uKTogY2FsbGJhY2tzRm9yQWN0aW9uIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBXaGV0aGVyIHRoaXMgcHJvdmlkZXIgaXMgZW5hYmxlZCBvciBub3QuXHJcbiAgICAgICAqL1xyXG4gICAgICBpc0VuYWJsZWQ6ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJldHVybnMgdGhlIFVJIGNvbXBvbmVudCBmb3IgY29uZmlndXJpbmcgdGhlIHNwZWNpZmllZCBkZWJ1Z2dlciB0eXBlIGFuZCBhY3Rpb24uXHJcbiAgICAgICAqL1xyXG4gICAgICBnZXRDb21wb25lbnQ6IChcclxuICAgICAgICBkZWJ1Z2dlclR5cGVOYW1lOiBzdHJpbmcsXHJcbiAgICAgICAgY29uZmlnSXNWYWxpZENoYW5nZWQ6ICh2YWxpZDogYm9vbGVhbikgPT4gdm9pZCxcclxuICAgICAgKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdhYnN0cmFjdCBtZXRob2QnKTtcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRhcmdldCB1cmkgZm9yIHRoaXMgcHJvdmlkZXIuXHJcbiAgICovXHJcbiAgZ2V0VGFyZ2V0VXJpKCk6IE51Y2xpZGVVcmkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3RhcmdldFVyaTtcclxuICB9XHJcbn1cclxuIl19