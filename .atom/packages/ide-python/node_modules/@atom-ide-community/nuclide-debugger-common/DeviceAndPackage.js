"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeviceAndPackage = void 0;

var _nuclideAdb = require("@atom-ide-community/nuclide-adb");

var _Dropdown = require("@atom-ide-community/nuclide-commons-ui/Dropdown");

var _LoadingSpinner = require("@atom-ide-community/nuclide-commons-ui/LoadingSpinner");

var _expected = require("@atom-ide-community/nuclide-commons/expected");

var React = _interopRequireWildcard(require("react"));

var _AdbDeviceSelector = require("./AdbDeviceSelector");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class DeviceAndPackage extends React.Component {
  constructor(props) {
    super(props);

    this._handleDeviceChange = device => {
      const state = {
        selectedDeviceSerial: device === null || device === void 0 ? void 0 : device.serial,
        packages: device == null ? _expected.Expect.value([]) : _expected.Expect.pending()
      };
      const value = this.props.deserialize();

      if (device != null && (this.state.selectedDeviceSerial == null || device.serial !== this.state.selectedDeviceSerial) && value != null) {
        state.launchPackage = value;
      }

      this.setState(state, () => {
        this._refreshPackageList(device);
      });
    };

    this.state = {
      selectedDeviceSerial: null,
      launchPackage: '',
      packages: _expected.Expect.value([])
    };
  }

  async _refreshPackageList(device) {
    if (device != null) {
      const packages = _expected.Expect.value((await (0, _nuclideAdb.getAdbServiceByNuclideUri)(this.props.targetUri).getInstalledPackages(device.serial)).sort());

      this.setState({
        packages
      });
    } else {
      this.setState({
        packages: _expected.Expect.value([])
      });
    }
  }

  setState(partialState, callback) {
    const fullState = { ...this.state,
      ...partialState
    };
    super.setState(fullState, () => {
      this.props.onSelect(fullState.selectedDeviceSerial, fullState.launchPackage);
      callback && callback();
    });
  }

  render() {
    return /*#__PURE__*/React.createElement("div", {
      className: "block"
    }, /*#__PURE__*/React.createElement("label", null, "Device:"), /*#__PURE__*/React.createElement(_AdbDeviceSelector.AdbDeviceSelector, {
      onChange: this._handleDeviceChange,
      targetUri: this.props.targetUri
    }), /*#__PURE__*/React.createElement("label", null, "Package: "), this.state.packages.isPending ? /*#__PURE__*/React.createElement(_LoadingSpinner.LoadingSpinner, {
      size: "EXTRA_SMALL"
    }) : /*#__PURE__*/React.createElement(_Dropdown.Dropdown, {
      disabled: this.state.selectedDeviceSerial == null,
      options: this.state.packages.getOrDefault([]).map(packageName => {
        return {
          value: packageName,
          label: packageName
        };
      }),
      onChange: value => this.setState({
        launchPackage: value
      }),
      value: this.state.launchPackage
    }));
  }

}

exports.DeviceAndPackage = DeviceAndPackage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,