"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _process = require("@atom-ide-community/nuclide-commons/process");

var _rxjsCompatUmdMin = require("rxjs-compat/bundles/rxjs-compat.umd.min.js");

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
class VsAdapterSpawner {
  constructor() {
    this._stdin = void 0;
    this._stdin = new _rxjsCompatUmdMin.Subject();
  }

  spawnAdapter(adapter) {
    const environment = _rxjsCompatUmdMin.Observable.fromPromise((0, _process.getOriginalEnvironment)());

    return _rxjsCompatUmdMin.Observable.forkJoin(this._stdin.buffer(environment), environment).switchMap(([stdinBuffer, env]) => {
      const options = {
        stdio: ['pipe', // stdin
        'pipe', // stdout
        'pipe' // stderr
        ],
        env: { ...env,
          ELECTRON_RUN_AS_NODE: 1,
          ...adapter.env
        },
        input: _rxjsCompatUmdMin.Observable.from(stdinBuffer).concat(this._stdin),
        killTreeWhenDone: true,
        killTreeSignal: 'SIGKILL',
        isExitError: () => false,
        cwd: adapter.cwd == null ? undefined : adapter.cwd
      };

      if (adapter.command === 'node') {
        adapter.command = process.execPath;
      } else if (adapter.command === 'sudo' && adapter.args[0] === 'node') {
        adapter.args[0] = process.execPath;
      }

      return (0, _process.observeProcessRaw)(adapter.command, adapter.args, options);
    }).publish();
  }

  async write(input) {
    this._stdin.next(input);
  }

  async dispose() {
    this._stdin.complete();
  }

}

exports.default = VsAdapterSpawner;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1kZWJ1Z2dlci1jb21tb24vVnNBZGFwdGVyU3Bhd25lci5qcyJdLCJuYW1lcyI6WyJWc0FkYXB0ZXJTcGF3bmVyIiwiY29uc3RydWN0b3IiLCJfc3RkaW4iLCJTdWJqZWN0Iiwic3Bhd25BZGFwdGVyIiwiYWRhcHRlciIsImVudmlyb25tZW50IiwiT2JzZXJ2YWJsZSIsImZyb21Qcm9taXNlIiwiZm9ya0pvaW4iLCJidWZmZXIiLCJzd2l0Y2hNYXAiLCJzdGRpbkJ1ZmZlciIsImVudiIsIm9wdGlvbnMiLCJzdGRpbyIsIkVMRUNUUk9OX1JVTl9BU19OT0RFIiwiaW5wdXQiLCJmcm9tIiwiY29uY2F0Iiwia2lsbFRyZWVXaGVuRG9uZSIsImtpbGxUcmVlU2lnbmFsIiwiaXNFeGl0RXJyb3IiLCJjd2QiLCJ1bmRlZmluZWQiLCJjb21tYW5kIiwicHJvY2VzcyIsImV4ZWNQYXRoIiwiYXJncyIsInB1Ymxpc2giLCJ3cml0ZSIsIm5leHQiLCJkaXNwb3NlIiwiY29tcGxldGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFnQkE7O0FBSUE7O0FBcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFZZSxNQUFNQSxnQkFBTixDQUFvRDtBQUdqRUMsRUFBQUEsV0FBVyxHQUFHO0FBQUEsU0FGZEMsTUFFYztBQUNaLFNBQUtBLE1BQUwsR0FBYyxJQUFJQyx5QkFBSixFQUFkO0FBQ0Q7O0FBRURDLEVBQUFBLFlBQVksQ0FDVkMsT0FEVSxFQUU2QjtBQUN2QyxVQUFNQyxXQUFXLEdBQUdDLDZCQUFXQyxXQUFYLENBQXVCLHNDQUF2QixDQUFwQjs7QUFDQSxXQUFPRCw2QkFBV0UsUUFBWCxDQUFvQixLQUFLUCxNQUFMLENBQVlRLE1BQVosQ0FBbUJKLFdBQW5CLENBQXBCLEVBQXFEQSxXQUFyRCxFQUNKSyxTQURJLENBQ00sQ0FBQyxDQUFDQyxXQUFELEVBQWNDLEdBQWQsQ0FBRCxLQUF3QjtBQUNqQyxZQUFNQyxPQUFPLEdBQUc7QUFDZEMsUUFBQUEsS0FBSyxFQUFFLENBQ0wsTUFESyxFQUNHO0FBQ1IsY0FGSyxFQUVHO0FBQ1IsY0FISyxDQUdHO0FBSEgsU0FETztBQU1kRixRQUFBQSxHQUFHLEVBQUUsRUFBQyxHQUFHQSxHQUFKO0FBQVNHLFVBQUFBLG9CQUFvQixFQUFFLENBQS9CO0FBQWtDLGFBQUdYLE9BQU8sQ0FBQ1E7QUFBN0MsU0FOUztBQU9kSSxRQUFBQSxLQUFLLEVBQUVWLDZCQUFXVyxJQUFYLENBQWdCTixXQUFoQixFQUE2Qk8sTUFBN0IsQ0FBb0MsS0FBS2pCLE1BQXpDLENBUE87QUFRZGtCLFFBQUFBLGdCQUFnQixFQUFFLElBUko7QUFTZEMsUUFBQUEsY0FBYyxFQUFFLFNBVEY7QUFVZEMsUUFBQUEsV0FBVyxFQUFFLE1BQU0sS0FWTDtBQVdkQyxRQUFBQSxHQUFHLEVBQUVsQixPQUFPLENBQUNrQixHQUFSLElBQWUsSUFBZixHQUFzQkMsU0FBdEIsR0FBa0NuQixPQUFPLENBQUNrQjtBQVhqQyxPQUFoQjs7QUFhQSxVQUFJbEIsT0FBTyxDQUFDb0IsT0FBUixLQUFvQixNQUF4QixFQUFnQztBQUM5QnBCLFFBQUFBLE9BQU8sQ0FBQ29CLE9BQVIsR0FBa0JDLE9BQU8sQ0FBQ0MsUUFBMUI7QUFDRCxPQUZELE1BRU8sSUFBSXRCLE9BQU8sQ0FBQ29CLE9BQVIsS0FBb0IsTUFBcEIsSUFBOEJwQixPQUFPLENBQUN1QixJQUFSLENBQWEsQ0FBYixNQUFvQixNQUF0RCxFQUE4RDtBQUNuRXZCLFFBQUFBLE9BQU8sQ0FBQ3VCLElBQVIsQ0FBYSxDQUFiLElBQWtCRixPQUFPLENBQUNDLFFBQTFCO0FBQ0Q7O0FBQ0QsYUFBTyxnQ0FBa0J0QixPQUFPLENBQUNvQixPQUExQixFQUFtQ3BCLE9BQU8sQ0FBQ3VCLElBQTNDLEVBQWlEZCxPQUFqRCxDQUFQO0FBQ0QsS0FyQkksRUFzQkplLE9BdEJJLEVBQVA7QUF1QkQ7O0FBRVUsUUFBTEMsS0FBSyxDQUFDYixLQUFELEVBQStCO0FBQ3hDLFNBQUtmLE1BQUwsQ0FBWTZCLElBQVosQ0FBaUJkLEtBQWpCO0FBQ0Q7O0FBRVksUUFBUGUsT0FBTyxHQUFrQjtBQUM3QixTQUFLOUIsTUFBTCxDQUFZK0IsUUFBWjtBQUNEOztBQTFDZ0UiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHR5cGUge0Nvbm5lY3RhYmxlT2JzZXJ2YWJsZX0gZnJvbSAncnhqcy1jb21wYXQvYnVuZGxlcy9yeGpzLWNvbXBhdC51bWQubWluLmpzJztcclxuaW1wb3J0IHR5cGUge1Byb2Nlc3NNZXNzYWdlfSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9wcm9jZXNzJztcclxuaW1wb3J0IHR5cGUge1ZTQWRhcHRlckV4ZWN1dGFibGVJbmZvLCBJVnNBZGFwdGVyU3Bhd25lcn0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG5pbXBvcnQge1xyXG4gIG9ic2VydmVQcm9jZXNzUmF3LFxyXG4gIGdldE9yaWdpbmFsRW52aXJvbm1lbnQsXHJcbn0gZnJvbSAnQGF0b20taWRlLWNvbW11bml0eS9udWNsaWRlLWNvbW1vbnMvcHJvY2Vzcyc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcy1jb21wYXQvYnVuZGxlcy9yeGpzLWNvbXBhdC51bWQubWluLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZzQWRhcHRlclNwYXduZXIgaW1wbGVtZW50cyBJVnNBZGFwdGVyU3Bhd25lciB7XHJcbiAgX3N0ZGluOiBTdWJqZWN0PHN0cmluZz47XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5fc3RkaW4gPSBuZXcgU3ViamVjdCgpO1xyXG4gIH1cclxuXHJcbiAgc3Bhd25BZGFwdGVyKFxyXG4gICAgYWRhcHRlcjogVlNBZGFwdGVyRXhlY3V0YWJsZUluZm8sXHJcbiAgKTogQ29ubmVjdGFibGVPYnNlcnZhYmxlPFByb2Nlc3NNZXNzYWdlPiB7XHJcbiAgICBjb25zdCBlbnZpcm9ubWVudCA9IE9ic2VydmFibGUuZnJvbVByb21pc2UoZ2V0T3JpZ2luYWxFbnZpcm9ubWVudCgpKTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlLmZvcmtKb2luKHRoaXMuX3N0ZGluLmJ1ZmZlcihlbnZpcm9ubWVudCksIGVudmlyb25tZW50KVxyXG4gICAgICAuc3dpdGNoTWFwKChbc3RkaW5CdWZmZXIsIGVudl0pID0+IHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICAgICAgc3RkaW86IFtcclxuICAgICAgICAgICAgJ3BpcGUnLCAvLyBzdGRpblxyXG4gICAgICAgICAgICAncGlwZScsIC8vIHN0ZG91dFxyXG4gICAgICAgICAgICAncGlwZScsIC8vIHN0ZGVyclxyXG4gICAgICAgICAgXSxcclxuICAgICAgICAgIGVudjogey4uLmVudiwgRUxFQ1RST05fUlVOX0FTX05PREU6IDEsIC4uLmFkYXB0ZXIuZW52fSxcclxuICAgICAgICAgIGlucHV0OiBPYnNlcnZhYmxlLmZyb20oc3RkaW5CdWZmZXIpLmNvbmNhdCh0aGlzLl9zdGRpbiksXHJcbiAgICAgICAgICBraWxsVHJlZVdoZW5Eb25lOiB0cnVlLFxyXG4gICAgICAgICAga2lsbFRyZWVTaWduYWw6ICdTSUdLSUxMJyxcclxuICAgICAgICAgIGlzRXhpdEVycm9yOiAoKSA9PiBmYWxzZSxcclxuICAgICAgICAgIGN3ZDogYWRhcHRlci5jd2QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFkYXB0ZXIuY3dkLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGFkYXB0ZXIuY29tbWFuZCA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgICBhZGFwdGVyLmNvbW1hbmQgPSBwcm9jZXNzLmV4ZWNQYXRoO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYWRhcHRlci5jb21tYW5kID09PSAnc3VkbycgJiYgYWRhcHRlci5hcmdzWzBdID09PSAnbm9kZScpIHtcclxuICAgICAgICAgIGFkYXB0ZXIuYXJnc1swXSA9IHByb2Nlc3MuZXhlY1BhdGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvYnNlcnZlUHJvY2Vzc1JhdyhhZGFwdGVyLmNvbW1hbmQsIGFkYXB0ZXIuYXJncywgb3B0aW9ucyk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5wdWJsaXNoKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyB3cml0ZShpbnB1dDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLl9zdGRpbi5uZXh0KGlucHV0KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRpc3Bvc2UoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICB0aGlzLl9zdGRpbi5jb21wbGV0ZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=