"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getVSCodeDebuggerAdapterServiceByNuclideUri = getVSCodeDebuggerAdapterServiceByNuclideUri;

var VSCodeDebuggerAdapterServiceLocal = _interopRequireWildcard(require("./VSCodeDebuggerAdapterService"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function getVSCodeDebuggerAdapterServiceByNuclideUri(uri) {
  let rpcService = null; // Atom's service hub is synchronous.

  atom.packages.serviceHub.consume('nuclide-rpc-services', '0.0.0', provider => {
    rpcService = provider;
  }).dispose();

  if (rpcService != null) {
    return rpcService.getServiceByNuclideUri('VSCodeDebuggerAdapterService', uri);
  } else {
    return VSCodeDebuggerAdapterServiceLocal;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1kZWJ1Z2dlci1jb21tb24vZGVidWctYWRhcHRlci1zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbImdldFZTQ29kZURlYnVnZ2VyQWRhcHRlclNlcnZpY2VCeU51Y2xpZGVVcmkiLCJ1cmkiLCJycGNTZXJ2aWNlIiwiYXRvbSIsInBhY2thZ2VzIiwic2VydmljZUh1YiIsImNvbnN1bWUiLCJwcm92aWRlciIsImRpc3Bvc2UiLCJnZXRTZXJ2aWNlQnlOdWNsaWRlVXJpIiwiVlNDb2RlRGVidWdnZXJBZGFwdGVyU2VydmljZUxvY2FsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBZUE7Ozs7OztBQWZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFPTyxTQUFTQSwyQ0FBVCxDQUNMQyxHQURLLEVBRXlCO0FBQzlCLE1BQUlDLFVBQStCLEdBQUcsSUFBdEMsQ0FEOEIsQ0FFOUI7O0FBQ0FDLEVBQUFBLElBQUksQ0FBQ0MsUUFBTCxDQUFjQyxVQUFkLENBQ0dDLE9BREgsQ0FDVyxzQkFEWCxFQUNtQyxPQURuQyxFQUM0Q0MsUUFBUSxJQUFJO0FBQ3BETCxJQUFBQSxVQUFVLEdBQUdLLFFBQWI7QUFDRCxHQUhILEVBSUdDLE9BSkg7O0FBS0EsTUFBSU4sVUFBVSxJQUFJLElBQWxCLEVBQXdCO0FBQ3RCLFdBQU9BLFVBQVUsQ0FBQ08sc0JBQVgsQ0FDTCw4QkFESyxFQUVMUixHQUZLLENBQVA7QUFJRCxHQUxELE1BS087QUFDTCxXQUFPUyxpQ0FBUDtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHR5cGUge051Y2xpZGVVcml9IGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL251Y2xpZGVVcmknO1xyXG5pbXBvcnQgdHlwZW9mICogYXMgVlNDb2RlRGVidWdnZXJBZGFwdGVyU2VydmljZSBmcm9tICcuL1ZTQ29kZURlYnVnZ2VyQWRhcHRlclNlcnZpY2UnO1xyXG5cclxuaW1wb3J0ICogYXMgVlNDb2RlRGVidWdnZXJBZGFwdGVyU2VydmljZUxvY2FsIGZyb20gJy4vVlNDb2RlRGVidWdnZXJBZGFwdGVyU2VydmljZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VlNDb2RlRGVidWdnZXJBZGFwdGVyU2VydmljZUJ5TnVjbGlkZVVyaShcclxuICB1cmk6IE51Y2xpZGVVcmksXHJcbik6IFZTQ29kZURlYnVnZ2VyQWRhcHRlclNlcnZpY2Uge1xyXG4gIGxldCBycGNTZXJ2aWNlOiA/bnVjbGlkZSRScGNTZXJ2aWNlID0gbnVsbDtcclxuICAvLyBBdG9tJ3Mgc2VydmljZSBodWIgaXMgc3luY2hyb25vdXMuXHJcbiAgYXRvbS5wYWNrYWdlcy5zZXJ2aWNlSHViXHJcbiAgICAuY29uc3VtZSgnbnVjbGlkZS1ycGMtc2VydmljZXMnLCAnMC4wLjAnLCBwcm92aWRlciA9PiB7XHJcbiAgICAgIHJwY1NlcnZpY2UgPSBwcm92aWRlcjtcclxuICAgIH0pXHJcbiAgICAuZGlzcG9zZSgpO1xyXG4gIGlmIChycGNTZXJ2aWNlICE9IG51bGwpIHtcclxuICAgIHJldHVybiBycGNTZXJ2aWNlLmdldFNlcnZpY2VCeU51Y2xpZGVVcmkoXHJcbiAgICAgICdWU0NvZGVEZWJ1Z2dlckFkYXB0ZXJTZXJ2aWNlJyxcclxuICAgICAgdXJpLFxyXG4gICAgKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIFZTQ29kZURlYnVnZ2VyQWRhcHRlclNlcnZpY2VMb2NhbDtcclxuICB9XHJcbn1cclxuIl19