"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.remoteToLocalProcessor = remoteToLocalProcessor;
exports.localToRemoteProcessor = localToRemoteProcessor;
exports.pathProcessor = pathProcessor;

var _nuclideUri = _interopRequireDefault(require("@atom-ide-community/nuclide-commons/nuclideUri"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
function remoteToLocalProcessor() {
  return pathProcessor(path => _nuclideUri.default.getPath(path));
}

function localToRemoteProcessor(targetUri) {
  const hostname = _nuclideUri.default.getHostname(targetUri);

  return pathProcessor(path => _nuclideUri.default.createRemoteUri(hostname, path));
}

function pathProcessor(pathMapper) {
  return message => {
    processRequestsUris(message, pathMapper);
    processResponseUris(message, pathMapper);
    processEventsUris(message, pathMapper);
  };
}

function processRequestsUris(message, pathMapper) {
  if (message.type !== 'request') {
    return;
  }

  switch (message.command) {
    case 'setBreakpoints':
    case 'source':
      translateField(message, 'arguments.source.path', pathMapper);
      break;
  }
}

function processResponseUris(message, pathMapper) {
  if (message.type !== 'response') {
    return;
  }

  switch (message.command) {
    case 'setBreakpoints':
    case 'setFunctionBreakpoints':
      message.body.breakpoints.forEach(bp => translateField(bp, 'source.path', pathMapper));
      break;

    case 'stackTrace':
      message.body.stackFrames.forEach(frame => translateField(frame, 'source.path', pathMapper));
      break;

    case 'modules':
      message.body.modules.forEach(module => translateField(module, 'path', pathMapper));
      break;

    case 'loadedSources':
      message.body.sources.forEach(source => translateField(source, 'path', pathMapper));
      break;
  }
}

function processEventsUris(message, pathMapper) {
  if (message.type !== 'event') {
    return;
  }

  switch (message.event) {
    case 'output':
    case 'loadedSource':
      translateField(message, 'body.source.path', pathMapper);
      break;

    case 'breakpoint':
      translateField(message, 'body.breakpoint.source.path', pathMapper);
      break;

    case 'module':
      translateField(message, 'body.module.path', pathMapper);
      break;
  }
} // Traverse the source `object` for a deeply nested field,
// then apply the `pathMapper` to that field, if existing.


function translateField(object, fieldDescriptor, pathMapper) {
  const fields = fieldDescriptor.split('.');
  let lastObj = {};
  const value = fields.reduce((child, field) => {
    if (child == null) {
      return null;
    } else {
      lastObj = child;
      return child[field];
    }
  }, object);

  if (value != null) {
    const [lastField] = fields.slice(-1);
    lastObj[lastField] = pathMapper(value);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL251Y2xpZGUvbnVjbGlkZS1kZWJ1Z2dlci1jb21tb24vcHJvY2Vzc29ycy5qcyJdLCJuYW1lcyI6WyJyZW1vdGVUb0xvY2FsUHJvY2Vzc29yIiwicGF0aFByb2Nlc3NvciIsInBhdGgiLCJudWNsaWRlVXJpIiwiZ2V0UGF0aCIsImxvY2FsVG9SZW1vdGVQcm9jZXNzb3IiLCJ0YXJnZXRVcmkiLCJob3N0bmFtZSIsImdldEhvc3RuYW1lIiwiY3JlYXRlUmVtb3RlVXJpIiwicGF0aE1hcHBlciIsIm1lc3NhZ2UiLCJwcm9jZXNzUmVxdWVzdHNVcmlzIiwicHJvY2Vzc1Jlc3BvbnNlVXJpcyIsInByb2Nlc3NFdmVudHNVcmlzIiwidHlwZSIsImNvbW1hbmQiLCJ0cmFuc2xhdGVGaWVsZCIsImJvZHkiLCJicmVha3BvaW50cyIsImZvckVhY2giLCJicCIsInN0YWNrRnJhbWVzIiwiZnJhbWUiLCJtb2R1bGVzIiwibW9kdWxlIiwic291cmNlcyIsInNvdXJjZSIsImV2ZW50Iiwib2JqZWN0IiwiZmllbGREZXNjcmlwdG9yIiwiZmllbGRzIiwic3BsaXQiLCJsYXN0T2JqIiwidmFsdWUiLCJyZWR1Y2UiLCJjaGlsZCIsImZpZWxkIiwibGFzdEZpZWxkIiwic2xpY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWVBOzs7O0FBZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVNPLFNBQVNBLHNCQUFULEdBQW9EO0FBQ3pELFNBQU9DLGFBQWEsQ0FBQ0MsSUFBSSxJQUFJQyxvQkFBV0MsT0FBWCxDQUFtQkYsSUFBbkIsQ0FBVCxDQUFwQjtBQUNEOztBQUVNLFNBQVNHLHNCQUFULENBQ0xDLFNBREssRUFFYTtBQUNsQixRQUFNQyxRQUFRLEdBQUdKLG9CQUFXSyxXQUFYLENBQXVCRixTQUF2QixDQUFqQjs7QUFDQSxTQUFPTCxhQUFhLENBQUNDLElBQUksSUFBSUMsb0JBQVdNLGVBQVgsQ0FBMkJGLFFBQTNC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QVFDLEtBQVIsS0FBa0I7QUFDNUMsUUFBSUQsS0FBSyxJQUFJLElBQWIsRUFBbUI7QUFDakIsYUFBTyxJQUFQO0FBQ0QsS0FGRCxNQUVPO0FBQ0xILE1BQUFBLE9BQU8sR0FBR0csS0FBVjtBQUNBLGFBQU9BLEtBQUssQ0FBQ0MsS0FBRCxDQUFaO0FBQ0Q7QUFDRixHQVBhLEVBT1hSLE1BUFcsQ0FBZDs7QUFRQSxNQUFJSyxLQUFLLElBQUksSUFBYixFQUFtQjtBQUNqQixVQUFNLENBQUNJLFNBQUQsSUFBY1AsTUFBTSxDQUFDUSxLQUFQLENBQWEsQ0FBQyxDQUFkLENBQXBCO0FBQ0FOLElBQUFBLE9BQU8sQ0FBQ0ssU0FBRCxDQUFQLEdBQXFCNUIsVUFBVSxDQUFFd0IsS0FBRixDQUEvQjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBmbG93XHJcbiAqIEBmb3JtYXRcclxuICovXHJcblxyXG5pbXBvcnQgdHlwZSB7TWVzc2FnZVByb2Nlc3Nvcn0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB0eXBlIHtOdWNsaWRlVXJpfSBmcm9tICdAYXRvbS1pZGUtY29tbXVuaXR5L251Y2xpZGUtY29tbW9ucy9udWNsaWRlVXJpJztcclxuXHJcbmltcG9ydCBudWNsaWRlVXJpIGZyb20gJ0BhdG9tLWlkZS1jb21tdW5pdHkvbnVjbGlkZS1jb21tb25zL251Y2xpZGVVcmknO1xyXG5cclxudHlwZSBQYXRoTWFwcGVyID0gKHBhdGg6IHN0cmluZykgPT4gc3RyaW5nO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW90ZVRvTG9jYWxQcm9jZXNzb3IoKTogTWVzc2FnZVByb2Nlc3NvciB7XHJcbiAgcmV0dXJuIHBhdGhQcm9jZXNzb3IocGF0aCA9PiBudWNsaWRlVXJpLmdldFBhdGgocGF0aCkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxUb1JlbW90ZVByb2Nlc3NvcihcclxuICB0YXJnZXRVcmk6IE51Y2xpZGVVcmksXHJcbik6IE1lc3NhZ2VQcm9jZXNzb3Ige1xyXG4gIGNvbnN0IGhvc3RuYW1lID0gbnVjbGlkZVVyaS5nZXRIb3N0bmFtZSh0YXJnZXRVcmkpO1xyXG4gIHJldHVybiBwYXRoUHJvY2Vzc29yKHBhdGggPT4gbnVjbGlkZVVyaS5jcmVhdGVSZW1vdGVVcmkoaG9zdG5hbWUsIHBhdGgpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhQcm9jZXNzb3IocGF0aE1hcHBlcjogUGF0aE1hcHBlcik6IE1lc3NhZ2VQcm9jZXNzb3Ige1xyXG4gIHJldHVybiBtZXNzYWdlID0+IHtcclxuICAgIHByb2Nlc3NSZXF1ZXN0c1VyaXMobWVzc2FnZSwgcGF0aE1hcHBlcik7XHJcbiAgICBwcm9jZXNzUmVzcG9uc2VVcmlzKG1lc3NhZ2UsIHBhdGhNYXBwZXIpO1xyXG4gICAgcHJvY2Vzc0V2ZW50c1VyaXMobWVzc2FnZSwgcGF0aE1hcHBlcik7XHJcbiAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJvY2Vzc1JlcXVlc3RzVXJpcyhtZXNzYWdlOiBPYmplY3QsIHBhdGhNYXBwZXI6IFBhdGhNYXBwZXIpOiB2b2lkIHtcclxuICBpZiAobWVzc2FnZS50eXBlICE9PSAncmVxdWVzdCcpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgc3dpdGNoIChtZXNzYWdlLmNvbW1hbmQpIHtcclxuICAgIGNhc2UgJ3NldEJyZWFrcG9pbnRzJzpcclxuICAgIGNhc2UgJ3NvdXJjZSc6XHJcbiAgICAgIHRyYW5zbGF0ZUZpZWxkKG1lc3NhZ2UsICdhcmd1bWVudHMuc291cmNlLnBhdGgnLCBwYXRoTWFwcGVyKTtcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzUmVzcG9uc2VVcmlzKG1lc3NhZ2U6IE9iamVjdCwgcGF0aE1hcHBlcjogUGF0aE1hcHBlcik6IHZvaWQge1xyXG4gIGlmIChtZXNzYWdlLnR5cGUgIT09ICdyZXNwb25zZScpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgc3dpdGNoIChtZXNzYWdlLmNvbW1hbmQpIHtcclxuICAgIGNhc2UgJ3NldEJyZWFrcG9pbnRzJzpcclxuICAgIGNhc2UgJ3NldEZ1bmN0aW9uQnJlYWtwb2ludHMnOlxyXG4gICAgICBtZXNzYWdlLmJvZHkuYnJlYWtwb2ludHMuZm9yRWFjaChicCA9PlxyXG4gICAgICAgIHRyYW5zbGF0ZUZpZWxkKGJwLCAnc291cmNlLnBhdGgnLCBwYXRoTWFwcGVyKSxcclxuICAgICAgKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlICdzdGFja1RyYWNlJzpcclxuICAgICAgbWVzc2FnZS5ib2R5LnN0YWNrRnJhbWVzLmZvckVhY2goZnJhbWUgPT5cclxuICAgICAgICB0cmFuc2xhdGVGaWVsZChmcmFtZSwgJ3NvdXJjZS5wYXRoJywgcGF0aE1hcHBlciksXHJcbiAgICAgICk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnbW9kdWxlcyc6XHJcbiAgICAgIG1lc3NhZ2UuYm9keS5tb2R1bGVzLmZvckVhY2gobW9kdWxlID0+XHJcbiAgICAgICAgdHJhbnNsYXRlRmllbGQobW9kdWxlLCAncGF0aCcsIHBhdGhNYXBwZXIpLFxyXG4gICAgICApO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ2xvYWRlZFNvdXJjZXMnOlxyXG4gICAgICBtZXNzYWdlLmJvZHkuc291cmNlcy5mb3JFYWNoKHNvdXJjZSA9PlxyXG4gICAgICAgIHRyYW5zbGF0ZUZpZWxkKHNvdXJjZSwgJ3BhdGgnLCBwYXRoTWFwcGVyKSxcclxuICAgICAgKTtcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBwcm9jZXNzRXZlbnRzVXJpcyhtZXNzYWdlOiBPYmplY3QsIHBhdGhNYXBwZXI6IFBhdGhNYXBwZXIpOiB2b2lkIHtcclxuICBpZiAobWVzc2FnZS50eXBlICE9PSAnZXZlbnQnKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBzd2l0Y2ggKG1lc3NhZ2UuZXZlbnQpIHtcclxuICAgIGNhc2UgJ291dHB1dCc6XHJcbiAgICBjYXNlICdsb2FkZWRTb3VyY2UnOlxyXG4gICAgICB0cmFuc2xhdGVGaWVsZChtZXNzYWdlLCAnYm9keS5zb3VyY2UucGF0aCcsIHBhdGhNYXBwZXIpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ2JyZWFrcG9pbnQnOlxyXG4gICAgICB0cmFuc2xhdGVGaWVsZChtZXNzYWdlLCAnYm9keS5icmVha3BvaW50LnNvdXJjZS5wYXRoJywgcGF0aE1hcHBlcik7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSAnbW9kdWxlJzpcclxuICAgICAgdHJhbnNsYXRlRmllbGQobWVzc2FnZSwgJ2JvZHkubW9kdWxlLnBhdGgnLCBwYXRoTWFwcGVyKTtcclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBUcmF2ZXJzZSB0aGUgc291cmNlIGBvYmplY3RgIGZvciBhIGRlZXBseSBuZXN0ZWQgZmllbGQsXHJcbi8vIHRoZW4gYXBwbHkgdGhlIGBwYXRoTWFwcGVyYCB0byB0aGF0IGZpZWxkLCBpZiBleGlzdGluZy5cclxuZnVuY3Rpb24gdHJhbnNsYXRlRmllbGQoXHJcbiAgb2JqZWN0OiBPYmplY3QsXHJcbiAgZmllbGREZXNjcmlwdG9yOiBzdHJpbmcsXHJcbiAgcGF0aE1hcHBlcjogUGF0aE1hcHBlcixcclxuKTogdm9pZCB7XHJcbiAgY29uc3QgZmllbGRzID0gZmllbGREZXNjcmlwdG9yLnNwbGl0KCcuJyk7XHJcbiAgbGV0IGxhc3RPYmogPSB7fTtcclxuICBjb25zdCB2YWx1ZSA9IGZpZWxkcy5yZWR1Y2UoKGNoaWxkLCBmaWVsZCkgPT4ge1xyXG4gICAgaWYgKGNoaWxkID09IG51bGwpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsYXN0T2JqID0gY2hpbGQ7XHJcbiAgICAgIHJldHVybiBjaGlsZFtmaWVsZF07XHJcbiAgICB9XHJcbiAgfSwgb2JqZWN0KTtcclxuICBpZiAodmFsdWUgIT0gbnVsbCkge1xyXG4gICAgY29uc3QgW2xhc3RGaWVsZF0gPSBmaWVsZHMuc2xpY2UoLTEpO1xyXG4gICAgbGFzdE9ialtsYXN0RmllbGRdID0gcGF0aE1hcHBlcigodmFsdWU6IGFueSkpO1xyXG4gIH1cclxufVxyXG4iXX0=