/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */
// Taken from
// https://github.com/facebook/react-native/blob/d72c6fd/packager/react-packager/src/node-haste/DependencyGraph/docblock.js

const docblockRe = /^\s*(\/\*\*(.|\r?\n)*?\*\/)/;
const ltrimRe = /^\s*/;
/**
 * @param {String} contents
 * @return {String}
 */

function extract(contents) {
  const match = contents.match(docblockRe);

  if (match) {
    return match[0].replace(ltrimRe, '') || '';
  }

  return '';
}

const commentStartRe = /^\/\*\*/;
const commentEndRe = /\*\/$/;
const wsRe = /[\t ]+/g;
const stringStartRe = /(\r?\n|^) *\*/g;
const multilineRe = /(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *([^@\r\n\s][^@\r\n]+?) *\r?\n/g;
const propertyRe = /(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g;
/**
 * @param {String} contents
 * @return {Array}
 */

function parse(docblock_) {
  let docblock = docblock_.replace(commentStartRe, '').replace(commentEndRe, '').replace(wsRe, ' ').replace(stringStartRe, '$1'); // Normalize multi-line directives

  let prev = '';

  while (prev !== docblock) {
    prev = docblock;
    docblock = docblock.replace(multilineRe, '\n$1 $2\n');
  }

  docblock = docblock.trim();
  const result = [];
  let match;

  while (match = propertyRe.exec(docblock)) {
    result.push([match[1], match[2]]);
  }

  return result;
}
/**
 * Same as parse but returns an object of prop: value instead of array of paris
 * If a property appers more than once the last one will be returned
 *
 * @param {String} contents
 * @return {Object}
 */


function parseAsObject(docblock) {
  const pairs = parse(docblock);
  const result = {};

  for (let i = 0; i < pairs.length; i++) {
    result[pairs[i][0]] = pairs[i][1];
  }

  return result;
}

exports.extract = extract;
exports.parse = parse;
exports.parseAsObject = parseAsObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL2RvY2Jsb2NrLmpzIl0sIm5hbWVzIjpbImRvY2Jsb2NrUmUiLCJsdHJpbVJlIiwiZXh0cmFjdCIsImNvbnRlbnRzIiwibWF0Y2giLCJyZXBsYWNlIiwiY29tbWVudFN0YXJ0UmUiLCJjb21tZW50RW5kUmUiLCJ3c1JlIiwic3RyaW5nU3RhcnRSZSIsIm11bHRpbGluZVJlIiwicHJvcGVydHlSZSIsInBhcnNlIiwiZG9jYmxvY2tfIiwiZG9jYmxvY2siLCJwcmV2IiwidHJpbSIsInJlc3VsdCIsImV4ZWMiLCJwdXNoIiwicGFyc2VBc09iamVjdCIsInBhaXJzIiwiaSIsImxlbmd0aCIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTs7QUFFQSxNQUFNQSxVQUFVLEdBQUcsNkJBQW5CO0FBQ0EsTUFBTUMsT0FBTyxHQUFHLE1BQWhCO0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBU0MsT0FBVCxDQUFpQkMsUUFBakIsRUFBMkI7QUFDekIsUUFBTUMsS0FBSyxHQUFHRCxRQUFRLENBQUNDLEtBQVQsQ0FBZUosVUFBZixDQUFkOztBQUNBLE1BQUlJLEtBQUosRUFBVztBQUNULFdBQU9BLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU0MsT0FBVCxDQUFpQkosT0FBakIsRUFBMEIsRUFBMUIsS0FBaUMsRUFBeEM7QUFDRDs7QUFDRCxTQUFPLEVBQVA7QUFDRDs7QUFFRCxNQUFNSyxjQUFjLEdBQUcsU0FBdkI7QUFDQSxNQUFNQyxZQUFZLEdBQUcsT0FBckI7QUFDQSxNQUFNQyxJQUFJLEdBQUcsU0FBYjtBQUNBLE1BQU1DLGFBQWEsR0FBRyxnQkFBdEI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsa0VBQXBCO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLGtDQUFuQjtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFNBQVNDLEtBQVQsQ0FBZUMsU0FBZixFQUEwQjtBQUN4QixNQUFJQyxRQUFRLEdBQUdELFNBQVMsQ0FDckJSLE9BRFksQ0FDSkMsY0FESSxFQUNZLEVBRFosRUFFWkQsT0FGWSxDQUVKRSxZQUZJLEVBRVUsRUFGVixFQUdaRixPQUhZLENBR0pHLElBSEksRUFHRSxHQUhGLEVBSVpILE9BSlksQ0FJSkksYUFKSSxFQUlXLElBSlgsQ0FBZixDQUR3QixDQU94Qjs7QUFDQSxNQUFJTSxJQUFJLEdBQUcsRUFBWDs7QUFDQSxTQUFPQSxJQUFJLEtBQUtELFFBQWhCLEVBQTBCO0FBQ3hCQyxJQUFBQSxJQUFJLEdBQUdELFFBQVA7QUFDQUEsSUFBQUEsUUFBUSxHQUFHQSxRQUFRLENBQUNULE9BQVQsQ0FBaUJLLFdBQWpCLEVBQThCLFdBQTlCLENBQVg7QUFDRDs7QUFDREksRUFBQUEsUUFBUSxHQUFHQSxRQUFRLENBQUNFLElBQVQsRUFBWDtBQUVBLFFBQU1DLE1BQU0sR0FBRyxFQUFmO0FBQ0EsTUFBSWIsS0FBSjs7QUFDQSxTQUFRQSxLQUFLLEdBQUdPLFVBQVUsQ0FBQ08sSUFBWCxDQUFnQkosUUFBaEIsQ0FBaEIsRUFBNEM7QUFDMUNHLElBQUFBLE1BQU0sQ0FBQ0UsSUFBUCxDQUFZLENBQUNmLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBV0EsS0FBSyxDQUFDLENBQUQsQ0FBaEIsQ0FBWjtBQUNEOztBQUVELFNBQU9hLE1BQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxTQUFTRyxhQUFULENBQXVCTixRQUF2QixFQUFpQztBQUMvQixRQUFNTyxLQUFLLEdBQUdULEtBQUssQ0FBQ0UsUUFBRCxDQUFuQjtBQUNBLFFBQU1HLE1BQU0sR0FBRyxFQUFmOztBQUNBLE9BQUssSUFBSUssQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsS0FBSyxDQUFDRSxNQUExQixFQUFrQ0QsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQ0wsSUFBQUEsTUFBTSxDQUFDSSxLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTLENBQVQsQ0FBRCxDQUFOLEdBQXNCRCxLQUFLLENBQUNDLENBQUQsQ0FBTCxDQUFTLENBQVQsQ0FBdEI7QUFDRDs7QUFDRCxTQUFPTCxNQUFQO0FBQ0Q7O0FBRURPLE9BQU8sQ0FBQ3RCLE9BQVIsR0FBa0JBLE9BQWxCO0FBQ0FzQixPQUFPLENBQUNaLEtBQVIsR0FBZ0JBLEtBQWhCO0FBQ0FZLE9BQU8sQ0FBQ0osYUFBUixHQUF3QkEsYUFBeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcclxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBub2Zsb3dcclxuICogQGZvcm1hdFxyXG4gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG5cclxuLyogZXNsaW50IG51Y2xpZGUtaW50ZXJuYWwvbm8tY29tbW9uanM6IDAgKi9cclxuXHJcbi8vIFRha2VuIGZyb21cclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9ibG9iL2Q3MmM2ZmQvcGFja2FnZXIvcmVhY3QtcGFja2FnZXIvc3JjL25vZGUtaGFzdGUvRGVwZW5kZW5jeUdyYXBoL2RvY2Jsb2NrLmpzXHJcblxyXG5jb25zdCBkb2NibG9ja1JlID0gL15cXHMqKFxcL1xcKlxcKigufFxccj9cXG4pKj9cXCpcXC8pLztcclxuY29uc3QgbHRyaW1SZSA9IC9eXFxzKi87XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtTdHJpbmd9IGNvbnRlbnRzXHJcbiAqIEByZXR1cm4ge1N0cmluZ31cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3QoY29udGVudHMpIHtcclxuICBjb25zdCBtYXRjaCA9IGNvbnRlbnRzLm1hdGNoKGRvY2Jsb2NrUmUpO1xyXG4gIGlmIChtYXRjaCkge1xyXG4gICAgcmV0dXJuIG1hdGNoWzBdLnJlcGxhY2UobHRyaW1SZSwgJycpIHx8ICcnO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn1cclxuXHJcbmNvbnN0IGNvbW1lbnRTdGFydFJlID0gL15cXC9cXCpcXCovO1xyXG5jb25zdCBjb21tZW50RW5kUmUgPSAvXFwqXFwvJC87XHJcbmNvbnN0IHdzUmUgPSAvW1xcdCBdKy9nO1xyXG5jb25zdCBzdHJpbmdTdGFydFJlID0gLyhcXHI/XFxufF4pICpcXCovZztcclxuY29uc3QgbXVsdGlsaW5lUmUgPSAvKD86XnxcXHI/XFxuKSAqKEBbXlxcclxcbl0qPykgKlxccj9cXG4gKihbXkBcXHJcXG5cXHNdW15AXFxyXFxuXSs/KSAqXFxyP1xcbi9nO1xyXG5jb25zdCBwcm9wZXJ0eVJlID0gLyg/Ol58XFxyP1xcbikgKkAoXFxTKykgKihbXlxcclxcbl0qKS9nO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb250ZW50c1xyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICovXHJcbmZ1bmN0aW9uIHBhcnNlKGRvY2Jsb2NrXykge1xyXG4gIGxldCBkb2NibG9jayA9IGRvY2Jsb2NrX1xyXG4gICAgLnJlcGxhY2UoY29tbWVudFN0YXJ0UmUsICcnKVxyXG4gICAgLnJlcGxhY2UoY29tbWVudEVuZFJlLCAnJylcclxuICAgIC5yZXBsYWNlKHdzUmUsICcgJylcclxuICAgIC5yZXBsYWNlKHN0cmluZ1N0YXJ0UmUsICckMScpO1xyXG5cclxuICAvLyBOb3JtYWxpemUgbXVsdGktbGluZSBkaXJlY3RpdmVzXHJcbiAgbGV0IHByZXYgPSAnJztcclxuICB3aGlsZSAocHJldiAhPT0gZG9jYmxvY2spIHtcclxuICAgIHByZXYgPSBkb2NibG9jaztcclxuICAgIGRvY2Jsb2NrID0gZG9jYmxvY2sucmVwbGFjZShtdWx0aWxpbmVSZSwgJ1xcbiQxICQyXFxuJyk7XHJcbiAgfVxyXG4gIGRvY2Jsb2NrID0gZG9jYmxvY2sudHJpbSgpO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSBbXTtcclxuICBsZXQgbWF0Y2g7XHJcbiAgd2hpbGUgKChtYXRjaCA9IHByb3BlcnR5UmUuZXhlYyhkb2NibG9jaykpKSB7XHJcbiAgICByZXN1bHQucHVzaChbbWF0Y2hbMV0sIG1hdGNoWzJdXSk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogU2FtZSBhcyBwYXJzZSBidXQgcmV0dXJucyBhbiBvYmplY3Qgb2YgcHJvcDogdmFsdWUgaW5zdGVhZCBvZiBhcnJheSBvZiBwYXJpc1xyXG4gKiBJZiBhIHByb3BlcnR5IGFwcGVycyBtb3JlIHRoYW4gb25jZSB0aGUgbGFzdCBvbmUgd2lsbCBiZSByZXR1cm5lZFxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gY29udGVudHNcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2VBc09iamVjdChkb2NibG9jaykge1xyXG4gIGNvbnN0IHBhaXJzID0gcGFyc2UoZG9jYmxvY2spO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpKyspIHtcclxuICAgIHJlc3VsdFtwYWlyc1tpXVswXV0gPSBwYWlyc1tpXVsxXTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0cy5leHRyYWN0ID0gZXh0cmFjdDtcclxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xyXG5leHBvcnRzLnBhcnNlQXNPYmplY3QgPSBwYXJzZUFzT2JqZWN0O1xyXG4iXX0=