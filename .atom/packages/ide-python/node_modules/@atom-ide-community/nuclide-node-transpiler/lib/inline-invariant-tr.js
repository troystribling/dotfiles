/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */

/* eslint-disable no-console */

module.exports = context => {
  const t = context.types;
  const template = context.template;
  const buildIfThrow = template(`
    if (!CONDITION) {
      throw new Error(MESSAGE);
    }
  `);

  function replaceInvariant(path) {
    const node = path.node;
    t.assertCallExpression(node);
    t.assertIdentifier(node.callee, {
      name: 'invariant'
    });

    if (node.arguments[0] == null) {
      throw path.buildCodeFrameError('`invariant()` must at least one argument.');
    }

    const stmtParent = path.getStatementParent();

    if (stmtParent.type !== 'ExpressionStatement') {
      throw path.buildCodeFrameError('`invariant()` must be used as an expression statement.');
    }

    stmtParent.replaceWith(buildIfThrow({
      CONDITION: node.arguments[0],
      MESSAGE: node.arguments[1] || t.stringLiteral('Invariant violation: ' + JSON.stringify(path.get('arguments.0').getSource()))
    }));
  }

  return {
    visitor: {
      Program: {
        exit(path, state) {
          const binding = path.scope.bindings.invariant; // Only import bindings are transformed

          if (binding == null || binding.kind !== 'module') {
            return;
          }

          let removeBinding = true;

          for (const refPath of binding.referencePaths) {
            if (refPath.parentKey !== 'callee' || refPath.parent.type !== 'CallExpression') {
              removeBinding = false;
              continue;
            }

            replaceInvariant(refPath.parentPath);
          }

          if (removeBinding && t.isImportDeclaration(binding.path.parent)) {
            // import invariant from '';
            if (binding.path.parent.specifiers.length === 1) {
              binding.path.parentPath.remove(); // import invariant, {deepEqual} from '';
            } else {
              binding.path.remove();
            }
          }
        }

      }
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL2lubGluZS1pbnZhcmlhbnQtdHIuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNvbnRleHQiLCJ0IiwidHlwZXMiLCJ0ZW1wbGF0ZSIsImJ1aWxkSWZUaHJvdyIsInJlcGxhY2VJbnZhcmlhbnQiLCJwYXRoIiwibm9kZSIsImFzc2VydENhbGxFeHByZXNzaW9uIiwiYXNzZXJ0SWRlbnRpZmllciIsImNhbGxlZSIsIm5hbWUiLCJhcmd1bWVudHMiLCJidWlsZENvZGVGcmFtZUVycm9yIiwic3RtdFBhcmVudCIsImdldFN0YXRlbWVudFBhcmVudCIsInR5cGUiLCJyZXBsYWNlV2l0aCIsIkNPTkRJVElPTiIsIk1FU1NBR0UiLCJzdHJpbmdMaXRlcmFsIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldCIsImdldFNvdXJjZSIsInZpc2l0b3IiLCJQcm9ncmFtIiwiZXhpdCIsInN0YXRlIiwiYmluZGluZyIsInNjb3BlIiwiYmluZGluZ3MiLCJpbnZhcmlhbnQiLCJraW5kIiwicmVtb3ZlQmluZGluZyIsInJlZlBhdGgiLCJyZWZlcmVuY2VQYXRocyIsInBhcmVudEtleSIsInBhcmVudCIsInBhcmVudFBhdGgiLCJpc0ltcG9ydERlY2xhcmF0aW9uIiwic3BlY2lmaWVycyIsImxlbmd0aCIsInJlbW92ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7O0FBRUE7O0FBRUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkMsT0FBTyxJQUFJO0FBQzFCLFFBQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFDRSxLQUFsQjtBQUNBLFFBQU1DLFFBQVEsR0FBR0gsT0FBTyxDQUFDRyxRQUF6QjtBQUVBLFFBQU1DLFlBQVksR0FBR0QsUUFBUSxDQUFFO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLEdBSitCLENBQTdCOztBQU1BLFdBQVNFLGdCQUFULENBQTBCQyxJQUExQixFQUFnQztBQUM5QixVQUFNQyxJQUFJLEdBQUdELElBQUksQ0FBQ0MsSUFBbEI7QUFFQU4sSUFBQUEsQ0FBQyxDQUFDTyxvQkFBRixDQUF1QkQsSUFBdkI7QUFDQU4sSUFBQUEsQ0FBQyxDQUFDUSxnQkFBRixDQUFtQkYsSUFBSSxDQUFDRyxNQUF4QixFQUFnQztBQUFDQyxNQUFBQSxJQUFJLEVBQUU7QUFBUCxLQUFoQzs7QUFFQSxRQUFJSixJQUFJLENBQUNLLFNBQUwsQ0FBZSxDQUFmLEtBQXFCLElBQXpCLEVBQStCO0FBQzdCLFlBQU1OLElBQUksQ0FBQ08sbUJBQUwsQ0FDSiwyQ0FESSxDQUFOO0FBR0Q7O0FBRUQsVUFBTUMsVUFBVSxHQUFHUixJQUFJLENBQUNTLGtCQUFMLEVBQW5COztBQUVBLFFBQUlELFVBQVUsQ0FBQ0UsSUFBWCxLQUFvQixxQkFBeEIsRUFBK0M7QUFDN0MsWUFBTVYsSUFBSSxDQUFDTyxtQkFBTCxDQUNKLHdEQURJLENBQU47QUFHRDs7QUFFREMsSUFBQUEsVUFBVSxDQUFDRyxXQUFYLENBQ0ViLFlBQVksQ0FBQztBQUNYYyxNQUFBQSxTQUFTLEVBQUVYLElBQUksQ0FBQ0ssU0FBTCxDQUFlLENBQWYsQ0FEQTtBQUVYTyxNQUFBQSxPQUFPLEVBQ0xaLElBQUksQ0FBQ0ssU0FBTCxDQUFlLENBQWYsS0FDQVgsQ0FBQyxDQUFDbUIsYUFBRixDQUNFLDBCQUNFQyxJQUFJLENBQUNDLFNBQUwsQ0FBZWhCLElBQUksQ0FBQ2lCLEdBQUwsQ0FBUyxhQUFULEVBQXdCQyxTQUF4QixFQUFmLENBRko7QUFKUyxLQUFELENBRGQ7QUFXRDs7QUFFRCxTQUFPO0FBQ0xDLElBQUFBLE9BQU8sRUFBRTtBQUNQQyxNQUFBQSxPQUFPLEVBQUU7QUFDUEMsUUFBQUEsSUFBSSxDQUFDckIsSUFBRCxFQUFPc0IsS0FBUCxFQUFjO0FBQ2hCLGdCQUFNQyxPQUFPLEdBQUd2QixJQUFJLENBQUN3QixLQUFMLENBQVdDLFFBQVgsQ0FBb0JDLFNBQXBDLENBRGdCLENBRWhCOztBQUNBLGNBQUlILE9BQU8sSUFBSSxJQUFYLElBQW1CQSxPQUFPLENBQUNJLElBQVIsS0FBaUIsUUFBeEMsRUFBa0Q7QUFDaEQ7QUFDRDs7QUFDRCxjQUFJQyxhQUFhLEdBQUcsSUFBcEI7O0FBQ0EsZUFBSyxNQUFNQyxPQUFYLElBQXNCTixPQUFPLENBQUNPLGNBQTlCLEVBQThDO0FBQzVDLGdCQUNFRCxPQUFPLENBQUNFLFNBQVIsS0FBc0IsUUFBdEIsSUFDQUYsT0FBTyxDQUFDRyxNQUFSLENBQWV0QixJQUFmLEtBQXdCLGdCQUYxQixFQUdFO0FBQ0FrQixjQUFBQSxhQUFhLEdBQUcsS0FBaEI7QUFDQTtBQUNEOztBQUNEN0IsWUFBQUEsZ0JBQWdCLENBQUM4QixPQUFPLENBQUNJLFVBQVQsQ0FBaEI7QUFDRDs7QUFDRCxjQUFJTCxhQUFhLElBQUlqQyxDQUFDLENBQUN1QyxtQkFBRixDQUFzQlgsT0FBTyxDQUFDdkIsSUFBUixDQUFhZ0MsTUFBbkMsQ0FBckIsRUFBaUU7QUFDL0Q7QUFDQSxnQkFBSVQsT0FBTyxDQUFDdkIsSUFBUixDQUFhZ0MsTUFBYixDQUFvQkcsVUFBcEIsQ0FBK0JDLE1BQS9CLEtBQTBDLENBQTlDLEVBQWlEO0FBQy9DYixjQUFBQSxPQUFPLENBQUN2QixJQUFSLENBQWFpQyxVQUFiLENBQXdCSSxNQUF4QixHQUQrQyxDQUUvQztBQUNELGFBSEQsTUFHTztBQUNMZCxjQUFBQSxPQUFPLENBQUN2QixJQUFSLENBQWFxQyxNQUFiO0FBQ0Q7QUFDRjtBQUNGOztBQTNCTTtBQURGO0FBREosR0FBUDtBQWlDRCxDQTVFRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQG5vZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKiBlc2xpbnQgbnVjbGlkZS1pbnRlcm5hbC9uby1jb21tb25qczogMCAqL1xyXG5cclxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjb250ZXh0ID0+IHtcclxuICBjb25zdCB0ID0gY29udGV4dC50eXBlcztcclxuICBjb25zdCB0ZW1wbGF0ZSA9IGNvbnRleHQudGVtcGxhdGU7XHJcblxyXG4gIGNvbnN0IGJ1aWxkSWZUaHJvdyA9IHRlbXBsYXRlKGBcclxuICAgIGlmICghQ09ORElUSU9OKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihNRVNTQUdFKTtcclxuICAgIH1cclxuICBgKTtcclxuXHJcbiAgZnVuY3Rpb24gcmVwbGFjZUludmFyaWFudChwYXRoKSB7XHJcbiAgICBjb25zdCBub2RlID0gcGF0aC5ub2RlO1xyXG5cclxuICAgIHQuYXNzZXJ0Q2FsbEV4cHJlc3Npb24obm9kZSk7XHJcbiAgICB0LmFzc2VydElkZW50aWZpZXIobm9kZS5jYWxsZWUsIHtuYW1lOiAnaW52YXJpYW50J30pO1xyXG5cclxuICAgIGlmIChub2RlLmFyZ3VtZW50c1swXSA9PSBudWxsKSB7XHJcbiAgICAgIHRocm93IHBhdGguYnVpbGRDb2RlRnJhbWVFcnJvcihcclxuICAgICAgICAnYGludmFyaWFudCgpYCBtdXN0IGF0IGxlYXN0IG9uZSBhcmd1bWVudC4nLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHN0bXRQYXJlbnQgPSBwYXRoLmdldFN0YXRlbWVudFBhcmVudCgpO1xyXG5cclxuICAgIGlmIChzdG10UGFyZW50LnR5cGUgIT09ICdFeHByZXNzaW9uU3RhdGVtZW50Jykge1xyXG4gICAgICB0aHJvdyBwYXRoLmJ1aWxkQ29kZUZyYW1lRXJyb3IoXHJcbiAgICAgICAgJ2BpbnZhcmlhbnQoKWAgbXVzdCBiZSB1c2VkIGFzIGFuIGV4cHJlc3Npb24gc3RhdGVtZW50LicsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RtdFBhcmVudC5yZXBsYWNlV2l0aChcclxuICAgICAgYnVpbGRJZlRocm93KHtcclxuICAgICAgICBDT05ESVRJT046IG5vZGUuYXJndW1lbnRzWzBdLFxyXG4gICAgICAgIE1FU1NBR0U6XHJcbiAgICAgICAgICBub2RlLmFyZ3VtZW50c1sxXSB8fFxyXG4gICAgICAgICAgdC5zdHJpbmdMaXRlcmFsKFxyXG4gICAgICAgICAgICAnSW52YXJpYW50IHZpb2xhdGlvbjogJyArXHJcbiAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocGF0aC5nZXQoJ2FyZ3VtZW50cy4wJykuZ2V0U291cmNlKCkpLFxyXG4gICAgICAgICAgKSxcclxuICAgICAgfSksXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIHZpc2l0b3I6IHtcclxuICAgICAgUHJvZ3JhbToge1xyXG4gICAgICAgIGV4aXQocGF0aCwgc3RhdGUpIHtcclxuICAgICAgICAgIGNvbnN0IGJpbmRpbmcgPSBwYXRoLnNjb3BlLmJpbmRpbmdzLmludmFyaWFudDtcclxuICAgICAgICAgIC8vIE9ubHkgaW1wb3J0IGJpbmRpbmdzIGFyZSB0cmFuc2Zvcm1lZFxyXG4gICAgICAgICAgaWYgKGJpbmRpbmcgPT0gbnVsbCB8fCBiaW5kaW5nLmtpbmQgIT09ICdtb2R1bGUnKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGxldCByZW1vdmVCaW5kaW5nID0gdHJ1ZTtcclxuICAgICAgICAgIGZvciAoY29uc3QgcmVmUGF0aCBvZiBiaW5kaW5nLnJlZmVyZW5jZVBhdGhzKSB7XHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICByZWZQYXRoLnBhcmVudEtleSAhPT0gJ2NhbGxlZScgfHxcclxuICAgICAgICAgICAgICByZWZQYXRoLnBhcmVudC50eXBlICE9PSAnQ2FsbEV4cHJlc3Npb24nXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgIHJlbW92ZUJpbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXBsYWNlSW52YXJpYW50KHJlZlBhdGgucGFyZW50UGF0aCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAocmVtb3ZlQmluZGluZyAmJiB0LmlzSW1wb3J0RGVjbGFyYXRpb24oYmluZGluZy5wYXRoLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgLy8gaW1wb3J0IGludmFyaWFudCBmcm9tICcnO1xyXG4gICAgICAgICAgICBpZiAoYmluZGluZy5wYXRoLnBhcmVudC5zcGVjaWZpZXJzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgIGJpbmRpbmcucGF0aC5wYXJlbnRQYXRoLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgIC8vIGltcG9ydCBpbnZhcmlhbnQsIHtkZWVwRXF1YWx9IGZyb20gJyc7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgYmluZGluZy5wYXRoLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfTtcclxufTtcclxuIl19