/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */

const path = require('path');

const basedir = path.join(__dirname, '../../..');
const ignorePatterns = ['**/node_modules/**', '**/VendorLib/**']; // ^--v These need to be kept in sync.

const ignoreRe = new RegExp(String.raw`/(node_modules|VendorLib)/`);
module.exports = {
  /**
   * @param ?string directory
   *        An optional [absolute] directory to list files from.
   */
  getIncludedFiles(directory) {
    const cwd = directory || basedir;

    const glob = require('glob'); // Do not use `basedir + '**/*.js'`, otherwise we risk ignoring ourselves
    // if a parent directory matches an ignore pattern.


    const files = glob.sync('**/*.js', {
      cwd,
      ignore: ignorePatterns
    }).map(x => path.join(cwd, x));
    return files;
  },

  isIncluded(filename) {
    const [, name] = filename.split(basedir);

    if (name == null || !name.startsWith(path.sep)) {
      // This file falls outside of the Nuclide directory, or
      // it's a directory that has the same prefix as the Nuclide directory.
      return false;
    }

    return !ignoreRe.test(name);
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL3BhdGgtcnVsZXMuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJiYXNlZGlyIiwiam9pbiIsIl9fZGlybmFtZSIsImlnbm9yZVBhdHRlcm5zIiwiaWdub3JlUmUiLCJSZWdFeHAiLCJTdHJpbmciLCJyYXciLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0SW5jbHVkZWRGaWxlcyIsImRpcmVjdG9yeSIsImN3ZCIsImdsb2IiLCJmaWxlcyIsInN5bmMiLCJpZ25vcmUiLCJtYXAiLCJ4IiwiaXNJbmNsdWRlZCIsImZpbGVuYW1lIiwibmFtZSIsInNwbGl0Iiwic3RhcnRzV2l0aCIsInNlcCIsInRlc3QiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBRUEsTUFBTUMsT0FBTyxHQUFHRixJQUFJLENBQUNHLElBQUwsQ0FBVUMsU0FBVixFQUFxQixVQUFyQixDQUFoQjtBQUVBLE1BQU1DLGNBQWMsR0FBRyxDQUFDLG9CQUFELEVBQXVCLGlCQUF2QixDQUF2QixDLENBQ0E7O0FBQ0EsTUFBTUMsUUFBUSxHQUFHLElBQUlDLE1BQUosQ0FBV0MsTUFBTSxDQUFDQyxHQUFJLDRCQUF0QixDQUFqQjtBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZjtBQUNGO0FBQ0E7QUFDQTtBQUNFQyxFQUFBQSxnQkFBZ0IsQ0FBQ0MsU0FBRCxFQUFZO0FBQzFCLFVBQU1DLEdBQUcsR0FBR0QsU0FBUyxJQUFJWCxPQUF6Qjs7QUFDQSxVQUFNYSxJQUFJLEdBQUdkLE9BQU8sQ0FBQyxNQUFELENBQXBCLENBRjBCLENBRzFCO0FBQ0E7OztBQUNBLFVBQU1lLEtBQUssR0FBR0QsSUFBSSxDQUNmRSxJQURXLENBQ04sU0FETSxFQUNLO0FBQ2ZILE1BQUFBLEdBRGU7QUFFZkksTUFBQUEsTUFBTSxFQUFFYjtBQUZPLEtBREwsRUFLWGMsR0FMVyxDQUtQQyxDQUFDLElBQUlwQixJQUFJLENBQUNHLElBQUwsQ0FBVVcsR0FBVixFQUFlTSxDQUFmLENBTEUsQ0FBZDtBQU1BLFdBQU9KLEtBQVA7QUFDRCxHQWpCYzs7QUFrQmZLLEVBQUFBLFVBQVUsQ0FBQ0MsUUFBRCxFQUFXO0FBQ25CLFVBQU0sR0FBR0MsSUFBSCxJQUFXRCxRQUFRLENBQUNFLEtBQVQsQ0FBZXRCLE9BQWYsQ0FBakI7O0FBQ0EsUUFBSXFCLElBQUksSUFBSSxJQUFSLElBQWdCLENBQUNBLElBQUksQ0FBQ0UsVUFBTCxDQUFnQnpCLElBQUksQ0FBQzBCLEdBQXJCLENBQXJCLEVBQWdEO0FBQzlDO0FBQ0E7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFDRCxXQUFPLENBQUNwQixRQUFRLENBQUNxQixJQUFULENBQWNKLElBQWQsQ0FBUjtBQUNEOztBQTFCYyxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQG5vZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKiBlc2xpbnQgbnVjbGlkZS1pbnRlcm5hbC9uby1jb21tb25qczogMCAqL1xyXG5cclxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcclxuXHJcbmNvbnN0IGJhc2VkaXIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi4vLi4vLi4nKTtcclxuXHJcbmNvbnN0IGlnbm9yZVBhdHRlcm5zID0gWycqKi9ub2RlX21vZHVsZXMvKionLCAnKiovVmVuZG9yTGliLyoqJ107XHJcbi8vIF4tLXYgVGhlc2UgbmVlZCB0byBiZSBrZXB0IGluIHN5bmMuXHJcbmNvbnN0IGlnbm9yZVJlID0gbmV3IFJlZ0V4cChTdHJpbmcucmF3YC8obm9kZV9tb2R1bGVzfFZlbmRvckxpYikvYCk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAvKipcclxuICAgKiBAcGFyYW0gP3N0cmluZyBkaXJlY3RvcnlcclxuICAgKiAgICAgICAgQW4gb3B0aW9uYWwgW2Fic29sdXRlXSBkaXJlY3RvcnkgdG8gbGlzdCBmaWxlcyBmcm9tLlxyXG4gICAqL1xyXG4gIGdldEluY2x1ZGVkRmlsZXMoZGlyZWN0b3J5KSB7XHJcbiAgICBjb25zdCBjd2QgPSBkaXJlY3RvcnkgfHwgYmFzZWRpcjtcclxuICAgIGNvbnN0IGdsb2IgPSByZXF1aXJlKCdnbG9iJyk7XHJcbiAgICAvLyBEbyBub3QgdXNlIGBiYXNlZGlyICsgJyoqLyouanMnYCwgb3RoZXJ3aXNlIHdlIHJpc2sgaWdub3Jpbmcgb3Vyc2VsdmVzXHJcbiAgICAvLyBpZiBhIHBhcmVudCBkaXJlY3RvcnkgbWF0Y2hlcyBhbiBpZ25vcmUgcGF0dGVybi5cclxuICAgIGNvbnN0IGZpbGVzID0gZ2xvYlxyXG4gICAgICAuc3luYygnKiovKi5qcycsIHtcclxuICAgICAgICBjd2QsXHJcbiAgICAgICAgaWdub3JlOiBpZ25vcmVQYXR0ZXJucyxcclxuICAgICAgfSlcclxuICAgICAgLm1hcCh4ID0+IHBhdGguam9pbihjd2QsIHgpKTtcclxuICAgIHJldHVybiBmaWxlcztcclxuICB9LFxyXG4gIGlzSW5jbHVkZWQoZmlsZW5hbWUpIHtcclxuICAgIGNvbnN0IFssIG5hbWVdID0gZmlsZW5hbWUuc3BsaXQoYmFzZWRpcik7XHJcbiAgICBpZiAobmFtZSA9PSBudWxsIHx8ICFuYW1lLnN0YXJ0c1dpdGgocGF0aC5zZXApKSB7XHJcbiAgICAgIC8vIFRoaXMgZmlsZSBmYWxscyBvdXRzaWRlIG9mIHRoZSBOdWNsaWRlIGRpcmVjdG9yeSwgb3JcclxuICAgICAgLy8gaXQncyBhIGRpcmVjdG9yeSB0aGF0IGhhcyB0aGUgc2FtZSBwcmVmaXggYXMgdGhlIE51Y2xpZGUgZGlyZWN0b3J5LlxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gIWlnbm9yZVJlLnRlc3QobmFtZSk7XHJcbiAgfSxcclxufTtcclxuIl19