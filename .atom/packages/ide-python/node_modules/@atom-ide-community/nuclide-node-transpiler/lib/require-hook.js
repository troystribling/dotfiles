/**
 * Copyright (c) 2017-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @format
 */
'use strict';
/* eslint nuclide-internal/no-commonjs: 0 */

/**
 * This file installs the logic that modifies Node's built in require()
 * function to transpile .js files that have the  pragma.
 */

const Module = require('module');

const fs = require('fs');

const builtinJsExt = Module._extensions['.js'];

const NodeTranspiler = require('./NodeTranspiler');

const nodeTranspiler = new NodeTranspiler();

const pathRules = require('./path-rules');

let transpiling = null;

function transpiler_require_hook(_module, filename) {
  let moduleExports;

  if (pathRules.isIncluded(filename)) {
    // Keep src as a buffer so calculating its digest with crypto is fast.
    const src = fs.readFileSync(filename);
    let output;

    if (NodeTranspiler.shouldCompile(src)) {
      if (transpiling != null) {
        // This means that the transpiler tried to transpile itself.
        throw new Error(`Circular transpile from "${transpiling}" to "${filename}"`);
      }

      try {
        transpiling = filename;
        output = nodeTranspiler.transformWithCache(src, filename);
      } catch (err) {
        throw err;
      } finally {
        transpiling = null;
      }
    } else {
      output = src.toString();
    }

    moduleExports = _module._compile(output, filename);
  } else {
    moduleExports = builtinJsExt(_module, filename);
  }

  return moduleExports;
}
/**
 * Atom sets `require.extensions['.js']` as not writable (maybe to prevent
 * sloppy code from attaching a require hook that doesn't filter by path?). To
 * workaround that, we create a new `Module._extensions` object instead, with
 * our custom hook. Keeping the iteration order of this object is really
 * important because it determines the file extension lookup priority.
 */


Module._extensions = Object.keys(Module._extensions).reduce((acc, ext) => {
  const desc = Object.getOwnPropertyDescriptor(Module._extensions, ext);

  if (ext === '.js') {
    desc.value = transpiler_require_hook;
  }

  Object.defineProperty(acc, ext, desc);
  return acc;
}, {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL251Y2xpZGUvbnVjbGlkZS1ub2RlLXRyYW5zcGlsZXIvbGliL3JlcXVpcmUtaG9vay5qcyJdLCJuYW1lcyI6WyJNb2R1bGUiLCJyZXF1aXJlIiwiZnMiLCJidWlsdGluSnNFeHQiLCJfZXh0ZW5zaW9ucyIsIk5vZGVUcmFuc3BpbGVyIiwibm9kZVRyYW5zcGlsZXIiLCJwYXRoUnVsZXMiLCJ0cmFuc3BpbGluZyIsInRyYW5zcGlsZXJfcmVxdWlyZV9ob29rIiwiX21vZHVsZSIsImZpbGVuYW1lIiwibW9kdWxlRXhwb3J0cyIsImlzSW5jbHVkZWQiLCJzcmMiLCJyZWFkRmlsZVN5bmMiLCJvdXRwdXQiLCJzaG91bGRDb21waWxlIiwiRXJyb3IiLCJ0cmFuc2Zvcm1XaXRoQ2FjaGUiLCJlcnIiLCJ0b1N0cmluZyIsIl9jb21waWxlIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsImFjYyIsImV4dCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLElBQUQsQ0FBbEI7O0FBRUEsTUFBTUUsWUFBWSxHQUFHSCxNQUFNLENBQUNJLFdBQVAsQ0FBbUIsS0FBbkIsQ0FBckI7O0FBRUEsTUFBTUMsY0FBYyxHQUFHSixPQUFPLENBQUMsa0JBQUQsQ0FBOUI7O0FBQ0EsTUFBTUssY0FBYyxHQUFHLElBQUlELGNBQUosRUFBdkI7O0FBQ0EsTUFBTUUsU0FBUyxHQUFHTixPQUFPLENBQUMsY0FBRCxDQUF6Qjs7QUFFQSxJQUFJTyxXQUFXLEdBQUcsSUFBbEI7O0FBRUEsU0FBU0MsdUJBQVQsQ0FBaUNDLE9BQWpDLEVBQTBDQyxRQUExQyxFQUFvRDtBQUNsRCxNQUFJQyxhQUFKOztBQUNBLE1BQUlMLFNBQVMsQ0FBQ00sVUFBVixDQUFxQkYsUUFBckIsQ0FBSixFQUFvQztBQUNsQztBQUNBLFVBQU1HLEdBQUcsR0FBR1osRUFBRSxDQUFDYSxZQUFILENBQWdCSixRQUFoQixDQUFaO0FBQ0EsUUFBSUssTUFBSjs7QUFDQSxRQUFJWCxjQUFjLENBQUNZLGFBQWYsQ0FBNkJILEdBQTdCLENBQUosRUFBdUM7QUFDckMsVUFBSU4sV0FBVyxJQUFJLElBQW5CLEVBQXlCO0FBQ3ZCO0FBQ0EsY0FBTSxJQUFJVSxLQUFKLENBQ0gsNEJBQTJCVixXQUFZLFNBQVFHLFFBQVMsR0FEckQsQ0FBTjtBQUdEOztBQUNELFVBQUk7QUFDRkgsUUFBQUEsV0FBVyxHQUFHRyxRQUFkO0FBQ0FLLFFBQUFBLE1BQU0sR0FBR1YsY0FBYyxDQUFDYSxrQkFBZixDQUFrQ0wsR0FBbEMsRUFBdUNILFFBQXZDLENBQVQ7QUFDRCxPQUhELENBR0UsT0FBT1MsR0FBUCxFQUFZO0FBQ1osY0FBTUEsR0FBTjtBQUNELE9BTEQsU0FLVTtBQUNSWixRQUFBQSxXQUFXLEdBQUcsSUFBZDtBQUNEO0FBQ0YsS0FmRCxNQWVPO0FBQ0xRLE1BQUFBLE1BQU0sR0FBR0YsR0FBRyxDQUFDTyxRQUFKLEVBQVQ7QUFDRDs7QUFDRFQsSUFBQUEsYUFBYSxHQUFHRixPQUFPLENBQUNZLFFBQVIsQ0FBaUJOLE1BQWpCLEVBQXlCTCxRQUF6QixDQUFoQjtBQUNELEdBdkJELE1BdUJPO0FBQ0xDLElBQUFBLGFBQWEsR0FBR1QsWUFBWSxDQUFDTyxPQUFELEVBQVVDLFFBQVYsQ0FBNUI7QUFDRDs7QUFDRCxTQUFPQyxhQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0FaLE1BQU0sQ0FBQ0ksV0FBUCxHQUFxQm1CLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZeEIsTUFBTSxDQUFDSSxXQUFuQixFQUFnQ3FCLE1BQWhDLENBQXVDLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3hFLFFBQU1DLElBQUksR0FBR0wsTUFBTSxDQUFDTSx3QkFBUCxDQUFnQzdCLE1BQU0sQ0FBQ0ksV0FBdkMsRUFBb0R1QixHQUFwRCxDQUFiOztBQUNBLE1BQUlBLEdBQUcsS0FBSyxLQUFaLEVBQW1CO0FBQ2pCQyxJQUFBQSxJQUFJLENBQUNFLEtBQUwsR0FBYXJCLHVCQUFiO0FBQ0Q7O0FBQ0RjLEVBQUFBLE1BQU0sQ0FBQ1EsY0FBUCxDQUFzQkwsR0FBdEIsRUFBMkJDLEdBQTNCLEVBQWdDQyxJQUFoQztBQUNBLFNBQU9GLEdBQVA7QUFDRCxDQVBvQixFQU9sQixFQVBrQixDQUFyQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTctcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxyXG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICpcclxuICogQG5vZmxvd1xyXG4gKiBAZm9ybWF0XHJcbiAqL1xyXG4ndXNlIHN0cmljdCc7XHJcblxyXG4vKiBlc2xpbnQgbnVjbGlkZS1pbnRlcm5hbC9uby1jb21tb25qczogMCAqL1xyXG5cclxuLyoqXHJcbiAqIFRoaXMgZmlsZSBpbnN0YWxscyB0aGUgbG9naWMgdGhhdCBtb2RpZmllcyBOb2RlJ3MgYnVpbHQgaW4gcmVxdWlyZSgpXHJcbiAqIGZ1bmN0aW9uIHRvIHRyYW5zcGlsZSAuanMgZmlsZXMgdGhhdCBoYXZlIHRoZSBAZmxvdyBwcmFnbWEuXHJcbiAqL1xyXG5cclxuY29uc3QgTW9kdWxlID0gcmVxdWlyZSgnbW9kdWxlJyk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuXHJcbmNvbnN0IGJ1aWx0aW5Kc0V4dCA9IE1vZHVsZS5fZXh0ZW5zaW9uc1snLmpzJ107XHJcblxyXG5jb25zdCBOb2RlVHJhbnNwaWxlciA9IHJlcXVpcmUoJy4vTm9kZVRyYW5zcGlsZXInKTtcclxuY29uc3Qgbm9kZVRyYW5zcGlsZXIgPSBuZXcgTm9kZVRyYW5zcGlsZXIoKTtcclxuY29uc3QgcGF0aFJ1bGVzID0gcmVxdWlyZSgnLi9wYXRoLXJ1bGVzJyk7XHJcblxyXG5sZXQgdHJhbnNwaWxpbmcgPSBudWxsO1xyXG5cclxuZnVuY3Rpb24gdHJhbnNwaWxlcl9yZXF1aXJlX2hvb2soX21vZHVsZSwgZmlsZW5hbWUpIHtcclxuICBsZXQgbW9kdWxlRXhwb3J0cztcclxuICBpZiAocGF0aFJ1bGVzLmlzSW5jbHVkZWQoZmlsZW5hbWUpKSB7XHJcbiAgICAvLyBLZWVwIHNyYyBhcyBhIGJ1ZmZlciBzbyBjYWxjdWxhdGluZyBpdHMgZGlnZXN0IHdpdGggY3J5cHRvIGlzIGZhc3QuXHJcbiAgICBjb25zdCBzcmMgPSBmcy5yZWFkRmlsZVN5bmMoZmlsZW5hbWUpO1xyXG4gICAgbGV0IG91dHB1dDtcclxuICAgIGlmIChOb2RlVHJhbnNwaWxlci5zaG91bGRDb21waWxlKHNyYykpIHtcclxuICAgICAgaWYgKHRyYW5zcGlsaW5nICE9IG51bGwpIHtcclxuICAgICAgICAvLyBUaGlzIG1lYW5zIHRoYXQgdGhlIHRyYW5zcGlsZXIgdHJpZWQgdG8gdHJhbnNwaWxlIGl0c2VsZi5cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICBgQ2lyY3VsYXIgdHJhbnNwaWxlIGZyb20gXCIke3RyYW5zcGlsaW5nfVwiIHRvIFwiJHtmaWxlbmFtZX1cImAsXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHRyYW5zcGlsaW5nID0gZmlsZW5hbWU7XHJcbiAgICAgICAgb3V0cHV0ID0gbm9kZVRyYW5zcGlsZXIudHJhbnNmb3JtV2l0aENhY2hlKHNyYywgZmlsZW5hbWUpO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgdHJhbnNwaWxpbmcgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvdXRwdXQgPSBzcmMudG9TdHJpbmcoKTtcclxuICAgIH1cclxuICAgIG1vZHVsZUV4cG9ydHMgPSBfbW9kdWxlLl9jb21waWxlKG91dHB1dCwgZmlsZW5hbWUpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBtb2R1bGVFeHBvcnRzID0gYnVpbHRpbkpzRXh0KF9tb2R1bGUsIGZpbGVuYW1lKTtcclxuICB9XHJcbiAgcmV0dXJuIG1vZHVsZUV4cG9ydHM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBdG9tIHNldHMgYHJlcXVpcmUuZXh0ZW5zaW9uc1snLmpzJ11gIGFzIG5vdCB3cml0YWJsZSAobWF5YmUgdG8gcHJldmVudFxyXG4gKiBzbG9wcHkgY29kZSBmcm9tIGF0dGFjaGluZyBhIHJlcXVpcmUgaG9vayB0aGF0IGRvZXNuJ3QgZmlsdGVyIGJ5IHBhdGg/KS4gVG9cclxuICogd29ya2Fyb3VuZCB0aGF0LCB3ZSBjcmVhdGUgYSBuZXcgYE1vZHVsZS5fZXh0ZW5zaW9uc2Agb2JqZWN0IGluc3RlYWQsIHdpdGhcclxuICogb3VyIGN1c3RvbSBob29rLiBLZWVwaW5nIHRoZSBpdGVyYXRpb24gb3JkZXIgb2YgdGhpcyBvYmplY3QgaXMgcmVhbGx5XHJcbiAqIGltcG9ydGFudCBiZWNhdXNlIGl0IGRldGVybWluZXMgdGhlIGZpbGUgZXh0ZW5zaW9uIGxvb2t1cCBwcmlvcml0eS5cclxuICovXHJcbk1vZHVsZS5fZXh0ZW5zaW9ucyA9IE9iamVjdC5rZXlzKE1vZHVsZS5fZXh0ZW5zaW9ucykucmVkdWNlKChhY2MsIGV4dCkgPT4ge1xyXG4gIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE1vZHVsZS5fZXh0ZW5zaW9ucywgZXh0KTtcclxuICBpZiAoZXh0ID09PSAnLmpzJykge1xyXG4gICAgZGVzYy52YWx1ZSA9IHRyYW5zcGlsZXJfcmVxdWlyZV9ob29rO1xyXG4gIH1cclxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYWNjLCBleHQsIGRlc2MpO1xyXG4gIHJldHVybiBhY2M7XHJcbn0sIHt9KTtcclxuIl19