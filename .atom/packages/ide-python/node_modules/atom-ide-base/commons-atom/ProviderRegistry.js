"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProviderRegistry = void 0;
const atom_1 = require("atom");
class ProviderRegistry {
    constructor() {
        this.providers = [];
    }
    addProvider(provider) {
        const index = this.providers.findIndex((p) => provider.priority > p.priority);
        if (index === -1) {
            this.providers.push(provider);
        }
        else {
            this.providers.splice(index, 0, provider);
        }
        return new atom_1.Disposable(() => {
            this.removeProvider(provider);
        });
    }
    removeProvider(provider) {
        const index = this.providers.indexOf(provider);
        if (index !== -1) {
            this.providers.splice(index, 1);
        }
    }
    // TODO deprecate since there can be N providers.
    getProviderForEditor(editor) {
        const grammar = editor.getGrammar().scopeName;
        return this.findProvider(grammar);
    }
    // TODO create an ordering or priority aware util to prefer instead.
    getAllProvidersForEditor(editor) {
        const grammar = editor.getGrammar().scopeName;
        return this.findAllProviders(grammar);
    }
    findProvider(grammar) {
        for (const provider of this.findAllProviders(grammar)) {
            return provider;
        }
        return null;
    }
    /**
     * Iterates over all providers matching the grammar, in priority order.
     */
    *findAllProviders(grammar) {
        for (const provider of this.providers) {
            if (provider.grammarScopes == null || provider.grammarScopes.indexOf(grammar) !== -1) {
                yield provider;
            }
        }
    }
}
exports.ProviderRegistry = ProviderRegistry;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvdmlkZXJSZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy1jb21tb25zLWF0b20vUHJvdmlkZXJSZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQkFBNkM7QUFHN0MsTUFBYSxnQkFBZ0I7SUFHM0I7UUFDRSxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQWtCO1FBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM3RSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQTtTQUM5QjthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtTQUMxQztRQUNELE9BQU8sSUFBSSxpQkFBVSxDQUFDLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQy9CLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELGNBQWMsQ0FBQyxRQUFrQjtRQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM5QyxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDaEM7SUFDSCxDQUFDO0lBRUQsaURBQWlEO0lBQ2pELG9CQUFvQixDQUFDLE1BQWtCO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUE7UUFDN0MsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ25DLENBQUM7SUFFRCxvRUFBb0U7SUFDcEUsd0JBQXdCLENBQUMsTUFBa0I7UUFDekMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLFNBQVMsQ0FBQTtRQUM3QyxPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0lBRUQsWUFBWSxDQUFDLE9BQWU7UUFDMUIsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDckQsT0FBTyxRQUFRLENBQUE7U0FDaEI7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRDs7T0FFRztJQUNILENBQUMsZ0JBQWdCLENBQUMsT0FBZTtRQUMvQixLQUFLLE1BQU0sUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDckMsSUFBSSxRQUFRLENBQUMsYUFBYSxJQUFJLElBQUksSUFBSSxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDcEYsTUFBTSxRQUFRLENBQUE7YUFDZjtTQUNGO0lBQ0gsQ0FBQztDQUNGO0FBdkRELDRDQXVEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpc3Bvc2FibGUsIFRleHRFZGl0b3IgfSBmcm9tIFwiYXRvbVwiXG5pbXBvcnQgeyBQcm92aWRlciBhcyBQcm92aWRlclR5cGVzLCBCdXN5U2lnbmFsUHJvdmlkZXIsIEZpbmRSZWZlcmVuY2VzUHJvdmlkZXIgfSBmcm9tIFwiLi4vdHlwZXMtcGFja2FnZXMvbWFpbi5kXCJcblxuZXhwb3J0IGNsYXNzIFByb3ZpZGVyUmVnaXN0cnk8UHJvdmlkZXIgZXh0ZW5kcyBFeGNsdWRlPFByb3ZpZGVyVHlwZXMsIEJ1c3lTaWduYWxQcm92aWRlciB8IEZpbmRSZWZlcmVuY2VzUHJvdmlkZXI+PiB7XG4gIHByaXZhdGUgcHJvdmlkZXJzOiBBcnJheTxQcm92aWRlcj5cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnByb3ZpZGVycyA9IFtdXG4gIH1cblxuICBhZGRQcm92aWRlcihwcm92aWRlcjogUHJvdmlkZXIpOiBEaXNwb3NhYmxlIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMucHJvdmlkZXJzLmZpbmRJbmRleCgocCkgPT4gcHJvdmlkZXIucHJpb3JpdHkgPiBwLnByaW9yaXR5KVxuICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgIHRoaXMucHJvdmlkZXJzLnB1c2gocHJvdmlkZXIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvdmlkZXJzLnNwbGljZShpbmRleCwgMCwgcHJvdmlkZXIpXG4gICAgfVxuICAgIHJldHVybiBuZXcgRGlzcG9zYWJsZSgoKSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZVByb3ZpZGVyKHByb3ZpZGVyKVxuICAgIH0pXG4gIH1cblxuICByZW1vdmVQcm92aWRlcihwcm92aWRlcjogUHJvdmlkZXIpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMucHJvdmlkZXJzLmluZGV4T2YocHJvdmlkZXIpXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5wcm92aWRlcnMuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE8gZGVwcmVjYXRlIHNpbmNlIHRoZXJlIGNhbiBiZSBOIHByb3ZpZGVycy5cbiAgZ2V0UHJvdmlkZXJGb3JFZGl0b3IoZWRpdG9yOiBUZXh0RWRpdG9yKTogUHJvdmlkZXIgfCBudWxsIHtcbiAgICBjb25zdCBncmFtbWFyID0gZWRpdG9yLmdldEdyYW1tYXIoKS5zY29wZU5hbWVcbiAgICByZXR1cm4gdGhpcy5maW5kUHJvdmlkZXIoZ3JhbW1hcilcbiAgfVxuXG4gIC8vIFRPRE8gY3JlYXRlIGFuIG9yZGVyaW5nIG9yIHByaW9yaXR5IGF3YXJlIHV0aWwgdG8gcHJlZmVyIGluc3RlYWQuXG4gIGdldEFsbFByb3ZpZGVyc0ZvckVkaXRvcihlZGl0b3I6IFRleHRFZGl0b3IpOiBJdGVyYWJsZTxQcm92aWRlcj4ge1xuICAgIGNvbnN0IGdyYW1tYXIgPSBlZGl0b3IuZ2V0R3JhbW1hcigpLnNjb3BlTmFtZVxuICAgIHJldHVybiB0aGlzLmZpbmRBbGxQcm92aWRlcnMoZ3JhbW1hcilcbiAgfVxuXG4gIGZpbmRQcm92aWRlcihncmFtbWFyOiBzdHJpbmcpOiBQcm92aWRlciB8IG51bGwge1xuICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgdGhpcy5maW5kQWxsUHJvdmlkZXJzKGdyYW1tYXIpKSB7XG4gICAgICByZXR1cm4gcHJvdmlkZXJcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBJdGVyYXRlcyBvdmVyIGFsbCBwcm92aWRlcnMgbWF0Y2hpbmcgdGhlIGdyYW1tYXIsIGluIHByaW9yaXR5IG9yZGVyLlxuICAgKi9cbiAgKmZpbmRBbGxQcm92aWRlcnMoZ3JhbW1hcjogc3RyaW5nKTogSXRlcmFibGU8UHJvdmlkZXI+IHtcbiAgICBmb3IgKGNvbnN0IHByb3ZpZGVyIG9mIHRoaXMucHJvdmlkZXJzKSB7XG4gICAgICBpZiAocHJvdmlkZXIuZ3JhbW1hclNjb3BlcyA9PSBudWxsIHx8IHByb3ZpZGVyLmdyYW1tYXJTY29wZXMuaW5kZXhPZihncmFtbWFyKSAhPT0gLTEpIHtcbiAgICAgICAgeWllbGQgcHJvdmlkZXJcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==