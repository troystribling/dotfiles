"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lineLengthIfLong = exports.lineCountIfLarge = exports.largeness = void 0;
/**
 * Find if an editor's largeness based on the given threashold
 * @param editor
 * @param largeLineCount lineCountIfLarge threashold
 * @param longLineLength lineLengthIfLong threashold
 * @returns the largness score if editor is large. Otherwise it returns 0 (a small file)
 */
function largeness(editor, largeLineCount = atom.config.get("atom-ide-base.largeLineCount") || 4000, longLineLength = atom.config.get("atom-ide-base.longLineLength") || 4000) {
    const lineCount = lineCountIfLarge(editor, largeLineCount);
    if (lineCount !== 0) {
        return lineCount;
    }
    const longLine = lineLengthIfLong(editor, longLineLength);
    if (longLine !== 0) {
        return longLine;
    }
    return 0; // small file
}
exports.largeness = largeness;
/**
 * Find if an editor has a line that is longer than the given threashold
 * @param editor
 * @param threashold largeLineCount threashold
 * @returns the line count if it is larger than threashold. Otherwise it returns 0 (a small file)
 */
function lineCountIfLarge(editor, threashold) {
    // @ts-ignore
    if (editor.largeFileMode) {
        return 100000;
    }
    const lineCount = editor.getLineCount();
    if (lineCount >= threashold) {
        return lineCount;
    }
    return 0; // small file
}
exports.lineCountIfLarge = lineCountIfLarge;
/**
 * Find if an editor has a line that is longer than the given threashold
 * @param editor
 * @param threashold lineLengthForRow threashold
 * @param lineCount count up to this line. Default is {editor.getLineCount()}
 * @returns the first line length that has a length larger than threashold. If no line is found, it returns 0
 */
function lineLengthIfLong(editor, threashold, lineCount = editor.getLineCount()) {
    const buffer = editor.getBuffer();
    for (let i = 0, len = lineCount; i < len; i++) {
        const lineLength = buffer.lineLengthForRow(i);
        if (lineLength > threashold) {
            return lineLength;
        }
    }
    return 0; // small file
}
exports.lineLengthIfLong = lineLengthIfLong;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLWxhcmdlbmVzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy1jb21tb25zLWF0b20vZWRpdG9yLWxhcmdlbmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQTs7Ozs7O0dBTUc7QUFDSCxTQUFnQixTQUFTLENBQ3ZCLE1BQWtCLEVBQ2xCLGlCQUF5QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLElBQUksRUFDaEYsaUJBQXlCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLDhCQUE4QixDQUFDLElBQUksSUFBSTtJQUVoRixNQUFNLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsY0FBYyxDQUFDLENBQUE7SUFDMUQsSUFBSSxTQUFTLEtBQUssQ0FBQyxFQUFFO1FBQ25CLE9BQU8sU0FBUyxDQUFBO0tBQ2pCO0lBQ0QsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFBO0lBQ3pELElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtRQUNsQixPQUFPLFFBQVEsQ0FBQTtLQUNoQjtJQUNELE9BQU8sQ0FBQyxDQUFBLENBQUMsYUFBYTtBQUN4QixDQUFDO0FBZEQsOEJBY0M7QUFFRDs7Ozs7R0FLRztBQUNILFNBQWdCLGdCQUFnQixDQUFDLE1BQWtCLEVBQUUsVUFBa0I7SUFDckUsYUFBYTtJQUNiLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRTtRQUN4QixPQUFPLE1BQU0sQ0FBQTtLQUNkO0lBQ0QsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFBO0lBQ3ZDLElBQUksU0FBUyxJQUFJLFVBQVUsRUFBRTtRQUMzQixPQUFPLFNBQVMsQ0FBQTtLQUNqQjtJQUNELE9BQU8sQ0FBQyxDQUFBLENBQUMsYUFBYTtBQUN4QixDQUFDO0FBVkQsNENBVUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxTQUFnQixnQkFBZ0IsQ0FBQyxNQUFrQixFQUFFLFVBQWtCLEVBQUUsWUFBb0IsTUFBTSxDQUFDLFlBQVksRUFBRTtJQUNoSCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUE7SUFDakMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLFNBQVMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdDLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUM3QyxJQUFJLFVBQVUsR0FBRyxVQUFVLEVBQUU7WUFDM0IsT0FBTyxVQUFVLENBQUE7U0FDbEI7S0FDRjtJQUNELE9BQU8sQ0FBQyxDQUFBLENBQUMsYUFBYTtBQUN4QixDQUFDO0FBVEQsNENBU0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0RWRpdG9yIH0gZnJvbSBcImF0b21cIlxuXG4vKipcbiAqIEZpbmQgaWYgYW4gZWRpdG9yJ3MgbGFyZ2VuZXNzIGJhc2VkIG9uIHRoZSBnaXZlbiB0aHJlYXNob2xkXG4gKiBAcGFyYW0gZWRpdG9yXG4gKiBAcGFyYW0gbGFyZ2VMaW5lQ291bnQgbGluZUNvdW50SWZMYXJnZSB0aHJlYXNob2xkXG4gKiBAcGFyYW0gbG9uZ0xpbmVMZW5ndGggbGluZUxlbmd0aElmTG9uZyB0aHJlYXNob2xkXG4gKiBAcmV0dXJucyB0aGUgbGFyZ25lc3Mgc2NvcmUgaWYgZWRpdG9yIGlzIGxhcmdlLiBPdGhlcndpc2UgaXQgcmV0dXJucyAwIChhIHNtYWxsIGZpbGUpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsYXJnZW5lc3MoXG4gIGVkaXRvcjogVGV4dEVkaXRvcixcbiAgbGFyZ2VMaW5lQ291bnQ6IG51bWJlciA9IGF0b20uY29uZmlnLmdldChcImF0b20taWRlLWJhc2UubGFyZ2VMaW5lQ291bnRcIikgfHwgNDAwMCxcbiAgbG9uZ0xpbmVMZW5ndGg6IG51bWJlciA9IGF0b20uY29uZmlnLmdldChcImF0b20taWRlLWJhc2UubG9uZ0xpbmVMZW5ndGhcIikgfHwgNDAwMFxuKSB7XG4gIGNvbnN0IGxpbmVDb3VudCA9IGxpbmVDb3VudElmTGFyZ2UoZWRpdG9yLCBsYXJnZUxpbmVDb3VudClcbiAgaWYgKGxpbmVDb3VudCAhPT0gMCkge1xuICAgIHJldHVybiBsaW5lQ291bnRcbiAgfVxuICBjb25zdCBsb25nTGluZSA9IGxpbmVMZW5ndGhJZkxvbmcoZWRpdG9yLCBsb25nTGluZUxlbmd0aClcbiAgaWYgKGxvbmdMaW5lICE9PSAwKSB7XG4gICAgcmV0dXJuIGxvbmdMaW5lXG4gIH1cbiAgcmV0dXJuIDAgLy8gc21hbGwgZmlsZVxufVxuXG4vKipcbiAqIEZpbmQgaWYgYW4gZWRpdG9yIGhhcyBhIGxpbmUgdGhhdCBpcyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gdGhyZWFzaG9sZFxuICogQHBhcmFtIGVkaXRvclxuICogQHBhcmFtIHRocmVhc2hvbGQgbGFyZ2VMaW5lQ291bnQgdGhyZWFzaG9sZFxuICogQHJldHVybnMgdGhlIGxpbmUgY291bnQgaWYgaXQgaXMgbGFyZ2VyIHRoYW4gdGhyZWFzaG9sZC4gT3RoZXJ3aXNlIGl0IHJldHVybnMgMCAoYSBzbWFsbCBmaWxlKVxuICovXG5leHBvcnQgZnVuY3Rpb24gbGluZUNvdW50SWZMYXJnZShlZGl0b3I6IFRleHRFZGl0b3IsIHRocmVhc2hvbGQ6IG51bWJlcikge1xuICAvLyBAdHMtaWdub3JlXG4gIGlmIChlZGl0b3IubGFyZ2VGaWxlTW9kZSkge1xuICAgIHJldHVybiAxMDAwMDBcbiAgfVxuICBjb25zdCBsaW5lQ291bnQgPSBlZGl0b3IuZ2V0TGluZUNvdW50KClcbiAgaWYgKGxpbmVDb3VudCA+PSB0aHJlYXNob2xkKSB7XG4gICAgcmV0dXJuIGxpbmVDb3VudFxuICB9XG4gIHJldHVybiAwIC8vIHNtYWxsIGZpbGVcbn1cblxuLyoqXG4gKiBGaW5kIGlmIGFuIGVkaXRvciBoYXMgYSBsaW5lIHRoYXQgaXMgbG9uZ2VyIHRoYW4gdGhlIGdpdmVuIHRocmVhc2hvbGRcbiAqIEBwYXJhbSBlZGl0b3JcbiAqIEBwYXJhbSB0aHJlYXNob2xkIGxpbmVMZW5ndGhGb3JSb3cgdGhyZWFzaG9sZFxuICogQHBhcmFtIGxpbmVDb3VudCBjb3VudCB1cCB0byB0aGlzIGxpbmUuIERlZmF1bHQgaXMge2VkaXRvci5nZXRMaW5lQ291bnQoKX1cbiAqIEByZXR1cm5zIHRoZSBmaXJzdCBsaW5lIGxlbmd0aCB0aGF0IGhhcyBhIGxlbmd0aCBsYXJnZXIgdGhhbiB0aHJlYXNob2xkLiBJZiBubyBsaW5lIGlzIGZvdW5kLCBpdCByZXR1cm5zIDBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxpbmVMZW5ndGhJZkxvbmcoZWRpdG9yOiBUZXh0RWRpdG9yLCB0aHJlYXNob2xkOiBudW1iZXIsIGxpbmVDb3VudDogbnVtYmVyID0gZWRpdG9yLmdldExpbmVDb3VudCgpKSB7XG4gIGNvbnN0IGJ1ZmZlciA9IGVkaXRvci5nZXRCdWZmZXIoKVxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gbGluZUNvdW50OyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBsaW5lTGVuZ3RoID0gYnVmZmVyLmxpbmVMZW5ndGhGb3JSb3coaSlcbiAgICBpZiAobGluZUxlbmd0aCA+IHRocmVhc2hvbGQpIHtcbiAgICAgIHJldHVybiBsaW5lTGVuZ3RoXG4gICAgfVxuICB9XG4gIHJldHVybiAwIC8vIHNtYWxsIGZpbGVcbn1cbiJdfQ==