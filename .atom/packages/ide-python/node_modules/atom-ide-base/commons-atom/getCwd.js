"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCwd = void 0;
const path_1 = require("path");
const util_1 = require("util");
const fs_1 = require("fs");
const statAsync = util_1.promisify(fs_1.stat);
async function getCwd(target = "") {
    var _a;
    let cwd;
    if (target) {
        cwd = target;
    }
    else {
        const previousActiveItem = atom.workspace.getActivePaneItem();
        cwd = (_a = previousActiveItem === null || previousActiveItem === void 0 ? void 0 : previousActiveItem.getPath) === null || _a === void 0 ? void 0 : _a.call(previousActiveItem);
        if (cwd) {
            const dir = atom.project.relativizePath(cwd)[0];
            if (dir) {
                // Use project paths whenever they are available by default.
                return dir;
            }
        }
    }
    try {
        if (cwd) {
            // Otherwise, if the path exists on the local file system, use the
            // path or parent directory as appropriate.
            const stats = await statAsync(cwd);
            if (stats.isDirectory()) {
                return cwd;
            }
            cwd = path_1.dirname(cwd);
            const dirStats = await statAsync(cwd);
            if (dirStats.isDirectory()) {
                return cwd;
            }
        }
    }
    catch (_b) {
        //fail silently
    }
    cwd = atom.project.getPaths()[0];
    // no project paths
    return cwd;
}
exports.getCwd = getCwd;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Q3dkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjLWNvbW1vbnMtYXRvbS9nZXRDd2QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0JBQThCO0FBQzlCLCtCQUFnQztBQUNoQywyQkFBeUI7QUFDekIsTUFBTSxTQUFTLEdBQUcsZ0JBQVMsQ0FBQyxTQUFJLENBQUMsQ0FBQTtBQUUxQixLQUFLLFVBQVUsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFOztJQUN0QyxJQUFJLEdBQVcsQ0FBQTtJQUVmLElBQUksTUFBTSxFQUFFO1FBQ1YsR0FBRyxHQUFHLE1BQU0sQ0FBQTtLQUNiO1NBQU07UUFDTCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQWdDLENBQUE7UUFDM0YsR0FBRyxHQUFHLE1BQUEsa0JBQWtCLGFBQWxCLGtCQUFrQix1QkFBbEIsa0JBQWtCLENBQUUsT0FBTywrQ0FBM0Isa0JBQWtCLENBQXVCLENBQUE7UUFDL0MsSUFBSSxHQUFHLEVBQUU7WUFDUCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMvQyxJQUFJLEdBQUcsRUFBRTtnQkFDUCw0REFBNEQ7Z0JBQzVELE9BQU8sR0FBRyxDQUFBO2FBQ1g7U0FDRjtLQUNGO0lBRUQsSUFBSTtRQUNGLElBQUksR0FBRyxFQUFFO1lBQ1Asa0VBQWtFO1lBQ2xFLDJDQUEyQztZQUMzQyxNQUFNLEtBQUssR0FBRyxNQUFNLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNsQyxJQUFJLEtBQUssQ0FBQyxXQUFXLEVBQUUsRUFBRTtnQkFDdkIsT0FBTyxHQUFHLENBQUE7YUFDWDtZQUVELEdBQUcsR0FBRyxjQUFPLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDbEIsTUFBTSxRQUFRLEdBQUcsTUFBTSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDckMsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFLEVBQUU7Z0JBQzFCLE9BQU8sR0FBRyxDQUFBO2FBQ1g7U0FDRjtLQUNGO0lBQUMsV0FBTTtRQUNOLGVBQWU7S0FDaEI7SUFFRCxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNoQyxtQkFBbUI7SUFDbkIsT0FBTyxHQUFHLENBQUE7QUFDWixDQUFDO0FBdkNELHdCQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRpcm5hbWUgfSBmcm9tIFwicGF0aFwiXG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tIFwidXRpbFwiXG5pbXBvcnQgeyBzdGF0IH0gZnJvbSBcImZzXCJcbmNvbnN0IHN0YXRBc3luYyA9IHByb21pc2lmeShzdGF0KVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q3dkKHRhcmdldCA9IFwiXCIpOiBQcm9taXNlPHN0cmluZyB8IHVuZGVmaW5lZD4ge1xuICBsZXQgY3dkOiBzdHJpbmdcblxuICBpZiAodGFyZ2V0KSB7XG4gICAgY3dkID0gdGFyZ2V0XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcHJldmlvdXNBY3RpdmVJdGVtID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlUGFuZUl0ZW0oKSBhcyB7IGdldFBhdGg/OiAoKSA9PiBzdHJpbmcgfVxuICAgIGN3ZCA9IHByZXZpb3VzQWN0aXZlSXRlbT8uZ2V0UGF0aD8uKCkgYXMgc3RyaW5nXG4gICAgaWYgKGN3ZCkge1xuICAgICAgY29uc3QgZGlyID0gYXRvbS5wcm9qZWN0LnJlbGF0aXZpemVQYXRoKGN3ZClbMF1cbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgLy8gVXNlIHByb2plY3QgcGF0aHMgd2hlbmV2ZXIgdGhleSBhcmUgYXZhaWxhYmxlIGJ5IGRlZmF1bHQuXG4gICAgICAgIHJldHVybiBkaXJcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIGlmIChjd2QpIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgaWYgdGhlIHBhdGggZXhpc3RzIG9uIHRoZSBsb2NhbCBmaWxlIHN5c3RlbSwgdXNlIHRoZVxuICAgICAgLy8gcGF0aCBvciBwYXJlbnQgZGlyZWN0b3J5IGFzIGFwcHJvcHJpYXRlLlxuICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBzdGF0QXN5bmMoY3dkKVxuICAgICAgaWYgKHN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgcmV0dXJuIGN3ZFxuICAgICAgfVxuXG4gICAgICBjd2QgPSBkaXJuYW1lKGN3ZClcbiAgICAgIGNvbnN0IGRpclN0YXRzID0gYXdhaXQgc3RhdEFzeW5jKGN3ZClcbiAgICAgIGlmIChkaXJTdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgIHJldHVybiBjd2RcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIC8vZmFpbCBzaWxlbnRseVxuICB9XG5cbiAgY3dkID0gYXRvbS5wcm9qZWN0LmdldFBhdGhzKClbMF1cbiAgLy8gbm8gcHJvamVjdCBwYXRoc1xuICByZXR1cm4gY3dkXG59XG4iXX0=