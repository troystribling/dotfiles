"use strict";

var _$template = require("solid-js/web").template;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MarkdownView = MarkdownView;
exports.renderMarkdown = renderMarkdown;

var _web = require("solid-js/web");

var _solidJs = require("solid-js");

var _dompurify = _interopRequireDefault(require("dompurify"));

var _MarkdownRenderer = require("../MarkdownRenderer");

const _tmpl$ = _$template(`<div><div></div></div>`, 4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A react component that can hosts markdown texts
 */
function MarkdownView(props) {
  const [getMarkdown, setMarkdown] = (0, _solidJs.createSignal)("");
  /**
    Calls `getDocumentationHtml` to convert Markdown to markdown
  */

  (0, _solidJs.onMount)(async () => {
    var _await$renderMarkdown;

    setMarkdown((_await$renderMarkdown = await renderMarkdown(props.markdown, props.grammarName, props.renderer)) !== null && _await$renderMarkdown !== void 0 ? _await$renderMarkdown : "");
  });
  return (() => {
    const _el$ = _tmpl$.cloneNode(true),
          _el$2 = _el$.firstChild;

    _el$.addEventListener("wheel", onWheel);

    (0, _web.effect)(_p$ => {
      const _v$ = props.containerClassName,
            _v$2 = props.contentClassName,
            _v$3 = getMarkdown();

      _v$ !== _p$._v$ && (_el$.className = _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && (_el$2.className = _p$._v$2 = _v$2);
      _v$3 !== _p$._v$3 && (_el$2.innerHTML = _p$._v$3 = _v$3);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined
    });
    return _el$;
  })();
}
/**
 * handles the mouse wheel event to enable scrolling over long text
 * @param evt the mouse wheel event being triggered
 */


function onWheel(evt) {
  return evt.stopPropagation();
}
/**
 * convert the markdown documentation to markdown
 * @param markdownTexts the documentation text in markdown format to be converted
 * @param grammarName  the default grammar used for embedded code samples
 * @param renderer markdown service to be used for rendering
 * @return a promise object to track the asynchronous operation
 */


async function renderMarkdown(markdownTexts, grammarName = (() => {
  var _atom$workspace$getAc, _atom$workspace$getAc2;

  return (_atom$workspace$getAc = atom.workspace.getActiveTextEditor()) === null || _atom$workspace$getAc === void 0 ? void 0 : (_atom$workspace$getAc2 = _atom$workspace$getAc.getGrammar().scopeName) === null || _atom$workspace$getAc2 === void 0 ? void 0 : _atom$workspace$getAc2.toLowerCase();
})() || "", renderer) {
  if (markdownTexts === undefined) {
    return null;
  }

  let markdownText = ""; // if Array

  if (Array.isArray(markdownTexts)) {
    if (markdownTexts.length === 0) {
      return null;
    }

    markdownText = markdownTexts.join("\r\n");
  } // if string
  else {
      markdownText = markdownTexts;
    }

  if (renderer) {
    return _dompurify.default.sanitize(await renderer.render(markdownText, grammarName));
  } else {
    // Use built-in markdown renderer (it already does sanitization)
    const render = await (0, _MarkdownRenderer.getMarkdownRenderer)();
    return render(markdownText, grammarName);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy1jb21tb25zLXVpL2Zsb2F0LXBhbmUvTWFya2Rvd25WaWV3LnRzeCJdLCJuYW1lcyI6WyJNYXJrZG93blZpZXciLCJwcm9wcyIsImdldE1hcmtkb3duIiwic2V0TWFya2Rvd24iLCJyZW5kZXJNYXJrZG93biIsIm1hcmtkb3duIiwiZ3JhbW1hck5hbWUiLCJyZW5kZXJlciIsIm9uV2hlZWwiLCJjb250YWluZXJDbGFzc05hbWUiLCJjb250ZW50Q2xhc3NOYW1lIiwiZXZ0Iiwic3RvcFByb3BhZ2F0aW9uIiwibWFya2Rvd25UZXh0cyIsImF0b20iLCJ3b3Jrc3BhY2UiLCJnZXRBY3RpdmVUZXh0RWRpdG9yIiwiZ2V0R3JhbW1hciIsInNjb3BlTmFtZSIsInRvTG93ZXJDYXNlIiwidW5kZWZpbmVkIiwibWFya2Rvd25UZXh0IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiam9pbiIsIkRPTVB1cmlmeSIsInNhbml0aXplIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ08sU0FBU0EsWUFBVCxDQUFzQkMsS0FBdEIsRUFBb0M7QUFDekMsUUFBTSxDQUFDQyxXQUFELEVBQWNDLFdBQWQsSUFBNkIsMkJBQWEsRUFBYixDQUFuQztBQUVBO0FBQ0Y7QUFDQTs7QUFDRSx3QkFBUSxZQUFZO0FBQUE7O0FBQ2xCQSxJQUFBQSxXQUFXLDBCQUFFLE1BQU1DLGNBQWMsQ0FBQ0gsS0FBSyxDQUFDSSxRQUFQLEVBQWlCSixLQUFLLENBQUNLLFdBQXZCLEVBQW9DTCxLQUFLLENBQUNNLFFBQTFDLENBQXRCLHlFQUE4RSxFQUE5RSxDQUFYO0FBQ0QsR0FGRDtBQUlBO0FBQUE7QUFBQTs7QUFBQSxtQ0FDcURDLE9BRHJEOztBQUFBO0FBQUEsa0JBQ2tCUCxLQUFLLENBQUNRLGtCQUR4QjtBQUFBLG1CQUVvQlIsS0FBSyxDQUFDUyxnQkFGMUI7QUFBQSxtQkFFdURSLFdBQVcsRUFGbEU7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUtEO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNNLE9BQVQsQ0FBaUJHLEdBQWpCLEVBQWtDO0FBQ2hDLFNBQU9BLEdBQUcsQ0FBQ0MsZUFBSixFQUFQO0FBQ0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sZUFBZVIsY0FBZixDQUNMUyxhQURLLEVBRUxQLFdBQW1CLEdBQUc7QUFBQTs7QUFBQSxrQ0FBQVEsSUFBSSxDQUFDQyxTQUFMLENBQWVDLG1CQUFmLDRHQUFzQ0MsVUFBdEMsR0FBbURDLFNBQW5ELGtGQUE4REMsV0FBOUQ7QUFBQSxRQUErRSxFQUZoRyxFQUdMWixRQUhLLEVBSW1CO0FBQ3hCLE1BQUlNLGFBQWEsS0FBS08sU0FBdEIsRUFBaUM7QUFDL0IsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBSUMsWUFBWSxHQUFHLEVBQW5CLENBTHdCLENBTXhCOztBQUNBLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjVixhQUFkLENBQUosRUFBa0M7QUFDaEMsUUFBSUEsYUFBYSxDQUFDVyxNQUFkLEtBQXlCLENBQTdCLEVBQWdDO0FBQzlCLGFBQU8sSUFBUDtBQUNEOztBQUNESCxJQUFBQSxZQUFZLEdBQUlSLGFBQUQsQ0FBaUNZLElBQWpDLENBQXNDLE1BQXRDLENBQWY7QUFDRCxHQUxELENBTUE7QUFOQSxPQU9LO0FBQ0hKLE1BQUFBLFlBQVksR0FBR1IsYUFBZjtBQUNEOztBQUNELE1BQUlOLFFBQUosRUFBYztBQUNaLFdBQU9tQixtQkFBVUMsUUFBVixDQUFtQixNQUFNcEIsUUFBUSxDQUFDcUIsTUFBVCxDQUFnQlAsWUFBaEIsRUFBOEJmLFdBQTlCLENBQXpCLENBQVA7QUFDRCxHQUZELE1BRU87QUFDTDtBQUNBLFVBQU1zQixNQUFNLEdBQUcsTUFBTSw0Q0FBckI7QUFDQSxXQUFPQSxNQUFNLENBQUNQLFlBQUQsRUFBZWYsV0FBZixDQUFiO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNpZ25hbCwgb25Nb3VudCB9IGZyb20gXCJzb2xpZC1qc1wiXG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gXCJkb21wdXJpZnlcIlxuaW1wb3J0IHsgTWFya2Rvd25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3R5cGVzLXBhY2thZ2VzL21haW5cIlxuaW1wb3J0IHsgZ2V0TWFya2Rvd25SZW5kZXJlciB9IGZyb20gXCIuLi9NYXJrZG93blJlbmRlcmVyXCJcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gIG1hcmtkb3duOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nXG4gIGdyYW1tYXJOYW1lPzogc3RyaW5nXG4gIHJlbmRlcmVyPzogTWFya2Rvd25TZXJ2aWNlXG4gIGNvbnRhaW5lckNsYXNzTmFtZTogc3RyaW5nXG4gIGNvbnRlbnRDbGFzc05hbWU6IHN0cmluZ1xuICAvLyBhbHJlYWR5IHJlbmRlcmVkIG1hcmtkb3duXG4gIGh0bWw/OiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nXG59XG5cbi8qKlxuICogQSByZWFjdCBjb21wb25lbnQgdGhhdCBjYW4gaG9zdHMgbWFya2Rvd24gdGV4dHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1hcmtkb3duVmlldyhwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgW2dldE1hcmtkb3duLCBzZXRNYXJrZG93bl0gPSBjcmVhdGVTaWduYWwoXCJcIilcblxuICAvKipcbiAgICBDYWxscyBgZ2V0RG9jdW1lbnRhdGlvbkh0bWxgIHRvIGNvbnZlcnQgTWFya2Rvd24gdG8gbWFya2Rvd25cbiAgKi9cbiAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0TWFya2Rvd24oKGF3YWl0IHJlbmRlck1hcmtkb3duKHByb3BzLm1hcmtkb3duLCBwcm9wcy5ncmFtbWFyTmFtZSwgcHJvcHMucmVuZGVyZXIpKSA/PyBcIlwiKVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3Byb3BzLmNvbnRhaW5lckNsYXNzTmFtZX0gb25XaGVlbD17b25XaGVlbH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17cHJvcHMuY29udGVudENsYXNzTmFtZX0gaW5uZXJIVE1MPXtnZXRNYXJrZG93bigpfSAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbi8qKlxuICogaGFuZGxlcyB0aGUgbW91c2Ugd2hlZWwgZXZlbnQgdG8gZW5hYmxlIHNjcm9sbGluZyBvdmVyIGxvbmcgdGV4dFxuICogQHBhcmFtIGV2dCB0aGUgbW91c2Ugd2hlZWwgZXZlbnQgYmVpbmcgdHJpZ2dlcmVkXG4gKi9cbmZ1bmN0aW9uIG9uV2hlZWwoZXZ0OiBXaGVlbEV2ZW50KSB7XG4gIHJldHVybiBldnQuc3RvcFByb3BhZ2F0aW9uKClcbn1cblxuLyoqXG4gKiBjb252ZXJ0IHRoZSBtYXJrZG93biBkb2N1bWVudGF0aW9uIHRvIG1hcmtkb3duXG4gKiBAcGFyYW0gbWFya2Rvd25UZXh0cyB0aGUgZG9jdW1lbnRhdGlvbiB0ZXh0IGluIG1hcmtkb3duIGZvcm1hdCB0byBiZSBjb252ZXJ0ZWRcbiAqIEBwYXJhbSBncmFtbWFyTmFtZSAgdGhlIGRlZmF1bHQgZ3JhbW1hciB1c2VkIGZvciBlbWJlZGRlZCBjb2RlIHNhbXBsZXNcbiAqIEBwYXJhbSByZW5kZXJlciBtYXJrZG93biBzZXJ2aWNlIHRvIGJlIHVzZWQgZm9yIHJlbmRlcmluZ1xuICogQHJldHVybiBhIHByb21pc2Ugb2JqZWN0IHRvIHRyYWNrIHRoZSBhc3luY2hyb25vdXMgb3BlcmF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXJNYXJrZG93bihcbiAgbWFya2Rvd25UZXh0czogQXJyYXk8c3RyaW5nPiB8IHN0cmluZyxcbiAgZ3JhbW1hck5hbWU6IHN0cmluZyA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKT8uZ2V0R3JhbW1hcigpLnNjb3BlTmFtZT8udG9Mb3dlckNhc2UoKSB8fCBcIlwiLFxuICByZW5kZXJlcj86IE1hcmtkb3duU2VydmljZVxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gIGlmIChtYXJrZG93blRleHRzID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgbGV0IG1hcmtkb3duVGV4dCA9IFwiXCJcbiAgLy8gaWYgQXJyYXlcbiAgaWYgKEFycmF5LmlzQXJyYXkobWFya2Rvd25UZXh0cykpIHtcbiAgICBpZiAobWFya2Rvd25UZXh0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIG1hcmtkb3duVGV4dCA9IChtYXJrZG93blRleHRzIGFzIEFycmF5PHN0cmluZz4pLmpvaW4oXCJcXHJcXG5cIilcbiAgfVxuICAvLyBpZiBzdHJpbmdcbiAgZWxzZSB7XG4gICAgbWFya2Rvd25UZXh0ID0gbWFya2Rvd25UZXh0c1xuICB9XG4gIGlmIChyZW5kZXJlcikge1xuICAgIHJldHVybiBET01QdXJpZnkuc2FuaXRpemUoYXdhaXQgcmVuZGVyZXIucmVuZGVyKG1hcmtkb3duVGV4dCwgZ3JhbW1hck5hbWUpKVxuICB9IGVsc2Uge1xuICAgIC8vIFVzZSBidWlsdC1pbiBtYXJrZG93biByZW5kZXJlciAoaXQgYWxyZWFkeSBkb2VzIHNhbml0aXphdGlvbilcbiAgICBjb25zdCByZW5kZXIgPSBhd2FpdCBnZXRNYXJrZG93blJlbmRlcmVyKClcbiAgICByZXR1cm4gcmVuZGVyKG1hcmtkb3duVGV4dCwgZ3JhbW1hck5hbWUpXG4gIH1cbn1cbiJdfQ==