"use strict";

var _$template = require("solid-js/web").template;

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SnippetView = SnippetView;
exports.getSnippetHtml = getSnippetHtml;

var _web = require("solid-js/web");

var _solidJs = require("solid-js");

var _dompurify = _interopRequireDefault(require("dompurify"));

var _MarkdownRenderer = require("../MarkdownRenderer");

const _tmpl$ = _$template(`<div><div></div></div>`, 4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * A React component that hosts a code snippet with syntax highlighting
 */
function SnippetView(props) {
  const [getSnippet, setSnippet] = (0, _solidJs.createSignal)("");
  (0, _solidJs.onMount)(async () => {
    var _await$getSnippetHtml;

    setSnippet((_await$getSnippetHtml = await getSnippetHtml(props.snippet, props.grammarName, props.renderer)) !== null && _await$getSnippetHtml !== void 0 ? _await$getSnippetHtml : "");
  });
  return (() => {
    const _el$ = _tmpl$.cloneNode(true),
          _el$2 = _el$.firstChild;

    _el$.addEventListener("wheel", onWheel);

    (0, _web.effect)(_p$ => {
      const _v$ = props.containerClassName,
            _v$2 = props.contentClassName,
            _v$3 = getSnippet();

      _v$ !== _p$._v$ && (_el$.className = _p$._v$ = _v$);
      _v$2 !== _p$._v$2 && (_el$2.className = _p$._v$2 = _v$2);
      _v$3 !== _p$._v$3 && (_el$2.innerHTML = _p$._v$3 = _v$3);
      return _p$;
    }, {
      _v$: undefined,
      _v$2: undefined,
      _v$3: undefined
    });
    return _el$;
  })();
}
/**
 * handles the mouse wheel event to enable scrolling over long text
 * @param evt the mouse wheel event being triggered
 */


function onWheel(evt) {
  return evt.stopPropagation();
}

const regexPremeable = /^\s*<([!?])([a-z]+)?\s*/i;
const regexLSPPrefix = /^\((method|property|parameter|alias)\)\W/;
/**
 * converts a given code snippet into syntax formatted HTML
 * @param snippets the code snippet to be converted
 * @param grammarName the name of the grammar to be used for syntax highlighting
 * @param renderer markdown service to be used for rendering
 * @return a promise object to track the asynchronous operation
 */

async function getSnippetHtml(snipetsGiven, grammarName = (() => {
  var _atom$workspace$getAc, _atom$workspace$getAc2;

  return (_atom$workspace$getAc = atom.workspace.getActiveTextEditor()) === null || _atom$workspace$getAc === void 0 ? void 0 : (_atom$workspace$getAc2 = _atom$workspace$getAc.getGrammar().scopeName) === null || _atom$workspace$getAc2 === void 0 ? void 0 : _atom$workspace$getAc2.toLowerCase();
})() || "", renderer) {
  if (snipetsGiven === undefined) {
    return null;
  }

  let snippets = snipetsGiven; // if string

  if (typeof snippets === "string") {
    snippets = [snippets];
  } // if Array


  if (Array.isArray(snippets)) {
    if (snippets.length === 0) {
      return null;
    }

    const markdown = snippets.map(snippet => {
      const snp = snippet.replace(regexPremeable, "") // remove any preamble from the line
      .replace(regexLSPPrefix, ""); // remove LSP prefix

      return `\`\`\`\n${snp}\n\`\`\``;
    }).join("\n");

    if (renderer) {
      return _dompurify.default.sanitize(await renderer.render(markdown, grammarName));
    } else {
      // Use built-in markdown renderer (it already does sanitization)
      const render = await (0, _MarkdownRenderer.getMarkdownRenderer)();
      return render(markdown, grammarName);
    }
  } else {
    return null;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy1jb21tb25zLXVpL2Zsb2F0LXBhbmUvU25pcHBldFZpZXcudHN4Il0sIm5hbWVzIjpbIlNuaXBwZXRWaWV3IiwicHJvcHMiLCJnZXRTbmlwcGV0Iiwic2V0U25pcHBldCIsImdldFNuaXBwZXRIdG1sIiwic25pcHBldCIsImdyYW1tYXJOYW1lIiwicmVuZGVyZXIiLCJvbldoZWVsIiwiY29udGFpbmVyQ2xhc3NOYW1lIiwiY29udGVudENsYXNzTmFtZSIsImV2dCIsInN0b3BQcm9wYWdhdGlvbiIsInJlZ2V4UHJlbWVhYmxlIiwicmVnZXhMU1BQcmVmaXgiLCJzbmlwZXRzR2l2ZW4iLCJhdG9tIiwid29ya3NwYWNlIiwiZ2V0QWN0aXZlVGV4dEVkaXRvciIsImdldEdyYW1tYXIiLCJzY29wZU5hbWUiLCJ0b0xvd2VyQ2FzZSIsInVuZGVmaW5lZCIsInNuaXBwZXRzIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwibWFya2Rvd24iLCJtYXAiLCJzbnAiLCJyZXBsYWNlIiwiam9pbiIsIkRPTVB1cmlmeSIsInNhbml0aXplIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQ08sU0FBU0EsV0FBVCxDQUFxQkMsS0FBckIsRUFBbUM7QUFDeEMsUUFBTSxDQUFDQyxVQUFELEVBQWFDLFVBQWIsSUFBMkIsMkJBQWEsRUFBYixDQUFqQztBQUVBLHdCQUFRLFlBQVk7QUFBQTs7QUFDbEJBLElBQUFBLFVBQVUsMEJBQUUsTUFBTUMsY0FBYyxDQUFDSCxLQUFLLENBQUNJLE9BQVAsRUFBZ0JKLEtBQUssQ0FBQ0ssV0FBdEIsRUFBbUNMLEtBQUssQ0FBQ00sUUFBekMsQ0FBdEIseUVBQTZFLEVBQTdFLENBQVY7QUFDRCxHQUZEO0FBSUE7QUFBQTtBQUFBOztBQUFBLG1DQUNxREMsT0FEckQ7O0FBQUE7QUFBQSxrQkFDa0JQLEtBQUssQ0FBQ1Esa0JBRHhCO0FBQUEsbUJBRW9CUixLQUFLLENBQUNTLGdCQUYxQjtBQUFBLG1CQUV1RFIsVUFBVSxFQUZqRTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBS0Q7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsU0FBU00sT0FBVCxDQUFpQkcsR0FBakIsRUFBa0M7QUFDaEMsU0FBT0EsR0FBRyxDQUFDQyxlQUFKLEVBQVA7QUFDRDs7QUFFRCxNQUFNQyxjQUFjLEdBQUcsMEJBQXZCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHLDBDQUF2QjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNPLGVBQWVWLGNBQWYsQ0FDTFcsWUFESyxFQUVMVCxXQUFtQixHQUFHO0FBQUE7O0FBQUEsa0NBQUFVLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxtQkFBZiw0R0FBc0NDLFVBQXRDLEdBQW1EQyxTQUFuRCxrRkFBOERDLFdBQTlEO0FBQUEsUUFBK0UsRUFGaEcsRUFHTGQsUUFISyxFQUltQjtBQUN4QixNQUFJUSxZQUFZLEtBQUtPLFNBQXJCLEVBQWdDO0FBQzlCLFdBQU8sSUFBUDtBQUNEOztBQUNELE1BQUlDLFFBQVEsR0FBR1IsWUFBZixDQUp3QixDQU14Qjs7QUFDQSxNQUFJLE9BQU9RLFFBQVAsS0FBb0IsUUFBeEIsRUFBa0M7QUFDaENBLElBQUFBLFFBQVEsR0FBRyxDQUFDQSxRQUFELENBQVg7QUFDRCxHQVR1QixDQVd4Qjs7O0FBQ0EsTUFBSUMsS0FBSyxDQUFDQyxPQUFOLENBQWNGLFFBQWQsQ0FBSixFQUE2QjtBQUMzQixRQUFJQSxRQUFRLENBQUNHLE1BQVQsS0FBb0IsQ0FBeEIsRUFBMkI7QUFDekIsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsVUFBTUMsUUFBUSxHQUFHSixRQUFRLENBQ3RCSyxHQURjLENBQ1R2QixPQUFELElBQWE7QUFDaEIsWUFBTXdCLEdBQUcsR0FBR3hCLE9BQU8sQ0FDaEJ5QixPQURTLENBQ0RqQixjQURDLEVBQ2UsRUFEZixFQUNtQjtBQURuQixPQUVUaUIsT0FGUyxDQUVEaEIsY0FGQyxFQUVlLEVBRmYsQ0FBWixDQURnQixDQUdlOztBQUMvQixhQUFRLFdBQVVlLEdBQUksVUFBdEI7QUFDRCxLQU5jLEVBT2RFLElBUGMsQ0FPVCxJQVBTLENBQWpCOztBQVNBLFFBQUl4QixRQUFKLEVBQWM7QUFDWixhQUFPeUIsbUJBQVVDLFFBQVYsQ0FBbUIsTUFBTTFCLFFBQVEsQ0FBQzJCLE1BQVQsQ0FBZ0JQLFFBQWhCLEVBQTBCckIsV0FBMUIsQ0FBekIsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMO0FBQ0EsWUFBTTRCLE1BQU0sR0FBRyxNQUFNLDRDQUFyQjtBQUNBLGFBQU9BLE1BQU0sQ0FBQ1AsUUFBRCxFQUFXckIsV0FBWCxDQUFiO0FBQ0Q7QUFDRixHQXBCRCxNQW9CTztBQUNMLFdBQU8sSUFBUDtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTaWduYWwsIG9uTW91bnQgfSBmcm9tIFwic29saWQtanNcIlxuaW1wb3J0IERPTVB1cmlmeSBmcm9tIFwiZG9tcHVyaWZ5XCJcbmltcG9ydCB7IE1hcmtkb3duU2VydmljZSB9IGZyb20gXCIuLi8uLi90eXBlcy1wYWNrYWdlcy9tYWluXCJcbmltcG9ydCB7IGdldE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwiLi4vTWFya2Rvd25SZW5kZXJlclwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xuICBzbmlwcGV0OiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nXG4gIGdyYW1tYXJOYW1lPzogc3RyaW5nXG4gIHJlbmRlcmVyPzogTWFya2Rvd25TZXJ2aWNlXG4gIGNvbnRhaW5lckNsYXNzTmFtZTogc3RyaW5nXG4gIGNvbnRlbnRDbGFzc05hbWU6IHN0cmluZ1xufVxuXG4vKipcbiAqIEEgUmVhY3QgY29tcG9uZW50IHRoYXQgaG9zdHMgYSBjb2RlIHNuaXBwZXQgd2l0aCBzeW50YXggaGlnaGxpZ2h0aW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTbmlwcGV0Vmlldyhwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgW2dldFNuaXBwZXQsIHNldFNuaXBwZXRdID0gY3JlYXRlU2lnbmFsKFwiXCIpXG5cbiAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgc2V0U25pcHBldCgoYXdhaXQgZ2V0U25pcHBldEh0bWwocHJvcHMuc25pcHBldCwgcHJvcHMuZ3JhbW1hck5hbWUsIHByb3BzLnJlbmRlcmVyKSkgPz8gXCJcIilcbiAgfSlcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtwcm9wcy5jb250YWluZXJDbGFzc05hbWV9IG9uV2hlZWw9e29uV2hlZWx9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e3Byb3BzLmNvbnRlbnRDbGFzc05hbWV9IGlubmVySFRNTD17Z2V0U25pcHBldCgpfSAvPlxuICAgIDwvZGl2PlxuICApXG59XG5cbi8qKlxuICogaGFuZGxlcyB0aGUgbW91c2Ugd2hlZWwgZXZlbnQgdG8gZW5hYmxlIHNjcm9sbGluZyBvdmVyIGxvbmcgdGV4dFxuICogQHBhcmFtIGV2dCB0aGUgbW91c2Ugd2hlZWwgZXZlbnQgYmVpbmcgdHJpZ2dlcmVkXG4gKi9cbmZ1bmN0aW9uIG9uV2hlZWwoZXZ0OiBXaGVlbEV2ZW50KSB7XG4gIHJldHVybiBldnQuc3RvcFByb3BhZ2F0aW9uKClcbn1cblxuY29uc3QgcmVnZXhQcmVtZWFibGUgPSAvXlxccyo8KFshP10pKFthLXpdKyk/XFxzKi9pXG5jb25zdCByZWdleExTUFByZWZpeCA9IC9eXFwoKG1ldGhvZHxwcm9wZXJ0eXxwYXJhbWV0ZXJ8YWxpYXMpXFwpXFxXL1xuXG4vKipcbiAqIGNvbnZlcnRzIGEgZ2l2ZW4gY29kZSBzbmlwcGV0IGludG8gc3ludGF4IGZvcm1hdHRlZCBIVE1MXG4gKiBAcGFyYW0gc25pcHBldHMgdGhlIGNvZGUgc25pcHBldCB0byBiZSBjb252ZXJ0ZWRcbiAqIEBwYXJhbSBncmFtbWFyTmFtZSB0aGUgbmFtZSBvZiB0aGUgZ3JhbW1hciB0byBiZSB1c2VkIGZvciBzeW50YXggaGlnaGxpZ2h0aW5nXG4gKiBAcGFyYW0gcmVuZGVyZXIgbWFya2Rvd24gc2VydmljZSB0byBiZSB1c2VkIGZvciByZW5kZXJpbmdcbiAqIEByZXR1cm4gYSBwcm9taXNlIG9iamVjdCB0byB0cmFjayB0aGUgYXN5bmNocm9ub3VzIG9wZXJhdGlvblxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0U25pcHBldEh0bWwoXG4gIHNuaXBldHNHaXZlbjogQXJyYXk8c3RyaW5nPiB8IHN0cmluZyxcbiAgZ3JhbW1hck5hbWU6IHN0cmluZyA9IGF0b20ud29ya3NwYWNlLmdldEFjdGl2ZVRleHRFZGl0b3IoKT8uZ2V0R3JhbW1hcigpLnNjb3BlTmFtZT8udG9Mb3dlckNhc2UoKSB8fCBcIlwiLFxuICByZW5kZXJlcj86IE1hcmtkb3duU2VydmljZVxuKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gIGlmIChzbmlwZXRzR2l2ZW4gPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgbGV0IHNuaXBwZXRzID0gc25pcGV0c0dpdmVuXG5cbiAgLy8gaWYgc3RyaW5nXG4gIGlmICh0eXBlb2Ygc25pcHBldHMgPT09IFwic3RyaW5nXCIpIHtcbiAgICBzbmlwcGV0cyA9IFtzbmlwcGV0c11cbiAgfVxuXG4gIC8vIGlmIEFycmF5XG4gIGlmIChBcnJheS5pc0FycmF5KHNuaXBwZXRzKSkge1xuICAgIGlmIChzbmlwcGV0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIGNvbnN0IG1hcmtkb3duID0gc25pcHBldHNcbiAgICAgIC5tYXAoKHNuaXBwZXQpID0+IHtcbiAgICAgICAgY29uc3Qgc25wID0gc25pcHBldFxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4UHJlbWVhYmxlLCBcIlwiKSAvLyByZW1vdmUgYW55IHByZWFtYmxlIGZyb20gdGhlIGxpbmVcbiAgICAgICAgICAucmVwbGFjZShyZWdleExTUFByZWZpeCwgXCJcIikgLy8gcmVtb3ZlIExTUCBwcmVmaXhcbiAgICAgICAgcmV0dXJuIGBcXGBcXGBcXGBcXG4ke3NucH1cXG5cXGBcXGBcXGBgXG4gICAgICB9KVxuICAgICAgLmpvaW4oXCJcXG5cIilcblxuICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgcmV0dXJuIERPTVB1cmlmeS5zYW5pdGl6ZShhd2FpdCByZW5kZXJlci5yZW5kZXIobWFya2Rvd24sIGdyYW1tYXJOYW1lKSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXNlIGJ1aWx0LWluIG1hcmtkb3duIHJlbmRlcmVyIChpdCBhbHJlYWR5IGRvZXMgc2FuaXRpemF0aW9uKVxuICAgICAgY29uc3QgcmVuZGVyID0gYXdhaXQgZ2V0TWFya2Rvd25SZW5kZXJlcigpXG4gICAgICByZXR1cm4gcmVuZGVyKG1hcmtkb3duLCBncmFtbWFyTmFtZSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuIl19