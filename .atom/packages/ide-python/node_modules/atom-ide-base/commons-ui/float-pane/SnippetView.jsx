"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSnippetHtml = exports.SnippetView = void 0;
const solid_js_1 = require("solid-js");
const dompurify_1 = __importDefault(require("dompurify"));
const MarkdownRenderer_1 = require("../MarkdownRenderer");
/**
 * A React component that hosts a code snippet with syntax highlighting
 */
function SnippetView(props) {
    const [getSnippet, setSnippet] = solid_js_1.createSignal("");
    solid_js_1.onMount(async () => {
        var _a;
        setSnippet((_a = (await getSnippetHtml(props.snippet, props.grammarName, props.renderer))) !== null && _a !== void 0 ? _a : "");
    });
    return (<div className={props.containerClassName} onWheel={onWheel}>
      <div className={props.contentClassName} innerHTML={getSnippet()}/>
    </div>);
}
exports.SnippetView = SnippetView;
/**
 * handles the mouse wheel event to enable scrolling over long text
 * @param evt the mouse wheel event being triggered
 */
function onWheel(evt) {
    return evt.stopPropagation();
}
const regexPremeable = /^\s*<([!?])([a-z]+)?\s*/i;
const regexLSPPrefix = /^\((method|property|parameter|alias)\)\W/;
/**
 * converts a given code snippet into syntax formatted HTML
 * @param snippets the code snippet to be converted
 * @param grammarName the name of the grammar to be used for syntax highlighting
 * @param renderer markdown service to be used for rendering
 * @return a promise object to track the asynchronous operation
 */
async function getSnippetHtml(snipetsGiven, grammarName, renderer) {
    var _a, _b;
    if (grammarName === void 0) { grammarName = ((_b = (_a = atom.workspace.getActiveTextEditor()) === null || _a === void 0 ? void 0 : _a.getGrammar().scopeName) === null || _b === void 0 ? void 0 : _b.toLowerCase()) || ""; }
    if (snipetsGiven === undefined) {
        return null;
    }
    let snippets = snipetsGiven;
    // if string
    if (typeof snippets === "string") {
        snippets = [snippets];
    }
    // if Array
    if (Array.isArray(snippets)) {
        if (snippets.length === 0) {
            return null;
        }
        const markdown = snippets
            .map((snippet) => {
            const snp = snippet
                .replace(regexPremeable, "") // remove any preamble from the line
                .replace(regexLSPPrefix, ""); // remove LSP prefix
            return `\`\`\`\n${snp}\n\`\`\``;
        })
            .join("\n");
        if (renderer) {
            return dompurify_1.default.sanitize(await renderer.render(markdown, grammarName));
        }
        else {
            // Use built-in markdown renderer (it already does sanitization)
            const render = await MarkdownRenderer_1.getMarkdownRenderer();
            return render(markdown, grammarName);
        }
    }
    else {
        return null;
    }
}
exports.getSnippetHtml = getSnippetHtml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU25pcHBldFZpZXcuanN4Iiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjLWNvbW1vbnMtdWkvZmxvYXQtcGFuZS9TbmlwcGV0Vmlldy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsdUNBQWdEO0FBQ2hELDBEQUFpQztBQUVqQywwREFBeUQ7QUFVekQ7O0dBRUc7QUFDSCxTQUFnQixXQUFXLENBQUMsS0FBWTtJQUN0QyxNQUFNLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxHQUFHLHVCQUFZLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFakQsa0JBQU8sQ0FBQyxLQUFLLElBQUksRUFBRTs7UUFDakIsVUFBVSxDQUFDLE1BQUEsQ0FBQyxNQUFNLGNBQWMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFBO0lBQzVGLENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTyxDQUNMLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUN6RDtNQUFBLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQ2xFO0lBQUEsRUFBRSxHQUFHLENBQUMsQ0FDUCxDQUFBO0FBQ0gsQ0FBQztBQVpELGtDQVlDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxPQUFPLENBQUMsR0FBZTtJQUM5QixPQUFPLEdBQUcsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtBQUM5QixDQUFDO0FBRUQsTUFBTSxjQUFjLEdBQUcsMEJBQTBCLENBQUE7QUFDakQsTUFBTSxjQUFjLEdBQUcsMENBQTBDLENBQUE7QUFFakU7Ozs7OztHQU1HO0FBQ0ksS0FBSyxVQUFVLGNBQWMsQ0FDbEMsWUFBb0MsRUFDcEMsV0FBdUcsRUFDdkcsUUFBMEI7O2dDQUQxQixFQUFBLGVBQXNCLE1BQUEsTUFBQSxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLDBDQUFFLFVBQVUsR0FBRyxTQUFTLDBDQUFFLFdBQVcsRUFBRSxLQUFJLEVBQUU7SUFHdkcsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1FBQzlCLE9BQU8sSUFBSSxDQUFBO0tBQ1o7SUFDRCxJQUFJLFFBQVEsR0FBRyxZQUFZLENBQUE7SUFFM0IsWUFBWTtJQUNaLElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxFQUFFO1FBQ2hDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0tBQ3RCO0lBRUQsV0FBVztJQUNYLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUMzQixJQUFJLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFDRCxNQUFNLFFBQVEsR0FBRyxRQUFRO2FBQ3RCLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2YsTUFBTSxHQUFHLEdBQUcsT0FBTztpQkFDaEIsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxvQ0FBb0M7aUJBQ2hFLE9BQU8sQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUEsQ0FBQyxvQkFBb0I7WUFDbkQsT0FBTyxXQUFXLEdBQUcsVUFBVSxDQUFBO1FBQ2pDLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUViLElBQUksUUFBUSxFQUFFO1lBQ1osT0FBTyxtQkFBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUE7U0FDeEU7YUFBTTtZQUNMLGdFQUFnRTtZQUNoRSxNQUFNLE1BQU0sR0FBRyxNQUFNLHNDQUFtQixFQUFFLENBQUE7WUFDMUMsT0FBTyxNQUFNLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFBO1NBQ3JDO0tBQ0Y7U0FBTTtRQUNMLE9BQU8sSUFBSSxDQUFBO0tBQ1o7QUFDSCxDQUFDO0FBdkNELHdDQXVDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZVNpZ25hbCwgb25Nb3VudCB9IGZyb20gXCJzb2xpZC1qc1wiXG5pbXBvcnQgRE9NUHVyaWZ5IGZyb20gXCJkb21wdXJpZnlcIlxuaW1wb3J0IHsgTWFya2Rvd25TZXJ2aWNlIH0gZnJvbSBcIi4uLy4uL3R5cGVzLXBhY2thZ2VzL21haW5cIlxuaW1wb3J0IHsgZ2V0TWFya2Rvd25SZW5kZXJlciB9IGZyb20gXCIuLi9NYXJrZG93blJlbmRlcmVyXCJcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gIHNuaXBwZXQ6IEFycmF5PHN0cmluZz4gfCBzdHJpbmdcbiAgZ3JhbW1hck5hbWU/OiBzdHJpbmdcbiAgcmVuZGVyZXI/OiBNYXJrZG93blNlcnZpY2VcbiAgY29udGFpbmVyQ2xhc3NOYW1lOiBzdHJpbmdcbiAgY29udGVudENsYXNzTmFtZTogc3RyaW5nXG59XG5cbi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgdGhhdCBob3N0cyBhIGNvZGUgc25pcHBldCB3aXRoIHN5bnRheCBoaWdobGlnaHRpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNuaXBwZXRWaWV3KHByb3BzOiBQcm9wcykge1xuICBjb25zdCBbZ2V0U25pcHBldCwgc2V0U25pcHBldF0gPSBjcmVhdGVTaWduYWwoXCJcIilcblxuICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICBzZXRTbmlwcGV0KChhd2FpdCBnZXRTbmlwcGV0SHRtbChwcm9wcy5zbmlwcGV0LCBwcm9wcy5ncmFtbWFyTmFtZSwgcHJvcHMucmVuZGVyZXIpKSA/PyBcIlwiKVxuICB9KVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e3Byb3BzLmNvbnRhaW5lckNsYXNzTmFtZX0gb25XaGVlbD17b25XaGVlbH0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17cHJvcHMuY29udGVudENsYXNzTmFtZX0gaW5uZXJIVE1MPXtnZXRTbmlwcGV0KCl9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuLyoqXG4gKiBoYW5kbGVzIHRoZSBtb3VzZSB3aGVlbCBldmVudCB0byBlbmFibGUgc2Nyb2xsaW5nIG92ZXIgbG9uZyB0ZXh0XG4gKiBAcGFyYW0gZXZ0IHRoZSBtb3VzZSB3aGVlbCBldmVudCBiZWluZyB0cmlnZ2VyZWRcbiAqL1xuZnVuY3Rpb24gb25XaGVlbChldnQ6IFdoZWVsRXZlbnQpIHtcbiAgcmV0dXJuIGV2dC5zdG9wUHJvcGFnYXRpb24oKVxufVxuXG5jb25zdCByZWdleFByZW1lYWJsZSA9IC9eXFxzKjwoWyE/XSkoW2Etel0rKT9cXHMqL2lcbmNvbnN0IHJlZ2V4TFNQUHJlZml4ID0gL15cXCgobWV0aG9kfHByb3BlcnR5fHBhcmFtZXRlcnxhbGlhcylcXClcXFcvXG5cbi8qKlxuICogY29udmVydHMgYSBnaXZlbiBjb2RlIHNuaXBwZXQgaW50byBzeW50YXggZm9ybWF0dGVkIEhUTUxcbiAqIEBwYXJhbSBzbmlwcGV0cyB0aGUgY29kZSBzbmlwcGV0IHRvIGJlIGNvbnZlcnRlZFxuICogQHBhcmFtIGdyYW1tYXJOYW1lIHRoZSBuYW1lIG9mIHRoZSBncmFtbWFyIHRvIGJlIHVzZWQgZm9yIHN5bnRheCBoaWdobGlnaHRpbmdcbiAqIEBwYXJhbSByZW5kZXJlciBtYXJrZG93biBzZXJ2aWNlIHRvIGJlIHVzZWQgZm9yIHJlbmRlcmluZ1xuICogQHJldHVybiBhIHByb21pc2Ugb2JqZWN0IHRvIHRyYWNrIHRoZSBhc3luY2hyb25vdXMgb3BlcmF0aW9uXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRTbmlwcGV0SHRtbChcbiAgc25pcGV0c0dpdmVuOiBBcnJheTxzdHJpbmc+IHwgc3RyaW5nLFxuICBncmFtbWFyTmFtZTogc3RyaW5nID0gYXRvbS53b3Jrc3BhY2UuZ2V0QWN0aXZlVGV4dEVkaXRvcigpPy5nZXRHcmFtbWFyKCkuc2NvcGVOYW1lPy50b0xvd2VyQ2FzZSgpIHx8IFwiXCIsXG4gIHJlbmRlcmVyPzogTWFya2Rvd25TZXJ2aWNlXG4pOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgaWYgKHNuaXBldHNHaXZlbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICBsZXQgc25pcHBldHMgPSBzbmlwZXRzR2l2ZW5cblxuICAvLyBpZiBzdHJpbmdcbiAgaWYgKHR5cGVvZiBzbmlwcGV0cyA9PT0gXCJzdHJpbmdcIikge1xuICAgIHNuaXBwZXRzID0gW3NuaXBwZXRzXVxuICB9XG5cbiAgLy8gaWYgQXJyYXlcbiAgaWYgKEFycmF5LmlzQXJyYXkoc25pcHBldHMpKSB7XG4gICAgaWYgKHNuaXBwZXRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gICAgY29uc3QgbWFya2Rvd24gPSBzbmlwcGV0c1xuICAgICAgLm1hcCgoc25pcHBldCkgPT4ge1xuICAgICAgICBjb25zdCBzbnAgPSBzbmlwcGV0XG4gICAgICAgICAgLnJlcGxhY2UocmVnZXhQcmVtZWFibGUsIFwiXCIpIC8vIHJlbW92ZSBhbnkgcHJlYW1ibGUgZnJvbSB0aGUgbGluZVxuICAgICAgICAgIC5yZXBsYWNlKHJlZ2V4TFNQUHJlZml4LCBcIlwiKSAvLyByZW1vdmUgTFNQIHByZWZpeFxuICAgICAgICByZXR1cm4gYFxcYFxcYFxcYFxcbiR7c25wfVxcblxcYFxcYFxcYGBcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlxcblwiKVxuXG4gICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4gRE9NUHVyaWZ5LnNhbml0aXplKGF3YWl0IHJlbmRlcmVyLnJlbmRlcihtYXJrZG93biwgZ3JhbW1hck5hbWUpKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBVc2UgYnVpbHQtaW4gbWFya2Rvd24gcmVuZGVyZXIgKGl0IGFscmVhZHkgZG9lcyBzYW5pdGl6YXRpb24pXG4gICAgICBjb25zdCByZW5kZXIgPSBhd2FpdCBnZXRNYXJrZG93blJlbmRlcmVyKClcbiAgICAgIHJldHVybiByZW5kZXIobWFya2Rvd24sIGdyYW1tYXJOYW1lKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG59XG4iXX0=