"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isItemVisible = isItemVisible;
exports.isElementVisible = isElementVisible;
exports.getItemElement = getItemElement;

/** A function to detect if an item (view) is visible in Atom.
 * This is useful to skip code excecution or updating when the item is not visible.
 * @param item this is an item that is stored in {ViewRegistry}. It has the same type of the argument that you pass to `atom.view.getView(item)`.
 */
function isItemVisible(item) {
  if (item === undefined || item === null) {
    return false;
  } // check the HTMLElement itself (important for when the dock/container is visible but the tab is not selected)
  // try getting the element


  const element = getItemElement(item);

  if (element !== undefined && !isElementVisible(element)) {
    return false; // if it we can't detect the invisiblity using HTML we need to consider Atom's context so we continue
  } // etch component
  // if (item?.component?.visible === false) {
  //   return false
  // }


  const paneContainer = atom.workspace.paneContainerForItem(item); // if no container it is not visible

  if (paneContainer === undefined) {
    return false;
  } else if (typeof paneContainer.isVisible === "function") {
    // use Dock.isVisible()
    return paneContainer.isVisible();
  } else {
    // it is visible (when paneContainer is not a dock like TextEditor)
    return true;
  }
}
/** A function to detect if an HTMLElement is visible. It doesn't consider the Atom context.
 * To detect if an item is visible in Atom use {isItemVisible} instead
 * This is useful to skip code excecution or updating when the element is not visible.
 * @param element
 */


function isElementVisible(element) {
  if (element instanceof HTMLElement && (element.style.display === "none" || element.hidden || element.offsetHeight === 0)) {
    return false;
  }

  return true;
}
/**
 * Get the HTMLElement of an item using `.getElement()` or `.element`
 */


function getItemElement(item) {
  if (item === undefined || item === null) {
    return undefined;
  }

  return typeof item.getElement === "function" ? item.getElement() : item.element;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy1jb21tb25zLXVpL2l0ZW1zLnRzIl0sIm5hbWVzIjpbImlzSXRlbVZpc2libGUiLCJpdGVtIiwidW5kZWZpbmVkIiwiZWxlbWVudCIsImdldEl0ZW1FbGVtZW50IiwiaXNFbGVtZW50VmlzaWJsZSIsInBhbmVDb250YWluZXIiLCJhdG9tIiwid29ya3NwYWNlIiwicGFuZUNvbnRhaW5lckZvckl0ZW0iLCJpc1Zpc2libGUiLCJIVE1MRWxlbWVudCIsInN0eWxlIiwiZGlzcGxheSIsImhpZGRlbiIsIm9mZnNldEhlaWdodCIsImdldEVsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sU0FBU0EsYUFBVCxDQUF1QkMsSUFBdkIsRUFBd0Y7QUFDN0YsTUFBSUEsSUFBSSxLQUFLQyxTQUFULElBQXNCRCxJQUFJLEtBQUssSUFBbkMsRUFBeUM7QUFDdkMsV0FBTyxLQUFQO0FBQ0QsR0FINEYsQ0FJN0Y7QUFDQTs7O0FBQ0EsUUFBTUUsT0FBTyxHQUFHQyxjQUFjLENBQUNILElBQUQsQ0FBOUI7O0FBQ0EsTUFBSUUsT0FBTyxLQUFLRCxTQUFaLElBQXlCLENBQUNHLGdCQUFnQixDQUFDRixPQUFELENBQTlDLEVBQXlEO0FBQ3ZELFdBQU8sS0FBUCxDQUR1RCxDQUV2RDtBQUNELEdBVjRGLENBVzdGO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxRQUFNRyxhQUFhLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxvQkFBZixDQUFvQ1IsSUFBcEMsQ0FBdEIsQ0FmNkYsQ0FnQjdGOztBQUNBLE1BQUlLLGFBQWEsS0FBS0osU0FBdEIsRUFBaUM7QUFDL0IsV0FBTyxLQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUksT0FBUUksYUFBRCxDQUF1QkksU0FBOUIsS0FBNEMsVUFBaEQsRUFBNEQ7QUFDakU7QUFDQSxXQUFRSixhQUFELENBQXdCSSxTQUF4QixFQUFQO0FBQ0QsR0FITSxNQUdBO0FBQ0w7QUFDQSxXQUFPLElBQVA7QUFDRDtBQUNGO0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0wsZ0JBQVQsQ0FBMEJGLE9BQTFCLEVBQWdEO0FBQ3JELE1BQ0VBLE9BQU8sWUFBWVEsV0FBbkIsS0FDQ1IsT0FBTyxDQUFDUyxLQUFSLENBQWNDLE9BQWQsS0FBMEIsTUFBMUIsSUFBb0NWLE9BQU8sQ0FBQ1csTUFBNUMsSUFBc0RYLE9BQU8sQ0FBQ1ksWUFBUixLQUF5QixDQURoRixDQURGLEVBR0U7QUFDQSxXQUFPLEtBQVA7QUFDRDs7QUFDRCxTQUFPLElBQVA7QUFDRDtBQUVEO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU1gsY0FBVCxDQUF3QkgsSUFBeEIsRUFBeUQ7QUFDOUQsTUFBSUEsSUFBSSxLQUFLQyxTQUFULElBQXNCRCxJQUFJLEtBQUssSUFBbkMsRUFBeUM7QUFDdkMsV0FBT0MsU0FBUDtBQUNEOztBQUNELFNBQU8sT0FBUUQsSUFBRCxDQUFjZSxVQUFyQixLQUFvQyxVQUFwQyxHQUNGZixJQUFELENBQTRDZSxVQUE1QyxFQURHLEdBRUZmLElBQUQsQ0FBK0NFLE9BRm5EO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERvY2ssIFZpZXdSZWdpc3RyeSB9IGZyb20gXCJhdG9tXCJcblxuLyoqIEEgZnVuY3Rpb24gdG8gZGV0ZWN0IGlmIGFuIGl0ZW0gKHZpZXcpIGlzIHZpc2libGUgaW4gQXRvbS5cbiAqIFRoaXMgaXMgdXNlZnVsIHRvIHNraXAgY29kZSBleGNlY3V0aW9uIG9yIHVwZGF0aW5nIHdoZW4gdGhlIGl0ZW0gaXMgbm90IHZpc2libGUuXG4gKiBAcGFyYW0gaXRlbSB0aGlzIGlzIGFuIGl0ZW0gdGhhdCBpcyBzdG9yZWQgaW4ge1ZpZXdSZWdpc3RyeX0uIEl0IGhhcyB0aGUgc2FtZSB0eXBlIG9mIHRoZSBhcmd1bWVudCB0aGF0IHlvdSBwYXNzIHRvIGBhdG9tLnZpZXcuZ2V0VmlldyhpdGVtKWAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0l0ZW1WaXNpYmxlKGl0ZW06IFBhcmFtZXRlcnM8Vmlld1JlZ2lzdHJ5W1wiZ2V0Vmlld1wiXT5bMF0gfCB1bmRlZmluZWQgfCBudWxsKSB7XG4gIGlmIChpdGVtID09PSB1bmRlZmluZWQgfHwgaXRlbSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIC8vIGNoZWNrIHRoZSBIVE1MRWxlbWVudCBpdHNlbGYgKGltcG9ydGFudCBmb3Igd2hlbiB0aGUgZG9jay9jb250YWluZXIgaXMgdmlzaWJsZSBidXQgdGhlIHRhYiBpcyBub3Qgc2VsZWN0ZWQpXG4gIC8vIHRyeSBnZXR0aW5nIHRoZSBlbGVtZW50XG4gIGNvbnN0IGVsZW1lbnQgPSBnZXRJdGVtRWxlbWVudChpdGVtKVxuICBpZiAoZWxlbWVudCAhPT0gdW5kZWZpbmVkICYmICFpc0VsZW1lbnRWaXNpYmxlKGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gICAgLy8gaWYgaXQgd2UgY2FuJ3QgZGV0ZWN0IHRoZSBpbnZpc2libGl0eSB1c2luZyBIVE1MIHdlIG5lZWQgdG8gY29uc2lkZXIgQXRvbSdzIGNvbnRleHQgc28gd2UgY29udGludWVcbiAgfVxuICAvLyBldGNoIGNvbXBvbmVudFxuICAvLyBpZiAoaXRlbT8uY29tcG9uZW50Py52aXNpYmxlID09PSBmYWxzZSkge1xuICAvLyAgIHJldHVybiBmYWxzZVxuICAvLyB9XG4gIGNvbnN0IHBhbmVDb250YWluZXIgPSBhdG9tLndvcmtzcGFjZS5wYW5lQ29udGFpbmVyRm9ySXRlbShpdGVtKVxuICAvLyBpZiBubyBjb250YWluZXIgaXQgaXMgbm90IHZpc2libGVcbiAgaWYgKHBhbmVDb250YWluZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKHR5cGVvZiAocGFuZUNvbnRhaW5lciBhcyBhbnkpLmlzVmlzaWJsZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gdXNlIERvY2suaXNWaXNpYmxlKClcbiAgICByZXR1cm4gKHBhbmVDb250YWluZXIgYXMgRG9jaykuaXNWaXNpYmxlKClcbiAgfSBlbHNlIHtcbiAgICAvLyBpdCBpcyB2aXNpYmxlICh3aGVuIHBhbmVDb250YWluZXIgaXMgbm90IGEgZG9jayBsaWtlIFRleHRFZGl0b3IpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG4vKiogQSBmdW5jdGlvbiB0byBkZXRlY3QgaWYgYW4gSFRNTEVsZW1lbnQgaXMgdmlzaWJsZS4gSXQgZG9lc24ndCBjb25zaWRlciB0aGUgQXRvbSBjb250ZXh0LlxuICogVG8gZGV0ZWN0IGlmIGFuIGl0ZW0gaXMgdmlzaWJsZSBpbiBBdG9tIHVzZSB7aXNJdGVtVmlzaWJsZX0gaW5zdGVhZFxuICogVGhpcyBpcyB1c2VmdWwgdG8gc2tpcCBjb2RlIGV4Y2VjdXRpb24gb3IgdXBkYXRpbmcgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgdmlzaWJsZS5cbiAqIEBwYXJhbSBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VsZW1lbnRWaXNpYmxlKGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XG4gIGlmIChcbiAgICBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiZcbiAgICAoZWxlbWVudC5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtZW50LmhpZGRlbiB8fCBlbGVtZW50Lm9mZnNldEhlaWdodCA9PT0gMClcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIEhUTUxFbGVtZW50IG9mIGFuIGl0ZW0gdXNpbmcgYC5nZXRFbGVtZW50KClgIG9yIGAuZWxlbWVudGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEl0ZW1FbGVtZW50KGl0ZW06IG9iamVjdCB8IHVuZGVmaW5lZCB8IG51bGwpIHtcbiAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCB8fCBpdGVtID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIHJldHVybiB0eXBlb2YgKGl0ZW0gYXMgYW55KS5nZXRFbGVtZW50ID09PSBcImZ1bmN0aW9uXCJcbiAgICA/IChpdGVtIGFzIHsgZ2V0RWxlbWVudDogKCkgPT4gSFRNTEVsZW1lbnQgfSkuZ2V0RWxlbWVudCgpXG4gICAgOiAoaXRlbSBhcyB7IGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkIH0pLmVsZW1lbnRcbn1cbiJdfQ==