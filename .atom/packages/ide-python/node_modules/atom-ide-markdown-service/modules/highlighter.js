import { TextBuffer } from "atom";
import { eventLoopYielder, maxTimeError } from "./utils/event-loop-yielder";
export async function highlightTreeSitter(sourceCode, scopeName) {
    const yielder = eventLoopYielder(100, 5000);
    const buf = new TextBuffer();
    try {
        const grammar = atom.grammars.grammarForId(scopeName);
        const lm = atom.grammars.languageModeForGrammarAndBuffer(grammar, buf);
        buf.setLanguageMode(lm);
        buf.setText(sourceCode);
        const end = buf.getEndPosition();
        if (lm.startTokenizing)
            lm.startTokenizing();
        await tokenized(lm);
        const iter = lm.buildHighlightIterator();
        if (iter.getOpenScopeIds && iter.getCloseScopeIds) {
            let pos = { row: 0, column: 0 };
            iter.seek(pos);
            const res = [];
            while (pos.row < end.row || (pos.row === end.row && pos.column <= end.column)) {
                res.push(...iter.getCloseScopeIds().map(() => "</span>"), ...iter.getOpenScopeIds().map((x) => `<span class="${lm.classNameForScopeId(x)}">`));
                iter.moveToSuccessor();
                const nextPos = iter.getPosition();
                res.push(escapeHTML(buf.getTextInRange([pos, nextPos])));
                if (!(await yielder())) {
                    console.error(maxTimeError("Atom-IDE-Markdown-Service: Highlighter", 5));
                    break;
                }
                pos = nextPos;
            }
            return res.join("");
        }
        else {
            return sourceCode;
        }
    }
    finally {
        buf.destroy();
    }
}
async function tokenized(lm) {
    return new Promise((resolve) => {
        if (lm.fullyTokenized || lm.tree) {
            resolve(undefined);
        }
        else if (lm.onDidTokenize) {
            const disp = lm.onDidTokenize(() => {
                disp.dispose();
                resolve(undefined);
            });
        }
        else {
            resolve(undefined);
        }
    });
}
function escapeHTML(str) {
    return str
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaGlnaGxpZ2h0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxNQUFNLENBQUE7QUFDL0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBeUIzRSxNQUFNLENBQUMsS0FBSyxVQUFVLG1CQUFtQixDQUFDLFVBQWtCLEVBQUUsU0FBaUI7SUFDN0UsTUFBTSxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzNDLE1BQU0sR0FBRyxHQUFHLElBQUksVUFBVSxFQUFFLENBQUE7SUFDNUIsSUFBSTtRQUNGLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3JELE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsK0JBQStCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1FBQ3RFLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDdkIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN2QixNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsY0FBYyxFQUFFLENBQUE7UUFDaEMsSUFBSSxFQUFFLENBQUMsZUFBZTtZQUFFLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQTtRQUM1QyxNQUFNLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNuQixNQUFNLElBQUksR0FBRyxFQUFFLENBQUMsc0JBQXNCLEVBQUUsQ0FBQTtRQUN4QyxJQUFJLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ2pELElBQUksR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUE7WUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtZQUNkLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQTtZQUNkLE9BQU8sR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUM3RSxHQUFHLENBQUMsSUFBSSxDQUNOLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUMvQyxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUNwRixDQUFBO2dCQUNELElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQTtnQkFDdEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO2dCQUNsQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2dCQUV4RCxJQUFJLENBQUMsQ0FBQyxNQUFNLE9BQU8sRUFBRSxDQUFDLEVBQUU7b0JBQ3RCLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLHdDQUF3QyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7b0JBQ3hFLE1BQUs7aUJBQ047Z0JBQ0QsR0FBRyxHQUFHLE9BQU8sQ0FBQTthQUNkO1lBQ0QsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQ3BCO2FBQU07WUFDTCxPQUFPLFVBQVUsQ0FBQTtTQUNsQjtLQUNGO1lBQVM7UUFDUixHQUFHLENBQUMsT0FBTyxFQUFFLENBQUE7S0FDZDtBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsU0FBUyxDQUFDLEVBQWdCO0lBQ3ZDLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUM3QixJQUFJLEVBQUUsQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLElBQUksRUFBRTtZQUNoQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7U0FDbkI7YUFBTSxJQUFJLEVBQUUsQ0FBQyxhQUFhLEVBQUU7WUFDM0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtnQkFDZCxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUE7WUFDcEIsQ0FBQyxDQUFDLENBQUE7U0FDSDthQUFNO1lBQ0wsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1NBQ25CO0lBQ0gsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBRUQsU0FBUyxVQUFVLENBQUMsR0FBVztJQUM3QixPQUFPLEdBQUc7U0FDUCxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQztTQUN0QixPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztTQUNyQixPQUFPLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQztTQUNyQixPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQztTQUN2QixPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXh0QnVmZmVyLCBMYW5ndWFnZU1vZGUgfSBmcm9tIFwiYXRvbVwiXHJcbmltcG9ydCB7IGV2ZW50TG9vcFlpZWxkZXIsIG1heFRpbWVFcnJvciB9IGZyb20gXCIuL3V0aWxzL2V2ZW50LWxvb3AteWllbGRlclwiXHJcblxyXG5kZWNsYXJlIG1vZHVsZSBcImF0b21cIiB7XHJcbiAgaW50ZXJmYWNlIEdyYW1tYXJSZWdpc3RyeSB7XHJcbiAgICBncmFtbWFyRm9ySWQoaWQ6IHN0cmluZyk6IEdyYW1tYXJcclxuICAgIGxhbmd1YWdlTW9kZUZvckdyYW1tYXJBbmRCdWZmZXIoZzogR3JhbW1hciwgYjogVGV4dEJ1ZmZlcik6IExhbmd1YWdlTW9kZVxyXG4gIH1cclxuICBpbnRlcmZhY2UgTGFuZ3VhZ2VNb2RlIHtcclxuICAgIHJlYWRvbmx5IGZ1bGx5VG9rZW5pemVkPzogYm9vbGVhblxyXG4gICAgcmVhZG9ubHkgdHJlZT86IGJvb2xlYW5cclxuICAgIG9uRGlkVG9rZW5pemUoY2I6ICgpID0+IHZvaWQpOiBEaXNwb3NhYmxlXHJcbiAgICBidWlsZEhpZ2hsaWdodEl0ZXJhdG9yKCk6IEhpZ2hsaWdodEl0ZXJhdG9yXHJcbiAgICBjbGFzc05hbWVGb3JTY29wZUlkKGlkOiBTY29wZUlkKTogc3RyaW5nXHJcbiAgICBzdGFydFRva2VuaXppbmc/KCk6IHZvaWRcclxuICB9XHJcbiAgaW50ZXJmYWNlIEhpZ2hsaWdodEl0ZXJhdG9yIHtcclxuICAgIHNlZWsocG9zOiB7IHJvdzogbnVtYmVyOyBjb2x1bW46IG51bWJlciB9KTogdm9pZFxyXG4gICAgZ2V0UG9zaXRpb24oKTogeyByb3c6IG51bWJlcjsgY29sdW1uOiBudW1iZXIgfVxyXG4gICAgZ2V0T3BlblNjb3BlSWRzPygpOiBTY29wZUlkW11cclxuICAgIGdldENsb3NlU2NvcGVJZHM/KCk6IFNjb3BlSWRbXVxyXG4gICAgbW92ZVRvU3VjY2Vzc29yKCk6IHZvaWRcclxuICB9XHJcbiAgaW50ZXJmYWNlIFNjb3BlSWQge31cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGhpZ2hsaWdodFRyZWVTaXR0ZXIoc291cmNlQ29kZTogc3RyaW5nLCBzY29wZU5hbWU6IHN0cmluZykge1xyXG4gIGNvbnN0IHlpZWxkZXIgPSBldmVudExvb3BZaWVsZGVyKDEwMCwgNTAwMClcclxuICBjb25zdCBidWYgPSBuZXcgVGV4dEJ1ZmZlcigpXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGdyYW1tYXIgPSBhdG9tLmdyYW1tYXJzLmdyYW1tYXJGb3JJZChzY29wZU5hbWUpXHJcbiAgICBjb25zdCBsbSA9IGF0b20uZ3JhbW1hcnMubGFuZ3VhZ2VNb2RlRm9yR3JhbW1hckFuZEJ1ZmZlcihncmFtbWFyLCBidWYpXHJcbiAgICBidWYuc2V0TGFuZ3VhZ2VNb2RlKGxtKVxyXG4gICAgYnVmLnNldFRleHQoc291cmNlQ29kZSlcclxuICAgIGNvbnN0IGVuZCA9IGJ1Zi5nZXRFbmRQb3NpdGlvbigpXHJcbiAgICBpZiAobG0uc3RhcnRUb2tlbml6aW5nKSBsbS5zdGFydFRva2VuaXppbmcoKVxyXG4gICAgYXdhaXQgdG9rZW5pemVkKGxtKVxyXG4gICAgY29uc3QgaXRlciA9IGxtLmJ1aWxkSGlnaGxpZ2h0SXRlcmF0b3IoKVxyXG4gICAgaWYgKGl0ZXIuZ2V0T3BlblNjb3BlSWRzICYmIGl0ZXIuZ2V0Q2xvc2VTY29wZUlkcykge1xyXG4gICAgICBsZXQgcG9zID0geyByb3c6IDAsIGNvbHVtbjogMCB9XHJcbiAgICAgIGl0ZXIuc2Vlayhwb3MpXHJcbiAgICAgIGNvbnN0IHJlcyA9IFtdXHJcbiAgICAgIHdoaWxlIChwb3Mucm93IDwgZW5kLnJvdyB8fCAocG9zLnJvdyA9PT0gZW5kLnJvdyAmJiBwb3MuY29sdW1uIDw9IGVuZC5jb2x1bW4pKSB7XHJcbiAgICAgICAgcmVzLnB1c2goXHJcbiAgICAgICAgICAuLi5pdGVyLmdldENsb3NlU2NvcGVJZHMoKS5tYXAoKCkgPT4gXCI8L3NwYW4+XCIpLFxyXG4gICAgICAgICAgLi4uaXRlci5nZXRPcGVuU2NvcGVJZHMoKS5tYXAoKHgpID0+IGA8c3BhbiBjbGFzcz1cIiR7bG0uY2xhc3NOYW1lRm9yU2NvcGVJZCh4KX1cIj5gKVxyXG4gICAgICAgIClcclxuICAgICAgICBpdGVyLm1vdmVUb1N1Y2Nlc3NvcigpXHJcbiAgICAgICAgY29uc3QgbmV4dFBvcyA9IGl0ZXIuZ2V0UG9zaXRpb24oKVxyXG4gICAgICAgIHJlcy5wdXNoKGVzY2FwZUhUTUwoYnVmLmdldFRleHRJblJhbmdlKFtwb3MsIG5leHRQb3NdKSkpXHJcblxyXG4gICAgICAgIGlmICghKGF3YWl0IHlpZWxkZXIoKSkpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWF4VGltZUVycm9yKFwiQXRvbS1JREUtTWFya2Rvd24tU2VydmljZTogSGlnaGxpZ2h0ZXJcIiwgNSkpXHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgICBwb3MgPSBuZXh0UG9zXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlcy5qb2luKFwiXCIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gc291cmNlQ29kZVxyXG4gICAgfVxyXG4gIH0gZmluYWxseSB7XHJcbiAgICBidWYuZGVzdHJveSgpXHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiB0b2tlbml6ZWQobG06IExhbmd1YWdlTW9kZSkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgaWYgKGxtLmZ1bGx5VG9rZW5pemVkIHx8IGxtLnRyZWUpIHtcclxuICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpXHJcbiAgICB9IGVsc2UgaWYgKGxtLm9uRGlkVG9rZW5pemUpIHtcclxuICAgICAgY29uc3QgZGlzcCA9IGxtLm9uRGlkVG9rZW5pemUoKCkgPT4ge1xyXG4gICAgICAgIGRpc3AuZGlzcG9zZSgpXHJcbiAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpXHJcbiAgICAgIH0pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXNvbHZlKHVuZGVmaW5lZCkgLy8gbnVsbCBsYW5ndWFnZSBtb2RlXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gZXNjYXBlSFRNTChzdHI6IHN0cmluZykge1xyXG4gIHJldHVybiBzdHJcclxuICAgIC5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIilcclxuICAgIC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKVxyXG4gICAgLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpXHJcbiAgICAucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIilcclxuICAgIC5yZXBsYWNlKC8nL2csIFwiJiMwMzk7XCIpXHJcbn1cclxuIl19