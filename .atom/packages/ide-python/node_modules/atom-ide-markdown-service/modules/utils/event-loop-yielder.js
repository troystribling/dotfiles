export function eventLoopYielder(delayMs, maxTimeMs) {
    const started = performance.now();
    let lastYield = started;
    return async function () {
        const now = performance.now();
        if (now - lastYield > delayMs) {
            await new Promise(setImmediate);
            lastYield = now;
        }
        return now - started <= maxTimeMs;
    };
}
export function maxTimeError(name, timeS) {
    const err = new Error("Max time reached");
    atom.notifications.addError(`${name} took more than ${timeS} seconds to complete`, {
        dismissable: true,
        description: `${name} took too long to complete and was terminated.`,
        stack: err.stack,
    });
    return err;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnQtbG9vcC15aWVsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2V2ZW50LWxvb3AteWllbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsT0FBZSxFQUFFLFNBQWlCO0lBQ2pFLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtJQUNqQyxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUE7SUFDdkIsT0FBTyxLQUFLO1FBQ1YsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO1FBQzdCLElBQUksR0FBRyxHQUFHLFNBQVMsR0FBRyxPQUFPLEVBQUU7WUFDN0IsTUFBTSxJQUFJLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUMvQixTQUFTLEdBQUcsR0FBRyxDQUFBO1NBQ2hCO1FBQ0QsT0FBTyxHQUFHLEdBQUcsT0FBTyxJQUFJLFNBQVMsQ0FBQTtJQUNuQyxDQUFDLENBQUE7QUFDSCxDQUFDO0FBR0QsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFZLEVBQUUsS0FBYTtJQUN0RCxNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxtQkFBbUIsS0FBSyxzQkFBc0IsRUFBRTtRQUNqRixXQUFXLEVBQUUsSUFBSTtRQUNqQixXQUFXLEVBQUUsR0FBRyxJQUFJLGdEQUFnRDtRQUNwRSxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7S0FDakIsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxHQUFHLENBQUE7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEEgaGVscGVyIHRvIGFsbG93IHRoZSBKYXZhU2NyaXB0IGV2ZW50IGxvb3AgY29udGludWUgZm9yIGEgZ2l2ZW4gaW50ZXJ2YWwgYmV0d2VlbiBlYWNoXHJcbiAqIGl0ZXJhdGlvbiBvZiBhIENQVSBpbnRlbnNpdmUgbG9vcC4gSWYgdGhlIHRpbWUgc3BlbnQgaW4gdGhlIGxvb3AgcmVhY2hlcyB0aGUgZ2l2ZW5cclxuICogbWF4VGltZSwgdGhlIG9wZXJhdGlvbiBpcyBraWxsZWQuXHJcbiAqXHJcbiAqIEByZXR1cm5zIEFuIGFzeW5jIGZ1bmN0aW9uIHRvIGNhbGwgaW5zaWRlIHlvdXIgaGVhdnkgbG9vcC4gSXQgd2lsbCByZXR1cm4gYGZhbHNlYCBpZlxyXG4gKiAgICAgdGhlIG9wZXJhdGlvbiBoYXMgZXhjZWVkZWQgdGhlIGdpdmVuIG1heCB0aW1lIChgdHJ1ZWAgb3RoZXJ3aXNlKS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBldmVudExvb3BZaWVsZGVyKGRlbGF5TXM6IG51bWJlciwgbWF4VGltZU1zOiBudW1iZXIpIHtcclxuICBjb25zdCBzdGFydGVkID0gcGVyZm9ybWFuY2Uubm93KClcclxuICBsZXQgbGFzdFlpZWxkID0gc3RhcnRlZFxyXG4gIHJldHVybiBhc3luYyBmdW5jdGlvbiAoKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKVxyXG4gICAgaWYgKG5vdyAtIGxhc3RZaWVsZCA+IGRlbGF5TXMpIHtcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2Uoc2V0SW1tZWRpYXRlKVxyXG4gICAgICBsYXN0WWllbGQgPSBub3dcclxuICAgIH1cclxuICAgIHJldHVybiBub3cgLSBzdGFydGVkIDw9IG1heFRpbWVNc1xyXG4gIH1cclxufVxyXG5cclxuLyoqIFRocm93cyBtYXhpbXVtIHRpbWUgcmVhY2hlZCBlcnJvciAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWF4VGltZUVycm9yKG5hbWU6IHN0cmluZywgdGltZVM6IG51bWJlcikge1xyXG4gIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcIk1heCB0aW1lIHJlYWNoZWRcIilcclxuICBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IoYCR7bmFtZX0gdG9vayBtb3JlIHRoYW4gJHt0aW1lU30gc2Vjb25kcyB0byBjb21wbGV0ZWAsIHtcclxuICAgIGRpc21pc3NhYmxlOiB0cnVlLFxyXG4gICAgZGVzY3JpcHRpb246IGAke25hbWV9IHRvb2sgdG9vIGxvbmcgdG8gY29tcGxldGUgYW5kIHdhcyB0ZXJtaW5hdGVkLmAsXHJcbiAgICBzdGFjazogZXJyLnN0YWNrLFxyXG4gIH0pXHJcbiAgcmV0dXJuIGVyclxyXG59XHJcbiJdfQ==