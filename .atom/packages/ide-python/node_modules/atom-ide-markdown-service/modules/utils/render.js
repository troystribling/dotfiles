import { TextEditor } from "atom";
import { scopeForFenceName, fenceNameForScope } from "./utils";
export async function highlightCodeFragments(domFragment, grammar) {
    const defaultLanguage = fenceNameForScope(grammar || "text.plain");
    const fontFamily = atom.config.get("editor.fontFamily");
    const fontSize = atom.config.get("editor.fontSize");
    if (fontFamily !== null) {
        domFragment.querySelectorAll("code").forEach((codeElement) => {
            codeElement.style.fontFamily = fontFamily;
            codeElement.style.fontSize = `${fontSize}`;
        });
    }
    const elements = [].slice.call(domFragment.querySelectorAll("pre"));
    const promises = elements.map(async (preElement) => {
        var _a, _b, _c, _d, _e, _f;
        const codeBlock = (_a = preElement.firstElementChild) !== null && _a !== void 0 ? _a : preElement;
        const fenceName = (_c = (_b = codeBlock
            .getAttribute("class")) === null || _b === void 0 ? void 0 : _b.replace(/^lang-/, "").replace(/^language-/, "")) !== null && _c !== void 0 ? _c : defaultLanguage;
        preElement.classList.add("editor-colors", `lang-${fenceName}`);
        const editor = new TextEditor({
            readonly: true,
            keyboardInputEnabled: false,
            softWrapped: true,
            softWrapAtPreferredLineLength: true,
            preferredLineLength: 80,
        });
        const editorElement = editor.getElement();
        editorElement.setUpdatedSynchronously(true);
        preElement.innerHTML = "";
        (_d = preElement.parentNode) === null || _d === void 0 ? void 0 : _d.insertBefore(editorElement, preElement);
        editor.setText((_f = (_e = codeBlock.textContent) === null || _e === void 0 ? void 0 : _e.replace(/\r?\n$/, "")) !== null && _f !== void 0 ? _f : "");
        atom.grammars.assignLanguageMode(editor.getBuffer(), scopeForFenceName(fenceName));
        editor.setVisible(true);
        return await tokenizeEditor(editorElement, preElement);
    });
    return await Promise.all(promises);
}
export function tokenizeEditor(editorElement, preElement) {
    const p = new Promise((resolve, reject) => {
        const done = () => {
            editorElement.querySelectorAll(".line:not(.dummy)").forEach((line) => {
                var _a, _b;
                const line2 = document.createElement("div");
                line2.className = "line";
                line2.innerHTML = (_b = (_a = line.firstElementChild) === null || _a === void 0 ? void 0 : _a.innerHTML) !== null && _b !== void 0 ? _b : "";
                preElement.appendChild(line2);
            });
            editorElement.remove();
            resolve();
        };
        const editor = editorElement.getModel();
        const languageMode = editor.getBuffer().getLanguageMode();
        if ("fullyTokenized" in languageMode || "tree" in languageMode) {
            editor.component
                .getNextUpdatePromise()
                .then(() => {
                done();
            })
                .catch(reject);
        }
        else {
            editor.onDidTokenize(() => {
                done();
            });
        }
    });
    return p;
}
//# sourceMappingURL=data:application/json;base64,