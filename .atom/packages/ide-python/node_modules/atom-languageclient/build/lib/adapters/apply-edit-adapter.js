Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Public: Adapts workspace/applyEdit commands to editors.
let ApplyEditAdapter = class ApplyEditAdapter {
  // Public: Attach to a {LanguageClientConnection} to receive edit events.
  static attach(connection) {
    connection.onApplyEdit(m => ApplyEditAdapter.onApplyEdit(m));
  }

  static onApplyEdit(params) {
    return _asyncToGenerator(function* () {
      // TODO(protocol v3.0): Handle versioned documentChanges
      const { changes } = params.edit;
      const uris = Object.keys(changes);
      const paths = uris.map(_convert2.default.uriToPath);
      const editors = yield Promise.all(paths.map(function (path) {
        return atom.workspace.open(path, {
          searchAllPanes: true,
          // Open new editors in the background.
          activatePane: false,
          activateItem: false
        });
      }));

      const checkpoints = [];
      try {
        for (let i = 0; i < editors.length; i++) {
          const editor = editors[i];
          const uri = uris[i];
          // Get an existing editor for the file, or open a new one if it doesn't exist.
          const edits = _convert2.default.convertLsTextEdits(changes[uri]);
          // Sort edits in reverse order to prevent edit conflicts.
          edits.sort(function (edit1, edit2) {
            return -edit1.oldRange.compare(edit2.oldRange);
          });
          const buffer = editor.getBuffer();
          const checkpoint = buffer.createCheckpoint();
          checkpoints.push({ buffer, checkpoint });
          let prevEdit = null;
          for (const edit of edits) {
            ApplyEditAdapter.validateEdit(buffer, edit, prevEdit);
            buffer.setTextInRange(edit.oldRange, edit.newText);
            prevEdit = edit;
          }
          buffer.groupChangesSinceCheckpoint(checkpoint);
        }
        return { applied: true };
      } catch (e) {
        atom.notifications.addError('workspace/applyEdits failed', {
          description: 'Failed to apply edits.',
          detail: e.message
        });
        checkpoints.forEach(function ({ buffer, checkpoint }) {
          buffer.revertToCheckpoint(checkpoint);
        });
        return { applied: false };
      }
    })();
  }

  // Private: Do some basic sanity checking on the edit ranges.
  static validateEdit(buffer, edit, prevEdit) {
    const path = buffer.getPath() || '';
    if (prevEdit != null && edit.oldRange.end.compare(prevEdit.oldRange.start) > 0) {
      throw Error(`Found overlapping edit ranges in ${path}`);
    }
    const startRow = edit.oldRange.start.row;
    const startCol = edit.oldRange.start.column;
    const lineLength = buffer.lineLengthForRow(startRow);
    if (lineLength == null || startCol > lineLength) {
      throw Error(`Out of range edit on ${path}:${startRow + 1}:${startCol + 1}`);
    }
  }
};
exports.default = ApplyEditAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,