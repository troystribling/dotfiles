"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = require("../convert");
const languageclient_1 = require("../languageclient");
const fs_1 = require("fs");
const rimraf = require("rimraf");
/** Public: Adapts workspace/applyEdit commands to editors. */
class ApplyEditAdapter {
    /** Public: Attach to a {LanguageClientConnection} to receive edit events. */
    static attach(connection) {
        connection.onApplyEdit((m) => ApplyEditAdapter.onApplyEdit(m));
    }
    /** Tries to apply edits and reverts if anything goes wrong. Returns the checkpoint, so the caller can revert changes if needed. */
    static applyEdits(buffer, edits) {
        const checkpoint = buffer.createCheckpoint();
        try {
            // Sort edits in reverse order to prevent edit conflicts.
            edits.sort((edit1, edit2) => -edit1.oldRange.compare(edit2.oldRange));
            edits.reduce((previous, current) => {
                validateEdit(buffer, current, previous);
                buffer.setTextInRange(current.oldRange, current.newText);
                return current;
            }, null);
            buffer.groupChangesSinceCheckpoint(checkpoint);
            return checkpoint;
        }
        catch (err) {
            buffer.revertToCheckpoint(checkpoint);
            throw err;
        }
    }
    static onApplyEdit(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return ApplyEditAdapter.apply(params.edit);
        });
    }
    static apply(workspaceEdit) {
        return __awaiter(this, void 0, void 0, function* () {
            normalize(workspaceEdit);
            // Keep checkpoints from all successful buffer edits
            const checkpoints = [];
            const promises = (workspaceEdit.documentChanges || []).map((edit) => __awaiter(this, void 0, void 0, function* () {
                if (!languageclient_1.TextDocumentEdit.is(edit)) {
                    return ApplyEditAdapter.handleResourceOperation(edit).catch((err) => {
                        throw Error(`Error during ${edit.kind} resource operation: ${err.message}`);
                    });
                }
                const path = convert_1.default.uriToPath(edit.textDocument.uri);
                const editor = (yield atom.workspace.open(path, {
                    searchAllPanes: true,
                    // Open new editors in the background.
                    activatePane: false,
                    activateItem: false,
                }));
                const buffer = editor.getBuffer();
                const edits = convert_1.default.convertLsTextEdits(edit.edits);
                const checkpoint = ApplyEditAdapter.applyEdits(buffer, edits);
                checkpoints.push({ buffer, checkpoint });
            }));
            // Apply all edits or fail and revert everything
            const applied = yield Promise.all(promises)
                .then(() => true)
                .catch((err) => {
                atom.notifications.addError("workspace/applyEdits failed", {
                    description: "Failed to apply edits.",
                    detail: err.message,
                });
                checkpoints.forEach(({ buffer, checkpoint }) => {
                    buffer.revertToCheckpoint(checkpoint);
                });
                return false;
            });
            return { applied };
        });
    }
    static handleResourceOperation(edit) {
        var _a, _b, _c, _d, _e, _f, _g;
        return __awaiter(this, void 0, void 0, function* () {
            if (languageclient_1.DeleteFile.is(edit)) {
                const path = convert_1.default.uriToPath(edit.uri);
                const stats = yield fs_1.promises.lstat(path).catch(() => false);
                const ignoreIfNotExists = (_a = edit.options) === null || _a === void 0 ? void 0 : _a.ignoreIfNotExists;
                if (!stats) {
                    if (ignoreIfNotExists !== false) {
                        return;
                    }
                    throw Error(`Target doesn't exist.`);
                }
                if (stats.isDirectory()) {
                    if ((_b = edit.options) === null || _b === void 0 ? void 0 : _b.recursive) {
                        return new Promise((resolve, reject) => {
                            rimraf(path, { glob: false }, (err) => {
                                if (err) {
                                    reject(err);
                                }
                                resolve();
                            });
                        });
                    }
                    return fs_1.promises.rmdir(path, { recursive: (_c = edit.options) === null || _c === void 0 ? void 0 : _c.recursive });
                }
                return fs_1.promises.unlink(path);
            }
            if (languageclient_1.RenameFile.is(edit)) {
                const oldPath = convert_1.default.uriToPath(edit.oldUri);
                const newPath = convert_1.default.uriToPath(edit.newUri);
                const exists = yield fs_1.promises
                    .access(newPath)
                    .then(() => true)
                    .catch(() => false);
                const ignoreIfExists = (_d = edit.options) === null || _d === void 0 ? void 0 : _d.ignoreIfExists;
                const overwrite = (_e = edit.options) === null || _e === void 0 ? void 0 : _e.overwrite;
                if (exists && ignoreIfExists && !overwrite) {
                    return;
                }
                if (exists && !ignoreIfExists && !overwrite) {
                    throw Error(`Target exists.`);
                }
                return fs_1.promises.rename(oldPath, newPath);
            }
            if (languageclient_1.CreateFile.is(edit)) {
                const path = convert_1.default.uriToPath(edit.uri);
                const exists = yield fs_1.promises
                    .access(path)
                    .then(() => true)
                    .catch(() => false);
                const ignoreIfExists = (_f = edit.options) === null || _f === void 0 ? void 0 : _f.ignoreIfExists;
                const overwrite = (_g = edit.options) === null || _g === void 0 ? void 0 : _g.overwrite;
                if (exists && ignoreIfExists && !overwrite) {
                    return;
                }
                return fs_1.promises.writeFile(path, "");
            }
        });
    }
}
exports.default = ApplyEditAdapter;
function normalize(workspaceEdit) {
    const documentChanges = workspaceEdit.documentChanges || [];
    if (!("documentChanges" in workspaceEdit) && "changes" in workspaceEdit) {
        Object.keys(workspaceEdit.changes || []).forEach((uri) => {
            documentChanges.push({
                textDocument: {
                    version: null,
                    uri,
                },
                edits: workspaceEdit.changes[uri],
            });
        });
    }
    workspaceEdit.documentChanges = documentChanges;
}
function validateEdit(buffer, edit, prevEdit) {
    const path = buffer.getPath() || "";
    if (prevEdit && edit.oldRange.end.compare(prevEdit.oldRange.start) > 0) {
        throw Error(`Found overlapping edit ranges in ${path}`);
    }
    const startRow = edit.oldRange.start.row;
    const startCol = edit.oldRange.start.column;
    const lineLength = buffer.lineLengthForRow(startRow);
    if (lineLength == null || startCol > lineLength) {
        throw Error(`Out of range edit on ${path}:${startRow + 1}:${startCol + 1}`);
    }
}
//# sourceMappingURL=data:application/json;base64,