Object.defineProperty(exports, "__esModule", {
  value: true
});

var _languageclient = require('../languageclient');

var _atom = require('atom');

var _vscodeJsonrpc = require('vscode-jsonrpc');

require('../server-manager');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

var _fuzzaldrinPlus = require('fuzzaldrin-plus');

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Public: Adapts the language server protocol "textDocument/completion" to the Atom
// AutoComplete+ package.
class AutocompleteAdapter {
  constructor() {
    this._suggestionCache = new WeakMap();
    this._cancellationTokens = new WeakMap();
  }

  static canAdapt(serverCapabilities) {
    return serverCapabilities.completionProvider != null;
  }

  static canResolve(serverCapabilities) {
    return serverCapabilities.completionProvider != null && serverCapabilities.completionProvider.resolveProvider === true;
  }

  // Public: Obtain suggestion list for AutoComplete+ by querying the language server using
  // the `textDocument/completion` request.
  //
  // * `server` An {ActiveServer} pointing to the language server to query.
  // * `request` The {atom$AutocompleteRequest} to satisfy.
  // * `onDidConvertCompletionItem` An optional function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
  //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
  //
  // Returns a {Promise} of an {Array} of {atom$AutocompleteSuggestion}s containing the
  // AutoComplete+ suggestions to display.
  async getSuggestions(server, request, onDidConvertCompletionItem) {
    const triggerChars = server.capabilities.completionProvider != null ? server.capabilities.completionProvider.triggerCharacters || [] : [];
    const triggerPoint = AutocompleteAdapter.getTriggerPoint(request, triggerChars);
    const prefixWithTrigger = AutocompleteAdapter.getPrefixWithTrigger(request, triggerPoint);

    const cache = this._suggestionCache.get(server);

    // We have cached suggestions and should use them
    if (cache && !cache.isIncomplete && cache.triggerPoint.isEqual(triggerPoint)) {
      const suggestions = Array.from(cache.suggestionMap.keys());
      AutocompleteAdapter.setReplacementPrefixOnSuggestions(suggestions, request.prefix);
      return prefixWithTrigger.length === 1 ? suggestions : (0, _fuzzaldrinPlus.filter)(suggestions, request.prefix, { key: 'text' });
    }

    // We either don't have suggestions or they are incomplete so request from the language server
    const completions = await _utils2.default.doWithCancellationToken(server.connection, this._cancellationTokens, cancellationToken => server.connection.completion(AutocompleteAdapter.createCompletionParams(request, prefixWithTrigger[0]), cancellationToken));
    const isIncomplete = !Array.isArray(completions) && completions.isIncomplete;
    const suggestionMap = this.completionItemsToSuggestions(completions, request, onDidConvertCompletionItem);
    this._suggestionCache.set(server, { isIncomplete, triggerPoint, suggestionMap });
    return Array.from(suggestionMap.keys());
  }

  // Public: Obtain a complete version of a suggestion with additional information
  // the language server can provide by way of the `completionItem/resolve` request.
  //
  // * `server` An {ActiveServer} pointing to the language server to query.
  // * `suggestion` An {atom$AutocompleteSuggestion} suggestion that should be resolved.
  // * `request` An {Object} with the AutoComplete+ request to satisfy.
  // * `onDidConvertCompletionItem` An optional function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
  //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
  //
  // Returns a {Promise} of an {atom$AutocompleteSuggestion} with the resolved AutoComplete+ suggestion.
  async completeSuggestion(server, suggestion, request, onDidConvertCompletionItem) {
    const cache = this._suggestionCache.get(server);
    if (cache) {
      const originalCompletionItem = cache.suggestionMap.get(suggestion);
      if (originalCompletionItem != null && originalCompletionItem[1] === false) {
        const resolvedCompletionItem = await server.connection.completionItemResolve(originalCompletionItem[0]);
        if (resolvedCompletionItem != null) {
          AutocompleteAdapter.completionItemToSuggestion(resolvedCompletionItem, suggestion, request, onDidConvertCompletionItem);
          originalCompletionItem[1] = true;
        }
      }
    }

    return suggestion;
  }

  // Public: Set the replacementPrefix property on all given suggestions to the
  // prefix specified.
  //
  // * `suggestions` An {Array} of {atom$AutocompleteSuggestion}s to set the replacementPrefix on.
  // * `prefix` The {string} containing the prefix that should be set as replacementPrefix on all suggestions.
  static setReplacementPrefixOnSuggestions(suggestions, prefix) {
    for (const suggestion of suggestions) {
      suggestion.replacementPrefix = prefix;
    }
  }

  // Public: Get the point where the trigger character occurred.
  //
  // * `request` An {Array} of {atom$AutocompleteSuggestion}s to set the replacementPrefix on.
  // * `triggerChars` The {Array} of {string}s that can be trigger characters.
  //
  // Returns the {atom$Point} where the trigger occurred.
  static getTriggerPoint(request, triggerChars) {
    if (triggerChars.includes(request.prefix)) {
      return _atom.Point.fromObject(request.bufferPosition, true);
    }

    return new _atom.Point(request.bufferPosition.row, request.bufferPosition.column - request.prefix.length);
  }

  // Public: Create TextDocumentPositionParams to be sent to the language server
  // based on the editor and position from the AutoCompleteRequest.
  //
  // * `request` The {atom$AutocompleteRequest} to obtain the trigger and editor from.
  // * `triggerPoint` The {atom$Point} where the trigger started.
  //
  // Returns a {string} containing the prefix including the trigger character.
  static getPrefixWithTrigger(request, triggerPoint) {
    return request.editor.getBuffer().getTextInRange([[triggerPoint.row, triggerPoint.column - 1], request.bufferPosition]);
  }

  // Public: Create CompletionParams to be sent to the language server
  // based on the editor and position from the Autocomplete request etc.
  //
  // * `request` The {atom$AutocompleteRequest} containing the request details.
  // * `triggerCharacter` The {string} containing the trigger character.
  //
  // Returns an {CompletionParams} with the keys:
  //  * `textDocument` the language server protocol textDocument identification.
  //  * `position` the position within the text document to display completion request for.
  //  * `context` containing the trigger character and kind.
  static createCompletionParams(request, triggerCharacter) {
    return {
      textDocument: _convert2.default.editorToTextDocumentIdentifier(request.editor),
      position: _convert2.default.pointToPosition(request.bufferPosition),
      context: {
        triggerKind: triggerCharacter != null ? _languageclient.CompletionTriggerKind.TriggerCharacter : _languageclient.CompletionTriggerKind.Invoked,
        triggerCharacter: undefined
      }
    };
  }

  // Public: Convert a language server protocol CompletionItem array or CompletionList to
  // an array of ordered AutoComplete+ suggestions.
  //
  // * `completionItems` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
  //           items to be converted.
  // * `request` The {atom$AutocompleteRequest} to satisfy.
  // * `onDidConvertCompletionItem` A function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
  //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
  //
  // Returns a {Map} of AutoComplete+ suggestions ordered by the CompletionItems sortText.
  completionItemsToSuggestions(completionItems, request, onDidConvertCompletionItem) {
    return new Map((Array.isArray(completionItems) ? completionItems : completionItems.items || []).sort((a, b) => (a.sortText || a.label).localeCompare(b.sortText || b.label)).map(s => [AutocompleteAdapter.completionItemToSuggestion(s, {}, request, onDidConvertCompletionItem), [s, false]]));
  }

  // Public: Convert a language server protocol CompletionItem to an AutoComplete+ suggestion.
  //
  // * `item` An {CompletionItem} containing a completion item to be converted.
  // * `suggestion` A {atom$AutocompleteSuggestion} to have the conversion applied to.
  // * `request` The {atom$AutocompleteRequest} to satisfy.
  // * `onDidConvertCompletionItem` A function that takes a {CompletionItem}, an {atom$AutocompleteSuggestion}
  //   and a {atom$AutocompleteRequest} allowing you to adjust converted items.
  //
  // Returns the {atom$AutocompleteSuggestion} passed in as suggestion with the conversion applied.
  static completionItemToSuggestion(item, suggestion, request, onDidConvertCompletionItem) {
    AutocompleteAdapter.applyCompletionItemToSuggestion(item, suggestion);
    AutocompleteAdapter.applyTextEditToSuggestion(item.textEdit, request.editor, suggestion);
    AutocompleteAdapter.applySnippetToSuggestion(item, suggestion);
    if (onDidConvertCompletionItem != null) {
      onDidConvertCompletionItem(item, suggestion, request);
    }

    return suggestion;
  }

  // Public: Convert the primary parts of a language server protocol CompletionItem to an AutoComplete+ suggestion.
  //
  // * `item` An {CompletionItem} containing the completion items to be merged into.
  // * `suggestion` The {atom$AutocompleteSuggestion} to merge the conversion into.
  //
  // Returns an {atom$AutocompleteSuggestion} created from the {CompletionItem}.
  static applyCompletionItemToSuggestion(item, suggestion) {
    suggestion.text = item.insertText || item.label;
    suggestion.displayText = item.label;
    suggestion.type = AutocompleteAdapter.completionKindToSuggestionType(item.kind);
    suggestion.rightLabel = item.detail;
    suggestion.description = item.documentation;
    suggestion.descriptionMarkdown = item.documentation;
  }

  // Public: Applies the textEdit part of a language server protocol CompletionItem to an
  // AutoComplete+ Suggestion via the replacementPrefix and text properties.
  //
  // * `textEdit` A {TextEdit} from a CompletionItem to apply.
  // * `editor` An Atom {TextEditor} used to obtain the necessary text replacement.
  // * `suggestion` An {atom$AutocompleteSuggestion} to set the replacementPrefix and text properties of.
  static applyTextEditToSuggestion(textEdit, editor, suggestion) {
    if (textEdit != null) {
      suggestion.replacementPrefix = editor.getTextInBufferRange(_convert2.default.lsRangeToAtomRange(textEdit.range));
      suggestion.text = textEdit.newText;
    }
  }

  // Public: Adds a snippet to the suggestion if the CompletionItem contains
  // snippet-formatted text
  //
  // * `item` An {CompletionItem} containing the completion items to be merged into.
  // * `suggestion` The {atom$AutocompleteSuggestion} to merge the conversion into.
  //
  static applySnippetToSuggestion(item, suggestion) {
    if (item.insertTextFormat === _languageclient.InsertTextFormat.Snippet) {
      suggestion.snippet = item.textEdit != null ? item.textEdit.newText : item.insertText;
    }
  }

  // Public: Obtain the textual suggestion type required by AutoComplete+ that
  // most closely maps to the numeric completion kind supplies by the language server.
  //
  // * `kind` A {Number} that represents the suggestion kind to be converted.
  //
  // Returns a {String} containing the AutoComplete+ suggestion type equivalent
  // to the given completion kind.
  static completionKindToSuggestionType(kind) {
    switch (kind) {
      case _languageclient.CompletionItemKind.Constant:
        return 'constant';
      case _languageclient.CompletionItemKind.Method:
        return 'method';
      case _languageclient.CompletionItemKind.Function:
      case _languageclient.CompletionItemKind.Constructor:
        return 'function';
      case _languageclient.CompletionItemKind.Field:
      case _languageclient.CompletionItemKind.Property:
        return 'property';
      case _languageclient.CompletionItemKind.Variable:
        return 'variable';
      case _languageclient.CompletionItemKind.Class:
        return 'class';
      case _languageclient.CompletionItemKind.Struct:
      case _languageclient.CompletionItemKind.TypeParameter:
        return 'type';
      case _languageclient.CompletionItemKind.Operator:
        return 'selector';
      case _languageclient.CompletionItemKind.Interface:
        return 'mixin';
      case _languageclient.CompletionItemKind.Module:
        return 'module';
      case _languageclient.CompletionItemKind.Unit:
        return 'builtin';
      case _languageclient.CompletionItemKind.Enum:
      case _languageclient.CompletionItemKind.EnumMember:
        return 'enum';
      case _languageclient.CompletionItemKind.Keyword:
        return 'keyword';
      case _languageclient.CompletionItemKind.Snippet:
        return 'snippet';
      case _languageclient.CompletionItemKind.File:
      case _languageclient.CompletionItemKind.Folder:
        return 'import';
      case _languageclient.CompletionItemKind.Reference:
        return 'require';
      default:
        return 'value';
    }
  }
}
exports.default = AutocompleteAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,