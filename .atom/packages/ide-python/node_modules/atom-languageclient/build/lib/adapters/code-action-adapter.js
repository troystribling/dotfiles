Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

let CodeActionAdapter = class CodeActionAdapter {
  // Returns a {Boolean} indicating this adapter can adapt the server based on the
  // given serverCapabilities.
  static canAdapt(serverCapabilities) {
    return serverCapabilities.codeActionProvider === true;
  }

  // Public: Retrieves code actions for a given editor, range, and context (diagnostics).
  // Throws an error if codeActionProvider is not a registered capability.
  //
  // * `connection` A {LanguageClientConnection} to the language server that provides highlights.
  // * `serverCapabilities` The {ServerCapabilities} of the language server that will be used.
  // * `editor` The Atom {TextEditor} containing the diagnostics.
  // * `range` The Atom {Range} to fetch code actions for.
  // * `diagnostics` An {Array<atomIde$Diagnostic>} to fetch code actions for.
  //                 This is typically a list of diagnostics intersecting `range`.
  //
  // Returns a {Promise} of an {Array} of {atomIde$CodeAction}s to display.
  static getCodeActions(connection, serverCapabilities, linterAdapter, editor, range, diagnostics) {
    return _asyncToGenerator(function* () {
      if (linterAdapter == null) {
        return [];
      }
      (0, _assert2.default)(serverCapabilities.codeActionProvider, 'Must have the textDocument/codeAction capability');
      const commands = yield connection.codeAction({
        textDocument: _convert2.default.editorToTextDocumentIdentifier(editor),
        range: _convert2.default.atomRangeToLSRange(range),
        context: {
          diagnostics: diagnostics.map(function (diagnostic) {
            // Retrieve the stored diagnostic code if it exists.
            // Until the Linter API provides a place to store the code,
            // there's no real way for the code actions API to give it back to us.
            const converted = _convert2.default.atomIdeDiagnosticToLSDiagnostic(diagnostic);
            if (diagnostic.range != null && diagnostic.text != null) {
              const code = linterAdapter.getDiagnosticCode(editor, diagnostic.range, diagnostic.text);
              if (code != null) {
                converted.code = code;
              }
            }
            return converted;
          })
        }
      });
      return commands.map(function (command) {
        return {
          apply() {
            return _asyncToGenerator(function* () {
              yield connection.executeCommand({
                command: command.command,
                arguments: command.arguments
              });
            })();
          },
          getTitle() {
            return Promise.resolve(command.title);
          },
          dispose() {}
        };
      });
    })();
  }
};
exports.default = CodeActionAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9jb2RlLWFjdGlvbi1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIkNvZGVBY3Rpb25BZGFwdGVyIiwiY2FuQWRhcHQiLCJzZXJ2ZXJDYXBhYmlsaXRpZXMiLCJjb2RlQWN0aW9uUHJvdmlkZXIiLCJnZXRDb2RlQWN0aW9ucyIsImNvbm5lY3Rpb24iLCJsaW50ZXJBZGFwdGVyIiwiZWRpdG9yIiwicmFuZ2UiLCJkaWFnbm9zdGljcyIsImNvbW1hbmRzIiwiY29kZUFjdGlvbiIsInRleHREb2N1bWVudCIsImVkaXRvclRvVGV4dERvY3VtZW50SWRlbnRpZmllciIsImF0b21SYW5nZVRvTFNSYW5nZSIsImNvbnRleHQiLCJtYXAiLCJjb252ZXJ0ZWQiLCJhdG9tSWRlRGlhZ25vc3RpY1RvTFNEaWFnbm9zdGljIiwiZGlhZ25vc3RpYyIsInRleHQiLCJjb2RlIiwiZ2V0RGlhZ25vc3RpY0NvZGUiLCJhcHBseSIsImV4ZWN1dGVDb21tYW5kIiwiY29tbWFuZCIsImFyZ3VtZW50cyIsImdldFRpdGxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aXRsZSIsImRpc3Bvc2UiXSwibWFwcGluZ3MiOiI7Ozs7O0FBSUE7Ozs7QUFDQTs7QUFDQTs7Ozs7Ozs7SUFFcUJBLGlCLEdBQU4sTUFBTUEsaUJBQU4sQ0FBd0I7QUFDckM7QUFDQTtBQUNBLFNBQU9DLFFBQVAsQ0FBZ0JDLGtCQUFoQixFQUFpRTtBQUMvRCxXQUFPQSxtQkFBbUJDLGtCQUFuQixLQUEwQyxJQUFqRDtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFhQyxjQUFiLENBQ0VDLFVBREYsRUFFRUgsa0JBRkYsRUFHRUksYUFIRixFQUlFQyxNQUpGLEVBS0VDLEtBTEYsRUFNRUMsV0FORixFQU9zQztBQUFBO0FBQ3BDLFVBQUlILGlCQUFpQixJQUFyQixFQUEyQjtBQUN6QixlQUFPLEVBQVA7QUFDRDtBQUNELDRCQUFVSixtQkFBbUJDLGtCQUE3QixFQUFpRCxrREFBakQ7QUFDQSxZQUFNTyxXQUFXLE1BQU1MLFdBQVdNLFVBQVgsQ0FBc0I7QUFDM0NDLHNCQUFjLGtCQUFRQyw4QkFBUixDQUF1Q04sTUFBdkMsQ0FENkI7QUFFM0NDLGVBQU8sa0JBQVFNLGtCQUFSLENBQTJCTixLQUEzQixDQUZvQztBQUczQ08saUJBQVM7QUFDUE4sdUJBQWFBLFlBQVlPLEdBQVosQ0FBZ0Isc0JBQWM7QUFDekM7QUFDQTtBQUNBO0FBQ0Esa0JBQU1DLFlBQVksa0JBQVFDLCtCQUFSLENBQXdDQyxVQUF4QyxDQUFsQjtBQUNBLGdCQUFJQSxXQUFXWCxLQUFYLElBQW9CLElBQXBCLElBQTRCVyxXQUFXQyxJQUFYLElBQW1CLElBQW5ELEVBQXlEO0FBQ3ZELG9CQUFNQyxPQUFPZixjQUFjZ0IsaUJBQWQsQ0FBZ0NmLE1BQWhDLEVBQXdDWSxXQUFXWCxLQUFuRCxFQUEwRFcsV0FBV0MsSUFBckUsQ0FBYjtBQUNBLGtCQUFJQyxRQUFRLElBQVosRUFBa0I7QUFDaEJKLDBCQUFVSSxJQUFWLEdBQWlCQSxJQUFqQjtBQUNEO0FBQ0Y7QUFDRCxtQkFBT0osU0FBUDtBQUNELFdBWlk7QUFETjtBQUhrQyxPQUF0QixDQUF2QjtBQW1CQSxhQUFPUCxTQUFTTSxHQUFULENBQWE7QUFBQSxlQUFZO0FBQ3hCTyxlQUFOLEdBQWM7QUFBQTtBQUNaLG9CQUFNbEIsV0FBV21CLGNBQVgsQ0FBMEI7QUFDOUJDLHlCQUFTQSxRQUFRQSxPQURhO0FBRTlCQywyQkFBV0QsUUFBUUM7QUFGVyxlQUExQixDQUFOO0FBRFk7QUFLYixXQU42QjtBQU85QkMscUJBQVc7QUFDVCxtQkFBT0MsUUFBUUMsT0FBUixDQUFnQkosUUFBUUssS0FBeEIsQ0FBUDtBQUNELFdBVDZCO0FBVTlCQyxvQkFBVSxDQUFFO0FBVmtCLFNBQVo7QUFBQSxPQUFiLENBQVA7QUF4Qm9DO0FBb0NyQztBQTdEb0MsQztrQkFBbEIvQixpQiIsImZpbGUiOiJjb2RlLWFjdGlvbi1hZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcclxuXHJcbmltcG9ydCB0eXBlIExpbnRlclB1c2hWMkFkYXB0ZXIgZnJvbSAnLi9saW50ZXItcHVzaC12Mi1hZGFwdGVyJztcclxuXHJcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0IHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIHR5cGUgU2VydmVyQ2FwYWJpbGl0aWVzfSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29kZUFjdGlvbkFkYXB0ZXIge1xyXG4gIC8vIFJldHVybnMgYSB7Qm9vbGVhbn0gaW5kaWNhdGluZyB0aGlzIGFkYXB0ZXIgY2FuIGFkYXB0IHRoZSBzZXJ2ZXIgYmFzZWQgb24gdGhlXHJcbiAgLy8gZ2l2ZW4gc2VydmVyQ2FwYWJpbGl0aWVzLlxyXG4gIHN0YXRpYyBjYW5BZGFwdChzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHNlcnZlckNhcGFiaWxpdGllcy5jb2RlQWN0aW9uUHJvdmlkZXIgPT09IHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IFJldHJpZXZlcyBjb2RlIGFjdGlvbnMgZm9yIGEgZ2l2ZW4gZWRpdG9yLCByYW5nZSwgYW5kIGNvbnRleHQgKGRpYWdub3N0aWNzKS5cclxuICAvLyBUaHJvd3MgYW4gZXJyb3IgaWYgY29kZUFjdGlvblByb3ZpZGVyIGlzIG5vdCBhIHJlZ2lzdGVyZWQgY2FwYWJpbGl0eS5cclxuICAvL1xyXG4gIC8vICogYGNvbm5lY3Rpb25gIEEge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbn0gdG8gdGhlIGxhbmd1YWdlIHNlcnZlciB0aGF0IHByb3ZpZGVzIGhpZ2hsaWdodHMuXHJcbiAgLy8gKiBgc2VydmVyQ2FwYWJpbGl0aWVzYCBUaGUge1NlcnZlckNhcGFiaWxpdGllc30gb2YgdGhlIGxhbmd1YWdlIHNlcnZlciB0aGF0IHdpbGwgYmUgdXNlZC5cclxuICAvLyAqIGBlZGl0b3JgIFRoZSBBdG9tIHtUZXh0RWRpdG9yfSBjb250YWluaW5nIHRoZSBkaWFnbm9zdGljcy5cclxuICAvLyAqIGByYW5nZWAgVGhlIEF0b20ge1JhbmdlfSB0byBmZXRjaCBjb2RlIGFjdGlvbnMgZm9yLlxyXG4gIC8vICogYGRpYWdub3N0aWNzYCBBbiB7QXJyYXk8YXRvbUlkZSREaWFnbm9zdGljPn0gdG8gZmV0Y2ggY29kZSBhY3Rpb25zIGZvci5cclxuICAvLyAgICAgICAgICAgICAgICAgVGhpcyBpcyB0eXBpY2FsbHkgYSBsaXN0IG9mIGRpYWdub3N0aWNzIGludGVyc2VjdGluZyBgcmFuZ2VgLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIHtQcm9taXNlfSBvZiBhbiB7QXJyYXl9IG9mIHthdG9tSWRlJENvZGVBY3Rpb259cyB0byBkaXNwbGF5LlxyXG4gIHN0YXRpYyBhc3luYyBnZXRDb2RlQWN0aW9ucyhcclxuICAgIGNvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcclxuICAgIHNlcnZlckNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzLFxyXG4gICAgbGludGVyQWRhcHRlcjogP0xpbnRlclB1c2hWMkFkYXB0ZXIsXHJcbiAgICBlZGl0b3I6IGF0b20kVGV4dEVkaXRvcixcclxuICAgIHJhbmdlOiBhdG9tJFJhbmdlLFxyXG4gICAgZGlhZ25vc3RpY3M6IEFycmF5PGF0b21JZGUkRGlhZ25vc3RpYz4sXHJcbiAgKTogUHJvbWlzZTxBcnJheTxhdG9tSWRlJENvZGVBY3Rpb24+PiB7XHJcbiAgICBpZiAobGludGVyQWRhcHRlciA9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuICAgIGludmFyaWFudChzZXJ2ZXJDYXBhYmlsaXRpZXMuY29kZUFjdGlvblByb3ZpZGVyLCAnTXVzdCBoYXZlIHRoZSB0ZXh0RG9jdW1lbnQvY29kZUFjdGlvbiBjYXBhYmlsaXR5Jyk7XHJcbiAgICBjb25zdCBjb21tYW5kcyA9IGF3YWl0IGNvbm5lY3Rpb24uY29kZUFjdGlvbih7XHJcbiAgICAgIHRleHREb2N1bWVudDogQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudElkZW50aWZpZXIoZWRpdG9yKSxcclxuICAgICAgcmFuZ2U6IENvbnZlcnQuYXRvbVJhbmdlVG9MU1JhbmdlKHJhbmdlKSxcclxuICAgICAgY29udGV4dDoge1xyXG4gICAgICAgIGRpYWdub3N0aWNzOiBkaWFnbm9zdGljcy5tYXAoZGlhZ25vc3RpYyA9PiB7XHJcbiAgICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgc3RvcmVkIGRpYWdub3N0aWMgY29kZSBpZiBpdCBleGlzdHMuXHJcbiAgICAgICAgICAvLyBVbnRpbCB0aGUgTGludGVyIEFQSSBwcm92aWRlcyBhIHBsYWNlIHRvIHN0b3JlIHRoZSBjb2RlLFxyXG4gICAgICAgICAgLy8gdGhlcmUncyBubyByZWFsIHdheSBmb3IgdGhlIGNvZGUgYWN0aW9ucyBBUEkgdG8gZ2l2ZSBpdCBiYWNrIHRvIHVzLlxyXG4gICAgICAgICAgY29uc3QgY29udmVydGVkID0gQ29udmVydC5hdG9tSWRlRGlhZ25vc3RpY1RvTFNEaWFnbm9zdGljKGRpYWdub3N0aWMpO1xyXG4gICAgICAgICAgaWYgKGRpYWdub3N0aWMucmFuZ2UgIT0gbnVsbCAmJiBkaWFnbm9zdGljLnRleHQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb2RlID0gbGludGVyQWRhcHRlci5nZXREaWFnbm9zdGljQ29kZShlZGl0b3IsIGRpYWdub3N0aWMucmFuZ2UsIGRpYWdub3N0aWMudGV4dCk7XHJcbiAgICAgICAgICAgIGlmIChjb2RlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICBjb252ZXJ0ZWQuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiBjb252ZXJ0ZWQ7XHJcbiAgICAgICAgfSksXHJcbiAgICAgIH0sXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjb21tYW5kcy5tYXAoY29tbWFuZCA9PiAoe1xyXG4gICAgICBhc3luYyBhcHBseSgpIHtcclxuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVDb21tYW5kKHtcclxuICAgICAgICAgIGNvbW1hbmQ6IGNvbW1hbmQuY29tbWFuZCxcclxuICAgICAgICAgIGFyZ3VtZW50czogY29tbWFuZC5hcmd1bWVudHMsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGdldFRpdGxlKCkge1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29tbWFuZC50aXRsZSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRpc3Bvc2UoKSB7fSxcclxuICAgIH0pKTtcclxuICB9XHJcbn1cclxuIl19