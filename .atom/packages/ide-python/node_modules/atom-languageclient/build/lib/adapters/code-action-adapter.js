Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CodeActionAdapter {
  // Returns a {Boolean} indicating this adapter can adapt the server based on the
  // given serverCapabilities.
  static canAdapt(serverCapabilities) {
    return serverCapabilities.codeActionProvider === true;
  }

  // Public: Retrieves code actions for a given editor, range, and context (diagnostics).
  // Throws an error if codeActionProvider is not a registered capability.
  //
  // * `connection` A {LanguageClientConnection} to the language server that provides highlights.
  // * `serverCapabilities` The {ServerCapabilities} of the language server that will be used.
  // * `editor` The Atom {TextEditor} containing the diagnostics.
  // * `range` The Atom {Range} to fetch code actions for.
  // * `diagnostics` An {Array<atomIde$Diagnostic>} to fetch code actions for.
  //                 This is typically a list of diagnostics intersecting `range`.
  //
  // Returns a {Promise} of an {Array} of {atomIde$CodeAction}s to display.
  static async getCodeActions(connection, serverCapabilities, linterAdapter, editor, range, diagnostics) {
    if (linterAdapter == null) {
      return [];
    }
    (0, _assert2.default)(serverCapabilities.codeActionProvider, 'Must have the textDocument/codeAction capability');
    const commands = await connection.codeAction({
      textDocument: _convert2.default.editorToTextDocumentIdentifier(editor),
      range: _convert2.default.atomRangeToLSRange(range),
      context: {
        diagnostics: diagnostics.map(diagnostic => {
          // Retrieve the stored diagnostic code if it exists.
          // Until the Linter API provides a place to store the code,
          // there's no real way for the code actions API to give it back to us.
          const converted = _convert2.default.atomIdeDiagnosticToLSDiagnostic(diagnostic);
          if (diagnostic.range != null && diagnostic.text != null) {
            const code = linterAdapter.getDiagnosticCode(editor, diagnostic.range, diagnostic.text);
            if (code != null) {
              converted.code = code;
            }
          }
          return converted;
        })
      }
    });
    return commands.map(command => ({
      async apply() {
        await connection.executeCommand({
          command: command.command,
          arguments: command.arguments
        });
      },
      getTitle() {
        return Promise.resolve(command.title);
      },
      dispose() {}
    }));
  }
}
exports.default = CodeActionAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9jb2RlLWFjdGlvbi1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIkNvZGVBY3Rpb25BZGFwdGVyIiwiY2FuQWRhcHQiLCJzZXJ2ZXJDYXBhYmlsaXRpZXMiLCJjb2RlQWN0aW9uUHJvdmlkZXIiLCJnZXRDb2RlQWN0aW9ucyIsImNvbm5lY3Rpb24iLCJsaW50ZXJBZGFwdGVyIiwiZWRpdG9yIiwicmFuZ2UiLCJkaWFnbm9zdGljcyIsImNvbW1hbmRzIiwiY29kZUFjdGlvbiIsInRleHREb2N1bWVudCIsImVkaXRvclRvVGV4dERvY3VtZW50SWRlbnRpZmllciIsImF0b21SYW5nZVRvTFNSYW5nZSIsImNvbnRleHQiLCJtYXAiLCJkaWFnbm9zdGljIiwiY29udmVydGVkIiwiYXRvbUlkZURpYWdub3N0aWNUb0xTRGlhZ25vc3RpYyIsInRleHQiLCJjb2RlIiwiZ2V0RGlhZ25vc3RpY0NvZGUiLCJjb21tYW5kIiwiYXBwbHkiLCJleGVjdXRlQ29tbWFuZCIsImFyZ3VtZW50cyIsImdldFRpdGxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aXRsZSIsImRpc3Bvc2UiXSwibWFwcGluZ3MiOiI7Ozs7QUFJQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFFZSxNQUFNQSxpQkFBTixDQUF3QjtBQUNyQztBQUNBO0FBQ0EsU0FBT0MsUUFBUCxDQUFnQkMsa0JBQWhCLEVBQWlFO0FBQy9ELFdBQU9BLG1CQUFtQkMsa0JBQW5CLEtBQTBDLElBQWpEO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWFDLGNBQWIsQ0FDRUMsVUFERixFQUVFSCxrQkFGRixFQUdFSSxhQUhGLEVBSUVDLE1BSkYsRUFLRUMsS0FMRixFQU1FQyxXQU5GLEVBT3NDO0FBQ3BDLFFBQUlILGlCQUFpQixJQUFyQixFQUEyQjtBQUN6QixhQUFPLEVBQVA7QUFDRDtBQUNELDBCQUFVSixtQkFBbUJDLGtCQUE3QixFQUFpRCxrREFBakQ7QUFDQSxVQUFNTyxXQUFXLE1BQU1MLFdBQVdNLFVBQVgsQ0FBc0I7QUFDM0NDLG9CQUFjLGtCQUFRQyw4QkFBUixDQUF1Q04sTUFBdkMsQ0FENkI7QUFFM0NDLGFBQU8sa0JBQVFNLGtCQUFSLENBQTJCTixLQUEzQixDQUZvQztBQUczQ08sZUFBUztBQUNQTixxQkFBYUEsWUFBWU8sR0FBWixDQUFnQkMsY0FBYztBQUN6QztBQUNBO0FBQ0E7QUFDQSxnQkFBTUMsWUFBWSxrQkFBUUMsK0JBQVIsQ0FBd0NGLFVBQXhDLENBQWxCO0FBQ0EsY0FBSUEsV0FBV1QsS0FBWCxJQUFvQixJQUFwQixJQUE0QlMsV0FBV0csSUFBWCxJQUFtQixJQUFuRCxFQUF5RDtBQUN2RCxrQkFBTUMsT0FBT2YsY0FBY2dCLGlCQUFkLENBQWdDZixNQUFoQyxFQUF3Q1UsV0FBV1QsS0FBbkQsRUFBMERTLFdBQVdHLElBQXJFLENBQWI7QUFDQSxnQkFBSUMsUUFBUSxJQUFaLEVBQWtCO0FBQ2hCSCx3QkFBVUcsSUFBVixHQUFpQkEsSUFBakI7QUFDRDtBQUNGO0FBQ0QsaUJBQU9ILFNBQVA7QUFDRCxTQVpZO0FBRE47QUFIa0MsS0FBdEIsQ0FBdkI7QUFtQkEsV0FBT1IsU0FBU00sR0FBVCxDQUFhTyxZQUFZO0FBQzlCLFlBQU1DLEtBQU4sR0FBYztBQUNaLGNBQU1uQixXQUFXb0IsY0FBWCxDQUEwQjtBQUM5QkYsbUJBQVNBLFFBQVFBLE9BRGE7QUFFOUJHLHFCQUFXSCxRQUFRRztBQUZXLFNBQTFCLENBQU47QUFJRCxPQU42QjtBQU85QkMsaUJBQVc7QUFDVCxlQUFPQyxRQUFRQyxPQUFSLENBQWdCTixRQUFRTyxLQUF4QixDQUFQO0FBQ0QsT0FUNkI7QUFVOUJDLGdCQUFVLENBQUU7QUFWa0IsS0FBWixDQUFiLENBQVA7QUFZRDtBQTdEb0M7a0JBQWxCL0IsaUIiLCJmaWxlIjoiY29kZS1hY3Rpb24tYWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIExpbnRlclB1c2hWMkFkYXB0ZXIgZnJvbSAnLi9saW50ZXItcHVzaC12Mi1hZGFwdGVyJztcblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIHR5cGUgU2VydmVyQ2FwYWJpbGl0aWVzfSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi9jb252ZXJ0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29kZUFjdGlvbkFkYXB0ZXIge1xuICAvLyBSZXR1cm5zIGEge0Jvb2xlYW59IGluZGljYXRpbmcgdGhpcyBhZGFwdGVyIGNhbiBhZGFwdCB0aGUgc2VydmVyIGJhc2VkIG9uIHRoZVxuICAvLyBnaXZlbiBzZXJ2ZXJDYXBhYmlsaXRpZXMuXG4gIHN0YXRpYyBjYW5BZGFwdChzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzZXJ2ZXJDYXBhYmlsaXRpZXMuY29kZUFjdGlvblByb3ZpZGVyID09PSB0cnVlO1xuICB9XG5cbiAgLy8gUHVibGljOiBSZXRyaWV2ZXMgY29kZSBhY3Rpb25zIGZvciBhIGdpdmVuIGVkaXRvciwgcmFuZ2UsIGFuZCBjb250ZXh0IChkaWFnbm9zdGljcykuXG4gIC8vIFRocm93cyBhbiBlcnJvciBpZiBjb2RlQWN0aW9uUHJvdmlkZXIgaXMgbm90IGEgcmVnaXN0ZXJlZCBjYXBhYmlsaXR5LlxuICAvL1xuICAvLyAqIGBjb25uZWN0aW9uYCBBIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCBwcm92aWRlcyBoaWdobGlnaHRzLlxuICAvLyAqIGBzZXJ2ZXJDYXBhYmlsaXRpZXNgIFRoZSB7U2VydmVyQ2FwYWJpbGl0aWVzfSBvZiB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHRoYXQgd2lsbCBiZSB1c2VkLlxuICAvLyAqIGBlZGl0b3JgIFRoZSBBdG9tIHtUZXh0RWRpdG9yfSBjb250YWluaW5nIHRoZSBkaWFnbm9zdGljcy5cbiAgLy8gKiBgcmFuZ2VgIFRoZSBBdG9tIHtSYW5nZX0gdG8gZmV0Y2ggY29kZSBhY3Rpb25zIGZvci5cbiAgLy8gKiBgZGlhZ25vc3RpY3NgIEFuIHtBcnJheTxhdG9tSWRlJERpYWdub3N0aWM+fSB0byBmZXRjaCBjb2RlIGFjdGlvbnMgZm9yLlxuICAvLyAgICAgICAgICAgICAgICAgVGhpcyBpcyB0eXBpY2FsbHkgYSBsaXN0IG9mIGRpYWdub3N0aWNzIGludGVyc2VjdGluZyBgcmFuZ2VgLlxuICAvL1xuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IG9mIGFuIHtBcnJheX0gb2Yge2F0b21JZGUkQ29kZUFjdGlvbn1zIHRvIGRpc3BsYXkuXG4gIHN0YXRpYyBhc3luYyBnZXRDb2RlQWN0aW9ucyhcbiAgICBjb25uZWN0aW9uOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXG4gICAgc2VydmVyQ2FwYWJpbGl0aWVzOiBTZXJ2ZXJDYXBhYmlsaXRpZXMsXG4gICAgbGludGVyQWRhcHRlcjogP0xpbnRlclB1c2hWMkFkYXB0ZXIsXG4gICAgZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsXG4gICAgcmFuZ2U6IGF0b20kUmFuZ2UsXG4gICAgZGlhZ25vc3RpY3M6IEFycmF5PGF0b21JZGUkRGlhZ25vc3RpYz4sXG4gICk6IFByb21pc2U8QXJyYXk8YXRvbUlkZSRDb2RlQWN0aW9uPj4ge1xuICAgIGlmIChsaW50ZXJBZGFwdGVyID09IG51bGwpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaW52YXJpYW50KHNlcnZlckNhcGFiaWxpdGllcy5jb2RlQWN0aW9uUHJvdmlkZXIsICdNdXN0IGhhdmUgdGhlIHRleHREb2N1bWVudC9jb2RlQWN0aW9uIGNhcGFiaWxpdHknKTtcbiAgICBjb25zdCBjb21tYW5kcyA9IGF3YWl0IGNvbm5lY3Rpb24uY29kZUFjdGlvbih7XG4gICAgICB0ZXh0RG9jdW1lbnQ6IENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRJZGVudGlmaWVyKGVkaXRvciksXG4gICAgICByYW5nZTogQ29udmVydC5hdG9tUmFuZ2VUb0xTUmFuZ2UocmFuZ2UpLFxuICAgICAgY29udGV4dDoge1xuICAgICAgICBkaWFnbm9zdGljczogZGlhZ25vc3RpY3MubWFwKGRpYWdub3N0aWMgPT4ge1xuICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSBzdG9yZWQgZGlhZ25vc3RpYyBjb2RlIGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICAvLyBVbnRpbCB0aGUgTGludGVyIEFQSSBwcm92aWRlcyBhIHBsYWNlIHRvIHN0b3JlIHRoZSBjb2RlLFxuICAgICAgICAgIC8vIHRoZXJlJ3Mgbm8gcmVhbCB3YXkgZm9yIHRoZSBjb2RlIGFjdGlvbnMgQVBJIHRvIGdpdmUgaXQgYmFjayB0byB1cy5cbiAgICAgICAgICBjb25zdCBjb252ZXJ0ZWQgPSBDb252ZXJ0LmF0b21JZGVEaWFnbm9zdGljVG9MU0RpYWdub3N0aWMoZGlhZ25vc3RpYyk7XG4gICAgICAgICAgaWYgKGRpYWdub3N0aWMucmFuZ2UgIT0gbnVsbCAmJiBkaWFnbm9zdGljLnRleHQgIT0gbnVsbCkge1xuICAgICAgICAgICAgY29uc3QgY29kZSA9IGxpbnRlckFkYXB0ZXIuZ2V0RGlhZ25vc3RpY0NvZGUoZWRpdG9yLCBkaWFnbm9zdGljLnJhbmdlLCBkaWFnbm9zdGljLnRleHQpO1xuICAgICAgICAgICAgaWYgKGNvZGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb252ZXJ0ZWQuY29kZSA9IGNvZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb252ZXJ0ZWQ7XG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gY29tbWFuZHMubWFwKGNvbW1hbmQgPT4gKHtcbiAgICAgIGFzeW5jIGFwcGx5KCkge1xuICAgICAgICBhd2FpdCBjb25uZWN0aW9uLmV4ZWN1dGVDb21tYW5kKHtcbiAgICAgICAgICBjb21tYW5kOiBjb21tYW5kLmNvbW1hbmQsXG4gICAgICAgICAgYXJndW1lbnRzOiBjb21tYW5kLmFyZ3VtZW50cyxcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZ2V0VGl0bGUoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoY29tbWFuZC50aXRsZSk7XG4gICAgICB9LFxuICAgICAgZGlzcG9zZSgpIHt9LFxuICAgIH0pKTtcbiAgfVxufVxuIl19