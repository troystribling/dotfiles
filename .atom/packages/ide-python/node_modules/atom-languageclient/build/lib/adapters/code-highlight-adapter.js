Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CodeHighlightAdapter {
  // Returns a {Boolean} indicating this adapter can adapt the server based on the
  // given serverCapabilities.
  static canAdapt(serverCapabilities) {
    return serverCapabilities.documentHighlightProvider === true;
  }

  // Public: Creates highlight markers for a given editor position.
  // Throws an error if documentHighlightProvider is not a registered capability.
  //
  // * `connection` A {LanguageClientConnection} to the language server that provides highlights.
  // * `serverCapabilities` The {ServerCapabilities} of the language server that will be used.
  // * `editor` The Atom {TextEditor} containing the text to be highlighted.
  // * `position` The Atom {Point} to fetch highlights for.
  //
  // Returns a {Promise} of an {Array} of {Range}s to be turned into highlights.
  static async highlight(connection, serverCapabilities, editor, position) {
    (0, _assert2.default)(serverCapabilities.documentHighlightProvider, 'Must have the documentHighlight capability');
    const highlights = await connection.documentHighlight(_convert2.default.editorToTextDocumentPositionParams(editor, position));
    return highlights.map(highlight => {
      return _convert2.default.lsRangeToAtomRange(highlight.range);
    });
  }
}
exports.default = CodeHighlightAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9jb2RlLWhpZ2hsaWdodC1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIkNvZGVIaWdobGlnaHRBZGFwdGVyIiwiY2FuQWRhcHQiLCJzZXJ2ZXJDYXBhYmlsaXRpZXMiLCJkb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyIiwiaGlnaGxpZ2h0IiwiY29ubmVjdGlvbiIsImVkaXRvciIsInBvc2l0aW9uIiwiaGlnaGxpZ2h0cyIsImRvY3VtZW50SGlnaGxpZ2h0IiwiZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyIsIm1hcCIsImxzUmFuZ2VUb0F0b21SYW5nZSIsInJhbmdlIl0sIm1hcHBpbmdzIjoiOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRWUsTUFBTUEsb0JBQU4sQ0FBMkI7QUFDeEM7QUFDQTtBQUNBLFNBQU9DLFFBQVAsQ0FBZ0JDLGtCQUFoQixFQUFpRTtBQUMvRCxXQUFPQSxtQkFBbUJDLHlCQUFuQixLQUFpRCxJQUF4RDtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWFDLFNBQWIsQ0FDRUMsVUFERixFQUVFSCxrQkFGRixFQUdFSSxNQUhGLEVBSUVDLFFBSkYsRUFLK0I7QUFDN0IsMEJBQVVMLG1CQUFtQkMseUJBQTdCLEVBQXdELDRDQUF4RDtBQUNBLFVBQU1LLGFBQWEsTUFBTUgsV0FBV0ksaUJBQVgsQ0FBNkIsa0JBQVFDLGtDQUFSLENBQTJDSixNQUEzQyxFQUFtREMsUUFBbkQsQ0FBN0IsQ0FBekI7QUFDQSxXQUFPQyxXQUFXRyxHQUFYLENBQWVQLGFBQWE7QUFDakMsYUFBTyxrQkFBUVEsa0JBQVIsQ0FBMkJSLFVBQVVTLEtBQXJDLENBQVA7QUFDRCxLQUZNLENBQVA7QUFHRDtBQTNCdUM7a0JBQXJCYixvQiIsImZpbGUiOiJjb2RlLWhpZ2hsaWdodC1hZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIHR5cGUgU2VydmVyQ2FwYWJpbGl0aWVzfSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi9jb252ZXJ0JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29kZUhpZ2hsaWdodEFkYXB0ZXIge1xuICAvLyBSZXR1cm5zIGEge0Jvb2xlYW59IGluZGljYXRpbmcgdGhpcyBhZGFwdGVyIGNhbiBhZGFwdCB0aGUgc2VydmVyIGJhc2VkIG9uIHRoZVxuICAvLyBnaXZlbiBzZXJ2ZXJDYXBhYmlsaXRpZXMuXG4gIHN0YXRpYyBjYW5BZGFwdChzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzZXJ2ZXJDYXBhYmlsaXRpZXMuZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciA9PT0gdHJ1ZTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogQ3JlYXRlcyBoaWdobGlnaHQgbWFya2VycyBmb3IgYSBnaXZlbiBlZGl0b3IgcG9zaXRpb24uXG4gIC8vIFRocm93cyBhbiBlcnJvciBpZiBkb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyIGlzIG5vdCBhIHJlZ2lzdGVyZWQgY2FwYWJpbGl0eS5cbiAgLy9cbiAgLy8gKiBgY29ubmVjdGlvbmAgQSB7TGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9ufSB0byB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHRoYXQgcHJvdmlkZXMgaGlnaGxpZ2h0cy5cbiAgLy8gKiBgc2VydmVyQ2FwYWJpbGl0aWVzYCBUaGUge1NlcnZlckNhcGFiaWxpdGllc30gb2YgdGhlIGxhbmd1YWdlIHNlcnZlciB0aGF0IHdpbGwgYmUgdXNlZC5cbiAgLy8gKiBgZWRpdG9yYCBUaGUgQXRvbSB7VGV4dEVkaXRvcn0gY29udGFpbmluZyB0aGUgdGV4dCB0byBiZSBoaWdobGlnaHRlZC5cbiAgLy8gKiBgcG9zaXRpb25gIFRoZSBBdG9tIHtQb2ludH0gdG8gZmV0Y2ggaGlnaGxpZ2h0cyBmb3IuXG4gIC8vXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gb2YgYW4ge0FycmF5fSBvZiB7UmFuZ2V9cyB0byBiZSB0dXJuZWQgaW50byBoaWdobGlnaHRzLlxuICBzdGF0aWMgYXN5bmMgaGlnaGxpZ2h0KFxuICAgIGNvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcbiAgICBzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyxcbiAgICBlZGl0b3I6IGF0b20kVGV4dEVkaXRvcixcbiAgICBwb3NpdGlvbjogYXRvbSRQb2ludCxcbiAgKTogUHJvbWlzZTw/QXJyYXk8YXRvbSRSYW5nZT4+IHtcbiAgICBpbnZhcmlhbnQoc2VydmVyQ2FwYWJpbGl0aWVzLmRvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXIsICdNdXN0IGhhdmUgdGhlIGRvY3VtZW50SGlnaGxpZ2h0IGNhcGFiaWxpdHknKTtcbiAgICBjb25zdCBoaWdobGlnaHRzID0gYXdhaXQgY29ubmVjdGlvbi5kb2N1bWVudEhpZ2hsaWdodChDb252ZXJ0LmVkaXRvclRvVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMoZWRpdG9yLCBwb3NpdGlvbikpO1xuICAgIHJldHVybiBoaWdobGlnaHRzLm1hcChoaWdobGlnaHQgPT4ge1xuICAgICAgcmV0dXJuIENvbnZlcnQubHNSYW5nZVRvQXRvbVJhbmdlKGhpZ2hsaWdodC5yYW5nZSk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==