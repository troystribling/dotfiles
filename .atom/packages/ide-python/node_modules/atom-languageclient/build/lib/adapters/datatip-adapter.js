Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

var _utils = require('../utils');

var _utils2 = _interopRequireDefault(_utils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Public: Adapts the language server protocol "textDocument/hover" to the
// Atom IDE UI Datatip package.
let DatatipAdapter = class DatatipAdapter {
  // Public: Determine whether this adapter can be used to adapt a language server
  // based on the serverCapabilities matrix containing a hoverProvider.
  //
  // * `serverCapabilities` The {ServerCapabilities} of the language server to consider.
  //
  // Returns a {Boolean} indicating adapter can adapt the server based on the
  // given serverCapabilities.
  static canAdapt(serverCapabilities) {
    return serverCapabilities.hoverProvider === true;
  }

  // Public: Get the Datatip for this {Point} in a {TextEditor} by querying
  // the language server.
  //
  // * `connection` A {LanguageClientConnection} to the language server that will be queried
  //                for the hover text/datatip.
  // * `editor` The Atom {TextEditor} containing the text the Datatip should relate to.
  // * `point` The Atom {Point} containing the point within the text the Datatip should relate to.
  //
  // Returns a {Promise} containing the {Datatip} to display or {null} if no Datatip is available.
  getDatatip(connection, editor, point) {
    return _asyncToGenerator(function* () {
      const documentPositionParams = _convert2.default.editorToTextDocumentPositionParams(editor, point);

      const hover = yield connection.hover(documentPositionParams);
      if (hover == null || hover.contents == null ||
      // This intentionally covers both empty strings and empty arrays.
      hover.contents.length === 0) {
        return null;
      }

      const range = hover.range == null ? _utils2.default.getWordAtPosition(editor, point) : _convert2.default.lsRangeToAtomRange(hover.range);

      const markedStrings = (Array.isArray(hover.contents) ? hover.contents : [hover.contents]).map(function (str) {
        return DatatipAdapter.convertMarkedString(editor, str);
      });

      return { range, markedStrings };
    })();
  }

  static convertMarkedString(editor, markedString) {
    if (typeof markedString === 'object') {
      return {
        type: 'snippet',
        // TODO: find a better mapping from language -> grammar
        grammar: atom.grammars.grammarForScopeName(`source.${markedString.language}`) || editor.getGrammar(),
        value: markedString.value
      };
    }
    return { type: 'markdown', value: markedString };
  }
};
exports.default = DatatipAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9kYXRhdGlwLWFkYXB0ZXIuanMiXSwibmFtZXMiOlsiRGF0YXRpcEFkYXB0ZXIiLCJjYW5BZGFwdCIsInNlcnZlckNhcGFiaWxpdGllcyIsImhvdmVyUHJvdmlkZXIiLCJnZXREYXRhdGlwIiwiY29ubmVjdGlvbiIsImVkaXRvciIsInBvaW50IiwiZG9jdW1lbnRQb3NpdGlvblBhcmFtcyIsImVkaXRvclRvVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMiLCJob3ZlciIsImNvbnRlbnRzIiwibGVuZ3RoIiwicmFuZ2UiLCJnZXRXb3JkQXRQb3NpdGlvbiIsImxzUmFuZ2VUb0F0b21SYW5nZSIsIm1hcmtlZFN0cmluZ3MiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJjb252ZXJ0TWFya2VkU3RyaW5nIiwic3RyIiwibWFya2VkU3RyaW5nIiwidHlwZSIsImdyYW1tYXIiLCJhdG9tIiwiZ3JhbW1hcnMiLCJncmFtbWFyRm9yU2NvcGVOYW1lIiwibGFuZ3VhZ2UiLCJnZXRHcmFtbWFyIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUE7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7QUFFQTtBQUNBO0lBQ3FCQSxjLEdBQU4sTUFBTUEsY0FBTixDQUFxQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU9DLFFBQVAsQ0FBZ0JDLGtCQUFoQixFQUFpRTtBQUMvRCxXQUFPQSxtQkFBbUJDLGFBQW5CLEtBQXFDLElBQTVDO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ01DLFlBQU4sQ0FDRUMsVUFERixFQUVFQyxNQUZGLEVBR0VDLEtBSEYsRUFJNkI7QUFBQTtBQUMzQixZQUFNQyx5QkFBeUIsa0JBQVFDLGtDQUFSLENBQTJDSCxNQUEzQyxFQUFtREMsS0FBbkQsQ0FBL0I7O0FBRUEsWUFBTUcsUUFBUSxNQUFNTCxXQUFXSyxLQUFYLENBQWlCRixzQkFBakIsQ0FBcEI7QUFDQSxVQUNFRSxTQUFTLElBQVQsSUFDQUEsTUFBTUMsUUFBTixJQUFrQixJQURsQjtBQUVBO0FBQ0FELFlBQU1DLFFBQU4sQ0FBZUMsTUFBZixLQUEwQixDQUo1QixFQUtFO0FBQ0EsZUFBTyxJQUFQO0FBQ0Q7O0FBRUQsWUFBTUMsUUFDSkgsTUFBTUcsS0FBTixJQUFlLElBQWYsR0FBc0IsZ0JBQU1DLGlCQUFOLENBQXdCUixNQUF4QixFQUFnQ0MsS0FBaEMsQ0FBdEIsR0FBK0Qsa0JBQVFRLGtCQUFSLENBQTJCTCxNQUFNRyxLQUFqQyxDQURqRTs7QUFHQSxZQUFNRyxnQkFBZ0IsQ0FBQ0MsTUFBTUMsT0FBTixDQUFjUixNQUFNQyxRQUFwQixJQUFnQ0QsTUFBTUMsUUFBdEMsR0FBaUQsQ0FBQ0QsTUFBTUMsUUFBUCxDQUFsRCxFQUFvRVEsR0FBcEUsQ0FBd0U7QUFBQSxlQUM1Rm5CLGVBQWVvQixtQkFBZixDQUFtQ2QsTUFBbkMsRUFBMkNlLEdBQTNDLENBRDRGO0FBQUEsT0FBeEUsQ0FBdEI7O0FBSUEsYUFBTyxFQUFDUixLQUFELEVBQVFHLGFBQVIsRUFBUDtBQXBCMkI7QUFxQjVCOztBQUVELFNBQU9JLG1CQUFQLENBQTJCZCxNQUEzQixFQUFvRGdCLFlBQXBELEVBQXNHO0FBQ3BHLFFBQUksT0FBT0EsWUFBUCxLQUF3QixRQUE1QixFQUFzQztBQUNwQyxhQUFPO0FBQ0xDLGNBQU0sU0FERDtBQUVMO0FBQ0FDLGlCQUFTQyxLQUFLQyxRQUFMLENBQWNDLG1CQUFkLENBQW1DLFVBQVNMLGFBQWFNLFFBQVMsRUFBbEUsS0FBd0V0QixPQUFPdUIsVUFBUCxFQUg1RTtBQUlMQyxlQUFPUixhQUFhUTtBQUpmLE9BQVA7QUFNRDtBQUNELFdBQU8sRUFBQ1AsTUFBTSxVQUFQLEVBQW1CTyxPQUFPUixZQUExQixFQUFQO0FBQ0Q7QUExRGlDLEM7a0JBQWZ0QixjIiwiZmlsZSI6ImRhdGF0aXAtYWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XHJcblxyXG5pbXBvcnQge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbiwgdHlwZSBNYXJrZWRTdHJpbmcsIHR5cGUgU2VydmVyQ2FwYWJpbGl0aWVzfSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuLy8gUHVibGljOiBBZGFwdHMgdGhlIGxhbmd1YWdlIHNlcnZlciBwcm90b2NvbCBcInRleHREb2N1bWVudC9ob3ZlclwiIHRvIHRoZVxyXG4vLyBBdG9tIElERSBVSSBEYXRhdGlwIHBhY2thZ2UuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGF0aXBBZGFwdGVyIHtcclxuICAvLyBQdWJsaWM6IERldGVybWluZSB3aGV0aGVyIHRoaXMgYWRhcHRlciBjYW4gYmUgdXNlZCB0byBhZGFwdCBhIGxhbmd1YWdlIHNlcnZlclxyXG4gIC8vIGJhc2VkIG9uIHRoZSBzZXJ2ZXJDYXBhYmlsaXRpZXMgbWF0cml4IGNvbnRhaW5pbmcgYSBob3ZlclByb3ZpZGVyLlxyXG4gIC8vXHJcbiAgLy8gKiBgc2VydmVyQ2FwYWJpbGl0aWVzYCBUaGUge1NlcnZlckNhcGFiaWxpdGllc30gb2YgdGhlIGxhbmd1YWdlIHNlcnZlciB0byBjb25zaWRlci5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7Qm9vbGVhbn0gaW5kaWNhdGluZyBhZGFwdGVyIGNhbiBhZGFwdCB0aGUgc2VydmVyIGJhc2VkIG9uIHRoZVxyXG4gIC8vIGdpdmVuIHNlcnZlckNhcGFiaWxpdGllcy5cclxuICBzdGF0aWMgY2FuQWRhcHQoc2VydmVyQ2FwYWJpbGl0aWVzOiBTZXJ2ZXJDYXBhYmlsaXRpZXMpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBzZXJ2ZXJDYXBhYmlsaXRpZXMuaG92ZXJQcm92aWRlciA9PT0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogR2V0IHRoZSBEYXRhdGlwIGZvciB0aGlzIHtQb2ludH0gaW4gYSB7VGV4dEVkaXRvcn0gYnkgcXVlcnlpbmdcclxuICAvLyB0aGUgbGFuZ3VhZ2Ugc2VydmVyLlxyXG4gIC8vXHJcbiAgLy8gKiBgY29ubmVjdGlvbmAgQSB7TGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9ufSB0byB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHRoYXQgd2lsbCBiZSBxdWVyaWVkXHJcbiAgLy8gICAgICAgICAgICAgICAgZm9yIHRoZSBob3ZlciB0ZXh0L2RhdGF0aXAuXHJcbiAgLy8gKiBgZWRpdG9yYCBUaGUgQXRvbSB7VGV4dEVkaXRvcn0gY29udGFpbmluZyB0aGUgdGV4dCB0aGUgRGF0YXRpcCBzaG91bGQgcmVsYXRlIHRvLlxyXG4gIC8vICogYHBvaW50YCBUaGUgQXRvbSB7UG9pbnR9IGNvbnRhaW5pbmcgdGhlIHBvaW50IHdpdGhpbiB0aGUgdGV4dCB0aGUgRGF0YXRpcCBzaG91bGQgcmVsYXRlIHRvLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIHtQcm9taXNlfSBjb250YWluaW5nIHRoZSB7RGF0YXRpcH0gdG8gZGlzcGxheSBvciB7bnVsbH0gaWYgbm8gRGF0YXRpcCBpcyBhdmFpbGFibGUuXHJcbiAgYXN5bmMgZ2V0RGF0YXRpcChcclxuICAgIGNvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcclxuICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxyXG4gICAgcG9pbnQ6IGF0b20kUG9pbnQsXHJcbiAgKTogUHJvbWlzZTw/YXRvbUlkZSREYXRhdGlwPiB7XHJcbiAgICBjb25zdCBkb2N1bWVudFBvc2l0aW9uUGFyYW1zID0gQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKGVkaXRvciwgcG9pbnQpO1xyXG5cclxuICAgIGNvbnN0IGhvdmVyID0gYXdhaXQgY29ubmVjdGlvbi5ob3Zlcihkb2N1bWVudFBvc2l0aW9uUGFyYW1zKTtcclxuICAgIGlmIChcclxuICAgICAgaG92ZXIgPT0gbnVsbCB8fFxyXG4gICAgICBob3Zlci5jb250ZW50cyA9PSBudWxsIHx8XHJcbiAgICAgIC8vIFRoaXMgaW50ZW50aW9uYWxseSBjb3ZlcnMgYm90aCBlbXB0eSBzdHJpbmdzIGFuZCBlbXB0eSBhcnJheXMuXHJcbiAgICAgIGhvdmVyLmNvbnRlbnRzLmxlbmd0aCA9PT0gMFxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJhbmdlID1cclxuICAgICAgaG92ZXIucmFuZ2UgPT0gbnVsbCA/IFV0aWxzLmdldFdvcmRBdFBvc2l0aW9uKGVkaXRvciwgcG9pbnQpIDogQ29udmVydC5sc1JhbmdlVG9BdG9tUmFuZ2UoaG92ZXIucmFuZ2UpO1xyXG5cclxuICAgIGNvbnN0IG1hcmtlZFN0cmluZ3MgPSAoQXJyYXkuaXNBcnJheShob3Zlci5jb250ZW50cykgPyBob3Zlci5jb250ZW50cyA6IFtob3Zlci5jb250ZW50c10pLm1hcChzdHIgPT5cclxuICAgICAgRGF0YXRpcEFkYXB0ZXIuY29udmVydE1hcmtlZFN0cmluZyhlZGl0b3IsIHN0ciksXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiB7cmFuZ2UsIG1hcmtlZFN0cmluZ3N9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbnZlcnRNYXJrZWRTdHJpbmcoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsIG1hcmtlZFN0cmluZzogTWFya2VkU3RyaW5nKTogYXRvbUlkZSRNYXJrZWRTdHJpbmcge1xyXG4gICAgaWYgKHR5cGVvZiBtYXJrZWRTdHJpbmcgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdHlwZTogJ3NuaXBwZXQnLFxyXG4gICAgICAgIC8vIFRPRE86IGZpbmQgYSBiZXR0ZXIgbWFwcGluZyBmcm9tIGxhbmd1YWdlIC0+IGdyYW1tYXJcclxuICAgICAgICBncmFtbWFyOiBhdG9tLmdyYW1tYXJzLmdyYW1tYXJGb3JTY29wZU5hbWUoYHNvdXJjZS4ke21hcmtlZFN0cmluZy5sYW5ndWFnZX1gKSB8fCBlZGl0b3IuZ2V0R3JhbW1hcigpLFxyXG4gICAgICAgIHZhbHVlOiBtYXJrZWRTdHJpbmcudmFsdWUsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge3R5cGU6ICdtYXJrZG93bicsIHZhbHVlOiBtYXJrZWRTdHJpbmd9O1xyXG4gIH1cclxufVxyXG4iXX0=