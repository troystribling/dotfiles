import * as atomIde from "atom-ide-base";
import * as atom from "atom";
import * as ls from "../languageclient";
import LinterPushV2Adapter from "./linter-push-v2-adapter";
/** @deprecated Use Linter V2 service */
export declare type DiagnosticCode = number | string;
/** @deprecated Use Linter V2 service */
export default class IdeDiagnosticAdapter extends LinterPushV2Adapter {
    private _diagnosticCodes;
    /**
     * Public: Capture the diagnostics sent from a langguage server, convert them to the Linter V2 format and forward them
     * on to any attached {V2IndieDelegate}s.
     *
     * @deprecated Use Linter V2 service
     * @param params The {PublishDiagnosticsParams} received from the language server that should be captured and
     *   forwarded on to any attached {V2IndieDelegate}s.
     */
    captureDiagnostics(params: ls.PublishDiagnosticsParams): void;
    /**
     * Public: get diagnostics for the given linter messages
     *
     * @deprecated Use Linter V2 service
     * @param linterMessages An array of linter {V2Message}
     * @param editor
     * @returns An array of LS {Diagnostic[]}
     */
    getLSDiagnosticsForIdeDiagnostics(diagnostics: atomIde.Diagnostic[], editor: atom.TextEditor): ls.Diagnostic[];
    /**
     * Public: Get the {Diagnostic} that is associated with the given {atomIde.Diagnostic}.
     *
     * @deprecated Use Linter V2 service
     * @param diagnostic The {atomIde.Diagnostic} object to fetch the {Diagnostic} for.
     * @param editor
     * @returns The associated {Diagnostic}.
     */
    getLSDiagnosticForIdeDiagnostic(diagnostic: atomIde.Diagnostic, editor: atom.TextEditor): ls.Diagnostic;
    /**
     * Private: Get the recorded diagnostic code for a range/message. Diagnostic codes are tricky because there's no
     * suitable place in the Linter API for them. For now, we'll record the original code for each range/message
     * combination and retrieve it when needed (e.g. for passing back into code actions)
     */
    private getDiagnosticCode;
}
/** @deprecated Use Linter V2 service */
export declare function atomIdeDiagnosticToLSDiagnostic(diagnostic: atomIde.Diagnostic): ls.Diagnostic;
/** @deprecated Use Linter V2 service */
export declare function diagnosticTypeToLSSeverity(type: atomIde.DiagnosticType): ls.DiagnosticSeverity;
