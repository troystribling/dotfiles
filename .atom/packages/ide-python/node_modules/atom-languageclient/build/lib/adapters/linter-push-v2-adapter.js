Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Public: Listen to diagnostics messages from the language server and publish them
// to the user by way of the Linter Push (Indie) v2 API supported by Atom IDE UI.
let LinterPushV2Adapter = class LinterPushV2Adapter {

  // Public: Create a new {LinterPushV2Adapter} that will listen for diagnostics
  // via the supplied {LanguageClientConnection}.
  //
  // * `connection` A {LanguageClientConnection} to the language server that will provide diagnostics.
  constructor(connection) {
    this._diagnosticMap = new Map();
    this._diagnosticCodes = new Map();
    this._indies = new Set();

    connection.onPublishDiagnostics(this.captureDiagnostics.bind(this));
  }

  // Public: Attach this {LinterPushV2Adapter} to a given {V2IndieDelegate} registry.
  //
  // * `indie` A {V2IndieDelegate} that wants to receive messages.
  attach(indie) {
    this._indies.add(indie);
    this._diagnosticMap.forEach((value, key) => indie.setMessages(key, value));
    indie.onDidDestroy(() => {
      this._indies.delete(indie);
    });
  }

  // Public: Remove all {V2IndieDelegate} registries attached to this adapter and clear them.
  //
  // * `indie` A {V2IndieDelegate} that wants to receive messages.
  detachAll() {
    this._indies.forEach(i => i.clearMessages());
    this._indies.clear();
  }

  // Public: Capture the diagnostics sent from a langguage server, convert them to the
  // Linter V2 format and forward them on to any attached {V2IndieDelegate}s.
  //
  // * `params` The {PublishDiagnosticsParams} received from the language server that should
  //            be captured and forwarded on to any attached {V2IndieDelegate}s.
  captureDiagnostics(params) {
    const path = _convert2.default.uriToPath(params.uri);
    const codeMap = new Map();
    const messages = params.diagnostics.map(d => {
      const linterMessage = this.diagnosticToV2Message(path, d);
      codeMap.set(getCodeKey(linterMessage.location.position, d.message), d.code);
      return linterMessage;
    });
    this._diagnosticMap.set(path, messages);
    this._diagnosticCodes.set(path, codeMap);
    this._indies.forEach(i => i.setMessages(path, messages));
  }

  // Public: Convert a single {Diagnostic} received from a language server into a single
  // {V2Message} expected by the Linter V2 API.
  //
  // * `path` A string representing the path of the file the diagnostic belongs to.
  // * `diagnostics` A {Diagnostic} object received from the language server.
  //
  // Returns a {V2Message} equivalent to the {Diagnostic} object supplied by the language server.
  diagnosticToV2Message(path, diagnostic) {
    return {
      location: {
        file: path,
        position: _convert2.default.lsRangeToAtomRange(diagnostic.range)
      },
      excerpt: diagnostic.message,
      linterName: diagnostic.source,
      severity: LinterPushV2Adapter.diagnosticSeverityToSeverity(diagnostic.severity || -1)
    };
  }

  // Public: Convert a diagnostic severity number obtained from the language server into
  // the textual equivalent for a Linter {V2Message}.
  //
  // * `severity` A number representing the severity of the diagnostic.
  //
  // Returns a string of 'error', 'warning' or 'info' depending on the severity.
  static diagnosticSeverityToSeverity(severity) {
    switch (severity) {
      case _languageclient.DiagnosticSeverity.Error:
        return 'error';
      case _languageclient.DiagnosticSeverity.Warning:
        return 'warning';
      case _languageclient.DiagnosticSeverity.Information:
      case _languageclient.DiagnosticSeverity.Hint:
      default:
        return 'info';
    }
  }

  // Private: Get the recorded diagnostic code for a range/message.
  // Diagnostic codes are tricky because there's no suitable place in the Linter API for them.
  // For now, we'll record the original code for each range/message combination and retrieve it
  // when needed (e.g. for passing back into code actions)
  getDiagnosticCode(editor, range, text) {
    const path = editor.getPath();
    if (path != null) {
      const diagnosticCodes = this._diagnosticCodes.get(path);
      if (diagnosticCodes != null) {
        return diagnosticCodes.get(getCodeKey(range, text));
      }
    }
    return null;
  }
};
exports.default = LinterPushV2Adapter;


function getCodeKey(range, text) {
  return [].concat(...range.serialize(), text).join(',');
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,