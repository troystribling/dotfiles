"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = require("../convert");
const languageclient_1 = require("../languageclient");
/**
 * Public: Listen to diagnostics messages from the language server and publish them to the user by way of the Linter
 * Push (Indie) v2 API provided by the Base Linter package.
 */
class LinterPushV2Adapter {
    /**
     * Public: Create a new {LinterPushV2Adapter} that will listen for diagnostics via the supplied {LanguageClientConnection}.
     *
     * @param connection A {LanguageClientConnection} to the language server that will provide diagnostics.
     */
    constructor(connection) {
        /*
         * A map from file path calculated using the LS diagnostic uri to an array of linter messages {linter.Message[]}
         */
        this._diagnosticMap = new Map();
        /**
         * A map from file path {linter.Message["location"]["file"]} to a Map of all Message keys to Diagnostics
         * ${Map<linter.Message["key"], Diagnostic>} It has to be stored separately because a {Message} object cannot hold all
         * of the information that a {Diagnostic} provides, thus we store the original {Diagnostic} object.
         */
        this._lsDiagnosticMap = new Map();
        this._indies = new Set();
        connection.onPublishDiagnostics(this.captureDiagnostics.bind(this));
    }
    /** Dispose this adapter ensuring any resources are freed and events unhooked. */
    dispose() {
        this.detachAll();
    }
    /**
     * Public: Attach this {LinterPushV2Adapter} to a given {V2IndieDelegate} registry.
     *
     * @param indie A {V2IndieDelegate} that wants to receive messages.
     */
    attach(indie) {
        this._indies.add(indie);
        this._diagnosticMap.forEach((value, key) => indie.setMessages(key, value));
        indie.onDidDestroy(() => {
            this._indies.delete(indie);
        });
    }
    /** Public: Remove all {V2IndieDelegate} registries attached to this adapter and clear them. */
    detachAll() {
        this._indies.forEach((i) => i.clearMessages());
        this._indies.clear();
    }
    /**
     * Public: Capture the diagnostics sent from a langguage server, convert them to the Linter V2 format and forward them
     * on to any attached {V2IndieDelegate}s.
     *
     * @param params The {PublishDiagnosticsParams} received from the language server that should be captured and
     *   forwarded on to any attached {V2IndieDelegate}s.
     */
    captureDiagnostics(params) {
        const path = convert_1.default.uriToPath(params.uri);
        const codeMap = new Map();
        const messages = params.diagnostics.map((d) => {
            const linterMessage = lsDiagnosticToV2Message(path, d);
            codeMap.set(getMessageKey(linterMessage), d);
            return linterMessage;
        });
        this._diagnosticMap.set(path, messages);
        this._lsDiagnosticMap.set(path, codeMap);
        this._indies.forEach((i) => i.setMessages(path, messages));
    }
    /**
     * Public: Convert a single {Diagnostic} received from a language server into a single {V2Message} expected by the
     * Linter V2 API.
     *
     * @param path A string representing the path of the file the diagnostic belongs to.
     * @param diagnostics A {Diagnostic} object received from the language server.
     * @returns A {V2Message} equivalent to the {Diagnostic} object supplied by the language server.
     */
    diagnosticToV2Message(path, diagnostic) {
        return {
            location: {
                file: path,
                position: convert_1.default.lsRangeToAtomRange(diagnostic.range),
            },
            excerpt: diagnostic.message,
            linterName: diagnostic.source,
            severity: LinterPushV2Adapter.diagnosticSeverityToSeverity(diagnostic.severity || -1),
        };
    }
    /**
     * Public: get diagnostics for the given linter messages
     *
     * @param linterMessages An array of linter {V2Message}
     * @returns An array of LS {Diagnostic[]}
     */
    getLSDiagnosticsForMessages(linterMessages) {
        return linterMessages
            .map(this.getLSDiagnosticForMessage)
            // filter out undefined
            .filter((diagnostic) => diagnostic !== undefined);
    }
    /**
     * Public: Get the {Diagnostic} that is associated with the given Base Linter v2 {Message}.
     *
     * @param message The {Message} object to fetch the {Diagnostic} for.
     * @returns The associated {Diagnostic}.
     */
    getLSDiagnosticForMessage(message) {
        var _a;
        return (_a = this._lsDiagnosticMap.get(message.location.file)) === null || _a === void 0 ? void 0 : _a.get(getMessageKey(message));
    }
    /**
     * Public: Convert a diagnostic severity number obtained from the language server into the textual equivalent for a
     * Linter {V2Message}.
     *
     * @param severity A number representing the severity of the diagnostic.
     * @returns A string of 'error', 'warning' or 'info' depending on the severity.
     */
    static diagnosticSeverityToSeverity(severity) {
        switch (severity) {
            case languageclient_1.DiagnosticSeverity.Error:
                return "error";
            case languageclient_1.DiagnosticSeverity.Warning:
                return "warning";
            case languageclient_1.DiagnosticSeverity.Information:
            case languageclient_1.DiagnosticSeverity.Hint:
            default:
                return "info";
        }
    }
}
exports.default = LinterPushV2Adapter;
/**
 * Public: Convert a single {Diagnostic} received from a language server into a single {Message} expected by the Linter V2 API.
 *
 * @param path A string representing the path of the file the diagnostic belongs to.
 * @param diagnostics A {Diagnostic} object received from the language server.
 * @returns A {Message} equivalent to the {Diagnostic} object supplied by the language server.
 */
function lsDiagnosticToV2Message(path, diagnostic) {
    var _a, _b, _c;
    return {
        location: {
            file: path,
            position: convert_1.default.lsRangeToAtomRange(diagnostic.range),
        },
        reference: relatedInformationToReference(diagnostic.relatedInformation),
        url: (_a = diagnostic.codeDescription) === null || _a === void 0 ? void 0 : _a.href,
        icon: iconForLSSeverity((_b = diagnostic.severity) !== null && _b !== void 0 ? _b : languageclient_1.DiagnosticSeverity.Error),
        excerpt: diagnostic.message,
        linterName: diagnostic.source,
        severity: lsSeverityToV2MessageSeverity((_c = diagnostic.severity) !== null && _c !== void 0 ? _c : languageclient_1.DiagnosticSeverity.Error),
        // BLOCKED: on steelbrain/linter#1722
        solutions: undefined,
    };
}
/**
 * Convert a severity level of an LSP {Diagnostic} to that of a Base Linter v2 {Message}. Note: this conversion is lossy
 * due to the v2 Message not being able to represent hints.
 *
 * @param severity A severity level of of an LSP {Diagnostic} to be converted.
 * @returns A severity level a Base Linter v2 {Message}.
 */
function lsSeverityToV2MessageSeverity(severity) {
    switch (severity) {
        case languageclient_1.DiagnosticSeverity.Error:
            return "error";
        case languageclient_1.DiagnosticSeverity.Warning:
            return "warning";
        case languageclient_1.DiagnosticSeverity.Information:
        case languageclient_1.DiagnosticSeverity.Hint:
            return "info";
        default:
            throw Error(`Unexpected diagnostic severity '${severity}'`);
    }
}
/**
 * Convert a diagnostic severity number obtained from the language server into an Octicon icon.
 *
 * @param severity A number representing the severity of the diagnostic.
 * @returns An Octicon name.
 */
function iconForLSSeverity(severity) {
    switch (severity) {
        case languageclient_1.DiagnosticSeverity.Error:
            return "stop";
        case languageclient_1.DiagnosticSeverity.Warning:
            return "warning";
        case languageclient_1.DiagnosticSeverity.Information:
            return "info";
        case languageclient_1.DiagnosticSeverity.Hint:
            return "light-bulb";
        default:
            return undefined;
    }
}
/**
 * Convert the related information from a diagnostic into a reference point for a Linter {V2Message}.
 *
 * @param relatedInfo Several related information objects (only the first is used).
 * @returns A value that is suitable for using as {V2Message}.reference.
 */
function relatedInformationToReference(relatedInfo) {
    if (relatedInfo === undefined || relatedInfo.length === 0) {
        return undefined;
    }
    const location = relatedInfo[0].location;
    return {
        file: convert_1.default.uriToPath(location.uri),
        position: convert_1.default.lsRangeToAtomRange(location.range).start,
    };
}
/**
 * Get a unique key for a Linter v2 Message
 *
 * @param message A {Message} object
 * @returns ${string} a unique key
 */
function getMessageKey(message) {
    if (typeof message.key !== "string") {
        updateMessageKey(message);
    }
    return message.key; // updateMessageKey adds message.key string
}
/**
 * Construct an unique key for a Linter v2 Message and store it in `Message.key`
 *
 * @param message A {Message} object to serialize.
 * @returns ${string} a unique key
 */
function updateMessageKey(message) {
    // From https://github.com/steelbrain/linter/blob/fadd462914ef0a8ed5b73a489f662a9393bdbe9f/lib/helpers.ts#L50-L64
    const { reference, location } = message;
    const nameStr = `$LINTER:${message.linterName}`;
    const locationStr = `$LOCATION:${location.file}$${location.position.start.row}$${location.position.start.column}$${location.position.end.row}$${location.position.end.column}`;
    const referenceStr = reference
        ? `$REFERENCE:${reference.file}$${reference.position ? `${reference.position.row}$${reference.position.column}` : ""}`
        : "$REFERENCE:null";
    const excerptStr = `$EXCERPT:${message.excerpt}`;
    const severityStr = `$SEVERITY:${message.severity}`;
    const iconStr = message.icon ? `$ICON:${message.icon}` : "$ICON:null";
    const urlStr = message.url ? `$URL:${message.url}` : "$URL:null";
    const descriptionStr = typeof message.description === "string" ? `$DESCRIPTION:${message.description}` : "$DESCRIPTION:null";
    message.key = `${nameStr}${locationStr}${referenceStr}${excerptStr}${severityStr}${iconStr}${urlStr}${descriptionStr}`;
}
//# sourceMappingURL=data:application/json;base64,