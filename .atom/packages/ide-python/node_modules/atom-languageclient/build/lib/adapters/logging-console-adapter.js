"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const languageclient_1 = require("../languageclient");
// Adapts Atom's user notifications to those of the language server protocol.
class LoggingConsoleAdapter {
    // Create a new {LoggingConsoleAdapter} that will listen for log messages
    // via the supplied {LanguageClientConnection}.
    //
    // * `connection` A {LanguageClientConnection} to the language server that will provide log messages.
    constructor(connection) {
        this._consoles = new Set();
        connection.onLogMessage(this.logMessage.bind(this));
    }
    // Dispose this adapter ensuring any resources are freed and events unhooked.
    dispose() {
        this.detachAll();
    }
    // Public: Attach this {LoggingConsoleAdapter} to a given {ConsoleApi}.
    //
    // * `console` A {ConsoleApi} that wants to receive messages.
    attach(console) {
        this._consoles.add(console);
    }
    // Public: Remove all {ConsoleApi}'s attached to this adapter.
    detachAll() {
        this._consoles.clear();
    }
    // Log a message using the Atom IDE UI Console API.
    //
    // * `params` The {LogMessageParams} received from the language server
    //            indicating the details of the message to be loggedd.
    logMessage(params) {
        switch (params.type) {
            case languageclient_1.MessageType.Error: {
                this._consoles.forEach((c) => c.error(params.message));
                return;
            }
            case languageclient_1.MessageType.Warning: {
                this._consoles.forEach((c) => c.warn(params.message));
                return;
            }
            case languageclient_1.MessageType.Info: {
                this._consoles.forEach((c) => c.info(params.message));
                return;
            }
            case languageclient_1.MessageType.Log: {
                this._consoles.forEach((c) => c.log(params.message));
                return;
            }
        }
    }
}
exports.default = LoggingConsoleAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZy1jb25zb2xlLWFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRhcHRlcnMvbG9nZ2luZy1jb25zb2xlLWFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxzREFJMkI7QUFFM0IsNkVBQTZFO0FBQzdFLE1BQXFCLHFCQUFxQjtJQUd4Qyx5RUFBeUU7SUFDekUsK0NBQStDO0lBQy9DLEVBQUU7SUFDRixxR0FBcUc7SUFDckcsWUFBWSxVQUFvQztRQU54QyxjQUFTLEdBQW9CLElBQUksR0FBRyxFQUFFLENBQUM7UUFPN0MsVUFBVSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCw2RUFBNkU7SUFDdEUsT0FBTztRQUNaLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsdUVBQXVFO0lBQ3ZFLEVBQUU7SUFDRiw2REFBNkQ7SUFDdEQsTUFBTSxDQUFDLE9BQW1CO1FBQy9CLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCw4REFBOEQ7SUFDdkQsU0FBUztRQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELG1EQUFtRDtJQUNuRCxFQUFFO0lBQ0Ysc0VBQXNFO0lBQ3RFLGtFQUFrRTtJQUMxRCxVQUFVLENBQUMsTUFBd0I7UUFDekMsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1lBQ25CLEtBQUssNEJBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELE9BQU87YUFDUjtZQUNELEtBQUssNEJBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RELE9BQU87YUFDUjtZQUNELEtBQUssNEJBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDckIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3RELE9BQU87YUFDUjtZQUNELEtBQUssNEJBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDcEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3JELE9BQU87YUFDUjtTQUNGO0lBQ0gsQ0FBQztDQUNGO0FBcERELHdDQW9EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnNvbGVBcGkgfSBmcm9tICdhdG9tLWlkZSc7XHJcbmltcG9ydCB7XHJcbiAgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxyXG4gIExvZ01lc3NhZ2VQYXJhbXMsXHJcbiAgTWVzc2FnZVR5cGUsXHJcbn0gZnJvbSAnLi4vbGFuZ3VhZ2VjbGllbnQnO1xyXG5cclxuLy8gQWRhcHRzIEF0b20ncyB1c2VyIG5vdGlmaWNhdGlvbnMgdG8gdGhvc2Ugb2YgdGhlIGxhbmd1YWdlIHNlcnZlciBwcm90b2NvbC5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9nZ2luZ0NvbnNvbGVBZGFwdGVyIHtcclxuICBwcml2YXRlIF9jb25zb2xlczogU2V0PENvbnNvbGVBcGk+ID0gbmV3IFNldCgpO1xyXG5cclxuICAvLyBDcmVhdGUgYSBuZXcge0xvZ2dpbmdDb25zb2xlQWRhcHRlcn0gdGhhdCB3aWxsIGxpc3RlbiBmb3IgbG9nIG1lc3NhZ2VzXHJcbiAgLy8gdmlhIHRoZSBzdXBwbGllZCB7TGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9ufS5cclxuICAvL1xyXG4gIC8vICogYGNvbm5lY3Rpb25gIEEge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbn0gdG8gdGhlIGxhbmd1YWdlIHNlcnZlciB0aGF0IHdpbGwgcHJvdmlkZSBsb2cgbWVzc2FnZXMuXHJcbiAgY29uc3RydWN0b3IoY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uKSB7XHJcbiAgICBjb25uZWN0aW9uLm9uTG9nTWVzc2FnZSh0aGlzLmxvZ01lc3NhZ2UuYmluZCh0aGlzKSk7XHJcbiAgfVxyXG5cclxuICAvLyBEaXNwb3NlIHRoaXMgYWRhcHRlciBlbnN1cmluZyBhbnkgcmVzb3VyY2VzIGFyZSBmcmVlZCBhbmQgZXZlbnRzIHVuaG9va2VkLlxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kZXRhY2hBbGwoKTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogQXR0YWNoIHRoaXMge0xvZ2dpbmdDb25zb2xlQWRhcHRlcn0gdG8gYSBnaXZlbiB7Q29uc29sZUFwaX0uXHJcbiAgLy9cclxuICAvLyAqIGBjb25zb2xlYCBBIHtDb25zb2xlQXBpfSB0aGF0IHdhbnRzIHRvIHJlY2VpdmUgbWVzc2FnZXMuXHJcbiAgcHVibGljIGF0dGFjaChjb25zb2xlOiBDb25zb2xlQXBpKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jb25zb2xlcy5hZGQoY29uc29sZSk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IFJlbW92ZSBhbGwge0NvbnNvbGVBcGl9J3MgYXR0YWNoZWQgdG8gdGhpcyBhZGFwdGVyLlxyXG4gIHB1YmxpYyBkZXRhY2hBbGwoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9jb25zb2xlcy5jbGVhcigpO1xyXG4gIH1cclxuXHJcbiAgLy8gTG9nIGEgbWVzc2FnZSB1c2luZyB0aGUgQXRvbSBJREUgVUkgQ29uc29sZSBBUEkuXHJcbiAgLy9cclxuICAvLyAqIGBwYXJhbXNgIFRoZSB7TG9nTWVzc2FnZVBhcmFtc30gcmVjZWl2ZWQgZnJvbSB0aGUgbGFuZ3VhZ2Ugc2VydmVyXHJcbiAgLy8gICAgICAgICAgICBpbmRpY2F0aW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBtZXNzYWdlIHRvIGJlIGxvZ2dlZGQuXHJcbiAgcHJpdmF0ZSBsb2dNZXNzYWdlKHBhcmFtczogTG9nTWVzc2FnZVBhcmFtcyk6IHZvaWQge1xyXG4gICAgc3dpdGNoIChwYXJhbXMudHlwZSkge1xyXG4gICAgICBjYXNlIE1lc3NhZ2VUeXBlLkVycm9yOiB7XHJcbiAgICAgICAgdGhpcy5fY29uc29sZXMuZm9yRWFjaCgoYykgPT4gYy5lcnJvcihwYXJhbXMubWVzc2FnZSkpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjYXNlIE1lc3NhZ2VUeXBlLldhcm5pbmc6IHtcclxuICAgICAgICB0aGlzLl9jb25zb2xlcy5mb3JFYWNoKChjKSA9PiBjLndhcm4ocGFyYW1zLm1lc3NhZ2UpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY2FzZSBNZXNzYWdlVHlwZS5JbmZvOiB7XHJcbiAgICAgICAgdGhpcy5fY29uc29sZXMuZm9yRWFjaCgoYykgPT4gYy5pbmZvKHBhcmFtcy5tZXNzYWdlKSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgTWVzc2FnZVR5cGUuTG9nOiB7XHJcbiAgICAgICAgdGhpcy5fY29uc29sZXMuZm9yRWFjaCgoYykgPT4gYy5sb2cocGFyYW1zLm1lc3NhZ2UpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19