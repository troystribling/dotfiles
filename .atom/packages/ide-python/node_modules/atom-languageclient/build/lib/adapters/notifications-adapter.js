Object.defineProperty(exports, "__esModule", {
  value: true
});

var _languageclient = require('../languageclient');

// Public: Adapts Atom's user notifications to those of the language server protocol.
class NotificationsAdapter {
  // Public: Attach to a {LanguageClientConnection} to recieve events indicating
  // when user notifications should be displayed.
  static attach(connection, name) {
    connection.onShowMessage(m => NotificationsAdapter.onShowMessage(m, name));
    connection.onShowMessageRequest(m => NotificationsAdapter.onShowMessageRequest(m, name));
  }

  static onShowMessageRequest(params, name) {
    return new Promise((resolve, reject) => {
      const options = {
        dismissable: true,
        detail: name
      };
      if (params.actions) {
        options.buttons = params.actions.map(a => ({
          text: a.title,
          onDidClick: () => {
            resolve(a);
            if (notification != null) {
              notification.dismiss();
            }
          }
        }));
      }

      const notification = addNotificationForMessage(params.type, params.message, {
        dismissable: true,
        detail: name
      });

      if (notification != null) {
        notification.onDidDismiss(() => {
          resolve(null);
        });
      }
    });
  }

  // Public: Show a notification message using the Atom notifications API.
  //
  // * `params` The {ShowMessageParams} received from the language server
  //            indicating the details of the notification to be displayed.
  // * `name`   The name of the language server so the user can identify the
  //            context of the message.
  static onShowMessage(params, name) {
    addNotificationForMessage(params.type, params.message, {
      dismissable: true,
      detail: name
    });
  }

  // Public: Convert a {MessageActionItem} from the language server into an
  // equivalent {NotificationButton} within Atom.
  //
  // * `actionItem` The {MessageActionItem} to be converted.
  //
  // Returns a {NotificationButton} equivalent to the {MessageActionItem} given.
  static actionItemToNotificationButton(actionItem) {
    return {
      text: actionItem.title
    };
  }
}

exports.default = NotificationsAdapter;
function addNotificationForMessage(messageType, message, options) {
  switch (messageType) {
    case _languageclient.MessageType.Error:
      return atom.notifications.addError(message, options);
    case _languageclient.MessageType.Warning:
      return atom.notifications.addWarning(message, options);
    case _languageclient.MessageType.Log:
      // console.log(params.message);
      return null;
    case _languageclient.MessageType.Info:
    default:
      return atom.notifications.addInfo(message, options);
  }
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9ub3RpZmljYXRpb25zLWFkYXB0ZXIuanMiXSwibmFtZXMiOlsiTm90aWZpY2F0aW9uc0FkYXB0ZXIiLCJhdHRhY2giLCJjb25uZWN0aW9uIiwibmFtZSIsIm9uU2hvd01lc3NhZ2UiLCJtIiwib25TaG93TWVzc2FnZVJlcXVlc3QiLCJwYXJhbXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9wdGlvbnMiLCJkaXNtaXNzYWJsZSIsImRldGFpbCIsImFjdGlvbnMiLCJidXR0b25zIiwibWFwIiwiYSIsInRleHQiLCJ0aXRsZSIsIm9uRGlkQ2xpY2siLCJub3RpZmljYXRpb24iLCJkaXNtaXNzIiwiYWRkTm90aWZpY2F0aW9uRm9yTWVzc2FnZSIsInR5cGUiLCJtZXNzYWdlIiwib25EaWREaXNtaXNzIiwiYWN0aW9uSXRlbVRvTm90aWZpY2F0aW9uQnV0dG9uIiwiYWN0aW9uSXRlbSIsIm1lc3NhZ2VUeXBlIiwiRXJyb3IiLCJhdG9tIiwibm90aWZpY2F0aW9ucyIsImFkZEVycm9yIiwiV2FybmluZyIsImFkZFdhcm5pbmciLCJMb2ciLCJJbmZvIiwiYWRkSW5mbyJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBOztBQVFBO0FBQ2UsTUFBTUEsb0JBQU4sQ0FBMkI7QUFDeEM7QUFDQTtBQUNBLFNBQU9DLE1BQVAsQ0FBY0MsVUFBZCxFQUFvREMsSUFBcEQsRUFBa0U7QUFDaEVELGVBQVdFLGFBQVgsQ0FBeUJDLEtBQUtMLHFCQUFxQkksYUFBckIsQ0FBbUNDLENBQW5DLEVBQXNDRixJQUF0QyxDQUE5QjtBQUNBRCxlQUFXSSxvQkFBWCxDQUFnQ0QsS0FBS0wscUJBQXFCTSxvQkFBckIsQ0FBMENELENBQTFDLEVBQTZDRixJQUE3QyxDQUFyQztBQUNEOztBQUVELFNBQU9HLG9CQUFQLENBQTRCQyxNQUE1QixFQUE4REosSUFBOUQsRUFBeUc7QUFDdkcsV0FBTyxJQUFJSyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDLFlBQU1DLFVBQW9DO0FBQ3hDQyxxQkFBYSxJQUQyQjtBQUV4Q0MsZ0JBQVFWO0FBRmdDLE9BQTFDO0FBSUEsVUFBSUksT0FBT08sT0FBWCxFQUFvQjtBQUNsQkgsZ0JBQVFJLE9BQVIsR0FBa0JSLE9BQU9PLE9BQVAsQ0FBZUUsR0FBZixDQUFtQkMsTUFBTTtBQUN6Q0MsZ0JBQU1ELEVBQUVFLEtBRGlDO0FBRXpDQyxzQkFBWSxNQUFNO0FBQ2hCWCxvQkFBUVEsQ0FBUjtBQUNBLGdCQUFJSSxnQkFBZ0IsSUFBcEIsRUFBMEI7QUFDeEJBLDJCQUFhQyxPQUFiO0FBQ0Q7QUFDRjtBQVB3QyxTQUFOLENBQW5CLENBQWxCO0FBU0Q7O0FBRUQsWUFBTUQsZUFBZUUsMEJBQTBCaEIsT0FBT2lCLElBQWpDLEVBQXVDakIsT0FBT2tCLE9BQTlDLEVBQXVEO0FBQzFFYixxQkFBYSxJQUQ2RDtBQUUxRUMsZ0JBQVFWO0FBRmtFLE9BQXZELENBQXJCOztBQUtBLFVBQUlrQixnQkFBZ0IsSUFBcEIsRUFBMEI7QUFDeEJBLHFCQUFhSyxZQUFiLENBQTBCLE1BQU07QUFDOUJqQixrQkFBUSxJQUFSO0FBQ0QsU0FGRDtBQUdEO0FBQ0YsS0EzQk0sQ0FBUDtBQTRCRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFPTCxhQUFQLENBQXFCRyxNQUFyQixFQUFnREosSUFBaEQsRUFBb0U7QUFDbEVvQiw4QkFBMEJoQixPQUFPaUIsSUFBakMsRUFBdUNqQixPQUFPa0IsT0FBOUMsRUFBdUQ7QUFDckRiLG1CQUFhLElBRHdDO0FBRXJEQyxjQUFRVjtBQUY2QyxLQUF2RDtBQUlEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU93Qiw4QkFBUCxDQUFzQ0MsVUFBdEMsRUFBOEY7QUFDNUYsV0FBTztBQUNMVixZQUFNVSxXQUFXVDtBQURaLEtBQVA7QUFHRDtBQTlEdUM7O2tCQUFyQm5CLG9CO0FBaUVyQixTQUFTdUIseUJBQVQsQ0FDRU0sV0FERixFQUVFSixPQUZGLEVBR0VkLE9BSEYsRUFJc0I7QUFDcEIsVUFBUWtCLFdBQVI7QUFDRSxTQUFLLDRCQUFZQyxLQUFqQjtBQUNFLGFBQU9DLEtBQUtDLGFBQUwsQ0FBbUJDLFFBQW5CLENBQTRCUixPQUE1QixFQUFxQ2QsT0FBckMsQ0FBUDtBQUNGLFNBQUssNEJBQVl1QixPQUFqQjtBQUNFLGFBQU9ILEtBQUtDLGFBQUwsQ0FBbUJHLFVBQW5CLENBQThCVixPQUE5QixFQUF1Q2QsT0FBdkMsQ0FBUDtBQUNGLFNBQUssNEJBQVl5QixHQUFqQjtBQUNFO0FBQ0EsYUFBTyxJQUFQO0FBQ0YsU0FBSyw0QkFBWUMsSUFBakI7QUFDQTtBQUNFLGFBQU9OLEtBQUtDLGFBQUwsQ0FBbUJNLE9BQW5CLENBQTJCYixPQUEzQixFQUFvQ2QsT0FBcEMsQ0FBUDtBQVZKO0FBWUQiLCJmaWxlIjoibm90aWZpY2F0aW9ucy1hZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcclxuXHJcbmltcG9ydCB7XHJcbiAgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxyXG4gIE1lc3NhZ2VUeXBlLFxyXG4gIHR5cGUgTWVzc2FnZUFjdGlvbkl0ZW0sXHJcbiAgdHlwZSBTaG93TWVzc2FnZVBhcmFtcyxcclxuICB0eXBlIFNob3dNZXNzYWdlUmVxdWVzdFBhcmFtcyxcclxufSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XHJcblxyXG4vLyBQdWJsaWM6IEFkYXB0cyBBdG9tJ3MgdXNlciBub3RpZmljYXRpb25zIHRvIHRob3NlIG9mIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgcHJvdG9jb2wuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGlmaWNhdGlvbnNBZGFwdGVyIHtcclxuICAvLyBQdWJsaWM6IEF0dGFjaCB0byBhIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHJlY2lldmUgZXZlbnRzIGluZGljYXRpbmdcclxuICAvLyB3aGVuIHVzZXIgbm90aWZpY2F0aW9ucyBzaG91bGQgYmUgZGlzcGxheWVkLlxyXG4gIHN0YXRpYyBhdHRhY2goY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLCBuYW1lOiBzdHJpbmcpIHtcclxuICAgIGNvbm5lY3Rpb24ub25TaG93TWVzc2FnZShtID0+IE5vdGlmaWNhdGlvbnNBZGFwdGVyLm9uU2hvd01lc3NhZ2UobSwgbmFtZSkpO1xyXG4gICAgY29ubmVjdGlvbi5vblNob3dNZXNzYWdlUmVxdWVzdChtID0+IE5vdGlmaWNhdGlvbnNBZGFwdGVyLm9uU2hvd01lc3NhZ2VSZXF1ZXN0KG0sIG5hbWUpKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBvblNob3dNZXNzYWdlUmVxdWVzdChwYXJhbXM6IFNob3dNZXNzYWdlUmVxdWVzdFBhcmFtcywgbmFtZTogc3RyaW5nKTogUHJvbWlzZTw/TWVzc2FnZUFjdGlvbkl0ZW0+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IG9wdGlvbnM6IGF0b20kTm90aWZpY2F0aW9uT3B0aW9ucyA9IHtcclxuICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcclxuICAgICAgICBkZXRhaWw6IG5hbWUsXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChwYXJhbXMuYWN0aW9ucykge1xyXG4gICAgICAgIG9wdGlvbnMuYnV0dG9ucyA9IHBhcmFtcy5hY3Rpb25zLm1hcChhID0+ICh7XHJcbiAgICAgICAgICB0ZXh0OiBhLnRpdGxlLFxyXG4gICAgICAgICAgb25EaWRDbGljazogKCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKGEpO1xyXG4gICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICBub3RpZmljYXRpb24uZGlzbWlzcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3Qgbm90aWZpY2F0aW9uID0gYWRkTm90aWZpY2F0aW9uRm9yTWVzc2FnZShwYXJhbXMudHlwZSwgcGFyYW1zLm1lc3NhZ2UsIHtcclxuICAgICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcclxuICAgICAgICBkZXRhaWw6IG5hbWUsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKG5vdGlmaWNhdGlvbiAhPSBudWxsKSB7XHJcbiAgICAgICAgbm90aWZpY2F0aW9uLm9uRGlkRGlzbWlzcygoKSA9PiB7XHJcbiAgICAgICAgICByZXNvbHZlKG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogU2hvdyBhIG5vdGlmaWNhdGlvbiBtZXNzYWdlIHVzaW5nIHRoZSBBdG9tIG5vdGlmaWNhdGlvbnMgQVBJLlxyXG4gIC8vXHJcbiAgLy8gKiBgcGFyYW1zYCBUaGUge1Nob3dNZXNzYWdlUGFyYW1zfSByZWNlaXZlZCBmcm9tIHRoZSBsYW5ndWFnZSBzZXJ2ZXJcclxuICAvLyAgICAgICAgICAgIGluZGljYXRpbmcgdGhlIGRldGFpbHMgb2YgdGhlIG5vdGlmaWNhdGlvbiB0byBiZSBkaXNwbGF5ZWQuXHJcbiAgLy8gKiBgbmFtZWAgICBUaGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHNvIHRoZSB1c2VyIGNhbiBpZGVudGlmeSB0aGVcclxuICAvLyAgICAgICAgICAgIGNvbnRleHQgb2YgdGhlIG1lc3NhZ2UuXHJcbiAgc3RhdGljIG9uU2hvd01lc3NhZ2UocGFyYW1zOiBTaG93TWVzc2FnZVBhcmFtcywgbmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBhZGROb3RpZmljYXRpb25Gb3JNZXNzYWdlKHBhcmFtcy50eXBlLCBwYXJhbXMubWVzc2FnZSwge1xyXG4gICAgICBkaXNtaXNzYWJsZTogdHJ1ZSxcclxuICAgICAgZGV0YWlsOiBuYW1lLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IENvbnZlcnQgYSB7TWVzc2FnZUFjdGlvbkl0ZW19IGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlciBpbnRvIGFuXHJcbiAgLy8gZXF1aXZhbGVudCB7Tm90aWZpY2F0aW9uQnV0dG9ufSB3aXRoaW4gQXRvbS5cclxuICAvL1xyXG4gIC8vICogYGFjdGlvbkl0ZW1gIFRoZSB7TWVzc2FnZUFjdGlvbkl0ZW19IHRvIGJlIGNvbnZlcnRlZC5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7Tm90aWZpY2F0aW9uQnV0dG9ufSBlcXVpdmFsZW50IHRvIHRoZSB7TWVzc2FnZUFjdGlvbkl0ZW19IGdpdmVuLlxyXG4gIHN0YXRpYyBhY3Rpb25JdGVtVG9Ob3RpZmljYXRpb25CdXR0b24oYWN0aW9uSXRlbTogTWVzc2FnZUFjdGlvbkl0ZW0pOiBhdG9tJE5vdGlmaWNhdGlvbkJ1dHRvbiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0ZXh0OiBhY3Rpb25JdGVtLnRpdGxlLFxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZE5vdGlmaWNhdGlvbkZvck1lc3NhZ2UoXHJcbiAgbWVzc2FnZVR5cGU6IG51bWJlcixcclxuICBtZXNzYWdlOiBzdHJpbmcsXHJcbiAgb3B0aW9uczogYXRvbSROb3RpZmljYXRpb25PcHRpb25zLFxyXG4pOiA/YXRvbSROb3RpZmljYXRpb24ge1xyXG4gIHN3aXRjaCAobWVzc2FnZVR5cGUpIHtcclxuICAgIGNhc2UgTWVzc2FnZVR5cGUuRXJyb3I6XHJcbiAgICAgIHJldHVybiBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IobWVzc2FnZSwgb3B0aW9ucyk7XHJcbiAgICBjYXNlIE1lc3NhZ2VUeXBlLldhcm5pbmc6XHJcbiAgICAgIHJldHVybiBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkV2FybmluZyhtZXNzYWdlLCBvcHRpb25zKTtcclxuICAgIGNhc2UgTWVzc2FnZVR5cGUuTG9nOlxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhwYXJhbXMubWVzc2FnZSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgY2FzZSBNZXNzYWdlVHlwZS5JbmZvOlxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIGF0b20ubm90aWZpY2F0aW9ucy5hZGRJbmZvKG1lc3NhZ2UsIG9wdGlvbnMpO1xyXG4gIH1cclxufVxyXG4iXX0=