"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const languageclient_1 = require("../languageclient");
// Public: Adapts Atom's user notifications to those of the language server protocol.
class NotificationsAdapter {
    // Public: Attach to a {LanguageClientConnection} to recieve events indicating
    // when user notifications should be displayed.
    static attach(connection, name, projectPath) {
        connection.onShowMessage((m) => NotificationsAdapter.onShowMessage(m, name, projectPath));
        connection.onShowMessageRequest((m) => NotificationsAdapter.onShowMessageRequest(m, name, projectPath));
    }
    // Public: Show a notification message with buttons using the Atom notifications API.
    //
    // * `params` The {ShowMessageRequestParams} received from the language server
    //            indicating the details of the notification to be displayed.
    // * `name`   The name of the language server so the user can identify the
    //            context of the message.
    // * `projectPath`   The path of the current project.
    static onShowMessageRequest(params, name, projectPath) {
        return new Promise((resolve, _reject) => {
            const options = {
                dismissable: true,
                detail: `${name} ${projectPath}`,
            };
            if (params.actions) {
                options.buttons = params.actions.map((a) => ({
                    text: a.title,
                    onDidClick: () => {
                        resolve(a);
                        if (notification != null) {
                            notification.dismiss();
                        }
                    },
                }));
            }
            const notification = addNotificationForMessage(params.type, params.message, options);
            if (notification != null) {
                notification.onDidDismiss(() => {
                    resolve(null);
                });
            }
        });
    }
    // Public: Show a notification message using the Atom notifications API.
    //
    // * `params` The {ShowMessageParams} received from the language server
    //            indicating the details of the notification to be displayed.
    // * `name`   The name of the language server so the user can identify the
    //            context of the message.
    // * `projectPath`   The path of the current project.
    static onShowMessage(params, name, projectPath) {
        addNotificationForMessage(params.type, params.message, {
            dismissable: true,
            detail: `${name} ${projectPath}`,
        });
    }
    // Public: Convert a {MessageActionItem} from the language server into an
    // equivalent {NotificationButton} within Atom.
    //
    // * `actionItem` The {MessageActionItem} to be converted.
    //
    // Returns a {NotificationButton} equivalent to the {MessageActionItem} given.
    static actionItemToNotificationButton(actionItem) {
        return {
            text: actionItem.title,
        };
    }
}
exports.default = NotificationsAdapter;
function messageTypeToString(messageType) {
    switch (messageType) {
        case languageclient_1.MessageType.Error: return 'error';
        case languageclient_1.MessageType.Warning: return 'warning';
        default: return 'info';
    }
}
function addNotificationForMessage(messageType, message, options) {
    function isDuplicate(note) {
        const noteDismissed = note.isDismissed && note.isDismissed();
        const noteOptions = note.getOptions && note.getOptions() || {};
        return !noteDismissed &&
            note.getType() === messageTypeToString(messageType) &&
            note.getMessage() === message &&
            noteOptions.detail === options.detail;
    }
    if (atom.notifications.getNotifications().some(isDuplicate)) {
        return null;
    }
    switch (messageType) {
        case languageclient_1.MessageType.Error:
            return atom.notifications.addError(message, options);
        case languageclient_1.MessageType.Warning:
            return atom.notifications.addWarning(message, options);
        case languageclient_1.MessageType.Log:
            // console.log(params.message);
            return null;
        case languageclient_1.MessageType.Info:
        default:
            return atom.notifications.addInfo(message, options);
    }
}
//# sourceMappingURL=data:application/json;base64,