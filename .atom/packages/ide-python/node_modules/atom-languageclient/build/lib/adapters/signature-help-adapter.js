"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const convert_1 = require("../convert");
const atom_1 = require("atom");
class SignatureHelpAdapter {
    constructor(server, grammarScopes) {
        this._disposables = new atom_1.CompositeDisposable();
        this._connection = server.connection;
        this._capabilities = server.capabilities;
        this._grammarScopes = grammarScopes;
    }
    // Returns a {Boolean} indicating this adapter can adapt the server based on the
    // given serverCapabilities.
    static canAdapt(serverCapabilities) {
        return serverCapabilities.signatureHelpProvider != null;
    }
    dispose() {
        this._disposables.dispose();
    }
    attach(register) {
        const { signatureHelpProvider } = this._capabilities;
        assert(signatureHelpProvider != null);
        let triggerCharacters;
        if (signatureHelpProvider && Array.isArray(signatureHelpProvider.triggerCharacters)) {
            triggerCharacters = new Set(signatureHelpProvider.triggerCharacters);
        }
        this._disposables.add(register({
            priority: 1,
            grammarScopes: this._grammarScopes,
            triggerCharacters,
            getSignatureHelp: this.getSignatureHelp.bind(this),
        }));
    }
    // Public: Retrieves signature help for a given editor and position.
    getSignatureHelp(editor, point) {
        return this._connection.signatureHelp(convert_1.default.editorToTextDocumentPositionParams(editor, point));
    }
}
exports.default = SignatureHelpAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLWhlbHAtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9zaWduYXR1cmUtaGVscC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWtDO0FBQ2xDLHdDQUFpQztBQUVqQywrQkFJYztBQU9kLE1BQXFCLG9CQUFvQjtJQU12QyxZQUFZLE1BQW9CLEVBQUUsYUFBdUI7UUFMakQsaUJBQVksR0FBd0IsSUFBSSwwQkFBbUIsRUFBRSxDQUFDO1FBTXBFLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNyQyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQUVELGdGQUFnRjtJQUNoRiw0QkFBNEI7SUFDckIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxrQkFBc0M7UUFDM0QsT0FBTyxrQkFBa0IsQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUM7SUFDMUQsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBdUM7UUFDbkQsTUFBTSxFQUFDLHFCQUFxQixFQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNuRCxNQUFNLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDLENBQUM7UUFFdEMsSUFBSSxpQkFBMEMsQ0FBQztRQUMvQyxJQUFJLHFCQUFxQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUNuRixpQkFBaUIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQ25CLFFBQVEsQ0FBQztZQUNQLFFBQVEsRUFBRSxDQUFDO1lBQ1gsYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ2xDLGlCQUFpQjtZQUNqQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNuRCxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxvRUFBb0U7SUFDN0QsZ0JBQWdCLENBQUMsTUFBa0IsRUFBRSxLQUFZO1FBQ3RELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsaUJBQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuRyxDQUFDO0NBQ0Y7QUE3Q0QsdUNBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXRvbUlkZSBmcm9tICdhdG9tLWlkZSc7XHJcbmltcG9ydCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKTtcclxuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XHJcbmltcG9ydCB7IEFjdGl2ZVNlcnZlciB9IGZyb20gJy4uL3NlcnZlci1tYW5hZ2VyJztcclxuaW1wb3J0IHtcclxuICBDb21wb3NpdGVEaXNwb3NhYmxlLFxyXG4gIFBvaW50LFxyXG4gIFRleHRFZGl0b3IsXHJcbn0gZnJvbSAnYXRvbSc7XHJcbmltcG9ydCB7XHJcbiAgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxyXG4gIFNlcnZlckNhcGFiaWxpdGllcyxcclxuICBTaWduYXR1cmVIZWxwLFxyXG59IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZ25hdHVyZUhlbHBBZGFwdGVyIHtcclxuICBwcml2YXRlIF9kaXNwb3NhYmxlczogQ29tcG9zaXRlRGlzcG9zYWJsZSA9IG5ldyBDb21wb3NpdGVEaXNwb3NhYmxlKCk7XHJcbiAgcHJpdmF0ZSBfY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uO1xyXG4gIHByaXZhdGUgX2NhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzO1xyXG4gIHByaXZhdGUgX2dyYW1tYXJTY29wZXM6IHN0cmluZ1tdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihzZXJ2ZXI6IEFjdGl2ZVNlcnZlciwgZ3JhbW1hclNjb3Blczogc3RyaW5nW10pIHtcclxuICAgIHRoaXMuX2Nvbm5lY3Rpb24gPSBzZXJ2ZXIuY29ubmVjdGlvbjtcclxuICAgIHRoaXMuX2NhcGFiaWxpdGllcyA9IHNlcnZlci5jYXBhYmlsaXRpZXM7XHJcbiAgICB0aGlzLl9ncmFtbWFyU2NvcGVzID0gZ3JhbW1hclNjb3BlcztcclxuICB9XHJcblxyXG4gIC8vIFJldHVybnMgYSB7Qm9vbGVhbn0gaW5kaWNhdGluZyB0aGlzIGFkYXB0ZXIgY2FuIGFkYXB0IHRoZSBzZXJ2ZXIgYmFzZWQgb24gdGhlXHJcbiAgLy8gZ2l2ZW4gc2VydmVyQ2FwYWJpbGl0aWVzLlxyXG4gIHB1YmxpYyBzdGF0aWMgY2FuQWRhcHQoc2VydmVyQ2FwYWJpbGl0aWVzOiBTZXJ2ZXJDYXBhYmlsaXRpZXMpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBzZXJ2ZXJDYXBhYmlsaXRpZXMuc2lnbmF0dXJlSGVscFByb3ZpZGVyICE9IG51bGw7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhdHRhY2gocmVnaXN0ZXI6IGF0b21JZGUuU2lnbmF0dXJlSGVscFJlZ2lzdHJ5KTogdm9pZCB7XHJcbiAgICBjb25zdCB7c2lnbmF0dXJlSGVscFByb3ZpZGVyfSA9IHRoaXMuX2NhcGFiaWxpdGllcztcclxuICAgIGFzc2VydChzaWduYXR1cmVIZWxwUHJvdmlkZXIgIT0gbnVsbCk7XHJcblxyXG4gICAgbGV0IHRyaWdnZXJDaGFyYWN0ZXJzOiBTZXQ8c3RyaW5nPiB8IHVuZGVmaW5lZDtcclxuICAgIGlmIChzaWduYXR1cmVIZWxwUHJvdmlkZXIgJiYgQXJyYXkuaXNBcnJheShzaWduYXR1cmVIZWxwUHJvdmlkZXIudHJpZ2dlckNoYXJhY3RlcnMpKSB7XHJcbiAgICAgIHRyaWdnZXJDaGFyYWN0ZXJzID0gbmV3IFNldChzaWduYXR1cmVIZWxwUHJvdmlkZXIudHJpZ2dlckNoYXJhY3RlcnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmFkZChcclxuICAgICAgcmVnaXN0ZXIoe1xyXG4gICAgICAgIHByaW9yaXR5OiAxLFxyXG4gICAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuX2dyYW1tYXJTY29wZXMsXHJcbiAgICAgICAgdHJpZ2dlckNoYXJhY3RlcnMsXHJcbiAgICAgICAgZ2V0U2lnbmF0dXJlSGVscDogdGhpcy5nZXRTaWduYXR1cmVIZWxwLmJpbmQodGhpcyksXHJcbiAgICAgIH0pLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogUmV0cmlldmVzIHNpZ25hdHVyZSBoZWxwIGZvciBhIGdpdmVuIGVkaXRvciBhbmQgcG9zaXRpb24uXHJcbiAgcHVibGljIGdldFNpZ25hdHVyZUhlbHAoZWRpdG9yOiBUZXh0RWRpdG9yLCBwb2ludDogUG9pbnQpOiBQcm9taXNlPFNpZ25hdHVyZUhlbHAgfCBudWxsPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5zaWduYXR1cmVIZWxwKENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyhlZGl0b3IsIHBvaW50KSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==