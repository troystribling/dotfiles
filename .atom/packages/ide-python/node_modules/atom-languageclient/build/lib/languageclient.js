Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileChangeType = exports.MessageType = exports.SymbolKind = exports.DocumentHighlightKind = exports.CompletionItemKind = exports.TextDocumentSyncKind = exports.DiagnosticSeverity = exports.LanguageClientConnection = undefined;

var _vscodeJsonrpc = require('vscode-jsonrpc');

var jsonrpc = _interopRequireWildcard(_vscodeJsonrpc);

var _logger = require('./logger');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

// Flow-typed wrapper around JSONRPC to implement Microsoft Language Server Protocol v2
// https://github.com/Microsoft/language-server-protocol/blob/master/versions/protocol-2-x.md
class LanguageClientConnection {

  constructor(rpc, logger) {
    this._rpc = rpc;
    this._log = logger || new _logger.NullLogger();
    this.setupLogging();
    rpc.listen();
  }

  setupLogging() {
    this._rpc.onError(error => this._log.error(['rpc.onError', error]));
    this._rpc.onUnhandledNotification(notification => {
      if (notification.method != null && notification.params != null) {
        this._log.warn(`rpc.onUnhandledNotification ${notification.method}`, notification.params);
      } else {
        this._log.warn('rpc.onUnhandledNotification', notification);
      }
    });
    this._rpc.onNotification((...args) => this._log.debug('rpc.onNotification', args));
  }

  dispose() {
    this._rpc.dispose();
  }

  // Public: Initialize the language server with necessary {InitializeParams}.
  //
  // * `params` The {InitializeParams} containing processId, rootPath, options and
  //            server capabilities.
  //
  // Returns a {Promise} containing the {InitializeResult} with details of the server's
  // capabilities.
  initialize(params) {
    return this._sendRequest('initialize', params);
  }

  // Public: Shut down the language server.
  shutdown() {
    return this._sendRequest('shutdown');
  }

  // Public: Tell the language server to exit.
  exit() {
    this._sendNotification('exit');
  }

  // Public: Register a callback for a custom message.
  //
  // * `method`   A string containing the name of the message to listen for.
  // * `callback` The function to be called when the message is received.
  //              The payload from the message is passed to the function.
  onCustom(method, callback) {
    this._onNotification({ method }, callback);
  }

  // Public: Register a callback for the 'window/showMessage' message.
  //
  // * `callback` The function to be called when the 'window/showMessage' message is
  //              received with 'ShowMessageParams' being passed as an object.
  onShowMessage(callback) {
    this._onNotification({ method: 'window/showMessage' }, callback);
  }

  // Public: Register a callback for the 'window/showMessageRequest' message.
  //
  // * `callback` The function to be called when the 'window/showMessageRequest' message is
  //              received with 'ShowMessageRequestParams' being passed as an object.
  //              Returns a promise resolved with the selected message action item (presented as
  //              button options to the atom notification)
  onShowMessageRequest(callback) {
    this._onRequest({ method: 'window/showMessageRequest' }, callback);
  }

  // Public: Register a callback for the 'window/logMessage' message.
  //
  // * `callback` The function to be called when the 'window/logMessage' message is
  //              received with 'LogMessageParams' being passed as an object.
  onLogMessage(callback) {
    this._onNotification({ method: 'window/logMessage' }, callback);
  }

  // Public: Register a callback for the 'telemetry/event' message.
  //
  // * `callback` The function to be called when the 'telemetry/event' message is
  //              received with any parameters received being passed on.
  onTelemetryEvent(callback) {
    this._onNotification({ method: 'telemetry/event' }, callback);
  }

  // Public: Register a callback for the 'workspace/applyEdit' message.
  //
  // * `callback` The function to be called when the 'workspace/applyEdit' message is
  //              received with 'ApplyWorkspaceEditParams' being passed as an object.
  //              Should return a 'ApplyWorkspaceEditResponse' message.
  onApplyEdit(callback) {
    this._onRequest({ method: 'workspace/applyEdit' }, callback);
  }

  // Public: Register a callback for the 'workspace/didChangeConfiguration' message.
  //
  // * `callback` The function to be called when the 'workspace/didChangeConfiguration' message is
  //              received with 'DidChangeConfigurationParams' being passed as an object.
  didChangeConfiguration(params) {
    this._sendNotification('workspace/didChangeConfiguration', params);
  }

  // Public: Register a callback for the 'textDocument/didOpen' message.
  //
  // * `callback` The function to be called when the 'textDocument/didOpen' message is
  //              received with 'DidOpenTextDocumentParams' being passed as an object.
  didOpenTextDocument(params) {
    this._sendNotification('textDocument/didOpen', params);
  }

  didChangeTextDocument(params) {
    this._sendNotification('textDocument/didChange', params);
  }

  didCloseTextDocument(params) {
    this._sendNotification('textDocument/didClose', params);
  }

  didSaveTextDocument(params) {
    this._sendNotification('textDocument/didSave', params);
  }

  didChangeWatchedFiles(params) {
    this._sendNotification('workspace/didChangeWatchedFiles', params);
  }

  onPublishDiagnostics(callback) {
    this._onNotification({ method: 'textDocument/publishDiagnostics' }, callback);
  }

  completion(params) {
    return this._sendRequest('textDocument/completion', params);
  }

  completionItemResolve(params) {
    return this._sendRequest('completionItem/resolve', params);
  }

  hover(params) {
    return this._sendRequest('textDocument/hover', params);
  }

  signatureHelp(params) {
    return this._sendRequest('textDocument/signatureHelp', params);
  }

  gotoDefinition(params) {
    return this._sendRequest('textDocument/definition', params);
  }

  findReferences(params) {
    return this._sendRequest('textDocument/references', params);
  }

  documentHighlight(params) {
    return this._sendRequest('textDocument/documentHighlight', params);
  }

  documentSymbol(params) {
    return this._sendRequest('textDocument/documentSymbol', params);
  }

  workspaceSymbol(params) {
    return this._sendRequest('workspace/symbol', params);
  }

  codeAction(params) {
    return this._sendRequest('textDocument/codeAction', params);
  }

  codeLens(params) {
    return this._sendRequest('textDocument/codeLens', params);
  }

  codeLensResolve(params) {
    return this._sendRequest('codeLens/resolve', params);
  }

  documentLink(params) {
    return this._sendRequest('textDocument/documentLink', params);
  }

  documentLinkResolve(params) {
    return this._sendRequest('documentLink/resolve', params);
  }

  documentFormatting(params) {
    return this._sendRequest('textDocument/formatting', params);
  }

  documentRangeFormatting(params) {
    return this._sendRequest('textDocument/rangeFormatting', params);
  }

  documentOnTypeFormatting(params) {
    return this._sendRequest('textDocument/onTypeFormatting', params);
  }

  rename(params) {
    return this._sendRequest('textDocument/rename', params);
  }

  executeCommand(params) {
    return this._sendRequest('workspace/executeCommand', params);
  }

  _onRequest(type, callback) {
    this._rpc.onRequest(type, value => {
      this._log.debug(`rpc.onRequest ${type.method}`, value);
      return callback(value);
    });
  }

  _onNotification(type, callback) {
    this._rpc.onNotification(type, value => {
      this._log.debug(`rpc.onNotification ${type.method}`, value);
      callback(value);
    });
  }

  _sendNotification(method, args) {
    this._log.debug(`rpc.sendNotification ${method}`, args);
    this._rpc.sendNotification(method, args);
  }

  async _sendRequest(method, args) {
    this._log.debug(`rpc.sendRequest ${method} sending`, args);
    try {
      const start = performance.now();
      const result = await this._rpc.sendRequest(method, args);
      const took = performance.now() - start;
      this._log.debug(`rpc.sendRequest ${method} received (${Math.floor(took)}ms)`, result);
      return result;
    } catch (e) {
      this._log.error(`rpc.sendRequest ${method} threw`, e);
      throw e;
    }
  }
}

exports.LanguageClientConnection = LanguageClientConnection; // Structures

const DiagnosticSeverity = exports.DiagnosticSeverity = {
  // Reports an error.
  Error: 1,
  // Reports a warning.
  Warning: 2,
  // Reports an information.
  Information: 3,
  // Reports a hint.
  Hint: 4
};

// General

// Defines how the host (editor) should sync document changes to the language server.
const TextDocumentSyncKind = exports.TextDocumentSyncKind = {
  //  Documents should not be synced at all.
  None: 0,
  //  Documents are synced by always sending the full content of the document.
  Full: 1,
  //  Documents are synced by sending the full content on open. After that only incremental
  //  updates to the document are sent.
  Incremental: 2
};

// Completion options.


// Signature help options.


// Code Lens options.


// Format document on type options


// Document

// Represents a collection of [completion items](#CompletionItem) to be presented in the editor.


// The kind of a completion entry.
const CompletionItemKind = exports.CompletionItemKind = {
  Text: 1,
  Method: 2,
  Function: 3,
  Constructor: 4,
  Field: 5,
  Variable: 6,
  Class: 7,
  Interface: 8,
  Module: 9,
  Property: 10,
  Unit: 11,
  Value: 12,
  Enum: 13,
  Keyword: 14,
  Snippet: 15,
  Color: 16,
  File: 17,
  Reference: 18
};

// The result of a hover request.


/**
 * The marked string is rendered:
 * - as markdown if it is represented as a string
 * - as code block of the given langauge if it is represented as a pair of a language and a value
 *
 * The pair of a language and a value is an equivalent to markdown:
 * ```${language};
 * ${value};
 * ```
 */


/**
 * Signature help represents the signature of something
 * callable. There can be multiple signature but only one
 * active and only one active parameter.
 */


/**
 * Represents the signature of something callable. A signature
 * can have a label, like a function-name, a doc-comment, and
 * a set of parameters.
 */


/**
 * Represents a parameter of a callable-signature. A parameter can
 * have a label and a doc-comment.
 */


/**
 * A document highlight is a range inside a text document which deserves
 * special attention. Usually a document highlight is visualized by changing
 * the background color of its range.
 *
 */
const DocumentHighlightKind = exports.DocumentHighlightKind = {
  // A textual occurrance.
  Text: 1,
  // Read-access of a symbol, like reading a variable.
  Read: 2,
  // Write-access of a symbol, like writing to a variable.
  Write: 3
};

/**
 * Represents information about programming constructs like variables, classes,
 * interfaces etc.
 */
const SymbolKind = exports.SymbolKind = {
  File: 1,
  Module: 2,
  Namespace: 3,
  Package: 4,
  Class: 5,
  Method: 6,
  Property: 7,
  Field: 8,
  Constructor: 9,
  Enum: 10,
  Interface: 11,
  Function: 12,
  Variable: 13,
  Constant: 14,
  String: 15,
  Number: 16,
  Boolean: 17,
  Array: 18
};

// The parameters of a Workspace Symbol Request.


// Params for the CodeActionRequest


// Contains additional diagnostic information about the context in which a code action is run.


/**
 * A code lens represents a command that should be shown along with
 * source text, like the number of references, a way to run tests, etc.
 *
 * A code lens is _unresolved_ when no command is associated to it. For performance
 * reasons the creation of a code lens and resolving should be done in two stages.
 */


/**
 * A document link is a range in a text document that links to an internal or
* external resource, like another
 * text document or a web site.
 */


// Value-object describing what options formatting should use.


// Public: Parameters to be send with a DocumentOnTypeFormatting request.


// Public: Parameters to send with a Rename request.


// Window

// Public: Details of a message to be shown to the user.


// Public: The types of messages available.
const MessageType = exports.MessageType = {
  // Public: An error message.
  Error: 1,
  // Public: A warning message.
  Warning: 2,
  // Public: An informational message.
  Info: 3,
  // Public: A log message.
  Log: 4
};

// Public: Details of a request to show a message with actions to take.


// Public: Details of an individual action that can be taken in response
// to a {ShowMessageRequest} message.


// Public: Details of the LogMessage to be handled.


// Workspace

// Public: Details of a configuration change that has occured.


// Public: Details of a text document that has been opened.


// Public: Details of a text document that has been changed.


// Public: An event describing a change to a text document.
// If range and rangeLength are omitted the new text is considered to be
// the full content of the document.


// Public: Details of text documents that has been closed.


// Public: Details of a text document that has been saved.


// Public: Details of file activities on files that are being watched.


// Public: The type of file changes that may occur.
const FileChangeType = exports.FileChangeType = {
  // Public: The file was created.
  Created: 1,
  // Public: The file was changed.
  Changed: 2,
  // Public: The file was deleted.
  Deleted: 3
};

// Public: An event describing a file change.


// Public: Parameters to send with a workspace/executeCommand request.


// Public: Parameters to receive with a workspace/applyEdit request.


// Public: Parameters to send with a workspace/applyEdit response.
//# sourceMappingURL=data:application/json;charset=utf-8;base64,