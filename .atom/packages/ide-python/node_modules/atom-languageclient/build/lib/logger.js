"use strict";
/* eslint-disable no-console */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilteredLogger = exports.NullLogger = exports.ConsoleLogger = void 0;
class ConsoleLogger {
    constructor(prefix) {
        this.prefix = prefix;
    }
    warn(...args) {
        console.warn(...this.format(args));
    }
    error(...args) {
        console.error(...this.format(args));
    }
    info(...args) {
        console.info(...this.format(args));
    }
    debug(...args) {
        console.debug(...this.format(args));
    }
    log(...args) {
        console.log(...this.format(args));
    }
    format(args_) {
        const args = args_.filter((a) => a != null);
        if (typeof args[0] === "string") {
            if (args.length === 1) {
                return [`${this.prefix} ${args[0]}`];
            }
            else if (args.length === 2) {
                return [`${this.prefix} ${args[0]}`, args[1]];
            }
            else {
                return [`${this.prefix} ${args[0]}`, args.slice(1)];
            }
        }
        return [`${this.prefix}`, args];
    }
}
exports.ConsoleLogger = ConsoleLogger;
class NullLogger {
    warn(..._args) { }
    error(..._args) { }
    info(..._args) { }
    log(..._args) { }
    debug(..._args) { }
}
exports.NullLogger = NullLogger;
class FilteredLogger {
    constructor(logger, predicate) {
        this._logger = logger;
        this._predicate = predicate || ((_level, _args) => true);
    }
    warn(...args) {
        if (this._predicate("warn", args)) {
            this._logger.warn(...args);
        }
    }
    error(...args) {
        if (this._predicate("error", args)) {
            this._logger.error(...args);
        }
    }
    info(...args) {
        if (this._predicate("info", args)) {
            this._logger.info(...args);
        }
    }
    debug(...args) {
        if (this._predicate("debug", args)) {
            this._logger.debug(...args);
        }
    }
    log(...args) {
        if (this._predicate("log", args)) {
            this._logger.log(...args);
        }
    }
}
exports.FilteredLogger = FilteredLogger;
FilteredLogger.UserLevelFilter = (level, _args) => level === "warn" || level === "error";
FilteredLogger.DeveloperLevelFilter = (_level, _args) => true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0JBQStCOzs7QUFVL0IsTUFBYSxhQUFhO0lBR3hCLFlBQVksTUFBYztRQUN4QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtJQUN0QixDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQUcsSUFBVztRQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFTSxLQUFLLENBQUMsR0FBRyxJQUFXO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVNLElBQUksQ0FBQyxHQUFHLElBQVc7UUFDeEIsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUNwQyxDQUFDO0lBRU0sS0FBSyxDQUFDLEdBQUcsSUFBVztRQUN6QixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFTSxHQUFHLENBQUMsR0FBRyxJQUFXO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7SUFDbkMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxLQUFVO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQTtRQUNoRCxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUMv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LElBQUksQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cblxuZXhwb3J0IGludGVyZmFjZSBMb2dnZXIge1xuICB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZFxuICBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWRcbiAgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWRcbiAgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZFxuICBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWRcbn1cblxuZXhwb3J0IGNsYXNzIENvbnNvbGVMb2dnZXIge1xuICBwdWJsaWMgcHJlZml4OiBzdHJpbmdcblxuICBjb25zdHJ1Y3RvcihwcmVmaXg6IHN0cmluZykge1xuICAgIHRoaXMucHJlZml4ID0gcHJlZml4XG4gIH1cblxuICBwdWJsaWMgd2FybiguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGNvbnNvbGUud2FybiguLi50aGlzLmZvcm1hdChhcmdzKSlcbiAgfVxuXG4gIHB1YmxpYyBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGNvbnNvbGUuZXJyb3IoLi4udGhpcy5mb3JtYXQoYXJncykpXG4gIH1cblxuICBwdWJsaWMgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGNvbnNvbGUuaW5mbyguLi50aGlzLmZvcm1hdChhcmdzKSlcbiAgfVxuXG4gIHB1YmxpYyBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgIGNvbnNvbGUuZGVidWcoLi4udGhpcy5mb3JtYXQoYXJncykpXG4gIH1cblxuICBwdWJsaWMgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coLi4udGhpcy5mb3JtYXQoYXJncykpXG4gIH1cblxuICBwdWJsaWMgZm9ybWF0KGFyZ3NfOiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IGFyZ3MgPSBhcmdzXy5maWx0ZXIoKGE6IGFueSkgPT4gYSAhPSBudWxsKVxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBbYCR7dGhpcy5wcmVmaXh9ICR7YXJnc1swXX1gXVxuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4gW2Ake3RoaXMucHJlZml4fSAke2FyZ3NbMF19YCwgYXJnc1sxXV1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbYCR7dGhpcy5wcmVmaXh9ICR7YXJnc1swXX1gLCBhcmdzLnNsaWNlKDEpXVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbYCR7dGhpcy5wcmVmaXh9YCwgYXJnc11cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTnVsbExvZ2dlciB7XG4gIHB1YmxpYyB3YXJuKC4uLl9hcmdzOiBhbnlbXSk6IHZvaWQge31cbiAgcHVibGljIGVycm9yKC4uLl9hcmdzOiBhbnlbXSk6IHZvaWQge31cbiAgcHVibGljIGluZm8oLi4uX2FyZ3M6IGFueVtdKTogdm9pZCB7fVxuICBwdWJsaWMgbG9nKC4uLl9hcmdzOiBhbnlbXSk6IHZvaWQge31cbiAgcHVibGljIGRlYnVnKC4uLl9hcmdzOiBhbnlbXSk6IHZvaWQge31cbn1cblxuZXhwb3J0IGNsYXNzIEZpbHRlcmVkTG9nZ2VyIHtcbiAgcHJpdmF0ZSBfbG9nZ2VyOiBMb2dnZXJcbiAgcHJpdmF0ZSBfcHJlZGljYXRlOiAobGV2ZWw6IHN0cmluZywgYXJnczogYW55W10pID0+IGJvb2xlYW5cblxuICBwdWJsaWMgc3RhdGljIFVzZXJMZXZlbEZpbHRlciA9IChsZXZlbDogc3RyaW5nLCBfYXJnczogYW55W10pOiBib29sZWFuID0+IGxldmVsID09PSBcIndhcm5cIiB8fCBsZXZlbCA9PT0gXCJlcnJvclwiXG4gIHB1YmxpYyBzdGF0aWMgRGV2ZWxvcGVyTGV2ZWxGaWx0ZXIgPSAoX2xldmVsOiBzdHJpbmcsIF9hcmdzOiBhbnlbXSk6IHRydWUgPT4gdHJ1ZVxuXG4gIGNvbnN0cnVjdG9yKGxvZ2dlcjogTG9nZ2VyLCBwcmVkaWNhdGU/OiAobGV2ZWw6IHN0cmluZywgYXJnczogYW55W10pID0+IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9sb2dnZXIgPSBsb2dnZXJcbiAgICB0aGlzLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGUgfHwgKChfbGV2ZWwsIF9hcmdzKSA9PiB0cnVlKVxuICB9XG5cbiAgcHVibGljIHdhcm4oLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fcHJlZGljYXRlKFwid2FyblwiLCBhcmdzKSkge1xuICAgICAgdGhpcy5fbG9nZ2VyLndhcm4oLi4uYXJncylcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fcHJlZGljYXRlKFwiZXJyb3JcIiwgYXJncykpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5lcnJvciguLi5hcmdzKVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZShcImluZm9cIiwgYXJncykpIHtcbiAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKC4uLmFyZ3MpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZShcImRlYnVnXCIsIGFyZ3MpKSB7XG4gICAgICB0aGlzLl9sb2dnZXIuZGVidWcoLi4uYXJncylcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZShcImxvZ1wiLCBhcmdzKSkge1xuICAgICAgdGhpcy5fbG9nZ2VyLmxvZyguLi5hcmdzKVxuICAgIH1cbiAgfVxufVxuIl19