"use strict";
// tslint:disable:no-console
Object.defineProperty(exports, "__esModule", { value: true });
class ConsoleLogger {
    constructor(prefix) {
        this.prefix = prefix;
    }
    warn(...args) {
        console.warn(...this.format(args));
    }
    error(...args) {
        console.error(...this.format(args));
    }
    info(...args) {
        console.info(...this.format(args));
    }
    debug(...args) {
        console.debug(...this.format(args));
    }
    log(...args) {
        console.log(...this.format(args));
    }
    format(args_) {
        const args = args_.filter((a) => a != null);
        if (typeof args[0] === 'string') {
            if (args.length === 1) {
                return [`${this.prefix} ${args[0]}`];
            }
            else if (args.length === 2) {
                return [`${this.prefix} ${args[0]}`, args[1]];
            }
            else {
                return [`${this.prefix} ${args[0]}`, args.slice(1)];
            }
        }
        return [`${this.prefix}`, args];
    }
}
exports.ConsoleLogger = ConsoleLogger;
class NullLogger {
    warn(...args) { }
    error(...args) { }
    info(...args) { }
    log(...args) { }
    debug(...args) { }
}
exports.NullLogger = NullLogger;
class FilteredLogger {
    constructor(logger, predicate) {
        this._logger = logger;
        this._predicate = predicate || ((level, args) => true);
    }
    warn(...args) {
        if (this._predicate('warn', args)) {
            this._logger.warn(...args);
        }
    }
    error(...args) {
        if (this._predicate('error', args)) {
            this._logger.error(...args);
        }
    }
    info(...args) {
        if (this._predicate('info', args)) {
            this._logger.info(...args);
        }
    }
    debug(...args) {
        if (this._predicate('debug', args)) {
            this._logger.debug(...args);
        }
    }
    log(...args) {
        if (this._predicate('log', args)) {
            this._logger.log(...args);
        }
    }
}
FilteredLogger.UserLevelFilter = (level, args) => level === 'warn' || level === 'error';
FilteredLogger.DeveloperLevelFilter = (level, args) => true;
exports.FilteredLogger = FilteredLogger;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUMsNEJBQTRCOztBQVU3QixNQUFhLGFBQWE7SUFHeEIsWUFBWSxNQUFjO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxJQUFJLENBQUMsR0FBRyxJQUFXO1FBQ3hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVNLEtBQUssQ0FBQyxHQUFHLElBQVc7UUFDekIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRU0sSUFBSSxDQUFDLEdBQUcsSUFBVztRQUN4QixPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxLQUFLLENBQUMsR0FBRyxJQUFXO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUFHLElBQVc7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQVU7UUFDdEIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO1FBQ2pELElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO1lBQy9C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NUUsd0NBeUNDIiwic291cmNlc0NvbnRlbnQiOlsiIC8vIHRzbGludDpkaXNhYmxlOm5vLWNvbnNvbGVcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9nZ2VyIHtcclxuICB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcclxuICBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XHJcbiAgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XHJcbiAgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZDtcclxuICBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb25zb2xlTG9nZ2VyIHtcclxuICBwdWJsaWMgcHJlZml4OiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByZWZpeDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLndhcm4oLi4udGhpcy5mb3JtYXQoYXJncykpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmVycm9yKC4uLnRoaXMuZm9ybWF0KGFyZ3MpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmluZm8oLi4udGhpcy5mb3JtYXQoYXJncykpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcbiAgICBjb25zb2xlLmRlYnVnKC4uLnRoaXMuZm9ybWF0KGFyZ3MpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBsb2coLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgIGNvbnNvbGUubG9nKC4uLnRoaXMuZm9ybWF0KGFyZ3MpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBmb3JtYXQoYXJnc186IGFueSk6IGFueSB7XHJcbiAgICBjb25zdCBhcmdzID0gYXJnc18uZmlsdGVyKChhOiBhbnkpID0+IGEgIT0gbnVsbCk7XHJcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiBbYCR7dGhpcy5wcmVmaXh9ICR7YXJnc1swXX1gXTtcclxuICAgICAgfSBlbHNlIGlmIChhcmdzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgIHJldHVybiBbYCR7dGhpcy5wcmVmaXh9ICR7YXJnc1swXX1gLCBhcmdzWzFdXTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW2Ake3RoaXMucHJlZml4fSAke2FyZ3NbMF19YCwgYXJncy5zbGljZSgxKV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gW2Ake3RoaXMucHJlZml4fWAsIGFyZ3NdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE51bGxMb2dnZXIge1xyXG4gIHB1YmxpYyB3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7fVxyXG4gIHB1YmxpYyBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQge31cclxuICBwdWJsaWMgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge31cclxuICBwdWJsaWMgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7fVxyXG4gIHB1YmxpYyBkZWJ1ZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge31cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlcmVkTG9nZ2VyIHtcclxuICBwcml2YXRlIF9sb2dnZXI6IExvZ2dlcjtcclxuICBwcml2YXRlIF9wcmVkaWNhdGU6IChsZXZlbDogc3RyaW5nLCBhcmdzOiBhbnlbXSkgPT4gYm9vbGVhbjtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBVc2VyTGV2ZWxGaWx0ZXIgPSAobGV2ZWw6IHN0cmluZywgYXJnczogYW55W10pID0+IGxldmVsID09PSAnd2FybicgfHwgbGV2ZWwgPT09ICdlcnJvcic7XHJcbiAgcHVibGljIHN0YXRpYyBEZXZlbG9wZXJMZXZlbEZpbHRlciA9IChsZXZlbDogc3RyaW5nLCBhcmdzOiBhbnlbXSkgPT4gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IobG9nZ2VyOiBMb2dnZXIsIHByZWRpY2F0ZT86IChsZXZlbDogc3RyaW5nLCBhcmdzOiBhbnlbXSkgPT4gYm9vbGVhbikge1xyXG4gICAgdGhpcy5fbG9nZ2VyID0gbG9nZ2VyO1xyXG4gICAgdGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlIHx8ICgobGV2ZWwsIGFyZ3MpID0+IHRydWUpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHdhcm4oLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9wcmVkaWNhdGUoJ3dhcm4nLCBhcmdzKSkge1xyXG4gICAgICB0aGlzLl9sb2dnZXIud2FybiguLi5hcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZSgnZXJyb3InLCBhcmdzKSkge1xyXG4gICAgICB0aGlzLl9sb2dnZXIuZXJyb3IoLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuX3ByZWRpY2F0ZSgnaW5mbycsIGFyZ3MpKSB7XHJcbiAgICAgIHRoaXMuX2xvZ2dlci5pbmZvKC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fcHJlZGljYXRlKCdkZWJ1ZycsIGFyZ3MpKSB7XHJcbiAgICAgIHRoaXMuX2xvZ2dlci5kZWJ1ZyguLi5hcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBsb2coLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9wcmVkaWNhdGUoJ2xvZycsIGFyZ3MpKSB7XHJcbiAgICAgIHRoaXMuX2xvZ2dlci5sb2coLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==