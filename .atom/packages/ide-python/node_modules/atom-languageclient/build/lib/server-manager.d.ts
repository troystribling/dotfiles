/// <reference types="node" />
import DocumentSyncAdapter from './adapters/document-sync-adapter';
import LinterPushV2Adapter from './adapters/linter-push-v2-adapter';
import LoggingConsoleAdapter from './adapters/logging-console-adapter';
import SignatureHelpAdapter from './adapters/signature-help-adapter';
import * as stream from 'stream';
import * as ls from './languageclient';
import * as atomIde from 'atom-ide';
import { EventEmitter } from 'events';
import { Logger } from './logger';
import { CompositeDisposable, ProjectFileEvent, TextEditor } from 'atom';
export interface LanguageServerProcess extends EventEmitter {
    stdin: stream.Writable;
    stdout: stream.Readable;
    stderr: stream.Readable;
    pid: number;
    kill(signal?: string): void;
    on(event: 'error', listener: (err: Error) => void): this;
    on(event: 'exit', listener: (code: number, signal: string) => void): this;
}
export interface ActiveServer {
    disposable: CompositeDisposable;
    projectPath: string;
    process: LanguageServerProcess;
    connection: ls.LanguageClientConnection;
    capabilities: ls.ServerCapabilities;
    linterPushV2?: LinterPushV2Adapter;
    loggingConsole?: LoggingConsoleAdapter;
    docSyncAdapter?: DocumentSyncAdapter;
    signatureHelpAdapter?: SignatureHelpAdapter;
}
export declare class ServerManager {
    private _activeServers;
    private _startingServerPromises;
    private _restartCounterPerProject;
    private _stoppingServers;
    private _disposable;
    private _editorToServer;
    private _logger;
    private _normalizedProjectPaths;
    private _startForEditor;
    private _startServer;
    private _changeWatchedFileFilter;
    private _getBusySignalService;
    private _languageServerName;
    private _isStarted;
    constructor(startServer: (projectPath: string) => Promise<ActiveServer>, logger: Logger, startForEditor: (editor: TextEditor) => boolean, changeWatchedFileFilter: (filePath: string) => boolean, busySignalServiceGetter: () => atomIde.BusySignalService | null, languageServerName: string);
    startListening(): void;
    stopListening(): void;
    private observeTextEditors(editor);
    private _handleTextEditor(editor);
    private _handleGrammarChange(editor);
    getActiveServers(): ActiveServer[];
    getServer(textEditor: TextEditor, {shouldStart}?: {
        shouldStart?: boolean;
    }): Promise<ActiveServer | null>;
    startServer(projectPath: string): Promise<ActiveServer>;
    stopUnusedServers(): Promise<void>;
    stopAllServers(): Promise<void>;
    restartAllServers(): Promise<void>;
    hasServerReachedRestartLimit(server: ActiveServer): boolean;
    stopServer(server: ActiveServer): Promise<void>;
    exitServer(server: ActiveServer): void;
    terminate(): void;
    determineProjectPath(textEditor: TextEditor): string | null;
    updateNormalizedProjectPaths(): void;
    normalizePath(projectPath: string): string;
    projectPathsChanged(projectPaths: string[]): Promise<void>;
    projectFilesChanged(fileEvents: ProjectFileEvent[]): void;
}
