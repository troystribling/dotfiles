"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.considerAdditionalPath = exports.normalizePath = exports.normalizedProjectPathToWorkspaceFolder = exports.projectPathToWorkspaceFolder = exports.ServerManager = void 0;
const convert_1 = require("./convert");
const path = require("path");
const atom_1 = require("atom");
/** Manages the language server lifecycles and their associated objects necessary for adapting them to Atom IDE. */
class ServerManager {
    constructor(_startServer, _logger, _startForEditor, _changeWatchedFileFilter, _reportBusyWhile, _languageServerName, _determineProjectPath, shutdownGracefully) {
        this._startServer = _startServer;
        this._logger = _logger;
        this._startForEditor = _startForEditor;
        this._changeWatchedFileFilter = _changeWatchedFileFilter;
        this._reportBusyWhile = _reportBusyWhile;
        this._languageServerName = _languageServerName;
        this._determineProjectPath = _determineProjectPath;
        this.shutdownGracefully = shutdownGracefully;
        this._activeServers = [];
        this._startingServerPromises = new Map();
        this._restartCounterPerProject = new Map();
        this._stoppingServers = [];
        this._disposable = new atom_1.CompositeDisposable();
        this._editorToServer = new Map();
        this._normalizedProjectPaths = [];
        this._previousNormalizedProjectPaths = undefined; // TODO we should not hold a separate cache
        this._isStarted = false;
        /** @deprecated Use the exported `normalizePath` function */
        this.normalizePath = normalizePath;
        this.updateNormalizedProjectPaths();
    }
    startListening() {
        if (!this._isStarted) {
            this._disposable = new atom_1.CompositeDisposable();
            this._disposable.add(atom.textEditors.observe(this.observeTextEditors.bind(this)));
            this._disposable.add(atom.project.onDidChangePaths(this.projectPathsChanged.bind(this)));
            if (atom.project.onDidChangeFiles) {
                this._disposable.add(atom.project.onDidChangeFiles(this.projectFilesChanged.bind(this)));
            }
        }
        this._isStarted = true;
    }
    stopListening() {
        if (this._isStarted) {
            this._disposable.dispose();
            this._isStarted = false;
        }
    }
    observeTextEditors(editor) {
        // Track grammar changes for opened editors
        const listener = editor.observeGrammar((_grammar) => this._handleGrammarChange(editor));
        this._disposable.add(editor.onDidDestroy(() => listener.dispose()));
        // Try to see if editor can have LS connected to it
        this._handleTextEditor(editor);
    }
    _handleTextEditor(editor) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._editorToServer.has(editor)) {
                // editor hasn't been processed yet, so process it by allocating LS for it if necessary
                const server = yield this.getServer(editor, { shouldStart: true });
                if (server != null) {
                    // There LS for the editor (either started now and already running)
                    this._editorToServer.set(editor, server);
                    this._disposable.add(editor.onDidDestroy(() => {
                        this._editorToServer.delete(editor);
                        this.stopUnusedServers();
                    }));
                }
            }
        });
    }
    _handleGrammarChange(editor) {
        if (this._startForEditor(editor)) {
            // If editor is interesting for LS process the editor further to attempt to start LS if needed
            this._handleTextEditor(editor);
        }
        else {
            // Editor is not supported by the LS
            const server = this._editorToServer.get(editor);
            // If LS is running for the unsupported editor then disconnect the editor from LS and shut down LS if necessary
            if (server) {
                // Remove editor from the cache
                this._editorToServer.delete(editor);
                // Shut down LS if it's used by any other editor
                this.stopUnusedServers();
            }
        }
    }
    getActiveServers() {
        return this._activeServers;
    }
    getServer(textEditor, { shouldStart } = { shouldStart: false }) {
        return __awaiter(this, void 0, void 0, function* () {
            const finalProjectPath = this._determineProjectPath(textEditor);
            if (finalProjectPath == null) {
                // Files not yet saved have no path
                return null;
            }
            const foundActiveServer = this._activeServers.find((s) => finalProjectPath === s.projectPath);
            if (foundActiveServer) {
                return foundActiveServer;
            }
            const startingPromise = this._startingServerPromises.get(finalProjectPath);
            if (startingPromise) {
                return startingPromise;
            }
            // TODO remove eslint-disable
            // eslint-disable-next-line no-return-await
            return shouldStart && this._startForEditor(textEditor) ? yield this.startServer(finalProjectPath) : null;
        });
    }
    startServer(projectPath) {
        return __awaiter(this, void 0, void 0, function* () {
            this._logger.debug(`Server starting "${projectPath}"`);
            const startingPromise = this._startServer(projectPath);
            this._startingServerPromises.set(projectPath, startingPromise);
            try {
                const startedActiveServer = yield startingPromise;
                this._activeServers.push(startedActiveServer);
                this._startingServerPromises.delete(projectPath);
                this._logger.debug(`Server started "${projectPath}" (pid ${startedActiveServer.process.pid})`);
                return startedActiveServer;
            }
            catch (e) {
                this._startingServerPromises.delete(projectPath);
                throw e;
            }
        });
    }
    stopUnusedServers() {
        return __awaiter(this, void 0, void 0, function* () {
            const usedServers = new Set(this._editorToServer.values());
            const unusedServers = this._activeServers.filter((s) => !usedServers.has(s));
            if (unusedServers.length > 0) {
                this._logger.debug(`Stopping ${unusedServers.length} unused servers`);
                yield Promise.all(unusedServers.map((s) => this.stopServer(s)));
            }
        });
    }
    stopAllServers() {
        return __awaiter(this, void 0, void 0, function* () {
            for (const [projectPath, restartCounter] of this._restartCounterPerProject) {
                clearTimeout(restartCounter.timerId);
                this._restartCounterPerProject.delete(projectPath);
            }
            yield Promise.all(this._activeServers.map((s) => this.stopServer(s)));
        });
    }
    restartAllServers() {
        return __awaiter(this, void 0, void 0, function* () {
            this.stopListening();
            yield this.stopAllServers();
            this._editorToServer = new Map();
            this.startListening();
        });
    }
    hasServerReachedRestartLimit(server) {
        let restartCounter = this._restartCounterPerProject.get(server.projectPath);
        if (!restartCounter) {
            restartCounter = {
                restarts: 0,
                timerId: setTimeout(() => {
                    this._restartCounterPerProject.delete(server.projectPath);
                }, 3 * 60 * 1000 /* 3 minutes */),
            };
            this._restartCounterPerProject.set(server.projectPath, restartCounter);
        }
        return ++restartCounter.restarts > 5;
    }
    stopServer(server) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this._reportBusyWhile(`Stopping ${this._languageServerName} for ${path.basename(server.projectPath)}`, () => __awaiter(this, void 0, void 0, function* () {
                this._logger.debug(`Server stopping "${server.projectPath}"`);
                // Immediately remove the server to prevent further usage.
                // If we re-open the file after this point, we'll get a new server.
                this._activeServers.splice(this._activeServers.indexOf(server), 1);
                this._stoppingServers.push(server);
                server.disposable.dispose();
                if (this.shutdownGracefully && server.connection.isConnected) {
                    yield server.connection.shutdown();
                }
                for (const [editor, mappedServer] of this._editorToServer) {
                    if (mappedServer === server) {
                        this._editorToServer.delete(editor);
                    }
                }
                this.exitServer(server);
                this._stoppingServers.splice(this._stoppingServers.indexOf(server), 1);
            }));
        });
    }
    exitServer(server) {
        const pid = server.process.pid;
        try {
            if (server.connection.isConnected) {
                server.connection.exit();
                server.connection.dispose();
            }
        }
        finally {
            server.process.kill();
        }
        this._logger.debug(`Server stopped "${server.projectPath}" (pid ${pid})`);
    }
    terminate() {
        this._stoppingServers.forEach((server) => {
            this._logger.debug(`Server terminating "${server.projectPath}"`);
            this.exitServer(server);
        });
    }
    updateNormalizedProjectPaths() {
        this._normalizedProjectPaths = atom.project.getPaths().map(normalizePath);
    }
    getNormalizedProjectPaths() {
        return this._normalizedProjectPaths;
    }
    /**
     * Public: fetch the current open list of workspace folders
     *
     * @returns A {Promise} containing an {Array} of {lsp.WorkspaceFolder[]} or {null} if only a single file is open in the tool.
     */
    getWorkspaceFolders() {
        // NOTE the method must return a Promise based on the specification
        const projectPaths = this.getNormalizedProjectPaths();
        if (projectPaths.length === 0) {
            // only a single file is open
            return Promise.resolve(null);
        }
        else {
            return Promise.resolve(projectPaths.map(normalizedProjectPathToWorkspaceFolder));
        }
    }
    projectPathsChanged(projectPaths) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const pathsAll = projectPaths.map(normalizePath);
            const previousPaths = (_a = this._previousNormalizedProjectPaths) !== null && _a !== void 0 ? _a : this.getNormalizedProjectPaths();
            const pathsRemoved = previousPaths.filter((projectPath) => !pathsAll.includes(projectPath));
            const pathsAdded = pathsAll.filter((projectPath) => !previousPaths.includes(projectPath));
            // update cache
            this._previousNormalizedProjectPaths = pathsAll;
            // send didChangeWorkspaceFolders
            const didChangeWorkspaceFoldersParams = {
                event: {
                    added: pathsAdded.map(normalizedProjectPathToWorkspaceFolder),
                    removed: pathsRemoved.map(normalizedProjectPathToWorkspaceFolder),
                },
            };
            for (const activeServer of this._activeServers) {
                activeServer.connection.didChangeWorkspaceFolders(didChangeWorkspaceFoldersParams);
            }
            // stop the servers that don't have projectPath
            const serversToStop = this._activeServers.filter((server) => pathsRemoved.includes(server.projectPath));
            yield Promise.all(serversToStop.map((s) => this.stopServer(s)));
            // update this._normalizedProjectPaths
            this.updateNormalizedProjectPaths();
        });
    }
    projectFilesChanged(fileEvents) {
        if (this._activeServers.length === 0) {
            return;
        }
        for (const activeServer of this._activeServers) {
            const changes = [];
            for (const fileEvent of fileEvents) {
                if (fileEvent.path.startsWith(activeServer.projectPath) && this._changeWatchedFileFilter(fileEvent.path)) {
                    changes.push(convert_1.default.atomFileEventToLSFileEvents(fileEvent)[0]);
                }
                if (fileEvent.action === "renamed" &&
                    fileEvent.oldPath.startsWith(activeServer.projectPath) &&
                    this._changeWatchedFileFilter(fileEvent.oldPath)) {
                    changes.push(convert_1.default.atomFileEventToLSFileEvents(fileEvent)[1]);
                }
            }
            if (changes.length > 0) {
                activeServer.connection.didChangeWatchedFiles({ changes });
            }
        }
    }
}
exports.ServerManager = ServerManager;
function projectPathToWorkspaceFolder(projectPath) {
    const normalizedProjectPath = normalizePath(projectPath);
    return normalizedProjectPathToWorkspaceFolder(normalizedProjectPath);
}
exports.projectPathToWorkspaceFolder = projectPathToWorkspaceFolder;
function normalizedProjectPathToWorkspaceFolder(normalizedProjectPath) {
    return {
        uri: convert_1.default.pathToUri(normalizedProjectPath),
        name: path.basename(normalizedProjectPath),
    };
}
exports.normalizedProjectPathToWorkspaceFolder = normalizedProjectPathToWorkspaceFolder;
function normalizePath(projectPath) {
    return !projectPath.endsWith(path.sep) ? path.join(projectPath, path.sep) : projectPath;
}
exports.normalizePath = normalizePath;
/** Considers a path for inclusion in `additionalPaths`. */
function considerAdditionalPath(server, additionalPath) {
    if (!additionalPath.startsWith(server.projectPath)) {
        server.additionalPaths.add(additionalPath);
    }
}
exports.considerAdditionalPath = considerAdditionalPath;
//# sourceMappingURL=data:application/json;base64,