var _chai = require('chai');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _applyEditAdapter = require('../../lib/adapters/apply-edit-adapter');

var _applyEditAdapter2 = _interopRequireDefault(_applyEditAdapter);

var _convert = require('../../lib/convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const TEST_PATH1 = _path2.default.join(__dirname, 'test.txt');
const TEST_PATH2 = _path2.default.join(__dirname, 'test2.txt');
const TEST_PATH3 = _path2.default.join(__dirname, 'test3.txt');
const TEST_PATH4 = _path2.default.join(__dirname, 'test4.txt');

describe('ApplyEditAdapter', () => {
  describe('onApplyEdit', () => {
    beforeEach(() => {
      _sinon2.default.spy(atom.notifications, 'addError');
    });

    afterEach(() => {
      atom.notifications.addError.restore();
    });

    it('works for open files', _asyncToGenerator(function* () {
      const editor = yield atom.workspace.open(TEST_PATH1);
      editor.setText('abc\ndef\n');

      const result = yield _applyEditAdapter2.default.onApplyEdit({
        edit: {
          changes: {
            [_convert2.default.pathToUri(TEST_PATH1)]: [{
              range: {
                start: { line: 0, character: 0 },
                end: { line: 0, character: 3 }
              },
              newText: 'def'
            }, {
              range: {
                start: { line: 1, character: 0 },
                end: { line: 1, character: 3 }
              },
              newText: 'ghi'
            }]
          }
        }
      });

      (0, _chai.expect)(result.applied).to.equal(true);
      (0, _chai.expect)(editor.getText()).to.equal('def\nghi\n');

      // Undo should be atomic.
      editor.getBuffer().undo();
      (0, _chai.expect)(editor.getText()).to.equal('abc\ndef\n');
    }));

    it('opens files that are not already open', _asyncToGenerator(function* () {
      const result = yield _applyEditAdapter2.default.onApplyEdit({
        edit: {
          changes: {
            [TEST_PATH2]: [{
              range: {
                start: { line: 0, character: 0 },
                end: { line: 0, character: 0 }
              },
              newText: 'abc'
            }]
          }
        }
      });

      (0, _chai.expect)(result.applied).to.equal(true);
      const editor = yield atom.workspace.open(TEST_PATH2);
      (0, _chai.expect)(editor.getText()).to.equal('abc');
    }));

    it('fails with overlapping edits', _asyncToGenerator(function* () {
      const editor = yield atom.workspace.open(TEST_PATH3);
      editor.setText('abcdef\n');

      const result = yield _applyEditAdapter2.default.onApplyEdit({
        edit: {
          changes: {
            [TEST_PATH3]: [{
              range: {
                start: { line: 0, character: 0 },
                end: { line: 0, character: 3 }
              },
              newText: 'def'
            }, {
              range: {
                start: { line: 0, character: 2 },
                end: { line: 0, character: 4 }
              },
              newText: 'ghi'
            }]
          }
        }
      });

      (0, _chai.expect)(result.applied).to.equal(false);
      (0, _chai.expect)(atom.notifications.addError.calledWith('workspace/applyEdits failed', {
        description: 'Failed to apply edits.',
        detail: `Found overlapping edit ranges in ${TEST_PATH3}`
      })).to.equal(true);
      // No changes.
      (0, _chai.expect)(editor.getText()).to.equal('abcdef\n');
    }));

    it('fails with out-of-range edits', _asyncToGenerator(function* () {
      const result = yield _applyEditAdapter2.default.onApplyEdit({
        edit: {
          changes: {
            [TEST_PATH4]: [{
              range: {
                start: { line: 0, character: 1 },
                end: { line: 0, character: 2 }
              },
              newText: 'def'
            }]
          }
        }
      });

      (0, _chai.expect)(result.applied).to.equal(false);
      const errorCalls = atom.notifications.addError.getCalls();
      (0, _chai.expect)(errorCalls.length).to.equal(1);
      (0, _chai.expect)(errorCalls[0].args[1].detail).to.equal(`Out of range edit on ${TEST_PATH4}:1:2`);
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,