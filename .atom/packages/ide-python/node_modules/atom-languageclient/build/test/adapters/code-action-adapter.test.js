var _atom = require('atom');

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _codeActionAdapter = require('../../lib/adapters/code-action-adapter');

var _codeActionAdapter2 = _interopRequireDefault(_codeActionAdapter);

var _linterPushV2Adapter = require('../../lib/adapters/linter-push-v2-adapter');

var _linterPushV2Adapter2 = _interopRequireDefault(_linterPushV2Adapter);

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('CodeActionAdapter', () => {
  describe('canAdapt', () => {
    it('returns true if range formatting is supported', () => {
      const result = _codeActionAdapter2.default.canAdapt({
        codeActionProvider: true
      });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false it no formatting supported', () => {
      const result = _codeActionAdapter2.default.canAdapt({});
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('getCodeActions', () => {
    it('fetches code actions from the connection', async () => {
      const connection = (0, _helpers.createSpyConnection)();
      const languageClient = new ls.LanguageClientConnection(connection);
      const testCommand = {
        command: 'testCommand',
        title: 'Test Command',
        arguments: ['a', 'b']
      };
      _sinon2.default.stub(languageClient, 'codeAction').returns(Promise.resolve([testCommand]));
      _sinon2.default.spy(languageClient, 'executeCommand');

      const linterAdapter = new _linterPushV2Adapter2.default(languageClient);
      _sinon2.default.stub(linterAdapter, 'getDiagnosticCode').returns('test code');

      const testPath = '/test.txt';
      const actions = await _codeActionAdapter2.default.getCodeActions(languageClient, { codeActionProvider: true }, linterAdapter, (0, _helpers.createFakeEditor)(testPath), new _atom.Range([1, 2], [3, 4]), [{
        filePath: testPath,
        type: 'Error',
        text: 'test message',
        range: new _atom.Range([1, 2], [3, 3]),
        providerName: 'test linter'
      }]);

      (0, _chai.expect)(languageClient.codeAction.called).to.be.true;
      const args = languageClient.codeAction.getCalls()[0].args;
      const params = args[0];
      (0, _chai.expect)(params.textDocument.uri).to.equal('file://' + testPath);
      (0, _chai.expect)(params.range).to.deep.equal({
        start: { line: 1, character: 2 },
        end: { line: 3, character: 4 }
      });
      (0, _chai.expect)(params.context.diagnostics).to.deep.equal([{
        range: {
          start: { line: 1, character: 2 },
          end: { line: 3, character: 3 }
        },
        severity: ls.DiagnosticSeverity.Error,
        code: 'test code',
        source: 'test linter',
        message: 'test message'
      }]);

      (0, _chai.expect)(actions.length).to.equal(1);
      const codeAction = actions[0];
      (0, _chai.expect)((await codeAction.getTitle())).to.equal('Test Command');
      await codeAction.apply();
      (0, _chai.expect)(languageClient.executeCommand.called).to.be.true;
      (0, _chai.expect)(languageClient.executeCommand.getCalls()[0].args).to.deep.equal([{
        command: 'testCommand',
        arguments: ['a', 'b']
      }]);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvY29kZS1hY3Rpb24tYWRhcHRlci50ZXN0LmpzIl0sIm5hbWVzIjpbImxzIiwiZGVzY3JpYmUiLCJpdCIsInJlc3VsdCIsImNhbkFkYXB0IiwiY29kZUFjdGlvblByb3ZpZGVyIiwidG8iLCJiZSIsInRydWUiLCJmYWxzZSIsImNvbm5lY3Rpb24iLCJsYW5ndWFnZUNsaWVudCIsIkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbiIsInRlc3RDb21tYW5kIiwiY29tbWFuZCIsInRpdGxlIiwiYXJndW1lbnRzIiwic3R1YiIsInJldHVybnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNweSIsImxpbnRlckFkYXB0ZXIiLCJ0ZXN0UGF0aCIsImFjdGlvbnMiLCJnZXRDb2RlQWN0aW9ucyIsImZpbGVQYXRoIiwidHlwZSIsInRleHQiLCJyYW5nZSIsInByb3ZpZGVyTmFtZSIsImNvZGVBY3Rpb24iLCJjYWxsZWQiLCJhcmdzIiwiZ2V0Q2FsbHMiLCJwYXJhbXMiLCJ0ZXh0RG9jdW1lbnQiLCJ1cmkiLCJlcXVhbCIsImRlZXAiLCJzdGFydCIsImxpbmUiLCJjaGFyYWN0ZXIiLCJlbmQiLCJjb250ZXh0IiwiZGlhZ25vc3RpY3MiLCJzZXZlcml0eSIsIkRpYWdub3N0aWNTZXZlcml0eSIsIkVycm9yIiwiY29kZSIsInNvdXJjZSIsIm1lc3NhZ2UiLCJsZW5ndGgiLCJnZXRUaXRsZSIsImFwcGx5IiwiZXhlY3V0ZUNvbW1hbmQiXSwibWFwcGluZ3MiOiJBQUVBOztBQUNBOztBQUNBOzs7O0FBQ0E7O0lBQVlBLEU7O0FBQ1o7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQUMsU0FBUyxtQkFBVCxFQUE4QixNQUFNO0FBQ2xDQSxXQUFTLFVBQVQsRUFBcUIsTUFBTTtBQUN6QkMsT0FBRywrQ0FBSCxFQUFvRCxNQUFNO0FBQ3hELFlBQU1DLFNBQVMsNEJBQWtCQyxRQUFsQixDQUEyQjtBQUN4Q0MsNEJBQW9CO0FBRG9CLE9BQTNCLENBQWY7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QVEsYUFQVjtBQVFFQyxpQkFBUztBQVJYLE9BRCtDLENBQWpEOztBQWFBLHdCQUFPM0IsUUFBUTRCLE1BQWYsRUFBdUI5QyxFQUF2QixDQUEwQmdDLEtBQTFCLENBQWdDLENBQWhDO0FBQ0EsWUFBTVAsYUFBYVAsUUFBUSxDQUFSLENBQW5CO0FBQ0EseUJBQU8sTUFBTU8sV0FBV3NCLFFBQVgsRUFBYixHQUFvQy9DLEVBQXBDLENBQXVDZ0MsS0FBdkMsQ0FBNkMsY0FBN0M7QUFDQSxZQUFNUCxXQUFXdUIsS0FBWCxFQUFOO0FBQ0Esd0JBQU8zQyxlQUFlNEMsY0FBZixDQUE4QnZCLE1BQXJDLEVBQTZDMUIsRUFBN0MsQ0FBZ0RDLEVBQWhELENBQW1EQyxJQUFuRDtBQUNBLHdCQUFPRyxlQUFlNEMsY0FBZixDQUE4QnJCLFFBQTlCLEdBQXlDLENBQXpDLEVBQTRDRCxJQUFuRCxFQUF5RDNCLEVBQXpELENBQTREaUMsSUFBNUQsQ0FBaUVELEtBQWpFLENBQXVFLENBQ3JFO0FBQ0V4QixpQkFBUyxhQURYO0FBRUVFLG1CQUFXLENBQUMsR0FBRCxFQUFNLEdBQU47QUFGYixPQURxRSxDQUF2RTtBQU1ELEtBaEVEO0FBaUVELEdBbEVEO0FBbUVELENBbEZEIiwiZmlsZSI6ImNvZGUtYWN0aW9uLWFkYXB0ZXIudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7UmFuZ2V9IGZyb20gJ2F0b20nO1xuaW1wb3J0IHtleHBlY3R9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQgQ29kZUFjdGlvbkFkYXB0ZXIgZnJvbSAnLi4vLi4vbGliL2FkYXB0ZXJzL2NvZGUtYWN0aW9uLWFkYXB0ZXInO1xuaW1wb3J0IExpbnRlclB1c2hWMkFkYXB0ZXIgZnJvbSAnLi4vLi4vbGliL2FkYXB0ZXJzL2xpbnRlci1wdXNoLXYyLWFkYXB0ZXInO1xuaW1wb3J0IHtjcmVhdGVTcHlDb25uZWN0aW9uLCBjcmVhdGVGYWtlRWRpdG9yfSBmcm9tICcuLi9oZWxwZXJzLmpzJztcblxuZGVzY3JpYmUoJ0NvZGVBY3Rpb25BZGFwdGVyJywgKCkgPT4ge1xuICBkZXNjcmliZSgnY2FuQWRhcHQnLCAoKSA9PiB7XG4gICAgaXQoJ3JldHVybnMgdHJ1ZSBpZiByYW5nZSBmb3JtYXR0aW5nIGlzIHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IENvZGVBY3Rpb25BZGFwdGVyLmNhbkFkYXB0KHtcbiAgICAgICAgY29kZUFjdGlvblByb3ZpZGVyOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS50cnVlO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgZmFsc2UgaXQgbm8gZm9ybWF0dGluZyBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBDb2RlQWN0aW9uQWRhcHRlci5jYW5BZGFwdCh7fSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS5mYWxzZTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldENvZGVBY3Rpb25zJywgKCkgPT4ge1xuICAgIGl0KCdmZXRjaGVzIGNvZGUgYWN0aW9ucyBmcm9tIHRoZSBjb25uZWN0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGNyZWF0ZVNweUNvbm5lY3Rpb24oKTtcbiAgICAgIGNvbnN0IGxhbmd1YWdlQ2xpZW50ID0gbmV3IGxzLkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbihjb25uZWN0aW9uKTtcbiAgICAgIGNvbnN0IHRlc3RDb21tYW5kOiBscy5Db21tYW5kID0ge1xuICAgICAgICBjb21tYW5kOiAndGVzdENvbW1hbmQnLFxuICAgICAgICB0aXRsZTogJ1Rlc3QgQ29tbWFuZCcsXG4gICAgICAgIGFyZ3VtZW50czogWydhJywgJ2InXSxcbiAgICAgIH07XG4gICAgICBzaW5vbi5zdHViKGxhbmd1YWdlQ2xpZW50LCAnY29kZUFjdGlvbicpLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKFt0ZXN0Q29tbWFuZF0pKTtcbiAgICAgIHNpbm9uLnNweShsYW5ndWFnZUNsaWVudCwgJ2V4ZWN1dGVDb21tYW5kJyk7XG5cbiAgICAgIGNvbnN0IGxpbnRlckFkYXB0ZXIgPSBuZXcgTGludGVyUHVzaFYyQWRhcHRlcihsYW5ndWFnZUNsaWVudCk7XG4gICAgICBzaW5vbi5zdHViKGxpbnRlckFkYXB0ZXIsICdnZXREaWFnbm9zdGljQ29kZScpLnJldHVybnMoJ3Rlc3QgY29kZScpO1xuXG4gICAgICBjb25zdCB0ZXN0UGF0aCA9ICcvdGVzdC50eHQnO1xuICAgICAgY29uc3QgYWN0aW9ucyA9IGF3YWl0IENvZGVBY3Rpb25BZGFwdGVyLmdldENvZGVBY3Rpb25zKFxuICAgICAgICBsYW5ndWFnZUNsaWVudCxcbiAgICAgICAge2NvZGVBY3Rpb25Qcm92aWRlcjogdHJ1ZX0sXG4gICAgICAgIGxpbnRlckFkYXB0ZXIsXG4gICAgICAgIGNyZWF0ZUZha2VFZGl0b3IodGVzdFBhdGgpLFxuICAgICAgICBuZXcgUmFuZ2UoWzEsIDJdLCBbMywgNF0pLFxuICAgICAgICBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZmlsZVBhdGg6IHRlc3RQYXRoLFxuICAgICAgICAgICAgdHlwZTogJ0Vycm9yJyxcbiAgICAgICAgICAgIHRleHQ6ICd0ZXN0IG1lc3NhZ2UnLFxuICAgICAgICAgICAgcmFuZ2U6IG5ldyBSYW5nZShbMSwgMl0sIFszLCAzXSksXG4gICAgICAgICAgICBwcm92aWRlck5hbWU6ICd0ZXN0IGxpbnRlcicsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChsYW5ndWFnZUNsaWVudC5jb2RlQWN0aW9uLmNhbGxlZCkudG8uYmUudHJ1ZTtcbiAgICAgIGNvbnN0IGFyZ3MgPSBsYW5ndWFnZUNsaWVudC5jb2RlQWN0aW9uLmdldENhbGxzKClbMF0uYXJncztcbiAgICAgIGNvbnN0IHBhcmFtczogbHMuQ29kZUFjdGlvblBhcmFtcyA9IGFyZ3NbMF07XG4gICAgICBleHBlY3QocGFyYW1zLnRleHREb2N1bWVudC51cmkpLnRvLmVxdWFsKCdmaWxlOi8vJyArIHRlc3RQYXRoKTtcbiAgICAgIGV4cGVjdChwYXJhbXMucmFuZ2UpLnRvLmRlZXAuZXF1YWwoe1xuICAgICAgICBzdGFydDoge2xpbmU6IDEsIGNoYXJhY3RlcjogMn0sXG4gICAgICAgIGVuZDoge2xpbmU6IDMsIGNoYXJhY3RlcjogNH0sXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChwYXJhbXMuY29udGV4dC5kaWFnbm9zdGljcykudG8uZGVlcC5lcXVhbChbXG4gICAgICAgIHtcbiAgICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgc3RhcnQ6IHtsaW5lOiAxLCBjaGFyYWN0ZXI6IDJ9LFxuICAgICAgICAgICAgZW5kOiB7bGluZTogMywgY2hhcmFjdGVyOiAzfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldmVyaXR5OiBscy5EaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3IsXG4gICAgICAgICAgY29kZTogJ3Rlc3QgY29kZScsXG4gICAgICAgICAgc291cmNlOiAndGVzdCBsaW50ZXInLFxuICAgICAgICAgIG1lc3NhZ2U6ICd0ZXN0IG1lc3NhZ2UnLFxuICAgICAgICB9LFxuICAgICAgXSk7XG5cbiAgICAgIGV4cGVjdChhY3Rpb25zLmxlbmd0aCkudG8uZXF1YWwoMSk7XG4gICAgICBjb25zdCBjb2RlQWN0aW9uID0gYWN0aW9uc1swXTtcbiAgICAgIGV4cGVjdChhd2FpdCBjb2RlQWN0aW9uLmdldFRpdGxlKCkpLnRvLmVxdWFsKCdUZXN0IENvbW1hbmQnKTtcbiAgICAgIGF3YWl0IGNvZGVBY3Rpb24uYXBwbHkoKTtcbiAgICAgIGV4cGVjdChsYW5ndWFnZUNsaWVudC5leGVjdXRlQ29tbWFuZC5jYWxsZWQpLnRvLmJlLnRydWU7XG4gICAgICBleHBlY3QobGFuZ3VhZ2VDbGllbnQuZXhlY3V0ZUNvbW1hbmQuZ2V0Q2FsbHMoKVswXS5hcmdzKS50by5kZWVwLmVxdWFsKFtcbiAgICAgICAge1xuICAgICAgICAgIGNvbW1hbmQ6ICd0ZXN0Q29tbWFuZCcsXG4gICAgICAgICAgYXJndW1lbnRzOiBbJ2EnLCAnYiddLFxuICAgICAgICB9LFxuICAgICAgXSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=