"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const chai_1 = require("chai");
const sinon = require("sinon");
const convert_1 = require("../../lib/convert");
const ls = require("../../lib/languageclient");
const code_format_adapter_1 = require("../../lib/adapters/code-format-adapter");
const helpers_js_1 = require("../helpers.js");
describe('CodeFormatAdapter', () => {
    let fakeEditor;
    let connection;
    let range;
    beforeEach(() => {
        connection = new ls.LanguageClientConnection(helpers_js_1.createSpyConnection());
        fakeEditor = helpers_js_1.createFakeEditor();
        range = new atom_1.Range([0, 0], [100, 100]);
    });
    describe('canAdapt', () => {
        it('returns true if range formatting is supported', () => {
            const result = code_format_adapter_1.default.canAdapt({
                documentRangeFormattingProvider: true,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns true if document formatting is supported', () => {
            const result = code_format_adapter_1.default.canAdapt({
                documentFormattingProvider: true,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false it no formatting supported', () => {
            const result = code_format_adapter_1.default.canAdapt({});
            chai_1.expect(result).to.be.false;
        });
    });
    describe('format', () => {
        it('prefers range formatting if available', () => {
            const rangeStub = sinon.spy(connection, 'documentRangeFormatting');
            const docStub = sinon.spy(connection, 'documentFormatting');
            code_format_adapter_1.default.format(connection, {
                documentRangeFormattingProvider: true,
                documentFormattingProvider: true,
            }, fakeEditor, range);
            chai_1.expect(rangeStub.called).to.be.true;
            chai_1.expect(docStub.called).to.be.false;
        });
        it('falls back to document formatting if range formatting not available', () => {
            const rangeStub = sinon.spy(connection, 'documentRangeFormatting');
            const docStub = sinon.spy(connection, 'documentFormatting');
            code_format_adapter_1.default.format(connection, { documentFormattingProvider: true }, fakeEditor, range);
            chai_1.expect(rangeStub.called).to.be.false;
            chai_1.expect(docStub.called).to.be.true;
        });
        it('throws if neither range or document formatting are supported', () => {
            chai_1.expect(() => code_format_adapter_1.default.format(connection, {}, fakeEditor, range)).to.throw('');
        });
    });
    describe('formatDocument', () => {
        it('converts the results from the connection', () => __awaiter(this, void 0, void 0, function* () {
            sinon.stub(connection, 'documentFormatting').resolves([
                {
                    range: {
                        start: { line: 0, character: 1 },
                        end: { line: 0, character: 2 },
                    },
                    newText: 'abc',
                },
                {
                    range: {
                        start: { line: 5, character: 10 },
                        end: { line: 15, character: 20 },
                    },
                    newText: 'def',
                },
            ]);
            const actual = yield code_format_adapter_1.default.formatDocument(connection, fakeEditor);
            chai_1.expect(actual.length).to.equal(2);
            chai_1.expect(actual[0].newText).to.equal('abc');
            chai_1.expect(actual[1].oldRange.start.row).to.equal(5);
            chai_1.expect(actual[1].oldRange.start.column).to.equal(10);
            chai_1.expect(actual[1].oldRange.end.row).to.equal(15);
            chai_1.expect(actual[1].oldRange.end.column).to.equal(20);
            chai_1.expect(actual[1].newText).to.equal('def');
        }));
    });
    describe('createDocumentFormattingParams', () => {
        it('returns the tab size from the editor', () => {
            sinon.stub(fakeEditor, 'getPath').returns('/a/b/c/d.txt');
            sinon.stub(fakeEditor, 'getTabLength').returns(1);
            sinon.stub(fakeEditor, 'getSoftTabs').returns(false);
            const actual = code_format_adapter_1.default.createDocumentFormattingParams(fakeEditor);
            chai_1.expect(actual.textDocument).to.eql({ uri: 'file:///a/b/c/d.txt' });
            chai_1.expect(actual.options.tabSize).to.equal(1);
            chai_1.expect(actual.options.insertSpaces).to.equal(false);
        });
    });
    describe('formatRange', () => {
        it('converts the results from the connection', () => __awaiter(this, void 0, void 0, function* () {
            sinon.stub(connection, 'documentRangeFormatting').resolves([
                {
                    range: {
                        start: { line: 0, character: 1 },
                        end: { line: 0, character: 2 },
                    },
                    newText: 'abc',
                },
                {
                    range: {
                        start: { line: 5, character: 10 },
                        end: { line: 15, character: 20 },
                    },
                    newText: 'def',
                },
            ]);
            const actual = yield code_format_adapter_1.default.formatRange(connection, fakeEditor, new atom_1.Range([0, 0], [1, 1]));
            chai_1.expect(actual.length).to.equal(2);
            chai_1.expect(actual[0].newText).to.equal('abc');
            chai_1.expect(actual[1].oldRange.start.row).to.equal(5);
            chai_1.expect(actual[1].oldRange.start.column).to.equal(10);
            chai_1.expect(actual[1].oldRange.end.row).to.equal(15);
            chai_1.expect(actual[1].oldRange.end.column).to.equal(20);
            chai_1.expect(actual[1].newText).to.equal('def');
        }));
    });
    describe('createDocumentRangeFormattingParams', () => {
        it('returns the tab size from the editor', () => {
            sinon.stub(fakeEditor, 'getPath').returns('/a/b/c/d.txt');
            sinon.stub(fakeEditor, 'getTabLength').returns(1);
            sinon.stub(fakeEditor, 'getSoftTabs').returns(false);
            const actual = code_format_adapter_1.default.createDocumentRangeFormattingParams(fakeEditor, new atom_1.Range([1, 0], [2, 3]));
            chai_1.expect(actual.textDocument).to.eql({ uri: 'file:///a/b/c/d.txt' });
            chai_1.expect(actual.range).to.eql({
                start: { line: 1, character: 0 },
                end: { line: 2, character: 3 },
            });
            chai_1.expect(actual.options.tabSize).to.equal(1);
            chai_1.expect(actual.options.insertSpaces).to.equal(false);
        });
    });
    describe('getFormatOptions', () => {
        it('returns the tab size from the editor', () => {
            sinon.stub(fakeEditor, 'getTabLength').returns(17);
            const options = code_format_adapter_1.default.getFormatOptions(fakeEditor);
            chai_1.expect(options.tabSize).to.equal(17);
        });
        it('returns the soft tab setting from the editor', () => {
            sinon.stub(fakeEditor, 'getSoftTabs').returns(true);
            const options = code_format_adapter_1.default.getFormatOptions(fakeEditor);
            chai_1.expect(options.insertSpaces).to.be.true;
        });
    });
    describe('convertLsTextEdit', () => {
        it('returns oldRange and newText from a textEdit', () => {
            const textEdit = {
                range: {
                    start: { line: 1, character: 0 },
                    end: { line: 2, character: 3 },
                },
                newText: 'abc-def',
            };
            const actual = convert_1.default.convertLsTextEdit(textEdit);
            chai_1.expect(actual.oldRange).to.eql(new atom_1.Range([1, 0], [2, 3]));
            chai_1.expect(actual.newText).to.equal('abc-def');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1mb3JtYXQtYWRhcHRlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9hZGFwdGVycy9jb2RlLWZvcm1hdC1hZGFwdGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLCtCQUE2QjtBQUM3QiwrQkFBOEI7QUFDOUIsK0JBQStCO0FBQy9CLCtDQUF3QztBQUN4QywrQ0FBK0M7QUFDL0MsZ0ZBQXVFO0FBQ3ZFLDhDQUFzRTtBQUV0RSxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksVUFBZSxDQUFDO0lBQ3BCLElBQUksVUFBZSxDQUFDO0lBQ3BCLElBQUksS0FBVSxDQUFDO0lBRWYsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFVBQVUsR0FBRyxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxnQ0FBbUIsRUFBRSxDQUFDLENBQUM7UUFDcEUsVUFBVSxHQUFHLDZCQUFnQixFQUFFLENBQUM7UUFDaEMsS0FBSyxHQUFHLElBQUksWUFBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN4QixFQUFFLENBQUMsK0NBQStDLEVBQUUsR0FBRyxFQUFFO1lBQ3ZELE1BQU0sTUFBTSxHQUFHLDZCQUFpQixDQUFDLFFBQVEsQ0FBQztnQkFDeEMsK0JBQStCLEVBQUUsSUFBSTthQUN0QyxDQUFDLENBQUM7WUFDSCxhQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsa0RBQWtELEVBQUUsR0FBRyxFQUFFO1lBQzFELE1BQU0sTUFBTSxHQUFHLDZCQUFpQixDQUFD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Q0FBQyxVQUFVLENBQUMsQ0FBQztZQUMvRCxhQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLEVBQUUsQ0FBQyw4Q0FBOEMsRUFBRSxHQUFHLEVBQUU7WUFDdEQsTUFBTSxRQUFRLEdBQUc7Z0JBQ2YsS0FBSyxFQUFFO29CQUNMLEtBQUssRUFBRSxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBQztvQkFDOUIsR0FBRyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxFQUFDO2lCQUM3QjtnQkFDRCxPQUFPLEVBQUUsU0FBUzthQUNuQixDQUFDO1lBQ0YsTUFBTSxNQUFNLEdBQUcsaUJBQU8sQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRCxhQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxZQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFELGFBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSYW5nZSB9IGZyb20gJ2F0b20nO1xyXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcclxuaW1wb3J0ICogYXMgc2lub24gZnJvbSAnc2lub24nO1xyXG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi8uLi9saWIvY29udmVydCc7XHJcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCBDb2RlRm9ybWF0QWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvY29kZS1mb3JtYXQtYWRhcHRlcic7XHJcbmltcG9ydCB7IGNyZWF0ZVNweUNvbm5lY3Rpb24sIGNyZWF0ZUZha2VFZGl0b3IgfSBmcm9tICcuLi9oZWxwZXJzLmpzJztcclxuXHJcbmRlc2NyaWJlKCdDb2RlRm9ybWF0QWRhcHRlcicsICgpID0+IHtcclxuICBsZXQgZmFrZUVkaXRvcjogYW55O1xyXG4gIGxldCBjb25uZWN0aW9uOiBhbnk7XHJcbiAgbGV0IHJhbmdlOiBhbnk7XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgY29ubmVjdGlvbiA9IG5ldyBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb24oY3JlYXRlU3B5Q29ubmVjdGlvbigpKTtcclxuICAgIGZha2VFZGl0b3IgPSBjcmVhdGVGYWtlRWRpdG9yKCk7XHJcbiAgICByYW5nZSA9IG5ldyBSYW5nZShbMCwgMF0sIFsxMDAsIDEwMF0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnY2FuQWRhcHQnLCAoKSA9PiB7XHJcbiAgICBpdCgncmV0dXJucyB0cnVlIGlmIHJhbmdlIGZvcm1hdHRpbmcgaXMgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBDb2RlRm9ybWF0QWRhcHRlci5jYW5BZGFwdCh7XHJcbiAgICAgICAgZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdQcm92aWRlcjogdHJ1ZSxcclxuICAgICAgfSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLnRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgncmV0dXJucyB0cnVlIGlmIGRvY3VtZW50IGZvcm1hdHRpbmcgaXMgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBDb2RlRm9ybWF0QWRhcHRlci5jYW5BZGFwdCh7XHJcbiAgICAgICAgZG9jdW1lbnRGb3JtYXR0aW5nUHJvdmlkZXI6IHRydWUsXHJcbiAgICAgIH0pO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS50cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3JldHVybnMgZmFsc2UgaXQgbm8gZm9ybWF0dGluZyBzdXBwb3J0ZWQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IENvZGVGb3JtYXRBZGFwdGVyLmNhbkFkYXB0KHt9KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUuZmFsc2U7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2Zvcm1hdCcsICgpID0+IHtcclxuICAgIGl0KCdwcmVmZXJzIHJhbmdlIGZvcm1hdHRpbmcgaWYgYXZhaWxhYmxlJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByYW5nZVN0dWIgPSBzaW5vbi5zcHkoY29ubmVjdGlvbiwgJ2RvY3VtZW50UmFuZ2VGb3JtYXR0aW5nJyk7XHJcbiAgICAgIGNvbnN0IGRvY1N0dWIgPSBzaW5vbi5zcHkoY29ubmVjdGlvbiwgJ2RvY3VtZW50Rm9ybWF0dGluZycpO1xyXG4gICAgICBDb2RlRm9ybWF0QWRhcHRlci5mb3JtYXQoXHJcbiAgICAgICAgY29ubmVjdGlvbixcclxuICAgICAgICB7XHJcbiAgICAgICAgICBkb2N1bWVudFJhbmdlRm9ybWF0dGluZ1Byb3ZpZGVyOiB0cnVlLFxyXG4gICAgICAgICAgZG9jdW1lbnRGb3JtYXR0aW5nUHJvdmlkZXI6IHRydWUsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWtlRWRpdG9yLFxyXG4gICAgICAgIHJhbmdlLFxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3QocmFuZ2VTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcclxuICAgICAgZXhwZWN0KGRvY1N0dWIuY2FsbGVkKS50by5iZS5mYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdmYWxscyBiYWNrIHRvIGRvY3VtZW50IGZvcm1hdHRpbmcgaWYgcmFuZ2UgZm9ybWF0dGluZyBub3QgYXZhaWxhYmxlJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByYW5nZVN0dWIgPSBzaW5vbi5zcHkoY29ubmVjdGlvbiwgJ2RvY3VtZW50UmFuZ2VGb3JtYXR0aW5nJyk7XHJcbiAgICAgIGNvbnN0IGRvY1N0dWIgPSBzaW5vbi5zcHkoY29ubmVjdGlvbiwgJ2RvY3VtZW50Rm9ybWF0dGluZycpO1xyXG4gICAgICBDb2RlRm9ybWF0QWRhcHRlci5mb3JtYXQoY29ubmVjdGlvbiwge2RvY3VtZW50Rm9ybWF0dGluZ1Byb3ZpZGVyOiB0cnVlfSwgZmFrZUVkaXRvciwgcmFuZ2UpO1xyXG4gICAgICBleHBlY3QocmFuZ2VTdHViLmNhbGxlZCkudG8uYmUuZmFsc2U7XHJcbiAgICAgIGV4cGVjdChkb2NTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCd0aHJvd3MgaWYgbmVpdGhlciByYW5nZSBvciBkb2N1bWVudCBmb3JtYXR0aW5nIGFyZSBzdXBwb3J0ZWQnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdCgoKSA9PiBDb2RlRm9ybWF0QWRhcHRlci5mb3JtYXQoY29ubmVjdGlvbiwge30sIGZha2VFZGl0b3IsIHJhbmdlKSkudG8udGhyb3coJycpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdmb3JtYXREb2N1bWVudCcsICgpID0+IHtcclxuICAgIGl0KCdjb252ZXJ0cyB0aGUgcmVzdWx0cyBmcm9tIHRoZSBjb25uZWN0aW9uJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBzaW5vbi5zdHViKGNvbm5lY3Rpb24sICdkb2N1bWVudEZvcm1hdHRpbmcnKS5yZXNvbHZlcyhbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgc3RhcnQ6IHtsaW5lOiAwLCBjaGFyYWN0ZXI6IDF9LFxyXG4gICAgICAgICAgICBlbmQ6IHtsaW5lOiAwLCBjaGFyYWN0ZXI6IDJ9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG5ld1RleHQ6ICdhYmMnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgc3RhcnQ6IHtsaW5lOiA1LCBjaGFyYWN0ZXI6IDEwfSxcclxuICAgICAgICAgICAgZW5kOiB7bGluZTogMTUsIGNoYXJhY3RlcjogMjB9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG5ld1RleHQ6ICdkZWYnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0pO1xyXG4gICAgICBjb25zdCBhY3R1YWwgPSBhd2FpdCBDb2RlRm9ybWF0QWRhcHRlci5mb3JtYXREb2N1bWVudChjb25uZWN0aW9uLCBmYWtlRWRpdG9yKTtcclxuICAgICAgZXhwZWN0KGFjdHVhbC5sZW5ndGgpLnRvLmVxdWFsKDIpO1xyXG4gICAgICBleHBlY3QoYWN0dWFsWzBdLm5ld1RleHQpLnRvLmVxdWFsKCdhYmMnKTtcclxuICAgICAgZXhwZWN0KGFjdHVhbFsxXS5vbGRSYW5nZS5zdGFydC5yb3cpLnRvLmVxdWFsKDUpO1xyXG4gICAgICBleHBlY3QoYWN0dWFsWzFdLm9sZFJhbmdlLnN0YXJ0LmNvbHVtbikudG8uZXF1YWwoMTApO1xyXG4gICAgICBleHBlY3QoYWN0dWFsWzFdLm9sZFJhbmdlLmVuZC5yb3cpLnRvLmVxdWFsKDE1KTtcclxuICAgICAgZXhwZWN0KGFjdHVhbFsxXS5vbGRSYW5nZS5lbmQuY29sdW1uKS50by5lcXVhbCgyMCk7XHJcbiAgICAgIGV4cGVjdChhY3R1YWxbMV0ubmV3VGV4dCkudG8uZXF1YWwoJ2RlZicpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdjcmVhdGVEb2N1bWVudEZvcm1hdHRpbmdQYXJhbXMnLCAoKSA9PiB7XHJcbiAgICBpdCgncmV0dXJucyB0aGUgdGFiIHNpemUgZnJvbSB0aGUgZWRpdG9yJywgKCkgPT4ge1xyXG4gICAgICBzaW5vbi5zdHViKGZha2VFZGl0b3IsICdnZXRQYXRoJykucmV0dXJucygnL2EvYi9jL2QudHh0Jyk7XHJcbiAgICAgIHNpbm9uLnN0dWIoZmFrZUVkaXRvciwgJ2dldFRhYkxlbmd0aCcpLnJldHVybnMoMSk7XHJcbiAgICAgIHNpbm9uLnN0dWIoZmFrZUVkaXRvciwgJ2dldFNvZnRUYWJzJykucmV0dXJucyhmYWxzZSk7XHJcblxyXG4gICAgICBjb25zdCBhY3R1YWwgPSBDb2RlRm9ybWF0QWRhcHRlci5jcmVhdGVEb2N1bWVudEZvcm1hdHRpbmdQYXJhbXMoZmFrZUVkaXRvcik7XHJcblxyXG4gICAgICBleHBlY3QoYWN0dWFsLnRleHREb2N1bWVudCkudG8uZXFsKHt1cmk6ICdmaWxlOi8vL2EvYi9jL2QudHh0J30pO1xyXG4gICAgICBleHBlY3QoYWN0dWFsLm9wdGlvbnMudGFiU2l6ZSkudG8uZXF1YWwoMSk7XHJcbiAgICAgIGV4cGVjdChhY3R1YWwub3B0aW9ucy5pbnNlcnRTcGFjZXMpLnRvLmVxdWFsKGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnZm9ybWF0UmFuZ2UnLCAoKSA9PiB7XHJcbiAgICBpdCgnY29udmVydHMgdGhlIHJlc3VsdHMgZnJvbSB0aGUgY29ubmVjdGlvbicsIGFzeW5jICgpID0+IHtcclxuICAgICAgc2lub24uc3R1Yihjb25uZWN0aW9uLCAnZG9jdW1lbnRSYW5nZUZvcm1hdHRpbmcnKS5yZXNvbHZlcyhbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgc3RhcnQ6IHtsaW5lOiAwLCBjaGFyYWN0ZXI6IDF9LFxyXG4gICAgICAgICAgICBlbmQ6IHtsaW5lOiAwLCBjaGFyYWN0ZXI6IDJ9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG5ld1RleHQ6ICdhYmMnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgc3RhcnQ6IHtsaW5lOiA1LCBjaGFyYWN0ZXI6IDEwfSxcclxuICAgICAgICAgICAgZW5kOiB7bGluZTogMTUsIGNoYXJhY3RlcjogMjB9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG5ld1RleHQ6ICdkZWYnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIF0pO1xyXG4gICAgICBjb25zdCBhY3R1YWwgPSBhd2FpdCBDb2RlRm9ybWF0QWRhcHRlci5mb3JtYXRSYW5nZShjb25uZWN0aW9uLCBmYWtlRWRpdG9yLCBuZXcgUmFuZ2UoWzAsIDBdLCBbMSwgMV0pKTtcclxuICAgICAgZXhwZWN0KGFjdHVhbC5sZW5ndGgpLnRvLmVxdWFsKDIpO1xyXG4gICAgICBleHBlY3QoYWN0dWFsWzBdLm5ld1RleHQpLnRvLmVxdWFsKCdhYmMnKTtcclxuICAgICAgZXhwZWN0KGFjdHVhbFsxXS5vbGRSYW5nZS5zdGFydC5yb3cpLnRvLmVxdWFsKDUpO1xyXG4gICAgICBleHBlY3QoYWN0dWFsWzFdLm9sZFJhbmdlLnN0YXJ0LmNvbHVtbikudG8uZXF1YWwoMTApO1xyXG4gICAgICBleHBlY3QoYWN0dWFsWzFdLm9sZFJhbmdlLmVuZC5yb3cpLnRvLmVxdWFsKDE1KTtcclxuICAgICAgZXhwZWN0KGFjdHVhbFsxXS5vbGRSYW5nZS5lbmQuY29sdW1uKS50by5lcXVhbCgyMCk7XHJcbiAgICAgIGV4cGVjdChhY3R1YWxbMV0ubmV3VGV4dCkudG8uZXF1YWwoJ2RlZicpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdjcmVhdGVEb2N1bWVudFJhbmdlRm9ybWF0dGluZ1BhcmFtcycsICgpID0+IHtcclxuICAgIGl0KCdyZXR1cm5zIHRoZSB0YWIgc2l6ZSBmcm9tIHRoZSBlZGl0b3InLCAoKSA9PiB7XHJcbiAgICAgIHNpbm9uLnN0dWIoZmFrZUVkaXRvciwgJ2dldFBhdGgnKS5yZXR1cm5zKCcvYS9iL2MvZC50eHQnKTtcclxuICAgICAgc2lub24uc3R1YihmYWtlRWRpdG9yLCAnZ2V0VGFiTGVuZ3RoJykucmV0dXJucygxKTtcclxuICAgICAgc2lub24uc3R1YihmYWtlRWRpdG9yLCAnZ2V0U29mdFRhYnMnKS5yZXR1cm5zKGZhbHNlKTtcclxuXHJcbiAgICAgIGNvbnN0IGFjdHVhbCA9IENvZGVGb3JtYXRBZGFwdGVyLmNyZWF0ZURvY3VtZW50UmFuZ2VGb3JtYXR0aW5nUGFyYW1zKGZha2VFZGl0b3IsIG5ldyBSYW5nZShbMSwgMF0sIFsyLCAzXSkpO1xyXG5cclxuICAgICAgZXhwZWN0KGFjdHVhbC50ZXh0RG9jdW1lbnQpLnRvLmVxbCh7dXJpOiAnZmlsZTovLy9hL2IvYy9kLnR4dCd9KTtcclxuICAgICAgZXhwZWN0KGFjdHVhbC5yYW5nZSkudG8uZXFsKHtcclxuICAgICAgICBzdGFydDoge2xpbmU6IDEsIGNoYXJhY3RlcjogMH0sXHJcbiAgICAgICAgZW5kOiB7bGluZTogMiwgY2hhcmFjdGVyOiAzfSxcclxuICAgICAgfSk7XHJcbiAgICAgIGV4cGVjdChhY3R1YWwub3B0aW9ucy50YWJTaXplKS50by5lcXVhbCgxKTtcclxuICAgICAgZXhwZWN0KGFjdHVhbC5vcHRpb25zLmluc2VydFNwYWNlcykudG8uZXF1YWwoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdnZXRGb3JtYXRPcHRpb25zJywgKCkgPT4ge1xyXG4gICAgaXQoJ3JldHVybnMgdGhlIHRhYiBzaXplIGZyb20gdGhlIGVkaXRvcicsICgpID0+IHtcclxuICAgICAgc2lub24uc3R1YihmYWtlRWRpdG9yLCAnZ2V0VGFiTGVuZ3RoJykucmV0dXJucygxNyk7XHJcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBDb2RlRm9ybWF0QWRhcHRlci5nZXRGb3JtYXRPcHRpb25zKGZha2VFZGl0b3IpO1xyXG4gICAgICBleHBlY3Qob3B0aW9ucy50YWJTaXplKS50by5lcXVhbCgxNyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgncmV0dXJucyB0aGUgc29mdCB0YWIgc2V0dGluZyBmcm9tIHRoZSBlZGl0b3InLCAoKSA9PiB7XHJcbiAgICAgIHNpbm9uLnN0dWIoZmFrZUVkaXRvciwgJ2dldFNvZnRUYWJzJykucmV0dXJucyh0cnVlKTtcclxuICAgICAgY29uc3Qgb3B0aW9ucyA9IENvZGVGb3JtYXRBZGFwdGVyLmdldEZvcm1hdE9wdGlvbnMoZmFrZUVkaXRvcik7XHJcbiAgICAgIGV4cGVjdChvcHRpb25zLmluc2VydFNwYWNlcykudG8uYmUudHJ1ZTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnY29udmVydExzVGV4dEVkaXQnLCAoKSA9PiB7XHJcbiAgICBpdCgncmV0dXJucyBvbGRSYW5nZSBhbmQgbmV3VGV4dCBmcm9tIGEgdGV4dEVkaXQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRleHRFZGl0ID0ge1xyXG4gICAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgICBzdGFydDoge2xpbmU6IDEsIGNoYXJhY3RlcjogMH0sXHJcbiAgICAgICAgICBlbmQ6IHtsaW5lOiAyLCBjaGFyYWN0ZXI6IDN9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbmV3VGV4dDogJ2FiYy1kZWYnLFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBhY3R1YWwgPSBDb252ZXJ0LmNvbnZlcnRMc1RleHRFZGl0KHRleHRFZGl0KTtcclxuICAgICAgZXhwZWN0KGFjdHVhbC5vbGRSYW5nZSkudG8uZXFsKG5ldyBSYW5nZShbMSwgMF0sIFsyLCAzXSkpO1xyXG4gICAgICBleHBlY3QoYWN0dWFsLm5ld1RleHQpLnRvLmVxdWFsKCdhYmMtZGVmJyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==