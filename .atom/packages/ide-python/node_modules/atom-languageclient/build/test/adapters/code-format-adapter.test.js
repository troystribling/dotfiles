var _atom = require('atom');

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _convert = require('../../lib/convert');

var _convert2 = _interopRequireDefault(_convert);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _codeFormatAdapter = require('../../lib/adapters/code-format-adapter');

var _codeFormatAdapter2 = _interopRequireDefault(_codeFormatAdapter);

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('CodeFormatAdapter', () => {
  let fakeEditor;
  let connection;
  let range;

  beforeEach(() => {
    connection = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    fakeEditor = (0, _helpers.createFakeEditor)();
    range = new _atom.Range([0, 0], [100, 100]);
  });

  describe('canAdapt', () => {
    it('returns true if range formatting is supported', () => {
      const result = _codeFormatAdapter2.default.canAdapt({
        documentRangeFormattingProvider: true
      });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns true if document formatting is supported', () => {
      const result = _codeFormatAdapter2.default.canAdapt({
        documentFormattingProvider: true
      });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false it no formatting supported', () => {
      const result = _codeFormatAdapter2.default.canAdapt({});
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('format', () => {
    it('prefers range formatting if available', () => {
      const rangeStub = _sinon2.default.spy(connection, 'documentRangeFormatting');
      const docStub = _sinon2.default.spy(connection, 'documentFormatting');
      _codeFormatAdapter2.default.format(connection, {
        documentRangeFormattingProvider: true,
        documentFormattingProvider: true
      }, fakeEditor, range);
      (0, _chai.expect)(rangeStub.called).to.be.true;
      (0, _chai.expect)(docStub.called).to.be.false;
    });

    it('falls back to document formatting if range formatting not available', () => {
      const rangeStub = _sinon2.default.spy(connection, 'documentRangeFormatting');
      const docStub = _sinon2.default.spy(connection, 'documentFormatting');
      _codeFormatAdapter2.default.format(connection, { documentFormattingProvider: true }, fakeEditor, range);
      (0, _chai.expect)(rangeStub.called).to.be.false;
      (0, _chai.expect)(docStub.called).to.be.true;
    });

    it('throws if neither range or document formatting are supported', () => {
      (0, _chai.expect)(() => _codeFormatAdapter2.default.format(connection, {}, fakeEditor, range)).to.throw('');
    });
  });

  describe('formatDocument', () => {
    it('converts the results from the connection', _asyncToGenerator(function* () {
      _sinon2.default.stub(connection, 'documentFormatting').resolves([{
        range: {
          start: { line: 0, character: 1 },
          end: { line: 0, character: 2 }
        },
        newText: 'abc'
      }, {
        range: {
          start: { line: 5, character: 10 },
          end: { line: 15, character: 20 }
        },
        newText: 'def'
      }]);
      const actual = yield _codeFormatAdapter2.default.formatDocument(connection, fakeEditor);
      (0, _chai.expect)(actual.length).to.equal(2);
      (0, _chai.expect)(actual[0].newText).to.equal('abc');
      (0, _chai.expect)(actual[1].oldRange.start.row).to.equal(5);
      (0, _chai.expect)(actual[1].oldRange.start.column).to.equal(10);
      (0, _chai.expect)(actual[1].oldRange.end.row).to.equal(15);
      (0, _chai.expect)(actual[1].oldRange.end.column).to.equal(20);
      (0, _chai.expect)(actual[1].newText).to.equal('def');
    }));
  });

  describe('createDocumentFormattingParams', () => {
    it('returns the tab size from the editor', () => {
      _sinon2.default.stub(fakeEditor, 'getPath').returns('/a/b/c/d.txt');
      _sinon2.default.stub(fakeEditor, 'getTabLength').returns(1);
      _sinon2.default.stub(fakeEditor, 'getSoftTabs').returns(false);

      const actual = _codeFormatAdapter2.default.createDocumentFormattingParams(fakeEditor);

      (0, _chai.expect)(actual.textDocument).to.eql({ uri: 'file:///a/b/c/d.txt' });
      (0, _chai.expect)(actual.options.tabSize).to.equal(1);
      (0, _chai.expect)(actual.options.insertSpaces).to.equal(false);
    });
  });

  describe('formatRange', () => {
    it('converts the results from the connection', _asyncToGenerator(function* () {
      _sinon2.default.stub(connection, 'documentRangeFormatting').resolves([{
        range: {
          start: { line: 0, character: 1 },
          end: { line: 0, character: 2 }
        },
        newText: 'abc'
      }, {
        range: {
          start: { line: 5, character: 10 },
          end: { line: 15, character: 20 }
        },
        newText: 'def'
      }]);
      const actual = yield _codeFormatAdapter2.default.formatRange(connection, fakeEditor, new _atom.Range([0, 0], [1, 1]));
      (0, _chai.expect)(actual.length).to.equal(2);
      (0, _chai.expect)(actual[0].newText).to.equal('abc');
      (0, _chai.expect)(actual[1].oldRange.start.row).to.equal(5);
      (0, _chai.expect)(actual[1].oldRange.start.column).to.equal(10);
      (0, _chai.expect)(actual[1].oldRange.end.row).to.equal(15);
      (0, _chai.expect)(actual[1].oldRange.end.column).to.equal(20);
      (0, _chai.expect)(actual[1].newText).to.equal('def');
    }));
  });

  describe('createDocumentRangeFormattingParams', () => {
    it('returns the tab size from the editor', () => {
      _sinon2.default.stub(fakeEditor, 'getPath').returns('/a/b/c/d.txt');
      _sinon2.default.stub(fakeEditor, 'getTabLength').returns(1);
      _sinon2.default.stub(fakeEditor, 'getSoftTabs').returns(false);

      const actual = _codeFormatAdapter2.default.createDocumentRangeFormattingParams(fakeEditor, new _atom.Range([1, 0], [2, 3]));

      (0, _chai.expect)(actual.textDocument).to.eql({ uri: 'file:///a/b/c/d.txt' });
      (0, _chai.expect)(actual.range).to.eql({
        start: { line: 1, character: 0 },
        end: { line: 2, character: 3 }
      });
      (0, _chai.expect)(actual.options.tabSize).to.equal(1);
      (0, _chai.expect)(actual.options.insertSpaces).to.equal(false);
    });
  });

  describe('getFormatOptions', () => {
    it('returns the tab size from the editor', () => {
      _sinon2.default.stub(fakeEditor, 'getTabLength').returns(17);
      const options = _codeFormatAdapter2.default.getFormatOptions(fakeEditor);
      (0, _chai.expect)(options.tabSize).to.equal(17);
    });

    it('returns the soft tab setting from the editor', () => {
      _sinon2.default.stub(fakeEditor, 'getSoftTabs').returns(true);
      const options = _codeFormatAdapter2.default.getFormatOptions(fakeEditor);
      (0, _chai.expect)(options.insertSpaces).to.be.true;
    });
  });

  describe('convertLsTextEdit', () => {
    it('returns oldRange and newText from a textEdit', () => {
      const textEdit = {
        range: {
          start: { line: 1, character: 0 },
          end: { line: 2, character: 3 }
        },
        newText: 'abc-def'
      };
      const actual = _convert2.default.convertLsTextEdit(textEdit);
      (0, _chai.expect)(actual.oldRange).to.eql(new _atom.Range([1, 0], [2, 3]));
      (0, _chai.expect)(actual.newText).to.equal('abc-def');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,