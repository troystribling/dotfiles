"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant = require("assert");
const atom_1 = require("atom");
const chai_1 = require("chai");
const sinon = require("sinon");
const ls = require("../../lib/languageclient");
const code_highlight_adapter_1 = require("../../lib/adapters/code-highlight-adapter");
const helpers_js_1 = require("../helpers.js");
describe('CodeHighlightAdapter', () => {
    let fakeEditor;
    let connection;
    beforeEach(() => {
        connection = new ls.LanguageClientConnection(helpers_js_1.createSpyConnection());
        fakeEditor = helpers_js_1.createFakeEditor();
    });
    describe('canAdapt', () => {
        it('returns true if document highlights are supported', () => {
            const result = code_highlight_adapter_1.default.canAdapt({
                documentHighlightProvider: true,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false it no formatting supported', () => {
            const result = code_highlight_adapter_1.default.canAdapt({});
            chai_1.expect(result).to.be.false;
        });
    });
    describe('highlight', () => {
        it('highlights some ranges', () => __awaiter(this, void 0, void 0, function* () {
            const highlightStub = sinon.stub(connection, 'documentHighlight').returns(Promise.resolve([
                {
                    range: {
                        start: { line: 0, character: 1 },
                        end: { line: 0, character: 2 },
                    },
                },
            ]));
            const result = yield code_highlight_adapter_1.default.highlight(connection, { documentHighlightProvider: true }, fakeEditor, new atom_1.Point(0, 0));
            chai_1.expect(highlightStub.called).to.be.true;
            invariant(result != null);
            if (result) {
                chai_1.expect(result.length).to.equal(1);
                chai_1.expect(result[0].isEqual(new atom_1.Range([0, 1], [0, 2]))).to.be.true;
            }
        }));
        it('throws if document highlights are not supported', () => __awaiter(this, void 0, void 0, function* () {
            const result = yield code_highlight_adapter_1.default.highlight(connection, {}, fakeEditor, new atom_1.Point(0, 0)).catch((err) => err);
            chai_1.expect(result).to.be.an.instanceof(Error);
            invariant(result instanceof Error);
            chai_1.expect(result.message).to.equal('Must have the documentHighlight capability');
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1oaWdobGlnaHQtYWRhcHRlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9hZGFwdGVycy9jb2RlLWhpZ2hsaWdodC1hZGFwdGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLG9DQUFvQztBQUNwQywrQkFBb0M7QUFDcEMsK0JBQThCO0FBQzlCLCtCQUErQjtBQUMvQiwrQ0FBK0M7QUFDL0Msc0ZBQTZFO0FBQzdFLDhDQUFzRTtBQUV0RSxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksVUFBZSxDQUFDO0lBQ3BCLElBQUksVUFBZSxDQUFDO0lBRXBCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxVQUFVLEdBQUcsSUFBSSxFQUFFLENBQUMsd0JBQXdCLENBQUMsZ0NBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLFVBQVUsR0FBRyw2QkFBZ0IsRUFBRSxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDeEIsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtZQUMzRCxNQUFNLE1BQU0sR0FBRyxnQ0FBb0IsQ0FBQyxRQUFRLENBQUM7Z0JBQzNDLHlCQUF5QixFQUFFLElBQUk7YUFDaEMsQ0FBQyxDQUFDO1lBQ0gsYUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtZQUNsRCxNQUFNLE1BQU0sR0FBRyxnQ0FBb0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakQsYUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QixFQUFFLENBQUMsd0JBQXdCLEVBQUUsR0FBUyxFQUFFO1lBQ3RDLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUMsT0FBTyxDQUN2RSxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNkO29CQUNFLEtBQUssRUFBRTt3QkFDTCxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUM7d0JBQzlCLEdBQUcsRUFBRSxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBQztxQkFDN0I7aUJBQ0Y7YUFDRixDQUFDLENBQ0gsQ0FBQztZQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sZ0NBQW9CLENBQUMsU0FBUyxDQUNqRCxVQUFVLEVBQ1YsRUFBQyx5QkFBeUIsRUFBRSxJQUFJLEVBQUMsRUFDakMsVUFBVSxFQUNWLElBQUksWUFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDaEIsQ0FBQztZQUNGLGFBQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFFeEMsU0FBUyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQztZQUMxQixJQUFJLE1BQU0sRUFBRTtnQkFDVixhQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLGFBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksWUFBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO2FBQ2pFO1FBQ0gsQ0FBQyxDQUFBLENBQUMsQ0FBQztRQUVILEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxHQUFTLEVBQUU7WUFDL0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxnQ0FBb0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxZQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUNwRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUNiLENBQUM7WUFDRixhQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzFDLFNBQVMsQ0FBQyxNQUFNLFlBQVksS0FBSyxDQUFDLENBQUM7WUFDbkMsYUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7UUFDaEYsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpbnZhcmlhbnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0IHsgUG9pbnQsIFJhbmdlIH0gZnJvbSAnYXRvbSc7XHJcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xyXG5pbXBvcnQgKiBhcyBzaW5vbiBmcm9tICdzaW5vbic7XHJcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCBDb2RlSGlnaGxpZ2h0QWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvY29kZS1oaWdobGlnaHQtYWRhcHRlcic7XHJcbmltcG9ydCB7IGNyZWF0ZVNweUNvbm5lY3Rpb24sIGNyZWF0ZUZha2VFZGl0b3IgfSBmcm9tICcuLi9oZWxwZXJzLmpzJztcclxuXHJcbmRlc2NyaWJlKCdDb2RlSGlnaGxpZ2h0QWRhcHRlcicsICgpID0+IHtcclxuICBsZXQgZmFrZUVkaXRvcjogYW55O1xyXG4gIGxldCBjb25uZWN0aW9uOiBhbnk7XHJcblxyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgY29ubmVjdGlvbiA9IG5ldyBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb24oY3JlYXRlU3B5Q29ubmVjdGlvbigpKTtcclxuICAgIGZha2VFZGl0b3IgPSBjcmVhdGVGYWtlRWRpdG9yKCk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdjYW5BZGFwdCcsICgpID0+IHtcclxuICAgIGl0KCdyZXR1cm5zIHRydWUgaWYgZG9jdW1lbnQgaGlnaGxpZ2h0cyBhcmUgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBDb2RlSGlnaGxpZ2h0QWRhcHRlci5jYW5BZGFwdCh7XHJcbiAgICAgICAgZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlcjogdHJ1ZSxcclxuICAgICAgfSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLnRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgncmV0dXJucyBmYWxzZSBpdCBubyBmb3JtYXR0aW5nIHN1cHBvcnRlZCcsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gQ29kZUhpZ2hsaWdodEFkYXB0ZXIuY2FuQWRhcHQoe30pO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS5mYWxzZTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnaGlnaGxpZ2h0JywgKCkgPT4ge1xyXG4gICAgaXQoJ2hpZ2hsaWdodHMgc29tZSByYW5nZXMnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGhpZ2hsaWdodFN0dWIgPSBzaW5vbi5zdHViKGNvbm5lY3Rpb24sICdkb2N1bWVudEhpZ2hsaWdodCcpLnJldHVybnMoXHJcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgICAgICBzdGFydDoge2xpbmU6IDAsIGNoYXJhY3RlcjogMX0sXHJcbiAgICAgICAgICAgICAgZW5kOiB7bGluZTogMCwgY2hhcmFjdGVyOiAyfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgXSksXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IENvZGVIaWdobGlnaHRBZGFwdGVyLmhpZ2hsaWdodChcclxuICAgICAgICBjb25uZWN0aW9uLFxyXG4gICAgICAgIHtkb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyOiB0cnVlfSxcclxuICAgICAgICBmYWtlRWRpdG9yLFxyXG4gICAgICAgIG5ldyBQb2ludCgwLCAwKSxcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KGhpZ2hsaWdodFN0dWIuY2FsbGVkKS50by5iZS50cnVlO1xyXG5cclxuICAgICAgaW52YXJpYW50KHJlc3VsdCAhPSBudWxsKTtcclxuICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgIGV4cGVjdChyZXN1bHQubGVuZ3RoKS50by5lcXVhbCgxKTtcclxuICAgICAgICBleHBlY3QocmVzdWx0WzBdLmlzRXF1YWwobmV3IFJhbmdlKFswLCAxXSwgWzAsIDJdKSkpLnRvLmJlLnRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCd0aHJvd3MgaWYgZG9jdW1lbnQgaGlnaGxpZ2h0cyBhcmUgbm90IHN1cHBvcnRlZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQ29kZUhpZ2hsaWdodEFkYXB0ZXIuaGlnaGxpZ2h0KGNvbm5lY3Rpb24sIHt9LCBmYWtlRWRpdG9yLCBuZXcgUG9pbnQoMCwgMCkpLmNhdGNoKFxyXG4gICAgICAgIChlcnIpID0+IGVycixcclxuICAgICAgKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUuYW4uaW5zdGFuY2VvZihFcnJvcik7XHJcbiAgICAgIGludmFyaWFudChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcik7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQubWVzc2FnZSkudG8uZXF1YWwoJ011c3QgaGF2ZSB0aGUgZG9jdW1lbnRIaWdobGlnaHQgY2FwYWJpbGl0eScpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=