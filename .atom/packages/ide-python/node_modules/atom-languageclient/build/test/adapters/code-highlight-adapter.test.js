"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant = require("assert");
const atom_1 = require("atom");
const chai_1 = require("chai");
const sinon = require("sinon");
const ls = require("../../lib/languageclient");
const code_highlight_adapter_1 = require("../../lib/adapters/code-highlight-adapter");
const helpers_js_1 = require("../helpers.js");
describe('CodeHighlightAdapter', () => {
    let fakeEditor;
    let connection;
    beforeEach(() => {
        connection = new ls.LanguageClientConnection(helpers_js_1.createSpyConnection());
        fakeEditor = helpers_js_1.createFakeEditor();
    });
    describe('canAdapt', () => {
        it('returns true if document highlights are supported', () => {
            const result = code_highlight_adapter_1.default.canAdapt({
                documentHighlightProvider: true,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false it no formatting supported', () => {
            const result = code_highlight_adapter_1.default.canAdapt({});
            chai_1.expect(result).to.be.false;
        });
    });
    describe('highlight', () => {
        it('highlights some ranges', () => __awaiter(this, void 0, void 0, function* () {
            const highlightStub = sinon.stub(connection, 'documentHighlight').returns(Promise.resolve([
                {
                    range: {
                        start: { line: 0, character: 1 },
                        end: { line: 0, character: 2 },
                    },
                },
            ]));
            const result = yield code_highlight_adapter_1.default.highlight(connection, { documentHighlightProvider: true }, fakeEditor, new atom_1.Point(0, 0));
            chai_1.expect(highlightStub.called).to.be.true;
            invariant(result != null);
            if (result) {
                chai_1.expect(result.length).to.equal(1);
                chai_1.expect(result[0].isEqual(new atom_1.Range([0, 1], [0, 2]))).to.be.true;
            }
        }));
        it('throws if document highlights are not supported', () => __awaiter(this, void 0, void 0, function* () {
            const result = yield code_highlight_adapter_1.default.highlight(connection, {}, fakeEditor, new atom_1.Point(0, 0)).catch((err) => err);
            chai_1.expect(result).to.be.an.instanceof(Error);
            invariant(result instanceof Error);
            chai_1.expect(result.message).to.equal('Must have the documentHighlight capability');
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZS1oaWdobGlnaHQtYWRhcHRlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vdGVzdC9hZGFwdGVycy9jb2RlLWhpZ2hsaWdodC1hZGFwdGVyLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLG9DQUFvQztBQUNwQywrQkFBb0M7QUFDcEMsK0JBQThCO0FBQzlCLCtCQUErQjtBQUMvQiwrQ0FBK0M7QUFDL0Msc0ZBQTZFO0FBQzdFLDhDQUFzRTtBQUV0RSxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ3BDLElBQUksVUFBZSxDQUFDO0lBQ3BCLElBQUksVUFBZSxDQUFDO0lBRXBCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxVQUFVLEdBQUcsSUFBSSxFQUFFLENBQUMsd0JBQXdCLENBQUMsZ0NBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLFVBQVUsR0FBRyw2QkFBZ0IsRUFBRSxDQUFDO0lBQ2xDLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7UUFDeEIsRUFBRSxDQUFDLG1EQUFtRCxFQUFFLEdBQUcsRUFBRTtZQUMzRCxNQUFNLE1BQU0sR0FBRyxnQ0FBb0IsQ0FBQyxRQUFRLENBQUM7Z0JBQzNDLHlCQUF5QixFQUFFLElBQUk7YUFDaEMsQ0FBQyxDQUFDO1lBQ0gsYUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDBDQUEwQyxFQUFFLEdBQUcsRUFBRTtZQUNsRCxNQUFNLE1BQU0sR0FBRyxnQ0FBb0IsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDakQsYUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QixFQUFFLENBQUMsd0JBQXdCLEVBQUUsR0FBUyxFQUFFO1lBQ3RDLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUMsT0FBTyxDQUN2RSxPQUFPLENBQUMsT0FBTyxDQUFDO2dCQUNkO29CQUNFLEtBQUssRUFBRTt3QkFDTCxLQUFLLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUM7d0JBQzlCLEdBQUcsRUFBRSxFQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBQztxQkFDN0I7aUJBQ0Y7YUFDRixDQUFDLENBQ0gsQ0FBQztZQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sZ0NBQW9CLENBQUMsU0FBUyxDQUNqRCxVQUFVLEVBQ1YsRUFBQyx5QkFBeUIsRUFBRSxJQUFJLEVBQUMsRUFDakMsVUFBVSxFQUNWLElBQUksWUFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDaEIsQ0FBQztZQUNGLGFBQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFFeEMsU0FBUyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQztZQUMxQixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNYLGFBQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEMsYUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxZQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDbEUsQ0FBQztRQUNILENBQUMsQ0FBQSxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsaURBQWlELEVBQUUsR0FBUyxFQUFFO1lBQy9ELE1BQU0sTUFBTSxHQUFHLE1BQU0sZ0NBQW9CLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLElBQUksWUFBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FDcEcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FDYixDQUFDO1lBQ0YsYUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxTQUFTLENBQUMsTUFBTSxZQUFZLEtBQUssQ0FBQyxDQUFDO1lBQ25DLGFBQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQ2hGLENBQUMsQ0FBQSxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaW52YXJpYW50IGZyb20gJ2Fzc2VydCc7XHJcbmltcG9ydCB7IFBvaW50LCBSYW5nZSB9IGZyb20gJ2F0b20nO1xyXG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdjaGFpJztcclxuaW1wb3J0ICogYXMgc2lub24gZnJvbSAnc2lub24nO1xyXG5pbXBvcnQgKiBhcyBscyBmcm9tICcuLi8uLi9saWIvbGFuZ3VhZ2VjbGllbnQnO1xyXG5pbXBvcnQgQ29kZUhpZ2hsaWdodEFkYXB0ZXIgZnJvbSAnLi4vLi4vbGliL2FkYXB0ZXJzL2NvZGUtaGlnaGxpZ2h0LWFkYXB0ZXInO1xyXG5pbXBvcnQgeyBjcmVhdGVTcHlDb25uZWN0aW9uLCBjcmVhdGVGYWtlRWRpdG9yIH0gZnJvbSAnLi4vaGVscGVycy5qcyc7XHJcblxyXG5kZXNjcmliZSgnQ29kZUhpZ2hsaWdodEFkYXB0ZXInLCAoKSA9PiB7XHJcbiAgbGV0IGZha2VFZGl0b3I6IGFueTtcclxuICBsZXQgY29ubmVjdGlvbjogYW55O1xyXG5cclxuICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgIGNvbm5lY3Rpb24gPSBuZXcgbHMuTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uKGNyZWF0ZVNweUNvbm5lY3Rpb24oKSk7XHJcbiAgICBmYWtlRWRpdG9yID0gY3JlYXRlRmFrZUVkaXRvcigpO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnY2FuQWRhcHQnLCAoKSA9PiB7XHJcbiAgICBpdCgncmV0dXJucyB0cnVlIGlmIGRvY3VtZW50IGhpZ2hsaWdodHMgYXJlIHN1cHBvcnRlZCcsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gQ29kZUhpZ2hsaWdodEFkYXB0ZXIuY2FuQWRhcHQoe1xyXG4gICAgICAgIGRvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXI6IHRydWUsXHJcbiAgICAgIH0pO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS50cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3JldHVybnMgZmFsc2UgaXQgbm8gZm9ybWF0dGluZyBzdXBwb3J0ZWQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IENvZGVIaWdobGlnaHRBZGFwdGVyLmNhbkFkYXB0KHt9KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUuZmFsc2U7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2hpZ2hsaWdodCcsICgpID0+IHtcclxuICAgIGl0KCdoaWdobGlnaHRzIHNvbWUgcmFuZ2VzJywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBoaWdobGlnaHRTdHViID0gc2lub24uc3R1Yihjb25uZWN0aW9uLCAnZG9jdW1lbnRIaWdobGlnaHQnKS5yZXR1cm5zKFxyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZShbXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIHJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgc3RhcnQ6IHtsaW5lOiAwLCBjaGFyYWN0ZXI6IDF9LFxyXG4gICAgICAgICAgICAgIGVuZDoge2xpbmU6IDAsIGNoYXJhY3RlcjogMn0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIF0pLFxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBDb2RlSGlnaGxpZ2h0QWRhcHRlci5oaWdobGlnaHQoXHJcbiAgICAgICAgY29ubmVjdGlvbixcclxuICAgICAgICB7ZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlcjogdHJ1ZX0sXHJcbiAgICAgICAgZmFrZUVkaXRvcixcclxuICAgICAgICBuZXcgUG9pbnQoMCwgMCksXHJcbiAgICAgICk7XHJcbiAgICAgIGV4cGVjdChoaWdobGlnaHRTdHViLmNhbGxlZCkudG8uYmUudHJ1ZTtcclxuXHJcbiAgICAgIGludmFyaWFudChyZXN1bHQgIT0gbnVsbCk7XHJcbiAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICBleHBlY3QocmVzdWx0Lmxlbmd0aCkudG8uZXF1YWwoMSk7XHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdFswXS5pc0VxdWFsKG5ldyBSYW5nZShbMCwgMV0sIFswLCAyXSkpKS50by5iZS50cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgndGhyb3dzIGlmIGRvY3VtZW50IGhpZ2hsaWdodHMgYXJlIG5vdCBzdXBwb3J0ZWQnLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IENvZGVIaWdobGlnaHRBZGFwdGVyLmhpZ2hsaWdodChjb25uZWN0aW9uLCB7fSwgZmFrZUVkaXRvciwgbmV3IFBvaW50KDAsIDApKS5jYXRjaChcclxuICAgICAgICAoZXJyKSA9PiBlcnIsXHJcbiAgICAgICk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmFuLmluc3RhbmNlb2YoRXJyb3IpO1xyXG4gICAgICBpbnZhcmlhbnQocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpO1xyXG4gICAgICBleHBlY3QocmVzdWx0Lm1lc3NhZ2UpLnRvLmVxdWFsKCdNdXN0IGhhdmUgdGhlIGRvY3VtZW50SGlnaGxpZ2h0IGNhcGFiaWxpdHknKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19