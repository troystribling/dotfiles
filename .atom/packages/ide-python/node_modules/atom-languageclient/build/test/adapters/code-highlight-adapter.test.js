var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _atom = require('atom');

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _codeHighlightAdapter = require('../../lib/adapters/code-highlight-adapter');

var _codeHighlightAdapter2 = _interopRequireDefault(_codeHighlightAdapter);

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('CodeHighlightAdapter', () => {
  let fakeEditor;
  let connection;

  beforeEach(() => {
    connection = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    fakeEditor = (0, _helpers.createFakeEditor)();
  });

  describe('canAdapt', () => {
    it('returns true if document highlights are supported', () => {
      const result = _codeHighlightAdapter2.default.canAdapt({
        documentHighlightProvider: true
      });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false it no formatting supported', () => {
      const result = _codeHighlightAdapter2.default.canAdapt({});
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('highlight', () => {
    it('highlights some ranges', async () => {
      const highlightStub = _sinon2.default.stub(connection, 'documentHighlight').returns(Promise.resolve([{
        range: {
          start: { line: 0, character: 1 },
          end: { line: 0, character: 2 }
        }
      }]));
      const result = await _codeHighlightAdapter2.default.highlight(connection, { documentHighlightProvider: true }, fakeEditor, new _atom.Point(0, 0));
      (0, _chai.expect)(highlightStub.called).to.be.true;

      (0, _assert2.default)(result != null);
      (0, _chai.expect)(result.length).to.equal(1);
      (0, _chai.expect)(result[0].isEqual(new _atom.Range([0, 1], [0, 2]))).to.be.true;
    });

    it('throws if document highlights are not supported', async () => {
      const result = await _codeHighlightAdapter2.default.highlight(connection, {}, fakeEditor, new _atom.Point(0, 0)).catch(err => err);
      (0, _chai.expect)(result).to.be.an.instanceof(Error);
      (0, _assert2.default)(result instanceof Error);
      (0, _chai.expect)(result.message).to.equal('Must have the documentHighlight capability');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvY29kZS1oaWdobGlnaHQtYWRhcHRlci50ZXN0LmpzIl0sIm5hbWVzIjpbImxzIiwiZGVzY3JpYmUiLCJmYWtlRWRpdG9yIiwiY29ubmVjdGlvbiIsImJlZm9yZUVhY2giLCJMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24iLCJpdCIsInJlc3VsdCIsImNhbkFkYXB0IiwiZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciIsInRvIiwiYmUiLCJ0cnVlIiwiZmFsc2UiLCJoaWdobGlnaHRTdHViIiwic3R1YiIsInJldHVybnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJhbmdlIiwic3RhcnQiLCJsaW5lIiwiY2hhcmFjdGVyIiwiZW5kIiwiaGlnaGxpZ2h0IiwiY2FsbGVkIiwibGVuZ3RoIiwiZXF1YWwiLCJpc0VxdWFsIiwiY2F0Y2giLCJlcnIiLCJhbiIsImluc3RhbmNlb2YiLCJFcnJvciIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiJBQUVBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7SUFBWUEsRTs7QUFDWjs7OztBQUNBOzs7Ozs7QUFFQUMsU0FBUyxzQkFBVCxFQUFpQyxNQUFNO0FBQ3JDLE1BQUlDLFVBQUo7QUFDQSxNQUFJQyxVQUFKOztBQUVBQyxhQUFXLE1BQU07QUFDZkQsaUJBQWEsSUFBSUgsR0FBR0ssd0JBQVAsQ0FBZ0MsbUNBQWhDLENBQWI7QUFDQUgsaUJBQWEsZ0NBQWI7QUFDRCxHQUhEOztBQUtBRCxXQUFTLFVBQVQsRUFBcUIsTUFBTTtBQUN6QkssT0FBRyxtREFBSCxFQUF3RCxNQUFNO0FBQzVELFlBQU1DLFNBQVMsK0JBQXFCQyxRQUFyQixDQUE4QjtBQUMzQ0MsbUNBQTJCO0FBRGdCLE9BQTlCLENBQWY7QUFHQSx3QkFBT0YsTUFBUCxFQUFlRyxFQUFmLENBQWtCQyxFQUFsQixDQUFxQkMsSUFBckI7QUFDRCxLQUxEOztBQU9BTixPQUFHLDBDQUFILEVBQStDLE1BQU07QUFDbkQsWUFBTUMsU0FBUywrQkFBcUJDLFFBQXJCLENBQThCLEVBQTlCLENBQWY7QUFDQSx3QkFBT0QsTUFBUCxFQUFlRyxFQUFmLENBQWtCQyxFQUFsQixDQUFxQkUsS0FBckI7QUFDRCxLQUhEO0FBSUQsR0FaRDs7QUFjQVosV0FBUyxXQUFULEVBQXNCLE1BQU07QUFDMUJLLE9BQUcsd0JBQUgsRUFBNkIsWUFBWTtBQUN2QyxZQUFNUSxnQkFBZ0IsZ0JBQU1DLElBQU4sQ0FBV1osVUFBWCxFQUF1QixtQkFBdkIsRUFBNENhLE9BQTVDLENBQ3BCQyxRQUFRQyxPQUFSLENBQWdCLENBQ2Q7QUFDRUMsZUFBTztBQUNMQyxpQkFBTyxFQUFDQyxNQUFNLENBQVAsRUFBVUMsV0FBVyxDQUFyQixFQURGO0FBRUxDLGVBQUssRUFBQ0YsTUFBTSxDQUFQLEVBQVVDLFdBQVcsQ0FBckI7QUFGQTtBQURULE9BRGMsQ0FBaEIsQ0FEb0IsQ0FBdEI7QUFVQSxZQUFNZixTQUFTLE1BQU0sK0JBQXFCaUIsU0FBckIsQ0FDbkJyQixVQURtQixFQUVuQixFQUFDTSwyQkFBMkIsSUFBNUIsRUFGbUIsRUFHbkJQLFVBSG1CLEVBSW5CLGdCQUFVLENBQVYsRUFBYSxDQUFiLENBSm1CLENBQXJCO0FBTUEsd0JBQU9ZLGNBQWNXLE1BQXJCLEVBQTZCZixFQUE3QixDQUFnQ0MsRUFBaEMsQ0FBbUNDLElBQW5DOztBQUVBLDRCQUFVTCxVQUFVLElBQXBCO0FBQ0Esd0JBQU9BLE9BQU9tQixNQUFkLEVBQXNCaEIsRUFBdEIsQ0FBeUJpQixLQUF6QixDQUErQixDQUEvQjtBQUNBLHdCQUFPcEIsT0FBTyxDQUFQLEVBQVVxQixPQUFWLENBQWtCLGdCQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBVixFQUFrQixDQUFDLENBQUQsRUFBSSxDQUFKLENBQWxCLENBQWxCLENBQVAsRUFBcURsQixFQUFyRCxDQUF3REMsRUFBeEQsQ0FBMkRDLElBQTNEO0FBQ0QsS0F0QkQ7O0FBd0JBTixPQUFHLGlEQUFILEVBQXNELFlBQVk7QUFDaEUsWUFBTUMsU0FBUyxNQUFNLCtCQUFxQmlCLFNBQXJCLENBQStCckIsVUFBL0IsRUFBMkMsRUFBM0MsRUFBK0NELFVBQS9DLEVBQTJELGdCQUFVLENBQVYsRUFBYSxDQUFiLENBQTNELEVBQTRFMkIsS0FBNUUsQ0FDbkJDLE9BQU9BLEdBRFksQ0FBckI7QUFHQSx3QkFBT3ZCLE1BQVAsRUFBZUcsRUFBZixDQUFrQkMsRUFBbEIsQ0FBcUJvQixFQUFyQixDQUF3QkMsVUFBeEIsQ0FBbUNDLEtBQW5DO0FBQ0EsNEJBQVUxQixrQkFBa0IwQixLQUE1QjtBQUNBLHdCQUFPMUIsT0FBTzJCLE9BQWQsRUFBdUJ4QixFQUF2QixDQUEwQmlCLEtBQTFCLENBQWdDLDRDQUFoQztBQUNELEtBUEQ7QUFRRCxHQWpDRDtBQWtDRCxDQXpERCIsImZpbGUiOiJjb2RlLWhpZ2hsaWdodC1hZGFwdGVyLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQge1BvaW50LCBSYW5nZX0gZnJvbSAnYXRvbSc7XG5pbXBvcnQge2V4cGVjdH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0ICogYXMgbHMgZnJvbSAnLi4vLi4vbGliL2xhbmd1YWdlY2xpZW50JztcbmltcG9ydCBDb2RlSGlnaGxpZ2h0QWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvY29kZS1oaWdobGlnaHQtYWRhcHRlcic7XG5pbXBvcnQge2NyZWF0ZVNweUNvbm5lY3Rpb24sIGNyZWF0ZUZha2VFZGl0b3J9IGZyb20gJy4uL2hlbHBlcnMuanMnO1xuXG5kZXNjcmliZSgnQ29kZUhpZ2hsaWdodEFkYXB0ZXInLCAoKSA9PiB7XG4gIGxldCBmYWtlRWRpdG9yO1xuICBsZXQgY29ubmVjdGlvbjtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjb25uZWN0aW9uID0gbmV3IGxzLkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbihjcmVhdGVTcHlDb25uZWN0aW9uKCkpO1xuICAgIGZha2VFZGl0b3IgPSBjcmVhdGVGYWtlRWRpdG9yKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjYW5BZGFwdCcsICgpID0+IHtcbiAgICBpdCgncmV0dXJucyB0cnVlIGlmIGRvY3VtZW50IGhpZ2hsaWdodHMgYXJlIHN1cHBvcnRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IENvZGVIaWdobGlnaHRBZGFwdGVyLmNhbkFkYXB0KHtcbiAgICAgICAgZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlcjogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KCdyZXR1cm5zIGZhbHNlIGl0IG5vIGZvcm1hdHRpbmcgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gQ29kZUhpZ2hsaWdodEFkYXB0ZXIuY2FuQWRhcHQoe30pO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUuZmFsc2U7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdoaWdobGlnaHQnLCAoKSA9PiB7XG4gICAgaXQoJ2hpZ2hsaWdodHMgc29tZSByYW5nZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBoaWdobGlnaHRTdHViID0gc2lub24uc3R1Yihjb25uZWN0aW9uLCAnZG9jdW1lbnRIaWdobGlnaHQnKS5yZXR1cm5zKFxuICAgICAgICBQcm9taXNlLnJlc29sdmUoW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJhbmdlOiB7XG4gICAgICAgICAgICAgIHN0YXJ0OiB7bGluZTogMCwgY2hhcmFjdGVyOiAxfSxcbiAgICAgICAgICAgICAgZW5kOiB7bGluZTogMCwgY2hhcmFjdGVyOiAyfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgXSksXG4gICAgICApO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQ29kZUhpZ2hsaWdodEFkYXB0ZXIuaGlnaGxpZ2h0KFxuICAgICAgICBjb25uZWN0aW9uLFxuICAgICAgICB7ZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlcjogdHJ1ZX0sXG4gICAgICAgIGZha2VFZGl0b3IsXG4gICAgICAgIG5ldyBQb2ludCgwLCAwKSxcbiAgICAgICk7XG4gICAgICBleHBlY3QoaGlnaGxpZ2h0U3R1Yi5jYWxsZWQpLnRvLmJlLnRydWU7XG5cbiAgICAgIGludmFyaWFudChyZXN1bHQgIT0gbnVsbCk7XG4gICAgICBleHBlY3QocmVzdWx0Lmxlbmd0aCkudG8uZXF1YWwoMSk7XG4gICAgICBleHBlY3QocmVzdWx0WzBdLmlzRXF1YWwobmV3IFJhbmdlKFswLCAxXSwgWzAsIDJdKSkpLnRvLmJlLnRydWU7XG4gICAgfSk7XG5cbiAgICBpdCgndGhyb3dzIGlmIGRvY3VtZW50IGhpZ2hsaWdodHMgYXJlIG5vdCBzdXBwb3J0ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBDb2RlSGlnaGxpZ2h0QWRhcHRlci5oaWdobGlnaHQoY29ubmVjdGlvbiwge30sIGZha2VFZGl0b3IsIG5ldyBQb2ludCgwLCAwKSkuY2F0Y2goXG4gICAgICAgIGVyciA9PiBlcnIsXG4gICAgICApO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUuYW4uaW5zdGFuY2VvZihFcnJvcik7XG4gICAgICBpbnZhcmlhbnQocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5tZXNzYWdlKS50by5lcXVhbCgnTXVzdCBoYXZlIHRoZSBkb2N1bWVudEhpZ2hsaWdodCBjYXBhYmlsaXR5Jyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=