"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const invariant = require("assert");
const atom_1 = require("atom");
const chai_1 = require("chai");
const sinon = require("sinon");
const ls = require("../../lib/languageclient");
const datatip_adapter_1 = require("../../lib/adapters/datatip-adapter");
const helpers_js_1 = require("../helpers.js");
describe('DatatipAdapter', () => {
    let fakeEditor;
    let connection;
    beforeEach(() => {
        global.sinon = sinon.sandbox.create();
        connection = new ls.LanguageClientConnection(helpers_js_1.createSpyConnection());
        fakeEditor = helpers_js_1.createFakeEditor();
    });
    afterEach(() => {
        global.sinon.restore();
    });
    describe('canAdapt', () => {
        it('returns true if hoverProvider is supported', () => {
            const result = datatip_adapter_1.default.canAdapt({ hoverProvider: true });
            chai_1.expect(result).to.be.true;
        });
        it('returns false if hoverProvider not supported', () => {
            const result = datatip_adapter_1.default.canAdapt({});
            chai_1.expect(result).to.be.false;
        });
    });
    describe('getDatatip', () => {
        it('calls LSP document/hover at the given position', () => __awaiter(this, void 0, void 0, function* () {
            sinon.stub(connection, 'hover').resolves({
                range: {
                    start: { line: 0, character: 1 },
                    end: { line: 0, character: 2 },
                },
                contents: ['test', { language: 'testlang', value: 'test snippet' }],
            });
            const grammarSpy = sinon.spy(atom.grammars, 'grammarForScopeName');
            const datatipAdapter = new datatip_adapter_1.default();
            const datatip = yield datatipAdapter.getDatatip(connection, fakeEditor, new atom_1.Point(0, 0));
            chai_1.expect(datatip).to.be.ok;
            invariant(datatip != null);
            if (datatip) {
                chai_1.expect(datatip.range.start.row).equal(0);
                chai_1.expect(datatip.range.start.column).equal(1);
                chai_1.expect(datatip.range.end.row).equal(0);
                chai_1.expect(datatip.range.end.column).equal(2);
                chai_1.expect(datatip.markedStrings).to.have.lengthOf(2);
                chai_1.expect(datatip.markedStrings[0]).eql({ type: 'markdown', value: 'test' });
                const snippet = datatip.markedStrings[1];
                chai_1.expect(snippet.type).equal('snippet');
                invariant(snippet.type === 'snippet');
                chai_1.expect(snippet.grammar.scopeName).equal('text.plain.null-grammar');
                chai_1.expect(snippet.value).equal('test snippet');
                chai_1.expect(grammarSpy.calledWith('source.testlang')).to.be.true;
            }
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YXRpcC1hZGFwdGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L2FkYXB0ZXJzL2RhdGF0aXAtYWRhcHRlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxvQ0FBcUM7QUFDckMsK0JBQTZCO0FBQzdCLCtCQUE4QjtBQUM5QiwrQkFBK0I7QUFDL0IsK0NBQStDO0FBQy9DLHdFQUFnRTtBQUNoRSw4Q0FBc0U7QUFFdEUsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLFVBQWUsQ0FBQztJQUNwQixJQUFJLFVBQWUsQ0FBQztJQUVwQixVQUFVLENBQUMsR0FBRyxFQUFFO1FBQ2IsTUFBYyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQy9DLFVBQVUsR0FBRyxJQUFJLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxnQ0FBbUIsRUFBRSxDQUFDLENBQUM7UUFDcEUsVUFBVSxHQUFHLDZCQUFnQixFQUFFLENBQUM7SUFDbEMsQ0FBQyxDQUFDLENBQUM7SUFDSCxTQUFTLENBQUMsR0FBRyxFQUFFO1FBQ1osTUFBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsQyxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO1FBQ3hCLEVBQUUsQ0FBQyw0Q0FBNEMsRUFBRSxHQUFHLEVBQUU7WUFDcEQsTUFBTSxNQUFNLEdBQUcseUJBQWMsQ0FBQyxRQUFRLENBQUMsRUFBQyxhQUFhLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztZQUM5RCxhQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1lBQ3RELE1BQU0sTUFB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QUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDO2FBQzdEO1FBQ0gsQ0FBQyxDQUFBLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaW52YXJpYW50ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XHJcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnYXRvbSc7XHJcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xyXG5pbXBvcnQgKiBhcyBzaW5vbiBmcm9tICdzaW5vbic7XHJcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCBEYXRhdGlwQWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvZGF0YXRpcC1hZGFwdGVyJztcclxuaW1wb3J0IHsgY3JlYXRlU3B5Q29ubmVjdGlvbiwgY3JlYXRlRmFrZUVkaXRvciB9IGZyb20gJy4uL2hlbHBlcnMuanMnO1xyXG5cclxuZGVzY3JpYmUoJ0RhdGF0aXBBZGFwdGVyJywgKCkgPT4ge1xyXG4gIGxldCBmYWtlRWRpdG9yOiBhbnk7XHJcbiAgbGV0IGNvbm5lY3Rpb246IGFueTtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAoZ2xvYmFsIGFzIGFueSkuc2lub24gPSBzaW5vbi5zYW5kYm94LmNyZWF0ZSgpO1xyXG4gICAgY29ubmVjdGlvbiA9IG5ldyBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb24oY3JlYXRlU3B5Q29ubmVjdGlvbigpKTtcclxuICAgIGZha2VFZGl0b3IgPSBjcmVhdGVGYWtlRWRpdG9yKCk7XHJcbiAgfSk7XHJcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcclxuICAgIChnbG9iYWwgYXMgYW55KS5zaW5vbi5yZXN0b3JlKCk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdjYW5BZGFwdCcsICgpID0+IHtcclxuICAgIGl0KCdyZXR1cm5zIHRydWUgaWYgaG92ZXJQcm92aWRlciBpcyBzdXBwb3J0ZWQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IERhdGF0aXBBZGFwdGVyLmNhbkFkYXB0KHtob3ZlclByb3ZpZGVyOiB0cnVlfSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLnRydWU7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgncmV0dXJucyBmYWxzZSBpZiBob3ZlclByb3ZpZGVyIG5vdCBzdXBwb3J0ZWQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IERhdGF0aXBBZGFwdGVyLmNhbkFkYXB0KHt9KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUuZmFsc2U7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2dldERhdGF0aXAnLCAoKSA9PiB7XHJcbiAgICBpdCgnY2FsbHMgTFNQIGRvY3VtZW50L2hvdmVyIGF0IHRoZSBnaXZlbiBwb3NpdGlvbicsIGFzeW5jICgpID0+IHtcclxuICAgICAgc2lub24uc3R1Yihjb25uZWN0aW9uLCAnaG92ZXInKS5yZXNvbHZlcyh7XHJcbiAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgIHN0YXJ0OiB7bGluZTogMCwgY2hhcmFjdGVyOiAxfSxcclxuICAgICAgICAgIGVuZDoge2xpbmU6IDAsIGNoYXJhY3RlcjogMn0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb250ZW50czogWyd0ZXN0Jywge2xhbmd1YWdlOiAndGVzdGxhbmcnLCB2YWx1ZTogJ3Rlc3Qgc25pcHBldCd9XSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCBncmFtbWFyU3B5ID0gc2lub24uc3B5KGF0b20uZ3JhbW1hcnMsICdncmFtbWFyRm9yU2NvcGVOYW1lJyk7XHJcblxyXG4gICAgICBjb25zdCBkYXRhdGlwQWRhcHRlciA9IG5ldyBEYXRhdGlwQWRhcHRlcigpO1xyXG4gICAgICBjb25zdCBkYXRhdGlwID0gYXdhaXQgZGF0YXRpcEFkYXB0ZXIuZ2V0RGF0YXRpcChjb25uZWN0aW9uLCBmYWtlRWRpdG9yLCBuZXcgUG9pbnQoMCwgMCkpO1xyXG4gICAgICBleHBlY3QoZGF0YXRpcCkudG8uYmUub2s7XHJcbiAgICAgIGludmFyaWFudChkYXRhdGlwICE9IG51bGwpO1xyXG5cclxuICAgICAgaWYgKGRhdGF0aXApIHtcclxuICAgICAgICBleHBlY3QoZGF0YXRpcC5yYW5nZS5zdGFydC5yb3cpLmVxdWFsKDApO1xyXG4gICAgICAgIGV4cGVjdChkYXRhdGlwLnJhbmdlLnN0YXJ0LmNvbHVtbikuZXF1YWwoMSk7XHJcbiAgICAgICAgZXhwZWN0KGRhdGF0aXAucmFuZ2UuZW5kLnJvdykuZXF1YWwoMCk7XHJcbiAgICAgICAgZXhwZWN0KGRhdGF0aXAucmFuZ2UuZW5kLmNvbHVtbikuZXF1YWwoMik7XHJcblxyXG4gICAgICAgIGV4cGVjdChkYXRhdGlwLm1hcmtlZFN0cmluZ3MpLnRvLmhhdmUubGVuZ3RoT2YoMik7XHJcbiAgICAgICAgZXhwZWN0KGRhdGF0aXAubWFya2VkU3RyaW5nc1swXSkuZXFsKHt0eXBlOiAnbWFya2Rvd24nLCB2YWx1ZTogJ3Rlc3QnfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNuaXBwZXQgPSBkYXRhdGlwLm1hcmtlZFN0cmluZ3NbMV07XHJcbiAgICAgICAgZXhwZWN0KHNuaXBwZXQudHlwZSkuZXF1YWwoJ3NuaXBwZXQnKTtcclxuICAgICAgICBpbnZhcmlhbnQoc25pcHBldC50eXBlID09PSAnc25pcHBldCcpO1xyXG4gICAgICAgIGV4cGVjdCgoc25pcHBldCBhcyBhbnkpLmdyYW1tYXIuc2NvcGVOYW1lKS5lcXVhbCgndGV4dC5wbGFpbi5udWxsLWdyYW1tYXInKTtcclxuICAgICAgICBleHBlY3Qoc25pcHBldC52YWx1ZSkuZXF1YWwoJ3Rlc3Qgc25pcHBldCcpO1xyXG5cclxuICAgICAgICBleHBlY3QoZ3JhbW1hclNweS5jYWxsZWRXaXRoKCdzb3VyY2UudGVzdGxhbmcnKSkudG8uYmUudHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=