"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const languageclient_1 = require("../../lib/languageclient");
const document_sync_adapter_1 = require("../../lib/adapters/document-sync-adapter");
describe('DocumentSyncAdapter', () => {
    describe('canAdapt', () => {
        it('returns true if v2 incremental change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: languageclient_1.TextDocumentSyncKind.Incremental,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns true if v2 full change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: languageclient_1.TextDocumentSyncKind.Full,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false if v2 none change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: languageclient_1.TextDocumentSyncKind.None,
            });
            chai_1.expect(result).to.be.false;
        });
        it('returns true if v3 incremental change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: { change: languageclient_1.TextDocumentSyncKind.Incremental },
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns true if v3 full change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: { change: languageclient_1.TextDocumentSyncKind.Full },
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false if v3 none change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: { change: languageclient_1.TextDocumentSyncKind.None },
            });
            chai_1.expect(result).to.be.false;
        });
    });
    describe('constructor', () => {
        function create(textDocumentSync) {
            return new document_sync_adapter_1.default(null, () => false, textDocumentSync);
        }
        it('sets _documentSync.change correctly Incremental for v2 capabilities', () => {
            const result = create(languageclient_1.TextDocumentSyncKind.Incremental)._documentSync.change;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Incremental);
        });
        it('sets _documentSync.change correctly Full for v2 capabilities', () => {
            const result = create(languageclient_1.TextDocumentSyncKind.Full)._documentSync.change;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Full);
        });
        it('sets _documentSync.change correctly Incremental for v3 capabilities', () => {
            const result = create({ change: languageclient_1.TextDocumentSyncKind.Incremental })._documentSync.change;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Incremental);
        });
        it('sets _documentSync.change correctly Full for v3 capabilities', () => {
            const result = create({ change: languageclient_1.TextDocumentSyncKind.Full })._documentSync.change;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Full);
        });
        it('sets _documentSync.change correctly Full for unset capabilities', () => {
            const result = create()._documentSync.change;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Full);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,