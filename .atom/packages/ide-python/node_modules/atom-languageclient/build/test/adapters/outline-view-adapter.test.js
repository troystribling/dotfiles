var _outlineViewAdapter = require('../../lib/adapters/outline-view-adapter');

var _outlineViewAdapter2 = _interopRequireDefault(_outlineViewAdapter);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('OutlineViewAdapter', () => {
  const createLocation = (a, b, c, d) => ({
    uri: '',
    range: { start: { line: a, character: b }, end: { line: c, character: d } }
  });

  beforeEach(() => {
    global.sinon = _sinon2.default.sandbox.create();
  });
  afterEach(() => {
    global.sinon.restore();
  });

  describe('canAdapt', () => {
    it('returns true if documentSymbolProvider is supported', () => {
      const result = _outlineViewAdapter2.default.canAdapt({ documentSymbolProvider: true });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false if documentSymbolProvider not supported', () => {
      const result = _outlineViewAdapter2.default.canAdapt({});
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('createOutlineTrees', () => {
    it('creates an empty array given an empty array', () => {
      const result = _outlineViewAdapter2.default.createOutlineTrees([]);
      (0, _chai.expect)(result).to.deep.equal([]);
    });

    it('creates a single converted root item from a single source item', () => {
      const sourceItem = { kind: ls.SymbolKind.Namespace, name: 'R', location: createLocation(5, 6, 7, 8) };
      const expected = _outlineViewAdapter2.default.symbolToOutline(sourceItem);
      const result = _outlineViewAdapter2.default.createOutlineTrees([sourceItem]);
      (0, _chai.expect)(result).to.deep.equal([expected]);
    });

    it('creates an empty root container with a single source item when containerName missing', () => {
      const sourceItem = { kind: ls.SymbolKind.Class, name: 'Program', location: createLocation(1, 2, 3, 4) };
      const expected = _outlineViewAdapter2.default.symbolToOutline(sourceItem);
      const missingContainerSource = Object.assign(sourceItem, { containerName: 'missing' });
      const result = _outlineViewAdapter2.default.createOutlineTrees([missingContainerSource]);
      (0, _chai.expect)(result.length).to.equal(1);
      (0, _chai.expect)(result[0].representativeName).to.equal('missing');
      (0, _chai.expect)(result[0].startPosition.row).to.equal(0);
      (0, _chai.expect)(result[0].startPosition.column).to.equal(0);
      (0, _chai.expect)(result[0].children).to.deep.equal([expected]);
    });

    it('creates an empty root container with a single source item when containerName is missing and matches own name', () => {
      const sourceItem = { kind: ls.SymbolKind.Class, name: 'simple', location: createLocation(1, 2, 3, 4) };
      const expected = _outlineViewAdapter2.default.symbolToOutline(sourceItem);
      const missingContainerSource = Object.assign(sourceItem, { containerName: 'simple' });
      const result = _outlineViewAdapter2.default.createOutlineTrees([missingContainerSource]);
      (0, _chai.expect)(result.length).to.equal(1);
      (0, _chai.expect)(result[0].representativeName).to.equal('simple');
      (0, _chai.expect)(result[0].startPosition.row).to.equal(0);
      (0, _chai.expect)(result[0].startPosition.column).to.equal(0);
      (0, _chai.expect)(result[0].children).to.deep.equal([expected]);
    });

    it('creates a simple named hierarchy', () => {
      const sourceItems = [{ kind: ls.SymbolKind.Namespace, name: 'java.com', location: createLocation(1, 0, 10, 0) }, { kind: ls.SymbolKind.Class, name: 'Program', location: createLocation(2, 0, 7, 0), containerName: 'java.com' }, { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(4, 0, 5, 0), containerName: 'Program' }];
      const result = _outlineViewAdapter2.default.createOutlineTrees(sourceItems);
      (0, _chai.expect)(result.length).to.equal(1);
      (0, _chai.expect)(result[0].children.length).to.equal(1);
      (0, _chai.expect)(result[0].children[0].representativeName).to.equal('Program');
      (0, _chai.expect)(result[0].children[0].children.length).to.equal(1);
      (0, _chai.expect)(result[0].children[0].children[0].representativeName).to.equal('main');
    });

    it('retains duplicate named items', () => {
      const sourceItems = [{ kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 5, 0) }, { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(6, 0, 10, 0) }, { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(7, 0, 8, 0), containerName: 'duplicate' }];
      const result = _outlineViewAdapter2.default.createOutlineTrees(sourceItems);
      (0, _chai.expect)(result.length).to.equal(2);
      (0, _chai.expect)(result[0].representativeName).to.equal('duplicate');
      (0, _chai.expect)(result[1].representativeName).to.equal('duplicate');
    });

    it('disambiguates containerName based on range', () => {
      const sourceItems = [{ kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 5, 0) }, { kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(6, 0, 10, 0) }, { kind: ls.SymbolKind.Function, name: 'main', location: createLocation(7, 0, 8, 0), containerName: 'duplicate' }];
      const result = _outlineViewAdapter2.default.createOutlineTrees(sourceItems);
      (0, _chai.expect)(result[1].children.length).to.equal(1);
      (0, _chai.expect)(result[1].children[0].representativeName).to.equal('main');
    });

    it("does not become it's own parent", () => {
      const sourceItems = [{ kind: ls.SymbolKind.Namespace, name: 'duplicate', location: createLocation(1, 0, 10, 0) }, {
        kind: ls.SymbolKind.Namespace,
        name: 'duplicate',
        location: createLocation(6, 0, 7, 0),
        containerName: 'duplicate'
      }];
      const result = _outlineViewAdapter2.default.createOutlineTrees(sourceItems);
      (0, _chai.expect)(result.length).to.equal(1);
      const r = result;
      (0, _chai.expect)(r[0].endPosition.row).to.equal(10);
      (0, _chai.expect)(r[0].children.length).to.equal(1);
      (0, _chai.expect)(r[0].children[0].endPosition.row).to.equal(7);
    });

    it('parents to the innnermost named container', () => {
      const sourceItems = [{ kind: ls.SymbolKind.Namespace, name: 'turtles', location: createLocation(1, 0, 10, 0) }, {
        kind: ls.SymbolKind.Namespace,
        name: 'turtles',
        location: createLocation(4, 0, 8, 0),
        containerName: 'turtles'
      }, { kind: ls.SymbolKind.Class, name: 'disc', location: createLocation(4, 0, 5, 0), containerName: 'turtles' }];
      const result = _outlineViewAdapter2.default.createOutlineTrees(sourceItems);
      (0, _chai.expect)(result.length).to.equal(1);
      const r = result;
      (0, _chai.expect)(r[0].endPosition.row).to.equal(10);
      (0, _chai.expect)(r[0].children.length).to.equal(1);
      (0, _chai.expect)(r[0].children[0].endPosition.row).to.equal(8);
      (0, _chai.expect)(r[0].children[0].children.length).to.equal(1);
      (0, _chai.expect)(r[0].children[0].children[0].endPosition.row).to.equal(5);
    });
  });

  describe('symbolToOutline', () => {
    it('converts an individual item', () => {
      const sourceItem = { kind: ls.SymbolKind.Class, name: 'Program', location: createLocation(1, 2, 3, 4) };
      const result = _outlineViewAdapter2.default.symbolToOutline(sourceItem);
      (0, _chai.expect)(result.icon).to.equal('type-class');
      (0, _chai.expect)(result.representativeName).to.equal('Program');
      (0, _chai.expect)(result.children).to.deep.equal([]);
      const r = result;
      (0, _chai.expect)(r.tokenizedText[0].kind).to.equal('type');
      (0, _chai.expect)(r.tokenizedText[0].value).to.equal('Program');
      (0, _chai.expect)(r.startPosition.row).to.equal(1);
      (0, _chai.expect)(r.startPosition.column).to.equal(2);
      (0, _chai.expect)(r.endPosition.row).to.equal(3);
      (0, _chai.expect)(r.endPosition.column).to.equal(4);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,