var _autoLanguageclient = require('../lib/auto-languageclient');

var _autoLanguageclient2 = _interopRequireDefault(_autoLanguageclient);

var _chai = require('chai');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('AutoLanguageClient', () => {
  describe('shouldSyncForEditor', () => {
    class CustomAutoLanguageClient extends _autoLanguageclient2.default {
      getGrammarScopes() {
        return ['Java', 'Python'];
      }
    }

    const client = new CustomAutoLanguageClient();

    function mockEditor(uri, scopeName) {
      return {
        getURI: () => uri,
        getGrammar: () => {
          return { scopeName };
        }
      };
    }

    it('selects documents in project and in supported language', () => {
      const editor = mockEditor('/path/to/somewhere', client.getGrammarScopes()[0]);
      (0, _chai.expect)(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(true);
    });

    it('does not select documents outside of project', () => {
      const editor = mockEditor('/path/to/elsewhere/file', client.getGrammarScopes()[0]);
      (0, _chai.expect)(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
    });

    it('does not select documents in unsupported language', () => {
      const editor = mockEditor('/path/to/somewhere', client.getGrammarScopes()[0] + '-dummy');
      (0, _chai.expect)(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
    });

    it('does not select documents in unsupported language outside of project', () => {
      const editor = mockEditor('/path/to/elsewhere/file', client.getGrammarScopes()[0] + '-dummy');
      (0, _chai.expect)(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvYXV0by1sYW5ndWFnZWNsaWVudC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiQ3VzdG9tQXV0b0xhbmd1YWdlQ2xpZW50IiwiZ2V0R3JhbW1hclNjb3BlcyIsImNsaWVudCIsIm1vY2tFZGl0b3IiLCJ1cmkiLCJzY29wZU5hbWUiLCJnZXRVUkkiLCJnZXRHcmFtbWFyIiwiaXQiLCJlZGl0b3IiLCJzaG91bGRTeW5jRm9yRWRpdG9yIiwiZXF1YWxzIl0sIm1hcHBpbmdzIjoiQUFFQTs7OztBQUNBOzs7O0FBRUFBLFNBQVMsb0JBQVQsRUFBK0IsTUFBTTtBQUNuQ0EsV0FBUyxxQkFBVCxFQUFnQyxNQUFNO0FBQ3BDLFVBQU1DLHdCQUFOLHNDQUEwRDtBQUN4REMseUJBQW1CO0FBQ2pCLGVBQU8sQ0FBQyxNQUFELEVBQVMsUUFBVCxDQUFQO0FBQ0Q7QUFIdUQ7O0FBTTFELFVBQU1DLFNBQVMsSUFBSUYsd0JBQUosRUFBZjs7QUFFQSxhQUFTRyxVQUFULENBQW9CQyxHQUFwQixFQUF5QkMsU0FBekIsRUFBeUM7QUFDdkMsYUFBTztBQUNMQyxnQkFBUSxNQUFNRixHQURUO0FBRUxHLG9CQUFZLE1BQU07QUFDaEIsaUJBQU8sRUFBQ0YsU0FBRCxFQUFQO0FBQ0Q7QUFKSSxPQUFQO0FBTUQ7O0FBRURHLE9BQUcsd0RBQUgsRUFBNkQsTUFBTTtBQUNqRSxZQUFNQyxTQUFTTixXQUFXLG9CQUFYLEVBQWlDRCxPQUFPRCxnQkFBUCxHQUEwQixDQUExQixDQUFqQyxDQUFmO0FBQ0Esd0JBQU9DLE9BQU9RLG1CQUFQLENBQTJCRCxNQUEzQixFQUFtQyxvQkFBbkMsQ0FBUCxFQUFpRUUsTUFBakUsQ0FBd0UsSUFBeEU7QUFDRCxLQUhEOztBQUtBSCxPQUFHLDhDQUFILEVBQW1ELE1BQU07QUFDdkQsWUFBTUMsU0FBU04sV0FBVyx5QkFBWCxFQUFzQ0QsT0FBT0QsZ0JBQVAsR0FBMEIsQ0FBMUIsQ0FBdEMsQ0FBZjtBQUNBLHdCQUFPQyxPQUFPUSxtQkFBUCxDQUEyQkQsTUFBM0IsRUFBbUMsb0JBQW5DLENBQVAsRUFBaUVFLE1BQWpFLENBQXdFLEtBQXhFO0FBQ0QsS0FIRDs7QUFLQUgsT0FBRyxtREFBSCxFQUF3RCxNQUFNO0FBQzVELFlBQU1DLFNBQVNOLFdBQVcsb0JBQVgsRUFBaUNELE9BQU9ELGdCQUFQLEdBQTBCLENBQTFCLElBQStCLFFBQWhFLENBQWY7QUFDQSx3QkFBT0MsT0FBT1EsbUJBQVAsQ0FBMkJELE1BQTNCLEVBQW1DLG9CQUFuQyxDQUFQLEVBQWlFRSxNQUFqRSxDQUF3RSxLQUF4RTtBQUNELEtBSEQ7O0FBS0FILE9BQUcsc0VBQUgsRUFBMkUsTUFBTTtBQUMvRSxZQUFNQyxTQUFTTixXQUFXLHlCQUFYLEVBQXNDRCxPQUFPRCxnQkFBUCxHQUEwQixDQUExQixJQUErQixRQUFyRSxDQUFmO0FBQ0Esd0JBQU9DLE9BQU9RLG1CQUFQLENBQTJCRCxNQUEzQixFQUFtQyxvQkFBbkMsQ0FBUCxFQUFpRUUsTUFBakUsQ0FBd0UsS0FBeEU7QUFDRCxLQUhEO0FBSUQsR0FyQ0Q7QUFzQ0QsQ0F2Q0QiLCJmaWxlIjoiYXV0by1sYW5ndWFnZWNsaWVudC50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcclxuXHJcbmltcG9ydCBBdXRvTGFuZ3VhZ2VDbGllbnQgZnJvbSAnLi4vbGliL2F1dG8tbGFuZ3VhZ2VjbGllbnQnO1xyXG5pbXBvcnQge2V4cGVjdH0gZnJvbSAnY2hhaSc7XHJcblxyXG5kZXNjcmliZSgnQXV0b0xhbmd1YWdlQ2xpZW50JywgKCkgPT4ge1xyXG4gIGRlc2NyaWJlKCdzaG91bGRTeW5jRm9yRWRpdG9yJywgKCkgPT4ge1xyXG4gICAgY2xhc3MgQ3VzdG9tQXV0b0xhbmd1YWdlQ2xpZW50IGV4dGVuZHMgQXV0b0xhbmd1YWdlQ2xpZW50IHtcclxuICAgICAgZ2V0R3JhbW1hclNjb3BlcygpIHtcclxuICAgICAgICByZXR1cm4gWydKYXZhJywgJ1B5dGhvbiddO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEN1c3RvbUF1dG9MYW5ndWFnZUNsaWVudCgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIG1vY2tFZGl0b3IodXJpLCBzY29wZU5hbWUpOiBhbnkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldFVSSTogKCkgPT4gdXJpLFxyXG4gICAgICAgIGdldEdyYW1tYXI6ICgpID0+IHtcclxuICAgICAgICAgIHJldHVybiB7c2NvcGVOYW1lfTtcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGl0KCdzZWxlY3RzIGRvY3VtZW50cyBpbiBwcm9qZWN0IGFuZCBpbiBzdXBwb3J0ZWQgbGFuZ3VhZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVkaXRvciA9IG1vY2tFZGl0b3IoJy9wYXRoL3RvL3NvbWV3aGVyZScsIGNsaWVudC5nZXRHcmFtbWFyU2NvcGVzKClbMF0pO1xyXG4gICAgICBleHBlY3QoY2xpZW50LnNob3VsZFN5bmNGb3JFZGl0b3IoZWRpdG9yLCAnL3BhdGgvdG8vc29tZXdoZXJlJykpLmVxdWFscyh0cnVlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdkb2VzIG5vdCBzZWxlY3QgZG9jdW1lbnRzIG91dHNpZGUgb2YgcHJvamVjdCcsICgpID0+IHtcclxuICAgICAgY29uc3QgZWRpdG9yID0gbW9ja0VkaXRvcignL3BhdGgvdG8vZWxzZXdoZXJlL2ZpbGUnLCBjbGllbnQuZ2V0R3JhbW1hclNjb3BlcygpWzBdKTtcclxuICAgICAgZXhwZWN0KGNsaWVudC5zaG91bGRTeW5jRm9yRWRpdG9yKGVkaXRvciwgJy9wYXRoL3RvL3NvbWV3aGVyZScpKS5lcXVhbHMoZmFsc2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RvZXMgbm90IHNlbGVjdCBkb2N1bWVudHMgaW4gdW5zdXBwb3J0ZWQgbGFuZ3VhZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGVkaXRvciA9IG1vY2tFZGl0b3IoJy9wYXRoL3RvL3NvbWV3aGVyZScsIGNsaWVudC5nZXRHcmFtbWFyU2NvcGVzKClbMF0gKyAnLWR1bW15Jyk7XHJcbiAgICAgIGV4cGVjdChjbGllbnQuc2hvdWxkU3luY0ZvckVkaXRvcihlZGl0b3IsICcvcGF0aC90by9zb21ld2hlcmUnKSkuZXF1YWxzKGZhbHNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdkb2VzIG5vdCBzZWxlY3QgZG9jdW1lbnRzIGluIHVuc3VwcG9ydGVkIGxhbmd1YWdlIG91dHNpZGUgb2YgcHJvamVjdCcsICgpID0+IHtcclxuICAgICAgY29uc3QgZWRpdG9yID0gbW9ja0VkaXRvcignL3BhdGgvdG8vZWxzZXdoZXJlL2ZpbGUnLCBjbGllbnQuZ2V0R3JhbW1hclNjb3BlcygpWzBdICsgJy1kdW1teScpO1xyXG4gICAgICBleHBlY3QoY2xpZW50LnNob3VsZFN5bmNGb3JFZGl0b3IoZWRpdG9yLCAnL3BhdGgvdG8vc29tZXdoZXJlJykpLmVxdWFscyhmYWxzZSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufSk7XHJcbiJdfQ==