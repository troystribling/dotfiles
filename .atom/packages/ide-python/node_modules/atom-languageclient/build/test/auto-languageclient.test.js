"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const auto_languageclient_1 = require("../lib/auto-languageclient");
const chai_1 = require("chai");
describe('AutoLanguageClient', () => {
    describe('shouldSyncForEditor', () => {
        class CustomAutoLanguageClient extends auto_languageclient_1.default {
            getGrammarScopes() {
                return ['Java', 'Python'];
            }
        }
        const client = new CustomAutoLanguageClient();
        function mockEditor(uri, scopeName) {
            return {
                getURI: () => uri,
                getGrammar: () => {
                    return { scopeName };
                },
            };
        }
        it('selects documents in project and in supported language', () => {
            const editor = mockEditor('/path/to/somewhere', client.getGrammarScopes()[0]);
            chai_1.expect(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(true);
        });
        it('does not select documents outside of project', () => {
            const editor = mockEditor('/path/to/elsewhere/file', client.getGrammarScopes()[0]);
            chai_1.expect(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
        });
        it('does not select documents in unsupported language', () => {
            const editor = mockEditor('/path/to/somewhere', client.getGrammarScopes()[0] + '-dummy');
            chai_1.expect(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
        });
        it('does not select documents in unsupported language outside of project', () => {
            const editor = mockEditor('/path/to/elsewhere/file', client.getGrammarScopes()[0] + '-dummy');
            chai_1.expect(client.shouldSyncForEditor(editor, '/path/to/somewhere')).equals(false);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0by1sYW5ndWFnZWNsaWVudC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9hdXRvLWxhbmd1YWdlY2xpZW50LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvRUFBNEQ7QUFDNUQsK0JBQThCO0FBRTlCLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUU7SUFDbEMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtRQUNuQyw4QkFBK0IsU0FBUSw2QkFBa0I7WUFDaEQsZ0JBQWdCO2dCQUNyQixNQUFNLENBQUMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDNUIsQ0FBQztTQUNGO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDO1FBRTlDLG9CQUFvQixHQUFXLEVBQUUsU0FBaUI7WUFDaEQsTUFBTSxDQUFDO2dCQUNMLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHO2dCQUNqQixVQUFVLEVBQUUsR0FBRyxFQUFFO29CQUNmLE1BQU0sQ0FBQyxFQUFDLFNBQVMsRUFBQyxDQUFDO2dCQUNyQixDQUFDO2FBQ0YsQ0FBQztRQUNKLENBQUM7UUFFRCxFQUFFLENBQUMsd0RBQXdELEVBQUUsR0FBRyxFQUFFO1lBQ2hFLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlFLGFBQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1lBQ3RELE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyx5QkFBeUIsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25GLGFBQU0sQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsbURBQW1ELEVBQUUsR0FBRyxFQUFFO1lBQzNELE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQztZQUN6RixhQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pGLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHNFQUFzRSxFQUFFLEdBQUcsRUFBRTtZQUM5RSxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMseUJBQXlCLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7WUFDOUYsYUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXV0b0xhbmd1YWdlQ2xpZW50IGZyb20gJy4uL2xpYi9hdXRvLWxhbmd1YWdlY2xpZW50JztcclxuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XHJcblxyXG5kZXNjcmliZSgnQXV0b0xhbmd1YWdlQ2xpZW50JywgKCkgPT4ge1xyXG4gIGRlc2NyaWJlKCdzaG91bGRTeW5jRm9yRWRpdG9yJywgKCkgPT4ge1xyXG4gICAgY2xhc3MgQ3VzdG9tQXV0b0xhbmd1YWdlQ2xpZW50IGV4dGVuZHMgQXV0b0xhbmd1YWdlQ2xpZW50IHtcclxuICAgICAgcHVibGljIGdldEdyYW1tYXJTY29wZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFsnSmF2YScsICdQeXRob24nXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBDdXN0b21BdXRvTGFuZ3VhZ2VDbGllbnQoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBtb2NrRWRpdG9yKHVyaTogc3RyaW5nLCBzY29wZU5hbWU6IHN0cmluZyk6IGFueSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgZ2V0VVJJOiAoKSA9PiB1cmksXHJcbiAgICAgICAgZ2V0R3JhbW1hcjogKCkgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHtzY29wZU5hbWV9O1xyXG4gICAgICAgIH0sXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgaXQoJ3NlbGVjdHMgZG9jdW1lbnRzIGluIHByb2plY3QgYW5kIGluIHN1cHBvcnRlZCBsYW5ndWFnZScsICgpID0+IHtcclxuICAgICAgY29uc3QgZWRpdG9yID0gbW9ja0VkaXRvcignL3BhdGgvdG8vc29tZXdoZXJlJywgY2xpZW50LmdldEdyYW1tYXJTY29wZXMoKVswXSk7XHJcbiAgICAgIGV4cGVjdChjbGllbnQuc2hvdWxkU3luY0ZvckVkaXRvcihlZGl0b3IsICcvcGF0aC90by9zb21ld2hlcmUnKSkuZXF1YWxzKHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RvZXMgbm90IHNlbGVjdCBkb2N1bWVudHMgb3V0c2lkZSBvZiBwcm9qZWN0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBlZGl0b3IgPSBtb2NrRWRpdG9yKCcvcGF0aC90by9lbHNld2hlcmUvZmlsZScsIGNsaWVudC5nZXRHcmFtbWFyU2NvcGVzKClbMF0pO1xyXG4gICAgICBleHBlY3QoY2xpZW50LnNob3VsZFN5bmNGb3JFZGl0b3IoZWRpdG9yLCAnL3BhdGgvdG8vc29tZXdoZXJlJykpLmVxdWFscyhmYWxzZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnZG9lcyBub3Qgc2VsZWN0IGRvY3VtZW50cyBpbiB1bnN1cHBvcnRlZCBsYW5ndWFnZScsICgpID0+IHtcclxuICAgICAgY29uc3QgZWRpdG9yID0gbW9ja0VkaXRvcignL3BhdGgvdG8vc29tZXdoZXJlJywgY2xpZW50LmdldEdyYW1tYXJTY29wZXMoKVswXSArICctZHVtbXknKTtcclxuICAgICAgZXhwZWN0KGNsaWVudC5zaG91bGRTeW5jRm9yRWRpdG9yKGVkaXRvciwgJy9wYXRoL3RvL3NvbWV3aGVyZScpKS5lcXVhbHMoZmFsc2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ2RvZXMgbm90IHNlbGVjdCBkb2N1bWVudHMgaW4gdW5zdXBwb3J0ZWQgbGFuZ3VhZ2Ugb3V0c2lkZSBvZiBwcm9qZWN0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBlZGl0b3IgPSBtb2NrRWRpdG9yKCcvcGF0aC90by9lbHNld2hlcmUvZmlsZScsIGNsaWVudC5nZXRHcmFtbWFyU2NvcGVzKClbMF0gKyAnLWR1bW15Jyk7XHJcbiAgICAgIGV4cGVjdChjbGllbnQuc2hvdWxkU3luY0ZvckVkaXRvcihlZGl0b3IsICcvcGF0aC90by9zb21ld2hlcmUnKSkuZXF1YWxzKGZhbHNlKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19