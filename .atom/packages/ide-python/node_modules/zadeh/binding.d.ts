import type { Tree, TreeFilterIndicesResult } from "./index";
export declare class Zadeh {
    constructor();
    filter(query: string, maxResult: number, usePathScoring: boolean, useExtensionBonus: boolean): Array<string>;
    filterIndices(query: string, maxResult: number, usePathScoring: boolean, useExtensionBonus: boolean): Array<number>;
    setArrayFiltererCandidates(candidateStrings: Array<string>): boolean;
    filterTree(query: string, maxResult: number, usePathScoring: boolean, useExtensionBonus: boolean): Array<Tree>;
    filterIndicesTree(query: string, maxResult: number, usePathScoring: boolean, useExtensionBonus: boolean): Array<TreeFilterIndicesResult>;
    setTreeFiltererCandidates(candidateTrees: Array<Tree>, dataKey: string, childrenKey: string): boolean;
}
export declare function score(candidate: string, query: string, usePathScoring: boolean, useExtensionBonus: boolean): number;
export declare function match(str: string, query: string, pathSeparator: string): Array<number>;
export declare function wrap(str: string, query: string, pathSeparator: string): string;
export declare function validate_filter(...args: Parameters<Zadeh["filter"]>): void;
export declare function validate_setArrayFiltererCandidates(...args: Parameters<Zadeh["setArrayFiltererCandidates"]>): void;
export declare function validate_filterTree(...args: Parameters<Zadeh["filterIndicesTree"]>): void;
export declare function validate_setTreeFiltererCandidates(...args: Parameters<Zadeh["setTreeFiltererCandidates"]>): void;
export declare function validate_score(...args: Parameters<typeof score>): void;
export declare function validate_match(...args: Parameters<typeof match>): void;
export declare function validate_wrap(...args: Parameters<typeof wrap>): void;
