"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const convert_1 = require("../convert");
// Public: Adapts workspace/applyEdit commands to editors.
class ApplyEditAdapter {
    // Public: Attach to a {LanguageClientConnection} to receive edit events.
    static attach(connection) {
        connection.onApplyEdit((m) => ApplyEditAdapter.onApplyEdit(m));
    }
    static onApplyEdit(params) {
        return __awaiter(this, void 0, void 0, function* () {
            let changes = params.edit.changes || {};
            if (params.edit.documentChanges) {
                changes = {};
                params.edit.documentChanges.forEach((change) => {
                    if (change && change.textDocument) {
                        changes[change.textDocument.uri] = change.edits;
                    }
                });
            }
            const uris = Object.keys(changes);
            const paths = uris.map(convert_1.default.uriToPath);
            const editors = yield Promise.all(paths.map((path) => {
                return atom.workspace.open(path, {
                    searchAllPanes: true,
                    // Open new editors in the background.
                    activatePane: false,
                    activateItem: false,
                });
            }));
            const checkpoints = [];
            try {
                for (let i = 0; i < editors.length; i++) {
                    const editor = editors[i];
                    const uri = uris[i];
                    // Get an existing editor for the file, or open a new one if it doesn't exist.
                    const edits = convert_1.default.convertLsTextEdits(changes[uri]);
                    // Sort edits in reverse order to prevent edit conflicts.
                    edits.sort((edit1, edit2) => -edit1.oldRange.compare(edit2.oldRange));
                    const buffer = editor.getBuffer();
                    const checkpoint = buffer.createCheckpoint();
                    checkpoints.push({ buffer, checkpoint });
                    let prevEdit = null;
                    for (const edit of edits) {
                        ApplyEditAdapter.validateEdit(buffer, edit, prevEdit);
                        buffer.setTextInRange(edit.oldRange, edit.newText);
                        prevEdit = edit;
                    }
                    buffer.groupChangesSinceCheckpoint(checkpoint);
                }
                return { applied: true };
            }
            catch (e) {
                atom.notifications.addError('workspace/applyEdits failed', {
                    description: 'Failed to apply edits.',
                    detail: e.message,
                });
                checkpoints.forEach(({ buffer, checkpoint }) => {
                    buffer.revertToCheckpoint(checkpoint);
                });
                return { applied: false };
            }
        });
    }
    // Private: Do some basic sanity checking on the edit ranges.
    static validateEdit(buffer, edit, prevEdit) {
        const path = buffer.getPath() || '';
        if (prevEdit && edit.oldRange.end.compare(prevEdit.oldRange.start) > 0) {
            throw Error(`Found overlapping edit ranges in ${path}`);
        }
        const startRow = edit.oldRange.start.row;
        const startCol = edit.oldRange.start.column;
        const lineLength = buffer.lineLengthForRow(startRow);
        if (lineLength == null || startCol > lineLength) {
            throw Error(`Out of range edit on ${path}:${startRow + 1}:${startCol + 1}`);
        }
    }
}
exports.default = ApplyEditAdapter;
//# sourceMappingURL=data:application/json;base64,