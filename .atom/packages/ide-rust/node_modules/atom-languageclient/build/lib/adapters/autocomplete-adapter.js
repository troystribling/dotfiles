Object.defineProperty(exports, "__esModule", {
  value: true
});

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Public: Adapts the language server protocol "textDocument/completion" to the Atom
// AutoComplete+ package.
class AutocompleteAdapter {
  constructor() {
    this._lastSuggestions = new Map();
  }

  static canAdapt(serverCapabilities) {
    return serverCapabilities.completionProvider != null;
  }

  // Public: Obtain suggestion list for AutoComplete+ by querying the language server using
  // the `textDocument/completion` request.
  //
  // * `connection` A {LanguageClientConnection} to the language server to query.
  // * `request` An {Object} with the AutoComplete+ request to satisfy.
  //
  // Returns a {Promise} of an {Array} of {atom$AutocompleteSuggestion}s containing the
  // AutoComplete+ suggestions to display.
  async getSuggestions(connection, request) {
    const items = await connection.completion(AutocompleteAdapter.requestToTextDocumentPositionParams(request));
    return this.completionItemsToSuggestions(items, request);
  }

  // Public: Obtain a complete version of a suggestion with additional information
  // the language server can provide by way of the `completionItem/resolve` request.
  //
  // * `connection` A {LanguageClientConnection} to the language server to query.
  // * `request` An {Object} with the AutoComplete+ request to satisfy.
  //
  // Returns a {Promise} of an {atom$AutocompleteSuggestion} with the resolved AutoComplete+
  // suggestion.
  async completeSuggestion(connection, suggestion, request) {
    const originalCompletionItem = this._lastSuggestions.get(suggestion);
    if (originalCompletionItem != null && originalCompletionItem[1] === false) {
      const resolveCompletionItem = await connection.completionItemResolve(originalCompletionItem[0]);
      if (resolveCompletionItem != null) {
        const resolvedSuggestion = AutocompleteAdapter.completionItemToSuggestion(resolveCompletionItem, request);
        this._lastSuggestions.delete(suggestion);
        this._lastSuggestions.set(resolvedSuggestion, [resolveCompletionItem, true]);
        return resolvedSuggestion;
      }
    }

    return suggestion;
  }

  // Public: Create TextDocumentPositionParams to be sent to the language server
  // based on the editor and position from the AutoCompleteRequest.
  //
  // * `request` An {Object} with the AutoComplete+ request to use.
  //
  // Returns an {Object} containing the TextDocumentPositionParams object with the keys:
  //  * `textDocument` the language server protocol textDocument identification.
  //  * `position` the position within the text document to display completion request for.
  static requestToTextDocumentPositionParams(request) {
    return {
      textDocument: _convert2.default.editorToTextDocumentIdentifier(request.editor),
      position: _convert2.default.pointToPosition(request.bufferPosition)
    };
  }

  // Public: Convert a language server protocol CompletionItem array or CompletionList to
  // an array of ordered AutoComplete+ suggestions.
  //
  // * `completionItems` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
  //           items to be converted.
  // * `request` An {Object} with the AutoComplete+ request to use.
  //
  // Returns an {Array} of AutoComplete+ suggestions ordered by the CompletionItems sortText.
  completionItemsToSuggestions(completionItems, request) {
    this._lastSuggestions = new Map((Array.isArray(completionItems) ? completionItems : completionItems.items || []).sort((a, b) => (a.sortText || a.label).localeCompare(b.sortText || b.label)).map(s => [AutocompleteAdapter.completionItemToSuggestion(s, request), [s, false]]));
    return Array.from(this._lastSuggestions.keys());
  }

  // Public: Convert a language server protocol CompletionItem to an AutoComplete+ suggestion.
  //
  // * `item` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
  //             items to be converted.
  // * `request` An {Object} with the AutoComplete+ request to use.
  //
  // Returns an AutoComplete+ suggestion.
  static completionItemToSuggestion(item, request) {
    const suggestion = AutocompleteAdapter.basicCompletionItemToSuggestion(item);
    AutocompleteAdapter.applyTextEditToSuggestion(item.textEdit, request.editor, suggestion);
    return suggestion;
  }

  // Public: Convert the primary parts of a language server protocol CompletionItem to an AutoComplete+ suggestion.
  //
  // * `item` An {Array} of {CompletionItem} objects or a {CompletionList} containing completion
  //             items to be converted.
  //
  // Returns an AutoComplete+ suggestion.
  static basicCompletionItemToSuggestion(item) {
    return {
      text: item.insertText || item.label,
      displayText: item.label,
      filterText: item.filterText || item.label,
      snippet: item.insertTextFormat === 2 ? item.insertText : undefined,
      type: AutocompleteAdapter.completionKindToSuggestionType(item.kind),
      rightLabel: item.detail,
      description: item.documentation,
      descriptionMarkdown: item.documentation
    };
  }

  // Public: Applies the textEdit part of a language server protocol CompletionItem to an
  // AutoComplete+ Suggestion via the replacementPrefix and text properties.
  //
  // * `textEdit` A {TextEdit} from a CompletionItem to apply.
  // * `editor` An Atom {TextEditor} used to obtain the necessary text replacement.
  // * `suggestion` An AutoComplete+ suggestion to set the replacementPrefix and text properties of.
  static applyTextEditToSuggestion(textEdit, editor, suggestion) {
    if (textEdit != null) {
      suggestion.replacementPrefix = editor.getTextInBufferRange(_convert2.default.lsRangeToAtomRange(textEdit.range));
      suggestion.text = textEdit.newText;
    }
  }

  // Public: Obtain the textual suggestion type required by AutoComplete+ that
  // most closely maps to the numeric completion kind supplies by the language server.
  //
  // * `kind` A {Number} that represents the suggestion kind to be converted.
  //
  // Returns a {String} containing the AutoComplete+ suggestion type equivalent
  // to the given completion kind.
  static completionKindToSuggestionType(kind) {
    switch (kind) {
      case _languageclient.CompletionItemKind.Method:
        return 'method';
      case _languageclient.CompletionItemKind.Function:
      case _languageclient.CompletionItemKind.Constructor:
        return 'function';
      case _languageclient.CompletionItemKind.Field:
      case _languageclient.CompletionItemKind.Property:
        return 'property';
      case _languageclient.CompletionItemKind.Variable:
        return 'variable';
      case _languageclient.CompletionItemKind.Class:
        return 'class';
      case _languageclient.CompletionItemKind.Interface:
        return 'interface';
      case _languageclient.CompletionItemKind.Module:
        return 'module';
      case _languageclient.CompletionItemKind.Unit:
        return 'builtin';
      case _languageclient.CompletionItemKind.Enum:
        return 'enum';
      case _languageclient.CompletionItemKind.Keyword:
        return 'keyword';
      case _languageclient.CompletionItemKind.Snippet:
        return 'snippet';
      case _languageclient.CompletionItemKind.File:
        return 'import';
      case _languageclient.CompletionItemKind.Reference:
        return 'require';
      default:
        return 'value';
    }
  }
}
exports.default = AutocompleteAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9hdXRvY29tcGxldGUtYWRhcHRlci5qcyJdLCJuYW1lcyI6WyJBdXRvY29tcGxldGVBZGFwdGVyIiwiX2xhc3RTdWdnZXN0aW9ucyIsIk1hcCIsImNhbkFkYXB0Iiwic2VydmVyQ2FwYWJpbGl0aWVzIiwiY29tcGxldGlvblByb3ZpZGVyIiwiZ2V0U3VnZ2VzdGlvbnMiLCJjb25uZWN0aW9uIiwicmVxdWVzdCIsIml0ZW1zIiwiY29tcGxldGlvbiIsInJlcXVlc3RUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zIiwiY29tcGxldGlvbkl0ZW1zVG9TdWdnZXN0aW9ucyIsImNvbXBsZXRlU3VnZ2VzdGlvbiIsInN1Z2dlc3Rpb24iLCJvcmlnaW5hbENvbXBsZXRpb25JdGVtIiwiZ2V0IiwicmVzb2x2ZUNvbXBsZXRpb25JdGVtIiwiY29tcGxldGlvbkl0ZW1SZXNvbHZlIiwicmVzb2x2ZWRTdWdnZXN0aW9uIiwiY29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24iLCJkZWxldGUiLCJzZXQiLCJ0ZXh0RG9jdW1lbnQiLCJlZGl0b3JUb1RleHREb2N1bWVudElkZW50aWZpZXIiLCJlZGl0b3IiLCJwb3NpdGlvbiIsInBvaW50VG9Qb3NpdGlvbiIsImJ1ZmZlclBvc2l0aW9uIiwiY29tcGxldGlvbkl0ZW1zIiwiQXJyYXkiLCJpc0FycmF5Iiwic29ydCIsImEiLCJiIiwic29ydFRleHQiLCJsYWJlbCIsImxvY2FsZUNvbXBhcmUiLCJtYXAiLCJzIiwiZnJvbSIsImtleXMiLCJpdGVtIiwiYmFzaWNDb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbiIsImFwcGx5VGV4dEVkaXRUb1N1Z2dlc3Rpb24iLCJ0ZXh0RWRpdCIsInRleHQiLCJpbnNlcnRUZXh0IiwiZGlzcGxheVRleHQiLCJmaWx0ZXJUZXh0Iiwic25pcHBldCIsImluc2VydFRleHRGb3JtYXQiLCJ1bmRlZmluZWQiLCJ0eXBlIiwiY29tcGxldGlvbktpbmRUb1N1Z2dlc3Rpb25UeXBlIiwia2luZCIsInJpZ2h0TGFiZWwiLCJkZXRhaWwiLCJkZXNjcmlwdGlvbiIsImRvY3VtZW50YXRpb24iLCJkZXNjcmlwdGlvbk1hcmtkb3duIiwicmVwbGFjZW1lbnRQcmVmaXgiLCJnZXRUZXh0SW5CdWZmZXJSYW5nZSIsImxzUmFuZ2VUb0F0b21SYW5nZSIsInJhbmdlIiwibmV3VGV4dCIsIk1ldGhvZCIsIkZ1bmN0aW9uIiwiQ29uc3RydWN0b3IiLCJGaWVsZCIsIlByb3BlcnR5IiwiVmFyaWFibGUiLCJDbGFzcyIsIkludGVyZmFjZSIsIk1vZHVsZSIsIlVuaXQiLCJFbnVtIiwiS2V5d29yZCIsIlNuaXBwZXQiLCJGaWxlIiwiUmVmZXJlbmNlIl0sIm1hcHBpbmdzIjoiOzs7O0FBRUE7O0FBU0E7Ozs7OztBQUVBO0FBQ0E7QUFDZSxNQUFNQSxtQkFBTixDQUEwQjtBQUFBO0FBQUEsU0FLdkNDLGdCQUx1QyxHQUt5QyxJQUFJQyxHQUFKLEVBTHpDO0FBQUE7O0FBQ3ZDLFNBQU9DLFFBQVAsQ0FBZ0JDLGtCQUFoQixFQUFpRTtBQUMvRCxXQUFPQSxtQkFBbUJDLGtCQUFuQixJQUF5QyxJQUFoRDtBQUNEOztBQUlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFNQyxjQUFOLENBQ0VDLFVBREYsRUFFRUMsT0FGRixFQUcrQztBQUM3QyxVQUFNQyxRQUFRLE1BQU1GLFdBQVdHLFVBQVgsQ0FBc0JWLG9CQUFvQlcsbUNBQXBCLENBQXdESCxPQUF4RCxDQUF0QixDQUFwQjtBQUNBLFdBQU8sS0FBS0ksNEJBQUwsQ0FBa0NILEtBQWxDLEVBQXlDRCxPQUF6QyxDQUFQO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQU1LLGtCQUFOLENBQ0VOLFVBREYsRUFFRU8sVUFGRixFQUdFTixPQUhGLEVBSXdDO0FBQ3RDLFVBQU1PLHlCQUF5QixLQUFLZCxnQkFBTCxDQUFzQmUsR0FBdEIsQ0FBMEJGLFVBQTFCLENB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SjtBQWdDRDtBQS9Lc0M7a0JBQXBCaEYsbUIiLCJmaWxlIjoiYXV0b2NvbXBsZXRlLWFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IHtcclxuICBDb21wbGV0aW9uSXRlbUtpbmQsXHJcbiAgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxyXG4gIHR5cGUgQ29tcGxldGlvbkl0ZW0sXHJcbiAgdHlwZSBDb21wbGV0aW9uTGlzdCxcclxuICB0eXBlIFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zLFxyXG4gIHR5cGUgVGV4dEVkaXQsXHJcbiAgdHlwZSBTZXJ2ZXJDYXBhYmlsaXRpZXMsXHJcbn0gZnJvbSAnLi4vbGFuZ3VhZ2VjbGllbnQnO1xyXG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi9jb252ZXJ0JztcclxuXHJcbi8vIFB1YmxpYzogQWRhcHRzIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgcHJvdG9jb2wgXCJ0ZXh0RG9jdW1lbnQvY29tcGxldGlvblwiIHRvIHRoZSBBdG9tXHJcbi8vIEF1dG9Db21wbGV0ZSsgcGFja2FnZS5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXV0b2NvbXBsZXRlQWRhcHRlciB7XHJcbiAgc3RhdGljIGNhbkFkYXB0KHNlcnZlckNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gc2VydmVyQ2FwYWJpbGl0aWVzLmNvbXBsZXRpb25Qcm92aWRlciAhPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgX2xhc3RTdWdnZXN0aW9uczogTWFwPGF0b20kQXV0b2NvbXBsZXRlU3VnZ2VzdGlvbiwgW0NvbXBsZXRpb25JdGVtLCBib29sZWFuXT4gPSBuZXcgTWFwKCk7XHJcblxyXG4gIC8vIFB1YmxpYzogT2J0YWluIHN1Z2dlc3Rpb24gbGlzdCBmb3IgQXV0b0NvbXBsZXRlKyBieSBxdWVyeWluZyB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHVzaW5nXHJcbiAgLy8gdGhlIGB0ZXh0RG9jdW1lbnQvY29tcGxldGlvbmAgcmVxdWVzdC5cclxuICAvL1xyXG4gIC8vICogYGNvbm5lY3Rpb25gIEEge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbn0gdG8gdGhlIGxhbmd1YWdlIHNlcnZlciB0byBxdWVyeS5cclxuICAvLyAqIGByZXF1ZXN0YCBBbiB7T2JqZWN0fSB3aXRoIHRoZSBBdXRvQ29tcGxldGUrIHJlcXVlc3QgdG8gc2F0aXNmeS5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gb2YgYW4ge0FycmF5fSBvZiB7YXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9ufXMgY29udGFpbmluZyB0aGVcclxuICAvLyBBdXRvQ29tcGxldGUrIHN1Z2dlc3Rpb25zIHRvIGRpc3BsYXkuXHJcbiAgYXN5bmMgZ2V0U3VnZ2VzdGlvbnMoXHJcbiAgICBjb25uZWN0aW9uOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXHJcbiAgICByZXF1ZXN0OiBhdG9tJEF1dG9jb21wbGV0ZVJlcXVlc3QsXHJcbiAgKTogUHJvbWlzZTxBcnJheTxhdG9tJEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb24+PiB7XHJcbiAgICBjb25zdCBpdGVtcyA9IGF3YWl0IGNvbm5lY3Rpb24uY29tcGxldGlvbihBdXRvY29tcGxldGVBZGFwdGVyLnJlcXVlc3RUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKHJlcXVlc3QpKTtcclxuICAgIHJldHVybiB0aGlzLmNvbXBsZXRpb25JdGVtc1RvU3VnZ2VzdGlvbnMoaXRlbXMsIHJlcXVlc3QpO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBPYnRhaW4gYSBjb21wbGV0ZSB2ZXJzaW9uIG9mIGEgc3VnZ2VzdGlvbiB3aXRoIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cclxuICAvLyB0aGUgbGFuZ3VhZ2Ugc2VydmVyIGNhbiBwcm92aWRlIGJ5IHdheSBvZiB0aGUgYGNvbXBsZXRpb25JdGVtL3Jlc29sdmVgIHJlcXVlc3QuXHJcbiAgLy9cclxuICAvLyAqIGBjb25uZWN0aW9uYCBBIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdG8gcXVlcnkuXHJcbiAgLy8gKiBgcmVxdWVzdGAgQW4ge09iamVjdH0gd2l0aCB0aGUgQXV0b0NvbXBsZXRlKyByZXF1ZXN0IHRvIHNhdGlzZnkuXHJcbiAgLy9cclxuICAvLyBSZXR1cm5zIGEge1Byb21pc2V9IG9mIGFuIHthdG9tJEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb259IHdpdGggdGhlIHJlc29sdmVkIEF1dG9Db21wbGV0ZStcclxuICAvLyBzdWdnZXN0aW9uLlxyXG4gIGFzeW5jIGNvbXBsZXRlU3VnZ2VzdGlvbihcclxuICAgIGNvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcclxuICAgIHN1Z2dlc3Rpb246IGF0b20kQXV0b2NvbXBsZXRlU3VnZ2VzdGlvbixcclxuICAgIHJlcXVlc3Q6IGF0b20kQXV0b2NvbXBsZXRlUmVxdWVzdCxcclxuICApOiBQcm9taXNlPGF0b20kQXV0b2NvbXBsZXRlU3VnZ2VzdGlvbj4ge1xyXG4gICAgY29uc3Qgb3JpZ2luYWxDb21wbGV0aW9uSXRlbSA9IHRoaXMuX2xhc3RTdWdnZXN0aW9ucy5nZXQoc3VnZ2VzdGlvbik7XHJcbiAgICBpZiAob3JpZ2luYWxDb21wbGV0aW9uSXRlbSAhPSBudWxsICYmIG9yaWdpbmFsQ29tcGxldGlvbkl0ZW1bMV0gPT09IGZhbHNlKSB7XHJcbiAgICAgIGNvbnN0IHJlc29sdmVDb21wbGV0aW9uSXRlbSA9IGF3YWl0IGNvbm5lY3Rpb24uY29tcGxldGlvbkl0ZW1SZXNvbHZlKG9yaWdpbmFsQ29tcGxldGlvbkl0ZW1bMF0pO1xyXG4gICAgICBpZiAocmVzb2x2ZUNvbXBsZXRpb25JdGVtICE9IG51bGwpIHtcclxuICAgICAgICBjb25zdCByZXNvbHZlZFN1Z2dlc3Rpb24gPSBBdXRvY29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKHJlc29sdmVDb21wbGV0aW9uSXRlbSwgcmVxdWVzdCk7XHJcbiAgICAgICAgdGhpcy5fbGFzdFN1Z2dlc3Rpb25zLmRlbGV0ZShzdWdnZXN0aW9uKTtcclxuICAgICAgICB0aGlzLl9sYXN0U3VnZ2VzdGlvbnMuc2V0KHJlc29sdmVkU3VnZ2VzdGlvbiwgW3Jlc29sdmVDb21wbGV0aW9uSXRlbSwgdHJ1ZV0pO1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlZFN1Z2dlc3Rpb247XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3VnZ2VzdGlvbjtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogQ3JlYXRlIFRleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zIHRvIGJlIHNlbnQgdG8gdGhlIGxhbmd1YWdlIHNlcnZlclxyXG4gIC8vIGJhc2VkIG9uIHRoZSBlZGl0b3IgYW5kIHBvc2l0aW9uIGZyb20gdGhlIEF1dG9Db21wbGV0ZVJlcXVlc3QuXHJcbiAgLy9cclxuICAvLyAqIGByZXF1ZXN0YCBBbiB7T2JqZWN0fSB3aXRoIHRoZSBBdXRvQ29tcGxldGUrIHJlcXVlc3QgdG8gdXNlLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhbiB7T2JqZWN0fSBjb250YWluaW5nIHRoZSBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyBvYmplY3Qgd2l0aCB0aGUga2V5czpcclxuICAvLyAgKiBgdGV4dERvY3VtZW50YCB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHByb3RvY29sIHRleHREb2N1bWVudCBpZGVudGlmaWNhdGlvbi5cclxuICAvLyAgKiBgcG9zaXRpb25gIHRoZSBwb3NpdGlvbiB3aXRoaW4gdGhlIHRleHQgZG9jdW1lbnQgdG8gZGlzcGxheSBjb21wbGV0aW9uIHJlcXVlc3QgZm9yLlxyXG4gIHN0YXRpYyByZXF1ZXN0VG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyhyZXF1ZXN0OiBhdG9tJEF1dG9jb21wbGV0ZVJlcXVlc3QpOiBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0ZXh0RG9jdW1lbnQ6IENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRJZGVudGlmaWVyKHJlcXVlc3QuZWRpdG9yKSxcclxuICAgICAgcG9zaXRpb246IENvbnZlcnQucG9pbnRUb1Bvc2l0aW9uKHJlcXVlc3QuYnVmZmVyUG9zaXRpb24pLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogQ29udmVydCBhIGxhbmd1YWdlIHNlcnZlciBwcm90b2NvbCBDb21wbGV0aW9uSXRlbSBhcnJheSBvciBDb21wbGV0aW9uTGlzdCB0b1xyXG4gIC8vIGFuIGFycmF5IG9mIG9yZGVyZWQgQXV0b0NvbXBsZXRlKyBzdWdnZXN0aW9ucy5cclxuICAvL1xyXG4gIC8vICogYGNvbXBsZXRpb25JdGVtc2AgQW4ge0FycmF5fSBvZiB7Q29tcGxldGlvbkl0ZW19IG9iamVjdHMgb3IgYSB7Q29tcGxldGlvbkxpc3R9IGNvbnRhaW5pbmcgY29tcGxldGlvblxyXG4gIC8vICAgICAgICAgICBpdGVtcyB0byBiZSBjb252ZXJ0ZWQuXHJcbiAgLy8gKiBgcmVxdWVzdGAgQW4ge09iamVjdH0gd2l0aCB0aGUgQXV0b0NvbXBsZXRlKyByZXF1ZXN0IHRvIHVzZS5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYW4ge0FycmF5fSBvZiBBdXRvQ29tcGxldGUrIHN1Z2dlc3Rpb25zIG9yZGVyZWQgYnkgdGhlIENvbXBsZXRpb25JdGVtcyBzb3J0VGV4dC5cclxuICBjb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zKFxyXG4gICAgY29tcGxldGlvbkl0ZW1zOiBBcnJheTxDb21wbGV0aW9uSXRlbT4gfCBDb21wbGV0aW9uTGlzdCxcclxuICAgIHJlcXVlc3Q6IGF0b20kQXV0b2NvbXBsZXRlUmVxdWVzdCxcclxuICApOiBBcnJheTxhdG9tJEF1dG9jb21wbGV0ZVN1Z2dlc3Rpb24+IHtcclxuICAgIHRoaXMuX2xhc3RTdWdnZXN0aW9ucyA9IG5ldyBNYXAoKEFycmF5LmlzQXJyYXkoY29tcGxldGlvbkl0ZW1zKSA/IGNvbXBsZXRpb25JdGVtcyA6IGNvbXBsZXRpb25JdGVtcy5pdGVtcyB8fCBbXSlcclxuICAgICAgLnNvcnQoKGEsIGIpID0+IChhLnNvcnRUZXh0IHx8IGEubGFiZWwpLmxvY2FsZUNvbXBhcmUoYi5zb3J0VGV4dCB8fCBiLmxhYmVsKSlcclxuICAgICAgLm1hcChzID0+IFtBdXRvY29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKHMsIHJlcXVlc3QpLCBbcywgZmFsc2VdXSkpO1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5fbGFzdFN1Z2dlc3Rpb25zLmtleXMoKSk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IENvbnZlcnQgYSBsYW5ndWFnZSBzZXJ2ZXIgcHJvdG9jb2wgQ29tcGxldGlvbkl0ZW0gdG8gYW4gQXV0b0NvbXBsZXRlKyBzdWdnZXN0aW9uLlxyXG4gIC8vXHJcbiAgLy8gKiBgaXRlbWAgQW4ge0FycmF5fSBvZiB7Q29tcGxldGlvbkl0ZW19IG9iamVjdHMgb3IgYSB7Q29tcGxldGlvbkxpc3R9IGNvbnRhaW5pbmcgY29tcGxldGlvblxyXG4gIC8vICAgICAgICAgICAgIGl0ZW1zIHRvIGJlIGNvbnZlcnRlZC5cclxuICAvLyAqIGByZXF1ZXN0YCBBbiB7T2JqZWN0fSB3aXRoIHRoZSBBdXRvQ29tcGxldGUrIHJlcXVlc3QgdG8gdXNlLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhbiBBdXRvQ29tcGxldGUrIHN1Z2dlc3Rpb24uXHJcbiAgc3RhdGljIGNvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKFxyXG4gICAgaXRlbTogQ29tcGxldGlvbkl0ZW0sXHJcbiAgICByZXF1ZXN0OiBhdG9tJEF1dG9jb21wbGV0ZVJlcXVlc3QsXHJcbiAgKTogYXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9uIHtcclxuICAgIGNvbnN0IHN1Z2dlc3Rpb24gPSBBdXRvY29tcGxldGVBZGFwdGVyLmJhc2ljQ29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24oaXRlbSk7XHJcbiAgICBBdXRvY29tcGxldGVBZGFwdGVyLmFwcGx5VGV4dEVkaXRUb1N1Z2dlc3Rpb24oaXRlbS50ZXh0RWRpdCwgcmVxdWVzdC5lZGl0b3IsIHN1Z2dlc3Rpb24pO1xyXG4gICAgcmV0dXJuIHN1Z2dlc3Rpb247XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IENvbnZlcnQgdGhlIHByaW1hcnkgcGFydHMgb2YgYSBsYW5ndWFnZSBzZXJ2ZXIgcHJvdG9jb2wgQ29tcGxldGlvbkl0ZW0gdG8gYW4gQXV0b0NvbXBsZXRlKyBzdWdnZXN0aW9uLlxyXG4gIC8vXHJcbiAgLy8gKiBgaXRlbWAgQW4ge0FycmF5fSBvZiB7Q29tcGxldGlvbkl0ZW19IG9iamVjdHMgb3IgYSB7Q29tcGxldGlvbkxpc3R9IGNvbnRhaW5pbmcgY29tcGxldGlvblxyXG4gIC8vICAgICAgICAgICAgIGl0ZW1zIHRvIGJlIGNvbnZlcnRlZC5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYW4gQXV0b0NvbXBsZXRlKyBzdWdnZXN0aW9uLlxyXG4gIHN0YXRpYyBiYXNpY0NvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKGl0ZW06IENvbXBsZXRpb25JdGVtKTogYXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9uIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRleHQ6IGl0ZW0uaW5zZXJ0VGV4dCB8fCBpdGVtLmxhYmVsLFxyXG4gICAgICBkaXNwbGF5VGV4dDogaXRlbS5sYWJlbCxcclxuICAgICAgZmlsdGVyVGV4dDogaXRlbS5maWx0ZXJUZXh0IHx8IGl0ZW0ubGFiZWwsXHJcbiAgICAgIHNuaXBwZXQ6IGl0ZW0uaW5zZXJ0VGV4dEZvcm1hdCA9PT0gMiA/IGl0ZW0uaW5zZXJ0VGV4dCA6IHVuZGVmaW5lZCxcclxuICAgICAgdHlwZTogQXV0b2NvbXBsZXRlQWRhcHRlci5jb21wbGV0aW9uS2luZFRvU3VnZ2VzdGlvblR5cGUoaXRlbS5raW5kKSxcclxuICAgICAgcmlnaHRMYWJlbDogaXRlbS5kZXRhaWwsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBpdGVtLmRvY3VtZW50YXRpb24sXHJcbiAgICAgIGRlc2NyaXB0aW9uTWFya2Rvd246IGl0ZW0uZG9jdW1lbnRhdGlvbixcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IEFwcGxpZXMgdGhlIHRleHRFZGl0IHBhcnQgb2YgYSBsYW5ndWFnZSBzZXJ2ZXIgcHJvdG9jb2wgQ29tcGxldGlvbkl0ZW0gdG8gYW5cclxuICAvLyBBdXRvQ29tcGxldGUrIFN1Z2dlc3Rpb24gdmlhIHRoZSByZXBsYWNlbWVudFByZWZpeCBhbmQgdGV4dCBwcm9wZXJ0aWVzLlxyXG4gIC8vXHJcbiAgLy8gKiBgdGV4dEVkaXRgIEEge1RleHRFZGl0fSBmcm9tIGEgQ29tcGxldGlvbkl0ZW0gdG8gYXBwbHkuXHJcbiAgLy8gKiBgZWRpdG9yYCBBbiBBdG9tIHtUZXh0RWRpdG9yfSB1c2VkIHRvIG9idGFpbiB0aGUgbmVjZXNzYXJ5IHRleHQgcmVwbGFjZW1lbnQuXHJcbiAgLy8gKiBgc3VnZ2VzdGlvbmAgQW4gQXV0b0NvbXBsZXRlKyBzdWdnZXN0aW9uIHRvIHNldCB0aGUgcmVwbGFjZW1lbnRQcmVmaXggYW5kIHRleHQgcHJvcGVydGllcyBvZi5cclxuICBzdGF0aWMgYXBwbHlUZXh0RWRpdFRvU3VnZ2VzdGlvbihcclxuICAgIHRleHRFZGl0OiA/VGV4dEVkaXQsXHJcbiAgICBlZGl0b3I6IGF0b20kVGV4dEVkaXRvcixcclxuICAgIHN1Z2dlc3Rpb246IGF0b20kQXV0b2NvbXBsZXRlU3VnZ2VzdGlvbixcclxuICApOiB2b2lkIHtcclxuICAgIGlmICh0ZXh0RWRpdCAhPSBudWxsKSB7XHJcbiAgICAgIHN1Z2dlc3Rpb24ucmVwbGFjZW1lbnRQcmVmaXggPSBlZGl0b3IuZ2V0VGV4dEluQnVmZmVyUmFuZ2UoQ29udmVydC5sc1JhbmdlVG9BdG9tUmFuZ2UodGV4dEVkaXQucmFuZ2UpKTtcclxuICAgICAgc3VnZ2VzdGlvbi50ZXh0ID0gdGV4dEVkaXQubmV3VGV4dDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFB1YmxpYzogT2J0YWluIHRoZSB0ZXh0dWFsIHN1Z2dlc3Rpb24gdHlwZSByZXF1aXJlZCBieSBBdXRvQ29tcGxldGUrIHRoYXRcclxuICAvLyBtb3N0IGNsb3NlbHkgbWFwcyB0byB0aGUgbnVtZXJpYyBjb21wbGV0aW9uIGtpbmQgc3VwcGxpZXMgYnkgdGhlIGxhbmd1YWdlIHNlcnZlci5cclxuICAvL1xyXG4gIC8vICogYGtpbmRgIEEge051bWJlcn0gdGhhdCByZXByZXNlbnRzIHRoZSBzdWdnZXN0aW9uIGtpbmQgdG8gYmUgY29udmVydGVkLlxyXG4gIC8vXHJcbiAgLy8gUmV0dXJucyBhIHtTdHJpbmd9IGNvbnRhaW5pbmcgdGhlIEF1dG9Db21wbGV0ZSsgc3VnZ2VzdGlvbiB0eXBlIGVxdWl2YWxlbnRcclxuICAvLyB0byB0aGUgZ2l2ZW4gY29tcGxldGlvbiBraW5kLlxyXG4gIHN0YXRpYyBjb21wbGV0aW9uS2luZFRvU3VnZ2VzdGlvblR5cGUoa2luZDogP251bWJlcik6IHN0cmluZyB7XHJcbiAgICBzd2l0Y2ggKGtpbmQpIHtcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuTWV0aG9kOlxyXG4gICAgICAgIHJldHVybiAnbWV0aG9kJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb246XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yOlxyXG4gICAgICAgIHJldHVybiAnZnVuY3Rpb24nO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5GaWVsZDpcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHk6XHJcbiAgICAgICAgcmV0dXJuICdwcm9wZXJ0eSc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLlZhcmlhYmxlOlxyXG4gICAgICAgIHJldHVybiAndmFyaWFibGUnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5DbGFzczpcclxuICAgICAgICByZXR1cm4gJ2NsYXNzJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlOlxyXG4gICAgICAgIHJldHVybiAnaW50ZXJmYWNlJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlOlxyXG4gICAgICAgIHJldHVybiAnbW9kdWxlJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdDpcclxuICAgICAgICByZXR1cm4gJ2J1aWx0aW4nO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5FbnVtOlxyXG4gICAgICAgIHJldHVybiAnZW51bSc7XHJcbiAgICAgIGNhc2UgQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQ6XHJcbiAgICAgICAgcmV0dXJuICdrZXl3b3JkJztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuU25pcHBldDpcclxuICAgICAgICByZXR1cm4gJ3NuaXBwZXQnO1xyXG4gICAgICBjYXNlIENvbXBsZXRpb25JdGVtS2luZC5GaWxlOlxyXG4gICAgICAgIHJldHVybiAnaW1wb3J0JztcclxuICAgICAgY2FzZSBDb21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlOlxyXG4gICAgICAgIHJldHVybiAncmVxdWlyZSc7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgcmV0dXJuICd2YWx1ZSc7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==