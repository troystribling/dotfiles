Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class CodeHighlightAdapter {
  // Returns a {Boolean} indicating this adapter can adapt the server based on the
  // given serverCapabilities.
  static canAdapt(serverCapabilities) {
    return serverCapabilities.documentHighlightProvider === true;
  }

  // Public: Creates highlight markers for a given editor position.
  // Throws an error if documentHighlightProvider is not a registered capability.
  //
  // * `connection` A {LanguageClientConnection} to the language server that provides highlights.
  // * `serverCapabilities` The {ServerCapabilities} of the language server that will be used.
  // * `editor` The Atom {TextEditor} containing the text to be highlighted.
  // * `position` The Atom {Point} to fetch highlights for.
  //
  // Returns a {Promise} of an {Array} of {Range}s to be turned into highlights.
  static async highlight(connection, serverCapabilities, editor, position) {
    (0, _assert2.default)(serverCapabilities.documentHighlightProvider, 'Must have the documentHighlight capability');
    const highlights = await connection.documentHighlight(_convert2.default.editorToTextDocumentPositionParams(editor, position));
    return highlights.map(highlight => {
      return _convert2.default.lsRangeToAtomRange(highlight.range);
    });
  }
}
exports.default = CodeHighlightAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9jb2RlLWhpZ2hsaWdodC1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIkNvZGVIaWdobGlnaHRBZGFwdGVyIiwiY2FuQWRhcHQiLCJzZXJ2ZXJDYXBhYmlsaXRpZXMiLCJkb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyIiwiaGlnaGxpZ2h0IiwiY29ubmVjdGlvbiIsImVkaXRvciIsInBvc2l0aW9uIiwiaGlnaGxpZ2h0cyIsImRvY3VtZW50SGlnaGxpZ2h0IiwiZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyIsIm1hcCIsImxzUmFuZ2VUb0F0b21SYW5nZSIsInJhbmdlIl0sIm1hcHBpbmdzIjoiOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRWUsTUFBTUEsb0JBQU4sQ0FBMkI7QUFDeEM7QUFDQTtBQUNBLFNBQU9DLFFBQVAsQ0FBZ0JDLGtCQUFoQixFQUFpRTtBQUMvRCxXQUFPQSxtQkFBbUJDLHlCQUFuQixLQUFpRCxJQUF4RDtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWFDLFNBQWIsQ0FDRUMsVUFERixFQUVFSCxrQkFGRixFQUdFSSxNQUhGLEVBSUVDLFFBSkYsRUFLK0I7QUFDN0IsMEJBQVVMLG1CQUFtQkMseUJBQTdCLEVBQXdELDRDQUF4RDtBQUNBLFVBQU1LLGFBQWEsTUFBTUgsV0FBV0ksaUJBQVgsQ0FBNkIsa0JBQVFDLGtDQUFSLENBQTJDSixNQUEzQyxFQUFtREMsUUFBbkQsQ0FBN0IsQ0FBekI7QUFDQSxXQUFPQyxXQUFXRyxHQUFYLENBQWVQLGFBQWE7QUFDakMsYUFBTyxrQkFBUVEsa0JBQVIsQ0FBMkJSLFVBQVVTLEtBQXJDLENBQVA7QUFDRCxLQUZNLENBQVA7QUFHRDtBQTNCdUM7a0JBQXJCYixvQiIsImZpbGUiOiJjb2RlLWhpZ2hsaWdodC1hZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcclxuXHJcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnYXNzZXJ0JztcclxuaW1wb3J0IHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIHR5cGUgU2VydmVyQ2FwYWJpbGl0aWVzfSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XHJcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29kZUhpZ2hsaWdodEFkYXB0ZXIge1xyXG4gIC8vIFJldHVybnMgYSB7Qm9vbGVhbn0gaW5kaWNhdGluZyB0aGlzIGFkYXB0ZXIgY2FuIGFkYXB0IHRoZSBzZXJ2ZXIgYmFzZWQgb24gdGhlXHJcbiAgLy8gZ2l2ZW4gc2VydmVyQ2FwYWJpbGl0aWVzLlxyXG4gIHN0YXRpYyBjYW5BZGFwdChzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHNlcnZlckNhcGFiaWxpdGllcy5kb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyID09PSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgLy8gUHVibGljOiBDcmVhdGVzIGhpZ2hsaWdodCBtYXJrZXJzIGZvciBhIGdpdmVuIGVkaXRvciBwb3NpdGlvbi5cclxuICAvLyBUaHJvd3MgYW4gZXJyb3IgaWYgZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciBpcyBub3QgYSByZWdpc3RlcmVkIGNhcGFiaWxpdHkuXHJcbiAgLy9cclxuICAvLyAqIGBjb25uZWN0aW9uYCBBIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCBwcm92aWRlcyBoaWdobGlnaHRzLlxyXG4gIC8vICogYHNlcnZlckNhcGFiaWxpdGllc2AgVGhlIHtTZXJ2ZXJDYXBhYmlsaXRpZXN9IG9mIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCB3aWxsIGJlIHVzZWQuXHJcbiAgLy8gKiBgZWRpdG9yYCBUaGUgQXRvbSB7VGV4dEVkaXRvcn0gY29udGFpbmluZyB0aGUgdGV4dCB0byBiZSBoaWdobGlnaHRlZC5cclxuICAvLyAqIGBwb3NpdGlvbmAgVGhlIEF0b20ge1BvaW50fSB0byBmZXRjaCBoaWdobGlnaHRzIGZvci5cclxuICAvL1xyXG4gIC8vIFJldHVybnMgYSB7UHJvbWlzZX0gb2YgYW4ge0FycmF5fSBvZiB7UmFuZ2V9cyB0byBiZSB0dXJuZWQgaW50byBoaWdobGlnaHRzLlxyXG4gIHN0YXRpYyBhc3luYyBoaWdobGlnaHQoXHJcbiAgICBjb25uZWN0aW9uOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXHJcbiAgICBzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyxcclxuICAgIGVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxyXG4gICAgcG9zaXRpb246IGF0b20kUG9pbnQsXHJcbiAgKTogUHJvbWlzZTw/QXJyYXk8YXRvbSRSYW5nZT4+IHtcclxuICAgIGludmFyaWFudChzZXJ2ZXJDYXBhYmlsaXRpZXMuZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciwgJ011c3QgaGF2ZSB0aGUgZG9jdW1lbnRIaWdobGlnaHQgY2FwYWJpbGl0eScpO1xyXG4gICAgY29uc3QgaGlnaGxpZ2h0cyA9IGF3YWl0IGNvbm5lY3Rpb24uZG9jdW1lbnRIaWdobGlnaHQoQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKGVkaXRvciwgcG9zaXRpb24pKTtcclxuICAgIHJldHVybiBoaWdobGlnaHRzLm1hcChoaWdobGlnaHQgPT4ge1xyXG4gICAgICByZXR1cm4gQ29udmVydC5sc1JhbmdlVG9BdG9tUmFuZ2UoaGlnaGxpZ2h0LnJhbmdlKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iXX0=