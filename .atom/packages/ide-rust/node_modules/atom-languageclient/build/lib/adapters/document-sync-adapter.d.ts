import { LanguageClientConnection, TextDocumentSyncOptions, TextDocumentContentChangeEvent, VersionedTextDocumentIdentifier, ServerCapabilities } from '../languageclient';
import { Disposable, DidStopChangingEvent, TextEditEvent, TextEditor } from 'atom';
export default class DocumentSyncAdapter {
    private _editorSelector;
    private _disposable;
    _documentSyncKind: number;
    private _editors;
    private _connection;
    private _versions;
    static canAdapt(serverCapabilities: ServerCapabilities): boolean;
    private static canAdaptV2(serverCapabilities);
    private static canAdaptV3(serverCapabilities);
    constructor(connection: LanguageClientConnection, documentSyncKind: TextDocumentSyncOptions | number | undefined, editorSelector: (editor: TextEditor) => boolean);
    dispose(): void;
    observeTextEditor(editor: TextEditor): void;
    private _handleGrammarChange(editor);
    private _handleNewEditor(editor);
    getEditorSyncAdapter(editor: TextEditor): TextEditorSyncAdapter | undefined;
}
export declare class TextEditorSyncAdapter {
    private _disposable;
    private _editor;
    private _currentUri;
    private _connection;
    private _fakeDidChangeWatchedFiles;
    private _versions;
    constructor(editor: TextEditor, connection: LanguageClientConnection, documentSyncKind: number, versions: Map<string, number>);
    setupChangeTracking(documentSyncKind: number): Disposable | null;
    dispose(): void;
    getLanguageId(): string;
    getVersionedTextDocumentIdentifier(): VersionedTextDocumentIdentifier;
    sendFullChanges(): void;
    sendIncrementalChanges(event: DidStopChangingEvent): void;
    static textEditToContentChange(change: TextEditEvent): TextDocumentContentChangeEvent;
    private _isPrimaryAdapter();
    private _bumpVersion();
    private didOpen();
    private _getVersion(filePath);
    didClose(): void;
    willSave(): void;
    didSave(): void;
    didRename(): void;
    getEditorUri(): string;
}
