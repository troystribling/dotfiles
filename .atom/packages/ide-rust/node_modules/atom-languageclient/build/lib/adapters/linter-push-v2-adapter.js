Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Public: Listen to diagnostics messages from the language server and publish them
// to the user by way of the Linter Push (Indie) v2 API supported by Atom IDE UI.
let LinterPushV2Adapter = class LinterPushV2Adapter {

  // Public: Create a new {LinterPushV2Adapter} that will listen for diagnostics
  // via the supplied {LanguageClientConnection}.
  //
  // * `connection` A {LanguageClientConnection} to the language server that will provide diagnostics.
  constructor(connection) {
    this._diagnosticMap = new Map();
    this._indies = new Set();

    connection.onPublishDiagnostics(this.captureDiagnostics.bind(this));
  }

  // Public: Attach this {LinterPushV2Adapter} to a given {V2IndieDelegate} registry.
  //
  // * `indie` A {V2IndieDelegate} that wants to receive messages.
  attach(indie) {
    this._indies.add(indie);
    this._diagnosticMap.forEach((value, key) => indie.setMessages(key, value));
    indie.onDidDestroy(() => {
      this._indies.delete(indie);
    });
  }

  // Public: Capture the diagnostics sent from a langguage server, convert them to the
  // Linter V2 format and forward them on to any attached {V2IndieDelegate}s.
  //
  // * `params` The {PublishDiagnosticsParams} received from the language server that should
  //            be captured and forwarded on to any attached {V2IndieDelegate}s.
  captureDiagnostics(params) {
    const path = _convert2.default.uriToPath(params.uri);
    const messages = params.diagnostics.map(d => LinterPushV2Adapter.diagnosticToV2Message(path, d));
    this._diagnosticMap.set(path, messages);
    this._indies.forEach(i => i.setMessages(path, messages));
  }

  // Public: Convert a single {Diagnostic} received from a language server into a single
  // {V2Message} expected by the Linter V2 API.
  //
  // * `path` A string representing the path of the file the diagnostic belongs to.
  // * `diagnostics` A {Diagnostic} object received from the language server.
  //
  // Returns a {V2Message} equivalent to the {Diagnostic} object supplied by the language server.
  static diagnosticToV2Message(path, diagnostic) {
    return {
      location: {
        file: path,
        position: _convert2.default.lsRangeToAtomRange(diagnostic.range)
      },
      excerpt: diagnostic.message,
      linterName: diagnostic.source,
      severity: LinterPushV2Adapter.diagnosticSeverityToSeverity(diagnostic.severity || -1)
    };
  }

  // Public: Convert a diagnostic severity number obtained from the language server into
  // the textual equivalent for a Linter {V2Message}.
  //
  // * `severity` A number representing the severity of the diagnostic.
  //
  // Returns a string of 'error', 'warning' or 'info' depending on the severity.
  static diagnosticSeverityToSeverity(severity) {
    switch (severity) {
      case _languageclient.DiagnosticSeverity.Error:
        return 'error';
      case _languageclient.DiagnosticSeverity.Warning:
        return 'warning';
      case _languageclient.DiagnosticSeverity.Information:
      case _languageclient.DiagnosticSeverity.Hint:
      default:
        return 'info';
    }
  }
};
exports.default = LinterPushV2Adapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9saW50ZXItcHVzaC12Mi1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIkxpbnRlclB1c2hWMkFkYXB0ZXIiLCJjb25zdHJ1Y3RvciIsImNvbm5lY3Rpb24iLCJfZGlhZ25vc3RpY01hcCIsIk1hcCIsIl9pbmRpZXMiLCJTZXQiLCJvblB1Ymxpc2hEaWFnbm9zdGljcyIsImNhcHR1cmVEaWFnbm9zdGljcyIsImJpbmQiLCJhdHRhY2giLCJpbmRpZSIsImFkZCIsImZvckVhY2giLCJ2YWx1ZSIsImtleSIsInNldE1lc3NhZ2VzIiwib25EaWREZXN0cm95IiwiZGVsZXRlIiwicGFyYW1zIiwicGF0aCIsInVyaVRvUGF0aCIsInVyaSIsIm1lc3NhZ2VzIiwiZGlhZ25vc3RpY3MiLCJtYXAiLCJkIiwiZGlhZ25vc3RpY1RvVjJNZXNzYWdlIiwic2V0IiwiaSIsImRpYWdub3N0aWMiLCJsb2NhdGlvbiIsImZpbGUiLCJwb3NpdGlvbiIsImxzUmFuZ2VUb0F0b21SYW5nZSIsInJhbmdlIiwiZXhjZXJwdCIsIm1lc3NhZ2UiLCJsaW50ZXJOYW1lIiwic291cmNlIiwic2V2ZXJpdHkiLCJkaWFnbm9zdGljU2V2ZXJpdHlUb1NldmVyaXR5IiwiRXJyb3IiLCJXYXJuaW5nIiwiSW5mb3JtYXRpb24iLCJIaW50Il0sIm1hcHBpbmdzIjoiOzs7OztBQUVBOztBQU9BOzs7Ozs7QUFFQTtBQUNBO0lBQ3FCQSxtQixHQUFOLE1BQU1BLG1CQUFOLENBQTBCOztBQUl2QztBQUNBO0FBQ0E7QUFDQTtBQUNBQyxjQUFZQyxVQUFaLEVBQWtEO0FBQUEsU0FQbERDLGNBT2tELEdBUEssSUFBSUMsR0FBSixFQU9MO0FBQUEsU0FObERDLE9BTWtELEdBTlgsSUFBSUMsR0FBSixFQU1XOztBQUNoREosZUFBV0ssb0JBQVgsQ0FBZ0MsS0FBS0Msa0JBQUwsQ0FBd0JDLElBQXhCLENBQTZCLElBQTdCLENBQWhDO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0FDLFNBQU9DLEtBQVAsRUFBNEM7QUFDMUMsU0FBS04sT0FBTCxDQUFhTyxHQUFiLENBQWlCRCxLQUFqQjtBQUNBLFNBQUtSLGNBQUwsQ0FBb0JVLE9BQXBCLENBQTRCLENBQUNDLEtBQUQsRUFBUUMsR0FBUixLQUFnQkosTUFBTUssV0FBTixDQUFrQkQsR0FBbEIsRUFBdUJELEtBQXZCLENBQTVDO0FBQ0FILFVBQU1NLFlBQU4sQ0FBbUIsTUFBTTtBQUFFLFdBQUtaLE9BQUwsQ0FBYWEsTUFBYixDQUFvQlAsS0FBcEI7QUFBNEIsS0FBdkQ7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FILHFCQUFtQlcsTUFBbkIsRUFBMkQ7QUFDekQsVUFBTUMsT0FBTyxrQkFBUUMsU0FBUixDQUFrQkYsT0FBT0csR0FBekIsQ0FBYjtBQUNBLFVBQU1DLFdBQVdKLE9BQU9LLFdBQVAsQ0FBbUJDLEdBQW5CLENBQXVCQyxLQUFLMUIsb0JBQW9CMkIscUJBQXBCLENBQTBDUCxJQUExQyxFQUFnRE0sQ0FBaEQsQ0FBNUIsQ0FBakI7QUFDQSxTQUFLdkIsY0FBTCxDQUFvQnlCLEdBQXBCLENBQXdCUixJQUF4QixFQUE4QkcsUUFBOUI7QUFDQSxTQUFLbEIsT0FBTCxDQUFhUSxPQUFiLENBQXFCZ0IsS0FBS0EsRUFBRWIsV0FBRixDQUFjSSxJQUFkLEVBQW9CRyxRQUFwQixDQUExQjtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBT0kscUJBQVAsQ0FBNkJQLElBQTdCLEVBQTJDVSxVQUEzQyxFQUFxRjtBQUNuRixXQUFPO0FBQ0xDLGdCQUFVO0FBQ1JDLGNBQU1aLElBREU7QUFFUmEsa0JBQVUsa0JBQVFDLGtCQUFSLENBQTJCSixXQUFXSyxLQUF0QztBQUZGLE9BREw7QUFLTEMsZUFBU04sV0FBV08sT0FMZjtBQU1MQyxrQkFBWVIsV0FBV1MsTUFObEI7QUFPTEMsZ0JBQVV4QyxvQkFBb0J5Qyw0QkFBcEIsQ0FBaURYLFdBQVdVLFFBQVgsSUFBdUIsQ0FBQyxDQUF6RTtBQVBMLEtBQVA7QUFTRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFPQyw0QkFBUCxDQUFvQ0QsUUFBcEMsRUFBb0Y7QUFDbEYsWUFBUUEsUUFBUjtBQUNFLFdBQUssbUNBQW1CRSxLQUF4QjtBQUNFLGVBQU8sT0FBUDtBQUNGLFdBQUssbUNBQW1CQyxPQUF4QjtBQUNFLGVBQU8sU0FBUDtBQUNGLFdBQUssbUNBQW1CQyxXQUF4QjtBQUNBLFdBQUssbUNBQW1CQyxJQUF4QjtBQUNBO0FBQ0UsZUFBTyxNQUFQO0FBUko7QUFVRDtBQXJFc0MsQztrQkFBcEI3QyxtQiIsImZpbGUiOiJsaW50ZXItcHVzaC12Mi1hZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHtcbiAgRGlhZ25vc3RpY1NldmVyaXR5LFxuICBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sXG4gIHR5cGUgRGlhZ25vc3RpYyxcbiAgdHlwZSBQdWJsaXNoRGlhZ25vc3RpY3NQYXJhbXMsXG4gIHR5cGUgU2VydmVyQ2FwYWJpbGl0aWVzXG59IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcbmltcG9ydCBDb252ZXJ0IGZyb20gJy4uL2NvbnZlcnQnO1xuXG4vLyBQdWJsaWM6IExpc3RlbiB0byBkaWFnbm9zdGljcyBtZXNzYWdlcyBmcm9tIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgYW5kIHB1Ymxpc2ggdGhlbVxuLy8gdG8gdGhlIHVzZXIgYnkgd2F5IG9mIHRoZSBMaW50ZXIgUHVzaCAoSW5kaWUpIHYyIEFQSSBzdXBwb3J0ZWQgYnkgQXRvbSBJREUgVUkuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMaW50ZXJQdXNoVjJBZGFwdGVyIHtcbiAgX2RpYWdub3N0aWNNYXA6IE1hcDxzdHJpbmcsIEFycmF5PGxpbnRlciRWMk1lc3NhZ2U+PiA9IG5ldyBNYXAoKTtcbiAgX2luZGllczogU2V0PGxpbnRlciRWMkluZGllRGVsZWdhdGU+ID0gbmV3IFNldCgpO1xuXG4gIC8vIFB1YmxpYzogQ3JlYXRlIGEgbmV3IHtMaW50ZXJQdXNoVjJBZGFwdGVyfSB0aGF0IHdpbGwgbGlzdGVuIGZvciBkaWFnbm9zdGljc1xuICAvLyB2aWEgdGhlIHN1cHBsaWVkIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259LlxuICAvL1xuICAvLyAqIGBjb25uZWN0aW9uYCBBIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCB3aWxsIHByb3ZpZGUgZGlhZ25vc3RpY3MuXG4gIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb246IExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbikge1xuICAgIGNvbm5lY3Rpb24ub25QdWJsaXNoRGlhZ25vc3RpY3ModGhpcy5jYXB0dXJlRGlhZ25vc3RpY3MuYmluZCh0aGlzKSk7XG4gIH1cblxuICAvLyBQdWJsaWM6IEF0dGFjaCB0aGlzIHtMaW50ZXJQdXNoVjJBZGFwdGVyfSB0byBhIGdpdmVuIHtWMkluZGllRGVsZWdhdGV9IHJlZ2lzdHJ5LlxuICAvL1xuICAvLyAqIGBpbmRpZWAgQSB7VjJJbmRpZURlbGVnYXRlfSB0aGF0IHdhbnRzIHRvIHJlY2VpdmUgbWVzc2FnZXMuXG4gIGF0dGFjaChpbmRpZTogbGludGVyJFYySW5kaWVEZWxlZ2F0ZSk6IHZvaWQge1xuICAgIHRoaXMuX2luZGllcy5hZGQoaW5kaWUpO1xuICAgIHRoaXMuX2RpYWdub3N0aWNNYXAuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gaW5kaWUuc2V0TWVzc2FnZXMoa2V5LCB2YWx1ZSkpO1xuICAgIGluZGllLm9uRGlkRGVzdHJveSgoKSA9PiB7IHRoaXMuX2luZGllcy5kZWxldGUoaW5kaWUpIH0pO1xuICB9XG5cbiAgLy8gUHVibGljOiBDYXB0dXJlIHRoZSBkaWFnbm9zdGljcyBzZW50IGZyb20gYSBsYW5nZ3VhZ2Ugc2VydmVyLCBjb252ZXJ0IHRoZW0gdG8gdGhlXG4gIC8vIExpbnRlciBWMiBmb3JtYXQgYW5kIGZvcndhcmQgdGhlbSBvbiB0byBhbnkgYXR0YWNoZWQge1YySW5kaWVEZWxlZ2F0ZX1zLlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7UHVibGlzaERpYWdub3N0aWNzUGFyYW1zfSByZWNlaXZlZCBmcm9tIHRoZSBsYW5ndWFnZSBzZXJ2ZXIgdGhhdCBzaG91bGRcbiAgLy8gICAgICAgICAgICBiZSBjYXB0dXJlZCBhbmQgZm9yd2FyZGVkIG9uIHRvIGFueSBhdHRhY2hlZCB7VjJJbmRpZURlbGVnYXRlfXMuXG4gIGNhcHR1cmVEaWFnbm9zdGljcyhwYXJhbXM6IFB1Ymxpc2hEaWFnbm9zdGljc1BhcmFtcyk6IHZvaWQge1xuICAgIGNvbnN0IHBhdGggPSBDb252ZXJ0LnVyaVRvUGF0aChwYXJhbXMudXJpKTtcbiAgICBjb25zdCBtZXNzYWdlcyA9IHBhcmFtcy5kaWFnbm9zdGljcy5tYXAoZCA9PiBMaW50ZXJQdXNoVjJBZGFwdGVyLmRpYWdub3N0aWNUb1YyTWVzc2FnZShwYXRoLCBkKSk7XG4gICAgdGhpcy5fZGlhZ25vc3RpY01hcC5zZXQocGF0aCwgbWVzc2FnZXMpO1xuICAgIHRoaXMuX2luZGllcy5mb3JFYWNoKGkgPT4gaS5zZXRNZXNzYWdlcyhwYXRoLCBtZXNzYWdlcykpO1xuICB9XG5cbiAgLy8gUHVibGljOiBDb252ZXJ0IGEgc2luZ2xlIHtEaWFnbm9zdGljfSByZWNlaXZlZCBmcm9tIGEgbGFuZ3VhZ2Ugc2VydmVyIGludG8gYSBzaW5nbGVcbiAgLy8ge1YyTWVzc2FnZX0gZXhwZWN0ZWQgYnkgdGhlIExpbnRlciBWMiBBUEkuXG4gIC8vXG4gIC8vICogYHBhdGhgIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcGF0aCBvZiB0aGUgZmlsZSB0aGUgZGlhZ25vc3RpYyBiZWxvbmdzIHRvLlxuICAvLyAqIGBkaWFnbm9zdGljc2AgQSB7RGlhZ25vc3RpY30gb2JqZWN0IHJlY2VpdmVkIGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlci5cbiAgLy9cbiAgLy8gUmV0dXJucyBhIHtWMk1lc3NhZ2V9IGVxdWl2YWxlbnQgdG8gdGhlIHtEaWFnbm9zdGljfSBvYmplY3Qgc3VwcGxpZWQgYnkgdGhlIGxhbmd1YWdlIHNlcnZlci5cbiAgc3RhdGljIGRpYWdub3N0aWNUb1YyTWVzc2FnZShwYXRoOiBzdHJpbmcsIGRpYWdub3N0aWM6IERpYWdub3N0aWMpOiBsaW50ZXIkVjJNZXNzYWdlIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgZmlsZTogcGF0aCxcbiAgICAgICAgcG9zaXRpb246IENvbnZlcnQubHNSYW5nZVRvQXRvbVJhbmdlKGRpYWdub3N0aWMucmFuZ2UpLFxuICAgICAgfSxcbiAgICAgIGV4Y2VycHQ6IGRpYWdub3N0aWMubWVzc2FnZSxcbiAgICAgIGxpbnRlck5hbWU6IGRpYWdub3N0aWMuc291cmNlLFxuICAgICAgc2V2ZXJpdHk6IExpbnRlclB1c2hWMkFkYXB0ZXIuZGlhZ25vc3RpY1NldmVyaXR5VG9TZXZlcml0eShkaWFnbm9zdGljLnNldmVyaXR5IHx8IC0xKSxcbiAgICB9O1xuICB9XG5cbiAgLy8gUHVibGljOiBDb252ZXJ0IGEgZGlhZ25vc3RpYyBzZXZlcml0eSBudW1iZXIgb2J0YWluZWQgZnJvbSB0aGUgbGFuZ3VhZ2Ugc2VydmVyIGludG9cbiAgLy8gdGhlIHRleHR1YWwgZXF1aXZhbGVudCBmb3IgYSBMaW50ZXIge1YyTWVzc2FnZX0uXG4gIC8vXG4gIC8vICogYHNldmVyaXR5YCBBIG51bWJlciByZXByZXNlbnRpbmcgdGhlIHNldmVyaXR5IG9mIHRoZSBkaWFnbm9zdGljLlxuICAvL1xuICAvLyBSZXR1cm5zIGEgc3RyaW5nIG9mICdlcnJvcicsICd3YXJuaW5nJyBvciAnaW5mbycgZGVwZW5kaW5nIG9uIHRoZSBzZXZlcml0eS5cbiAgc3RhdGljIGRpYWdub3N0aWNTZXZlcml0eVRvU2V2ZXJpdHkoc2V2ZXJpdHk6IG51bWJlcik6ICdlcnJvcicgfCAnd2FybmluZycgfCAnaW5mbycge1xuICAgIHN3aXRjaCAoc2V2ZXJpdHkpIHtcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkVycm9yOlxuICAgICAgICByZXR1cm4gJ2Vycm9yJztcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmc6XG4gICAgICAgIHJldHVybiAnd2FybmluZyc7XG4gICAgICBjYXNlIERpYWdub3N0aWNTZXZlcml0eS5JbmZvcm1hdGlvbjpcbiAgICAgIGNhc2UgRGlhZ25vc3RpY1NldmVyaXR5LkhpbnQ6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ2luZm8nO1xuICAgIH1cbiAgfVxufVxuIl19