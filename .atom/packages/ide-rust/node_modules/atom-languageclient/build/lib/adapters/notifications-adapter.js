Object.defineProperty(exports, "__esModule", {
  value: true
});

var _languageclient = require('../languageclient');

// Public: Adapts Atom's user notifications to those of the language server protocol.
class NotificationsAdapter {
  // Public: Attach to a {LanguageClientConnection} to recieve events indicating
  // when user notifications should be displayed.
  static attach(connection, name) {
    connection.onShowMessage(m => NotificationsAdapter.onShowMessage(m, name));
    connection.onShowMessageRequest(m => NotificationsAdapter.onShowMessageRequest(m, name));
  }

  static onShowMessageRequest(params, name) {
    return new Promise((resolve, reject) => {
      const options = {
        dismissable: true,
        detail: name
      };
      if (params.actions) {
        options.buttons = params.actions.map(a => ({
          text: a.title,
          onDidClick: () => {
            resolve(a);
            if (notification != null) {
              notification.dismiss();
            }
          }
        }));
      }

      const notification = addNotificationForMessage(params.type, params.message, {
        dismissable: true,
        detail: name
      });

      if (notification != null) {
        notification.onDidDismiss(() => {
          resolve(null);
        });
      }
    });
  }

  // Public: Show a notification message using the Atom notifications API.
  //
  // * `params` The {ShowMessageParams} received from the language server
  //            indicating the details of the notification to be displayed.
  // * `name`   The name of the language server so the user can identify the
  //            context of the message.
  static onShowMessage(params, name) {
    addNotificationForMessage(params.type, params.message, {
      dismissable: true,
      detail: name
    });
  }

  // Public: Convert a {MessageActionItem} from the language server into an
  // equivalent {NotificationButton} within Atom.
  //
  // * `actionItem` The {MessageActionItem} to be converted.
  //
  // Returns a {NotificationButton} equivalent to the {MessageActionItem} given.
  static actionItemToNotificationButton(actionItem) {
    return {
      text: actionItem.title
    };
  }
}

exports.default = NotificationsAdapter;
function addNotificationForMessage(messageType, message, options) {
  switch (messageType) {
    case _languageclient.MessageType.Error:
      return atom.notifications.addError(message, options);
    case _languageclient.MessageType.Warning:
      return atom.notifications.addWarning(message, options);
    case _languageclient.MessageType.Log:
      // console.log(params.message);
      return null;
    case _languageclient.MessageType.Info:
    default:
      return atom.notifications.addInfo(message, options);
  }
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9ub3RpZmljYXRpb25zLWFkYXB0ZXIuanMiXSwibmFtZXMiOlsiTm90aWZpY2F0aW9uc0FkYXB0ZXIiLCJhdHRhY2giLCJjb25uZWN0aW9uIiwibmFtZSIsIm9uU2hvd01lc3NhZ2UiLCJtIiwib25TaG93TWVzc2FnZVJlcXVlc3QiLCJwYXJhbXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9wdGlvbnMiLCJkaXNtaXNzYWJsZSIsImRldGFpbCIsImFjdGlvbnMiLCJidXR0b25zIiwibWFwIiwiYSIsInRleHQiLCJ0aXRsZSIsIm9uRGlkQ2xpY2siLCJub3RpZmljYXRpb24iLCJkaXNtaXNzIiwiYWRkTm90aWZpY2F0aW9uRm9yTWVzc2FnZSIsInR5cGUiLCJtZXNzYWdlIiwib25EaWREaXNtaXNzIiwiYWN0aW9uSXRlbVRvTm90aWZpY2F0aW9uQnV0dG9uIiwiYWN0aW9uSXRlbSIsIm1lc3NhZ2VUeXBlIiwiRXJyb3IiLCJhdG9tIiwibm90aWZpY2F0aW9ucyIsImFkZEVycm9yIiwiV2FybmluZyIsImFkZFdhcm5pbmciLCJMb2ciLCJJbmZvIiwiYWRkSW5mbyJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBOztBQVFBO0FBQ2UsTUFBTUEsb0JBQU4sQ0FBMkI7QUFDeEM7QUFDQTtBQUNBLFNBQU9DLE1BQVAsQ0FBY0MsVUFBZCxFQUFvREMsSUFBcEQsRUFBa0U7QUFDaEVELGVBQVdFLGFBQVgsQ0FBeUJDLEtBQUtMLHFCQUFxQkksYUFBckIsQ0FBbUNDLENBQW5DLEVBQXNDRixJQUF0QyxDQUE5QjtBQUNBRCxlQUFXSSxvQkFBWCxDQUFnQ0QsS0FBS0wscUJBQXFCTSxvQkFBckIsQ0FBMENELENBQTFDLEVBQTZDRixJQUE3QyxDQUFyQztBQUNEOztBQUVELFNBQU9HLG9CQUFQLENBQTRCQyxNQUE1QixFQUE4REosSUFBOUQsRUFBeUc7QUFDdkcsV0FBTyxJQUFJSyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDLFlBQU1DLFVBQW9DO0FBQ3hDQyxxQkFBYSxJQUQyQjtBQUV4Q0MsZ0JBQVFWO0FBRmdDLE9BQTFDO0FBSUEsVUFBSUksT0FBT08sT0FBWCxFQUFvQjtBQUNsQkgsZ0JBQVFJLE9BQVIsR0FBa0JSLE9BQU9PLE9BQVAsQ0FBZUUsR0FBZixDQUFtQkMsTUFBTTtBQUN6Q0MsZ0JBQU1ELEVBQUVFLEtBRGlDO0FBRXpDQyxzQkFBWSxNQUFNO0FBQ2hCWCxvQkFBUVEsQ0FBUjtBQUNBLGdCQUFJSSxnQkFBZ0IsSUFBcEIsRUFBMEI7QUFDeEJBLDJCQUFhQyxPQUFiO0FBQ0Q7QUFDRjtBQVB3QyxTQUFOLENBQW5CLENBQWxCO0FBU0Q7O0FBRUQsWUFBTUQsZUFBZUUsMEJBQTBCaEIsT0FBT2lCLElBQWpDLEVBQXVDakIsT0FBT2tCLE9BQTlDLEVBQXVEO0FBQzFFYixxQkFBYSxJQUQ2RDtBQUUxRUMsZ0JBQVFWO0FBRmtFLE9BQXZELENBQXJCOztBQUtBLFVBQUlrQixnQkFBZ0IsSUFBcEIsRUFBMEI7QUFDeEJBLHFCQUFhSyxZQUFiLENBQTBCLE1BQU07QUFDOUJqQixrQkFBUSxJQUFSO0FBQ0QsU0FGRDtBQUdEO0FBQ0YsS0EzQk0sQ0FBUDtBQTRCRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFPTCxhQUFQLENBQXFCRyxNQUFyQixFQUFnREosSUFBaEQsRUFBb0U7QUFDbEVvQiw4QkFBMEJoQixPQUFPaUIsSUFBakMsRUFBdUNqQixPQUFPa0IsT0FBOUMsRUFBdUQ7QUFDckRiLG1CQUFhLElBRHdDO0FBRXJEQyxjQUFRVjtBQUY2QyxLQUF2RDtBQUlEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU93Qiw4QkFBUCxDQUFzQ0MsVUFBdEMsRUFBOEY7QUFDNUYsV0FBTztBQUNMVixZQUFNVSxXQUFXVDtBQURaLEtBQVA7QUFHRDtBQTlEdUM7O2tCQUFyQm5CLG9CO0FBaUVyQixTQUFTdUIseUJBQVQsQ0FDRU0sV0FERixFQUVFSixPQUZGLEVBR0VkLE9BSEYsRUFJc0I7QUFDcEIsVUFBUWtCLFdBQVI7QUFDRSxTQUFLLDRCQUFZQyxLQUFqQjtBQUNFLGFBQU9DLEtBQUtDLGFBQUwsQ0FBbUJDLFFBQW5CLENBQTRCUixPQUE1QixFQUFxQ2QsT0FBckMsQ0FBUDtBQUNGLFNBQUssNEJBQVl1QixPQUFqQjtBQUNFLGFBQU9ILEtBQUtDLGFBQUwsQ0FBbUJHLFVBQW5CLENBQThCVixPQUE5QixFQUF1Q2QsT0FBdkMsQ0FBUDtBQUNGLFNBQUssNEJBQVl5QixHQUFqQjtBQUNFO0FBQ0EsYUFBTyxJQUFQO0FBQ0YsU0FBSyw0QkFBWUMsSUFBakI7QUFDQTtBQUNFLGFBQU9OLEtBQUtDLGFBQUwsQ0FBbUJNLE9BQW5CLENBQTJCYixPQUEzQixFQUFvQ2QsT0FBcEMsQ0FBUDtBQVZKO0FBWUQiLCJmaWxlIjoibm90aWZpY2F0aW9ucy1hZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHtcbiAgTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLFxuICBNZXNzYWdlVHlwZSxcbiAgdHlwZSBNZXNzYWdlQWN0aW9uSXRlbSxcbiAgdHlwZSBTaG93TWVzc2FnZVBhcmFtcyxcbiAgdHlwZSBTaG93TWVzc2FnZVJlcXVlc3RQYXJhbXMsXG59IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcblxuLy8gUHVibGljOiBBZGFwdHMgQXRvbSdzIHVzZXIgbm90aWZpY2F0aW9ucyB0byB0aG9zZSBvZiB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHByb3RvY29sLlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm90aWZpY2F0aW9uc0FkYXB0ZXIge1xuICAvLyBQdWJsaWM6IEF0dGFjaCB0byBhIHtMYW5ndWFnZUNsaWVudENvbm5lY3Rpb259IHRvIHJlY2lldmUgZXZlbnRzIGluZGljYXRpbmdcbiAgLy8gd2hlbiB1c2VyIG5vdGlmaWNhdGlvbnMgc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAgc3RhdGljIGF0dGFjaChjb25uZWN0aW9uOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24sIG5hbWU6IHN0cmluZykge1xuICAgIGNvbm5lY3Rpb24ub25TaG93TWVzc2FnZShtID0+IE5vdGlmaWNhdGlvbnNBZGFwdGVyLm9uU2hvd01lc3NhZ2UobSwgbmFtZSkpO1xuICAgIGNvbm5lY3Rpb24ub25TaG93TWVzc2FnZVJlcXVlc3QobSA9PiBOb3RpZmljYXRpb25zQWRhcHRlci5vblNob3dNZXNzYWdlUmVxdWVzdChtLCBuYW1lKSk7XG4gIH1cblxuICBzdGF0aWMgb25TaG93TWVzc2FnZVJlcXVlc3QocGFyYW1zOiBTaG93TWVzc2FnZVJlcXVlc3RQYXJhbXMsIG5hbWU6IHN0cmluZyk6IFByb21pc2U8P01lc3NhZ2VBY3Rpb25JdGVtPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnM6IGF0b20kTm90aWZpY2F0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAgIGRldGFpbDogbmFtZSxcbiAgICAgIH07XG4gICAgICBpZiAocGFyYW1zLmFjdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucy5idXR0b25zID0gcGFyYW1zLmFjdGlvbnMubWFwKGEgPT4gKHtcbiAgICAgICAgICB0ZXh0OiBhLnRpdGxlLFxuICAgICAgICAgIG9uRGlkQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoYSk7XG4gICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmRpc21pc3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IGFkZE5vdGlmaWNhdGlvbkZvck1lc3NhZ2UocGFyYW1zLnR5cGUsIHBhcmFtcy5tZXNzYWdlLCB7XG4gICAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgICBkZXRhaWw6IG5hbWUsXG4gICAgICB9KTtcblxuICAgICAgaWYgKG5vdGlmaWNhdGlvbiAhPSBudWxsKSB7XG4gICAgICAgIG5vdGlmaWNhdGlvbi5vbkRpZERpc21pc3MoKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUobnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy8gUHVibGljOiBTaG93IGEgbm90aWZpY2F0aW9uIG1lc3NhZ2UgdXNpbmcgdGhlIEF0b20gbm90aWZpY2F0aW9ucyBBUEkuXG4gIC8vXG4gIC8vICogYHBhcmFtc2AgVGhlIHtTaG93TWVzc2FnZVBhcmFtc30gcmVjZWl2ZWQgZnJvbSB0aGUgbGFuZ3VhZ2Ugc2VydmVyXG4gIC8vICAgICAgICAgICAgaW5kaWNhdGluZyB0aGUgZGV0YWlscyBvZiB0aGUgbm90aWZpY2F0aW9uIHRvIGJlIGRpc3BsYXllZC5cbiAgLy8gKiBgbmFtZWAgICBUaGUgbmFtZSBvZiB0aGUgbGFuZ3VhZ2Ugc2VydmVyIHNvIHRoZSB1c2VyIGNhbiBpZGVudGlmeSB0aGVcbiAgLy8gICAgICAgICAgICBjb250ZXh0IG9mIHRoZSBtZXNzYWdlLlxuICBzdGF0aWMgb25TaG93TWVzc2FnZShwYXJhbXM6IFNob3dNZXNzYWdlUGFyYW1zLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBhZGROb3RpZmljYXRpb25Gb3JNZXNzYWdlKHBhcmFtcy50eXBlLCBwYXJhbXMubWVzc2FnZSwge1xuICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICBkZXRhaWw6IG5hbWUsXG4gICAgfSk7XG4gIH1cblxuICAvLyBQdWJsaWM6IENvbnZlcnQgYSB7TWVzc2FnZUFjdGlvbkl0ZW19IGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlciBpbnRvIGFuXG4gIC8vIGVxdWl2YWxlbnQge05vdGlmaWNhdGlvbkJ1dHRvbn0gd2l0aGluIEF0b20uXG4gIC8vXG4gIC8vICogYGFjdGlvbkl0ZW1gIFRoZSB7TWVzc2FnZUFjdGlvbkl0ZW19IHRvIGJlIGNvbnZlcnRlZC5cbiAgLy9cbiAgLy8gUmV0dXJucyBhIHtOb3RpZmljYXRpb25CdXR0b259IGVxdWl2YWxlbnQgdG8gdGhlIHtNZXNzYWdlQWN0aW9uSXRlbX0gZ2l2ZW4uXG4gIHN0YXRpYyBhY3Rpb25JdGVtVG9Ob3RpZmljYXRpb25CdXR0b24oYWN0aW9uSXRlbTogTWVzc2FnZUFjdGlvbkl0ZW0pOiBhdG9tJE5vdGlmaWNhdGlvbkJ1dHRvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGFjdGlvbkl0ZW0udGl0bGUsXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGROb3RpZmljYXRpb25Gb3JNZXNzYWdlKFxuICBtZXNzYWdlVHlwZTogbnVtYmVyLFxuICBtZXNzYWdlOiBzdHJpbmcsXG4gIG9wdGlvbnM6IGF0b20kTm90aWZpY2F0aW9uT3B0aW9ucyxcbik6ID9hdG9tJE5vdGlmaWNhdGlvbiB7XG4gIHN3aXRjaCAobWVzc2FnZVR5cGUpIHtcbiAgICBjYXNlIE1lc3NhZ2VUeXBlLkVycm9yOlxuICAgICAgcmV0dXJuIGF0b20ubm90aWZpY2F0aW9ucy5hZGRFcnJvcihtZXNzYWdlLCBvcHRpb25zKTtcbiAgICBjYXNlIE1lc3NhZ2VUeXBlLldhcm5pbmc6XG4gICAgICByZXR1cm4gYXRvbS5ub3RpZmljYXRpb25zLmFkZFdhcm5pbmcobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgY2FzZSBNZXNzYWdlVHlwZS5Mb2c6XG4gICAgICAvLyBjb25zb2xlLmxvZyhwYXJhbXMubWVzc2FnZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIE1lc3NhZ2VUeXBlLkluZm86XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkSW5mbyhtZXNzYWdlLCBvcHRpb25zKTtcbiAgfVxufVxuIl19