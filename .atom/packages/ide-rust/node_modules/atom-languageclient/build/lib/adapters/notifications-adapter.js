Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _languageclient = require('../languageclient');

// Public: Adapts Atom's user notifications to those of the language server protocol.
let NotificationsAdapter = class NotificationsAdapter {
  // Public: Attach to a {LanguageClientConnection} to recieve events indicating
  // when user notifications should be displayed.
  static attach(connection, name) {
    connection.onShowMessage(m => NotificationsAdapter.onShowMessage(m, name));
    connection.onShowMessageRequest(m => NotificationsAdapter.onShowMessageRequest(m, name));
  }

  static onShowMessageRequest(params, name) {
    return new Promise((resolve, reject) => {
      let notification;
      const options = { dismissable: true, detail: name };
      if (params.actions) {
        options.buttons = params.actions.map(a => ({
          text: a.title,
          onDidClick: () => {
            resolve(a);
            if (notification != null) {
              notification.dismiss();
            }
          }
        }));
      }

      notification = addNotificationForMessage(params.type, params.message, {
        dismissable: true,
        detail: name
      });

      if (notification != null) {
        notification.onDidDismiss(() => {
          resolve(null);
        });
      }
    });
  }

  // Public: Show a notification message using the Atom notifications API.
  //
  // * `params` The {ShowMessageParams} received from the language server
  //            indicating the details of the notification to be displayed.
  // * `name`   The name of the language server so the user can identify the
  //            context of the message.
  static onShowMessage(params, name) {
    addNotificationForMessage(params.type, params.message, {
      dismissable: true,
      detail: name
    });
  }

  // Public: Convert a {MessageActionItem} from the language server into an
  // equivalent {NotificationButton} within Atom.
  //
  // * `actionItem` The {MessageActionItem} to be converted.
  //
  // Returns a {NotificationButton} equivalent to the {MessageActionItem} given.
  static actionItemToNotificationButton(actionItem) {
    return {
      text: actionItem.title
    };
  }
};
exports.default = NotificationsAdapter;


function addNotificationForMessage(messageType, message, options) {
  switch (messageType) {
    case _languageclient.MessageType.Error:
      return atom.notifications.addError(message, options);
    case _languageclient.MessageType.Warning:
      return atom.notifications.addWarning(message, options);
    case _languageclient.MessageType.Log:
      // console.log(params.message);
      return;
    case _languageclient.MessageType.Info:
    default:
      return atom.notifications.addInfo(message, options);
  }
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9ub3RpZmljYXRpb25zLWFkYXB0ZXIuanMiXSwibmFtZXMiOlsiTm90aWZpY2F0aW9uc0FkYXB0ZXIiLCJhdHRhY2giLCJjb25uZWN0aW9uIiwibmFtZSIsIm9uU2hvd01lc3NhZ2UiLCJtIiwib25TaG93TWVzc2FnZVJlcXVlc3QiLCJwYXJhbXMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm5vdGlmaWNhdGlvbiIsIm9wdGlvbnMiLCJkaXNtaXNzYWJsZSIsImRldGFpbCIsImFjdGlvbnMiLCJidXR0b25zIiwibWFwIiwiYSIsInRleHQiLCJ0aXRsZSIsIm9uRGlkQ2xpY2siLCJkaXNtaXNzIiwiYWRkTm90aWZpY2F0aW9uRm9yTWVzc2FnZSIsInR5cGUiLCJtZXNzYWdlIiwib25EaWREaXNtaXNzIiwiYWN0aW9uSXRlbVRvTm90aWZpY2F0aW9uQnV0dG9uIiwiYWN0aW9uSXRlbSIsIm1lc3NhZ2VUeXBlIiwiRXJyb3IiLCJhdG9tIiwibm90aWZpY2F0aW9ucyIsImFkZEVycm9yIiwiV2FybmluZyIsImFkZFdhcm5pbmciLCJMb2ciLCJJbmZvIiwiYWRkSW5mbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7QUFTQTtJQUNxQkEsb0IsR0FBTixNQUFNQSxvQkFBTixDQUEyQjtBQUN4QztBQUNBO0FBQ0EsU0FBT0MsTUFBUCxDQUFjQyxVQUFkLEVBQW9EQyxJQUFwRCxFQUFrRTtBQUNoRUQsZUFBV0UsYUFBWCxDQUF5QkMsS0FBS0wscUJBQXFCSSxhQUFyQixDQUFtQ0MsQ0FBbkMsRUFBc0NGLElBQXRDLENBQTlCO0FBQ0FELGVBQVdJLG9CQUFYLENBQWdDRCxLQUFLTCxxQkFBcUJNLG9CQUFyQixDQUEwQ0QsQ0FBMUMsRUFBNkNGLElBQTdDLENBQXJDO0FBQ0Q7O0FBRUQsU0FBT0csb0JBQVAsQ0FBNEJDLE1BQTVCLEVBQThESixJQUE5RCxFQUF5RztBQUN2RyxXQUFPLElBQUlLLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDdEMsVUFBSUMsWUFBSjtBQUNBLFlBQU1DLFVBQW9DLEVBQUNDLGFBQWEsSUFBZCxFQUFvQkMsUUFBUVgsSUFBNUIsRUFBMUM7QUFDQSxVQUFJSSxPQUFPUSxPQUFYLEVBQW9CO0FBQ2xCSCxnQkFBUUksT0FBUixHQUFrQlQsT0FBT1EsT0FBUCxDQUFlRSxHQUFmLENBQW1CQyxNQUFNO0FBQ3pDQyxnQkFBTUQsRUFBRUUsS0FEaUM7QUFFekNDLHNCQUFZLE1BQU07QUFDaEJaLG9CQUFRUyxDQUFSO0FBQ0EsZ0JBQUlQLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QkEsMkJBQWFXLE9BQWI7QUFDRDtBQUNGO0FBUHdDLFNBQU4sQ0FBbkIsQ0FBbEI7QUFTRDs7QUFFRFgscUJBQWVZLDBCQUEwQmhCLE9BQU9pQixJQUFqQyxFQUF1Q2pCLE9BQU9rQixPQUE5QyxFQUF1RDtBQUNwRVoscUJBQWEsSUFEdUQ7QUFFcEVDLGdCQUFRWDtBQUY0RCxPQUF2RCxDQUFmOztBQUtBLFVBQUlRLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QkEscUJBQWFlLFlBQWIsQ0FBMEIsTUFBTTtBQUFFakIsa0JBQVEsSUFBUjtBQUFlLFNBQWpEO0FBQ0Q7QUFDRixLQXZCTSxDQUFQO0FBd0JEOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU9MLGFBQVAsQ0FBcUJHLE1BQXJCLEVBQWdESixJQUFoRCxFQUFvRTtBQUNsRW9CLDhCQUEwQmhCLE9BQU9pQixJQUFqQyxFQUF1Q2pCLE9BQU9rQixPQUE5QyxFQUF1RDtBQUNyRFosbUJBQWEsSUFEd0M7QUFFckRDLGNBQVFYO0FBRjZDLEtBQXZEO0FBSUQ7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBT3dCLDhCQUFQLENBQXNDQyxVQUF0QyxFQUE4RjtBQUM1RixXQUFPO0FBQ0xULFlBQU1TLFdBQVdSO0FBRFosS0FBUDtBQUdEO0FBMUR1QyxDO2tCQUFyQnBCLG9COzs7QUE2RHJCLFNBQVN1Qix5QkFBVCxDQUFtQ00sV0FBbkMsRUFBd0RKLE9BQXhELEVBQXlFYixPQUF6RSxFQUFnSTtBQUM5SCxVQUFRaUIsV0FBUjtBQUNFLFNBQUssNEJBQVlDLEtBQWpCO0FBQ0UsYUFBT0MsS0FBS0MsYUFBTCxDQUFtQkMsUUFBbkIsQ0FBNEJSLE9BQTVCLEVBQXFDYixPQUFyQyxDQUFQO0FBQ0YsU0FBSyw0QkFBWXNCLE9BQWpCO0FBQ0UsYUFBT0gsS0FBS0MsYUFBTCxDQUFtQkcsVUFBbkIsQ0FBOEJWLE9BQTlCLEVBQXVDYixPQUF2QyxDQUFQO0FBQ0YsU0FBSyw0QkFBWXdCLEdBQWpCO0FBQ0U7QUFDQTtBQUNGLFNBQUssNEJBQVlDLElBQWpCO0FBQ0E7QUFDRSxhQUFPTixLQUFLQyxhQUFMLENBQW1CTSxPQUFuQixDQUEyQmIsT0FBM0IsRUFBb0NiLE9BQXBDLENBQVA7QUFWSjtBQVlEIiwiZmlsZSI6Im5vdGlmaWNhdGlvbnMtYWRhcHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7XG4gIExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcbiAgTWVzc2FnZVR5cGUsXG4gIHR5cGUgTWVzc2FnZUFjdGlvbkl0ZW0sXG4gIHR5cGUgU2VydmVyQ2FwYWJpbGl0aWVzLFxuICB0eXBlIFNob3dNZXNzYWdlUGFyYW1zLFxuICB0eXBlIFNob3dNZXNzYWdlUmVxdWVzdFBhcmFtc1xufSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XG5cbi8vIFB1YmxpYzogQWRhcHRzIEF0b20ncyB1c2VyIG5vdGlmaWNhdGlvbnMgdG8gdGhvc2Ugb2YgdGhlIGxhbmd1YWdlIHNlcnZlciBwcm90b2NvbC5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vdGlmaWNhdGlvbnNBZGFwdGVyIHtcbiAgLy8gUHVibGljOiBBdHRhY2ggdG8gYSB7TGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9ufSB0byByZWNpZXZlIGV2ZW50cyBpbmRpY2F0aW5nXG4gIC8vIHdoZW4gdXNlciBub3RpZmljYXRpb25zIHNob3VsZCBiZSBkaXNwbGF5ZWQuXG4gIHN0YXRpYyBhdHRhY2goY29ubmVjdGlvbjogTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uLCBuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25uZWN0aW9uLm9uU2hvd01lc3NhZ2UobSA9PiBOb3RpZmljYXRpb25zQWRhcHRlci5vblNob3dNZXNzYWdlKG0sIG5hbWUpKTtcbiAgICBjb25uZWN0aW9uLm9uU2hvd01lc3NhZ2VSZXF1ZXN0KG0gPT4gTm90aWZpY2F0aW9uc0FkYXB0ZXIub25TaG93TWVzc2FnZVJlcXVlc3QobSwgbmFtZSkpO1xuICB9XG5cbiAgc3RhdGljIG9uU2hvd01lc3NhZ2VSZXF1ZXN0KHBhcmFtczogU2hvd01lc3NhZ2VSZXF1ZXN0UGFyYW1zLCBuYW1lOiBzdHJpbmcpOiBQcm9taXNlPD9NZXNzYWdlQWN0aW9uSXRlbT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBsZXQgbm90aWZpY2F0aW9uOiA/YXRvbSROb3RpZmljYXRpb247XG4gICAgICBjb25zdCBvcHRpb25zOiBhdG9tJE5vdGlmaWNhdGlvbk9wdGlvbnMgPSB7ZGlzbWlzc2FibGU6IHRydWUsIGRldGFpbDogbmFtZX07XG4gICAgICBpZiAocGFyYW1zLmFjdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucy5idXR0b25zID0gcGFyYW1zLmFjdGlvbnMubWFwKGEgPT4gKHtcbiAgICAgICAgICB0ZXh0OiBhLnRpdGxlLFxuICAgICAgICAgIG9uRGlkQ2xpY2s6ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoYSk7XG4gICAgICAgICAgICBpZiAobm90aWZpY2F0aW9uICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgbm90aWZpY2F0aW9uLmRpc21pc3MoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgbm90aWZpY2F0aW9uID0gYWRkTm90aWZpY2F0aW9uRm9yTWVzc2FnZShwYXJhbXMudHlwZSwgcGFyYW1zLm1lc3NhZ2UsIHtcbiAgICAgICAgZGlzbWlzc2FibGU6IHRydWUsXG4gICAgICAgIGRldGFpbDogbmFtZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChub3RpZmljYXRpb24gIT0gbnVsbCkge1xuICAgICAgICBub3RpZmljYXRpb24ub25EaWREaXNtaXNzKCgpID0+IHsgcmVzb2x2ZShudWxsKSB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIFB1YmxpYzogU2hvdyBhIG5vdGlmaWNhdGlvbiBtZXNzYWdlIHVzaW5nIHRoZSBBdG9tIG5vdGlmaWNhdGlvbnMgQVBJLlxuICAvL1xuICAvLyAqIGBwYXJhbXNgIFRoZSB7U2hvd01lc3NhZ2VQYXJhbXN9IHJlY2VpdmVkIGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlclxuICAvLyAgICAgICAgICAgIGluZGljYXRpbmcgdGhlIGRldGFpbHMgb2YgdGhlIG5vdGlmaWNhdGlvbiB0byBiZSBkaXNwbGF5ZWQuXG4gIC8vICogYG5hbWVgICAgVGhlIG5hbWUgb2YgdGhlIGxhbmd1YWdlIHNlcnZlciBzbyB0aGUgdXNlciBjYW4gaWRlbnRpZnkgdGhlXG4gIC8vICAgICAgICAgICAgY29udGV4dCBvZiB0aGUgbWVzc2FnZS5cbiAgc3RhdGljIG9uU2hvd01lc3NhZ2UocGFyYW1zOiBTaG93TWVzc2FnZVBhcmFtcywgbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgYWRkTm90aWZpY2F0aW9uRm9yTWVzc2FnZShwYXJhbXMudHlwZSwgcGFyYW1zLm1lc3NhZ2UsIHtcbiAgICAgIGRpc21pc3NhYmxlOiB0cnVlLFxuICAgICAgZGV0YWlsOiBuYW1lXG4gICAgfSk7XG4gIH1cblxuICAvLyBQdWJsaWM6IENvbnZlcnQgYSB7TWVzc2FnZUFjdGlvbkl0ZW19IGZyb20gdGhlIGxhbmd1YWdlIHNlcnZlciBpbnRvIGFuXG4gIC8vIGVxdWl2YWxlbnQge05vdGlmaWNhdGlvbkJ1dHRvbn0gd2l0aGluIEF0b20uXG4gIC8vXG4gIC8vICogYGFjdGlvbkl0ZW1gIFRoZSB7TWVzc2FnZUFjdGlvbkl0ZW19IHRvIGJlIGNvbnZlcnRlZC5cbiAgLy9cbiAgLy8gUmV0dXJucyBhIHtOb3RpZmljYXRpb25CdXR0b259IGVxdWl2YWxlbnQgdG8gdGhlIHtNZXNzYWdlQWN0aW9uSXRlbX0gZ2l2ZW4uXG4gIHN0YXRpYyBhY3Rpb25JdGVtVG9Ob3RpZmljYXRpb25CdXR0b24oYWN0aW9uSXRlbTogTWVzc2FnZUFjdGlvbkl0ZW0pOiBhdG9tJE5vdGlmaWNhdGlvbkJ1dHRvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRleHQ6IGFjdGlvbkl0ZW0udGl0bGUsXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZE5vdGlmaWNhdGlvbkZvck1lc3NhZ2UobWVzc2FnZVR5cGU6IG51bWJlciwgbWVzc2FnZTogc3RyaW5nLCBvcHRpb25zOiBhdG9tJE5vdGlmaWNhdGlvbk9wdGlvbnMpOiA/YXRvbSROb3RpZmljYXRpb24ge1xuICBzd2l0Y2ggKG1lc3NhZ2VUeXBlKSB7XG4gICAgY2FzZSBNZXNzYWdlVHlwZS5FcnJvcjpcbiAgICAgIHJldHVybiBhdG9tLm5vdGlmaWNhdGlvbnMuYWRkRXJyb3IobWVzc2FnZSwgb3B0aW9ucyk7XG4gICAgY2FzZSBNZXNzYWdlVHlwZS5XYXJuaW5nOlxuICAgICAgcmV0dXJuIGF0b20ubm90aWZpY2F0aW9ucy5hZGRXYXJuaW5nKG1lc3NhZ2UsIG9wdGlvbnMpO1xuICAgIGNhc2UgTWVzc2FnZVR5cGUuTG9nOlxuICAgICAgLy8gY29uc29sZS5sb2cocGFyYW1zLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgTWVzc2FnZVR5cGUuSW5mbzpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGF0b20ubm90aWZpY2F0aW9ucy5hZGRJbmZvKG1lc3NhZ2UsIG9wdGlvbnMpO1xuICB9XG59XG4iXX0=