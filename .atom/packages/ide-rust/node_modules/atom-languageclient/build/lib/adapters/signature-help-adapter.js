"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const convert_1 = require("../convert");
const atom_1 = require("atom");
class SignatureHelpAdapter {
    constructor(server, grammarScopes) {
        this._disposables = new atom_1.CompositeDisposable();
        this._connection = server.connection;
        this._capabilities = server.capabilities;
        this._grammarScopes = grammarScopes;
    }
    // Returns a {Boolean} indicating this adapter can adapt the server based on the
    // given serverCapabilities.
    static canAdapt(serverCapabilities) {
        return serverCapabilities.signatureHelpProvider != null;
    }
    dispose() {
        this._disposables.dispose();
    }
    attach(register) {
        const { signatureHelpProvider } = this._capabilities;
        assert(signatureHelpProvider != null);
        let triggerCharacters;
        if (signatureHelpProvider && Array.isArray(signatureHelpProvider.triggerCharacters)) {
            triggerCharacters = new Set(signatureHelpProvider.triggerCharacters);
        }
        this._disposables.add(register({
            priority: 1,
            grammarScopes: this._grammarScopes,
            triggerCharacters,
            getSignatureHelp: this.getSignatureHelp.bind(this),
        }));
    }
    // Public: Retrieves signature help for a given editor and position.
    getSignatureHelp(editor, point) {
        return this._connection.signatureHelp(convert_1.default.editorToTextDocumentPositionParams(editor, point));
    }
}
exports.default = SignatureHelpAdapter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlLWhlbHAtYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9zaWduYXR1cmUtaGVscC1hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaUNBQWtDO0FBQ2xDLHdDQUFpQztBQUVqQywrQkFJYztBQU9kLE1BQXFCLG9CQUFvQjtJQU12QyxZQUFZLE1BQW9CLEVBQUUsYUFBdUI7UUFMakQsaUJBQVksR0FBd0IsSUFBSSwwQkFBbUIsRUFBRSxDQUFDO1FBTXBFLElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNyQyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7UUFDekMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7SUFDdEMsQ0FBQztJQUVELGdGQUFnRjtJQUNoRiw0QkFBNEI7SUFDckIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxrQkFBc0M7UUFDM0QsT0FBTyxrQkFBa0IsQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUM7SUFDMUQsQ0FBQztJQUVNLE9BQU87UUFDWixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTSxNQUFNLENBQUMsUUFBdUM7UUFDbkQsTUFBTSxFQUFFLHFCQUFxQixFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNyRCxNQUFNLENBQUMscUJBQXFCLElBQUksSUFBSSxDQUFDLENBQUM7UUFFdEMsSUFBSSxpQkFBMEMsQ0FBQztRQUMvQyxJQUFJLHFCQUFxQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUNuRixpQkFBaUIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQ25CLFFBQVEsQ0FBQztZQUNQLFFBQVEsRUFBRSxDQUFDO1lBQ1gsYUFBYSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ2xDLGlCQUFpQjtZQUNqQixnQkFBZ0IsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztTQUNuRCxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxvRUFBb0U7SUFDN0QsZ0JBQWdCLENBQUMsTUFBa0IsRUFBRSxLQUFZO1FBQ3RELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsaUJBQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuRyxDQUFDO0NBQ0Y7QUE3Q0QsdUNBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXRvbUlkZSBmcm9tICdhdG9tLWlkZSc7XG5pbXBvcnQgYXNzZXJ0ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XG5pbXBvcnQgQ29udmVydCBmcm9tICcuLi9jb252ZXJ0JztcbmltcG9ydCB7IEFjdGl2ZVNlcnZlciB9IGZyb20gJy4uL3NlcnZlci1tYW5hZ2VyJztcbmltcG9ydCB7XG4gIENvbXBvc2l0ZURpc3Bvc2FibGUsXG4gIFBvaW50LFxuICBUZXh0RWRpdG9yLFxufSBmcm9tICdhdG9tJztcbmltcG9ydCB7XG4gIExhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbixcbiAgU2VydmVyQ2FwYWJpbGl0aWVzLFxuICBTaWduYXR1cmVIZWxwLFxufSBmcm9tICcuLi9sYW5ndWFnZWNsaWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZ25hdHVyZUhlbHBBZGFwdGVyIHtcbiAgcHJpdmF0ZSBfZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xuICBwcml2YXRlIF9jb25uZWN0aW9uOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb247XG4gIHByaXZhdGUgX2NhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzO1xuICBwcml2YXRlIF9ncmFtbWFyU2NvcGVzOiBzdHJpbmdbXTtcblxuICBjb25zdHJ1Y3RvcihzZXJ2ZXI6IEFjdGl2ZVNlcnZlciwgZ3JhbW1hclNjb3Blczogc3RyaW5nW10pIHtcbiAgICB0aGlzLl9jb25uZWN0aW9uID0gc2VydmVyLmNvbm5lY3Rpb247XG4gICAgdGhpcy5fY2FwYWJpbGl0aWVzID0gc2VydmVyLmNhcGFiaWxpdGllcztcbiAgICB0aGlzLl9ncmFtbWFyU2NvcGVzID0gZ3JhbW1hclNjb3BlcztcbiAgfVxuXG4gIC8vIFJldHVybnMgYSB7Qm9vbGVhbn0gaW5kaWNhdGluZyB0aGlzIGFkYXB0ZXIgY2FuIGFkYXB0IHRoZSBzZXJ2ZXIgYmFzZWQgb24gdGhlXG4gIC8vIGdpdmVuIHNlcnZlckNhcGFiaWxpdGllcy5cbiAgcHVibGljIHN0YXRpYyBjYW5BZGFwdChzZXJ2ZXJDYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzZXJ2ZXJDYXBhYmlsaXRpZXMuc2lnbmF0dXJlSGVscFByb3ZpZGVyICE9IG51bGw7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5kaXNwb3NlKCk7XG4gIH1cblxuICBwdWJsaWMgYXR0YWNoKHJlZ2lzdGVyOiBhdG9tSWRlLlNpZ25hdHVyZUhlbHBSZWdpc3RyeSk6IHZvaWQge1xuICAgIGNvbnN0IHsgc2lnbmF0dXJlSGVscFByb3ZpZGVyIH0gPSB0aGlzLl9jYXBhYmlsaXRpZXM7XG4gICAgYXNzZXJ0KHNpZ25hdHVyZUhlbHBQcm92aWRlciAhPSBudWxsKTtcblxuICAgIGxldCB0cmlnZ2VyQ2hhcmFjdGVyczogU2V0PHN0cmluZz4gfCB1bmRlZmluZWQ7XG4gICAgaWYgKHNpZ25hdHVyZUhlbHBQcm92aWRlciAmJiBBcnJheS5pc0FycmF5KHNpZ25hdHVyZUhlbHBQcm92aWRlci50cmlnZ2VyQ2hhcmFjdGVycykpIHtcbiAgICAgIHRyaWdnZXJDaGFyYWN0ZXJzID0gbmV3IFNldChzaWduYXR1cmVIZWxwUHJvdmlkZXIudHJpZ2dlckNoYXJhY3RlcnMpO1xuICAgIH1cblxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmFkZChcbiAgICAgIHJlZ2lzdGVyKHtcbiAgICAgICAgcHJpb3JpdHk6IDEsXG4gICAgICAgIGdyYW1tYXJTY29wZXM6IHRoaXMuX2dyYW1tYXJTY29wZXMsXG4gICAgICAgIHRyaWdnZXJDaGFyYWN0ZXJzLFxuICAgICAgICBnZXRTaWduYXR1cmVIZWxwOiB0aGlzLmdldFNpZ25hdHVyZUhlbHAuYmluZCh0aGlzKSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICAvLyBQdWJsaWM6IFJldHJpZXZlcyBzaWduYXR1cmUgaGVscCBmb3IgYSBnaXZlbiBlZGl0b3IgYW5kIHBvc2l0aW9uLlxuICBwdWJsaWMgZ2V0U2lnbmF0dXJlSGVscChlZGl0b3I6IFRleHRFZGl0b3IsIHBvaW50OiBQb2ludCk6IFByb21pc2U8U2lnbmF0dXJlSGVscCB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5zaWduYXR1cmVIZWxwKENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyhlZGl0b3IsIHBvaW50KSk7XG4gIH1cbn1cbiJdfQ==