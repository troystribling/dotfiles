Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _atom = require('atom');

var _languageclient = require('../languageclient');

var _convert = require('../convert');

var _convert2 = _interopRequireDefault(_convert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class SignatureHelpAdapter {

  constructor(server, grammarScopes) {
    this._disposables = new _atom.CompositeDisposable();

    this._connection = server.connection;
    this._capabilities = server.capabilities;
    this._grammarScopes = grammarScopes;
  }

  // Returns a {Boolean} indicating this adapter can adapt the server based on the
  // given serverCapabilities.
  static canAdapt(serverCapabilities) {
    return serverCapabilities.signatureHelpProvider != null;
  }

  dispose() {
    this._disposables.dispose();
  }

  attach(register) {
    const { signatureHelpProvider } = this._capabilities;
    (0, _assert2.default)(signatureHelpProvider != null);

    let triggerCharacters = null;
    if (Array.isArray(signatureHelpProvider.triggerCharacters)) {
      triggerCharacters = new Set(signatureHelpProvider.triggerCharacters);
    }

    this._disposables.add(register({
      priority: 1,
      grammarScopes: this._grammarScopes,
      triggerCharacters,
      getSignatureHelp: this.getSignatureHelp.bind(this)
    }));
  }

  // Public: Retrieves signature help for a given editor and position.
  getSignatureHelp(editor, point) {
    return this._connection.signatureHelp(_convert2.default.editorToTextDocumentPositionParams(editor, point));
  }
}
exports.default = SignatureHelpAdapter;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGFwdGVycy9zaWduYXR1cmUtaGVscC1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbIlNpZ25hdHVyZUhlbHBBZGFwdGVyIiwiY29uc3RydWN0b3IiLCJzZXJ2ZXIiLCJncmFtbWFyU2NvcGVzIiwiX2Rpc3Bvc2FibGVzIiwiX2Nvbm5lY3Rpb24iLCJjb25uZWN0aW9uIiwiX2NhcGFiaWxpdGllcyIsImNhcGFiaWxpdGllcyIsIl9ncmFtbWFyU2NvcGVzIiwiY2FuQWRhcHQiLCJzZXJ2ZXJDYXBhYmlsaXRpZXMiLCJzaWduYXR1cmVIZWxwUHJvdmlkZXIiLCJkaXNwb3NlIiwiYXR0YWNoIiwicmVnaXN0ZXIiLCJ0cmlnZ2VyQ2hhcmFjdGVycyIsIkFycmF5IiwiaXNBcnJheSIsIlNldCIsImFkZCIsInByaW9yaXR5IiwiZ2V0U2lnbmF0dXJlSGVscCIsImJpbmQiLCJlZGl0b3IiLCJwb2ludCIsInNpZ25hdHVyZUhlbHAiLCJlZGl0b3JUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zIl0sIm1hcHBpbmdzIjoiOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBR2UsTUFBTUEsb0JBQU4sQ0FBMkI7O0FBTXhDQyxjQUFZQyxNQUFaLEVBQWtDQyxhQUFsQyxFQUFnRTtBQUFBLFNBTGhFQyxZQUtnRSxHQUw1QiwrQkFLNEI7O0FBQzlELFNBQUtDLFdBQUwsR0FBbUJILE9BQU9JLFVBQTFCO0FBQ0EsU0FBS0MsYUFBTCxHQUFxQkwsT0FBT00sWUFBNUI7QUFDQSxTQUFLQyxjQUFMLEdBQXNCTixhQUF0QjtBQUNEOztBQUVEO0FBQ0E7QUFDQSxTQUFPTyxRQUFQLENBQWdCQyxrQkFBaEIsRUFBaUU7QUFDL0QsV0FBT0EsbUJBQW1CQyxxQkFBbkIsSUFBNEMsSUFBbkQ7QUFDRDs7QUFFREMsWUFBVTtBQUNSLFNBQUtULFlBQUwsQ0FBa0JTLE9BQWxCO0FBQ0Q7O0FBRURDLFNBQU9DLFFBQVAsRUFBc0Q7QUFDcEQsVUFBTSxFQUFDSCxxQkFBRCxLQUEwQixLQUFLTCxhQUFyQztBQUNBLDBCQUFVSyx5QkFBeUIsSUFBbkM7O0FBRUEsUUFBSUksb0JBQW9CLElBQXhCO0FBQ0EsUUFBSUMsTUFBTUMsT0FBTixDQUFjTixzQkFBc0JJLGlCQUFwQyxDQUFKLEVBQTREO0FBQzFEQSwwQkFBb0IsSUFBSUcsR0FBSixDQUFRUCxzQkFBc0JJLGlCQUE5QixDQUFwQjtBQUNEOztBQUVELFNBQUtaLFlBQUwsQ0FBa0JnQixHQUFsQixDQUNFTCxTQUFTO0FBQ1BNLGdCQUFVLENBREg7QUFFUGxCLHFCQUFlLEtBQUtNLGNBRmI7QUFHUE8sdUJBSE87QUFJUE0sd0JBQWtCLEtBQUtBLGdCQUFMLENBQXNCQyxJQUF0QixDQUEyQixJQUEzQjtBQUpYLEtBQVQsQ0FERjtBQVFEOztBQUVEO0FBQ0FELG1CQUFpQkUsTUFBakIsRUFBMENDLEtBQTFDLEVBQThGO0FBQzVGLFdBQU8sS0FBS3BCLFdBQUwsQ0FBaUJxQixhQUFqQixDQUErQixrQkFBUUMsa0NBQVIsQ0FBMkNILE1BQTNDLEVBQW1EQyxLQUFuRCxDQUEvQixDQUFQO0FBQ0Q7QUE1Q3VDO2tCQUFyQnpCLG9CIiwiZmlsZSI6InNpZ25hdHVyZS1oZWxwLWFkYXB0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IGludmFyaWFudCBmcm9tICdhc3NlcnQnO1xyXG5pbXBvcnQge0NvbXBvc2l0ZURpc3Bvc2FibGV9IGZyb20gJ2F0b20nO1xyXG5pbXBvcnQge0xhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbiwgdHlwZSBTZXJ2ZXJDYXBhYmlsaXRpZXN9IGZyb20gJy4uL2xhbmd1YWdlY2xpZW50JztcclxuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vY29udmVydCc7XHJcbmltcG9ydCB0eXBlIHtBY3RpdmVTZXJ2ZXJ9IGZyb20gJy4uL3NlcnZlci1tYW5hZ2VyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZ25hdHVyZUhlbHBBZGFwdGVyIHtcclxuICBfZGlzcG9zYWJsZXM6IENvbXBvc2l0ZURpc3Bvc2FibGUgPSBuZXcgQ29tcG9zaXRlRGlzcG9zYWJsZSgpO1xyXG4gIF9jb25uZWN0aW9uOiBMYW5ndWFnZUNsaWVudENvbm5lY3Rpb247XHJcbiAgX2NhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzO1xyXG4gIF9ncmFtbWFyU2NvcGVzOiBBcnJheTxzdHJpbmc+O1xyXG5cclxuICBjb25zdHJ1Y3RvcihzZXJ2ZXI6IEFjdGl2ZVNlcnZlciwgZ3JhbW1hclNjb3BlczogQXJyYXk8c3RyaW5nPikge1xyXG4gICAgdGhpcy5fY29ubmVjdGlvbiA9IHNlcnZlci5jb25uZWN0aW9uO1xyXG4gICAgdGhpcy5fY2FwYWJpbGl0aWVzID0gc2VydmVyLmNhcGFiaWxpdGllcztcclxuICAgIHRoaXMuX2dyYW1tYXJTY29wZXMgPSBncmFtbWFyU2NvcGVzO1xyXG4gIH1cclxuXHJcbiAgLy8gUmV0dXJucyBhIHtCb29sZWFufSBpbmRpY2F0aW5nIHRoaXMgYWRhcHRlciBjYW4gYWRhcHQgdGhlIHNlcnZlciBiYXNlZCBvbiB0aGVcclxuICAvLyBnaXZlbiBzZXJ2ZXJDYXBhYmlsaXRpZXMuXHJcbiAgc3RhdGljIGNhbkFkYXB0KHNlcnZlckNhcGFiaWxpdGllczogU2VydmVyQ2FwYWJpbGl0aWVzKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gc2VydmVyQ2FwYWJpbGl0aWVzLnNpZ25hdHVyZUhlbHBQcm92aWRlciAhPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgZGlzcG9zZSgpIHtcclxuICAgIHRoaXMuX2Rpc3Bvc2FibGVzLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIGF0dGFjaChyZWdpc3RlcjogYXRvbUlkZSRTaWduYXR1cmVIZWxwUmVnaXN0cnkpOiB2b2lkIHtcclxuICAgIGNvbnN0IHtzaWduYXR1cmVIZWxwUHJvdmlkZXJ9ID0gdGhpcy5fY2FwYWJpbGl0aWVzO1xyXG4gICAgaW52YXJpYW50KHNpZ25hdHVyZUhlbHBQcm92aWRlciAhPSBudWxsKTtcclxuXHJcbiAgICBsZXQgdHJpZ2dlckNoYXJhY3RlcnMgPSBudWxsO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2lnbmF0dXJlSGVscFByb3ZpZGVyLnRyaWdnZXJDaGFyYWN0ZXJzKSkge1xyXG4gICAgICB0cmlnZ2VyQ2hhcmFjdGVycyA9IG5ldyBTZXQoc2lnbmF0dXJlSGVscFByb3ZpZGVyLnRyaWdnZXJDaGFyYWN0ZXJzKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9kaXNwb3NhYmxlcy5hZGQoXHJcbiAgICAgIHJlZ2lzdGVyKHtcclxuICAgICAgICBwcmlvcml0eTogMSxcclxuICAgICAgICBncmFtbWFyU2NvcGVzOiB0aGlzLl9ncmFtbWFyU2NvcGVzLFxyXG4gICAgICAgIHRyaWdnZXJDaGFyYWN0ZXJzLFxyXG4gICAgICAgIGdldFNpZ25hdHVyZUhlbHA6IHRoaXMuZ2V0U2lnbmF0dXJlSGVscC5iaW5kKHRoaXMpLFxyXG4gICAgICB9KSxcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvLyBQdWJsaWM6IFJldHJpZXZlcyBzaWduYXR1cmUgaGVscCBmb3IgYSBnaXZlbiBlZGl0b3IgYW5kIHBvc2l0aW9uLlxyXG4gIGdldFNpZ25hdHVyZUhlbHAoZWRpdG9yOiBhdG9tJFRleHRFZGl0b3IsIHBvaW50OiBhdG9tJFBvaW50KTogUHJvbWlzZTw/YXRvbUlkZSRTaWduYXR1cmVIZWxwPiB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29ubmVjdGlvbi5zaWduYXR1cmVIZWxwKENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyhlZGl0b3IsIHBvaW50KSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==