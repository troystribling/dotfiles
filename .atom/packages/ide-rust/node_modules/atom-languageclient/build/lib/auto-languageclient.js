Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _net = require('net');

var net = _interopRequireWildcard(_net);

var _languageclient = require('./languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _vscodeJsonrpc = require('vscode-jsonrpc');

var rpc = _interopRequireWildcard(_vscodeJsonrpc);

var _atom = require('atom');

var _logger = require('./logger');

var _serverManager = require('./server-manager.js');

var _autocompleteAdapter = require('./adapters/autocomplete-adapter');

var _autocompleteAdapter2 = _interopRequireDefault(_autocompleteAdapter);

var _codeFormatAdapter = require('./adapters/code-format-adapter');

var _codeFormatAdapter2 = _interopRequireDefault(_codeFormatAdapter);

var _datatipAdapter = require('./adapters/datatip-adapter');

var _datatipAdapter2 = _interopRequireDefault(_datatipAdapter);

var _definitionAdapter = require('./adapters/definition-adapter');

var _definitionAdapter2 = _interopRequireDefault(_definitionAdapter);

var _documentSyncAdapter = require('./adapters/document-sync-adapter');

var _documentSyncAdapter2 = _interopRequireDefault(_documentSyncAdapter);

var _findReferencesAdapter = require('./adapters/find-references-adapter');

var _findReferencesAdapter2 = _interopRequireDefault(_findReferencesAdapter);

var _linterPushV2Adapter = require('./adapters/linter-push-v2-adapter');

var _linterPushV2Adapter2 = _interopRequireDefault(_linterPushV2Adapter);

var _notificationsAdapter = require('./adapters/notifications-adapter');

var _notificationsAdapter2 = _interopRequireDefault(_notificationsAdapter);

var _outlineViewAdapter = require('./adapters/outline-view-adapter');

var _outlineViewAdapter2 = _interopRequireDefault(_outlineViewAdapter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Public: AutoLanguageClient provides a simple way to have all the supported
// Atom-IDE services wired up entirely for you by just subclassing it and
// implementing startServerProcess/getGrammarScopes/getLanguageName and
// getServerName.
let AutoLanguageClient = class AutoLanguageClient {
  constructor() {
    this._disposable = new _atom.CompositeDisposable();
  }

  // Shared adapters that can take the RPC connection as required


  // You must implement these so we know how to deal with your language and server
  // -------------------------------------------------------------------------

  // Return an array of the grammar scopes you handle, e.g. [ 'source.js' ]
  getGrammarScopes() {
    throw Error('Must implement getGrammarScopes when extending AutoLanguageClient');
  }

  // Return the name of the language you support, e.g. 'JavaScript'
  getLanguageName() {
    throw Error('Must implement getLanguageName when extending AutoLanguageClient');
  }

  // Return the name of your server, e.g. 'Eclipse JDT'
  getServerName() {
    throw Error('Must implement getServerName when extending AutoLanguageClient');
  }

  // Start your server process
  startServerProcess(projectPath) {
    throw Error('Must override startServerProcess to start language server process when extending AutoLanguageClient');
  }

  // You might want to override these for different behavior
  // ---------------------------------------------------------------------------

  // Determine whether we should start a server for a given editor if we don't have one yet
  shouldStartForEditor(editor) {
    return this.getGrammarScopes().includes(editor.getGrammar().scopeName);
  }

  // Return the parameters used to initialize a client - you may want to extend capabilities
  getInitializeParams(projectPath, process) {
    return {
      processId: process.pid,
      capabilities: {},
      rootPath: projectPath
    };
  }

  // Early wire-up of listeners before initialize method is sent
  preInitialization(connection) {}

  // Late wire-up of listeners after initialize method has been sent
  postInitialization(initializationResult) {}

  // Determine whether to use ipc, stdio or socket to connect to the server
  getConnectionType() {
    const hasSocket = this.socket != null;
    return hasSocket ? 'socket' : 'stdio';
  }

  // Default implementation of the rest of the AutoLanguageClient
  // ---------------------------------------------------------------------------

  // Activate does very little for perf reasons - hooks in via ServerManager for later 'activation'
  activate() {
    this.name = `${this.getLanguageName()} (${this.getServerName()})`;
    this.logger = this.getLogger();
    this._serverManager = new _serverManager.ServerManager(p => this.startServer(p), this.logger, e => this.shouldStartForEditor(e));
  }

  // Deactivate disposes the resources we're using
  deactivate() {
    this._disposable.dispose();
    this._serverManager.dispose();
  }

  // By default LSP logging is switched off but you can switch it on via the core.debugLSP setting
  getLogger() {
    return atom.config.get('core.debugLSP') ? new _logger.ConsoleLogger(this.name) : new _logger.NullLogger();
  }

  // Starts the server by starting the process, then initializing the language server and starting adapters
  startServer(projectPath) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const process = yield _this.startServerProcess(projectPath);
      const connection = new ls.LanguageClientConnection(_this.createRpcConnection(process), _this.logger);
      _this.preInitialization(connection);
      const initializeParams = _this.getInitializeParams(projectPath, process);
      const initializeResponse = yield connection.initialize(initializeParams);
      const newServer = {
        projectPath,
        process,
        connection,
        capabilities: initializeResponse.capabilities,
        disposable: new _atom.CompositeDisposable()
      };
      _this.postInitialization(newServer);
      _this.startExclusiveAdapters(newServer);
      return newServer;
    })();
  }

  // Creates the RPC connection which can be ipc, socket or stdio
  createRpcConnection(process) {
    let reader, writer;
    const connectionType = this.getConnectionType();

    switch (connectionType) {
      case 'ipc':
        reader = new rpc.IPCMessageReader(process);
        writer = new rpc.IPCMessageWriter(process);
        break;
      case 'socket':
        reader = new rpc.SocketMessageReader(this.socket);
        writer = new rpc.SocketMessageWriter(this.socket);
        break;
      case 'stdio':
        reader = new rpc.StreamMessageReader(process.stdout);
        writer = new rpc.StreamMessageWriter(process.stdin);
        break;
      default:
        throw new Error(`Unknown RPC connection type '${connectionType}' - must be 'ipc', 'socket' or 'stdio'`);
    }
    return rpc.createMessageConnection(reader, writer, { error: m => {
        this.logger.error(m);
      } });
  }

  // Start adapters that are not shared between servers
  startExclusiveAdapters(server) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _notificationsAdapter2.default.attach(server.connection, _this2.name);

      if (_documentSyncAdapter2.default.canAdapt(server.capabilities)) {
        server.disposable.add(new _documentSyncAdapter2.default(server.connection, server.capabilities.textDocumentSync, function (editor) {
          return _this2.shouldSyncForEditor(editor, server.projectPath);
        }));
      }

      server.linterPushV2 = new _linterPushV2Adapter2.default(server.connection);
      if (_this2._linterDelegate != null) {
        server.linterPushV2.attach(_this2._linterDelegate);
      }
    })();
  }

  shouldSyncForEditor(editor, projectPath) {
    return this.isFileInProject(editor, projectPath) && this.shouldStartForEditor(editor);
  }

  isFileInProject(editor, projectPath) {
    return (editor.getURI() || '').startsWith(projectPath);
  }

  // Atom Autocomplete+ via LS completion---------------------------------------
  provideAutocomplete() {
    return {
      selector: this.getGrammarScopes().map(g => '.' + g).join(', '),
      excludeLowerPriority: false,
      getSuggestions: this.getSuggestions.bind(this)
    };
  }

  getSuggestions(request) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const server = yield _this3._serverManager.getServer(request.editor);
      if (server == null || !_autocompleteAdapter2.default.canAdapt(server.capabilities)) {
        return [];
      }

      _this3.autoComplete = _this3.autoComplete || new _autocompleteAdapter2.default();
      return _this3.autoComplete.getSuggestions(server.connection, request);
    })();
  }

  // Definitions via LS documentHighlight and gotoDefinition------------
  provideDefinitions() {
    return {
      name: this.name,
      priority: 20,
      grammarScopes: this.getGrammarScopes(),
      getDefinition: this.getDefinition.bind(this)
    };
  }

  getDefinition(editor, point) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const server = yield _this4._serverManager.getServer(editor);
      if (server == null || !_definitionAdapter2.default.canAdapt(server.capabilities)) {
        return null;
      }

      _this4.definitions = _this4.definitions || new _definitionAdapter2.default();
      return _this4.definitions.getDefinition(server.connection, server.capabilities, _this4.getLanguageName(), editor, point);
    })();
  }

  // Outline View via LS documentSymbol---------------------------------
  provideOutlines() {
    return {
      name: this.name,
      grammarScopes: this.getGrammarScopes(),
      priority: 1,
      getOutline: this.getOutline.bind(this)
    };
  }

  getOutline(editor) {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      const server = yield _this5._serverManager.getServer(editor);
      if (server == null || !_outlineViewAdapter2.default.canAdapt(server.capabilities)) {
        return null;
      }

      _this5.outlineView = _this5.outlineView || new _outlineViewAdapter2.default();
      return _this5.outlineView.getOutline(server.connection, editor);
    })();
  }

  // Linter push v2 API via LS publishDiagnostics
  consumeLinterV2(registerIndie) {
    this._linterDelegate = registerIndie({ name: this.name });
    if (this._linterDelegate == null) return;

    for (var server of this._serverManager.getActiveServers()) {
      if (server.linterPushV2 != null) {
        server.linterPushV2.attach(this._linterDelegate);
      }
    }
  }

  // Find References via LS findReferences------------------------------
  provideFindReferences() {
    return {
      isEditorSupported: editor => this.getGrammarScopes().includes(editor.getGrammar().scopeName),
      findReferences: this.getReferences.bind(this)
    };
  }

  getReferences(editor, point) {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      const server = yield _this6._serverManager.getServer(editor);
      if (server == null || !_findReferencesAdapter2.default.canAdapt(server.capabilities)) {
        return null;
      }

      _this6.findReferences = _this6.findReferences || new _findReferencesAdapter2.default();
      return _this6.findReferences.getReferences(server.connection, editor, point, server.projectPath);
    })();
  }

  // Datatip via LS textDocument/hover----------------------------------
  consumeDatatip(service) {
    this._disposable.add(service.addProvider({
      providerName: this.name,
      priority: 1,
      grammarScopes: this.getGrammarScopes(),
      validForScope: scopeName => {
        return this.getGrammarScopes().includes(scopeName);
      },
      datatip: this.getDatatip.bind(this)
    }));
  }

  getDatatip(editor, point) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      const server = yield _this7._serverManager.getServer(editor);
      if (server == null || !_datatipAdapter2.default.canAdapt(server.capabilities)) {
        return null;
      }

      _this7.datatip = _this7.datatip || new _datatipAdapter2.default();
      return _this7.datatip.getDatatip(server.connection, editor, point);
    })();
  }

  // Code Format via LS formatDocument & formatDocumentRange------------
  provideCodeFormat() {
    return {
      selector: this.getGrammarScopes().join(', '),
      inclusionPriority: 1,
      formatCode: this.getCodeFormat.bind(this)
    };
  }

  getCodeFormat(editor, range) {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      const server = yield _this8._serverManager.getServer(editor);
      if (server == null || !_codeFormatAdapter2.default.canAdapt(server.capabilities)) {
        return [];
      }

      return _codeFormatAdapter2.default.format(server.connection, server.capabilities, editor, range);
    })();
  }
};
exports.default = AutoLanguageClient;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,