Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _atom = require('atom');

let Utils = class Utils {
  /**
   * Obtain the range of the word at the given editor position.
   * Uses the non-word characters from the position's grammar scope.
   */
  static getWordAtPosition(editor, position) {
    const scopeDescriptor = editor.scopeDescriptorForBufferPosition(position);
    const nonWordCharacters = Utils.escapeRegExp(editor.getNonWordCharacters(scopeDescriptor));
    const range = Utils._getRegexpRangeAtPosition(editor.getBuffer(), position, new RegExp(`^[\t ]*$|[^\\s${nonWordCharacters}]+`, 'g'));
    if (range == null) {
      return new _atom.Range(position, position);
    }
    return range;
  }

  static escapeRegExp(string) {
    // From atom/underscore-plus.
    return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  static _getRegexpRangeAtPosition(buffer, position, wordRegex) {
    const { row, column } = position;
    const rowRange = buffer.rangeForRow(row);
    let matchData;
    // Extract the expression from the row text.
    buffer.scanInRange(wordRegex, rowRange, data => {
      const { range } = data;
      if (position.isGreaterThanOrEqual(range.start) &&
      // Range endpoints are exclusive.
      position.isLessThan(range.end)) {
        matchData = data;
        data.stop();
        return;
      }
      // Stop the scan if the scanner has passed our position.
      if (range.end.column > column) {
        data.stop();
      }
    });
    return matchData == null ? null : matchData.range;
  }
};
exports.default = Utils;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJVdGlscyIsImdldFdvcmRBdFBvc2l0aW9uIiwiZWRpdG9yIiwicG9zaXRpb24iLCJzY29wZURlc2NyaXB0b3IiLCJzY29wZURlc2NyaXB0b3JGb3JCdWZmZXJQb3NpdGlvbiIsIm5vbldvcmRDaGFyYWN0ZXJzIiwiZXNjYXBlUmVnRXhwIiwiZ2V0Tm9uV29yZENoYXJhY3RlcnMiLCJyYW5nZSIsIl9nZXRSZWdleHBSYW5nZUF0UG9zaXRpb24iLCJnZXRCdWZmZXIiLCJSZWdFeHAiLCJzdHJpbmciLCJyZXBsYWNlIiwiYnVmZmVyIiwid29yZFJlZ2V4Iiwicm93IiwiY29sdW1uIiwicm93UmFuZ2UiLCJyYW5nZUZvclJvdyIsIm1hdGNoRGF0YSIsInNjYW5JblJhbmdlIiwiZGF0YSIsImlzR3JlYXRlclRoYW5PckVxdWFsIiwic3RhcnQiLCJpc0xlc3NUaGFuIiwiZW5kIiwic3RvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7SUFFcUJBLEssR0FBTixNQUFNQSxLQUFOLENBQVk7QUFDekI7Ozs7QUFJQSxTQUFPQyxpQkFBUCxDQUF5QkMsTUFBekIsRUFBNkNDLFFBQTdDLEVBQTBFO0FBQ3hFLFVBQU1DLGtCQUFrQkYsT0FBT0csZ0NBQVAsQ0FBd0NGLFFBQXhDLENBQXhCO0FBQ0EsVUFBTUcsb0JBQW9CTixNQUFNTyxZQUFOLENBQ3hCTCxPQUFPTSxvQkFBUCxDQUE0QkosZUFBNUIsQ0FEd0IsQ0FBMUI7QUFHQSxVQUFNSyxRQUFRVCxNQUFNVSx5QkFBTixDQUNaUixPQUFPUyxTQUFQLEVBRFksRUFFWlIsUUFGWSxFQUdaLElBQUlTLE1BQUosQ0FBWSxpQkFBZ0JOLGlCQUFrQixJQUE5QyxFQUFtRCxHQUFuRCxDQUhZLENBQWQ7QUFLQSxRQUFJRyxTQUFTLElBQWIsRUFBbUI7QUFDakIsYUFBTyxnQkFBVU4sUUFBVixFQUFvQkEsUUFBcEIsQ0FBUDtBQUNEO0FBQ0QsV0FBT00sS0FBUDtBQUNEOztBQUVELFNBQU9GLFlBQVAsQ0FBb0JNLE1BQXBCLEVBQTRDO0FBQzFDO0FBQ0EsV0FBT0EsT0FBT0MsT0FBUCxDQUFlLHVCQUFmLEVBQXdDLE1BQXhDLENBQVA7QUFDRDs7QUFFRCxTQUFPSix5QkFBUCxDQUNFSyxNQURGLEVBRUVaLFFBRkYsRUFHRWEsU0FIRixFQUlVO0FBQ1IsVUFBTSxFQUFDQyxHQUFELEVBQU1DLE1BQU4sS0FBZ0JmLFFBQXRCO0FBQ0EsVUFBTWdCLFdBQVdKLE9BQU9LLFdBQVAsQ0FBbUJILEdBQW5CLENBQWpCO0FBQ0EsUUFBSUksU0FBSjtBQUNBO0FBQ0FOLFdBQU9PLFdBQVAsQ0FBbUJOLFNBQW5CLEVBQThCRyxRQUE5QixFQUF3Q0ksUUFBUTtBQUM5QyxZQUFNLEVBQUNkLEtBQUQsS0FBVWMsSUFBaEI7QUFDQSxVQUNFcEIsU0FBU3FCLG9CQUFULENBQThCZixNQUFNZ0IsS0FBcEM7QUFDQTtBQUNBdEIsZUFBU3VCLFVBQVQsQ0FBb0JqQixNQUFNa0IsR0FBMUIsQ0FIRixFQUlFO0FBQ0FOLG9CQUFZRSxJQUFaO0FBQ0FBLGFBQUtLLElBQUw7QUFDQTtBQUNEO0FBQ0Q7QUFDQSxVQUFJbkIsTUFBTWtCLEdBQU4sQ0FBVVQsTUFBVixHQUFtQkEsTUFBdkIsRUFBK0I7QUFDN0JLLGFBQUtLLElBQUw7QUFDRDtBQUNGLEtBZkQ7QUFnQkEsV0FBT1AsYUFBYSxJQUFiLEdBQW9CLElBQXBCLEdBQTJCQSxVQUFVWixLQUE1QztBQUNEO0FBcER3QixDO2tCQUFOVCxLIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHtSYW5nZX0gZnJvbSAnYXRvbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFV0aWxzIHtcbiAgLyoqXG4gICAqIE9idGFpbiB0aGUgcmFuZ2Ugb2YgdGhlIHdvcmQgYXQgdGhlIGdpdmVuIGVkaXRvciBwb3NpdGlvbi5cbiAgICogVXNlcyB0aGUgbm9uLXdvcmQgY2hhcmFjdGVycyBmcm9tIHRoZSBwb3NpdGlvbidzIGdyYW1tYXIgc2NvcGUuXG4gICAqL1xuICBzdGF0aWMgZ2V0V29yZEF0UG9zaXRpb24oZWRpdG9yOiBUZXh0RWRpdG9yLCBwb3NpdGlvbjogYXRvbSRQb2ludCk6IFJhbmdlIHtcbiAgICBjb25zdCBzY29wZURlc2NyaXB0b3IgPSBlZGl0b3Iuc2NvcGVEZXNjcmlwdG9yRm9yQnVmZmVyUG9zaXRpb24ocG9zaXRpb24pO1xuICAgIGNvbnN0IG5vbldvcmRDaGFyYWN0ZXJzID0gVXRpbHMuZXNjYXBlUmVnRXhwKFxuICAgICAgZWRpdG9yLmdldE5vbldvcmRDaGFyYWN0ZXJzKHNjb3BlRGVzY3JpcHRvciksXG4gICAgKTtcbiAgICBjb25zdCByYW5nZSA9IFV0aWxzLl9nZXRSZWdleHBSYW5nZUF0UG9zaXRpb24oXG4gICAgICBlZGl0b3IuZ2V0QnVmZmVyKCksXG4gICAgICBwb3NpdGlvbixcbiAgICAgIG5ldyBSZWdFeHAoYF5bXFx0IF0qJHxbXlxcXFxzJHtub25Xb3JkQ2hhcmFjdGVyc31dK2AsICdnJyksXG4gICAgKTtcbiAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5ldyBSYW5nZShwb3NpdGlvbiwgcG9zaXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cblxuICBzdGF0aWMgZXNjYXBlUmVnRXhwKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAvLyBGcm9tIGF0b20vdW5kZXJzY29yZS1wbHVzLlxuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvWy0vXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuICB9XG5cbiAgc3RhdGljIF9nZXRSZWdleHBSYW5nZUF0UG9zaXRpb24oXG4gICAgYnVmZmVyOiBhdG9tJFRleHRCdWZmZXIsXG4gICAgcG9zaXRpb246IGF0b20kUG9pbnQsXG4gICAgd29yZFJlZ2V4OiBSZWdFeHAsXG4gICk6ID9SYW5nZSB7XG4gICAgY29uc3Qge3JvdywgY29sdW1ufSA9IHBvc2l0aW9uO1xuICAgIGNvbnN0IHJvd1JhbmdlID0gYnVmZmVyLnJhbmdlRm9yUm93KHJvdyk7XG4gICAgbGV0IG1hdGNoRGF0YTtcbiAgICAvLyBFeHRyYWN0IHRoZSBleHByZXNzaW9uIGZyb20gdGhlIHJvdyB0ZXh0LlxuICAgIGJ1ZmZlci5zY2FuSW5SYW5nZSh3b3JkUmVnZXgsIHJvd1JhbmdlLCBkYXRhID0+IHtcbiAgICAgIGNvbnN0IHtyYW5nZX0gPSBkYXRhO1xuICAgICAgaWYgKFxuICAgICAgICBwb3NpdGlvbi5pc0dyZWF0ZXJUaGFuT3JFcXVhbChyYW5nZS5zdGFydCkgJiZcbiAgICAgICAgLy8gUmFuZ2UgZW5kcG9pbnRzIGFyZSBleGNsdXNpdmUuXG4gICAgICAgIHBvc2l0aW9uLmlzTGVzc1RoYW4ocmFuZ2UuZW5kKVxuICAgICAgKSB7XG4gICAgICAgIG1hdGNoRGF0YSA9IGRhdGE7XG4gICAgICAgIGRhdGEuc3RvcCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBTdG9wIHRoZSBzY2FuIGlmIHRoZSBzY2FubmVyIGhhcyBwYXNzZWQgb3VyIHBvc2l0aW9uLlxuICAgICAgaWYgKHJhbmdlLmVuZC5jb2x1bW4gPiBjb2x1bW4pIHtcbiAgICAgICAgZGF0YS5zdG9wKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG1hdGNoRGF0YSA9PSBudWxsID8gbnVsbCA6IG1hdGNoRGF0YS5yYW5nZTtcbiAgfVxufVxuIl19