Object.defineProperty(exports, "__esModule", {
  value: true
});

var _atom = require('atom');

class Utils {
  /**
   * Obtain the range of the word at the given editor position.
   * Uses the non-word characters from the position's grammar scope.
   */
  static getWordAtPosition(editor, position) {
    const scopeDescriptor = editor.scopeDescriptorForBufferPosition(position);
    const nonWordCharacters = Utils.escapeRegExp(editor.getNonWordCharacters(scopeDescriptor));
    const range = Utils._getRegexpRangeAtPosition(editor.getBuffer(), position, new RegExp(`^[\t ]*$|[^\\s${nonWordCharacters}]+`, 'g'));
    if (range == null) {
      return new _atom.Range(position, position);
    }
    return range;
  }

  static escapeRegExp(string) {
    // From atom/underscore-plus.
    return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  static _getRegexpRangeAtPosition(buffer, position, wordRegex) {
    const { row, column } = position;
    const rowRange = buffer.rangeForRow(row);
    let matchData;
    // Extract the expression from the row text.
    buffer.scanInRange(wordRegex, rowRange, data => {
      const { range } = data;
      if (position.isGreaterThanOrEqual(range.start) &&
      // Range endpoints are exclusive.
      position.isLessThan(range.end)) {
        matchData = data;
        data.stop();
        return;
      }
      // Stop the scan if the scanner has passed our position.
      if (range.end.column > column) {
        data.stop();
      }
    });
    return matchData == null ? null : matchData.range;
  }
}
exports.default = Utils;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi91dGlscy5qcyJdLCJuYW1lcyI6WyJVdGlscyIsImdldFdvcmRBdFBvc2l0aW9uIiwiZWRpdG9yIiwicG9zaXRpb24iLCJzY29wZURlc2NyaXB0b3IiLCJzY29wZURlc2NyaXB0b3JGb3JCdWZmZXJQb3NpdGlvbiIsIm5vbldvcmRDaGFyYWN0ZXJzIiwiZXNjYXBlUmVnRXhwIiwiZ2V0Tm9uV29yZENoYXJhY3RlcnMiLCJyYW5nZSIsIl9nZXRSZWdleHBSYW5nZUF0UG9zaXRpb24iLCJnZXRCdWZmZXIiLCJSZWdFeHAiLCJzdHJpbmciLCJyZXBsYWNlIiwiYnVmZmVyIiwid29yZFJlZ2V4Iiwicm93IiwiY29sdW1uIiwicm93UmFuZ2UiLCJyYW5nZUZvclJvdyIsIm1hdGNoRGF0YSIsInNjYW5JblJhbmdlIiwiZGF0YSIsImlzR3JlYXRlclRoYW5PckVxdWFsIiwic3RhcnQiLCJpc0xlc3NUaGFuIiwiZW5kIiwic3RvcCJdLCJtYXBwaW5ncyI6Ijs7OztBQUVBOztBQUVlLE1BQU1BLEtBQU4sQ0FBWTtBQUN6Qjs7OztBQUlBLFNBQU9DLGlCQUFQLENBQXlCQyxNQUF6QixFQUE2Q0MsUUFBN0MsRUFBMEU7QUFDeEUsVUFBTUMsa0JBQWtCRixPQUFPRyxnQ0FBUCxDQUF3Q0YsUUFBeEMsQ0FBeEI7QUFDQSxVQUFNRyxvQkFBb0JOLE1BQU1PLFlBQU4sQ0FBbUJMLE9BQU9NLG9CQUFQLENBQTRCSixlQUE1QixDQUFuQixDQUExQjtBQUNBLFVBQU1LLFFBQVFULE1BQU1VLHlCQUFOLENBQ1pSLE9BQU9TLFNBQVAsRUFEWSxFQUVaUixRQUZZLEVBR1osSUFBSVMsTUFBSixDQUFZLGlCQUFnQk4saUJBQWtCLElBQTlDLEVBQW1ELEdBQW5ELENBSFksQ0FBZDtBQUtBLFFBQUlHLFNBQVMsSUFBYixFQUFtQjtBQUNqQixhQUFPLGdCQUFVTixRQUFWLEVBQW9CQSxRQUFwQixDQUFQO0FBQ0Q7QUFDRCxXQUFPTSxLQUFQO0FBQ0Q7O0FBRUQsU0FBT0YsWUFBUCxDQUFvQk0sTUFBcEIsRUFBNEM7QUFDMUM7QUFDQSxXQUFPQSxPQUFPQyxPQUFQLENBQWUsdUJBQWYsRUFBd0MsTUFBeEMsQ0FBUDtBQUNEOztBQUVELFNBQU9KLHlCQUFQLENBQWlDSyxNQUFqQyxFQUEwRFosUUFBMUQsRUFBZ0ZhLFNBQWhGLEVBQTJHO0FBQ3pHLFVBQU0sRUFBQ0MsR0FBRCxFQUFNQyxNQUFOLEtBQWdCZixRQUF0QjtBQUNBLFVBQU1nQixXQUFXSixPQUFPSyxXQUFQLENBQW1CSCxHQUFuQixDQUFqQjtBQUNBLFFBQUlJLFNBQUo7QUFDQTtBQUNBTixXQUFPTyxXQUFQLENBQW1CTixTQUFuQixFQUE4QkcsUUFBOUIsRUFBd0NJLFFBQVE7QUFDOUMsWUFBTSxFQUFDZCxLQUFELEtBQVVjLElBQWhCO0FBQ0EsVUFDRXBCLFNBQVNxQixvQkFBVCxDQUE4QmYsTUFBTWdCLEtBQXBDO0FBQ0E7QUFDQXRCLGVBQVN1QixVQUFULENBQW9CakIsTUFBTWtCLEdBQTFCLENBSEYsRUFJRTtBQUNBTixvQkFBWUUsSUFBWjtBQUNBQSxhQUFLSyxJQUFMO0FBQ0E7QUFDRDtBQUNEO0FBQ0EsVUFBSW5CLE1BQU1rQixHQUFOLENBQVVULE1BQVYsR0FBbUJBLE1BQXZCLEVBQStCO0FBQzdCSyxhQUFLSyxJQUFMO0FBQ0Q7QUFDRixLQWZEO0FBZ0JBLFdBQU9QLGFBQWEsSUFBYixHQUFvQixJQUFwQixHQUEyQkEsVUFBVVosS0FBNUM7QUFDRDtBQTlDd0I7a0JBQU5ULEsiLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IHtSYW5nZX0gZnJvbSAnYXRvbSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XHJcbiAgLyoqXHJcbiAgICogT2J0YWluIHRoZSByYW5nZSBvZiB0aGUgd29yZCBhdCB0aGUgZ2l2ZW4gZWRpdG9yIHBvc2l0aW9uLlxyXG4gICAqIFVzZXMgdGhlIG5vbi13b3JkIGNoYXJhY3RlcnMgZnJvbSB0aGUgcG9zaXRpb24ncyBncmFtbWFyIHNjb3BlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBnZXRXb3JkQXRQb3NpdGlvbihlZGl0b3I6IFRleHRFZGl0b3IsIHBvc2l0aW9uOiBhdG9tJFBvaW50KTogUmFuZ2Uge1xyXG4gICAgY29uc3Qgc2NvcGVEZXNjcmlwdG9yID0gZWRpdG9yLnNjb3BlRGVzY3JpcHRvckZvckJ1ZmZlclBvc2l0aW9uKHBvc2l0aW9uKTtcclxuICAgIGNvbnN0IG5vbldvcmRDaGFyYWN0ZXJzID0gVXRpbHMuZXNjYXBlUmVnRXhwKGVkaXRvci5nZXROb25Xb3JkQ2hhcmFjdGVycyhzY29wZURlc2NyaXB0b3IpKTtcclxuICAgIGNvbnN0IHJhbmdlID0gVXRpbHMuX2dldFJlZ2V4cFJhbmdlQXRQb3NpdGlvbihcclxuICAgICAgZWRpdG9yLmdldEJ1ZmZlcigpLFxyXG4gICAgICBwb3NpdGlvbixcclxuICAgICAgbmV3IFJlZ0V4cChgXltcXHQgXSokfFteXFxcXHMke25vbldvcmRDaGFyYWN0ZXJzfV0rYCwgJ2cnKSxcclxuICAgICk7XHJcbiAgICBpZiAocmFuZ2UgPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gbmV3IFJhbmdlKHBvc2l0aW9uLCBwb3NpdGlvbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmFuZ2U7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZXNjYXBlUmVnRXhwKHN0cmluZzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIC8vIEZyb20gYXRvbS91bmRlcnNjb3JlLXBsdXMuXHJcbiAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1stL1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBfZ2V0UmVnZXhwUmFuZ2VBdFBvc2l0aW9uKGJ1ZmZlcjogYXRvbSRUZXh0QnVmZmVyLCBwb3NpdGlvbjogYXRvbSRQb2ludCwgd29yZFJlZ2V4OiBSZWdFeHApOiA/UmFuZ2Uge1xyXG4gICAgY29uc3Qge3JvdywgY29sdW1ufSA9IHBvc2l0aW9uO1xyXG4gICAgY29uc3Qgcm93UmFuZ2UgPSBidWZmZXIucmFuZ2VGb3JSb3cocm93KTtcclxuICAgIGxldCBtYXRjaERhdGE7XHJcbiAgICAvLyBFeHRyYWN0IHRoZSBleHByZXNzaW9uIGZyb20gdGhlIHJvdyB0ZXh0LlxyXG4gICAgYnVmZmVyLnNjYW5JblJhbmdlKHdvcmRSZWdleCwgcm93UmFuZ2UsIGRhdGEgPT4ge1xyXG4gICAgICBjb25zdCB7cmFuZ2V9ID0gZGF0YTtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHBvc2l0aW9uLmlzR3JlYXRlclRoYW5PckVxdWFsKHJhbmdlLnN0YXJ0KSAmJlxyXG4gICAgICAgIC8vIFJhbmdlIGVuZHBvaW50cyBhcmUgZXhjbHVzaXZlLlxyXG4gICAgICAgIHBvc2l0aW9uLmlzTGVzc1RoYW4ocmFuZ2UuZW5kKVxyXG4gICAgICApIHtcclxuICAgICAgICBtYXRjaERhdGEgPSBkYXRhO1xyXG4gICAgICAgIGRhdGEuc3RvcCgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICAvLyBTdG9wIHRoZSBzY2FuIGlmIHRoZSBzY2FubmVyIGhhcyBwYXNzZWQgb3VyIHBvc2l0aW9uLlxyXG4gICAgICBpZiAocmFuZ2UuZW5kLmNvbHVtbiA+IGNvbHVtbikge1xyXG4gICAgICAgIGRhdGEuc3RvcCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBtYXRjaERhdGEgPT0gbnVsbCA/IG51bGwgOiBtYXRjaERhdGEucmFuZ2U7XHJcbiAgfVxyXG59XHJcbiJdfQ==