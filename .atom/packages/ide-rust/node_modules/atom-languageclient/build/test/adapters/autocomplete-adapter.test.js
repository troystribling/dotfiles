var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _autocompleteAdapter = require('../../lib/adapters/autocomplete-adapter');

var _autocompleteAdapter2 = _interopRequireDefault(_autocompleteAdapter);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _atom = require('atom');

var _chai = require('chai');

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('AutoCompleteAdapter', () => {
  beforeEach(() => {
    global.sinon = _sinon2.default.sandbox.create();
  });
  afterEach(() => {
    global.sinon.restore();
  });

  const request = {
    editor: (0, _helpers.createFakeEditor)(),
    bufferPosition: new _atom.Point(123, 456),
    prefix: 'def',
    scopeDescriptor: 'some.scope'
  };

  const completionItems = [{
    label: 'label1',
    kind: ls.CompletionItemKind.Keyword,
    detail: 'description1',
    documentation: 'a very exciting keyword',
    sortText: 'z'
  }, {
    label: 'label2',
    kind: ls.CompletionItemKind.Field,
    detail: 'description2',
    documentation: 'a very exciting field',
    sortText: 'a'
  }, {
    label: 'label3',
    kind: ls.CompletionItemKind.Variable,
    detail: 'description3',
    documentation: 'a very exciting variable'
  }];

  describe('getSuggestions', () => {
    const fakeLanguageClient = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    _sinon2.default.stub(fakeLanguageClient, 'completion').resolves(completionItems);

    it('gets AutoComplete suggestions via LSP given an AutoCompleteRequest', async () => {
      const autoCompleteAdapter = new _autocompleteAdapter2.default();
      const results = await autoCompleteAdapter.getSuggestions(fakeLanguageClient, request);
      (0, _chai.expect)(results.length).equals(3);
      (0, _chai.expect)(results[0].text).equals('label2');
      (0, _chai.expect)(results[1].description).equals('a very exciting variable');
      (0, _chai.expect)(results[2].type).equals('keyword');
    });
  });

  describe('completeSuggestion', () => {
    const partialItems = [{
      label: 'label1',
      kind: ls.CompletionItemKind.Keyword,
      sortText: 'z'
    }, {
      label: 'label2',
      kind: ls.CompletionItemKind.Field,
      sortText: 'a'
    }, {
      label: 'label3',
      kind: ls.CompletionItemKind.Variable
    }];

    const fakeLanguageClient = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    _sinon2.default.stub(fakeLanguageClient, 'completion').resolves(partialItems);
    _sinon2.default.stub(fakeLanguageClient, 'completionItemResolve').resolves({
      label: 'label3',
      kind: ls.CompletionItemKind.Variable,
      detail: 'description3',
      documentation: 'a very exciting variable'
    });

    it('resolves suggestions via LSP given an AutoCompleteRequest', async () => {
      const autoCompleteAdapter = new _autocompleteAdapter2.default();
      const results = await autoCompleteAdapter.getSuggestions(fakeLanguageClient, request);
      (0, _chai.expect)(results[2].description).equals(undefined);
      const resolvedItem = await autoCompleteAdapter.completeSuggestion(fakeLanguageClient, results[2], request);
      (0, _chai.expect)(resolvedItem.description).equals('a very exciting variable');
    });
  });

  describe('requestToTextDocumentPositionParams', () => {
    it('creates a TextDocumentPositionParams from an AutocompleteRequest', () => {
      const result = _autocompleteAdapter2.default.requestToTextDocumentPositionParams(request);
      (0, _chai.expect)(result.textDocument.uri).equals('file:///a/b/c/d.js');
      (0, _chai.expect)(result.position).deep.equals({ line: 123, character: 456 });
    });
  });

  describe('completionItemsToSuggestions', () => {
    it('converts LSP CompletionItem array to AutoComplete Suggestions array', () => {
      const autoCompleteAdapter = new _autocompleteAdapter2.default();
      const results = autoCompleteAdapter.completionItemsToSuggestions(completionItems, request);
      (0, _chai.expect)(results.length).equals(3);
      (0, _chai.expect)(results[0].text).equals('label2');
      (0, _chai.expect)(results[1].description).equals('a very exciting variable');
      (0, _chai.expect)(results[2].type).equals('keyword');
    });

    it('converts LSP CompletionList to AutoComplete Suggestions array', () => {
      const completionList = { items: completionItems, isIncomplete: false };
      const autoCompleteAdapter = new _autocompleteAdapter2.default();
      const results = autoCompleteAdapter.completionItemsToSuggestions(completionList, request);
      (0, _chai.expect)(results.length).equals(3);
      (0, _chai.expect)(results[0].description).equals('a very exciting field');
      (0, _chai.expect)(results[1].text).equals('label3');
    });

    it('converts empty array into an empty AutoComplete Suggestions array', () => {
      const autoCompleteAdapter = new _autocompleteAdapter2.default();
      const results = autoCompleteAdapter.completionItemsToSuggestions([], request);
      (0, _chai.expect)(results.length).equals(0);
    });
  });

  describe('completionItemToSuggestion', () => {
    it('converts LSP CompletionItem to AutoComplete Suggestion without textEdit', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'keyword',
        documentation: 'a truly useful keyword'
      };
      const result = _autocompleteAdapter2.default.completionItemToSuggestion(completionItem, request);
      (0, _chai.expect)(result.text).equals('insert');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.rightLabel).equals('keyword');
      (0, _chai.expect)(result.description).equals('a truly useful keyword');
      (0, _chai.expect)(result.descriptionMarkdown).equals('a truly useful keyword');
    });

    it('converts LSP CompletionItem to AutoComplete Suggestion with textEdit', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Variable,
        detail: 'number',
        documentation: 'a truly useful variable',
        textEdit: {
          range: {
            start: { line: 10, character: 20 },
            end: { line: 30, character: 40 }
          },
          newText: 'newText'
        }
      };
      const autocompleteRequest = {
        editor: (0, _helpers.createFakeEditor)(),
        bufferPosition: new _atom.Point(123, 456),
        prefix: 'def',
        scopeDescriptor: 'some.scope'
      };
      _sinon2.default.stub(autocompleteRequest.editor, 'getTextInBufferRange').returns('replacementPrefix');
      const result = _autocompleteAdapter2.default.completionItemToSuggestion(completionItem, autocompleteRequest);
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('variable');
      (0, _chai.expect)(result.rightLabel).equals('number');
      (0, _chai.expect)(result.description).equals('a truly useful variable');
      (0, _chai.expect)(result.descriptionMarkdown).equals('a truly useful variable');
      (0, _chai.expect)(result.replacementPrefix).equals('replacementPrefix');
      (0, _chai.expect)(result.text).equals('newText');
      (0, _chai.expect)(autocompleteRequest.editor.getTextInBufferRange.calledOnce).equals(true);
      (0, _chai.expect)(autocompleteRequest.editor.getTextInBufferRange.getCall(0).args).deep.equals([new _atom.Range(new _atom.Point(10, 20), new _atom.Point(30, 40))]);
    });
  });

  describe('basicCompletionItemToSuggestion', () => {
    it('converts LSP CompletionItem with insertText and filterText to AutoComplete Suggestion', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'detail',
        documentation: 'a very exciting keyword'
      };
      const result = _autocompleteAdapter2.default.basicCompletionItemToSuggestion(completionItem);
      (0, _chai.expect)(result.text).equals('insert');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.rightLabel).equals('detail');
      (0, _chai.expect)(result.description).equals('a very exciting keyword');
      (0, _chai.expect)(result.descriptionMarkdown).equals('a very exciting keyword');
    });

    it('converts LSP CompletionItem without insertText or filterText to AutoComplete Suggestion', () => {
      const completionItem = {
        label: 'label',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'detail',
        documentation: 'A very useful keyword'
      };
      const result = _autocompleteAdapter2.default.basicCompletionItemToSuggestion(completionItem);
      (0, _chai.expect)(result.text).equals('label');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.rightLabel).equals('detail');
      (0, _chai.expect)(result.description).equals('A very useful keyword');
      (0, _chai.expect)(result.descriptionMarkdown).equals('A very useful keyword');
    });
  });

  describe('applyTextEditToSuggestion', () => {
    const basicCompletionItem = {
      label: 'label',
      kind: ls.CompletionItemKind.Keyword,
      detail: 'detail',
      documentation: 'An incredible keyword'
    };

    it('does not do anything if there is no textEdit', () => {
      const completionItem = _extends({}, basicCompletionItem);
      _autocompleteAdapter2.default.applyTextEditToSuggestion(null, new _atom.TextEditor(), completionItem);
      (0, _chai.expect)(completionItem).deep.equals(basicCompletionItem);
    });

    it('applies changes from TextEdit to replacementPrefix and text', () => {
      const textEdit = {
        range: {
          start: { line: 1, character: 2 },
          end: { line: 3, character: 4 }
        },
        newText: 'newText'
      };
      const editor = new _atom.TextEditor();
      _sinon2.default.stub(editor, 'getTextInBufferRange').returns('replacementPrefix');

      const completionItem = _extends({}, basicCompletionItem);
      _autocompleteAdapter2.default.applyTextEditToSuggestion(textEdit, editor, completionItem);
      (0, _chai.expect)(completionItem.replacementPrefix).equals('replacementPrefix');
      (0, _chai.expect)(completionItem.text).equals('newText');
      (0, _chai.expect)(editor.getTextInBufferRange.calledOnce).equals(true);
      (0, _chai.expect)(editor.getTextInBufferRange.getCall(0).args).deep.equals([new _atom.Range(new _atom.Point(1, 2), new _atom.Point(3, 4))]);
    });
  });

  describe('completionKindToSuggestionType', () => {
    it('converts LSP CompletionKinds to AutoComplete SuggestionTypes', () => {
      const variable = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Variable);
      const constructor = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Constructor);
      const module = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Module);
      (0, _chai.expect)(variable).equals('variable');
      (0, _chai.expect)(constructor).equals('function');
      (0, _chai.expect)(module).equals('module');
    });

    it('defaults to "value"', () => {
      const result = _autocompleteAdapter2.default.completionKindToSuggestionType(null);
      (0, _chai.expect)(result).equals('value');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvYXV0b2NvbXBsZXRlLWFkYXB0ZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJscyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImdsb2JhbCIsInNpbm9uIiwic2FuZGJveCIsImNyZWF0ZSIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJyZXF1ZXN0IiwiZWRpdG9yIiwiYnVmZmVyUG9zaXRpb24iLCJwcmVmaXgiLCJzY29wZURlc2NyaXB0b3IiLCJjb21wbGV0aW9uSXRlbXMiLCJsYWJlbCIsImtpbmQiLCJDb21wbGV0aW9uSXRlbUtpbmQiLCJLZXl3b3JkIiwiZGV0YWlsIiwiZG9jdW1lbnRhdGlvbiIsInNvcnRUZXh0IiwiRmllbGQiLCJWYXJpYWJsZSIsImZha2VMYW5ndWFnZUNsaWVudCIsIkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbiIsInN0dWIiLCJyZXNvbHZlcyIsIml0IiwiYXV0b0NvbXBsZXRlQWRhcHRlciIsInJlc3VsdHMiLCJnZXRTdWdnZXN0aW9ucyIsImxlbmd0aCIsImVxdWFscyIsInRleHQiLCJkZXNjcmlwdGlvbiIsInR5cGUiLCJwYXJ0aWFsSXRlbXMiLCJ1bmRlZmluZWQiLCJyZXNvbHZlZEl0ZW0iLCJjb21wbGV0ZVN1Z2dlc3Rpb24iLCJyZXN1bHQiLCJyZXF1ZXN0VG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyIsInRleHREb2N1bWVudCIsInVyaSIsInBvc2l0aW9uIiwiZGVlcCIsImxpbmUiLCJjaGFyYWN0ZXIiLCJjb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zIiwiY29tcGxldGlvbkxpc3QiLCJpdGVtcyIsImlzSW5jb21wbGV0ZSIsImNvbXBsZXRpb25JdGVtIiwiaW5zZXJ0VGV4dCIsImZpbHRlclRleHQiLCJjb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbiIsImRpc3BsYXlUZXh0IiwicmlnaHRMYWJlbCIsImRlc2NyaXB0aW9uTWFya2Rvd24iLCJ0ZXh0RWRpdCIsInJhbmdlIiwic3RhcnQiLCJlbmQiLCJuZXdUZXh0IiwiYXV0b2NvbXBsZXRlUmVxdWVzdCIsInJldHVybnMiLCJyZXBsYWNlbWVudFByZWZpeCIsImdldFRleHRJbkJ1ZmZlclJhbmdlIiwiY2FsbGVkT25jZSIsImdldENhbGwiLCJhcmdzIiwiYmFzaWNDb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbiIsImJhc2ljQ29tcGxldGlvbkl0ZW0iLCJhcHBseVRleHRFZGl0VG9TdWdnZXN0aW9uIiwidmFyaWFibGUiLCJjb21wbGV0aW9uS2luZFRvU3VnZ2VzdGlvblR5cGUiLCJjb25zdHJ1Y3RvciIsIkNvbnN0cnVjdG9yIiwibW9kdWxlIiwiTW9kdWxlIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7O0FBQ0E7O0lBQVlBLEU7O0FBQ1o7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7O0FBRUFDLFNBQVMscUJBQVQsRUFBZ0MsTUFBTTtBQUNwQ0MsYUFBVyxNQUFNO0FBQ2ZDLFdBQU9DLEtBQVAsR0FBZSxnQkFBTUMsT0FBTixDQUFjQyxNQUFkLEVBQWY7QUFDRCxHQUZEO0FBR0FDLFlBQVUsTUFBTTtBQUNkSixXQUFPQyxLQUFQLENBQWFJLE9BQWI7QUFDRCxHQUZEOztBQUlBLFFBQU1DLFVBQW9DO0FBQ3hDQyxZQUFRLGdDQURnQztBQUV4Q0Msb0JBQWdCLGdCQUFVLEdBQVYsRUFBZSxHQUFmLENBRndCO0FBR3hDQyxZQUFRLEtBSGdDO0FBSXhDQyxxQkFBaUI7QUFKdUIsR0FBMUM7O0FBT0EsUUFBTUMsa0JBQWtCLENBQ3RCO0FBQ0VDLFdBQU8sUUFEVDtBQUVFQyxVQUFNaEIsR0FBR2lCLGtCQUFILENBQXNCQyxPQUY5QjtBQUdFQyxZQUFRLGNBSFY7QUFJRUMsbUJBQWUseUJBSmpCO0FBS0VDLGNBQVU7QUFMWixHQURzQixFQVF0QjtBQUNFTixXQUFPLFFBRFQ7QUFFRUMsVUFBTWhCLEdBQUdpQixrQkFBSCxDQUFzQkssS0FGOUI7QUFHRUgsWUFBUSxjQUhWO0FBSUVDLG1CQUFlLHVCQUpqQjtBQUtFQyxjQUFVO0FB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QjVDLE1BQXBCLENBQTJCLFVBQTNCO0FBQ0Esd0JBQU84QyxNQUFQLEVBQWU5QyxNQUFmLENBQXNCLFFBQXRCO0FBQ0QsS0FQRDs7QUFTQUwsT0FBRyxxQkFBSCxFQUEwQixNQUFNO0FBQzlCLFlBQU1hLFNBQVMsOEJBQW9CbUMsOEJBQXBCLENBQW1ELElBQW5ELENBQWY7QUFDQSx3QkFBT25DLE1BQVAsRUFBZVIsTUFBZixDQUFzQixPQUF0QjtBQUNELEtBSEQ7QUFJRCxHQWREO0FBZUQsQ0F4UUQiLCJmaWxlIjoiYXV0b2NvbXBsZXRlLWFkYXB0ZXIudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XHJcblxyXG5pbXBvcnQgQXV0b0NvbXBsZXRlQWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvYXV0b2NvbXBsZXRlLWFkYXB0ZXInO1xyXG5pbXBvcnQgKiBhcyBscyBmcm9tICcuLi8uLi9saWIvbGFuZ3VhZ2VjbGllbnQnO1xyXG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xyXG5pbXBvcnQge1BvaW50LCBSYW5nZSwgVGV4dEVkaXRvcn0gZnJvbSAnYXRvbSc7XHJcbmltcG9ydCB7ZXhwZWN0fSBmcm9tICdjaGFpJztcclxuaW1wb3J0IHtjcmVhdGVTcHlDb25uZWN0aW9uLCBjcmVhdGVGYWtlRWRpdG9yfSBmcm9tICcuLi9oZWxwZXJzLmpzJztcclxuXHJcbmRlc2NyaWJlKCdBdXRvQ29tcGxldGVBZGFwdGVyJywgKCkgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgZ2xvYmFsLnNpbm9uID0gc2lub24uc2FuZGJveC5jcmVhdGUoKTtcclxuICB9KTtcclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgZ2xvYmFsLnNpbm9uLnJlc3RvcmUoKTtcclxuICB9KTtcclxuXHJcbiAgY29uc3QgcmVxdWVzdDogYXRvbSRBdXRvY29tcGxldGVSZXF1ZXN0ID0ge1xyXG4gICAgZWRpdG9yOiBjcmVhdGVGYWtlRWRpdG9yKCksXHJcbiAgICBidWZmZXJQb3NpdGlvbjogbmV3IFBvaW50KDEyMywgNDU2KSxcclxuICAgIHByZWZpeDogJ2RlZicsXHJcbiAgICBzY29wZURlc2NyaXB0b3I6ICdzb21lLnNjb3BlJyxcclxuICB9O1xyXG5cclxuICBjb25zdCBjb21wbGV0aW9uSXRlbXMgPSBbXHJcbiAgICB7XHJcbiAgICAgIGxhYmVsOiAnbGFiZWwxJyxcclxuICAgICAga2luZDogbHMuQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQsXHJcbiAgICAgIGRldGFpbDogJ2Rlc2NyaXB0aW9uMScsXHJcbiAgICAgIGRvY3VtZW50YXRpb246ICdhIHZlcnkgZXhjaXRpbmcga2V5d29yZCcsXHJcbiAgICAgIHNvcnRUZXh0OiAneicsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBsYWJlbDogJ2xhYmVsMicsXHJcbiAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5GaWVsZCxcclxuICAgICAgZGV0YWlsOiAnZGVzY3JpcHRpb24yJyxcclxuICAgICAgZG9jdW1lbnRhdGlvbjogJ2EgdmVyeSBleGNpdGluZyBmaWVsZCcsXHJcbiAgICAgIHNvcnRUZXh0OiAnYScsXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBsYWJlbDogJ2xhYmVsMycsXHJcbiAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSxcclxuICAgICAgZGV0YWlsOiAnZGVzY3JpcHRpb24zJyxcclxuICAgICAgZG9jdW1lbnRhdGlvbjogJ2EgdmVyeSBleGNpdGluZyB2YXJpYWJsZScsXHJcbiAgICB9LFxyXG4gIF07XHJcblxyXG4gIGRlc2NyaWJlKCdnZXRTdWdnZXN0aW9ucycsICgpID0+IHtcclxuICAgIGNvbnN0IGZha2VMYW5ndWFnZUNsaWVudCA9IG5ldyBscy5MYW5ndWFnZUNsaWVudENvbm5lY3Rpb24oY3JlYXRlU3B5Q29ubmVjdGlvbigpKTtcclxuICAgIHNpbm9uLnN0dWIoZmFrZUxhbmd1YWdlQ2xpZW50LCAnY29tcGxldGlvbicpLnJlc29sdmVzKGNvbXBsZXRpb25JdGVtcyk7XHJcblxyXG4gICAgaXQoJ2dldHMgQXV0b0NvbXBsZXRlIHN1Z2dlc3Rpb25zIHZpYSBMU1AgZ2l2ZW4gYW4gQXV0b0NvbXBsZXRlUmVxdWVzdCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgYXV0b0NvbXBsZXRlQWRhcHRlciA9IG5ldyBBdXRvQ29tcGxldGVBZGFwdGVyKCk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBhdXRvQ29tcGxldGVBZGFwdGVyLmdldFN1Z2dlc3Rpb25zKGZha2VMYW5ndWFnZUNsaWVudCwgcmVxdWVzdCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHRzLmxlbmd0aCkuZXF1YWxzKDMpO1xyXG4gICAgICBleHBlY3QocmVzdWx0c1swXS50ZXh0KS5lcXVhbHMoJ2xhYmVsMicpO1xyXG4gICAgICBleHBlY3QocmVzdWx0c1sxXS5kZXNjcmlwdGlvbikuZXF1YWxzKCdhIHZlcnkgZXhjaXRpbmcgdmFyaWFibGUnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdHNbMl0udHlwZSkuZXF1YWxzKCdrZXl3b3JkJyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2NvbXBsZXRlU3VnZ2VzdGlvbicsICgpID0+IHtcclxuICAgIGNvbnN0IHBhcnRpYWxJdGVtcyA9IFtcclxuICAgICAge1xyXG4gICAgICAgIGxhYmVsOiAnbGFiZWwxJyxcclxuICAgICAgICBraW5kOiBscy5Db21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCxcclxuICAgICAgICBzb3J0VGV4dDogJ3onLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbGFiZWw6ICdsYWJlbDInLFxyXG4gICAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5GaWVsZCxcclxuICAgICAgICBzb3J0VGV4dDogJ2EnLFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgbGFiZWw6ICdsYWJlbDMnLFxyXG4gICAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSxcclxuICAgICAgfSxcclxuICAgIF07XHJcblxyXG4gICAgY29uc3QgZmFrZUxhbmd1YWdlQ2xpZW50ID0gbmV3IGxzLkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbihjcmVhdGVTcHlDb25uZWN0aW9uKCkpO1xyXG4gICAgc2lub24uc3R1YihmYWtlTGFuZ3VhZ2VDbGllbnQsICdjb21wbGV0aW9uJykucmVzb2x2ZXMocGFydGlhbEl0ZW1zKTtcclxuICAgIHNpbm9uLnN0dWIoZmFrZUxhbmd1YWdlQ2xpZW50LCAnY29tcGxldGlvbkl0ZW1SZXNvbHZlJykucmVzb2x2ZXMoe1xyXG4gICAgICBsYWJlbDogJ2xhYmVsMycsXHJcbiAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSxcclxuICAgICAgZGV0YWlsOiAnZGVzY3JpcHRpb24zJyxcclxuICAgICAgZG9jdW1lbnRhdGlvbjogJ2EgdmVyeSBleGNpdGluZyB2YXJpYWJsZScsXHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgncmVzb2x2ZXMgc3VnZ2VzdGlvbnMgdmlhIExTUCBnaXZlbiBhbiBBdXRvQ29tcGxldGVSZXF1ZXN0JywgYXN5bmMgKCkgPT4ge1xyXG4gICAgICBjb25zdCBhdXRvQ29tcGxldGVBZGFwdGVyID0gbmV3IEF1dG9Db21wbGV0ZUFkYXB0ZXIoKTtcclxuICAgICAgY29uc3QgcmVzdWx0czogQXJyYXk8YXRvbSRBdXRvY29tcGxldGVTdWdnZXN0aW9uPiA9IGF3YWl0IGF1dG9Db21wbGV0ZUFkYXB0ZXIuZ2V0U3VnZ2VzdGlvbnMoZmFrZUxhbmd1YWdlQ2xpZW50LCByZXF1ZXN0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdHNbMl0uZGVzY3JpcHRpb24pLmVxdWFscyh1bmRlZmluZWQpO1xyXG4gICAgICBjb25zdCByZXNvbHZlZEl0ZW0gPSBhd2FpdCBhdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRlU3VnZ2VzdGlvbihmYWtlTGFuZ3VhZ2VDbGllbnQsIHJlc3VsdHNbMl0sIHJlcXVlc3QpO1xyXG4gICAgICBleHBlY3QocmVzb2x2ZWRJdGVtLmRlc2NyaXB0aW9uKS5lcXVhbHMoJ2EgdmVyeSBleGNpdGluZyB2YXJpYWJsZScpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdyZXF1ZXN0VG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcycsICgpID0+IHtcclxuICAgIGl0KCdjcmVhdGVzIGEgVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMgZnJvbSBhbiBBdXRvY29tcGxldGVSZXF1ZXN0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBBdXRvQ29tcGxldGVBZGFwdGVyLnJlcXVlc3RUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKHJlcXVlc3QpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnRleHREb2N1bWVudC51cmkpLmVxdWFscygnZmlsZTovLy9hL2IvYy9kLmpzJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQucG9zaXRpb24pLmRlZXAuZXF1YWxzKHtsaW5lOiAxMjMsIGNoYXJhY3RlcjogNDU2fSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2NvbXBsZXRpb25JdGVtc1RvU3VnZ2VzdGlvbnMnLCAoKSA9PiB7XHJcbiAgICBpdCgnY29udmVydHMgTFNQIENvbXBsZXRpb25JdGVtIGFycmF5IHRvIEF1dG9Db21wbGV0ZSBTdWdnZXN0aW9ucyBhcnJheScsICgpID0+IHtcclxuICAgICAgY29uc3QgYXV0b0NvbXBsZXRlQWRhcHRlciA9IG5ldyBBdXRvQ29tcGxldGVBZGFwdGVyKCk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25JdGVtc1RvU3VnZ2VzdGlvbnMoY29tcGxldGlvbkl0ZW1zLCByZXF1ZXN0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdHMubGVuZ3RoKS5lcXVhbHMoMyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdLnRleHQpLmVxdWFscygnbGFiZWwyJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHRzWzFdLmRlc2NyaXB0aW9uKS5lcXVhbHMoJ2EgdmVyeSBleGNpdGluZyB2YXJpYWJsZScpO1xyXG4gICAgICBleHBlY3QocmVzdWx0c1syXS50eXBlKS5lcXVhbHMoJ2tleXdvcmQnKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdjb252ZXJ0cyBMU1AgQ29tcGxldGlvbkxpc3QgdG8gQXV0b0NvbXBsZXRlIFN1Z2dlc3Rpb25zIGFycmF5JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb21wbGV0aW9uTGlzdCA9IHtpdGVtczogY29tcGxldGlvbkl0ZW1zLCBpc0luY29tcGxldGU6IGZhbHNlfTtcclxuICAgICAgY29uc3QgYXV0b0NvbXBsZXRlQWRhcHRlciA9IG5ldyBBdXRvQ29tcGxldGVBZGFwdGVyKCk7XHJcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25JdGVtc1RvU3VnZ2VzdGlvbnMoY29tcGxldGlvbkxpc3QsIHJlcXVlc3QpO1xyXG4gICAgICBleHBlY3QocmVzdWx0cy5sZW5ndGgpLmVxdWFscygzKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdHNbMF0uZGVzY3JpcHRpb24pLmVxdWFscygnYSB2ZXJ5IGV4Y2l0aW5nIGZpZWxkJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHRzWzFdLnRleHQpLmVxdWFscygnbGFiZWwzJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnY29udmVydHMgZW1wdHkgYXJyYXkgaW50byBhbiBlbXB0eSBBdXRvQ29tcGxldGUgU3VnZ2VzdGlvbnMgYXJyYXknLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGF1dG9Db21wbGV0ZUFkYXB0ZXIgPSBuZXcgQXV0b0NvbXBsZXRlQWRhcHRlcigpO1xyXG4gICAgICBjb25zdCByZXN1bHRzID0gYXV0b0NvbXBsZXRlQWRhcHRlci5jb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zKFtdLCByZXF1ZXN0KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdHMubGVuZ3RoKS5lcXVhbHMoMCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2NvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uJywgKCkgPT4ge1xyXG4gICAgaXQoJ2NvbnZlcnRzIExTUCBDb21wbGV0aW9uSXRlbSB0byBBdXRvQ29tcGxldGUgU3VnZ2VzdGlvbiB3aXRob3V0IHRleHRFZGl0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb21wbGV0aW9uSXRlbSA9IHtcclxuICAgICAgICBpbnNlcnRUZXh0OiAnaW5zZXJ0JyxcclxuICAgICAgICBsYWJlbDogJ2xhYmVsJyxcclxuICAgICAgICBmaWx0ZXJUZXh0OiAnZmlsdGVyJyxcclxuICAgICAgICBraW5kOiBscy5Db21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCxcclxuICAgICAgICBkZXRhaWw6ICdrZXl3b3JkJyxcclxuICAgICAgICBkb2N1bWVudGF0aW9uOiAnYSB0cnVseSB1c2VmdWwga2V5d29yZCcsXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IEF1dG9Db21wbGV0ZUFkYXB0ZXIuY29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24oY29tcGxldGlvbkl0ZW0sIHJlcXVlc3QpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnRleHQpLmVxdWFscygnaW5zZXJ0Jyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuZGlzcGxheVRleHQpLmVxdWFscygnbGFiZWwnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC50eXBlKS5lcXVhbHMoJ2tleXdvcmQnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5yaWdodExhYmVsKS5lcXVhbHMoJ2tleXdvcmQnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5kZXNjcmlwdGlvbikuZXF1YWxzKCdhIHRydWx5IHVzZWZ1bCBrZXl3b3JkJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuZGVzY3JpcHRpb25NYXJrZG93bikuZXF1YWxzKCdhIHRydWx5IHVzZWZ1bCBrZXl3b3JkJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnY29udmVydHMgTFNQIENvbXBsZXRpb25JdGVtIHRvIEF1dG9Db21wbGV0ZSBTdWdnZXN0aW9uIHdpdGggdGV4dEVkaXQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbXBsZXRpb25JdGVtOiBscy5Db21wbGV0aW9uSXRlbSA9IHtcclxuICAgICAgICBpbnNlcnRUZXh0OiAnaW5zZXJ0JyxcclxuICAgICAgICBsYWJlbDogJ2xhYmVsJyxcclxuICAgICAgICBmaWx0ZXJUZXh0OiAnZmlsdGVyJyxcclxuICAgICAgICBraW5kOiBscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGUsXHJcbiAgICAgICAgZGV0YWlsOiAnbnVtYmVyJyxcclxuICAgICAgICBkb2N1bWVudGF0aW9uOiAnYSB0cnVseSB1c2VmdWwgdmFyaWFibGUnLFxyXG4gICAgICAgIHRleHRFZGl0OiB7XHJcbiAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICBzdGFydDoge2xpbmU6IDEwLCBjaGFyYWN0ZXI6IDIwfSxcclxuICAgICAgICAgICAgZW5kOiB7bGluZTogMzAsIGNoYXJhY3RlcjogNDB9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIG5ld1RleHQ6ICduZXdUZXh0JyxcclxuICAgICAgICB9LFxyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBhdXRvY29tcGxldGVSZXF1ZXN0OiBhdG9tJEF1dG9jb21wbGV0ZVJlcXVlc3QgPSB7XHJcbiAgICAgICAgZWRpdG9yOiBjcmVhdGVGYWtlRWRpdG9yKCksXHJcbiAgICAgICAgYnVmZmVyUG9zaXRpb246IG5ldyBQb2ludCgxMjMsIDQ1NiksXHJcbiAgICAgICAgcHJlZml4OiAnZGVmJyxcclxuICAgICAgICBzY29wZURlc2NyaXB0b3I6ICdzb21lLnNjb3BlJyxcclxuICAgICAgfTtcclxuICAgICAgc2lub24uc3R1YihhdXRvY29tcGxldGVSZXF1ZXN0LmVkaXRvciwgJ2dldFRleHRJbkJ1ZmZlclJhbmdlJykucmV0dXJucygncmVwbGFjZW1lbnRQcmVmaXgnKTtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gQXV0b0NvbXBsZXRlQWRhcHRlci5jb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbihjb21wbGV0aW9uSXRlbSwgYXV0b2NvbXBsZXRlUmVxdWVzdCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuZGlzcGxheVRleHQpLmVxdWFscygnbGFiZWwnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC50eXBlKS5lcXVhbHMoJ3ZhcmlhYmxlJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQucmlnaHRMYWJlbCkuZXF1YWxzKCdudW1iZXInKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5kZXNjcmlwdGlvbikuZXF1YWxzKCdhIHRydWx5IHVzZWZ1bCB2YXJpYWJsZScpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LmRlc2NyaXB0aW9uTWFya2Rvd24pLmVxdWFscygnYSB0cnVseSB1c2VmdWwgdmFyaWFibGUnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5yZXBsYWNlbWVudFByZWZpeCkuZXF1YWxzKCdyZXBsYWNlbWVudFByZWZpeCcpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnRleHQpLmVxdWFscygnbmV3VGV4dCcpO1xyXG4gICAgICBleHBlY3QoYXV0b2NvbXBsZXRlUmVxdWVzdC5lZGl0b3IuZ2V0VGV4dEluQnVmZmVyUmFuZ2UuY2FsbGVkT25jZSkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QoYXV0b2NvbXBsZXRlUmVxdWVzdC5lZGl0b3IuZ2V0VGV4dEluQnVmZmVyUmFuZ2UuZ2V0Q2FsbCgwKS5hcmdzKS5kZWVwLmVxdWFscyhbXHJcbiAgICAgICAgbmV3IFJhbmdlKG5ldyBQb2ludCgxMCwgMjApLCBuZXcgUG9pbnQoMzAsIDQwKSksXHJcbiAgICAgIF0pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdiYXNpY0NvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uJywgKCkgPT4ge1xyXG4gICAgaXQoJ2NvbnZlcnRzIExTUCBDb21wbGV0aW9uSXRlbSB3aXRoIGluc2VydFRleHQgYW5kIGZpbHRlclRleHQgdG8gQXV0b0NvbXBsZXRlIFN1Z2dlc3Rpb24nLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbXBsZXRpb25JdGVtOiBscy5Db21wbGV0aW9uSXRlbSA9IHtcclxuICAgICAgICBpbnNlcnRUZXh0OiAnaW5zZXJ0JyxcclxuICAgICAgICBsYWJlbDogJ2xhYmVsJyxcclxuICAgICAgICBmaWx0ZXJUZXh0OiAnZmlsdGVyJyxcclxuICAgICAgICBraW5kOiBscy5Db21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCxcclxuICAgICAgICBkZXRhaWw6ICdkZXRhaWwnLFxyXG4gICAgICAgIGRvY3VtZW50YXRpb246ICdhIHZlcnkgZXhjaXRpbmcga2V5d29yZCcsXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IEF1dG9Db21wbGV0ZUFkYXB0ZXIuYmFzaWNDb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbihjb21wbGV0aW9uSXRlbSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkuZXF1YWxzKCdpbnNlcnQnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5kaXNwbGF5VGV4dCkuZXF1YWxzKCdsYWJlbCcpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnR5cGUpLmVxdWFscygna2V5d29yZCcpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LnJpZ2h0TGFiZWwpLmVxdWFscygnZGV0YWlsJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuZGVzY3JpcHRpb24pLmVxdWFscygnYSB2ZXJ5IGV4Y2l0aW5nIGtleXdvcmQnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5kZXNjcmlwdGlvbk1hcmtkb3duKS5lcXVhbHMoJ2EgdmVyeSBleGNpdGluZyBrZXl3b3JkJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnY29udmVydHMgTFNQIENvbXBsZXRpb25JdGVtIHdpdGhvdXQgaW5zZXJ0VGV4dCBvciBmaWx0ZXJUZXh0IHRvIEF1dG9Db21wbGV0ZSBTdWdnZXN0aW9uJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb21wbGV0aW9uSXRlbTogbHMuQ29tcGxldGlvbkl0ZW0gPSB7XHJcbiAgICAgICAgbGFiZWw6ICdsYWJlbCcsXHJcbiAgICAgICAga2luZDogbHMuQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQsXHJcbiAgICAgICAgZGV0YWlsOiAnZGV0YWlsJyxcclxuICAgICAgICBkb2N1bWVudGF0aW9uOiAnQSB2ZXJ5IHVzZWZ1bCBrZXl3b3JkJyxcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gQXV0b0NvbXBsZXRlQWRhcHRlci5iYXNpY0NvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKGNvbXBsZXRpb25JdGVtKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS5lcXVhbHMoJ2xhYmVsJyk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQuZGlzcGxheVRleHQpLmVxdWFscygnbGFiZWwnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC50eXBlKS5lcXVhbHMoJ2tleXdvcmQnKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdC5yaWdodExhYmVsKS5lcXVhbHMoJ2RldGFpbCcpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LmRlc2NyaXB0aW9uKS5lcXVhbHMoJ0EgdmVyeSB1c2VmdWwga2V5d29yZCcpO1xyXG4gICAgICBleHBlY3QocmVzdWx0LmRlc2NyaXB0aW9uTWFya2Rvd24pLmVxdWFscygnQSB2ZXJ5IHVzZWZ1bCBrZXl3b3JkJyk7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2FwcGx5VGV4dEVkaXRUb1N1Z2dlc3Rpb24nLCAoKSA9PiB7XHJcbiAgICBjb25zdCBiYXNpY0NvbXBsZXRpb25JdGVtOiBscy5Db21wbGV0aW9uSXRlbSA9IHtcclxuICAgICAgbGFiZWw6ICdsYWJlbCcsXHJcbiAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkLFxyXG4gICAgICBkZXRhaWw6ICdkZXRhaWwnLFxyXG4gICAgICBkb2N1bWVudGF0aW9uOiAnQW4gaW5jcmVkaWJsZSBrZXl3b3JkJyxcclxuICAgIH07XHJcblxyXG4gICAgaXQoJ2RvZXMgbm90IGRvIGFueXRoaW5nIGlmIHRoZXJlIGlzIG5vIHRleHRFZGl0JywgKCkgPT4ge1xyXG4gICAgICBjb25zdCBjb21wbGV0aW9uSXRlbSA9IHsuLi5iYXNpY0NvbXBsZXRpb25JdGVtfTtcclxuICAgICAgQXV0b0NvbXBsZXRlQWRhcHRlci5hcHBseVRleHRFZGl0VG9TdWdnZXN0aW9uKG51bGwsIG5ldyBUZXh0RWRpdG9yKCksIGNvbXBsZXRpb25JdGVtKTtcclxuICAgICAgZXhwZWN0KGNvbXBsZXRpb25JdGVtKS5kZWVwLmVxdWFscyhiYXNpY0NvbXBsZXRpb25JdGVtKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdhcHBsaWVzIGNoYW5nZXMgZnJvbSBUZXh0RWRpdCB0byByZXBsYWNlbWVudFByZWZpeCBhbmQgdGV4dCcsICgpID0+IHtcclxuICAgICAgY29uc3QgdGV4dEVkaXQgPSB7XHJcbiAgICAgICAgcmFuZ2U6IHtcclxuICAgICAgICAgIHN0YXJ0OiB7bGluZTogMSwgY2hhcmFjdGVyOiAyfSxcclxuICAgICAgICAgIGVuZDoge2xpbmU6IDMsIGNoYXJhY3RlcjogNH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBuZXdUZXh0OiAnbmV3VGV4dCcsXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGVkaXRvciA9IG5ldyBUZXh0RWRpdG9yKCk7XHJcbiAgICAgIHNpbm9uLnN0dWIoZWRpdG9yLCAnZ2V0VGV4dEluQnVmZmVyUmFuZ2UnKS5yZXR1cm5zKCdyZXBsYWNlbWVudFByZWZpeCcpO1xyXG5cclxuICAgICAgY29uc3QgY29tcGxldGlvbkl0ZW0gPSB7Li4uYmFzaWNDb21wbGV0aW9uSXRlbX07XHJcbiAgICAgIEF1dG9Db21wbGV0ZUFkYXB0ZXIuYXBwbHlUZXh0RWRpdFRvU3VnZ2VzdGlvbih0ZXh0RWRpdCwgZWRpdG9yLCBjb21wbGV0aW9uSXRlbSk7XHJcbiAgICAgIGV4cGVjdChjb21wbGV0aW9uSXRlbS5yZXBsYWNlbWVudFByZWZpeCkuZXF1YWxzKCdyZXBsYWNlbWVudFByZWZpeCcpO1xyXG4gICAgICBleHBlY3QoY29tcGxldGlvbkl0ZW0udGV4dCkuZXF1YWxzKCduZXdUZXh0Jyk7XHJcbiAgICAgIGV4cGVjdChlZGl0b3IuZ2V0VGV4dEluQnVmZmVyUmFuZ2UuY2FsbGVkT25jZSkuZXF1YWxzKHRydWUpO1xyXG4gICAgICBleHBlY3QoZWRpdG9yLmdldFRleHRJbkJ1ZmZlclJhbmdlLmdldENhbGwoMCkuYXJncykuZGVlcC5lcXVhbHMoW25ldyBSYW5nZShuZXcgUG9pbnQoMSwgMiksIG5ldyBQb2ludCgzLCA0KSldKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnY29tcGxldGlvbktpbmRUb1N1Z2dlc3Rpb25UeXBlJywgKCkgPT4ge1xyXG4gICAgaXQoJ2NvbnZlcnRzIExTUCBDb21wbGV0aW9uS2luZHMgdG8gQXV0b0NvbXBsZXRlIFN1Z2dlc3Rpb25UeXBlcycsICgpID0+IHtcclxuICAgICAgY29uc3QgdmFyaWFibGUgPSBBdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZShscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGUpO1xyXG4gICAgICBjb25zdCBjb25zdHJ1Y3RvciA9IEF1dG9Db21wbGV0ZUFkYXB0ZXIuY29tcGxldGlvbktpbmRUb1N1Z2dlc3Rpb25UeXBlKGxzLkNvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3Rvcik7XHJcbiAgICAgIGNvbnN0IG1vZHVsZSA9IEF1dG9Db21wbGV0ZUFkYXB0ZXIuY29tcGxldGlvbktpbmRUb1N1Z2dlc3Rpb25UeXBlKGxzLkNvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGUpO1xyXG4gICAgICBleHBlY3QodmFyaWFibGUpLmVxdWFscygndmFyaWFibGUnKTtcclxuICAgICAgZXhwZWN0KGNvbnN0cnVjdG9yKS5lcXVhbHMoJ2Z1bmN0aW9uJyk7XHJcbiAgICAgIGV4cGVjdChtb2R1bGUpLmVxdWFscygnbW9kdWxlJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBpdCgnZGVmYXVsdHMgdG8gXCJ2YWx1ZVwiJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBBdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZShudWxsKTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkuZXF1YWxzKCd2YWx1ZScpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=