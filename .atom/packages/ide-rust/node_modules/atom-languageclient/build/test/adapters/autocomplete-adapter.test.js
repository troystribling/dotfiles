var _autocompleteAdapter = require('../../lib/adapters/autocomplete-adapter');

var _autocompleteAdapter2 = _interopRequireDefault(_autocompleteAdapter);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _atom = require('atom');

var _chai = require('chai');

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

describe('AutoCompleteAdapter', () => {
  beforeEach(() => {
    global.sinon = _sinon2.default.sandbox.create();
  });
  afterEach(() => {
    global.sinon.restore();
  });

  const request = {
    editor: (0, _helpers.createFakeEditor)(),
    bufferPosition: new _atom.Point(123, 456),
    prefix: 'def',
    scopeDescriptor: 'some.scope'
  };

  const completionItems = [{
    label: 'label1',
    kind: ls.CompletionItemKind.Keyword,
    detail: 'description1',
    documentation: 'a very exciting keyword'
  }, {
    label: 'label2',
    kind: ls.CompletionItemKind.Field,
    detail: 'description2',
    documentation: 'a very exciting field'
  }, {
    label: 'label3',
    kind: ls.CompletionItemKind.Variable,
    detail: 'description3',
    documentation: 'a very exciting variable'
  }];

  describe('getSuggestions', () => {
    const fakeLanguageClient = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    _sinon2.default.stub(fakeLanguageClient, 'completion').resolves(completionItems);

    it('gets AutoComplete suggestions via LSP given an AutoCompleteRequest', _asyncToGenerator(function* () {
      const autoCompleteAdapter = new _autocompleteAdapter2.default();
      const suggestions = yield autoCompleteAdapter.getSuggestions(fakeLanguageClient, request);
      (0, _chai.expect)(suggestions.length).equals(3);
      (0, _chai.expect)(suggestions[0].text).equals('label1');
      (0, _chai.expect)(suggestions[1].description).equals('a very exciting field');
      (0, _chai.expect)(suggestions[2].type).equals('variable');
    }));
  });

  describe('requestToTextDocumentPositionParams', () => {
    it('creates a TextDocumentPositionParams from an AutocompleteRequest', () => {
      const result = _autocompleteAdapter2.default.requestToTextDocumentPositionParams(request);
      (0, _chai.expect)(result.textDocument.uri).equals('file:///a/b/c/d.js');
      (0, _chai.expect)(result.position).deep.equals({ line: 123, character: 456 });
    });
  });

  describe('completionItemsToSuggestions', () => {
    it('converts LSP CompletionItem array to AutoComplete Suggestions array', () => {
      const results = _autocompleteAdapter2.default.completionItemsToSuggestions(completionItems, request);
      (0, _chai.expect)(results.length).equals(3);
      (0, _chai.expect)(results[0].text).equals('label1');
      (0, _chai.expect)(results[1].description).equals('a very exciting field');
      (0, _chai.expect)(results[2].type).equals('variable');
    });

    it('converts LSP CompletionList to AutoComplete Suggestions array', () => {
      const completionList = { items: completionItems, isIncomplete: false };
      const results = _autocompleteAdapter2.default.completionItemsToSuggestions(completionList, request);
      (0, _chai.expect)(results.length).equals(3);
      (0, _chai.expect)(results[0].description).equals('a very exciting keyword');
      (0, _chai.expect)(results[1].text).equals('label2');
    });

    it('converts empty array into an empty AutoComplete Suggestions array', () => {
      const results = _autocompleteAdapter2.default.completionItemsToSuggestions([], request);
      (0, _chai.expect)(results.length).equals(0);
    });
  });

  describe('completionItemToSuggestion', () => {
    it('converts LSP CompletionItem to AutoComplete Suggestion without textEdit', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'keyword',
        documentation: 'a truly useful keyword'
      };
      const result = _autocompleteAdapter2.default.completionItemToSuggestion(completionItem, request);
      (0, _chai.expect)(result.text).equals('insert');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.leftLabel).equals('keyword');
      (0, _chai.expect)(result.description).equals('a truly useful keyword');
    });

    it('converts LSP CompletionItem to AutoComplete Suggestion with textEdit', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Variable,
        detail: 'number',
        documentation: 'a truly useful variable',
        textEdit: {
          range: { start: { line: 10, character: 20 }, end: { line: 30, character: 40 } },
          newText: 'newText'
        }
      };
      const autocompleteRequest = {
        editor: (0, _helpers.createFakeEditor)(),
        bufferPosition: new _atom.Point(123, 456),
        prefix: 'def',
        scopeDescriptor: 'some.scope'
      };
      _sinon2.default.stub(autocompleteRequest.editor, 'getTextInBufferRange').returns('replacementPrefix');
      const result = _autocompleteAdapter2.default.completionItemToSuggestion(completionItem, autocompleteRequest);
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('variable');
      (0, _chai.expect)(result.leftLabel).equals('number');
      (0, _chai.expect)(result.description).equals('a truly useful variable');
      (0, _chai.expect)(result.replacementPrefix).equals('replacementPrefix');
      (0, _chai.expect)(result.text).equals('newText');
      (0, _chai.expect)(autocompleteRequest.editor.getTextInBufferRange.calledOnce).equals(true);
      (0, _chai.expect)(autocompleteRequest.editor.getTextInBufferRange.getCall(0).args).deep.equals([new _atom.Range(new _atom.Point(10, 20), new _atom.Point(30, 40))]);
    });
  });

  describe('basicCompletionItemToSuggestion', () => {
    it('converts LSP CompletionItem with insertText and filterText to AutoComplete Suggestion', () => {
      const completionItem = {
        insertText: 'insert',
        label: 'label',
        filterText: 'filter',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'detail',
        documentation: 'a very exciting keyword'
      };
      const result = _autocompleteAdapter2.default.basicCompletionItemToSuggestion(completionItem);
      (0, _chai.expect)(result.text).equals('insert');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.leftLabel).equals('detail');
      (0, _chai.expect)(result.description).equals('a very exciting keyword');
    });

    it('converts LSP CompletionItem without insertText or filterText to AutoComplete Suggestion', () => {
      const completionItem = {
        label: 'label',
        kind: ls.CompletionItemKind.Keyword,
        detail: 'detail',
        documentation: 'A very useful keyword'
      };
      const result = _autocompleteAdapter2.default.basicCompletionItemToSuggestion(completionItem);
      (0, _chai.expect)(result.text).equals('label');
      (0, _chai.expect)(result.displayText).equals('label');
      (0, _chai.expect)(result.type).equals('keyword');
      (0, _chai.expect)(result.leftLabel).equals('detail');
      (0, _chai.expect)(result.description).equals('A very useful keyword');
    });
  });

  describe('applyTextEditToSuggestion', () => {
    const basicCompletionItem = {
      label: 'label',
      kind: ls.CompletionItemKind.Keyword,
      detail: 'detail',
      documentation: 'An incredible keyword'
    };

    it('does not do anything if there is no textEdit', () => {
      const completionItem = Object.assign({}, basicCompletionItem);
      _autocompleteAdapter2.default.applyTextEditToSuggestion(null, new _atom.TextEditor(), completionItem);
      (0, _chai.expect)(completionItem).deep.equals(basicCompletionItem);
    });

    it('applies changes from TextEdit to replacementPrefix and text', () => {
      const textEdit = {
        range: { start: { line: 1, character: 2 }, end: { line: 3, character: 4 } },
        newText: 'newText'
      };
      const editor = new _atom.TextEditor();
      _sinon2.default.stub(editor, 'getTextInBufferRange').returns('replacementPrefix');

      const completionItem = Object.assign({}, basicCompletionItem);
      _autocompleteAdapter2.default.applyTextEditToSuggestion(textEdit, editor, completionItem);
      (0, _chai.expect)(completionItem.replacementPrefix).equals('replacementPrefix');
      (0, _chai.expect)(completionItem.text).equals('newText');
      (0, _chai.expect)(editor.getTextInBufferRange.calledOnce).equals(true);
      (0, _chai.expect)(editor.getTextInBufferRange.getCall(0).args).deep.equals([new _atom.Range(new _atom.Point(1, 2), new _atom.Point(3, 4))]);
    });
  });

  describe('completionKindToSuggestionType', () => {
    it('converts LSP CompletionKinds to AutoComplete SuggestionTypes', () => {
      const variable = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Variable);
      const constructor = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Constructor);
      const module = _autocompleteAdapter2.default.completionKindToSuggestionType(ls.CompletionItemKind.Module);
      (0, _chai.expect)(variable).equals('variable');
      (0, _chai.expect)(constructor).equals('function');
      (0, _chai.expect)(module).equals('module');
    });

    it('defaults to "value"', () => {
      const result = _autocompleteAdapter2.default.completionKindToSuggestionType(null);
      (0, _chai.expect)(result).equals('value');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvYXV0b2NvbXBsZXRlLWFkYXB0ZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJscyIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImdsb2JhbCIsInNpbm9uIiwic2FuZGJveCIsImNyZWF0ZSIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJyZXF1ZXN0IiwiZWRpdG9yIiwiYnVmZmVyUG9zaXRpb24iLCJwcmVmaXgiLCJzY29wZURlc2NyaXB0b3IiLCJjb21wbGV0aW9uSXRlbXMiLCJsYWJlbCIsImtpbmQiLCJDb21wbGV0aW9uSXRlbUtpbmQiLCJLZXl3b3JkIiwiZGV0YWlsIiwiZG9jdW1lbnRhdGlvbiIsIkZpZWxkIiwiVmFyaWFibGUiLCJmYWtlTGFuZ3VhZ2VDbGllbnQiLCJMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24iLCJzdHViIiwicmVzb2x2ZXMiLCJpdCIsImF1dG9Db21wbGV0ZUFkYXB0ZXIiLCJzdWdnZXN0aW9ucyIsImdldFN1Z2dlc3Rpb25zIiwibGVuZ3RoIiwiZXF1YWxzIiwidGV4dCIsImRlc2NyaXB0aW9uIiwidHlwZSIsInJlc3VsdCIsInJlcXVlc3RUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zIiwidGV4dERvY3VtZW50IiwidXJpIiwicG9zaXRpb24iLCJkZWVwIiwibGluZSIsImNoYXJhY3RlciIsInJlc3VsdHMiLCJjb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zIiwiY29tcGxldGlvbkxpc3QiLCJpdGVtcyIsImlzSW5jb21wbGV0ZSIsImNvbXBsZXRpb25JdGVtIiwiaW5zZXJ0VGV4dCIsImZpbHRlclRleHQiLCJjb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbiIsImRpc3BsYXlUZXh0IiwibGVmdExhYmVsIiwidGV4dEVkaXQiLCJyYW5nZSIsInN0YXJ0IiwiZW5kIiwibmV3VGV4dCIsImF1dG9jb21wbGV0ZVJlcXVlc3QiLCJyZXR1cm5zIiwicmVwbGFjZW1lbnRQcmVmaXgiLCJnZXRUZXh0SW5CdWZmZXJSYW5nZSIsImNhbGxlZE9uY2UiLCJnZXRDYWxsIiwiYXJncyIsImJhc2ljQ29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24iLCJiYXNpY0NvbXBsZXRpb25JdGVtIiwiT2JqZWN0IiwiYXNzaWduIiwiYXBwbHlUZXh0RWRpdFRvU3VnZ2VzdGlvbiIsInZhcmlhYmxlIiwiY29tcGxldGlvbktpbmRUb1N1Z2dlc3Rpb25UeXBlIiwiY29uc3RydWN0b3IiLCJDb25zdHJ1Y3RvciIsIm1vZHVsZSIsIk1vZHVsZSJdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7QUFDQTs7SUFBWUEsRTs7QUFDWjs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBQyxTQUFTLHFCQUFULEVBQWdDLE1BQU07QUFDcENDLGFBQVcsTUFBTTtBQUFFQyxXQUFPQyxLQUFQLEdBQWUsZ0JBQU1DLE9BQU4sQ0FBY0MsTUFBZCxFQUFmO0FBQXdDLEdBQTNEO0FBQ0FDLFlBQVUsTUFBTTtBQUFFSixXQUFPQyxLQUFQLENBQWFJLE9BQWI7QUFBeUIsR0FBM0M7O0FBRUEsUUFBTUMsVUFBb0M7QUFDeENDLFlBQVEsZ0NBRGdDO0FBRXhDQyxvQkFBZ0IsZ0JBQVUsR0FBVixFQUFlLEdBQWYsQ0FGd0I7QUFHeENDLFlBQVEsS0FIZ0M7QUFJeENDLHFCQUFpQjtBQUp1QixHQUExQzs7QUFPQSxRQUFNQyxrQkFBa0IsQ0FDdEI7QUFDRUMsV0FBTyxRQURUO0FBRUVDLFVBQU1oQixHQUFHaUIsa0JBQUgsQ0FBc0JDLE9BRjlCO0FBR0VDLFlBQVEsY0FIVjtBQUlFQyxtQkFBZTtBQUpqQixHQURzQixFQU90QjtBQUNFTCxXQUFPLFFBRFQ7QUFFRUMsVUFBTWhCLEdBQUdpQixrQkFBSCxDQUFzQkksS0FGOUI7QUFHRUYsWUFBUSxjQUhWO0FBSUVDLG1CQUFlO0FBSmpCLEdBUHNCLEVBYXRCO0FBQ0VMLFdBQU8sUUFEVDtBQUVFQyxVQUFNaEIsR0FBR2lCLGtCQUFILENBQXNCSyxRQUY5QjtBQUdFSCxZQUFRLGNBSFY7QUFJRUMsbUJB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QUNBLHdCQUFPdEIsT0FBT3FELG9CQUFQLENBQTRCRSxPQUE1QixDQUFvQyxDQUFwQyxFQUF1Q0MsSUFBOUMsRUFBb0R6QixJQUFwRCxDQUF5RFQsTUFBekQsQ0FBZ0UsQ0FBQyxnQkFBVSxnQkFBVSxDQUFWLEVBQWEsQ0FBYixDQUFWLEVBQTJCLGdCQUFVLENBQVYsRUFBYSxDQUFiLENBQTNCLENBQUQsQ0FBaEU7QUFDRCxLQWREO0FBZUQsR0E3QkQ7O0FBK0JBL0IsV0FBUyxnQ0FBVCxFQUEyQyxNQUFNO0FBQy9DMEIsT0FBRyw4REFBSCxFQUFtRSxNQUFNO0FBQ3ZFLFlBQU02QyxXQUFXLDhCQUFvQkMsOEJBQXBCLENBQW1EekUsR0FBR2lCLGtCQUFILENBQXNCSyxRQUF6RSxDQUFqQjtBQUNBLFlBQU1vRCxjQUFjLDhCQUFvQkQsOEJBQXBCLENBQW1EekUsR0FBR2lCLGtCQUFILENBQXNCMEQsV0FBekUsQ0FBcEI7QUFDQSxZQUFNQyxTQUFTLDhCQUFvQkgsOEJBQXBCLENBQW1EekUsR0FBR2lCLGtCQUFILENBQXNCNEQsTUFBekUsQ0FBZjtBQUNBLHdCQUFPTCxRQUFQLEVBQWlCeEMsTUFBakIsQ0FBd0IsVUFBeEI7QUFDQSx3QkFBTzBDLFdBQVAsRUFBb0IxQyxNQUFwQixDQUEyQixVQUEzQjtBQUNBLHdCQUFPNEMsTUFBUCxFQUFlNUMsTUFBZixDQUFzQixRQUF0QjtBQUNELEtBUEQ7O0FBU0FMLE9BQUcscUJBQUgsRUFBMEIsTUFBTTtBQUM5QixZQUFNUyxTQUFTLDhCQUFvQnFDLDhCQUFwQixDQUFtRCxJQUFuRCxDQUFmO0FBQ0Esd0JBQU9yQyxNQUFQLEVBQWVKLE1BQWYsQ0FBc0IsT0FBdEI7QUFDRCxLQUhEO0FBSUQsR0FkRDtBQWVELENBL01EIiwiZmlsZSI6ImF1dG9jb21wbGV0ZS1hZGFwdGVyLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgQXV0b0NvbXBsZXRlQWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvYXV0b2NvbXBsZXRlLWFkYXB0ZXInO1xuaW1wb3J0ICogYXMgbHMgZnJvbSAnLi4vLi4vbGliL2xhbmd1YWdlY2xpZW50JztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQge1BvaW50LCBSYW5nZSwgVGV4dEVkaXRvcn0gZnJvbSAnYXRvbSc7XG5pbXBvcnQge2V4cGVjdH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge2NyZWF0ZVNweUNvbm5lY3Rpb24sIGNyZWF0ZUZha2VFZGl0b3J9IGZyb20gJy4uL2hlbHBlcnMuanMnO1xuXG5kZXNjcmliZSgnQXV0b0NvbXBsZXRlQWRhcHRlcicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7IGdsb2JhbC5zaW5vbiA9IHNpbm9uLnNhbmRib3guY3JlYXRlKCk7IH0pO1xuICBhZnRlckVhY2goKCkgPT4geyBnbG9iYWwuc2lub24ucmVzdG9yZSgpOyB9KTtcblxuICBjb25zdCByZXF1ZXN0OiBhdG9tJEF1dG9jb21wbGV0ZVJlcXVlc3QgPSB7XG4gICAgZWRpdG9yOiBjcmVhdGVGYWtlRWRpdG9yKCksXG4gICAgYnVmZmVyUG9zaXRpb246IG5ldyBQb2ludCgxMjMsIDQ1NiksXG4gICAgcHJlZml4OiAnZGVmJyxcbiAgICBzY29wZURlc2NyaXB0b3I6ICdzb21lLnNjb3BlJyxcbiAgfTtcblxuICBjb25zdCBjb21wbGV0aW9uSXRlbXMgPSBbXG4gICAge1xuICAgICAgbGFiZWw6ICdsYWJlbDEnLFxuICAgICAga2luZDogbHMuQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQsXG4gICAgICBkZXRhaWw6ICdkZXNjcmlwdGlvbjEnLFxuICAgICAgZG9jdW1lbnRhdGlvbjogJ2EgdmVyeSBleGNpdGluZyBrZXl3b3JkJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnbGFiZWwyJyxcbiAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5GaWVsZCxcbiAgICAgIGRldGFpbDogJ2Rlc2NyaXB0aW9uMicsXG4gICAgICBkb2N1bWVudGF0aW9uOiAnYSB2ZXJ5IGV4Y2l0aW5nIGZpZWxkJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGxhYmVsOiAnbGFiZWwzJyxcbiAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5WYXJpYWJsZSxcbiAgICAgIGRldGFpbDogJ2Rlc2NyaXB0aW9uMycsXG4gICAgICBkb2N1bWVudGF0aW9uOiAnYSB2ZXJ5IGV4Y2l0aW5nIHZhcmlhYmxlJyxcbiAgICB9LFxuICBdO1xuXG4gIGRlc2NyaWJlKCdnZXRTdWdnZXN0aW9ucycsICgpID0+IHtcbiAgICBjb25zdCBmYWtlTGFuZ3VhZ2VDbGllbnQgPSBuZXcgbHMuTGFuZ3VhZ2VDbGllbnRDb25uZWN0aW9uKGNyZWF0ZVNweUNvbm5lY3Rpb24oKSk7XG4gICAgc2lub24uc3R1YihmYWtlTGFuZ3VhZ2VDbGllbnQsICdjb21wbGV0aW9uJykucmVzb2x2ZXMoY29tcGxldGlvbkl0ZW1zKTtcblxuICAgIGl0KCdnZXRzIEF1dG9Db21wbGV0ZSBzdWdnZXN0aW9ucyB2aWEgTFNQIGdpdmVuIGFuIEF1dG9Db21wbGV0ZVJlcXVlc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBhdXRvQ29tcGxldGVBZGFwdGVyID0gbmV3IEF1dG9Db21wbGV0ZUFkYXB0ZXIoKTtcbiAgICAgIGNvbnN0IHN1Z2dlc3Rpb25zID0gYXdhaXQgYXV0b0NvbXBsZXRlQWRhcHRlci5nZXRTdWdnZXN0aW9ucyhmYWtlTGFuZ3VhZ2VDbGllbnQsIHJlcXVlc3QpO1xuICAgICAgZXhwZWN0KHN1Z2dlc3Rpb25zLmxlbmd0aCkuZXF1YWxzKDMpO1xuICAgICAgZXhwZWN0KHN1Z2dlc3Rpb25zWzBdLnRleHQpLmVxdWFscygnbGFiZWwxJyk7XG4gICAgICBleHBlY3Qoc3VnZ2VzdGlvbnNbMV0uZGVzY3JpcHRpb24pLmVxdWFscygnYSB2ZXJ5IGV4Y2l0aW5nIGZpZWxkJyk7XG4gICAgICBleHBlY3Qoc3VnZ2VzdGlvbnNbMl0udHlwZSkuZXF1YWxzKCd2YXJpYWJsZScpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVxdWVzdFRvVGV4dERvY3VtZW50UG9zaXRpb25QYXJhbXMnLCAoKSA9PiB7XG4gICAgaXQoJ2NyZWF0ZXMgYSBUZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyBmcm9tIGFuIEF1dG9jb21wbGV0ZVJlcXVlc3QnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBBdXRvQ29tcGxldGVBZGFwdGVyLnJlcXVlc3RUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKHJlcXVlc3QpO1xuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0RG9jdW1lbnQudXJpKS5lcXVhbHMoJ2ZpbGU6Ly8vYS9iL2MvZC5qcycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5wb3NpdGlvbikuZGVlcC5lcXVhbHMoe2xpbmU6IDEyMywgY2hhcmFjdGVyOiA0NTZ9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbXBsZXRpb25JdGVtc1RvU3VnZ2VzdGlvbnMnLCAoKSA9PiB7XG4gICAgaXQoJ2NvbnZlcnRzIExTUCBDb21wbGV0aW9uSXRlbSBhcnJheSB0byBBdXRvQ29tcGxldGUgU3VnZ2VzdGlvbnMgYXJyYXknLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHRzID0gQXV0b0NvbXBsZXRlQWRhcHRlci5jb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zKGNvbXBsZXRpb25JdGVtcywgcmVxdWVzdCk7XG4gICAgICBleHBlY3QocmVzdWx0cy5sZW5ndGgpLmVxdWFscygzKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzWzBdLnRleHQpLmVxdWFscygnbGFiZWwxJyk7XG4gICAgICBleHBlY3QocmVzdWx0c1sxXS5kZXNjcmlwdGlvbikuZXF1YWxzKCdhIHZlcnkgZXhjaXRpbmcgZmllbGQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzWzJdLnR5cGUpLmVxdWFscygndmFyaWFibGUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdjb252ZXJ0cyBMU1AgQ29tcGxldGlvbkxpc3QgdG8gQXV0b0NvbXBsZXRlIFN1Z2dlc3Rpb25zIGFycmF5JywgKCkgPT4ge1xuICAgICAgY29uc3QgY29tcGxldGlvbkxpc3QgPSB7aXRlbXM6IGNvbXBsZXRpb25JdGVtcywgaXNJbmNvbXBsZXRlOiBmYWxzZX07XG4gICAgICBjb25zdCByZXN1bHRzID0gQXV0b0NvbXBsZXRlQWRhcHRlci5jb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zKGNvbXBsZXRpb25MaXN0LCByZXF1ZXN0KTtcbiAgICAgIGV4cGVjdChyZXN1bHRzLmxlbmd0aCkuZXF1YWxzKDMpO1xuICAgICAgZXhwZWN0KHJlc3VsdHNbMF0uZGVzY3JpcHRpb24pLmVxdWFscygnYSB2ZXJ5IGV4Y2l0aW5nIGtleXdvcmQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHRzWzFdLnRleHQpLmVxdWFscygnbGFiZWwyJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnY29udmVydHMgZW1wdHkgYXJyYXkgaW50byBhbiBlbXB0eSBBdXRvQ29tcGxldGUgU3VnZ2VzdGlvbnMgYXJyYXknLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHRzID0gQXV0b0NvbXBsZXRlQWRhcHRlci5jb21wbGV0aW9uSXRlbXNUb1N1Z2dlc3Rpb25zKFtdLCByZXF1ZXN0KTtcbiAgICAgIGV4cGVjdChyZXN1bHRzLmxlbmd0aCkuZXF1YWxzKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24nLCAoKSA9PiB7XG4gICAgaXQoJ2NvbnZlcnRzIExTUCBDb21wbGV0aW9uSXRlbSB0byBBdXRvQ29tcGxldGUgU3VnZ2VzdGlvbiB3aXRob3V0IHRleHRFZGl0JywgKCkgPT4ge1xuICAgICAgY29uc3QgY29tcGxldGlvbkl0ZW0gPSB7XG4gICAgICAgIGluc2VydFRleHQ6ICdpbnNlcnQnLFxuICAgICAgICBsYWJlbDogJ2xhYmVsJyxcbiAgICAgICAgZmlsdGVyVGV4dDogJ2ZpbHRlcicsXG4gICAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkLFxuICAgICAgICBkZXRhaWw6ICdrZXl3b3JkJyxcbiAgICAgICAgZG9jdW1lbnRhdGlvbjogJ2EgdHJ1bHkgdXNlZnVsIGtleXdvcmQnLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IEF1dG9Db21wbGV0ZUFkYXB0ZXIuY29tcGxldGlvbkl0ZW1Ub1N1Z2dlc3Rpb24oY29tcGxldGlvbkl0ZW0sIHJlcXVlc3QpO1xuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS5lcXVhbHMoJ2luc2VydCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5kaXNwbGF5VGV4dCkuZXF1YWxzKCdsYWJlbCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC50eXBlKS5lcXVhbHMoJ2tleXdvcmQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubGVmdExhYmVsKS5lcXVhbHMoJ2tleXdvcmQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZGVzY3JpcHRpb24pLmVxdWFscygnYSB0cnVseSB1c2VmdWwga2V5d29yZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2NvbnZlcnRzIExTUCBDb21wbGV0aW9uSXRlbSB0byBBdXRvQ29tcGxldGUgU3VnZ2VzdGlvbiB3aXRoIHRleHRFZGl0JywgKCkgPT4ge1xuICAgICAgY29uc3QgY29tcGxldGlvbkl0ZW06IGxzLkNvbXBsZXRpb25JdGVtID0ge1xuICAgICAgICBpbnNlcnRUZXh0OiAnaW5zZXJ0JyxcbiAgICAgICAgbGFiZWw6ICdsYWJlbCcsXG4gICAgICAgIGZpbHRlclRleHQ6ICdmaWx0ZXInLFxuICAgICAgICBraW5kOiBscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGUsXG4gICAgICAgIGRldGFpbDogJ251bWJlcicsXG4gICAgICAgIGRvY3VtZW50YXRpb246ICdhIHRydWx5IHVzZWZ1bCB2YXJpYWJsZScsXG4gICAgICAgIHRleHRFZGl0OiB7XG4gICAgICAgICAgcmFuZ2U6IHtzdGFydDoge2xpbmU6IDEwLCBjaGFyYWN0ZXI6IDIwfSwgZW5kOiB7bGluZTogMzAsIGNoYXJhY3RlcjogNDB9fSxcbiAgICAgICAgICBuZXdUZXh0OiAnbmV3VGV4dCcsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgY29uc3QgYXV0b2NvbXBsZXRlUmVxdWVzdDogYXRvbSRBdXRvY29tcGxldGVSZXF1ZXN0ID0ge1xuICAgICAgICBlZGl0b3I6IGNyZWF0ZUZha2VFZGl0b3IoKSxcbiAgICAgICAgYnVmZmVyUG9zaXRpb246IG5ldyBQb2ludCgxMjMsIDQ1NiksXG4gICAgICAgIHByZWZpeDogJ2RlZicsXG4gICAgICAgIHNjb3BlRGVzY3JpcHRvcjogJ3NvbWUuc2NvcGUnLFxuICAgICAgfTtcbiAgICAgIHNpbm9uLnN0dWIoYXV0b2NvbXBsZXRlUmVxdWVzdC5lZGl0b3IsICdnZXRUZXh0SW5CdWZmZXJSYW5nZScpLnJldHVybnMoJ3JlcGxhY2VtZW50UHJlZml4Jyk7XG4gICAgICBjb25zdCByZXN1bHQgPSBBdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKGNvbXBsZXRpb25JdGVtLCBhdXRvY29tcGxldGVSZXF1ZXN0KTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZGlzcGxheVRleHQpLmVxdWFscygnbGFiZWwnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudHlwZSkuZXF1YWxzKCd2YXJpYWJsZScpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5sZWZ0TGFiZWwpLmVxdWFscygnbnVtYmVyJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmRlc2NyaXB0aW9uKS5lcXVhbHMoJ2EgdHJ1bHkgdXNlZnVsIHZhcmlhYmxlJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnJlcGxhY2VtZW50UHJlZml4KS5lcXVhbHMoJ3JlcGxhY2VtZW50UHJlZml4Jyk7XG4gICAgICBleHBlY3QocmVzdWx0LnRleHQpLmVxdWFscygnbmV3VGV4dCcpO1xuICAgICAgZXhwZWN0KGF1dG9jb21wbGV0ZVJlcXVlc3QuZWRpdG9yLmdldFRleHRJbkJ1ZmZlclJhbmdlLmNhbGxlZE9uY2UpLmVxdWFscyh0cnVlKTtcbiAgICAgIGV4cGVjdChhdXRvY29tcGxldGVSZXF1ZXN0LmVkaXRvci5nZXRUZXh0SW5CdWZmZXJSYW5nZS5nZXRDYWxsKDApLmFyZ3MpLmRlZXAuZXF1YWxzKFtuZXcgUmFuZ2UobmV3IFBvaW50KDEwLCAyMCksIG5ldyBQb2ludCgzMCwgNDApKV0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnYmFzaWNDb21wbGV0aW9uSXRlbVRvU3VnZ2VzdGlvbicsICgpID0+IHtcbiAgICBpdCgnY29udmVydHMgTFNQIENvbXBsZXRpb25JdGVtIHdpdGggaW5zZXJ0VGV4dCBhbmQgZmlsdGVyVGV4dCB0byBBdXRvQ29tcGxldGUgU3VnZ2VzdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbXBsZXRpb25JdGVtOiBscy5Db21wbGV0aW9uSXRlbSA9IHtcbiAgICAgICAgaW5zZXJ0VGV4dDogJ2luc2VydCcsXG4gICAgICAgIGxhYmVsOiAnbGFiZWwnLFxuICAgICAgICBmaWx0ZXJUZXh0OiAnZmlsdGVyJyxcbiAgICAgICAga2luZDogbHMuQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQsXG4gICAgICAgIGRldGFpbDogJ2RldGFpbCcsXG4gICAgICAgIGRvY3VtZW50YXRpb246ICdhIHZlcnkgZXhjaXRpbmcga2V5d29yZCcsXG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gQXV0b0NvbXBsZXRlQWRhcHRlci5iYXNpY0NvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKGNvbXBsZXRpb25JdGVtKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkuZXF1YWxzKCdpbnNlcnQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZGlzcGxheVRleHQpLmVxdWFscygnbGFiZWwnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudHlwZSkuZXF1YWxzKCdrZXl3b3JkJyk7XG4gICAgICBleHBlY3QocmVzdWx0LmxlZnRMYWJlbCkuZXF1YWxzKCdkZXRhaWwnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQuZGVzY3JpcHRpb24pLmVxdWFscygnYSB2ZXJ5IGV4Y2l0aW5nIGtleXdvcmQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdjb252ZXJ0cyBMU1AgQ29tcGxldGlvbkl0ZW0gd2l0aG91dCBpbnNlcnRUZXh0IG9yIGZpbHRlclRleHQgdG8gQXV0b0NvbXBsZXRlIFN1Z2dlc3Rpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb21wbGV0aW9uSXRlbTogbHMuQ29tcGxldGlvbkl0ZW0gPSB7XG4gICAgICAgIGxhYmVsOiAnbGFiZWwnLFxuICAgICAgICBraW5kOiBscy5Db21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZCxcbiAgICAgICAgZGV0YWlsOiAnZGV0YWlsJyxcbiAgICAgICAgZG9jdW1lbnRhdGlvbjogJ0EgdmVyeSB1c2VmdWwga2V5d29yZCcsXG4gICAgICB9O1xuICAgICAgY29uc3QgcmVzdWx0ID0gQXV0b0NvbXBsZXRlQWRhcHRlci5iYXNpY0NvbXBsZXRpb25JdGVtVG9TdWdnZXN0aW9uKGNvbXBsZXRpb25JdGVtKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkuZXF1YWxzKCdsYWJlbCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5kaXNwbGF5VGV4dCkuZXF1YWxzKCdsYWJlbCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC50eXBlKS5lcXVhbHMoJ2tleXdvcmQnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQubGVmdExhYmVsKS5lcXVhbHMoJ2RldGFpbCcpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5kZXNjcmlwdGlvbikuZXF1YWxzKCdBIHZlcnkgdXNlZnVsIGtleXdvcmQnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2FwcGx5VGV4dEVkaXRUb1N1Z2dlc3Rpb24nLCAoKSA9PiB7XG4gICAgY29uc3QgYmFzaWNDb21wbGV0aW9uSXRlbTogbHMuQ29tcGxldGlvbkl0ZW0gPSB7XG4gICAgICBsYWJlbDogJ2xhYmVsJyxcbiAgICAgIGtpbmQ6IGxzLkNvbXBsZXRpb25JdGVtS2luZC5LZXl3b3JkLFxuICAgICAgZGV0YWlsOiAnZGV0YWlsJyxcbiAgICAgIGRvY3VtZW50YXRpb246ICdBbiBpbmNyZWRpYmxlIGtleXdvcmQnLFxuICAgIH07XG5cbiAgICBpdCgnZG9lcyBub3QgZG8gYW55dGhpbmcgaWYgdGhlcmUgaXMgbm8gdGV4dEVkaXQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb21wbGV0aW9uSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGJhc2ljQ29tcGxldGlvbkl0ZW0pO1xuICAgICAgQXV0b0NvbXBsZXRlQWRhcHRlci5hcHBseVRleHRFZGl0VG9TdWdnZXN0aW9uKG51bGwsIG5ldyBUZXh0RWRpdG9yKCksIGNvbXBsZXRpb25JdGVtKTtcbiAgICAgIGV4cGVjdChjb21wbGV0aW9uSXRlbSkuZGVlcC5lcXVhbHMoYmFzaWNDb21wbGV0aW9uSXRlbSk7XG4gICAgfSk7XG5cbiAgICBpdCgnYXBwbGllcyBjaGFuZ2VzIGZyb20gVGV4dEVkaXQgdG8gcmVwbGFjZW1lbnRQcmVmaXggYW5kIHRleHQnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXh0RWRpdCA9IHtcbiAgICAgICAgcmFuZ2U6IHtzdGFydDoge2xpbmU6IDEsIGNoYXJhY3RlcjogMn0sIGVuZDoge2xpbmU6IDMsIGNoYXJhY3RlcjogNH19LFxuICAgICAgICBuZXdUZXh0OiAnbmV3VGV4dCcsXG4gICAgICB9O1xuICAgICAgY29uc3QgZWRpdG9yID0gbmV3IFRleHRFZGl0b3IoKTtcbiAgICAgIHNpbm9uLnN0dWIoZWRpdG9yLCAnZ2V0VGV4dEluQnVmZmVyUmFuZ2UnKS5yZXR1cm5zKCdyZXBsYWNlbWVudFByZWZpeCcpO1xuXG4gICAgICBjb25zdCBjb21wbGV0aW9uSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGJhc2ljQ29tcGxldGlvbkl0ZW0pO1xuICAgICAgQXV0b0NvbXBsZXRlQWRhcHRlci5hcHBseVRleHRFZGl0VG9TdWdnZXN0aW9uKHRleHRFZGl0LCBlZGl0b3IsIGNvbXBsZXRpb25JdGVtKTtcbiAgICAgIGV4cGVjdChjb21wbGV0aW9uSXRlbS5yZXBsYWNlbWVudFByZWZpeCkuZXF1YWxzKCdyZXBsYWNlbWVudFByZWZpeCcpO1xuICAgICAgZXhwZWN0KGNvbXBsZXRpb25JdGVtLnRleHQpLmVxdWFscygnbmV3VGV4dCcpO1xuICAgICAgZXhwZWN0KGVkaXRvci5nZXRUZXh0SW5CdWZmZXJSYW5nZS5jYWxsZWRPbmNlKS5lcXVhbHModHJ1ZSk7XG4gICAgICBleHBlY3QoZWRpdG9yLmdldFRleHRJbkJ1ZmZlclJhbmdlLmdldENhbGwoMCkuYXJncykuZGVlcC5lcXVhbHMoW25ldyBSYW5nZShuZXcgUG9pbnQoMSwgMiksIG5ldyBQb2ludCgzLCA0KSldKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZScsICgpID0+IHtcbiAgICBpdCgnY29udmVydHMgTFNQIENvbXBsZXRpb25LaW5kcyB0byBBdXRvQ29tcGxldGUgU3VnZ2VzdGlvblR5cGVzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdmFyaWFibGUgPSBBdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZShscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGUpO1xuICAgICAgY29uc3QgY29uc3RydWN0b3IgPSBBdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZShscy5Db21wbGV0aW9uSXRlbUtpbmQuQ29uc3RydWN0b3IpO1xuICAgICAgY29uc3QgbW9kdWxlID0gQXV0b0NvbXBsZXRlQWRhcHRlci5jb21wbGV0aW9uS2luZFRvU3VnZ2VzdGlvblR5cGUobHMuQ29tcGxldGlvbkl0ZW1LaW5kLk1vZHVsZSk7XG4gICAgICBleHBlY3QodmFyaWFibGUpLmVxdWFscygndmFyaWFibGUnKTtcbiAgICAgIGV4cGVjdChjb25zdHJ1Y3RvcikuZXF1YWxzKCdmdW5jdGlvbicpO1xuICAgICAgZXhwZWN0KG1vZHVsZSkuZXF1YWxzKCdtb2R1bGUnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkZWZhdWx0cyB0byBcInZhbHVlXCInLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBBdXRvQ29tcGxldGVBZGFwdGVyLmNvbXBsZXRpb25LaW5kVG9TdWdnZXN0aW9uVHlwZShudWxsKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLmVxdWFscygndmFsdWUnKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==