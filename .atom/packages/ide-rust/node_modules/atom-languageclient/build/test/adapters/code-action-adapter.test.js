"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const atom_1 = require("atom");
const chai_1 = require("chai");
const sinon = require("sinon");
const ls = require("../../lib/languageclient");
const code_action_adapter_1 = require("../../lib/adapters/code-action-adapter");
const linter_push_v2_adapter_1 = require("../../lib/adapters/linter-push-v2-adapter");
const helpers_js_1 = require("../helpers.js");
describe('CodeActionAdapter', () => {
    describe('canAdapt', () => {
        it('returns true if range formatting is supported', () => {
            const result = code_action_adapter_1.default.canAdapt({
                codeActionProvider: true,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false it no formatting supported', () => {
            const result = code_action_adapter_1.default.canAdapt({});
            chai_1.expect(result).to.be.false;
        });
    });
    describe('getCodeActions', () => {
        it('fetches code actions from the connection', () => __awaiter(this, void 0, void 0, function* () {
            const connection = helpers_js_1.createSpyConnection();
            const languageClient = new ls.LanguageClientConnection(connection);
            const testCommand = {
                command: 'testCommand',
                title: 'Test Command',
                arguments: ['a', 'b'],
            };
            sinon.stub(languageClient, 'codeAction').returns(Promise.resolve([testCommand]));
            sinon.spy(languageClient, 'executeCommand');
            const linterAdapter = new linter_push_v2_adapter_1.default(languageClient);
            sinon.stub(linterAdapter, 'getDiagnosticCode').returns('test code');
            const testPath = '/test.txt';
            const actions = yield code_action_adapter_1.default.getCodeActions(languageClient, { codeActionProvider: true }, linterAdapter, helpers_js_1.createFakeEditor(testPath), new atom_1.Range([1, 2], [3, 4]), [
                {
                    filePath: testPath,
                    type: 'Error',
                    text: 'test message',
                    range: new atom_1.Range([1, 2], [3, 3]),
                    providerName: 'test linter',
                },
            ]);
            chai_1.expect(languageClient.codeAction.called).to.be.true;
            const args = languageClient.codeAction.getCalls()[0].args;
            const params = args[0];
            chai_1.expect(params.textDocument.uri).to.equal('file://' + testPath);
            chai_1.expect(params.range).to.deep.equal({
                start: { line: 1, character: 2 },
                end: { line: 3, character: 4 },
            });
            chai_1.expect(params.context.diagnostics).to.deep.equal([
                {
                    range: {
                        start: { line: 1, character: 2 },
                        end: { line: 3, character: 3 },
                    },
                    severity: ls.DiagnosticSeverity.Error,
                    code: 'test code',
                    source: 'test linter',
                    message: 'test message',
                },
            ]);
            chai_1.expect(actions.length).to.equal(1);
            const codeAction = actions[0];
            chai_1.expect(yield codeAction.getTitle()).to.equal('Test Command');
            yield codeAction.apply();
            chai_1.expect(languageClient.executeCommand.called).to.be.true;
            chai_1.expect(languageClient.executeCommand.getCalls()[0].args).to.deep.equal([
                {
                    command: 'testCommand',
                    arguments: ['a', 'b'],
                },
            ]);
        }));
    });
});
//# sourceMappingURL=data:application/json;base64,