var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _atom = require('atom');

var _chai = require('chai');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _codeHighlightAdapter = require('../../lib/adapters/code-highlight-adapter');

var _codeHighlightAdapter2 = _interopRequireDefault(_codeHighlightAdapter);

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('CodeHighlightAdapter', () => {
  let fakeEditor;
  let connection;

  beforeEach(() => {
    connection = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
    fakeEditor = (0, _helpers.createFakeEditor)();
  });

  describe('canAdapt', () => {
    it('returns true if document highlights are supported', () => {
      const result = _codeHighlightAdapter2.default.canAdapt({
        documentHighlightProvider: true
      });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false it no formatting supported', () => {
      const result = _codeHighlightAdapter2.default.canAdapt({});
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('highlight', () => {
    it('highlights some ranges', async () => {
      const highlightStub = _sinon2.default.stub(connection, 'documentHighlight').returns(Promise.resolve([{
        range: {
          start: { line: 0, character: 1 },
          end: { line: 0, character: 2 }
        }
      }]));
      const result = await _codeHighlightAdapter2.default.highlight(connection, { documentHighlightProvider: true }, fakeEditor, new _atom.Point(0, 0));
      (0, _chai.expect)(highlightStub.called).to.be.true;

      (0, _assert2.default)(result != null);
      (0, _chai.expect)(result.length).to.equal(1);
      (0, _chai.expect)(result[0].isEqual(new _atom.Range([0, 1], [0, 2]))).to.be.true;
    });

    it('throws if document highlights are not supported', async () => {
      const result = await _codeHighlightAdapter2.default.highlight(connection, {}, fakeEditor, new _atom.Point(0, 0)).catch(err => err);
      (0, _chai.expect)(result).to.be.an.instanceof(Error);
      (0, _assert2.default)(result instanceof Error);
      (0, _chai.expect)(result.message).to.equal('Must have the documentHighlight capability');
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvY29kZS1oaWdobGlnaHQtYWRhcHRlci50ZXN0LmpzIl0sIm5hbWVzIjpbImxzIiwiZGVzY3JpYmUiLCJmYWtlRWRpdG9yIiwiY29ubmVjdGlvbiIsImJlZm9yZUVhY2giLCJMYW5ndWFnZUNsaWVudENvbm5lY3Rpb24iLCJpdCIsInJlc3VsdCIsImNhbkFkYXB0IiwiZG9jdW1lbnRIaWdobGlnaHRQcm92aWRlciIsInRvIiwiYmUiLCJ0cnVlIiwiZmFsc2UiLCJoaWdobGlnaHRTdHViIiwic3R1YiIsInJldHVybnMiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJhbmdlIiwic3RhcnQiLCJsaW5lIiwiY2hhcmFjdGVyIiwiZW5kIiwiaGlnaGxpZ2h0IiwiY2FsbGVkIiwibGVuZ3RoIiwiZXF1YWwiLCJpc0VxdWFsIiwiY2F0Y2giLCJlcnIiLCJhbiIsImluc3RhbmNlb2YiLCJFcnJvciIsIm1lc3NhZ2UiXSwibWFwcGluZ3MiOiJBQUVBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7SUFBWUEsRTs7QUFDWjs7OztBQUNBOzs7Ozs7QUFFQUMsU0FBUyxzQkFBVCxFQUFpQyxNQUFNO0FBQ3JDLE1BQUlDLFVBQUo7QUFDQSxNQUFJQyxVQUFKOztBQUVBQyxhQUFXLE1BQU07QUFDZkQsaUJBQWEsSUFBSUgsR0FBR0ssd0JBQVAsQ0FBZ0MsbUNBQWhDLENBQWI7QUFDQUgsaUJBQWEsZ0NBQWI7QUFDRCxHQUhEOztBQUtBRCxXQUFTLFVBQVQsRUFBcUIsTUFBTTtBQUN6QkssT0FBRyxtREFBSCxFQUF3RCxNQUFNO0FBQzVELFlBQU1DLFNBQVMsK0JBQXFCQyxRQUFyQixDQUE4QjtBQUMzQ0MsbUNBQTJCO0FBRGdCLE9BQTlCLENBQWY7QUFHQSx3QkFBT0YsTUFBUCxFQUFlRyxFQUFmLENBQWtCQyxFQUFsQixDQUFxQkMsSUFBckI7QUFDRCxLQUxEOztBQU9BTixPQUFHLDBDQUFILEVBQStDLE1BQU07QUFDbkQsWUFBTUMsU0FBUywrQkFBcUJDLFFBQXJCLENBQThCLEVBQTlCLENBQWY7QUFDQSx3QkFBT0QsTUFBUCxFQUFlRyxFQUFmLENBQWtCQyxFQUFsQixDQUFxQkUsS0FBckI7QUFDRCxLQUhEO0FBSUQsR0FaRDs7QUFjQVosV0FBUyxXQUFULEVBQXNCLE1BQU07QUFDMUJLLE9BQUcsd0JBQUgsRUFBNkIsWUFBWTtBQUN2QyxZQUFNUSxnQkFBZ0IsZ0JBQU1DLElBQU4sQ0FBV1osVUFBWCxFQUF1QixtQkFBdkIsRUFBNENhLE9BQTVDLENBQ3BCQyxRQUFRQyxPQUFSLENBQWdCLENBQ2Q7QUFDRUMsZUFBTztBQUNMQyxpQkFBTyxFQUFDQyxNQUFNLENBQVAsRUFBVUMsV0FBVyxDQUFyQixFQURGO0FBRUxDLGVBQUssRUFBQ0YsTUFBTSxDQUFQLEVBQVVDLFdBQVcsQ0FBckI7QUFGQTtBQURULE9BRGMsQ0FBaEIsQ0FEb0IsQ0FBdEI7QUFVQSxZQUFNZixTQUFTLE1BQU0sK0JBQXFCaUIsU0FBckIsQ0FDbkJyQixVQURtQixFQUVuQixFQUFDTSwyQkFBMkIsSUFBNUIsRUFGbUIsRUFHbkJQLFVBSG1CLEVBSW5CLGdCQUFVLENBQVYsRUFBYSxDQUFiLENBSm1CLENBQXJCO0FBTUEsd0JBQU9ZLGNBQWNXLE1BQXJCLEVBQTZCZixFQUE3QixDQUFnQ0MsRUFBaEMsQ0FBbUNDLElBQW5DOztBQUVBLDRCQUFVTCxVQUFVLElBQXBCO0FBQ0Esd0JBQU9BLE9BQU9tQixNQUFkLEVBQXNCaEIsRUFBdEIsQ0FBeUJpQixLQUF6QixDQUErQixDQUEvQjtBQUNBLHdCQUFPcEIsT0FBTyxDQUFQLEVBQVVxQixPQUFWLENBQWtCLGdCQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBVixFQUFrQixDQUFDLENBQUQsRUFBSSxDQUFKLENBQWxCLENBQWxCLENBQVAsRUFBcURsQixFQUFyRCxDQUF3REMsRUFBeEQsQ0FBMkRDLElBQTNEO0FBQ0QsS0F0QkQ7O0FBd0JBTixPQUFHLGlEQUFILEVBQXNELFlBQVk7QUFDaEUsWUFBTUMsU0FBUyxNQUFNLCtCQUFxQmlCLFNBQXJCLENBQStCckIsVUFBL0IsRUFBMkMsRUFBM0MsRUFBK0NELFVBQS9DLEVBQTJELGdCQUFVLENBQVYsRUFBYSxDQUFiLENBQTNELEVBQTRFMkIsS0FBNUUsQ0FDbkJDLE9BQU9BLEdBRFksQ0FBckI7QUFHQSx3QkFBT3ZCLE1BQVAsRUFBZUcsRUFBZixDQUFrQkMsRUFBbEIsQ0FBcUJvQixFQUFyQixDQUF3QkMsVUFBeEIsQ0FBbUNDLEtBQW5DO0FBQ0EsNEJBQVUxQixrQkFBa0IwQixLQUE1QjtBQUNBLHdCQUFPMUIsT0FBTzJCLE9BQWQsRUFBdUJ4QixFQUF2QixDQUEwQmlCLEtBQTFCLENBQWdDLDRDQUFoQztBQUNELEtBUEQ7QUFRRCxHQWpDRDtBQWtDRCxDQXpERCIsImZpbGUiOiJjb2RlLWhpZ2hsaWdodC1hZGFwdGVyLnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xyXG5cclxuaW1wb3J0IGludmFyaWFudCBmcm9tICdhc3NlcnQnO1xyXG5pbXBvcnQge1BvaW50LCBSYW5nZX0gZnJvbSAnYXRvbSc7XHJcbmltcG9ydCB7ZXhwZWN0fSBmcm9tICdjaGFpJztcclxuaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcclxuaW1wb3J0ICogYXMgbHMgZnJvbSAnLi4vLi4vbGliL2xhbmd1YWdlY2xpZW50JztcclxuaW1wb3J0IENvZGVIaWdobGlnaHRBZGFwdGVyIGZyb20gJy4uLy4uL2xpYi9hZGFwdGVycy9jb2RlLWhpZ2hsaWdodC1hZGFwdGVyJztcclxuaW1wb3J0IHtjcmVhdGVTcHlDb25uZWN0aW9uLCBjcmVhdGVGYWtlRWRpdG9yfSBmcm9tICcuLi9oZWxwZXJzLmpzJztcclxuXHJcbmRlc2NyaWJlKCdDb2RlSGlnaGxpZ2h0QWRhcHRlcicsICgpID0+IHtcclxuICBsZXQgZmFrZUVkaXRvcjtcclxuICBsZXQgY29ubmVjdGlvbjtcclxuXHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBjb25uZWN0aW9uID0gbmV3IGxzLkxhbmd1YWdlQ2xpZW50Q29ubmVjdGlvbihjcmVhdGVTcHlDb25uZWN0aW9uKCkpO1xyXG4gICAgZmFrZUVkaXRvciA9IGNyZWF0ZUZha2VFZGl0b3IoKTtcclxuICB9KTtcclxuXHJcbiAgZGVzY3JpYmUoJ2NhbkFkYXB0JywgKCkgPT4ge1xyXG4gICAgaXQoJ3JldHVybnMgdHJ1ZSBpZiBkb2N1bWVudCBoaWdobGlnaHRzIGFyZSBzdXBwb3J0ZWQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IENvZGVIaWdobGlnaHRBZGFwdGVyLmNhbkFkYXB0KHtcclxuICAgICAgICBkb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyOiB0cnVlLFxyXG4gICAgICB9KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUudHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdyZXR1cm5zIGZhbHNlIGl0IG5vIGZvcm1hdHRpbmcgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBDb2RlSGlnaGxpZ2h0QWRhcHRlci5jYW5BZGFwdCh7fSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmZhbHNlO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdoaWdobGlnaHQnLCAoKSA9PiB7XHJcbiAgICBpdCgnaGlnaGxpZ2h0cyBzb21lIHJhbmdlcycsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgaGlnaGxpZ2h0U3R1YiA9IHNpbm9uLnN0dWIoY29ubmVjdGlvbiwgJ2RvY3VtZW50SGlnaGxpZ2h0JykucmV0dXJucyhcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUoW1xyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICByYW5nZToge1xyXG4gICAgICAgICAgICAgIHN0YXJ0OiB7bGluZTogMCwgY2hhcmFjdGVyOiAxfSxcclxuICAgICAgICAgICAgICBlbmQ6IHtsaW5lOiAwLCBjaGFyYWN0ZXI6IDJ9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICBdKSxcclxuICAgICAgKTtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQ29kZUhpZ2hsaWdodEFkYXB0ZXIuaGlnaGxpZ2h0KFxyXG4gICAgICAgIGNvbm5lY3Rpb24sXHJcbiAgICAgICAge2RvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXI6IHRydWV9LFxyXG4gICAgICAgIGZha2VFZGl0b3IsXHJcbiAgICAgICAgbmV3IFBvaW50KDAsIDApLFxyXG4gICAgICApO1xyXG4gICAgICBleHBlY3QoaGlnaGxpZ2h0U3R1Yi5jYWxsZWQpLnRvLmJlLnRydWU7XHJcblxyXG4gICAgICBpbnZhcmlhbnQocmVzdWx0ICE9IG51bGwpO1xyXG4gICAgICBleHBlY3QocmVzdWx0Lmxlbmd0aCkudG8uZXF1YWwoMSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHRbMF0uaXNFcXVhbChuZXcgUmFuZ2UoWzAsIDFdLCBbMCwgMl0pKSkudG8uYmUudHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCd0aHJvd3MgaWYgZG9jdW1lbnQgaGlnaGxpZ2h0cyBhcmUgbm90IHN1cHBvcnRlZCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgQ29kZUhpZ2hsaWdodEFkYXB0ZXIuaGlnaGxpZ2h0KGNvbm5lY3Rpb24sIHt9LCBmYWtlRWRpdG9yLCBuZXcgUG9pbnQoMCwgMCkpLmNhdGNoKFxyXG4gICAgICAgIGVyciA9PiBlcnIsXHJcbiAgICAgICk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmFuLmluc3RhbmNlb2YoRXJyb3IpO1xyXG4gICAgICBpbnZhcmlhbnQocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpO1xyXG4gICAgICBleHBlY3QocmVzdWx0Lm1lc3NhZ2UpLnRvLmVxdWFsKCdNdXN0IGhhdmUgdGhlIGRvY3VtZW50SGlnaGxpZ2h0IGNhcGFiaWxpdHknKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KTtcclxuIl19