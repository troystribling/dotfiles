var _chai = require('chai');

var _languageclient = require('../../lib/languageclient');

var _documentSyncAdapter = require('../../lib/adapters/document-sync-adapter');

var _documentSyncAdapter2 = _interopRequireDefault(_documentSyncAdapter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('DocumentSyncAdapter', () => {
  describe('canAdapt', () => {
    it('returns true if v2 incremental change notifications are supported', () => {
      const result = _documentSyncAdapter2.default.canAdapt({ textDocumentSync: _languageclient.TextDocumentSyncKind.Incremental });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns true if v2 full change notifications are supported', () => {
      const result = _documentSyncAdapter2.default.canAdapt({ textDocumentSync: _languageclient.TextDocumentSyncKind.Full });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false if v2 none change notifications are supported', () => {
      const result = _documentSyncAdapter2.default.canAdapt({ textDocumentSync: _languageclient.TextDocumentSyncKind.None });
      (0, _chai.expect)(result).to.be.false;
    });

    it('returns true if v3 incremental change notifications are supported', () => {
      const result = _documentSyncAdapter2.default.canAdapt({ textDocumentSync: { change: _languageclient.TextDocumentSyncKind.Incremental } });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns true if v3 full change notifications are supported', () => {
      const result = _documentSyncAdapter2.default.canAdapt({ textDocumentSync: { change: _languageclient.TextDocumentSyncKind.Full } });
      (0, _chai.expect)(result).to.be.true;
    });

    it('returns false if v3 none change notifications are supported', () => {
      const result = _documentSyncAdapter2.default.canAdapt({ textDocumentSync: { change: _languageclient.TextDocumentSyncKind.None } });
      (0, _chai.expect)(result).to.be.false;
    });
  });

  describe('constructor', () => {
    function create(textDocumentSync) {
      return new _documentSyncAdapter2.default(null, textDocumentSync, null);
    }

    it('sets _documentSyncKind correctly Incremental for v2 capabilities', () => {
      const result = create(_languageclient.TextDocumentSyncKind.Incremental)._documentSyncKind;
      (0, _chai.expect)(result).equals(_languageclient.TextDocumentSyncKind.Incremental);
    });

    it('sets _documentSyncKind correctly Full for v2 capabilities', () => {
      const result = create(_languageclient.TextDocumentSyncKind.Full)._documentSyncKind;
      (0, _chai.expect)(result).equals(_languageclient.TextDocumentSyncKind.Full);
    });

    it('sets _documentSyncKind correctly Incremental for v3 capabilities', () => {
      const result = create({ change: _languageclient.TextDocumentSyncKind.Incremental })._documentSyncKind;
      (0, _chai.expect)(result).equals(_languageclient.TextDocumentSyncKind.Incremental);
    });

    it('sets _documentSyncKind correctly Full for v3 capabilities', () => {
      const result = create({ change: _languageclient.TextDocumentSyncKind.Full })._documentSyncKind;
      (0, _chai.expect)(result).equals(_languageclient.TextDocumentSyncKind.Full);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvYWRhcHRlcnMvZG9jdW1lbnQtc3luYy1hZGFwdGVyLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsInJlc3VsdCIsImNhbkFkYXB0IiwidGV4dERvY3VtZW50U3luYyIsIkluY3JlbWVudGFsIiwidG8iLCJiZSIsInRydWUiLCJGdWxsIiwiTm9uZSIsImZhbHNlIiwiY2hhbmdlIiwiY3JlYXRlIiwiX2RvY3VtZW50U3luY0tpbmQiLCJlcXVhbHMiXSwibWFwcGluZ3MiOiJBQUVBOztBQUNBOztBQUNBOzs7Ozs7QUFFQUEsU0FBUyxxQkFBVCxFQUFnQyxNQUFNO0FBQ3BDQSxXQUFTLFVBQVQsRUFBcUIsTUFBTTtBQUN6QkMsT0FBRyxtRUFBSCxFQUF3RSxNQUFNO0FBQzVFLFlBQU1DLFNBQVMsOEJBQW9CQyxRQUFwQixDQUE2QixFQUFFQyxrQkFBa0IscUNBQXFCQyxXQUF6QyxFQUE3QixDQUFmO0FBQ0Esd0JBQU9ILE1BQVAsRUFBZUksRUFBZixDQUFrQkMsRUFBbEIsQ0FBcUJDLElBQXJCO0FBQ0QsS0FIRDs7QUFLQVAsT0FBRyw0REFBSCxFQUFpRSxNQUFNO0FBQ3JFLFlBQU1DLFNBQVMsOEJBQW9CQyxRQUFwQixDQUE2QixFQUFFQyxrQkFBa0IscUNBQXFCSyxJQUF6QyxFQUE3QixDQUFmO0FBQ0Esd0JBQU9QLE1BQVAsRUFBZUksRUFBZixDQUFrQkMsRUFBbEIsQ0FBcUJDLElBQXJCO0FBQ0QsS0FIRDs7QUFLQVAsT0FBRyw2REFBSCxFQUFrRSxNQUFNO0FBQ3RFLFlBQU1DLFNBQVMsOEJBQW9CQyxRQUFwQixDQUE2QixFQUFFQyxrQkFBa0IscUNBQXFCTSxJQUF6QyxFQUE3QixDQUFmO0FBQ0Esd0JBQU9SLE1BQVAsRUFBZUksRUFBZixDQUFrQkMsRUFBbEIsQ0FBcUJJLEtBQXJCO0FBQ0QsS0FIRDs7QUFLQVYsT0FBRyxtRUFBSCxFQUF3RSxNQUFNO0FBQzVFLFlBQU1DLFNBQVMsOEJBQW9CQyxRQUFwQixDQUE2QixFQUFFQyxrQkFBa0IsRUFBRVEsUUFBUSxxQ0FBcUJQLFdBQS9CLEVBQXBCLEVBQTdCLENBQWY7QUFDQSx3QkFBT0gsTUFBUCxFQUFlSSxFQUFmLENBQWtCQyxFQUFsQixDQUFxQkMsSUFBckI7QUFDRCxLQUhEOztBQUtBUCxPQUFHLDREQUFILEVBQWlFLE1BQU07QUFDckUsWUFBTUMsU0FBUyw4QkFBb0JDLFFBQXBCLENBQTZCLEVBQUVDLGtCQUFrQixFQUFFUSxRQUFRLHFDQUFxQkgsSUFBL0IsRUFBcEIsRUFBN0IsQ0FBZjtBQUNBLHdCQUFPUCxNQUFQLEVBQWVJLEVBQWYsQ0FBa0JDLEVBQWxCLENBQXFCQyxJQUFyQjtBQUNELEtBSEQ7O0FBS0FQLE9BQUcsNkRBQUgsRUFBa0UsTUFBTTtBQUN0RSxZQUFNQyxTQUFTLDhCQUFvQkMsUUFBcEIsQ0FBNkIsRUFBRUMsa0JBQWtCLEVBQUVRLFFBQVEscUNBQXFCRixJQUEvQixFQUFwQixFQUE3QixDQUFmO0FBQ0Esd0JBQU9SLE1BQVAsRUFBZUksRUFBZixDQUFrQkMsRUFBbEIsQ0FBcUJJLEtBQXJCO0FBQ0QsS0FIRDtBQUlELEdBOUJEOztBQWdDQVgsV0FBUyxhQUFULEVBQXdCLE1BQU07QUFDNUIsYUFBU2EsTUFBVCxDQUFnQlQsZ0JBQWhCLEVBQWtDO0FBQ2hDLGFBQU8sa0NBQXdCLElBQXhCLEVBQThCQSxnQkFBOUIsRUFBZ0QsSUFBaEQsQ0FBUDtBQUNEOztBQUVESCxPQUFHLGtFQUFILEVBQXVFLE1BQU07QUFDM0UsWUFBTUMsU0FBU1csT0FBTyxxQ0FBcUJSLFdBQTVCLEVBQXlDUyxpQkFBeEQ7QUFDQSx3QkFBT1osTUFBUCxFQUFlYSxNQUFmLENBQXNCLHFDQUFxQlYsV0FBM0M7QUFDRCxLQUhEOztBQUtBSixPQUFHLDJEQUFILEVBQWdFLE1BQU07QUFDcEUsWUFBTUMsU0FBU1csT0FBTyxxQ0FBcUJKLElBQTVCLEVBQWtDSyxpQkFBakQ7QUFDQSx3QkFBT1osTUFBUCxFQUFlYSxNQUFmLENBQXNCLHFDQUFxQk4sSUFBM0M7QUFDRCxLQUhEOztBQUtBUixPQUFHLGtFQUFILEVBQXVFLE1BQU07QUFDM0UsWUFBTUMsU0FBU1csT0FBTyxFQUFFRCxRQUFRLHFDQUFxQlAsV0FBL0IsRUFBUCxFQUFxRFMsaUJBQXBFO0FBQ0Esd0JBQU9aLE1BQVAsRUFBZWEsTUFBZixDQUFzQixxQ0FBcUJWLFdBQTNDO0FBQ0QsS0FIRDs7QUFLQUosT0FBRywyREFBSCxFQUFnRSxNQUFNO0FBQ3BFLFlBQU1DLFNBQVNXLE9BQU8sRUFBRUQsUUFBUSxxQ0FBcUJILElBQS9CLEVBQVAsRUFBOENLLGlCQUE3RDtBQUNBLHdCQUFPWixNQUFQLEVBQWVhLE1BQWYsQ0FBc0IscUNBQXFCTixJQUEzQztBQUNELEtBSEQ7QUFJRCxHQXhCRDtBQXlCRCxDQTFERCIsImZpbGUiOiJkb2N1bWVudC1zeW5jLWFkYXB0ZXIudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7ZXhwZWN0fSBmcm9tICdjaGFpJztcbmltcG9ydCB7VGV4dERvY3VtZW50U3luY0tpbmR9IGZyb20gJy4uLy4uL2xpYi9sYW5ndWFnZWNsaWVudCc7XG5pbXBvcnQgRG9jdW1lbnRTeW5jQWRhcHRlciBmcm9tICcuLi8uLi9saWIvYWRhcHRlcnMvZG9jdW1lbnQtc3luYy1hZGFwdGVyJztcblxuZGVzY3JpYmUoJ0RvY3VtZW50U3luY0FkYXB0ZXInLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjYW5BZGFwdCcsICgpID0+IHtcbiAgICBpdCgncmV0dXJucyB0cnVlIGlmIHYyIGluY3JlbWVudGFsIGNoYW5nZSBub3RpZmljYXRpb25zIGFyZSBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBEb2N1bWVudFN5bmNBZGFwdGVyLmNhbkFkYXB0KHsgdGV4dERvY3VtZW50U3luYzogVGV4dERvY3VtZW50U3luY0tpbmQuSW5jcmVtZW50YWwgfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS50cnVlO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgdHJ1ZSBpZiB2MiBmdWxsIGNoYW5nZSBub3RpZmljYXRpb25zIGFyZSBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBEb2N1bWVudFN5bmNBZGFwdGVyLmNhbkFkYXB0KHsgdGV4dERvY3VtZW50U3luYzogVGV4dERvY3VtZW50U3luY0tpbmQuRnVsbCB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLnRydWU7XG4gICAgfSk7XG5cbiAgICBpdCgncmV0dXJucyBmYWxzZSBpZiB2MiBub25lIGNoYW5nZSBub3RpZmljYXRpb25zIGFyZSBzdXBwb3J0ZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBEb2N1bWVudFN5bmNBZGFwdGVyLmNhbkFkYXB0KHsgdGV4dERvY3VtZW50U3luYzogVGV4dERvY3VtZW50U3luY0tpbmQuTm9uZSB9KTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmZhbHNlO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgdHJ1ZSBpZiB2MyBpbmNyZW1lbnRhbCBjaGFuZ2Ugbm90aWZpY2F0aW9ucyBhcmUgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gRG9jdW1lbnRTeW5jQWRhcHRlci5jYW5BZGFwdCh7IHRleHREb2N1bWVudFN5bmM6IHsgY2hhbmdlOiBUZXh0RG9jdW1lbnRTeW5jS2luZC5JbmNyZW1lbnRhbCB9IH0pO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUudHJ1ZTtcbiAgICB9KTtcblxuICAgIGl0KCdyZXR1cm5zIHRydWUgaWYgdjMgZnVsbCBjaGFuZ2Ugbm90aWZpY2F0aW9ucyBhcmUgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gRG9jdW1lbnRTeW5jQWRhcHRlci5jYW5BZGFwdCh7IHRleHREb2N1bWVudFN5bmM6IHsgY2hhbmdlOiBUZXh0RG9jdW1lbnRTeW5jS2luZC5GdWxsIH0gfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS50cnVlO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgZmFsc2UgaWYgdjMgbm9uZSBjaGFuZ2Ugbm90aWZpY2F0aW9ucyBhcmUgc3VwcG9ydGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gRG9jdW1lbnRTeW5jQWRhcHRlci5jYW5BZGFwdCh7IHRleHREb2N1bWVudFN5bmM6IHsgY2hhbmdlOiBUZXh0RG9jdW1lbnRTeW5jS2luZC5Ob25lIH0gfSk7XG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS5mYWxzZTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbnN0cnVjdG9yJywgKCkgPT4ge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0ZXh0RG9jdW1lbnRTeW5jKSB7XG4gICAgICByZXR1cm4gbmV3IERvY3VtZW50U3luY0FkYXB0ZXIobnVsbCwgdGV4dERvY3VtZW50U3luYywgbnVsbCk7XG4gICAgfVxuXG4gICAgaXQoJ3NldHMgX2RvY3VtZW50U3luY0tpbmQgY29ycmVjdGx5IEluY3JlbWVudGFsIGZvciB2MiBjYXBhYmlsaXRpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoVGV4dERvY3VtZW50U3luY0tpbmQuSW5jcmVtZW50YWwpLl9kb2N1bWVudFN5bmNLaW5kO1xuICAgICAgZXhwZWN0KHJlc3VsdCkuZXF1YWxzKFRleHREb2N1bWVudFN5bmNLaW5kLkluY3JlbWVudGFsKTtcbiAgICB9KTtcblxuICAgIGl0KCdzZXRzIF9kb2N1bWVudFN5bmNLaW5kIGNvcnJlY3RseSBGdWxsIGZvciB2MiBjYXBhYmlsaXRpZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBjcmVhdGUoVGV4dERvY3VtZW50U3luY0tpbmQuRnVsbCkuX2RvY3VtZW50U3luY0tpbmQ7XG4gICAgICBleHBlY3QocmVzdWx0KS5lcXVhbHMoVGV4dERvY3VtZW50U3luY0tpbmQuRnVsbCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2V0cyBfZG9jdW1lbnRTeW5jS2luZCBjb3JyZWN0bHkgSW5jcmVtZW50YWwgZm9yIHYzIGNhcGFiaWxpdGllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSh7IGNoYW5nZTogVGV4dERvY3VtZW50U3luY0tpbmQuSW5jcmVtZW50YWwgfSkuX2RvY3VtZW50U3luY0tpbmQ7XG4gICAgICBleHBlY3QocmVzdWx0KS5lcXVhbHMoVGV4dERvY3VtZW50U3luY0tpbmQuSW5jcmVtZW50YWwpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3NldHMgX2RvY3VtZW50U3luY0tpbmQgY29ycmVjdGx5IEZ1bGwgZm9yIHYzIGNhcGFiaWxpdGllcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSh7IGNoYW5nZTogVGV4dERvY3VtZW50U3luY0tpbmQuRnVsbCB9KS5fZG9jdW1lbnRTeW5jS2luZDtcbiAgICAgIGV4cGVjdChyZXN1bHQpLmVxdWFscyhUZXh0RG9jdW1lbnRTeW5jS2luZC5GdWxsKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==