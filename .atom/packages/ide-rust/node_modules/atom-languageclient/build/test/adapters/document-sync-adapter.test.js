"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const languageclient_1 = require("../../lib/languageclient");
const document_sync_adapter_1 = require("../../lib/adapters/document-sync-adapter");
describe('DocumentSyncAdapter', () => {
    describe('canAdapt', () => {
        it('returns true if v2 incremental change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: languageclient_1.TextDocumentSyncKind.Incremental,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns true if v2 full change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: languageclient_1.TextDocumentSyncKind.Full,
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false if v2 none change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: languageclient_1.TextDocumentSyncKind.None,
            });
            chai_1.expect(result).to.be.false;
        });
        it('returns true if v3 incremental change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: { change: languageclient_1.TextDocumentSyncKind.Incremental },
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns true if v3 full change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: { change: languageclient_1.TextDocumentSyncKind.Full },
            });
            chai_1.expect(result).to.be.true;
        });
        it('returns false if v3 none change notifications are supported', () => {
            const result = document_sync_adapter_1.default.canAdapt({
                textDocumentSync: { change: languageclient_1.TextDocumentSyncKind.None },
            });
            chai_1.expect(result).to.be.false;
        });
    });
    describe('constructor', () => {
        function create(textDocumentSync) {
            return new document_sync_adapter_1.default(null, textDocumentSync, () => false);
        }
        it('sets _documentSyncKind correctly Incremental for v2 capabilities', () => {
            const result = create(languageclient_1.TextDocumentSyncKind.Incremental)._documentSyncKind;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Incremental);
        });
        it('sets _documentSyncKind correctly Full for v2 capabilities', () => {
            const result = create(languageclient_1.TextDocumentSyncKind.Full)._documentSyncKind;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Full);
        });
        it('sets _documentSyncKind correctly Incremental for v3 capabilities', () => {
            const result = create({ change: languageclient_1.TextDocumentSyncKind.Incremental })._documentSyncKind;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Incremental);
        });
        it('sets _documentSyncKind correctly Full for v3 capabilities', () => {
            const result = create({ change: languageclient_1.TextDocumentSyncKind.Full })._documentSyncKind;
            chai_1.expect(result).equals(languageclient_1.TextDocumentSyncKind.Full);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQtc3luYy1hZGFwdGVyLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L2FkYXB0ZXJzL2RvY3VtZW50LXN5bmMtYWRhcHRlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQThCO0FBQzlCLDZEQUF5RjtBQUN6RixvRkFBMkU7QUFFM0UsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtJQUNuQyxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtRQUN4QixFQUFFLENBQUMsbUVBQW1FLEVBQUUsR0FBRyxFQUFFO1lBQzNFLE1BQU0sTUFBTSxHQUFHLCtCQUFtQixDQUFDLFFBQVEsQ0FBQztnQkFDMUMsZ0JBQWdCLEVBQUUscUNBQW9CLENBQUMsV0FBVzthQUNuRCxDQUFDLENBQUM7WUFDSCxhQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNERBQTRELEVBQUUsR0FBRyxFQUFFO1lBQ3BFLE1BQU0sTUFBTSxHQUFHLCtCQUFtQixDQUFDLFFBQVEsQ0FBQztnQkFDMUMsZ0JBQWdCLEVBQUUscUNBQW9CLENBQUMsSUFBSTthQUM1QyxDQUFDLENBQUM7WUFDSCxhQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsNkRBQTZELEVBQUUsR0FBRyxFQUFFO1lBQ3JFLE1BQU0sTUFBTSxHQUFHLCtCQUFtQixDQUFDLFFBQVEsQ0FBQztnQkFDMUMsZ0JBQWdCLEVBQUUscUNBQW9CLENBQUMsSUFBSTthQUM1QyxDQUFDLENBQUM7WUFDSCxhQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUM7UUFDN0IsQ0FB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aW1wb3J0IHsgVGV4dERvY3VtZW50U3luY0tpbmQsIFRleHREb2N1bWVudFN5bmNPcHRpb25zIH0gZnJvbSAnLi4vLi4vbGliL2xhbmd1YWdlY2xpZW50JztcclxuaW1wb3J0IERvY3VtZW50U3luY0FkYXB0ZXIgZnJvbSAnLi4vLi4vbGliL2FkYXB0ZXJzL2RvY3VtZW50LXN5bmMtYWRhcHRlcic7XHJcblxyXG5kZXNjcmliZSgnRG9jdW1lbnRTeW5jQWRhcHRlcicsICgpID0+IHtcclxuICBkZXNjcmliZSgnY2FuQWRhcHQnLCAoKSA9PiB7XHJcbiAgICBpdCgncmV0dXJucyB0cnVlIGlmIHYyIGluY3JlbWVudGFsIGNoYW5nZSBub3RpZmljYXRpb25zIGFyZSBzdXBwb3J0ZWQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IERvY3VtZW50U3luY0FkYXB0ZXIuY2FuQWRhcHQoe1xyXG4gICAgICAgIHRleHREb2N1bWVudFN5bmM6IFRleHREb2N1bWVudFN5bmNLaW5kLkluY3JlbWVudGFsLFxyXG4gICAgICB9KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUudHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdyZXR1cm5zIHRydWUgaWYgdjIgZnVsbCBjaGFuZ2Ugbm90aWZpY2F0aW9ucyBhcmUgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBEb2N1bWVudFN5bmNBZGFwdGVyLmNhbkFkYXB0KHtcclxuICAgICAgICB0ZXh0RG9jdW1lbnRTeW5jOiBUZXh0RG9jdW1lbnRTeW5jS2luZC5GdWxsLFxyXG4gICAgICB9KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUudHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdyZXR1cm5zIGZhbHNlIGlmIHYyIG5vbmUgY2hhbmdlIG5vdGlmaWNhdGlvbnMgYXJlIHN1cHBvcnRlZCcsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gRG9jdW1lbnRTeW5jQWRhcHRlci5jYW5BZGFwdCh7XHJcbiAgICAgICAgdGV4dERvY3VtZW50U3luYzogVGV4dERvY3VtZW50U3luY0tpbmQuTm9uZSxcclxuICAgICAgfSk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmJlLmZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3JldHVybnMgdHJ1ZSBpZiB2MyBpbmNyZW1lbnRhbCBjaGFuZ2Ugbm90aWZpY2F0aW9ucyBhcmUgc3VwcG9ydGVkJywgKCkgPT4ge1xyXG4gICAgICBjb25zdCByZXN1bHQgPSBEb2N1bWVudFN5bmNBZGFwdGVyLmNhbkFkYXB0KHtcclxuICAgICAgICB0ZXh0RG9jdW1lbnRTeW5jOiB7Y2hhbmdlOiBUZXh0RG9jdW1lbnRTeW5jS2luZC5JbmNyZW1lbnRhbH0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS50cnVlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3JldHVybnMgdHJ1ZSBpZiB2MyBmdWxsIGNoYW5nZSBub3RpZmljYXRpb25zIGFyZSBzdXBwb3J0ZWQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IERvY3VtZW50U3luY0FkYXB0ZXIuY2FuQWRhcHQoe1xyXG4gICAgICAgIHRleHREb2N1bWVudFN5bmM6IHtjaGFuZ2U6IFRleHREb2N1bWVudFN5bmNLaW5kLkZ1bGx9LFxyXG4gICAgICB9KTtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkudG8uYmUudHJ1ZTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdyZXR1cm5zIGZhbHNlIGlmIHYzIG5vbmUgY2hhbmdlIG5vdGlmaWNhdGlvbnMgYXJlIHN1cHBvcnRlZCcsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gRG9jdW1lbnRTeW5jQWRhcHRlci5jYW5BZGFwdCh7XHJcbiAgICAgICAgdGV4dERvY3VtZW50U3luYzoge2NoYW5nZTogVGV4dERvY3VtZW50U3luY0tpbmQuTm9uZX0sXHJcbiAgICAgIH0pO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS50by5iZS5mYWxzZTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICBkZXNjcmliZSgnY29uc3RydWN0b3InLCAoKSA9PiB7XHJcbiAgICBmdW5jdGlvbiBjcmVhdGUodGV4dERvY3VtZW50U3luYzogVGV4dERvY3VtZW50U3luY0tpbmQgfCBUZXh0RG9jdW1lbnRTeW5jT3B0aW9ucykge1xyXG4gICAgICByZXR1cm4gbmV3IERvY3VtZW50U3luY0FkYXB0ZXIobnVsbCBhcyBhbnksIHRleHREb2N1bWVudFN5bmMsICgpID0+IGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBpdCgnc2V0cyBfZG9jdW1lbnRTeW5jS2luZCBjb3JyZWN0bHkgSW5jcmVtZW50YWwgZm9yIHYyIGNhcGFiaWxpdGllcycsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKFRleHREb2N1bWVudFN5bmNLaW5kLkluY3JlbWVudGFsKS5fZG9jdW1lbnRTeW5jS2luZDtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkuZXF1YWxzKFRleHREb2N1bWVudFN5bmNLaW5kLkluY3JlbWVudGFsKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGl0KCdzZXRzIF9kb2N1bWVudFN5bmNLaW5kIGNvcnJlY3RseSBGdWxsIGZvciB2MiBjYXBhYmlsaXRpZXMnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZShUZXh0RG9jdW1lbnRTeW5jS2luZC5GdWxsKS5fZG9jdW1lbnRTeW5jS2luZDtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkuZXF1YWxzKFRleHREb2N1bWVudFN5bmNLaW5kLkZ1bGwpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3NldHMgX2RvY3VtZW50U3luY0tpbmQgY29ycmVjdGx5IEluY3JlbWVudGFsIGZvciB2MyBjYXBhYmlsaXRpZXMnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNyZWF0ZSh7Y2hhbmdlOiBUZXh0RG9jdW1lbnRTeW5jS2luZC5JbmNyZW1lbnRhbH0pLl9kb2N1bWVudFN5bmNLaW5kO1xyXG4gICAgICBleHBlY3QocmVzdWx0KS5lcXVhbHMoVGV4dERvY3VtZW50U3luY0tpbmQuSW5jcmVtZW50YWwpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgaXQoJ3NldHMgX2RvY3VtZW50U3luY0tpbmQgY29ycmVjdGx5IEZ1bGwgZm9yIHYzIGNhcGFiaWxpdGllcycsICgpID0+IHtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gY3JlYXRlKHtjaGFuZ2U6IFRleHREb2N1bWVudFN5bmNLaW5kLkZ1bGx9KS5fZG9jdW1lbnRTeW5jS2luZDtcclxuICAgICAgZXhwZWN0KHJlc3VsdCkuZXF1YWxzKFRleHREb2N1bWVudFN5bmNLaW5kLkZ1bGwpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXX0=