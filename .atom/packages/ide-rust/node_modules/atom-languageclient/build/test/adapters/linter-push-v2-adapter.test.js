var _linterPushV2Adapter = require('../../lib/adapters/linter-push-v2-adapter');

var _linterPushV2Adapter2 = _interopRequireDefault(_linterPushV2Adapter);

var _convert = require('../../lib/convert');

var _convert2 = _interopRequireDefault(_convert);

var _languageclient = require('../../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

var _atom = require('atom');

var _helpers = require('../helpers.js');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('LinterPushV2Adapter', () => {
  beforeEach(() => {
    global.sinon = _sinon2.default.sandbox.create();
  });
  afterEach(() => {
    global.sinon.restore();
  });

  describe('constructor', () => {
    it('subscribes to onPublishDiagnostics', () => {
      const languageClient = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
      _sinon2.default.spy(languageClient, 'onPublishDiagnostics');
      new _linterPushV2Adapter2.default(languageClient);
      (0, _chai.expect)(languageClient.onPublishDiagnostics.called).equals(true);
    });
  });

  describe('diagnosticToMessage', () => {
    it('converts Diagnostic and path to a linter$Message', () => {
      const filePath = '/a/b/c/d';
      const diagnostic = {
        message: 'This is a message',
        range: {
          start: { line: 1, character: 2 },
          end: { line: 3, character: 4 }
        },
        source: 'source',
        code: 'code',
        severity: ls.DiagnosticSeverity.Information,
        type: ls.DiagnosticSeverity.Information
      };

      const connection = { onPublishDiagnostics() {} };
      const adapter = new _linterPushV2Adapter2.default(connection);
      const result = adapter.diagnosticToV2Message(filePath, diagnostic);

      (0, _chai.expect)(result.excerpt).equals(diagnostic.message);
      (0, _chai.expect)(result.linterName).equals(diagnostic.source);
      (0, _chai.expect)(result.location.file).equals(filePath);
      (0, _chai.expect)(result.location.position).deep.equals(new _atom.Range(new _atom.Point(1, 2), new _atom.Point(3, 4)));
      (0, _chai.expect)(result.severity).equals('info');
    });
  });

  describe('diagnosticSeverityToSeverity', () => {
    it('converts DiagnosticSeverity.Error to "error"', () => {
      const severity = _linterPushV2Adapter2.default.diagnosticSeverityToSeverity(ls.DiagnosticSeverity.Error);
      (0, _chai.expect)(severity).equals('error');
    });

    it('converts DiagnosticSeverity.Warning to "warning"', () => {
      const severity = _linterPushV2Adapter2.default.diagnosticSeverityToSeverity(ls.DiagnosticSeverity.Warning);
      (0, _chai.expect)(severity).equals('warning');
    });

    it('converts DiagnosticSeverity.Information to "info"', () => {
      const severity = _linterPushV2Adapter2.default.diagnosticSeverityToSeverity(ls.DiagnosticSeverity.Information);
      (0, _chai.expect)(severity).equals('info');
    });

    it('converts DiagnosticSeverity.Hint to "info"', () => {
      const severity = _linterPushV2Adapter2.default.diagnosticSeverityToSeverity(ls.DiagnosticSeverity.Hint);
      (0, _chai.expect)(severity).equals('info');
    });
  });

  describe('captureDiagnostics', () => {
    it('stores diagnostic codes and allows their retrival', () => {
      const languageClient = new ls.LanguageClientConnection((0, _helpers.createSpyConnection)());
      const adapter = new _linterPushV2Adapter2.default(languageClient);
      const testPath = _path2.default.join(__dirname, 'test.txt');
      adapter.captureDiagnostics({
        uri: _convert2.default.pathToUri(testPath),
        diagnostics: [{
          message: 'Test message',
          range: {
            start: { line: 1, character: 2 },
            end: { line: 3, character: 4 }
          },
          source: 'source',
          code: 'test code',
          severity: ls.DiagnosticSeverity.Information,
          type: ls.DiagnosticSeverity.Information
        }]
      });

      const mockEditor = (0, _helpers.createFakeEditor)(testPath);
      (0, _chai.expect)(adapter.getDiagnosticCode(mockEditor, new _atom.Range([1, 2], [3, 4]), 'Test message')).to.equal('test code');
      (0, _chai.expect)(adapter.getDiagnosticCode(mockEditor, new _atom.Range([1, 2], [3, 4]), 'Test message2')).to.not.exist;
      (0, _chai.expect)(adapter.getDiagnosticCode(mockEditor, new _atom.Range([1, 2], [3, 5]), 'Test message')).to.not.exist;
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,