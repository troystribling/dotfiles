var _autoLanguageclient = require('../lib/auto-languageclient');

var _autoLanguageclient2 = _interopRequireDefault(_autoLanguageclient);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chai = require('chai');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('AutoLanguageClient', () => {
  describe('shouldSyncForEditor', () => {
    let CustomAutoLanguageClient = class CustomAutoLanguageClient extends _autoLanguageclient2.default {
      getGrammarScopes() {
        return ['Java', 'Python'];
      }
    };


    const client = new CustomAutoLanguageClient();

    function mockEditor(uri, scopeName) {
      return {
        getURI: () => uri,
        getGrammar: () => {
          return { scopeName: scopeName };
        }
      };
    }

    it('selects documents in project and in supported language', () => {
      const editor = mockEditor("/path/to/somewhere", client.getGrammarScopes()[0]);
      (0, _chai.expect)(client.shouldSyncForEditor(editor, "/path/to/somewhere")).equals(true);
    });

    it('does not select documents outside of project', () => {
      const editor = mockEditor("/path/to/elsewhere/file", client.getGrammarScopes()[0]);
      (0, _chai.expect)(client.shouldSyncForEditor(editor, "/path/to/somewhere")).equals(false);
    });

    it('does not select documents in unsupported language', () => {
      const editor = mockEditor("/path/to/somewhere", client.getGrammarScopes()[0] + '-dummy');
      (0, _chai.expect)(client.shouldSyncForEditor(editor, "/path/to/somewhere")).equals(false);
    });

    it('does not select documents in unsupported language outside of project', () => {
      const editor = mockEditor("/path/to/elsewhere/file", client.getGrammarScopes()[0] + '-dummy');
      (0, _chai.expect)(client.shouldSyncForEditor(editor, "/path/to/somewhere")).equals(false);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvYXV0by1sYW5ndWFnZWNsaWVudC50ZXN0LmpzIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwiQ3VzdG9tQXV0b0xhbmd1YWdlQ2xpZW50IiwiZ2V0R3JhbW1hclNjb3BlcyIsImNsaWVudCIsIm1vY2tFZGl0b3IiLCJ1cmkiLCJzY29wZU5hbWUiLCJnZXRVUkkiLCJnZXRHcmFtbWFyIiwiaXQiLCJlZGl0b3IiLCJzaG91bGRTeW5jRm9yRWRpdG9yIiwiZXF1YWxzIl0sIm1hcHBpbmdzIjoiQUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQUEsU0FBUyxvQkFBVCxFQUErQixNQUFNO0FBQ25DQSxXQUFTLHFCQUFULEVBQWdDLE1BQU07QUFBQSxRQUM5QkMsd0JBRDhCLEdBQ3BDLE1BQU1BLHdCQUFOLHNDQUEwRDtBQUN4REMseUJBQW9CO0FBQ2xCLGVBQU8sQ0FBQyxNQUFELEVBQVMsUUFBVCxDQUFQO0FBQ0Q7QUFIdUQsS0FEdEI7OztBQU9wQyxVQUFNQyxTQUFTLElBQUlGLHdCQUFKLEVBQWY7O0FBRUEsYUFBU0csVUFBVCxDQUFvQkMsR0FBcEIsRUFBeUJDLFNBQXpCLEVBQW9DO0FBQ2xDLGFBQU87QUFDSkMsZ0JBQVEsTUFBTUYsR0FEVjtBQUVKRyxvQkFBWSxNQUFNO0FBQUUsaUJBQU8sRUFBRUYsV0FBV0EsU0FBYixFQUFQO0FBQWlDO0FBRmpELE9BQVA7QUFJRDs7QUFFREcsT0FBRyx3REFBSCxFQUE2RCxNQUFNO0FBQy9ELFlBQU1DLFNBQVNOLFdBQVcsb0JBQVgsRUFBaUNELE9BQU9ELGdCQUFQLEdBQTBCLENBQTFCLENBQWpDLENBQWY7QUFDQSx3QkFBT0MsT0FBT1EsbUJBQVAsQ0FBMkJELE1BQTNCLEVBQW1DLG9CQUFuQyxDQUFQLEVBQWlFRSxNQUFqRSxDQUF3RSxJQUF4RTtBQUNILEtBSEQ7O0FBS0FILE9BQUcsOENBQUgsRUFBbUQsTUFBTTtBQUNyRCxZQUFNQyxTQUFTTixXQUFXLHlCQUFYLEVBQXNDRCxPQUFPRCxnQkFBUCxHQUEwQixDQUExQixDQUF0QyxDQUFmO0FBQ0Esd0JBQU9DLE9BQU9RLG1CQUFQLENBQTJCRCxNQUEzQixFQUFtQyxvQkFBbkMsQ0FBUCxFQUFpRUUsTUFBakUsQ0FBd0UsS0FBeEU7QUFDSCxLQUhEOztBQUtBSCxPQUFHLG1EQUFILEVBQXdELE1BQU07QUFDNUQsWUFBTUMsU0FBU04sV0FBVyxvQkFBWCxFQUFpQ0QsT0FBT0QsZ0JBQVAsR0FBMEIsQ0FBMUIsSUFBK0IsUUFBaEUsQ0FBZjtBQUNBLHdCQUFPQyxPQUFPUSxtQkFBUCxDQUEyQkQsTUFBM0IsRUFBbUMsb0JBQW5DLENBQVAsRUFBaUVFLE1BQWpFLENBQXdFLEtBQXhFO0FBQ0QsS0FIRDs7QUFLQUgsT0FBRyxzRUFBSCxFQUEyRSxNQUFNO0FBQy9FLFlBQU1DLFNBQVNOLFdBQVcseUJBQVgsRUFBc0NELE9BQU9ELGdCQUFQLEdBQTBCLENBQTFCLElBQStCLFFBQXJFLENBQWY7QUFDQSx3QkFBT0MsT0FBT1EsbUJBQVAsQ0FBMkJELE1BQTNCLEVBQW1DLG9CQUFuQyxDQUFQLEVBQWlFRSxNQUFqRSxDQUF3RSxLQUF4RTtBQUNELEtBSEQ7QUFJRCxHQW5DRDtBQW9DRCxDQXJDRCIsImZpbGUiOiJhdXRvLWxhbmd1YWdlY2xpZW50LnRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgQXV0b0xhbmd1YWdlQ2xpZW50IGZyb20gJy4uL2xpYi9hdXRvLWxhbmd1YWdlY2xpZW50JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHtleHBlY3R9IGZyb20gJ2NoYWknO1xuXG5kZXNjcmliZSgnQXV0b0xhbmd1YWdlQ2xpZW50JywgKCkgPT4ge1xuICBkZXNjcmliZSgnc2hvdWxkU3luY0ZvckVkaXRvcicsICgpID0+IHtcbiAgICBjbGFzcyBDdXN0b21BdXRvTGFuZ3VhZ2VDbGllbnQgZXh0ZW5kcyBBdXRvTGFuZ3VhZ2VDbGllbnQge1xuICAgICAgZ2V0R3JhbW1hclNjb3BlcyAoKSB7XG4gICAgICAgIHJldHVybiBbJ0phdmEnLCAnUHl0aG9uJ107XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IEN1c3RvbUF1dG9MYW5ndWFnZUNsaWVudCgpO1xuXG4gICAgZnVuY3Rpb24gbW9ja0VkaXRvcih1cmksIHNjb3BlTmFtZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgIGdldFVSSTogKCkgPT4gdXJpLFxuICAgICAgICAgZ2V0R3JhbW1hcjogKCkgPT4geyByZXR1cm4geyBzY29wZU5hbWU6IHNjb3BlTmFtZSB9IH1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaXQoJ3NlbGVjdHMgZG9jdW1lbnRzIGluIHByb2plY3QgYW5kIGluIHN1cHBvcnRlZCBsYW5ndWFnZScsICgpID0+IHtcbiAgICAgICAgY29uc3QgZWRpdG9yID0gbW9ja0VkaXRvcihcIi9wYXRoL3RvL3NvbWV3aGVyZVwiLCBjbGllbnQuZ2V0R3JhbW1hclNjb3BlcygpWzBdKTtcbiAgICAgICAgZXhwZWN0KGNsaWVudC5zaG91bGRTeW5jRm9yRWRpdG9yKGVkaXRvciwgXCIvcGF0aC90by9zb21ld2hlcmVcIikpLmVxdWFscyh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2VzIG5vdCBzZWxlY3QgZG9jdW1lbnRzIG91dHNpZGUgb2YgcHJvamVjdCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgZWRpdG9yID0gbW9ja0VkaXRvcihcIi9wYXRoL3RvL2Vsc2V3aGVyZS9maWxlXCIsIGNsaWVudC5nZXRHcmFtbWFyU2NvcGVzKClbMF0pO1xuICAgICAgICBleHBlY3QoY2xpZW50LnNob3VsZFN5bmNGb3JFZGl0b3IoZWRpdG9yLCBcIi9wYXRoL3RvL3NvbWV3aGVyZVwiKSkuZXF1YWxzKGZhbHNlKTtcbiAgICB9KVxuXG4gICAgaXQoJ2RvZXMgbm90IHNlbGVjdCBkb2N1bWVudHMgaW4gdW5zdXBwb3J0ZWQgbGFuZ3VhZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlZGl0b3IgPSBtb2NrRWRpdG9yKFwiL3BhdGgvdG8vc29tZXdoZXJlXCIsIGNsaWVudC5nZXRHcmFtbWFyU2NvcGVzKClbMF0gKyAnLWR1bW15Jyk7XG4gICAgICBleHBlY3QoY2xpZW50LnNob3VsZFN5bmNGb3JFZGl0b3IoZWRpdG9yLCBcIi9wYXRoL3RvL3NvbWV3aGVyZVwiKSkuZXF1YWxzKGZhbHNlKTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2VzIG5vdCBzZWxlY3QgZG9jdW1lbnRzIGluIHVuc3VwcG9ydGVkIGxhbmd1YWdlIG91dHNpZGUgb2YgcHJvamVjdCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGVkaXRvciA9IG1vY2tFZGl0b3IoXCIvcGF0aC90by9lbHNld2hlcmUvZmlsZVwiLCBjbGllbnQuZ2V0R3JhbW1hclNjb3BlcygpWzBdICsgJy1kdW1teScpO1xuICAgICAgZXhwZWN0KGNsaWVudC5zaG91bGRTeW5jRm9yRWRpdG9yKGVkaXRvciwgXCIvcGF0aC90by9zb21ld2hlcmVcIikpLmVxdWFscyhmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=