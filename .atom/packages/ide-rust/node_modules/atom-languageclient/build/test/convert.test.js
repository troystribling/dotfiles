"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ls = require("../lib/languageclient");
const convert_1 = require("../lib/convert");
const chai_1 = require("chai");
const atom_1 = require("atom");
let originalPlatform;
const setProcessPlatform = (platform) => {
    Object.defineProperty(process, 'platform', { value: platform });
};
const createFakeEditor = (path, text) => {
    const editor = new atom_1.TextEditor();
    editor.getBuffer().setPath(path);
    if (text != null) {
        editor.setText(text);
    }
    return editor;
};
describe('Convert', () => {
    beforeEach(() => {
        originalPlatform = process.platform;
    });
    afterEach(() => {
        Object.defineProperty(process, 'platform', { value: originalPlatform });
    });
    describe('pathToUri', () => {
        it('prefixes an absolute path with file://', () => {
            chai_1.expect(convert_1.default.pathToUri('/a/b/c/d.txt')).equals('file:///a/b/c/d.txt');
        });
        it('prefixes an relative path with file:///', () => {
            chai_1.expect(convert_1.default.pathToUri('a/b/c/d.txt')).equals('file:///a/b/c/d.txt');
        }); // TODO: Maybe don't do this in the function - should never be called with relative
        it('replaces backslashes with forward slashes', () => {
            chai_1.expect(convert_1.default.pathToUri('a\\b\\c\\d.txt')).equals('file:///a/b/c/d.txt');
        });
        it('does not encode Windows drive specifiers', () => {
            chai_1.expect(convert_1.default.pathToUri('d:\\ee\\ff.txt')).equals('file:///d:/ee/ff.txt');
        });
        it('URI encodes special characters', () => {
            chai_1.expect(convert_1.default.pathToUri('/a/sp ace/do$lar')).equals('file:///a/sp%20ace/do$lar');
        });
    });
    describe('uriToPath', () => {
        it("does not convert http: and https: uri's", () => {
            setProcessPlatform('darwin');
            chai_1.expect(convert_1.default.uriToPath('http://atom.io/a')).equals('http://atom.io/a');
            chai_1.expect(convert_1.default.uriToPath('https://atom.io/b')).equals('https://atom.io/b');
        });
        it('converts a file:// path to an absolute path', () => {
            setProcessPlatform('darwin');
            chai_1.expect(convert_1.default.uriToPath('file:///a/b/c/d.txt')).equals('/a/b/c/d.txt');
        });
        it('converts forward slashes to backslashes on Windows', () => {
            setProcessPlatform('win32');
            chai_1.expect(convert_1.default.uriToPath('file:///a/b/c/d.txt')).equals('a\\b\\c\\d.txt');
        });
        it('decodes Windows drive specifiers', () => {
            setProcessPlatform('win32');
            chai_1.expect(convert_1.default.uriToPath('file:///d:/ee/ff.txt')).equals('d:\\ee\\ff.txt');
        });
        it('URI decodes special characters', () => {
            setProcessPlatform('darwin');
            chai_1.expect(convert_1.default.uriToPath('file:///a/sp%20ace/do$lar')).equals('/a/sp ace/do$lar');
        });
        it('parses URI without double slash in the beginning', () => {
            setProcessPlatform('darwin');
            chai_1.expect(convert_1.default.uriToPath('file:/a/b/c/d.txt')).equals('/a/b/c/d.txt');
        });
        it('parses URI without double slash in the beginning on Windows', () => {
            setProcessPlatform('win32');
            chai_1.expect(convert_1.default.uriToPath('file:/x:/a/b/c/d.txt')).equals('x:\\a\\b\\c\\d.txt');
        });
    });
    describe('pointToPosition', () => {
        it('converts an Atom Point to a LSP position', () => {
            const point = new atom_1.Point(1, 2);
            const position = convert_1.default.pointToPosition(point);
            chai_1.expect(position.line).equals(point.row);
            chai_1.expect(position.character).equals(point.column);
        });
    });
    describe('positionToPoint', () => {
        it('converts a LSP position to an Atom Point-array', () => {
            const position = { line: 3, character: 4 };
            const point = convert_1.default.positionToPoint(position);
            chai_1.expect(point.row).equals(position.line);
            chai_1.expect(point.column).equals(position.character);
        });
    });
    describe('lsRangeToAtomRange', () => {
        it('converts a LSP range to an Atom Range-array', () => {
            const lspRange = {
                start: { character: 5, line: 6 },
                end: { line: 7, character: 8 },
            };
            const atomRange = convert_1.default.lsRangeToAtomRange(lspRange);
            chai_1.expect(atomRange.start.row).equals(lspRange.start.line);
            chai_1.expect(atomRange.start.column).equals(lspRange.start.character);
            chai_1.expect(atomRange.end.row).equals(lspRange.end.line);
            chai_1.expect(atomRange.end.column).equals(lspRange.end.character);
        });
    });
    describe('atomRangeToLSRange', () => {
        it('converts an Atom range to a LSP Range-array', () => {
            const atomRange = new atom_1.Range(new atom_1.Point(9, 10), new atom_1.Point(11, 12));
            const lspRange = convert_1.default.atomRangeToLSRange(atomRange);
            chai_1.expect(lspRange.start.line).equals(atomRange.start.row);
            chai_1.expect(lspRange.start.character).equals(atomRange.start.column);
            chai_1.expect(lspRange.end.line).equals(atomRange.end.row);
            chai_1.expect(lspRange.end.character).equals(atomRange.end.column);
        });
    });
    describe('editorToTextDocumentIdentifier', () => {
        it('uses getath which returns a path to create the URI', () => {
            const path = '/c/d/e/f/g/h/i/j.txt';
            const identifier = convert_1.default.editorToTextDocumentIdentifier(createFakeEditor(path));
            chai_1.expect(identifier.uri).equals('file://' + path);
        });
    });
    describe('editorToTextDocumentPositionParams', () => {
        it('uses the editor cursor position when none specified', () => {
            const path = '/c/d/e/f/g/h/i/j.txt';
            const editor = createFakeEditor(path, 'abc\ndefgh\nijkl');
            editor.setCursorBufferPosition(new atom_1.Point(1, 2));
            const params = convert_1.default.editorToTextDocumentPositionParams(editor);
            chai_1.expect(params.textDocument.uri).equals('file://' + path);
            chai_1.expect(params.position).deep.equals({ line: 1, character: 2 });
        });
        it('uses the cursor position parameter when specified', () => {
            const path = '/c/d/e/f/g/h/i/j.txt';
            const specifiedPoint = new atom_1.Point(911, 112);
            const editor = createFakeEditor(path, 'abcdef\nghijkl\nmnopq');
            editor.setCursorBufferPosition(new atom_1.Point(1, 1));
            const params = convert_1.default.editorToTextDocumentPositionParams(editor, specifiedPoint);
            chai_1.expect(params.textDocument.uri).equals('file://' + path);
            chai_1.expect(params.position).deep.equals({ line: 911, character: 112 });
        });
    });
    describe('grammarScopesToTextEditorScopes', () => {
        it('converts a single grammarScope to an atom-text-editor scope', () => {
            const grammarScopes = ['abc.def'];
            const textEditorScopes = convert_1.default.grammarScopesToTextEditorScopes(grammarScopes);
            chai_1.expect(textEditorScopes).equals('atom-text-editor[data-grammar="abc def"]');
        });
        it('converts a multiple grammarScopes to a comma-seperated list of atom-text-editor scopes', () => {
            const grammarScopes = ['abc.def', 'ghi.jkl'];
            const textEditorScopes = convert_1.default.grammarScopesToTextEditorScopes(grammarScopes);
            chai_1.expect(textEditorScopes).equals('atom-text-editor[data-grammar="abc def"], atom-text-editor[data-grammar="ghi jkl"]');
        });
        it('converts grammarScopes containing HTML sensitive characters to escaped sequences', () => {
            const grammarScopes = ['abc<def', 'ghi"jkl'];
            const textEditorScopes = convert_1.default.grammarScopesToTextEditorScopes(grammarScopes);
            chai_1.expect(textEditorScopes).equals('atom-text-editor[data-grammar="abc&lt;def"], atom-text-editor[data-grammar="ghi&quot;jkl"]');
        });
    });
    describe('encodeHTMLAttribute', () => {
        it('encodes characters that are not safe inside a HTML attribute', () => {
            const stringToEncode = 'a"b\'c&d>e<f';
            const encoded = convert_1.default.encodeHTMLAttribute(stringToEncode);
            chai_1.expect(encoded).equals('a&quot;b&apos;c&amp;d&gt;e&lt;f');
        });
    });
    describe('atomFileEventToLSFileEvents', () => {
        it('converts a created event', () => {
            const source = { path: '/a/b/c/d.txt', action: 'created' };
            const converted = convert_1.default.atomFileEventToLSFileEvents(source);
            chai_1.expect(converted[0]).deep.equals({ uri: 'file:///a/b/c/d.txt', type: ls.FileChangeType.Created });
        });
        it('converts a modified event', () => {
            const source = { path: '/a/b/c/d.txt', action: 'modified' };
            const converted = convert_1.default.atomFileEventToLSFileEvents(source);
            chai_1.expect(converted[0]).deep.equals({ uri: 'file:///a/b/c/d.txt', type: ls.FileChangeType.Changed });
        });
        it('converts a deleted event', () => {
            const source = { path: '/a/b/c/d.txt', action: 'deleted' };
            const converted = convert_1.default.atomFileEventToLSFileEvents(source);
            chai_1.expect(converted[0]).deep.equals({ uri: 'file:///a/b/c/d.txt', type: ls.FileChangeType.Deleted });
        });
        it('converts a renamed event', () => {
            const source = { path: '/a/b/c/d.txt', oldPath: '/a/z/e.lst', action: 'renamed' };
            const converted = convert_1.default.atomFileEventToLSFileEvents(source);
            chai_1.expect(converted[0]).deep.equals({ uri: 'file:///a/z/e.lst', type: ls.FileChangeType.Deleted });
            chai_1.expect(converted[1]).deep.equals({ uri: 'file:///a/b/c/d.txt', type: ls.FileChangeType.Created });
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC9jb252ZXJ0LnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw0Q0FBNEM7QUFDNUMsNENBQXFDO0FBQ3JDLCtCQUE4QjtBQUM5QiwrQkFLYztBQUVkLElBQUksZ0JBQWlDLENBQUM7QUFDdEMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLFFBQWEsRUFBRSxFQUFFO0lBQzNDLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBQ2xFLENBQUMsQ0FBQztBQUVGLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxJQUFZLEVBQUUsSUFBYSxFQUFjLEVBQUU7SUFDbkUsTUFBTSxNQUFNLEdBQUcsSUFBSSxpQkFBVSxFQUFFLENBQUM7SUFDaEMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7UUFDaEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN0QjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQztBQUVGLFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO0lBQ3ZCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsU0FBUyxDQUFDLEdBQUcsRUFBRTtRQUNiLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QixFQUFFLENBQUMsd0NBQXdD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Q0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNwRyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBscyBmcm9tICcuLi9saWIvbGFuZ3VhZ2VjbGllbnQnO1xuaW1wb3J0IENvbnZlcnQgZnJvbSAnLi4vbGliL2NvbnZlcnQnO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQge1xuICBQb2ludCxcbiAgUmFuZ2UsXG4gIFRleHRFZGl0b3IsXG4gIEZpbGVzeXN0ZW1DaGFuZ2UsXG59IGZyb20gJ2F0b20nO1xuXG5sZXQgb3JpZ2luYWxQbGF0Zm9ybTogTm9kZUpTLlBsYXRmb3JtO1xuY29uc3Qgc2V0UHJvY2Vzc1BsYXRmb3JtID0gKHBsYXRmb3JtOiBhbnkpID0+IHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb2Nlc3MsICdwbGF0Zm9ybScsIHsgdmFsdWU6IHBsYXRmb3JtIH0pO1xufTtcblxuY29uc3QgY3JlYXRlRmFrZUVkaXRvciA9IChwYXRoOiBzdHJpbmcsIHRleHQ/OiBzdHJpbmcpOiBUZXh0RWRpdG9yID0+IHtcbiAgY29uc3QgZWRpdG9yID0gbmV3IFRleHRFZGl0b3IoKTtcbiAgZWRpdG9yLmdldEJ1ZmZlcigpLnNldFBhdGgocGF0aCk7XG4gIGlmICh0ZXh0ICE9IG51bGwpIHtcbiAgICBlZGl0b3Iuc2V0VGV4dCh0ZXh0KTtcbiAgfVxuICByZXR1cm4gZWRpdG9yO1xufTtcblxuZGVzY3JpYmUoJ0NvbnZlcnQnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG9yaWdpbmFsUGxhdGZvcm0gPSBwcm9jZXNzLnBsYXRmb3JtO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvY2VzcywgJ3BsYXRmb3JtJywgeyB2YWx1ZTogb3JpZ2luYWxQbGF0Zm9ybSB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3BhdGhUb1VyaScsICgpID0+IHtcbiAgICBpdCgncHJlZml4ZXMgYW4gYWJzb2x1dGUgcGF0aCB3aXRoIGZpbGU6Ly8nLCAoKSA9PiB7XG4gICAgICBleHBlY3QoQ29udmVydC5wYXRoVG9VcmkoJy9hL2IvYy9kLnR4dCcpKS5lcXVhbHMoJ2ZpbGU6Ly8vYS9iL2MvZC50eHQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdwcmVmaXhlcyBhbiByZWxhdGl2ZSBwYXRoIHdpdGggZmlsZTovLy8nLCAoKSA9PiB7XG4gICAgICBleHBlY3QoQ29udmVydC5wYXRoVG9VcmkoJ2EvYi9jL2QudHh0JykpLmVxdWFscygnZmlsZTovLy9hL2IvYy9kLnR4dCcpO1xuICAgIH0pOyAvLyBUT0RPOiBNYXliZSBkb24ndCBkbyB0aGlzIGluIHRoZSBmdW5jdGlvbiAtIHNob3VsZCBuZXZlciBiZSBjYWxsZWQgd2l0aCByZWxhdGl2ZVxuXG4gICAgaXQoJ3JlcGxhY2VzIGJhY2tzbGFzaGVzIHdpdGggZm9yd2FyZCBzbGFzaGVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KENvbnZlcnQucGF0aFRvVXJpKCdhXFxcXGJcXFxcY1xcXFxkLnR4dCcpKS5lcXVhbHMoJ2ZpbGU6Ly8vYS9iL2MvZC50eHQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdkb2VzIG5vdCBlbmNvZGUgV2luZG93cyBkcml2ZSBzcGVjaWZpZXJzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KENvbnZlcnQucGF0aFRvVXJpKCdkOlxcXFxlZVxcXFxmZi50eHQnKSkuZXF1YWxzKCdmaWxlOi8vL2Q6L2VlL2ZmLnR4dCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ1VSSSBlbmNvZGVzIHNwZWNpYWwgY2hhcmFjdGVycycsICgpID0+IHtcbiAgICAgIGV4cGVjdChDb252ZXJ0LnBhdGhUb1VyaSgnL2Evc3AgYWNlL2RvJGxhcicpKS5lcXVhbHMoJ2ZpbGU6Ly8vYS9zcCUyMGFjZS9kbyRsYXInKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3VyaVRvUGF0aCcsICgpID0+IHtcbiAgICBpdChcImRvZXMgbm90IGNvbnZlcnQgaHR0cDogYW5kIGh0dHBzOiB1cmknc1wiLCAoKSA9PiB7XG4gICAgICBzZXRQcm9jZXNzUGxhdGZvcm0oJ2RhcndpbicpO1xuICAgICAgZXhwZWN0KENvbnZlcnQudXJpVG9QYXRoKCdodHRwOi8vYXRvbS5pby9hJykpLmVxdWFscygnaHR0cDovL2F0b20uaW8vYScpO1xuICAgICAgZXhwZWN0KENvbnZlcnQudXJpVG9QYXRoKCdodHRwczovL2F0b20uaW8vYicpKS5lcXVhbHMoJ2h0dHBzOi8vYXRvbS5pby9iJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnY29udmVydHMgYSBmaWxlOi8vIHBhdGggdG8gYW4gYWJzb2x1dGUgcGF0aCcsICgpID0+IHtcbiAgICAgIHNldFByb2Nlc3NQbGF0Zm9ybSgnZGFyd2luJyk7XG4gICAgICBleHBlY3QoQ29udmVydC51cmlUb1BhdGgoJ2ZpbGU6Ly8vYS9iL2MvZC50eHQnKSkuZXF1YWxzKCcvYS9iL2MvZC50eHQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdjb252ZXJ0cyBmb3J3YXJkIHNsYXNoZXMgdG8gYmFja3NsYXNoZXMgb24gV2luZG93cycsICgpID0+IHtcbiAgICAgIHNldFByb2Nlc3NQbGF0Zm9ybSgnd2luMzInKTtcbiAgICAgIGV4cGVjdChDb252ZXJ0LnVyaVRvUGF0aCgnZmlsZTovLy9hL2IvYy9kLnR4dCcpKS5lcXVhbHMoJ2FcXFxcYlxcXFxjXFxcXGQudHh0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnZGVjb2RlcyBXaW5kb3dzIGRyaXZlIHNwZWNpZmllcnMnLCAoKSA9PiB7XG4gICAgICBzZXRQcm9jZXNzUGxhdGZvcm0oJ3dpbjMyJyk7XG4gICAgICBleHBlY3QoQ29udmVydC51cmlUb1BhdGgoJ2ZpbGU6Ly8vZDovZWUvZmYudHh0JykpLmVxdWFscygnZDpcXFxcZWVcXFxcZmYudHh0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnVVJJIGRlY29kZXMgc3BlY2lhbCBjaGFyYWN0ZXJzJywgKCkgPT4ge1xuICAgICAgc2V0UHJvY2Vzc1BsYXRmb3JtKCdkYXJ3aW4nKTtcbiAgICAgIGV4cGVjdChDb252ZXJ0LnVyaVRvUGF0aCgnZmlsZTovLy9hL3NwJTIwYWNlL2RvJGxhcicpKS5lcXVhbHMoJy9hL3NwIGFjZS9kbyRsYXInKTtcbiAgICB9KTtcblxuICAgIGl0KCdwYXJzZXMgVVJJIHdpdGhvdXQgZG91YmxlIHNsYXNoIGluIHRoZSBiZWdpbm5pbmcnLCAoKSA9PiB7XG4gICAgICBzZXRQcm9jZXNzUGxhdGZvcm0oJ2RhcndpbicpO1xuICAgICAgZXhwZWN0KENvbnZlcnQudXJpVG9QYXRoKCdmaWxlOi9hL2IvYy9kLnR4dCcpKS5lcXVhbHMoJy9hL2IvYy9kLnR4dCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3BhcnNlcyBVUkkgd2l0aG91dCBkb3VibGUgc2xhc2ggaW4gdGhlIGJlZ2lubmluZyBvbiBXaW5kb3dzJywgKCkgPT4ge1xuICAgICAgc2V0UHJvY2Vzc1BsYXRmb3JtKCd3aW4zMicpO1xuICAgICAgZXhwZWN0KENvbnZlcnQudXJpVG9QYXRoKCdmaWxlOi94Oi9hL2IvYy9kLnR4dCcpKS5lcXVhbHMoJ3g6XFxcXGFcXFxcYlxcXFxjXFxcXGQudHh0Jyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwb2ludFRvUG9zaXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ2NvbnZlcnRzIGFuIEF0b20gUG9pbnQgdG8gYSBMU1AgcG9zaXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBwb2ludCA9IG5ldyBQb2ludCgxLCAyKTtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gQ29udmVydC5wb2ludFRvUG9zaXRpb24ocG9pbnQpO1xuICAgICAgZXhwZWN0KHBvc2l0aW9uLmxpbmUpLmVxdWFscyhwb2ludC5yb3cpO1xuICAgICAgZXhwZWN0KHBvc2l0aW9uLmNoYXJhY3RlcikuZXF1YWxzKHBvaW50LmNvbHVtbik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwb3NpdGlvblRvUG9pbnQnLCAoKSA9PiB7XG4gICAgaXQoJ2NvbnZlcnRzIGEgTFNQIHBvc2l0aW9uIHRvIGFuIEF0b20gUG9pbnQtYXJyYXknLCAoKSA9PiB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IHsgbGluZTogMywgY2hhcmFjdGVyOiA0IH07XG4gICAgICBjb25zdCBwb2ludCA9IENvbnZlcnQucG9zaXRpb25Ub1BvaW50KHBvc2l0aW9uKTtcbiAgICAgIGV4cGVjdChwb2ludC5yb3cpLmVxdWFscyhwb3NpdGlvbi5saW5lKTtcbiAgICAgIGV4cGVjdChwb2ludC5jb2x1bW4pLmVxdWFscyhwb3NpdGlvbi5jaGFyYWN0ZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnbHNSYW5nZVRvQXRvbVJhbmdlJywgKCkgPT4ge1xuICAgIGl0KCdjb252ZXJ0cyBhIExTUCByYW5nZSB0byBhbiBBdG9tIFJhbmdlLWFycmF5JywgKCkgPT4ge1xuICAgICAgY29uc3QgbHNwUmFuZ2UgPSB7XG4gICAgICAgIHN0YXJ0OiB7IGNoYXJhY3RlcjogNSwgbGluZTogNiB9LFxuICAgICAgICBlbmQ6IHsgbGluZTogNywgY2hhcmFjdGVyOiA4IH0sXG4gICAgICB9O1xuICAgICAgY29uc3QgYXRvbVJhbmdlID0gQ29udmVydC5sc1JhbmdlVG9BdG9tUmFuZ2UobHNwUmFuZ2UpO1xuICAgICAgZXhwZWN0KGF0b21SYW5nZS5zdGFydC5yb3cpLmVxdWFscyhsc3BSYW5nZS5zdGFydC5saW5lKTtcbiAgICAgIGV4cGVjdChhdG9tUmFuZ2Uuc3RhcnQuY29sdW1uKS5lcXVhbHMobHNwUmFuZ2Uuc3RhcnQuY2hhcmFjdGVyKTtcbiAgICAgIGV4cGVjdChhdG9tUmFuZ2UuZW5kLnJvdykuZXF1YWxzKGxzcFJhbmdlLmVuZC5saW5lKTtcbiAgICAgIGV4cGVjdChhdG9tUmFuZ2UuZW5kLmNvbHVtbikuZXF1YWxzKGxzcFJhbmdlLmVuZC5jaGFyYWN0ZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnYXRvbVJhbmdlVG9MU1JhbmdlJywgKCkgPT4ge1xuICAgIGl0KCdjb252ZXJ0cyBhbiBBdG9tIHJhbmdlIHRvIGEgTFNQIFJhbmdlLWFycmF5JywgKCkgPT4ge1xuICAgICAgY29uc3QgYXRvbVJhbmdlID0gbmV3IFJhbmdlKG5ldyBQb2ludCg5LCAxMCksIG5ldyBQb2ludCgxMSwgMTIpKTtcbiAgICAgIGNvbnN0IGxzcFJhbmdlID0gQ29udmVydC5hdG9tUmFuZ2VUb0xTUmFuZ2UoYXRvbVJhbmdlKTtcbiAgICAgIGV4cGVjdChsc3BSYW5nZS5zdGFydC5saW5lKS5lcXVhbHMoYXRvbVJhbmdlLnN0YXJ0LnJvdyk7XG4gICAgICBleHBlY3QobHNwUmFuZ2Uuc3RhcnQuY2hhcmFjdGVyKS5lcXVhbHMoYXRvbVJhbmdlLnN0YXJ0LmNvbHVtbik7XG4gICAgICBleHBlY3QobHNwUmFuZ2UuZW5kLmxpbmUpLmVxdWFscyhhdG9tUmFuZ2UuZW5kLnJvdyk7XG4gICAgICBleHBlY3QobHNwUmFuZ2UuZW5kLmNoYXJhY3RlcikuZXF1YWxzKGF0b21SYW5nZS5lbmQuY29sdW1uKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2VkaXRvclRvVGV4dERvY3VtZW50SWRlbnRpZmllcicsICgpID0+IHtcbiAgICBpdCgndXNlcyBnZXRhdGggd2hpY2ggcmV0dXJucyBhIHBhdGggdG8gY3JlYXRlIHRoZSBVUkknLCAoKSA9PiB7XG4gICAgICBjb25zdCBwYXRoID0gJy9jL2QvZS9mL2cvaC9pL2oudHh0JztcbiAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSBDb252ZXJ0LmVkaXRvclRvVGV4dERvY3VtZW50SWRlbnRpZmllcihjcmVhdGVGYWtlRWRpdG9yKHBhdGgpKTtcbiAgICAgIGV4cGVjdChpZGVudGlmaWVyLnVyaSkuZXF1YWxzKCdmaWxlOi8vJyArIHBhdGgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcycsICgpID0+IHtcbiAgICBpdCgndXNlcyB0aGUgZWRpdG9yIGN1cnNvciBwb3NpdGlvbiB3aGVuIG5vbmUgc3BlY2lmaWVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgcGF0aCA9ICcvYy9kL2UvZi9nL2gvaS9qLnR4dCc7XG4gICAgICBjb25zdCBlZGl0b3IgPSBjcmVhdGVGYWtlRWRpdG9yKHBhdGgsICdhYmNcXG5kZWZnaFxcbmlqa2wnKTtcbiAgICAgIGVkaXRvci5zZXRDdXJzb3JCdWZmZXJQb3NpdGlvbihuZXcgUG9pbnQoMSwgMikpO1xuICAgICAgY29uc3QgcGFyYW1zID0gQ29udmVydC5lZGl0b3JUb1RleHREb2N1bWVudFBvc2l0aW9uUGFyYW1zKGVkaXRvcik7XG4gICAgICBleHBlY3QocGFyYW1zLnRleHREb2N1bWVudC51cmkpLmVxdWFscygnZmlsZTovLycgKyBwYXRoKTtcbiAgICAgIGV4cGVjdChwYXJhbXMucG9zaXRpb24pLmRlZXAuZXF1YWxzKHsgbGluZTogMSwgY2hhcmFjdGVyOiAyIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3VzZXMgdGhlIGN1cnNvciBwb3NpdGlvbiBwYXJhbWV0ZXIgd2hlbiBzcGVjaWZpZWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBwYXRoID0gJy9jL2QvZS9mL2cvaC9pL2oudHh0JztcbiAgICAgIGNvbnN0IHNwZWNpZmllZFBvaW50ID0gbmV3IFBvaW50KDkxMSwgMTEyKTtcbiAgICAgIGNvbnN0IGVkaXRvciA9IGNyZWF0ZUZha2VFZGl0b3IocGF0aCwgJ2FiY2RlZlxcbmdoaWprbFxcbm1ub3BxJyk7XG4gICAgICBlZGl0b3Iuc2V0Q3Vyc29yQnVmZmVyUG9zaXRpb24obmV3IFBvaW50KDEsIDEpKTtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IENvbnZlcnQuZWRpdG9yVG9UZXh0RG9jdW1lbnRQb3NpdGlvblBhcmFtcyhlZGl0b3IsIHNwZWNpZmllZFBvaW50KTtcbiAgICAgIGV4cGVjdChwYXJhbXMudGV4dERvY3VtZW50LnVyaSkuZXF1YWxzKCdmaWxlOi8vJyArIHBhdGgpO1xuICAgICAgZXhwZWN0KHBhcmFtcy5wb3NpdGlvbikuZGVlcC5lcXVhbHMoeyBsaW5lOiA5MTEsIGNoYXJhY3RlcjogMTEyIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ3JhbW1hclNjb3Blc1RvVGV4dEVkaXRvclNjb3BlcycsICgpID0+IHtcbiAgICBpdCgnY29udmVydHMgYSBzaW5nbGUgZ3JhbW1hclNjb3BlIHRvIGFuIGF0b20tdGV4dC1lZGl0b3Igc2NvcGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBncmFtbWFyU2NvcGVzID0gWydhYmMuZGVmJ107XG4gICAgICBjb25zdCB0ZXh0RWRpdG9yU2NvcGVzID0gQ29udmVydC5ncmFtbWFyU2NvcGVzVG9UZXh0RWRpdG9yU2NvcGVzKGdyYW1tYXJTY29wZXMpO1xuICAgICAgZXhwZWN0KHRleHRFZGl0b3JTY29wZXMpLmVxdWFscygnYXRvbS10ZXh0LWVkaXRvcltkYXRhLWdyYW1tYXI9XCJhYmMgZGVmXCJdJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnY29udmVydHMgYSBtdWx0aXBsZSBncmFtbWFyU2NvcGVzIHRvIGEgY29tbWEtc2VwZXJhdGVkIGxpc3Qgb2YgYXRvbS10ZXh0LWVkaXRvciBzY29wZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBncmFtbWFyU2NvcGVzID0gWydhYmMuZGVmJywgJ2doaS5qa2wnXTtcbiAgICAgIGNvbnN0IHRleHRFZGl0b3JTY29wZXMgPSBDb252ZXJ0LmdyYW1tYXJTY29wZXNUb1RleHRFZGl0b3JTY29wZXMoZ3JhbW1hclNjb3Blcyk7XG4gICAgICBleHBlY3QodGV4dEVkaXRvclNjb3BlcykuZXF1YWxzKFxuICAgICAgICAnYXRvbS10ZXh0LWVkaXRvcltkYXRhLWdyYW1tYXI9XCJhYmMgZGVmXCJdLCBhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcj1cImdoaSBqa2xcIl0nLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdjb252ZXJ0cyBncmFtbWFyU2NvcGVzIGNvbnRhaW5pbmcgSFRNTCBzZW5zaXRpdmUgY2hhcmFjdGVycyB0byBlc2NhcGVkIHNlcXVlbmNlcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGdyYW1tYXJTY29wZXMgPSBbJ2FiYzxkZWYnLCAnZ2hpXCJqa2wnXTtcbiAgICAgIGNvbnN0IHRleHRFZGl0b3JTY29wZXMgPSBDb252ZXJ0LmdyYW1tYXJTY29wZXNUb1RleHRFZGl0b3JTY29wZXMoZ3JhbW1hclNjb3Blcyk7XG4gICAgICBleHBlY3QodGV4dEVkaXRvclNjb3BlcykuZXF1YWxzKFxuICAgICAgICAnYXRvbS10ZXh0LWVkaXRvcltkYXRhLWdyYW1tYXI9XCJhYmMmbHQ7ZGVmXCJdLCBhdG9tLXRleHQtZWRpdG9yW2RhdGEtZ3JhbW1hcj1cImdoaSZxdW90O2prbFwiXScsXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZW5jb2RlSFRNTEF0dHJpYnV0ZScsICgpID0+IHtcbiAgICBpdCgnZW5jb2RlcyBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBzYWZlIGluc2lkZSBhIEhUTUwgYXR0cmlidXRlJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3RyaW5nVG9FbmNvZGUgPSAnYVwiYlxcJ2MmZD5lPGYnO1xuICAgICAgY29uc3QgZW5jb2RlZCA9IENvbnZlcnQuZW5jb2RlSFRNTEF0dHJpYnV0ZShzdHJpbmdUb0VuY29kZSk7XG4gICAgICBleHBlY3QoZW5jb2RlZCkuZXF1YWxzKCdhJnF1b3Q7YiZhcG9zO2MmYW1wO2QmZ3Q7ZSZsdDtmJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdhdG9tRmlsZUV2ZW50VG9MU0ZpbGVFdmVudHMnLCAoKSA9PiB7XG4gICAgaXQoJ2NvbnZlcnRzIGEgY3JlYXRlZCBldmVudCcsICgpID0+IHtcbiAgICAgIGNvbnN0IHNvdXJjZTogRmlsZXN5c3RlbUNoYW5nZSA9IHsgcGF0aDogJy9hL2IvYy9kLnR4dCcsIGFjdGlvbjogJ2NyZWF0ZWQnIH07XG4gICAgICBjb25zdCBjb252ZXJ0ZWQgPSBDb252ZXJ0LmF0b21GaWxlRXZlbnRUb0xTRmlsZUV2ZW50cyhzb3VyY2UpO1xuICAgICAgZXhwZWN0KGNvbnZlcnRlZFswXSkuZGVlcC5lcXVhbHMoeyB1cmk6ICdmaWxlOi8vL2EvYi9jL2QudHh0JywgdHlwZTogbHMuRmlsZUNoYW5nZVR5cGUuQ3JlYXRlZCB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdjb252ZXJ0cyBhIG1vZGlmaWVkIGV2ZW50JywgKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlOiBGaWxlc3lzdGVtQ2hhbmdlID0geyBwYXRoOiAnL2EvYi9jL2QudHh0JywgYWN0aW9uOiAnbW9kaWZpZWQnIH07XG4gICAgICBjb25zdCBjb252ZXJ0ZWQgPSBDb252ZXJ0LmF0b21GaWxlRXZlbnRUb0xTRmlsZUV2ZW50cyhzb3VyY2UpO1xuICAgICAgZXhwZWN0KGNvbnZlcnRlZFswXSkuZGVlcC5lcXVhbHMoeyB1cmk6ICdmaWxlOi8vL2EvYi9jL2QudHh0JywgdHlwZTogbHMuRmlsZUNoYW5nZVR5cGUuQ2hhbmdlZCB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdjb252ZXJ0cyBhIGRlbGV0ZWQgZXZlbnQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzb3VyY2U6IEZpbGVzeXN0ZW1DaGFuZ2UgPSB7IHBhdGg6ICcvYS9iL2MvZC50eHQnLCBhY3Rpb246ICdkZWxldGVkJyB9O1xuICAgICAgY29uc3QgY29udmVydGVkID0gQ29udmVydC5hdG9tRmlsZUV2ZW50VG9MU0ZpbGVFdmVudHMoc291cmNlKTtcbiAgICAgIGV4cGVjdChjb252ZXJ0ZWRbMF0pLmRlZXAuZXF1YWxzKHsgdXJpOiAnZmlsZTovLy9hL2IvYy9kLnR4dCcsIHR5cGU6IGxzLkZpbGVDaGFuZ2VUeXBlLkRlbGV0ZWQgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnY29udmVydHMgYSByZW5hbWVkIGV2ZW50JywgKCkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlOiBGaWxlc3lzdGVtQ2hhbmdlID0geyBwYXRoOiAnL2EvYi9jL2QudHh0Jywgb2xkUGF0aDogJy9hL3ovZS5sc3QnLCBhY3Rpb246ICdyZW5hbWVkJyB9O1xuICAgICAgY29uc3QgY29udmVydGVkID0gQ29udmVydC5hdG9tRmlsZUV2ZW50VG9MU0ZpbGVFdmVudHMoc291cmNlKTtcbiAgICAgIGV4cGVjdChjb252ZXJ0ZWRbMF0pLmRlZXAuZXF1YWxzKHsgdXJpOiAnZmlsZTovLy9hL3ovZS5sc3QnLCB0eXBlOiBscy5GaWxlQ2hhbmdlVHlwZS5EZWxldGVkIH0pO1xuICAgICAgZXhwZWN0KGNvbnZlcnRlZFsxXSkuZGVlcC5lcXVhbHMoeyB1cmk6ICdmaWxlOi8vL2EvYi9jL2QudHh0JywgdHlwZTogbHMuRmlsZUNoYW5nZVR5cGUuQ3JlYXRlZCB9KTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==