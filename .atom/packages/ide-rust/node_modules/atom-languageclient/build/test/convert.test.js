var _languageclient = require('../lib/languageclient');

var ls = _interopRequireWildcard(_languageclient);

var _convert = require('../lib/convert');

var _convert2 = _interopRequireDefault(_convert);

var _atom = require('atom');

var _chai = require('chai');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

let originalPlatform;
const setProcessPlatform = platform => {
  Object.defineProperty(process, 'platform', { value: platform });
};

const createFakeEditor = (path, text) => {
  const editor = new _atom.TextEditor();
  editor.getBuffer().setPath(path);
  if (text != null) {
    editor.setText(text);
  }
  return editor;
};

describe('Convert', () => {
  beforeEach(() => {
    originalPlatform = process.platform;
  });
  afterEach(() => {
    Object.defineProperty(process, 'platform', { value: originalPlatform });
  });

  describe('pathToUri', () => {
    it('prefixes an absolute path with file://', () => {
      (0, _chai.expect)(_convert2.default.pathToUri('/a/b/c/d.txt')).equals('file:///a/b/c/d.txt');
    });

    it('prefixes an relative path with file:///', () => {
      (0, _chai.expect)(_convert2.default.pathToUri('a/b/c/d.txt')).equals('file:///a/b/c/d.txt');
    }); // TODO: Maybe don't do this in the function - should never be called with relative

    it('replaces backslashes with forward slashes', () => {
      (0, _chai.expect)(_convert2.default.pathToUri('a\\b\\c\\d.txt')).equals('file:///a/b/c/d.txt');
    });

    it('does not encode Windows drive specifiers', () => {
      (0, _chai.expect)(_convert2.default.pathToUri('d:\\ee\\ff.txt')).equals('file:///d:/ee/ff.txt');
    });

    it('URI encodes special characters', () => {
      (0, _chai.expect)(_convert2.default.pathToUri('/a/sp ace/do$lar')).equals('file:///a/sp%20ace/do$lar');
    });
  });

  describe('uriToPath', () => {
    it("does not convert http: and https: uri's", () => {
      setProcessPlatform('darwin');
      (0, _chai.expect)(_convert2.default.uriToPath('http://atom.io/a')).equals('http://atom.io/a');
      (0, _chai.expect)(_convert2.default.uriToPath('https://atom.io/b')).equals('https://atom.io/b');
    });

    it('converts a file:// path to an absolute path', () => {
      setProcessPlatform('darwin');
      (0, _chai.expect)(_convert2.default.uriToPath('file:///a/b/c/d.txt')).equals('/a/b/c/d.txt');
    });

    it('converts forward slashes to backslashes on Windows', () => {
      setProcessPlatform('win32');
      (0, _chai.expect)(_convert2.default.uriToPath('file:///a/b/c/d.txt')).equals('a\\b\\c\\d.txt');
    });

    it('decodes Windows drive specifiers', () => {
      setProcessPlatform('win32');
      (0, _chai.expect)(_convert2.default.uriToPath('file:///d:/ee/ff.txt')).equals('d:\\ee\\ff.txt');
    });

    it('URI decodes special characters', () => {
      setProcessPlatform('darwin');
      (0, _chai.expect)(_convert2.default.uriToPath('file:///a/sp%20ace/do$lar')).equals('/a/sp ace/do$lar');
    });

    it('parses URI without double slash in the beginning', () => {
      setProcessPlatform('darwin');
      (0, _chai.expect)(_convert2.default.uriToPath('file:/a/b/c/d.txt')).equals('/a/b/c/d.txt');
    });

    it('parses URI without double slash in the beginning on Windows', () => {
      setProcessPlatform('win32');
      (0, _chai.expect)(_convert2.default.uriToPath('file:/x:/a/b/c/d.txt')).equals('x:\\a\\b\\c\\d.txt');
    });
  });

  describe('pointToPosition', () => {
    it('converts an Atom Point to a LSP position', () => {
      const point = { row: 1, column: 2 };
      const position = _convert2.default.pointToPosition(point);
      (0, _chai.expect)(position.line).equals(point.row);
      (0, _chai.expect)(position.character).equals(point.column);
    });
  });

  describe('positionToPoint', () => {
    it('converts a LSP position to an Atom Point-array', () => {
      const position = { line: 3, character: 4 };
      const point = _convert2.default.positionToPoint(position);
      (0, _chai.expect)(point.row).equals(position.line);
      (0, _chai.expect)(point.column).equals(position.character);
    });
  });

  describe('lsRangeToAtomRange', () => {
    it('converts a LSP range to an Atom Range-array', () => {
      const lspRange = {
        start: { character: 5, line: 6 },
        end: { line: 7, character: 8 }
      };
      const atomRange = _convert2.default.lsRangeToAtomRange(lspRange);
      (0, _chai.expect)(atomRange.start.row).equals(lspRange.start.line);
      (0, _chai.expect)(atomRange.start.column).equals(lspRange.start.character);
      (0, _chai.expect)(atomRange.end.row).equals(lspRange.end.line);
      (0, _chai.expect)(atomRange.end.column).equals(lspRange.end.character);
    });
  });

  describe('atomRangeToLSRange', () => {
    it('converts an Atom range to a LSP Range-array', () => {
      const atomRange = new _atom.Range(new _atom.Point(9, 10), new _atom.Point(11, 12));
      const lspRange = _convert2.default.atomRangeToLSRange(atomRange);
      (0, _chai.expect)(lspRange.start.line).equals(atomRange.start.row);
      (0, _chai.expect)(lspRange.start.character).equals(atomRange.start.column);
      (0, _chai.expect)(lspRange.end.line).equals(atomRange.end.row);
      (0, _chai.expect)(lspRange.end.character).equals(atomRange.end.column);
    });
  });

  describe('editorToTextDocumentIdentifier', () => {
    it('uses getath which returns a path to create the URI', () => {
      const path = '/c/d/e/f/g/h/i/j.txt';
      const identifier = _convert2.default.editorToTextDocumentIdentifier(createFakeEditor(path));
      (0, _chai.expect)(identifier.uri).equals('file://' + path);
    });
  });

  describe('editorToTextDocumentPositionParams', () => {
    it('uses the editor cursor position when none specified', () => {
      const path = '/c/d/e/f/g/h/i/j.txt';
      const editor = createFakeEditor(path, 'abc\ndefgh\nijkl');
      editor.setCursorBufferPosition(new _atom.Point(1, 2));
      const params = _convert2.default.editorToTextDocumentPositionParams(editor);
      (0, _chai.expect)(params.textDocument.uri).equals('file://' + path);
      (0, _chai.expect)(params.position).deep.equals({ line: 1, character: 2 });
    });

    it('uses the cursor position parameter when specified', () => {
      const path = '/c/d/e/f/g/h/i/j.txt';
      const specifiedPoint = new _atom.Point(911, 112);
      const editor = createFakeEditor(path, 'abcdef\nghijkl\nmnopq');
      editor.setCursorBufferPosition(new _atom.Point(1, 1));
      const params = _convert2.default.editorToTextDocumentPositionParams(editor, specifiedPoint);
      (0, _chai.expect)(params.textDocument.uri).equals('file://' + path);
      (0, _chai.expect)(params.position).deep.equals({ line: 911, character: 112 });
    });
  });

  describe('grammarScopesToTextEditorScopes', () => {
    it('converts a single grammarScope to an atom-text-editor scope', () => {
      const grammarScopes = ['abc.def'];
      const textEditorScopes = _convert2.default.grammarScopesToTextEditorScopes(grammarScopes);
      (0, _chai.expect)(textEditorScopes).equals('atom-text-editor[data-grammar="abc def"]');
    });

    it('converts a multiple grammarScopes to a comma-seperated list of atom-text-editor scopes', () => {
      const grammarScopes = ['abc.def', 'ghi.jkl'];
      const textEditorScopes = _convert2.default.grammarScopesToTextEditorScopes(grammarScopes);
      (0, _chai.expect)(textEditorScopes).equals('atom-text-editor[data-grammar="abc def"], atom-text-editor[data-grammar="ghi jkl"]');
    });

    it('converts grammarScopes containing HTML sensitive characters to escaped sequences', () => {
      const grammarScopes = ['abc<def', 'ghi"jkl'];
      const textEditorScopes = _convert2.default.grammarScopesToTextEditorScopes(grammarScopes);
      (0, _chai.expect)(textEditorScopes).equals('atom-text-editor[data-grammar="abc&lt;def"], atom-text-editor[data-grammar="ghi&quot;jkl"]');
    });
  });

  describe('encodeHTMLAttribute', () => {
    it('encodes characters that are not safe inside a HTML attribute', () => {
      const stringToEncode = 'a"b\'c&d>e<f';
      const encoded = _convert2.default.encodeHTMLAttribute(stringToEncode);
      (0, _chai.expect)(encoded).equals('a&quot;b&apos;c&amp;d&gt;e&lt;f');
    });
  });

  describe('atomFileEventToLSFileEvents', () => {
    it('converts a created event', () => {
      const source = { path: '/a/b/c/d.txt', action: 'created' };
      const converted = _convert2.default.atomFileEventToLSFileEvents(source);
      (0, _chai.expect)(converted[0]).deep.equals({ uri: 'file:///a/b/c/d.txt', type: ls.FileChangeType.Created });
    });

    it('converts a modified event', () => {
      const source = { path: '/a/b/c/d.txt', action: 'modified' };
      const converted = _convert2.default.atomFileEventToLSFileEvents(source);
      (0, _chai.expect)(converted[0]).deep.equals({ uri: 'file:///a/b/c/d.txt', type: ls.FileChangeType.Changed });
    });

    it('converts a deleted event', () => {
      const source = { path: '/a/b/c/d.txt', action: 'deleted' };
      const converted = _convert2.default.atomFileEventToLSFileEvents(source);
      (0, _chai.expect)(converted[0]).deep.equals({ uri: 'file:///a/b/c/d.txt', type: ls.FileChangeType.Deleted });
    });

    it('converts a renamed event', () => {
      const source = { path: '/a/b/c/d.txt', oldPath: '/a/z/e.lst', action: 'renamed' };
      const converted = _convert2.default.atomFileEventToLSFileEvents(source);
      (0, _chai.expect)(converted[0]).deep.equals({ uri: 'file:///a/z/e.lst', type: ls.FileChangeType.Deleted });
      (0, _chai.expect)(converted[1]).deep.equals({ uri: 'file:///a/b/c/d.txt', type: ls.FileChangeType.Created });
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,