export { createRoot, createSignal, createEffect, createRenderEffect, createComputed, createDeferred, createSelector, createMemo, createResource, getListener, onMount, onCleanup, onError, untrack, batch, on, useTransition, createContext, useContext, children, getOwner, runWithOwner, equalFn } from "./reactive/signal";
export type { Resource } from "./reactive/signal";
export { createState, unwrap, $RAW } from "./reactive/state";
export type { State, SetStateFunction } from "./reactive/state";
export * from "./reactive/mutable";
export { reconcile, produce } from "./reactive/stateModifiers";
export * from "./reactive/scheduler";
export * from "./reactive/array";
export * from "./render";
export type { JSX } from "./jsx";
export declare function awaitSuspense(): void;
import { writeSignal, serializeGraph } from "./reactive/signal";
declare let DEV: {
    writeSignal: typeof writeSignal;
    serializeGraph: typeof serializeGraph;
};
export { DEV };
declare global {
    var Solid$$: boolean;
}
