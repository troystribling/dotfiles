import { createSignal as t, createComputed as n, For as e } from "solid-js";import { template as o, delegateEvents as r, setAttribute as i, memo as c, style as l, effect as s, insert as u, createComponent as d } from "solid-js/web";export default {};const a = o("<table><thead><tr></tr></thead><tbody></tbody></table>", 8),v = o("<th></th>", 2),f = o("<tr></tr>", 2),b = o("<td></td>", 2),h = o('<span class="sort-icon"></span>', 2);function m(o) {var r;const [c, m] = t(),[N, k] = t(o.rows);function j() {const t = c();return void 0 !== t ? t : void 0 !== o.defaultSortDirection ? o.defaultSortDirection : [null, null];}n(() => {k(o.rows);});const D = null !== (r = o.rowSorter) && void 0 !== r ? r : w;function C() {const t = j();null === t[0] && void 0 !== o.defaultSortDirection ? k(D(N(), o.defaultSortDirection)) : null !== t[0] && k(D(N(), t));}const { headerRenderer: R = _, bodyRenderer: x = S, getRowID: O = $, accessors: A } = o;return void 0 === o.columns && (o.columns = function (t, n = 0) {const e = t[n],o = Object.keys(e),r = o.length,i = new Array(r);for (let t = 0; t < r; t++) i[t] = { id: o[t] };return i;}(o.rows, o.representitiveRowNumber)), C(), (() => {const t = a.cloneNode(!0),n = t.firstChild,r = n.firstChild,c = n.nextSibling;return u(r, d(e, { get each() {return o.columns;}, children: t => {const n = !1 !== t.sortable;return (() => {const e = v.cloneNode(!0);var o;return e.__click = n ? (o = t.id, t => {m(function (t, n, e) {const o = t[0],r = t[1];return e ? t = [null, null] : o === n ? t[1] = "asc" === r ? "desc" : "asc" : t = [n, "asc"], t;}(j(), o, t.shiftKey)), C();}) : void 0, e.className = n ? "sortable" : void 0, u(e, () => R(t), null), u(e, () => n ? function (t, n) {let e;e = null === t[0] || t[0] !== n ? g : "asc" === t[1] ? y : p;return (() => {const t = h.cloneNode(!0);return u(t, e), t;})();}(j(), t.id) : void 0, null), s(() => i(e, "id", A ? String(t.id) : void 0)), e;})();} })), u(c, d(e, { get each() {return N();}, children: t => {const n = function (t) {return A ? O(t) : void 0;}(t);return (() => {const r = f.cloneNode(!0);return i(r, "id", n), u(r, d(e, { get each() {return o.columns;}, children: e => (() => {const o = b.cloneNode(!0);return o.__click = void 0 !== e.onClick ? n => e.onClick(n, t) : void 0, u(o, () => x(t, e.id)), s(() => i(o, "id", n ? `${n}.${e.id}` : void 0)), o;})() })), r;})();} })), s(n => {var e;const r = `solid-simple-table ${null !== (e = o.className) && void 0 !== e ? e : ""}`,i = o.style;return r !== n._v$ && (t.className = n._v$ = r), n._v$2 = l(t, i, n._v$2), n;}, { _v$: void 0, _v$2: void 0 }), t;})();}export { m as SimpleTable };const p = "↑",y = "↓",g = "⇅";function N(t) {return "string" == typeof t ? t : JSON.stringify(t);}function _(t) {var n;return null !== (n = t.label) && void 0 !== n ? n : t.id;}function S(t, n) {return N("object" == typeof t ? t[n] : t);}function $(t) {return N(t);}function w(t, n) {if (!t.length) return t;const e = n[0];return t = "object" == typeof t[0] ? t.sort((t, n) => {const o = t[e],r = n[e];return o == r ? 0 : o < r ? -1 : 1;}) : t.sort(), "desc" === n[1] ? t.reverse() : t;}r(["click"]);