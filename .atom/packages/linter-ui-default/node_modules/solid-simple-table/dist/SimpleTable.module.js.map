{"mappings":"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","sources":["./src/SimpleTable.tsx"],"sourcesContent":["import { createSignal, createComputed, For } from \"solid-js\"\nimport \"./SimpleTable.less\"\nimport {\n  Props,\n  IndexType,\n  SortDirectionSignal,\n  RowsSignal,\n  SortDirection,\n  NonNullSortDirection,\n  Row,\n  Column,\n} from \"./SimpleTable.types\"\n\nexport * from \"./SimpleTable.types\"\n\nexport function SimpleTable(props: Props<IndexType>) {\n  const [getSortDirectionSignal, setSortDirection] = createSignal<SortDirectionSignal>()\n  const [getRows, setRows] = createSignal<RowsSignal>(props.rows)\n\n  // update the local copy whenever the parent updates\n  createComputed(() => {\n    setRows(props.rows)\n  })\n\n  function getSortDirection(): SortDirection {\n    const sortDirection = getSortDirectionSignal()\n    if (sortDirection !== undefined) {\n      return sortDirection\n    }\n    // use default sort direction:\n    else if (props.defaultSortDirection !== undefined) {\n      return props.defaultSortDirection\n    } else {\n      return [null, null]\n    }\n  }\n\n  function generateSortCallback(columnID: IndexType) {\n    return (e: MouseEvent) => {\n      setSortDirection(sortClickHandler(getSortDirection(), columnID, /* append */ e.shiftKey))\n      sortRows()\n    }\n  }\n\n  const rowSorter: NonNullable<Props<IndexType>[\"rowSorter\"]> = props.rowSorter ?? defaultSorter\n\n  // Row sorting logic:\n  function sortRows() {\n    const currentSortDirection = getSortDirection()\n    // if should reset sort\n    if (\n      currentSortDirection[0] === null &&\n      /* if defaultSortDirection is provided */ props.defaultSortDirection !== undefined\n    ) {\n      // reset sort\n      setRows(rowSorter(getRows(), props.defaultSortDirection))\n    }\n    // if should sort normally\n    else if (currentSortDirection[0] !== null) {\n      setRows(rowSorter(getRows(), currentSortDirection))\n    } // else ignore sort\n  }\n\n  // static props:\n  // destructure the props that are not tracked and are used inside the loop (cache the property access)\n  const {\n    headerRenderer = defaultHeaderRenderer,\n    bodyRenderer = defaultBodyRenderer,\n    getRowID = defaultGetRowID,\n    accessors,\n  } = props\n\n  function maybeRowID(row: Row) {\n    // if accessors are needed\n    if (accessors) {\n      return getRowID(row)\n    } else {\n      return undefined\n    }\n  }\n\n  if (props.columns === undefined) {\n    props.columns = defaultColumnMaker(props.rows, props.representitiveRowNumber)\n  }\n\n  // initial sort\n  sortRows()\n\n  return (\n    <table className={`solid-simple-table ${props.className ?? \"\"}`} style={props.style}>\n      <thead>\n        <tr>\n          <For each={props.columns}>\n            {(column) => {\n              const isSortable = column.sortable !== false\n              return (\n                <th\n                  id={accessors ? String(column.id) : undefined}\n                  className={isSortable ? \"sortable\" : undefined}\n                  onClick={isSortable ? generateSortCallback(column.id) : undefined}\n                >\n                  {headerRenderer(column)}\n                  {isSortable ? renderHeaderIcon(getSortDirection(), column.id) : undefined}\n                </th>\n              )\n            }}\n          </For>\n        </tr>\n      </thead>\n      <tbody>\n        <For each={getRows()}>\n          {(row) => {\n            const rowID = maybeRowID(row)\n            return (\n              <tr id={rowID}>\n                <For each={props.columns!}>\n                  {(column) => {\n                    return (\n                      <td\n                        onClick={column.onClick !== undefined ? (e: MouseEvent) => column.onClick!(e, row) : undefined}\n                        id={rowID ? `${rowID}.${column.id}` : undefined}\n                      >\n                        {bodyRenderer(row, column.id)}\n                      </td>\n                    )\n                  }}\n                </For>\n              </tr>\n            )\n          }}\n        </For>\n      </tbody>\n    </table>\n  )\n}\n\nconst ARROW = {\n  UP: \"↑\",\n  DOWN: \"↓\",\n  BOTH: \"⇅\",\n}\n\nfunction defaultColumnMaker(rows: Array<Row>, representitiveRowNumber: number = 0) {\n  // construct the column information based on the representitive row\n  const representitiveRow = rows[representitiveRowNumber]\n  const columnIDs = Object.keys(representitiveRow)\n\n  // make Array<{key: columnID}>\n  const columnNumber = columnIDs.length\n  const columns: Array<Column> = new Array(columnNumber)\n  for (let iCol = 0; iCol < columnNumber; iCol++) {\n    columns[iCol] = { id: columnIDs[iCol] }\n  }\n  return columns\n}\n\n// Returns a string from any value\nfunction stringer(value: any) {\n  if (typeof value === \"string\") {\n    return value\n  } else {\n    return JSON.stringify(value)\n  }\n}\n\nfunction defaultHeaderRenderer(column: Column) {\n  return column.label ?? column.id\n}\n\nfunction defaultBodyRenderer(row: Row, columnID: IndexType) {\n  if (typeof row === \"object\") {\n    return stringer(row[columnID])\n  } else {\n    return stringer(row)\n  }\n}\n\nfunction defaultGetRowID(row: Row) {\n  return stringer(row)\n}\n\nfunction renderHeaderIcon(sortDirection: SortDirection, columnID: IndexType) {\n  let icon\n  if (sortDirection[0] === null || sortDirection[0] !== columnID) {\n    icon = ARROW.BOTH\n  } else {\n    icon = sortDirection[1] === \"asc\" ? ARROW.DOWN : ARROW.UP\n  }\n  return <span className=\"sort-icon\">{icon}</span>\n}\n\nfunction sortClickHandler(sortDirection: SortDirection, columnID: IndexType, append: boolean) {\n  const previousSortedColumn = sortDirection[0]\n  const previousSortedDirection = sortDirection[1]\n\n  // if holding shiftKey while clicking: reset sorting\n  if (append) {\n    sortDirection = [null, null]\n  }\n  // if clicking on an already sorted column: invert direction on click\n  else if (previousSortedColumn === columnID) {\n    sortDirection[1] = previousSortedDirection === \"asc\" ? \"desc\" : \"asc\" // invert direction\n  }\n  // if clicking on a new column\n  else {\n    sortDirection = [columnID, \"asc\"]\n  }\n  return sortDirection\n}\n\n/**\n Default alphabetical sort function\n @param rows: the rows of the table\n @param columnID: the last clicked columnID\n*/\nfunction defaultSorter(\n  rows: Array<number | string | Record<IndexType, any>>,\n  sortDirection: NonNullSortDirection\n): Array<Row> {\n  if (!rows.length) {\n    return rows\n  }\n  const columnID = sortDirection[0]\n  if (typeof rows[0] === \"object\") {\n    rows = rows.sort((r1, r2) => {\n      const r1_val = (r1 as Record<IndexType, any>)[columnID]\n      const r2_val = (r2 as Record<IndexType, any>)[columnID]\n      if (r1_val == r2_val) {\n        // equal values\n        return 0\n      } else if (r1_val < r2_val) {\n        return -1 //r1_val comes first\n      } else {\n        return 1 // r2_val comes first\n      }\n    })\n  } else {\n    rows = rows.sort()\n  }\n\n  return sortDirection[1] === \"desc\" ? rows.reverse() : rows\n}\n"],"names":["SimpleTable","props","getSortDirectionSignal","setSortDirection","createSignal","getRows","setRows","rows","getSortDirection","sortDirection","undefined","defaultSortDirection","createComputed","rowSorter","$f431d4e9e12f14585b509d2defcc83a2$var$defaultSorter","sortRows","currentSortDirection","headerRenderer","$f431d4e9e12f14585b509d2defcc83a2$var$defaultHeaderRenderer","bodyRenderer","$f431d4e9e12f14585b509d2defcc83a2$var$defaultBodyRenderer","getRowID","$f431d4e9e12f14585b509d2defcc83a2$var$defaultGetRowID","accessors","columns","representitiveRowNumber","representitiveRow","columnIDs","Object","keys","columnNumber","length","Array","iCol","id","$f431d4e9e12f14585b509d2defcc83a2$var$defaultColumnMaker","column","isSortable","sortable","columnID","e","append","previousSortedColumn","previousSortedDirection","$f431d4e9e12f14585b509d2defcc83a2$var$sortClickHandler","shiftKey","icon","$f431d4e9e12f14585b509d2defcc83a2$var$ARROW","$f431d4e9e12f14585b509d2defcc83a2$var$renderHeaderIcon","String","row","rowID","maybeRowID","onClick","className","_props$className","_v$2","style","$f431d4e9e12f14585b509d2defcc83a2$var$stringer","value","JSON","stringify","label","sort","r1","r2","r1_val","r2_val","reverse"],"version":3,"file":"SimpleTable.module.js.map"}